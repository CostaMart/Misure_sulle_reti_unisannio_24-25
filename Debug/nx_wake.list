
nx_wake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012cd4  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08012f20  08012f20  00022f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013208  08013208  000300e8  2**0
                  CONTENTS
  4 .ARM          00000000  08013208  08013208  000300e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013208  08013208  000300e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013208  08013208  00023208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801320c  0801320c  0002320c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08013210  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009194  200000e8  080132f8  000300e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000927c  080132f8  0003927c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003011e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00102402  00000000  00000000  00030161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000133bf  00000000  00000000  00132563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002680  00000000  00000000  00145928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a38  00000000  00000000  00147fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00047fe3  00000000  00000000  001499e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00061100  00000000  00000000  001919c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00156adc  00000000  00000000  001f2ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000076b8  00000000  00000000  003495a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000103  00000000  00000000  00350c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	200000e8 	.word	0x200000e8
 8000268:	00000000 	.word	0x00000000
 800026c:	08012f08 	.word	0x08012f08

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	200000ec 	.word	0x200000ec
 8000288:	08012f08 	.word	0x08012f08

0800028c <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 800028c:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800028e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000292:	4917      	ldr	r1, [pc, #92]	; (80002f0 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000294:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000298:	4816      	ldr	r0, [pc, #88]	; (80002f4 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029a:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 800029c:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a0:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a2:	4815      	ldr	r0, [pc, #84]	; (80002f8 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a4:	4912      	ldr	r1, [pc, #72]	; (80002f0 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002a6:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002a8:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002aa:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ae:	4913      	ldr	r1, [pc, #76]	; (80002fc <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b0:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b2:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002b6:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002b8:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002bc:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c4:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002c8:	490d      	ldr	r1, [pc, #52]	; (8000300 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ca:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_BadHandler>

080002d4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002da:	4770      	bx	lr

080002dc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002dc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002de:	f000 f897 	bl	8000410 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002e6:	4770      	bx	lr

080002e8 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002e8:	f7ff bffe 	b.w	80002e8 <__tx_NMIHandler>

080002ec <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f0:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f4:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002f8:	20008090 	.word	0x20008090
    LDR     r1, =SYSTICK_CYCLES
 80002fc:	0026259f 	.word	0x0026259f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000300:	40ff0000 	.word	0x40ff0000

08000304 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000304:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000308:	4a2d      	ldr	r2, [pc, #180]	; (80003c0 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800030c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000310:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000314:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000318:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800031e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000322:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000326:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032a:	f3bf 8f6f 	isb	sy

0800032e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800032e:	e7fe      	b.n	800032e <__tx_wait_here>

08000330 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000330:	4824      	ldr	r0, [pc, #144]	; (80003c4 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000332:	4a25      	ldr	r2, [pc, #148]	; (80003c8 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000334:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000338:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033a:	b191      	cbz	r1, 8000362 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800033c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800033e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000342:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000346:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034a:	d101      	bne.n	8000350 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 800034c:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000350 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000350:	4c1e      	ldr	r4, [pc, #120]	; (80003cc <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000352:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000356:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035a:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 800035c:	b10d      	cbz	r5, 8000362 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800035e:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000360:	6023      	str	r3, [r4, #0]

08000362 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000362:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000364:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000366:	b1d1      	cbz	r1, 800039e <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000368:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036a:	b662      	cpsie	i

0800036c <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800036c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800036e:	4c17      	ldr	r4, [pc, #92]	; (80003cc <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000370:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000372:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000376:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000378:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800037e:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000382:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000386:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800038e:	d101      	bne.n	8000394 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000390:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000394 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000394:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000398:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 800039c:	4770      	bx	lr

0800039e <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800039e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a0:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a2:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a4:	b909      	cbnz	r1, 80003aa <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a6:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a8:	e7f9      	b.n	800039e <__tx_ts_wait>

080003aa <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003aa:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003ae:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b2:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b6:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b8:	e7d8      	b.n	800036c <__tx_ts_restore>
 80003ba:	bf00      	nop

080003bc <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003bc:	4770      	bx	lr
 80003be:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c0:	2000812c 	.word	0x2000812c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c4:	20008094 	.word	0x20008094
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c8:	20008098 	.word	0x20008098
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003cc:	20008698 	.word	0x20008698

080003d0 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d6:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003da:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003de:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ea:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003ec:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ee:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f4:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f6:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003fc:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000402:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000404:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000406:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800040c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040e:	4770      	bx	lr

08000410 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000410:	4922      	ldr	r1, [pc, #136]	; (800049c <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000412:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000414:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000418:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041a:	4b21      	ldr	r3, [pc, #132]	; (80004a0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800041c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041e:	b13a      	cbz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000420:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000424:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000426:	b91a      	cbnz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000428:	4b1e      	ldr	r3, [pc, #120]	; (80004a4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042e:	6018      	str	r0, [r3, #0]

08000430 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000430:	491d      	ldr	r1, [pc, #116]	; (80004a8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000432:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000434:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000436:	b122      	cbz	r2, 8000442 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000438:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000440:	e008      	b.n	8000454 <__tx_timer_done>

08000442 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000442:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000448:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800044c:	d101      	bne.n	8000452 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044e:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000450:	6818      	ldr	r0, [r3, #0]

08000452 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000452:	6008      	str	r0, [r1, #0]

08000454 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000458:	b912      	cbnz	r2, 8000460 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045a:	4914      	ldr	r1, [pc, #80]	; (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800045c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045e:	b1c8      	cbz	r0, 8000494 <__tx_timer_nothing_expired>

08000460 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000460:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000462:	4912      	ldr	r1, [pc, #72]	; (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000464:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000466:	b108      	cbz	r0, 800046c <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000468:	f010 fde2 	bl	8011030 <_tx_timer_expiration_process>

0800046c <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800046c:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046e:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000470:	b172      	cbz	r2, 8000490 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000472:	f010 fceb 	bl	8010e4c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000476:	4810      	ldr	r0, [pc, #64]	; (80004b8 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000478:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047a:	b949      	cbnz	r1, 8000490 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800047c:	480f      	ldr	r0, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047e:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000480:	4a0f      	ldr	r2, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000482:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000484:	480f      	ldr	r0, [pc, #60]	; (80004c4 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048a:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800048c:	d000      	beq.n	8000490 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048e:	6002      	str	r2, [r0, #0]

08000490 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000490:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000494 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000494:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000498:	4770      	bx	lr
 800049a:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800049c:	20008138 	.word	0x20008138
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a0:	20008698 	.word	0x20008698
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a4:	2000813c 	.word	0x2000813c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a8:	200081c8 	.word	0x200081c8
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004ac:	200081cc 	.word	0x200081cc
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b0:	200081c4 	.word	0x200081c4
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b4:	200081c0 	.word	0x200081c0
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b8:	2000812c 	.word	0x2000812c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004bc:	20008094 	.word	0x20008094
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c0:	20008098 	.word	0x20008098
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c4:	e000ed04 	.word	0xe000ed04

080004c8 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80004d4:	2334      	movs	r3, #52	; 0x34
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004dc:	4a15      	ldr	r2, [pc, #84]	; (8000534 <tx_application_define+0x6c>)
 80004de:	4916      	ldr	r1, [pc, #88]	; (8000538 <tx_application_define+0x70>)
 80004e0:	4816      	ldr	r0, [pc, #88]	; (800053c <tx_application_define+0x74>)
 80004e2:	f011 f84f 	bl	8011584 <_txe_byte_pool_create>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d109      	bne.n	8000500 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80004ec:	4b13      	ldr	r3, [pc, #76]	; (800053c <tx_application_define+0x74>)
 80004ee:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80004f0:	68b8      	ldr	r0, [r7, #8]
 80004f2:	f000 f82b 	bl	800054c <App_ThreadX_Init>
 80004f6:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d000      	beq.n	8000500 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80004fe:	e7fe      	b.n	80004fe <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&nx_app_byte_pool, "Nx App memory pool", nx_byte_pool_buffer, NX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000500:	2334      	movs	r3, #52	; 0x34
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <tx_application_define+0x78>)
 800050a:	490e      	ldr	r1, [pc, #56]	; (8000544 <tx_application_define+0x7c>)
 800050c:	480e      	ldr	r0, [pc, #56]	; (8000548 <tx_application_define+0x80>)
 800050e:	f011 f839 	bl	8011584 <_txe_byte_pool_create>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d109      	bne.n	800052c <tx_application_define+0x64>
  {
    /* USER CODE BEGIN NX_Byte_Pool_Success */

    /* USER CODE END NX_Byte_Pool_Success */

    memory_ptr = (VOID *)&nx_app_byte_pool;
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <tx_application_define+0x80>)
 800051a:	60bb      	str	r3, [r7, #8]
    status = MX_NetXDuo_Init(memory_ptr);
 800051c:	68b8      	ldr	r0, [r7, #8]
 800051e:	f011 f9fd 	bl	801191c <MX_NetXDuo_Init>
 8000522:	60f8      	str	r0, [r7, #12]
    if (status != NX_SUCCESS)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d000      	beq.n	800052c <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_NetXDuo_Init_Error */
      while(1)
 800052a:	e7fe      	b.n	800052a <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000104 	.word	0x20000104
 8000538:	08012f20 	.word	0x08012f20
 800053c:	20000504 	.word	0x20000504
 8000540:	20000538 	.word	0x20000538
 8000544:	08012f34 	.word	0x08012f34
 8000548:	20007d38 	.word	0x20007d38

0800054c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000558:	68fb      	ldr	r3, [r7, #12]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 800056a:	f00f f8e5 	bl	800f738 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}

08000572 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fde5 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f809 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f8c5 	bl	800070c <MX_GPIO_Init>
  MX_ETH_Init();
 8000582:	f000 f86b 	bl	800065c <MX_ETH_Init>
  MX_ICACHE_Init();
 8000586:	f000 f8b5 	bl	80006f4 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800058a:	f7ff ffec 	bl	8000566 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058e:	e7fe      	b.n	800058e <main+0x1c>

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b09c      	sub	sp, #112	; 0x70
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2250      	movs	r2, #80	; 0x50
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f011 fe8a 	bl	80122b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
 80005b4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <SystemClock_Config+0xc8>)
 80005b8:	691b      	ldr	r3, [r3, #16]
 80005ba:	4a27      	ldr	r2, [pc, #156]	; (8000658 <SystemClock_Config+0xc8>)
 80005bc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80005c0:	6113      	str	r3, [r2, #16]
 80005c2:	4b25      	ldr	r3, [pc, #148]	; (8000658 <SystemClock_Config+0xc8>)
 80005c4:	691b      	ldr	r3, [r3, #16]
 80005c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005ce:	bf00      	nop
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <SystemClock_Config+0xc8>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	f003 0308 	and.w	r3, r3, #8
 80005d8:	2b08      	cmp	r3, #8
 80005da:	d1f9      	bne.n	80005d0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 80005e0:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80005ea:	2303      	movs	r3, #3
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ee:	2304      	movs	r3, #4
 80005f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80005f2:	23fa      	movs	r3, #250	; 0xfa
 80005f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005fe:	2302      	movs	r3, #2
 8000600:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000602:	2304      	movs	r3, #4
 8000604:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000606:	2300      	movs	r3, #0
 8000608:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fe78 	bl	8003308 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800061e:	f000 f931 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	231f      	movs	r3, #31
 8000624:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2303      	movs	r3, #3
 8000628:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	2105      	movs	r1, #5
 8000640:	4618      	mov	r0, r3
 8000642:	f003 fa99 	bl	8003b78 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800064c:	f000 f91a 	bl	8000884 <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3770      	adds	r7, #112	; 0x70
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	44020800 	.word	0x44020800

0800065c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <MX_ETH_Init+0x80>)
 8000662:	4a1f      	ldr	r2, [pc, #124]	; (80006e0 <MX_ETH_Init+0x84>)
 8000664:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_ETH_Init+0x88>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <MX_ETH_Init+0x88>)
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_ETH_Init+0x88>)
 8000674:	22e1      	movs	r2, #225	; 0xe1
 8000676:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_ETH_Init+0x88>)
 800067a:	2200      	movs	r2, #0
 800067c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_ETH_Init+0x88>)
 8000680:	2200      	movs	r2, #0
 8000682:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_ETH_Init+0x88>)
 8000686:	2200      	movs	r2, #0
 8000688:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_ETH_Init+0x80>)
 800068c:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <MX_ETH_Init+0x88>)
 800068e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_ETH_Init+0x80>)
 8000692:	2201      	movs	r2, #1
 8000694:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_ETH_Init+0x80>)
 8000698:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_ETH_Init+0x8c>)
 800069a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_ETH_Init+0x80>)
 800069e:	4a13      	ldr	r2, [pc, #76]	; (80006ec <MX_ETH_Init+0x90>)
 80006a0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_ETH_Init+0x80>)
 80006a4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006a8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006aa:	480c      	ldr	r0, [pc, #48]	; (80006dc <MX_ETH_Init+0x80>)
 80006ac:	f000 feaa 	bl	8001404 <HAL_ETH_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80006b6:	f000 f8e5 	bl	8000884 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006ba:	2238      	movs	r2, #56	; 0x38
 80006bc:	2100      	movs	r1, #0
 80006be:	480c      	ldr	r0, [pc, #48]	; (80006f0 <MX_ETH_Init+0x94>)
 80006c0:	f011 fdfa 	bl	80122b8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_ETH_Init+0x94>)
 80006c6:	2221      	movs	r2, #33	; 0x21
 80006c8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_ETH_Init+0x94>)
 80006cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006d0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_ETH_Init+0x94>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20007e64 	.word	0x20007e64
 80006e0:	40028000 	.word	0x40028000
 80006e4:	20007f14 	.word	0x20007f14
 80006e8:	20007e04 	.word	0x20007e04
 80006ec:	20007da4 	.word	0x20007da4
 80006f0:	20007d6c 	.word	0x20007d6c

080006f4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80006f8:	f002 fdb4 	bl	8003264 <HAL_ICACHE_Enable>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000702:	f000 f8bf 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	; 0x30
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b4b      	ldr	r3, [pc, #300]	; (8000850 <MX_GPIO_Init+0x144>)
 8000724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000728:	4a49      	ldr	r2, [pc, #292]	; (8000850 <MX_GPIO_Init+0x144>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000732:	4b47      	ldr	r3, [pc, #284]	; (8000850 <MX_GPIO_Init+0x144>)
 8000734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000738:	f003 0304 	and.w	r3, r3, #4
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000740:	4b43      	ldr	r3, [pc, #268]	; (8000850 <MX_GPIO_Init+0x144>)
 8000742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000746:	4a42      	ldr	r2, [pc, #264]	; (8000850 <MX_GPIO_Init+0x144>)
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000750:	4b3f      	ldr	r3, [pc, #252]	; (8000850 <MX_GPIO_Init+0x144>)
 8000752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000756:	f003 0320 	and.w	r3, r3, #32
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	4b3c      	ldr	r3, [pc, #240]	; (8000850 <MX_GPIO_Init+0x144>)
 8000760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000764:	4a3a      	ldr	r2, [pc, #232]	; (8000850 <MX_GPIO_Init+0x144>)
 8000766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800076e:	4b38      	ldr	r3, [pc, #224]	; (8000850 <MX_GPIO_Init+0x144>)
 8000770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	4b34      	ldr	r3, [pc, #208]	; (8000850 <MX_GPIO_Init+0x144>)
 800077e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000782:	4a33      	ldr	r2, [pc, #204]	; (8000850 <MX_GPIO_Init+0x144>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800078c:	4b30      	ldr	r3, [pc, #192]	; (8000850 <MX_GPIO_Init+0x144>)
 800078e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <MX_GPIO_Init+0x144>)
 800079c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007a0:	4a2b      	ldr	r2, [pc, #172]	; (8000850 <MX_GPIO_Init+0x144>)
 80007a2:	f043 0302 	orr.w	r3, r3, #2
 80007a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007aa:	4b29      	ldr	r3, [pc, #164]	; (8000850 <MX_GPIO_Init+0x144>)
 80007ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007b8:	4b25      	ldr	r3, [pc, #148]	; (8000850 <MX_GPIO_Init+0x144>)
 80007ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007be:	4a24      	ldr	r2, [pc, #144]	; (8000850 <MX_GPIO_Init+0x144>)
 80007c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007c8:	4b21      	ldr	r3, [pc, #132]	; (8000850 <MX_GPIO_Init+0x144>)
 80007ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2110      	movs	r1, #16
 80007da:	481e      	ldr	r0, [pc, #120]	; (8000854 <MX_GPIO_Init+0x148>)
 80007dc:	f002 fd10 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2101      	movs	r1, #1
 80007e4:	481c      	ldr	r0, [pc, #112]	; (8000858 <MX_GPIO_Init+0x14c>)
 80007e6:	f002 fd0b 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2110      	movs	r1, #16
 80007ee:	481b      	ldr	r0, [pc, #108]	; (800085c <MX_GPIO_Init+0x150>)
 80007f0:	f002 fd06 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_YELLOW_Pin;
 80007f4:	2310      	movs	r3, #16
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	4812      	ldr	r0, [pc, #72]	; (8000854 <MX_GPIO_Init+0x148>)
 800080c:	f002 fba6 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000810:	2301      	movs	r3, #1
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	480c      	ldr	r0, [pc, #48]	; (8000858 <MX_GPIO_Init+0x14c>)
 8000828:	f002 fb98 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 800082c:	2310      	movs	r3, #16
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <MX_GPIO_Init+0x150>)
 8000844:	f002 fb8a 	bl	8002f5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000848:	bf00      	nop
 800084a:	3730      	adds	r7, #48	; 0x30
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	44020c00 	.word	0x44020c00
 8000854:	42021400 	.word	0x42021400
 8000858:	42020400 	.word	0x42020400
 800085c:	42021800 	.word	0x42021800

08000860 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d101      	bne.n	8000876 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000872:	f000 fc8d 	bl	8001190 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40001000 	.word	0x40001000

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>

0800088e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08e      	sub	sp, #56	; 0x38
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a61      	ldr	r2, [pc, #388]	; (8000a40 <HAL_ETH_MspInit+0x1a4>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	f040 80bb 	bne.w	8000a36 <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80008c0:	4b60      	ldr	r3, [pc, #384]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 80008c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c6:	4a5f      	ldr	r2, [pc, #380]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 80008c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80008d0:	4b5c      	ldr	r3, [pc, #368]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008da:	623b      	str	r3, [r7, #32]
 80008dc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 80008de:	4b59      	ldr	r3, [pc, #356]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 80008e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e4:	4a57      	ldr	r2, [pc, #348]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 80008e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80008ee:	4b55      	ldr	r3, [pc, #340]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 80008f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008f8:	61fb      	str	r3, [r7, #28]
 80008fa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 80008fc:	4b51      	ldr	r3, [pc, #324]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a50      	ldr	r2, [pc, #320]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 8000904:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800090c:	4b4d      	ldr	r3, [pc, #308]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000916:	61bb      	str	r3, [r7, #24]
 8000918:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b4a      	ldr	r3, [pc, #296]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 800091c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000920:	4a48      	ldr	r2, [pc, #288]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800092a:	4b46      	ldr	r3, [pc, #280]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 800092c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b42      	ldr	r3, [pc, #264]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 800093a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800093e:	4a41      	ldr	r2, [pc, #260]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000948:	4b3e      	ldr	r3, [pc, #248]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 800094a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b3b      	ldr	r3, [pc, #236]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 8000958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800095c:	4a39      	ldr	r2, [pc, #228]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 800095e:	f043 0302 	orr.w	r3, r3, #2
 8000962:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000966:	4b37      	ldr	r3, [pc, #220]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 8000968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800096c:	f003 0302 	and.w	r3, r3, #2
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000974:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 8000976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800097a:	4a32      	ldr	r2, [pc, #200]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 800097c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000980:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000984:	4b2f      	ldr	r3, [pc, #188]	; (8000a44 <HAL_ETH_MspInit+0x1a8>)
 8000986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800098a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB15     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000992:	2332      	movs	r3, #50	; 0x32
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099e:	2302      	movs	r3, #2
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a2:	230b      	movs	r3, #11
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	4826      	ldr	r0, [pc, #152]	; (8000a48 <HAL_ETH_MspInit+0x1ac>)
 80009ae:	f002 fad5 	bl	8002f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80009b2:	2386      	movs	r3, #134	; 0x86
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009be:	2302      	movs	r3, #2
 80009c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009c2:	230b      	movs	r3, #11
 80009c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ca:	4619      	mov	r1, r3
 80009cc:	481f      	ldr	r0, [pc, #124]	; (8000a4c <HAL_ETH_MspInit+0x1b0>)
 80009ce:	f002 fac5 	bl	8002f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e0:	2302      	movs	r3, #2
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009e4:	230b      	movs	r3, #11
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	4818      	ldr	r0, [pc, #96]	; (8000a50 <HAL_ETH_MspInit+0x1b4>)
 80009f0:	f002 fab4 	bl	8002f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80009f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a02:	2302      	movs	r3, #2
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a06:	230b      	movs	r3, #11
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4810      	ldr	r0, [pc, #64]	; (8000a54 <HAL_ETH_MspInit+0x1b8>)
 8000a12:	f002 faa3 	bl	8002f5c <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2107      	movs	r1, #7
 8000a1a:	206a      	movs	r0, #106	; 0x6a
 8000a1c:	f000 fcca 	bl	80013b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000a20:	206a      	movs	r0, #106	; 0x6a
 8000a22:	f000 fce1 	bl	80013e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	206b      	movs	r0, #107	; 0x6b
 8000a2c:	f000 fcc2 	bl	80013b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8000a30:	206b      	movs	r0, #107	; 0x6b
 8000a32:	f000 fcd9 	bl	80013e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3738      	adds	r7, #56	; 0x38
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40028000 	.word	0x40028000
 8000a44:	44020c00 	.word	0x44020c00
 8000a48:	42020800 	.word	0x42020800
 8000a4c:	42020000 	.word	0x42020000
 8000a50:	42020400 	.word	0x42020400
 8000a54:	42021800 	.word	0x42021800

08000a58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08e      	sub	sp, #56	; 0x38
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a60:	4b33      	ldr	r3, [pc, #204]	; (8000b30 <HAL_InitTick+0xd8>)
 8000a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a66:	4a32      	ldr	r2, [pc, #200]	; (8000b30 <HAL_InitTick+0xd8>)
 8000a68:	f043 0310 	orr.w	r3, r3, #16
 8000a6c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000a70:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <HAL_InitTick+0xd8>)
 8000a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a7e:	f107 020c 	add.w	r2, r7, #12
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f003 fb8b 	bl	80041a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d103      	bne.n	8000aa0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a98:	f003 fb6e 	bl	8004178 <HAL_RCC_GetPCLK1Freq>
 8000a9c:	6378      	str	r0, [r7, #52]	; 0x34
 8000a9e:	e004      	b.n	8000aaa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aa0:	f003 fb6a 	bl	8004178 <HAL_RCC_GetPCLK1Freq>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aac:	095b      	lsrs	r3, r3, #5
 8000aae:	4a21      	ldr	r2, [pc, #132]	; (8000b34 <HAL_InitTick+0xdc>)
 8000ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab4:	09db      	lsrs	r3, r3, #7
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <HAL_InitTick+0xe0>)
 8000abc:	4a1f      	ldr	r2, [pc, #124]	; (8000b3c <HAL_InitTick+0xe4>)
 8000abe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <HAL_InitTick+0xe0>)
 8000ac2:	2263      	movs	r2, #99	; 0x63
 8000ac4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ac6:	4a1c      	ldr	r2, [pc, #112]	; (8000b38 <HAL_InitTick+0xe0>)
 8000ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <HAL_InitTick+0xe0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <HAL_InitTick+0xe0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000ad8:	4817      	ldr	r0, [pc, #92]	; (8000b38 <HAL_InitTick+0xe0>)
 8000ada:	f003 fb9b 	bl	8004214 <HAL_TIM_Base_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ae4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d118      	bne.n	8000b1e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000aec:	4812      	ldr	r0, [pc, #72]	; (8000b38 <HAL_InitTick+0xe0>)
 8000aee:	f003 fbf3 	bl	80042d8 <HAL_TIM_Base_Start_IT>
 8000af2:	4603      	mov	r3, r0
 8000af4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000af8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d10e      	bne.n	8000b1e <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b0f      	cmp	r3, #15
 8000b04:	d808      	bhi.n	8000b18 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000b06:	2200      	movs	r2, #0
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	2031      	movs	r0, #49	; 0x31
 8000b0c:	f000 fc52 	bl	80013b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b10:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <HAL_InitTick+0xe8>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e002      	b.n	8000b1e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000b1e:	2031      	movs	r0, #49	; 0x31
 8000b20:	f000 fc62 	bl	80013e8 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8000b24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3738      	adds	r7, #56	; 0x38
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	44020c00 	.word	0x44020c00
 8000b34:	0a7c5ac5 	.word	0x0a7c5ac5
 8000b38:	20007f1c 	.word	0x20007f1c
 8000b3c:	40001000 	.word	0x40001000
 8000b40:	20000004 	.word	0x20000004

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <TIM6_IRQHandler+0x10>)
 8000b76:	f003 fc5d 	bl	8004434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20007f1c 	.word	0x20007f1c

08000b84 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <ETH_IRQHandler+0x10>)
 8000b8a:	f000 ffd9 	bl	8001b40 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20007e64 	.word	0x20007e64

08000b98 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet Wakeup global interrupt.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <ETH_WKUP_IRQHandler+0x10>)
 8000b9e:	f000 ffcf 	bl	8001b40 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20007e64 	.word	0x20007e64

08000bac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return 1;
 8000bb0:	2301      	movs	r3, #1
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_kill>:

int _kill(int pid, int sig)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bc6:	f011 fbc5 	bl	8012354 <__errno>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2216      	movs	r2, #22
 8000bce:	601a      	str	r2, [r3, #0]
  return -1;
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <_exit>:

void _exit (int status)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ffe7 	bl	8000bbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bee:	e7fe      	b.n	8000bee <_exit+0x12>

08000bf0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e00a      	b.n	8000c18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c02:	f3af 8000 	nop.w
 8000c06:	4601      	mov	r1, r0
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	60ba      	str	r2, [r7, #8]
 8000c0e:	b2ca      	uxtb	r2, r1
 8000c10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3301      	adds	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697a      	ldr	r2, [r7, #20]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	dbf0      	blt.n	8000c02 <_read+0x12>
  }

  return len;
 8000c20:	687b      	ldr	r3, [r7, #4]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	e009      	b.n	8000c50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	1c5a      	adds	r2, r3, #1
 8000c40:	60ba      	str	r2, [r7, #8]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	dbf1      	blt.n	8000c3c <_write+0x12>
  }
  return len;
 8000c58:	687b      	ldr	r3, [r7, #4]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_close>:

int _close(int file)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <_isatty>:

int _isatty(int file)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f011 fb2a 	bl	8012354 <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200a0000 	.word	0x200a0000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	20007f68 	.word	0x20007f68
 8000d34:	20009280 	.word	0x20009280

08000d38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d3e:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <SystemInit+0xdc>)
 8000d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d44:	4a33      	ldr	r2, [pc, #204]	; (8000e14 <SystemInit+0xdc>)
 8000d46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000d4e:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <SystemInit+0xe0>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000d54:	4b30      	ldr	r3, [pc, #192]	; (8000e18 <SystemInit+0xe0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000d5a:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <SystemInit+0xe0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000d60:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <SystemInit+0xe0>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	492c      	ldr	r1, [pc, #176]	; (8000e18 <SystemInit+0xe0>)
 8000d66:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <SystemInit+0xe4>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <SystemInit+0xe0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000d72:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <SystemInit+0xe0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000d78:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <SystemInit+0xe0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000d7e:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <SystemInit+0xe0>)
 8000d80:	4a27      	ldr	r2, [pc, #156]	; (8000e20 <SystemInit+0xe8>)
 8000d82:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000d84:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <SystemInit+0xe0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000d8a:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <SystemInit+0xe0>)
 8000d8c:	4a24      	ldr	r2, [pc, #144]	; (8000e20 <SystemInit+0xe8>)
 8000d8e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000d90:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <SystemInit+0xe0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000d96:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <SystemInit+0xe0>)
 8000d98:	4a21      	ldr	r2, [pc, #132]	; (8000e20 <SystemInit+0xe8>)
 8000d9a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000d9c:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <SystemInit+0xe0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <SystemInit+0xe0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <SystemInit+0xe0>)
 8000da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <SystemInit+0xe0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <SystemInit+0xdc>)
 8000db6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dba:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000dbc:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <SystemInit+0xec>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000dc4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000dcc:	d003      	beq.n	8000dd6 <SystemInit+0x9e>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000dd4:	d117      	bne.n	8000e06 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <SystemInit+0xec>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d005      	beq.n	8000dee <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <SystemInit+0xec>)
 8000de4:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <SystemInit+0xf0>)
 8000de6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <SystemInit+0xec>)
 8000dea:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <SystemInit+0xf4>)
 8000dec:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <SystemInit+0xec>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a0c      	ldr	r2, [pc, #48]	; (8000e24 <SystemInit+0xec>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <SystemInit+0xec>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <SystemInit+0xec>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	61d3      	str	r3, [r2, #28]
  }
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00
 8000e18:	44020c00 	.word	0x44020c00
 8000e1c:	eae2eae3 	.word	0xeae2eae3
 8000e20:	01010280 	.word	0x01010280
 8000e24:	40022000 	.word	0x40022000
 8000e28:	08192a3b 	.word	0x08192a3b
 8000e2c:	4c5d6e7f 	.word	0x4c5d6e7f

08000e30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e34:	f7ff ff80 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	; (8000e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <LoopForever+0xe>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	; (8000e7c <LoopForever+0x16>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e5e:	f011 fa7f 	bl	8012360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e62:	f7ff fb86 	bl	8000572 <main>

08000e66 <LoopForever>:

LoopForever:
    b LoopForever
 8000e66:	e7fe      	b.n	8000e66 <LoopForever>
  ldr   r0, =_estack
 8000e68:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8000e74:	08013210 	.word	0x08013210
  ldr r2, =_sbss
 8000e78:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000e7c:	2000927c 	.word	0x2000927c

08000e80 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_IRQHandler>

08000e82 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00b      	beq.n	8000eaa <LAN8742_RegisterBusIO+0x28>
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d007      	beq.n	8000eaa <LAN8742_RegisterBusIO+0x28>
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <LAN8742_RegisterBusIO+0x28>
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d102      	bne.n	8000eb0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	e014      	b.n	8000eda <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d17c      	bne.n	8001000 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2220      	movs	r2, #32
 8000f18:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	e01c      	b.n	8000f5a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	f107 0208 	add.w	r2, r7, #8
 8000f28:	2112      	movs	r1, #18
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	4798      	blx	r3
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	da03      	bge.n	8000f3c <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000f34:	f06f 0304 	mvn.w	r3, #4
 8000f38:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000f3a:	e00b      	b.n	8000f54 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	f003 031f 	and.w	r3, r3, #31
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d105      	bne.n	8000f54 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
         break;
 8000f52:	e005      	b.n	8000f60 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	2b1f      	cmp	r3, #31
 8000f5e:	d9df      	bls.n	8000f20 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b1f      	cmp	r3, #31
 8000f66:	d902      	bls.n	8000f6e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f68:	f06f 0302 	mvn.w	r3, #2
 8000f6c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d145      	bne.n	8001000 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	6810      	ldr	r0, [r2, #0]
 8000f7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f80:	2100      	movs	r1, #0
 8000f82:	4798      	blx	r3
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db37      	blt.n	8000ffa <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	6810      	ldr	r0, [r2, #0]
 8000f92:	f107 0208 	add.w	r2, r7, #8
 8000f96:	2100      	movs	r1, #0
 8000f98:	4798      	blx	r3
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db28      	blt.n	8000ff2 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4798      	blx	r3
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000faa:	e01c      	b.n	8000fe6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4798      	blx	r3
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fbe:	d80e      	bhi.n	8000fde <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	6810      	ldr	r0, [r2, #0]
 8000fc8:	f107 0208 	add.w	r2, r7, #8
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4798      	blx	r3
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	da07      	bge.n	8000fe6 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8000fd6:	f06f 0304 	mvn.w	r3, #4
 8000fda:	613b      	str	r3, [r7, #16]
                 break;
 8000fdc:	e010      	b.n	8001000 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000fde:	f06f 0301 	mvn.w	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
               break;
 8000fe4:	e00c      	b.n	8001000 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1dd      	bne.n	8000fac <LAN8742_Init+0xc6>
 8000ff0:	e006      	b.n	8001000 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000ff2:	f06f 0304 	mvn.w	r3, #4
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	e002      	b.n	8001000 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000ffa:	f06f 0303 	mvn.w	r3, #3
 8000ffe:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d112      	bne.n	800102c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	4798      	blx	r3
 800100c:	4603      	mov	r3, r0
 800100e:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001010:	bf00      	nop
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	4798      	blx	r3
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001024:	d9f5      	bls.n	8001012 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	605a      	str	r2, [r3, #4]
   }

   return status;
 800102c:	693b      	ldr	r3, [r7, #16]
 }
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	6810      	ldr	r0, [r2, #0]
 800104a:	f107 020c 	add.w	r2, r7, #12
 800104e:	2101      	movs	r1, #1
 8001050:	4798      	blx	r3
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	da02      	bge.n	800105e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001058:	f06f 0304 	mvn.w	r3, #4
 800105c:	e06e      	b.n	800113c <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	6810      	ldr	r0, [r2, #0]
 8001066:	f107 020c 	add.w	r2, r7, #12
 800106a:	2101      	movs	r1, #1
 800106c:	4798      	blx	r3
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	da02      	bge.n	800107a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001074:	f06f 0304 	mvn.w	r3, #4
 8001078:	e060      	b.n	800113c <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001084:	2301      	movs	r3, #1
 8001086:	e059      	b.n	800113c <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	6810      	ldr	r0, [r2, #0]
 8001090:	f107 020c 	add.w	r2, r7, #12
 8001094:	2100      	movs	r1, #0
 8001096:	4798      	blx	r3
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	da02      	bge.n	80010a4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800109e:	f06f 0304 	mvn.w	r3, #4
 80010a2:	e04b      	b.n	800113c <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d11b      	bne.n	80010e6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d006      	beq.n	80010c6 <LAN8742_GetLinkState+0x90>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010c2:	2302      	movs	r3, #2
 80010c4:	e03a      	b.n	800113c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e033      	b.n	800113c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010de:	2304      	movs	r3, #4
 80010e0:	e02c      	b.n	800113c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010e2:	2305      	movs	r3, #5
 80010e4:	e02a      	b.n	800113c <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	6810      	ldr	r0, [r2, #0]
 80010ee:	f107 020c 	add.w	r2, r7, #12
 80010f2:	211f      	movs	r1, #31
 80010f4:	4798      	blx	r3
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	da02      	bge.n	8001102 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80010fc:	f06f 0304 	mvn.w	r3, #4
 8001100:	e01c      	b.n	800113c <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800110c:	2306      	movs	r3, #6
 800110e:	e015      	b.n	800113c <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 031c 	and.w	r3, r3, #28
 8001116:	2b18      	cmp	r3, #24
 8001118:	d101      	bne.n	800111e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800111a:	2302      	movs	r3, #2
 800111c:	e00e      	b.n	800113c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f003 031c 	and.w	r3, r3, #28
 8001124:	2b08      	cmp	r3, #8
 8001126:	d101      	bne.n	800112c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001128:	2303      	movs	r3, #3
 800112a:	e007      	b.n	800113c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 031c 	and.w	r3, r3, #28
 8001132:	2b14      	cmp	r3, #20
 8001134:	d101      	bne.n	800113a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001136:	2304      	movs	r3, #4
 8001138:	e000      	b.n	800113c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800113a:	2305      	movs	r3, #5
    }
  }
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001148:	2003      	movs	r0, #3
 800114a:	f000 f928 	bl	800139e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800114e:	f002 fecb 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8001152:	4602      	mov	r2, r0
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_Init+0x40>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	f003 030f 	and.w	r3, r3, #15
 800115c:	490a      	ldr	r1, [pc, #40]	; (8001188 <HAL_Init+0x44>)
 800115e:	5ccb      	ldrb	r3, [r1, r3]
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	4a09      	ldr	r2, [pc, #36]	; (800118c <HAL_Init+0x48>)
 8001166:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001168:	200f      	movs	r0, #15
 800116a:	f7ff fc75 	bl	8000a58 <HAL_InitTick>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e002      	b.n	800117e <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff fb89 	bl	800088e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	44020c00 	.word	0x44020c00
 8001188:	08013110 	.word	0x08013110
 800118c:	20000000 	.word	0x20000000

08001190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20007f6c 	.word	0x20007f6c

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20007f6c 	.word	0x20007f6c

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff ffee 	bl	80011b8 <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d005      	beq.n	80011f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_Delay+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f6:	bf00      	nop
 80011f8:	f7ff ffde 	bl	80011b8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8f7      	bhi.n	80011f8 <HAL_Delay+0x28>
  {
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008

08001218 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001222:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001226:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800122a:	4905      	ldr	r1, [pc, #20]	; (8001240 <HAL_SBS_ETHInterfaceSelect+0x28>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4313      	orrs	r3, r2
 8001230:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	44000400 	.word	0x44000400

08001244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001260:	4013      	ands	r3, r2
 8001262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800126c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	60d3      	str	r3, [r2, #12]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	f003 0307 	and.w	r3, r3, #7
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	db0b      	blt.n	80012d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	f003 021f 	and.w	r2, r3, #31
 80012c0:	4907      	ldr	r1, [pc, #28]	; (80012e0 <__NVIC_EnableIRQ+0x38>)
 80012c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	2001      	movs	r0, #1
 80012ca:	fa00 f202 	lsl.w	r2, r0, r2
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000e100 	.word	0xe000e100

080012e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	db0a      	blt.n	800130e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	490c      	ldr	r1, [pc, #48]	; (8001330 <__NVIC_SetPriority+0x4c>)
 80012fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	440b      	add	r3, r1
 8001308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800130c:	e00a      	b.n	8001324 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4908      	ldr	r1, [pc, #32]	; (8001334 <__NVIC_SetPriority+0x50>)
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	3b04      	subs	r3, #4
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	440b      	add	r3, r1
 8001322:	761a      	strb	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000e100 	.word	0xe000e100
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f1c3 0307 	rsb	r3, r3, #7
 8001352:	2b04      	cmp	r3, #4
 8001354:	bf28      	it	cs
 8001356:	2304      	movcs	r3, #4
 8001358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3304      	adds	r3, #4
 800135e:	2b06      	cmp	r3, #6
 8001360:	d902      	bls.n	8001368 <NVIC_EncodePriority+0x30>
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3b03      	subs	r3, #3
 8001366:	e000      	b.n	800136a <NVIC_EncodePriority+0x32>
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	401a      	ands	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001380:	f04f 31ff 	mov.w	r1, #4294967295
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43d9      	mvns	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	4313      	orrs	r3, r2
         );
}
 8001392:	4618      	mov	r0, r3
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ff4c 	bl	8001244 <__NVIC_SetPriorityGrouping>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c2:	f7ff ff63 	bl	800128c <__NVIC_GetPriorityGrouping>
 80013c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	68b9      	ldr	r1, [r7, #8]
 80013cc:	6978      	ldr	r0, [r7, #20]
 80013ce:	f7ff ffb3 	bl	8001338 <NVIC_EncodePriority>
 80013d2:	4602      	mov	r2, r0
 80013d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013d8:	4611      	mov	r1, r2
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff82 	bl	80012e4 <__NVIC_SetPriority>
}
 80013e0:	bf00      	nop
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff56 	bl	80012a8 <__NVIC_EnableIRQ>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e0d2      	b.n	80015bc <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800141c:	2b00      	cmp	r3, #0
 800141e:	d106      	bne.n	800142e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2223      	movs	r2, #35	; 0x23
 8001424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff fa37 	bl	800089c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 800142e:	4b65      	ldr	r3, [pc, #404]	; (80015c4 <HAL_ETH_Init+0x1c0>)
 8001430:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001434:	4a63      	ldr	r2, [pc, #396]	; (80015c4 <HAL_ETH_Init+0x1c0>)
 8001436:	f043 0302 	orr.w	r3, r3, #2
 800143a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800143e:	4b61      	ldr	r3, [pc, #388]	; (80015c4 <HAL_ETH_Init+0x1c0>)
 8001440:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7a1b      	ldrb	r3, [r3, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d103      	bne.n	800145c <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff fedf 	bl	8001218 <HAL_SBS_ETHInterfaceSelect>
 800145a:	e003      	b.n	8001464 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 800145c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001460:	f7ff feda 	bl	8001218 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 8001464:	4b58      	ldr	r3, [pc, #352]	; (80015c8 <HAL_ETH_Init+0x1c4>)
 8001466:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001480:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001482:	f7ff fe99 	bl	80011b8 <HAL_GetTick>
 8001486:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001488:	e011      	b.n	80014ae <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800148a:	f7ff fe95 	bl	80011b8 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001498:	d909      	bls.n	80014ae <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2204      	movs	r2, #4
 800149e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	22e0      	movs	r2, #224	; 0xe0
 80014a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e086      	b.n	80015bc <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1e4      	bne.n	800148a <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 ff25 	bl	8002310 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80014c6:	f002 fe3b 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4a3f      	ldr	r2, [pc, #252]	; (80015cc <HAL_ETH_Init+0x1c8>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	0c9a      	lsrs	r2, r3, #18
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3a01      	subs	r2, #1
 80014da:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f001 f96c 	bl	80027bc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80014f0:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001500:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d009      	beq.n	8001524 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	22e0      	movs	r2, #224	; 0xe0
 800151c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e04b      	b.n	80015bc <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800152c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001530:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001534:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6952      	ldr	r2, [r2, #20]
 800153c:	0051      	lsls	r1, r2, #1
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	430b      	orrs	r3, r1
 8001544:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001548:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f001 f9d2 	bl	80028f6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f001 fa18 	bl	8002988 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	3305      	adds	r3, #5
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	021a      	lsls	r2, r3, #8
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	3304      	adds	r3, #4
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	4619      	mov	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	3303      	adds	r3, #3
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	061a      	lsls	r2, r3, #24
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	3302      	adds	r3, #2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	041b      	lsls	r3, r3, #16
 800158a:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	3301      	adds	r3, #1
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001596:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015a4:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015a6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2210      	movs	r2, #16
 80015b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	44020c00 	.word	0x44020c00
 80015c8:	44000400 	.word	0x44000400
 80015cc:	431bde83 	.word	0x431bde83

080015d0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015de:	2b10      	cmp	r3, #16
 80015e0:	d17c      	bne.n	80016dc <HAL_ETH_Start_IT+0x10c>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2223      	movs	r2, #35	; 0x23
 80015e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <HAL_ETH_Start_IT+0x118>)
 80015fe:	430b      	orrs	r3, r1
 8001600:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	f043 6342 	orr.w	r3, r3, #203423744	; 0xc200000
 8001614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001618:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2204      	movs	r2, #4
 8001620:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 f9c3 	bl	80019ae <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0202 	orr.w	r2, r2, #2
 8001636:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0201 	orr.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0201 	orr.w	r2, r2, #1
 8001658:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001664:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001674:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001680:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001690:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80016a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ac:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	f443 4350 	orr.w	r3, r3, #53248	; 0xd000
 80016c4:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 80016c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016cc:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2223      	movs	r2, #35	; 0x23
 80016d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	e000      	b.n	80016de <HAL_ETH_Start_IT+0x10e>
  }
  else
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
  }
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	0c020060 	.word	0x0c020060

080016ec <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016fa:	2b23      	cmp	r3, #35	; 0x23
 80016fc:	d13f      	bne.n	800177e <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2223      	movs	r2, #35	; 0x23
 8001702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800170e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800171e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800172a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800173a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0201 	bic.w	r2, r2, #1
 800174c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0201 	orr.w	r2, r2, #1
 800175e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0202 	bic.w	r2, r2, #2
 8001770:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2210      	movs	r2, #16
 8001776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
  }
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d109      	bne.n	80017b0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a2:	f043 0201 	orr.w	r2, r3, #1
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e03a      	b.n	8001826 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017b6:	2b23      	cmp	r3, #35	; 0x23
 80017b8:	d134      	bne.n	8001824 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80017c2:	2201      	movs	r2, #1
 80017c4:	6839      	ldr	r1, [r7, #0]
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f001 f93b 	bl	8002a42 <ETH_Prepare_Tx_Descriptors>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d8:	f043 0202 	orr.w	r2, r3, #2
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e01f      	b.n	8001826 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80017e6:	f3bf 8f4f 	dsb	sy
}
 80017ea:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	629a      	str	r2, [r3, #40]	; 0x28
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d904      	bls.n	8001808 <HAL_ETH_Transmit_IT+0x7c>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	1f1a      	subs	r2, r3, #4
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3106      	adds	r1, #6
 8001814:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001818:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800181c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	e000      	b.n	8001826 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
  }
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b088      	sub	sp, #32
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e0a5      	b.n	80019a6 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001860:	2b23      	cmp	r3, #35	; 0x23
 8001862:	d001      	beq.n	8001868 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e09e      	b.n	80019a6 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	3212      	adds	r2, #18
 8001874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001878:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800187e:	f1c3 0304 	rsb	r3, r3, #4
 8001882:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001884:	e067      	b.n	8001956 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d103      	bne.n	80018b6 <HAL_ETH_ReadData+0x88>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d03d      	beq.n	8001932 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00d      	beq.n	80018fc <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800190c:	461a      	mov	r2, r3
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	b29b      	uxth	r3, r3
 8001912:	f003 fe29 	bl	8005568 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	441a      	add	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2200      	movs	r2, #0
 8001930:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3301      	adds	r3, #1
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d902      	bls.n	8001944 <HAL_ETH_ReadData+0x116>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b04      	subs	r3, #4
 8001942:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	3212      	adds	r2, #18
 800194a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 800195a:	2b00      	cmp	r3, #0
 800195c:	db06      	blt.n	800196c <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	429a      	cmp	r2, r3
 8001964:	d202      	bcs.n	800196c <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d08c      	beq.n	8001886 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	441a      	add	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f814 	bl	80019ae <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d108      	bne.n	80019a4 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	e000      	b.n	80019a6 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b088      	sub	sp, #32
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80019ba:	2301      	movs	r3, #1
 80019bc:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019c2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	3212      	adds	r2, #18
 80019ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ce:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019d4:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80019d6:	e03b      	b.n	8001a50 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d112      	bne.n	8001a06 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 fd9d 	bl	8005524 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	74fb      	strb	r3, [r7, #19]
 80019f4:	e007      	b.n	8001a06 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	461a      	mov	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	461a      	mov	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001a06:	7cfb      	ldrb	r3, [r7, #19]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d021      	beq.n	8001a50 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001a0c:	f3bf 8f5f 	dmb	sy
}
 8001a10:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	e003      	b.n	8001a2c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001a2a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d902      	bls.n	8001a3e <ETH_UpdateDescriptor+0x90>
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	3212      	adds	r2, #18
 8001a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a48:	617b      	str	r3, [r7, #20]
      desccount--;
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <ETH_UpdateDescriptor+0xae>
 8001a56:	7cfb      	ldrb	r3, [r7, #19]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1bd      	bne.n	80019d8 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d00d      	beq.n	8001a82 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0U);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001a82:	bf00      	nop
 8001a84:	3720      	adds	r7, #32
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3318      	adds	r3, #24
 8001a96:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001aa8:	e03f      	b.n	8001b2a <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d106      	bne.n	8001ad2 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001ad2:	7bbb      	ldrb	r3, [r7, #14]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d028      	beq.n	8001b2a <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68d9      	ldr	r1, [r3, #12]
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db1b      	blt.n	8001b26 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	3304      	adds	r3, #4
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fcdc 	bl	80054b8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	3304      	adds	r3, #4
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	3301      	adds	r3, #1
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b24:	e001      	b.n	8001b2a <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <HAL_ETH_ReleaseTxPacket+0xac>
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1b9      	bne.n	8001aaa <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;

  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b50:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b58:	2b40      	cmp	r3, #64	; 0x40
 8001b5a:	d115      	bne.n	8001b88 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b64:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b6c:	2b40      	cmp	r3, #64	; 0x40
 8001b6e:	d10b      	bne.n	8001b88 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f248 0340 	movw	r3, #32832	; 0x8040
 8001b7e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f003 fd32 	bl	80055ec <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b90:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d115      	bne.n	8001bc8 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d10b      	bne.n	8001bc8 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f248 0301 	movw	r3, #32769	; 0x8001
 8001bbe:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f003 fd2e 	bl	8005624 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bdc:	d153      	bne.n	8001c86 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bf2:	d148      	bne.n	8001c86 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfa:	f043 0208 	orr.w	r2, r3, #8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c18:	d11e      	bne.n	8001c58 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c22:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001c26:	f241 1302 	movw	r3, #4354	; 0x1102
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c4a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	22e0      	movs	r2, #224	; 0xe0
 8001c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001c56:	e013      	b.n	8001c80 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c60:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c64:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c76:	461a      	mov	r2, r3
 8001c78:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001c7c:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f86d 	bl	8001d60 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001c8e:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d104      	bne.n	8001ca4 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d019      	beq.n	8001cd8 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001caa:	f043 0210 	orr.w	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	22e0      	movs	r2, #224	; 0xe0
 8001cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f848 	bl	8001d60 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	2b10      	cmp	r3, #16
 8001ce6:	d10f      	bne.n	8001d08 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001cf0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f83a 	bl	8001d74 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	d10f      	bne.n	8001d38 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d20:	f003 020f 	and.w	r2, r3, #15
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f82c 	bl	8001d88 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_ETH_IRQHandler+0x21c>)
 8001d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_ETH_IRQHandler+0x21c>)
 8001d46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d4a:	62da      	str	r2, [r3, #44]	; 0x2c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f825 	bl	8001d9c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	44022000 	.word	0x44022000

08001d60 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e03e      	b.n	8001e50 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dda:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	055b      	lsls	r3, r3, #21
 8001de6:	4313      	orrs	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	041b      	lsls	r3, r3, #16
 8001df4:	4313      	orrs	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f043 030c 	orr.w	r3, r3, #12
 8001dfe:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001e12:	f7ff f9d1 	bl	80011b8 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e18:	e009      	b.n	8001e2e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001e1a:	f7ff f9cd 	bl	80011b8 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e28:	d901      	bls.n	8001e2e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e010      	b.n	8001e50 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1ed      	bne.n	8001e1a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e03c      	b.n	8001ef4 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e82:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	055b      	lsls	r3, r3, #21
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	041b      	lsls	r3, r3, #16
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f023 030c 	bic.w	r3, r3, #12
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_ETH_WritePHYRegister+0xa4>)
 8001eba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001ebe:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <HAL_ETH_WritePHYRegister+0xa4>)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001ec6:	f7ff f977 	bl	80011b8 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001ecc:	e009      	b.n	8001ee2 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001ece:	f7ff f973 	bl	80011b8 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001edc:	d901      	bls.n	8001ee2 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e008      	b.n	8001ef4 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1ed      	bne.n	8001ece <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40028000 	.word	0x40028000

08001f00 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e1c3      	b.n	800229c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 020c 	and.w	r2, r3, #12
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf14      	ite	ne
 8001f30:	2301      	movne	r3, #1
 8001f32:	2300      	moveq	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf0c      	ite	eq
 8001f5a:	2301      	moveq	r3, #1
 8001f5c:	2300      	movne	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	bf14      	ite	ne
 8001f76:	2301      	movne	r3, #1
 8001f78:	2300      	moveq	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf0c      	ite	eq
 8001f90:	2301      	moveq	r3, #1
 8001f92:	2300      	movne	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf14      	ite	ne
 8001faa:	2301      	movne	r3, #1
 8001fac:	2300      	moveq	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	bf14      	ite	ne
 8001ffa:	2301      	movne	r3, #1
 8001ffc:	2300      	moveq	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	bf0c      	ite	eq
 8002014:	2301      	moveq	r3, #1
 8002016:	2300      	movne	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800202a:	2b00      	cmp	r3, #0
 800202c:	bf0c      	ite	eq
 800202e:	2301      	moveq	r3, #1
 8002030:	2300      	movne	r3, #0
 8002032:	b2db      	uxtb	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf14      	ite	ne
 8002048:	2301      	movne	r3, #1
 800204a:	2300      	moveq	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205e:	2b00      	cmp	r3, #0
 8002060:	bf14      	ite	ne
 8002062:	2301      	movne	r3, #1
 8002064:	2300      	moveq	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf14      	ite	ne
 800207c:	2301      	movne	r3, #1
 800207e:	2300      	moveq	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800208e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002092:	2b00      	cmp	r3, #0
 8002094:	bf14      	ite	ne
 8002096:	2301      	movne	r3, #1
 8002098:	2300      	moveq	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	bf14      	ite	ne
 80020be:	2301      	movne	r3, #1
 80020c0:	2300      	moveq	r3, #0
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf0c      	ite	eq
 80020f4:	2301      	moveq	r3, #1
 80020f6:	2300      	movne	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	bf14      	ite	ne
 8002110:	2301      	movne	r3, #1
 8002112:	2300      	moveq	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002124:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002128:	2b00      	cmp	r3, #0
 800212a:	bf14      	ite	ne
 800212c:	2301      	movne	r3, #1
 800212e:	2300      	moveq	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf14      	ite	ne
 8002148:	2301      	movne	r3, #1
 800214a:	2300      	moveq	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	0e5b      	lsrs	r3, r3, #25
 800215e:	f003 021f 	and.w	r2, r3, #31
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	63da      	str	r2, [r3, #60]	; 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf14      	ite	ne
 8002174:	2301      	movne	r3, #1
 8002176:	2300      	moveq	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 020f 	and.w	r2, r3, #15
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf14      	ite	ne
 800219e:	2301      	movne	r3, #1
 80021a0:	2300      	moveq	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf0c      	ite	eq
 80021ba:	2301      	moveq	r3, #1
 80021bc:	2300      	movne	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	0c1b      	lsrs	r3, r3, #16
 80021de:	b29a      	uxth	r2, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf14      	ite	ne
 80021f4:	2301      	movne	r3, #1
 80021f6:	2300      	moveq	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800220e:	2b00      	cmp	r3, #0
 8002210:	bf14      	ite	ne
 8002212:	2301      	movne	r3, #1
 8002214:	2300      	moveq	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002228:	f003 0272 	and.w	r2, r3, #114	; 0x72
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002238:	f003 0223 	and.w	r2, r3, #35	; 0x23
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf14      	ite	ne
 8002250:	2301      	movne	r3, #1
 8002252:	2300      	moveq	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b00      	cmp	r3, #0
 800226c:	bf14      	ite	ne
 800226e:	2301      	movne	r3, #1
 8002270:	2300      	moveq	r3, #0
 8002272:	b2db      	uxtb	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf0c      	ite	eq
 800228c:	2301      	moveq	r3, #1
 800228e:	2300      	movne	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e00b      	b.n	80022d4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d105      	bne.n	80022d2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80022c6:	6839      	ldr	r1, [r7, #0]
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f8d5 	bl	8002478 <ETH_SetMACConfig>

    return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e000      	b.n	80022d4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
  }
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e00b      	b.n	8002308 <HAL_ETH_SetDMAConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f6:	2b10      	cmp	r3, #16
 80022f8:	d105      	bne.n	8002306 <HAL_ETH_SetDMAConfig+0x2a>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 80022fa:	6839      	ldr	r1, [r7, #0]
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f9d7 	bl	80026b0 <ETH_SetDMAConfig>

    return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_ETH_SetDMAConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
  }
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002320:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002328:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800232a:	f001 ff09 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 800232e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4a25      	ldr	r2, [pc, #148]	; (80023c8 <HAL_ETH_SetMDIOClockRange+0xb8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d908      	bls.n	800234a <HAL_ETH_SetMDIOClockRange+0x3a>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4a24      	ldr	r2, [pc, #144]	; (80023cc <HAL_ETH_SetMDIOClockRange+0xbc>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d804      	bhi.n	800234a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	e034      	b.n	80023b4 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	4a1f      	ldr	r2, [pc, #124]	; (80023cc <HAL_ETH_SetMDIOClockRange+0xbc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d908      	bls.n	8002364 <HAL_ETH_SetMDIOClockRange+0x54>
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	4a1e      	ldr	r2, [pc, #120]	; (80023d0 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d204      	bcs.n	8002364 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	e027      	b.n	80023b4 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4a1a      	ldr	r2, [pc, #104]	; (80023d0 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d303      	bcc.n	8002374 <HAL_ETH_SetMDIOClockRange+0x64>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4a19      	ldr	r2, [pc, #100]	; (80023d4 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d91e      	bls.n	80023b2 <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4a17      	ldr	r2, [pc, #92]	; (80023d4 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d908      	bls.n	800238e <HAL_ETH_SetMDIOClockRange+0x7e>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4a16      	ldr	r2, [pc, #88]	; (80023d8 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d804      	bhi.n	800238e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	e012      	b.n	80023b4 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	4a11      	ldr	r2, [pc, #68]	; (80023d8 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d908      	bls.n	80023a8 <HAL_ETH_SetMDIOClockRange+0x98>
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4a10      	ldr	r2, [pc, #64]	; (80023dc <HAL_ETH_SetMDIOClockRange+0xcc>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d804      	bhi.n	80023a8 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	e005      	b.n	80023b4 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	e000      	b.n	80023b4 <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80023b2:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	01312cff 	.word	0x01312cff
 80023cc:	02160ebf 	.word	0x02160ebf
 80023d0:	03938700 	.word	0x03938700
 80023d4:	05f5e0ff 	.word	0x05f5e0ff
 80023d8:	08f0d17f 	.word	0x08f0d17f
 80023dc:	0ee6b280 	.word	0x0ee6b280

080023e0 <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, const ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;

  if (pFilterConfig == NULL)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e039      	b.n	8002468 <HAL_ETH_SetMACFilterConfig+0x88>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	78db      	ldrb	r3, [r3, #3]
 80023fe:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8002400:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	791b      	ldrb	r3, [r3, #4]
 8002406:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8002408:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	7a1b      	ldrb	r3, [r3, #8]
 800240e:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8002410:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	795b      	ldrb	r3, [r3, #5]
 8002416:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8002418:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	7a52      	ldrb	r2, [r2, #9]
 800241e:	2a00      	cmp	r2, #0
 8002420:	d101      	bne.n	8002426 <HAL_ETH_SetMACFilterConfig+0x46>
 8002422:	2220      	movs	r2, #32
 8002424:	e000      	b.n	8002428 <HAL_ETH_SetMACFilterConfig+0x48>
 8002426:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8002428:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	79db      	ldrb	r3, [r3, #7]
 800242e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8002430:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	799b      	ldrb	r3, [r3, #6]
 8002436:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8002438:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	789b      	ldrb	r3, [r3, #2]
 800243e:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8002440:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	785b      	ldrb	r3, [r3, #1]
 8002446:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8002448:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_ETH_SetMACFilterConfig+0x94>)
 800245a:	4013      	ands	r3, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	68f9      	ldr	r1, [r7, #12]
 8002462:	430b      	orrs	r3, r1
 8002464:	6093      	str	r3, [r2, #8]

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	7ffff800 	.word	0x7ffff800

08002478 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800248a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	791b      	ldrb	r3, [r3, #4]
 8002490:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002492:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	7b1b      	ldrb	r3, [r3, #12]
 8002498:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800249a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	7b5b      	ldrb	r3, [r3, #13]
 80024a0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80024a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	7b9b      	ldrb	r3, [r3, #14]
 80024a8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80024aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	7bdb      	ldrb	r3, [r3, #15]
 80024b0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	7c12      	ldrb	r2, [r2, #16]
 80024b8:	2a00      	cmp	r2, #0
 80024ba:	d102      	bne.n	80024c2 <ETH_SetMACConfig+0x4a>
 80024bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024c0:	e000      	b.n	80024c4 <ETH_SetMACConfig+0x4c>
 80024c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80024c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	7c52      	ldrb	r2, [r2, #17]
 80024ca:	2a00      	cmp	r2, #0
 80024cc:	d102      	bne.n	80024d4 <ETH_SetMACConfig+0x5c>
 80024ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024d2:	e000      	b.n	80024d6 <ETH_SetMACConfig+0x5e>
 80024d4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80024d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	7c9b      	ldrb	r3, [r3, #18]
 80024dc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80024de:	431a      	orrs	r2, r3
               macconf->Speed |
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80024e4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80024ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	7f1b      	ldrb	r3, [r3, #28]
 80024f0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80024f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	7f5b      	ldrb	r3, [r3, #29]
 80024f8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80024fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	7f92      	ldrb	r2, [r2, #30]
 8002500:	2a00      	cmp	r2, #0
 8002502:	d102      	bne.n	800250a <ETH_SetMACConfig+0x92>
 8002504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002508:	e000      	b.n	800250c <ETH_SetMACConfig+0x94>
 800250a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800250c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	7fdb      	ldrb	r3, [r3, #31]
 8002512:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002514:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	f892 2020 	ldrb.w	r2, [r2, #32]
 800251c:	2a00      	cmp	r2, #0
 800251e:	d102      	bne.n	8002526 <ETH_SetMACConfig+0xae>
 8002520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002524:	e000      	b.n	8002528 <ETH_SetMACConfig+0xb0>
 8002526:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002528:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800252e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002536:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002538:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b57      	ldr	r3, [pc, #348]	; (80026a8 <ETH_SetMACConfig+0x230>)
 800254a:	4013      	ands	r3, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	68f9      	ldr	r1, [r7, #12]
 8002552:	430b      	orrs	r3, r1
 8002554:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002562:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002564:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800256c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800256e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002576:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002578:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002580:	2a00      	cmp	r2, #0
 8002582:	d102      	bne.n	800258a <ETH_SetMACConfig+0x112>
 8002584:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002588:	e000      	b.n	800258c <ETH_SetMACConfig+0x114>
 800258a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800258c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	4b43      	ldr	r3, [pc, #268]	; (80026ac <ETH_SetMACConfig+0x234>)
 800259e:	4013      	ands	r3, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	68f9      	ldr	r1, [r7, #12]
 80025a6:	430b      	orrs	r3, r1
 80025a8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	68f9      	ldr	r1, [r7, #12]
 80025ce:	430b      	orrs	r3, r1
 80025d0:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025d8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025de:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	d101      	bne.n	80025ee <ETH_SetMACConfig+0x176>
 80025ea:	2280      	movs	r2, #128	; 0x80
 80025ec:	e000      	b.n	80025f0 <ETH_SetMACConfig+0x178>
 80025ee:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80025f0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002602:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002606:	4013      	ands	r3, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	68f9      	ldr	r1, [r7, #12]
 800260e:	430b      	orrs	r3, r1
 8002610:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002618:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002620:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262e:	f023 0103 	bic.w	r1, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	430a      	orrs	r2, r1
 800263a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002646:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002662:	2a00      	cmp	r2, #0
 8002664:	d101      	bne.n	800266a <ETH_SetMACConfig+0x1f2>
 8002666:	2240      	movs	r2, #64	; 0x40
 8002668:	e000      	b.n	800266c <ETH_SetMACConfig+0x1f4>
 800266a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800266c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002674:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002676:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800267e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002680:	4313      	orrs	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800268c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	430a      	orrs	r2, r1
 8002698:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	00048083 	.word	0x00048083
 80026ac:	c0f88000 	.word	0xc0f88000

080026b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80026c8:	f023 0302 	bic.w	r3, r3, #2
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	6811      	ldr	r1, [r2, #0]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	430b      	orrs	r3, r1
 80026d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026da:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	791b      	ldrb	r3, [r3, #4]
 80026e0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026e6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	7b1b      	ldrb	r3, [r3, #12]
 80026ec:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	68f9      	ldr	r1, [r7, #12]
 800270a:	430b      	orrs	r3, r1
 800270c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002710:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	7b5b      	ldrb	r3, [r3, #13]
 8002716:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800271c:	4313      	orrs	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002728:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <ETH_SetDMAConfig+0x104>)
 800272e:	4013      	ands	r3, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	68f9      	ldr	r1, [r7, #12]
 8002736:	430b      	orrs	r3, r1
 8002738:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800273c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	7d1b      	ldrb	r3, [r3, #20]
 8002748:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800274a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	7f5b      	ldrb	r3, [r3, #29]
 8002750:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <ETH_SetDMAConfig+0x108>)
 8002764:	4013      	ands	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	68f9      	ldr	r1, [r7, #12]
 800276c:	430b      	orrs	r3, r1
 800276e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002772:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	7f1b      	ldrb	r3, [r3, #28]
 800277a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800278c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002790:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002794:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	68f9      	ldr	r1, [r7, #12]
 800279e:	430b      	orrs	r3, r1
 80027a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027a4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	fffec000 	.word	0xfffec000
 80027b8:	ffc0efef 	.word	0xffc0efef

080027bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b0a4      	sub	sp, #144	; 0x90
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80027c4:	2301      	movs	r3, #1
 80027c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027ca:	2300      	movs	r3, #0
 80027cc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80027e0:	2301      	movs	r3, #1
 80027e2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80027f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027fc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80027fe:	2300      	movs	r3, #0
 8002800:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002804:	2300      	movs	r3, #0
 8002806:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002808:	2300      	movs	r3, #0
 800280a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002814:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002818:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002820:	2300      	movs	r3, #0
 8002822:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002830:	2300      	movs	r3, #0
 8002832:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002836:	2300      	movs	r3, #0
 8002838:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800283a:	2300      	movs	r3, #0
 800283c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800283e:	2300      	movs	r3, #0
 8002840:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800284e:	2301      	movs	r3, #1
 8002850:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002854:	2320      	movs	r3, #32
 8002856:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800285a:	2301      	movs	r3, #1
 800285c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002866:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800286c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002870:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002878:	2302      	movs	r3, #2
 800287a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800287e:	2300      	movs	r3, #0
 8002880:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002884:	2300      	movs	r3, #0
 8002886:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002890:	2301      	movs	r3, #1
 8002892:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002896:	2300      	movs	r3, #0
 8002898:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800289a:	2301      	movs	r3, #1
 800289c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80028a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028a4:	4619      	mov	r1, r3
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff fde6 	bl	8002478 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028b0:	2301      	movs	r3, #1
 80028b2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80028be:	2300      	movs	r3, #0
 80028c0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028ca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80028dc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028e2:	f107 0308 	add.w	r3, r7, #8
 80028e6:	4619      	mov	r1, r3
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff fee1 	bl	80026b0 <ETH_SetDMAConfig>
}
 80028ee:	bf00      	nop
 80028f0:	3790      	adds	r7, #144	; 0x90
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	e01d      	b.n	8002940 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68d9      	ldr	r1, [r3, #12]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4613      	mov	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2200      	movs	r2, #0
 8002920:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2200      	movs	r2, #0
 8002926:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2200      	movs	r2, #0
 800292c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	3206      	adds	r2, #6
 8002936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3301      	adds	r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d9de      	bls.n	8002904 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002954:	461a      	mov	r2, r3
 8002956:	2303      	movs	r3, #3
 8002958:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002968:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002978:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	e023      	b.n	80029de <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6919      	ldr	r1, [r3, #16]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2200      	movs	r2, #0
 80029b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2200      	movs	r2, #0
 80029be:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2200      	movs	r2, #0
 80029ca:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	3212      	adds	r2, #18
 80029d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3301      	adds	r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d9d8      	bls.n	8002996 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a1e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a32:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b08d      	sub	sp, #52	; 0x34
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	3318      	adds	r3, #24
 8002a52:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a6c:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a84:	d007      	beq.n	8002a96 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002a96:	2302      	movs	r3, #2
 8002a98:	e25a      	b.n	8002f50 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d044      	beq.n	8002b30 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	0c1b      	lsrs	r3, r3, #16
 8002aac:	041b      	lsls	r3, r3, #16
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ad2:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d027      	beq.n	8002b30 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	041b      	lsls	r3, r3, #16
 8002aec:	431a      	orrs	r2, r3
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b1e:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002b2e:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d010      	beq.n	8002b5e <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	6992      	ldr	r2, [r2, #24]
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d105      	bne.n	8002b76 <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d036      	beq.n	8002be4 <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b82:	f3bf 8f5f 	dmb	sy
}
 8002b86:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b96:	3301      	adds	r3, #1
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d902      	bls.n	8002ba6 <ETH_Prepare_Tx_Descriptors+0x164>
 8002ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba2:	3b04      	subs	r3, #4
 8002ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bae:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bc2:	d10f      	bne.n	8002be4 <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bcc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002bce:	f3bf 8f5f 	dmb	sy
}
 8002bd2:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002be0:	2302      	movs	r3, #2
 8002be2:	e1b5      	b.n	8002f50 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	3301      	adds	r3, #1
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002bfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	6852      	ldr	r2, [r2, #4]
 8002c04:	431a      	orrs	r2, r3
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d014      	beq.n	8002c3c <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002c2a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	6852      	ldr	r2, [r2, #4]
 8002c32:	0412      	lsls	r2, r2, #16
 8002c34:	431a      	orrs	r2, r3
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	609a      	str	r2, [r3, #8]
 8002c3a:	e00a      	b.n	8002c52 <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002c4a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002c4e:	6a3a      	ldr	r2, [r7, #32]
 8002c50:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d019      	beq.n	8002c92 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	04db      	lsls	r3, r3, #19
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	0c9b      	lsrs	r3, r3, #18
 8002c78:	049b      	lsls	r3, r3, #18
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	69d2      	ldr	r2, [r2, #28]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	60da      	str	r2, [r3, #12]
 8002c90:	e028      	b.n	8002ce4 <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	6852      	ldr	r2, [r2, #4]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d1a:	f3bf 8f5f 	dmb	sy
}
 8002d1e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80d9 	beq.w	8002eec <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002d4c:	e0ce      	b.n	8002eec <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d902      	bls.n	8002d6c <ETH_Prepare_Tx_Descriptors+0x32a>
 8002d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d68:	3b04      	subs	r3, #4
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d74:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d8e:	d007      	beq.n	8002da0 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d94:	3304      	adds	r3, #4
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d029      	beq.n	8002df4 <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dac:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002dae:	2300      	movs	r3, #0
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db2:	e019      	b.n	8002de8 <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8002db4:	f3bf 8f5f 	dmb	sy
}
 8002db8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc8:	3301      	adds	r3, #1
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d902      	bls.n	8002dd8 <ETH_Prepare_Tx_Descriptors+0x396>
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	3b04      	subs	r3, #4
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de4:	3301      	adds	r3, #1
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d3e1      	bcc.n	8002db4 <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 8002df0:	2302      	movs	r3, #2
 8002df2:	e0ad      	b.n	8002f50 <ETH_Prepare_Tx_Descriptors+0x50e>
    }

    descnbr += 1U;
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	3301      	adds	r3, #1
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	6852      	ldr	r2, [r2, #4]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d014      	beq.n	8002e52 <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002e40:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	6852      	ldr	r2, [r2, #4]
 8002e48:	0412      	lsls	r2, r2, #16
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	e00a      	b.n	8002e68 <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	2200      	movs	r2, #0
 8002e56:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002e60:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002e64:	6a3a      	ldr	r2, [r7, #32]
 8002e66:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00f      	beq.n	8002e94 <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	0c9b      	lsrs	r3, r3, #18
 8002e7a:	049b      	lsls	r3, r3, #18
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	69d2      	ldr	r2, [r2, #28]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	e019      	b.n	8002ec8 <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	6852      	ldr	r2, [r2, #4]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d008      	beq.n	8002ec8 <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ece:	f3bf 8f5f 	dmb	sy
}
 8002ed2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f47f af2c 	bne.w	8002d4e <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d006      	beq.n	8002f0a <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	e005      	b.n	8002f16 <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f26:	6979      	ldr	r1, [r7, #20]
 8002f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f36:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f38:	b672      	cpsid	i
}
 8002f3a:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	4413      	add	r3, r2
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002f4a:	b662      	cpsie	i
}
 8002f4c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3734      	adds	r7, #52	; 0x34
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002f6a:	e136      	b.n	80031da <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	2101      	movs	r1, #1
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 8128 	beq.w	80031d4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x38>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b12      	cmp	r3, #18
 8002f92:	d125      	bne.n	8002fe0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	08da      	lsrs	r2, r3, #3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3208      	adds	r2, #8
 8002f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	220f      	movs	r2, #15
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f003 020f 	and.w	r2, r3, #15
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	08da      	lsrs	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3208      	adds	r2, #8
 8002fda:	6979      	ldr	r1, [r7, #20]
 8002fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0203 	and.w	r2, r3, #3
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	4313      	orrs	r3, r2
 800300c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d00b      	beq.n	8003034 <HAL_GPIO_Init+0xd8>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d007      	beq.n	8003034 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003028:	2b11      	cmp	r3, #17
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b12      	cmp	r3, #18
 8003032:	d130      	bne.n	8003096 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4013      	ands	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800306a:	2201      	movs	r2, #1
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4013      	ands	r3, r2
 8003078:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	f003 0201 	and.w	r2, r3, #1
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b03      	cmp	r3, #3
 800309c:	d017      	beq.n	80030ce <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	2203      	movs	r2, #3
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4013      	ands	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d07c      	beq.n	80031d4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80030da:	4a47      	ldr	r2, [pc, #284]	; (80031f8 <HAL_GPIO_Init+0x29c>)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	089b      	lsrs	r3, r3, #2
 80030e0:	3318      	adds	r3, #24
 80030e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	220f      	movs	r2, #15
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4013      	ands	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	0a9a      	lsrs	r2, r3, #10
 8003102:	4b3e      	ldr	r3, [pc, #248]	; (80031fc <HAL_GPIO_Init+0x2a0>)
 8003104:	4013      	ands	r3, r2
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	f002 0203 	and.w	r2, r2, #3
 800310c:	00d2      	lsls	r2, r2, #3
 800310e:	4093      	lsls	r3, r2
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003116:	4938      	ldr	r1, [pc, #224]	; (80031f8 <HAL_GPIO_Init+0x29c>)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	089b      	lsrs	r3, r3, #2
 800311c:	3318      	adds	r3, #24
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003124:	4b34      	ldr	r3, [pc, #208]	; (80031f8 <HAL_GPIO_Init+0x29c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	43db      	mvns	r3, r3
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4013      	ands	r3, r2
 8003132:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003148:	4a2b      	ldr	r2, [pc, #172]	; (80031f8 <HAL_GPIO_Init+0x29c>)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800314e:	4b2a      	ldr	r3, [pc, #168]	; (80031f8 <HAL_GPIO_Init+0x29c>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	43db      	mvns	r3, r3
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4013      	ands	r3, r2
 800315c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003172:	4a21      	ldr	r2, [pc, #132]	; (80031f8 <HAL_GPIO_Init+0x29c>)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003178:	4b1f      	ldr	r3, [pc, #124]	; (80031f8 <HAL_GPIO_Init+0x29c>)
 800317a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	43db      	mvns	r3, r3
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4013      	ands	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800319e:	4a16      	ldr	r2, [pc, #88]	; (80031f8 <HAL_GPIO_Init+0x29c>)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80031a6:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <HAL_GPIO_Init+0x29c>)
 80031a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ac:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4013      	ands	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80031cc:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <HAL_GPIO_Init+0x29c>)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	3301      	adds	r3, #1
 80031d8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f47f aec1 	bne.w	8002f6c <HAL_GPIO_Init+0x10>
  }
}
 80031ea:	bf00      	nop
 80031ec:	bf00      	nop
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	44022000 	.word	0x44022000
 80031fc:	002f7f7f 	.word	0x002f7f7f

08003200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]
 800320c:	4613      	mov	r3, r2
 800320e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003210:	787b      	ldrb	r3, [r7, #1]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003216:	887a      	ldrh	r2, [r7, #2]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800321c:	e002      	b.n	8003224 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003242:	887a      	ldrh	r2, [r7, #2]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4013      	ands	r3, r2
 8003248:	041a      	lsls	r2, r3, #16
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	43d9      	mvns	r1, r3
 800324e:	887b      	ldrh	r3, [r7, #2]
 8003250:	400b      	ands	r3, r1
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	619a      	str	r2, [r3, #24]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_ICACHE_Enable+0x1c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a04      	ldr	r2, [pc, #16]	; (8003280 <HAL_ICACHE_Enable+0x1c>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	40030400 	.word	0x40030400

08003284 <HAL_PWR_EnableWakeUpPin>:
  * @note   The PWR_WAKEUP_PIN6_HIGH, PWR_WAKEUP_PIN6_LOW, PWR_WAKEUP_PIN7_HIGH, PWR_WAKEUP_PIN7_LOW,
  *         PWR_WAKEUP_PIN8_HIGH and PWR_WAKEUP_PIN8_LOW are not available for STM32H503xx devices.
  * @retval None.
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]

  /*
     Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge).
  */
  MODIFY_REG(PWR->WUCR, PWR_EWUP_MASK, WakeUpPinPolarity);
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_PWR_EnableWakeUpPin+0x24>)
 800328e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_PWR_EnableWakeUpPin+0x28>)
 8003292:	4013      	ands	r3, r2
 8003294:	4904      	ldr	r1, [pc, #16]	; (80032a8 <HAL_PWR_EnableWakeUpPin+0x24>)
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4313      	orrs	r3, r2
 800329a:	648b      	str	r3, [r1, #72]	; 0x48
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	44020800 	.word	0x44020800
 80032ac:	f000c0c0 	.word	0xf000c0c0

080032b0 <HAL_PWR_DisableWakeUpPin>:
  * @note   The PWR_WAKEUP_PIN6_HIGH, PWR_WAKEUP_PIN6_LOW, PWR_WAKEUP_PIN7_HIGH, PWR_WAKEUP_PIN7_LOW,
  *         PWR_WAKEUP_PIN8_HIGH and PWR_WAKEUP_PIN8_LOW are not available for STM32H503xx devices.
  * @retval None.
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Disable the wake up pin selected */
  CLEAR_BIT(PWR->WUCR, (PWR_WUCR_WUPEN & WakeUpPinx));
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_PWR_DisableWakeUpPin+0x24>)
 80032ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	4904      	ldr	r1, [pc, #16]	; (80032d4 <HAL_PWR_DisableWakeUpPin+0x24>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	648b      	str	r3, [r1, #72]	; 0x48
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	44020800 	.word	0x44020800

080032d8 <HAL_PWR_EnterSTANDBYMode>:
  *         except for registers and backup SRAM in the Backup domain and
  *         STANDBY circuitry.
  * @retval None.
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  SET_BIT(PWR->PMCR, PWR_PMCR_LPMS);
 80032dc:	4b08      	ldr	r3, [pc, #32]	; (8003300 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a07      	ldr	r2, [pc, #28]	; (8003300 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	4a05      	ldr	r2, [pc, #20]	; (8003304 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80032ee:	f043 0304 	orr.w	r3, r3, #4
 80032f2:	6113      	str	r3, [r2, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Wait For Interrupt Request */
  __WFI();
 80032f4:	bf30      	wfi
}
 80032f6:	bf00      	nop
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	44020800 	.word	0x44020800
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	f000 bc28 	b.w	8003b6c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800331c:	4b94      	ldr	r3, [pc, #592]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	f003 0318 	and.w	r3, r3, #24
 8003324:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003326:	4b92      	ldr	r3, [pc, #584]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b00      	cmp	r3, #0
 800333a:	d05b      	beq.n	80033f4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2b08      	cmp	r3, #8
 8003340:	d005      	beq.n	800334e <HAL_RCC_OscConfig+0x46>
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	2b18      	cmp	r3, #24
 8003346:	d114      	bne.n	8003372 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d111      	bne.n	8003372 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d102      	bne.n	800335c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f000 bc08 	b.w	8003b6c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800335c:	4b84      	ldr	r3, [pc, #528]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	041b      	lsls	r3, r3, #16
 800336a:	4981      	ldr	r1, [pc, #516]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 800336c:	4313      	orrs	r3, r2
 800336e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003370:	e040      	b.n	80033f4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d023      	beq.n	80033c2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800337a:	4b7d      	ldr	r3, [pc, #500]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a7c      	ldr	r2, [pc, #496]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7fd ff17 	bl	80011b8 <HAL_GetTick>
 800338a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800338e:	f7fd ff13 	bl	80011b8 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e3e5      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80033a0:	4b73      	ldr	r3, [pc, #460]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80033ac:	4b70      	ldr	r3, [pc, #448]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	041b      	lsls	r3, r3, #16
 80033ba:	496d      	ldr	r1, [pc, #436]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	618b      	str	r3, [r1, #24]
 80033c0:	e018      	b.n	80033f4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80033c2:	4b6b      	ldr	r3, [pc, #428]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a6a      	ldr	r2, [pc, #424]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80033c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7fd fef3 	bl	80011b8 <HAL_GetTick>
 80033d2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80033d6:	f7fd feef 	bl	80011b8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e3c1      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80033e8:	4b61      	ldr	r3, [pc, #388]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80a0 	beq.w	8003542 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	2b10      	cmp	r3, #16
 8003406:	d005      	beq.n	8003414 <HAL_RCC_OscConfig+0x10c>
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	2b18      	cmp	r3, #24
 800340c:	d109      	bne.n	8003422 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2b03      	cmp	r3, #3
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f040 8092 	bne.w	8003542 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e3a4      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342a:	d106      	bne.n	800343a <HAL_RCC_OscConfig+0x132>
 800342c:	4b50      	ldr	r3, [pc, #320]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a4f      	ldr	r2, [pc, #316]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 8003432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	e058      	b.n	80034ec <HAL_RCC_OscConfig+0x1e4>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d112      	bne.n	8003468 <HAL_RCC_OscConfig+0x160>
 8003442:	4b4b      	ldr	r3, [pc, #300]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a4a      	ldr	r2, [pc, #296]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 8003448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4b48      	ldr	r3, [pc, #288]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a47      	ldr	r2, [pc, #284]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 8003454:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b45      	ldr	r3, [pc, #276]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a44      	ldr	r2, [pc, #272]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 8003460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e041      	b.n	80034ec <HAL_RCC_OscConfig+0x1e4>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003470:	d112      	bne.n	8003498 <HAL_RCC_OscConfig+0x190>
 8003472:	4b3f      	ldr	r3, [pc, #252]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a3e      	ldr	r2, [pc, #248]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 8003478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	4b3c      	ldr	r3, [pc, #240]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a3b      	ldr	r2, [pc, #236]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 8003484:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	4b39      	ldr	r3, [pc, #228]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a38      	ldr	r2, [pc, #224]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	e029      	b.n	80034ec <HAL_RCC_OscConfig+0x1e4>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80034a0:	d112      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1c0>
 80034a2:	4b33      	ldr	r3, [pc, #204]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a32      	ldr	r2, [pc, #200]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80034a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	4b30      	ldr	r3, [pc, #192]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a2f      	ldr	r2, [pc, #188]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80034b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b2d      	ldr	r3, [pc, #180]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a2c      	ldr	r2, [pc, #176]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e011      	b.n	80034ec <HAL_RCC_OscConfig+0x1e4>
 80034c8:	4b29      	ldr	r3, [pc, #164]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a28      	ldr	r2, [pc, #160]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80034ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b26      	ldr	r3, [pc, #152]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a25      	ldr	r2, [pc, #148]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80034da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	4b23      	ldr	r3, [pc, #140]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a22      	ldr	r2, [pc, #136]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 80034e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80034ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d013      	beq.n	800351c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fd fe60 	bl	80011b8 <HAL_GetTick>
 80034f8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80034fc:	f7fd fe5c 	bl	80011b8 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b64      	cmp	r3, #100	; 0x64
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e32e      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800350e:	4b18      	ldr	r3, [pc, #96]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x1f4>
 800351a:	e012      	b.n	8003542 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fd fe4c 	bl	80011b8 <HAL_GetTick>
 8003520:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003524:	f7fd fe48 	bl	80011b8 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	; 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e31a      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003536:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <HAL_RCC_OscConfig+0x268>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 809a 	beq.w	8003684 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_RCC_OscConfig+0x25a>
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	2b18      	cmp	r3, #24
 800355a:	d149      	bne.n	80035f0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d146      	bne.n	80035f0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e2fe      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
 800356e:	bf00      	nop
 8003570:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d11c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800357a:	4b9a      	ldr	r3, [pc, #616]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0218 	and.w	r2, r3, #24
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	429a      	cmp	r2, r3
 8003588:	d014      	beq.n	80035b4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800358a:	4b96      	ldr	r3, [pc, #600]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 0218 	bic.w	r2, r3, #24
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	4993      	ldr	r1, [pc, #588]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 8003598:	4313      	orrs	r3, r2
 800359a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800359c:	f000 fdd0 	bl	8004140 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035a0:	4b91      	ldr	r3, [pc, #580]	; (80037e8 <HAL_RCC_OscConfig+0x4e0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fd fa57 	bl	8000a58 <HAL_InitTick>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e2db      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fd fe00 	bl	80011b8 <HAL_GetTick>
 80035b8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80035bc:	f7fd fdfc 	bl	80011b8 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e2ce      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ce:	4b85      	ldr	r3, [pc, #532]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80035da:	4b82      	ldr	r3, [pc, #520]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	041b      	lsls	r3, r3, #16
 80035e8:	497e      	ldr	r1, [pc, #504]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80035ee:	e049      	b.n	8003684 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d02c      	beq.n	8003652 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80035f8:	4b7a      	ldr	r3, [pc, #488]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f023 0218 	bic.w	r2, r3, #24
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	4977      	ldr	r1, [pc, #476]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800360a:	4b76      	ldr	r3, [pc, #472]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a75      	ldr	r2, [pc, #468]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003616:	f7fd fdcf 	bl	80011b8 <HAL_GetTick>
 800361a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800361e:	f7fd fdcb 	bl	80011b8 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e29d      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003630:	4b6c      	ldr	r3, [pc, #432]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800363c:	4b69      	ldr	r3, [pc, #420]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	041b      	lsls	r3, r3, #16
 800364a:	4966      	ldr	r1, [pc, #408]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 800364c:	4313      	orrs	r3, r2
 800364e:	610b      	str	r3, [r1, #16]
 8003650:	e018      	b.n	8003684 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003652:	4b64      	ldr	r3, [pc, #400]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a63      	ldr	r2, [pc, #396]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365e:	f7fd fdab 	bl	80011b8 <HAL_GetTick>
 8003662:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003666:	f7fd fda7 	bl	80011b8 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e279      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003678:	4b5a      	ldr	r3, [pc, #360]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f0      	bne.n	8003666 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d03c      	beq.n	800370a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01c      	beq.n	80036d2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003698:	4b52      	ldr	r3, [pc, #328]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 800369a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800369e:	4a51      	ldr	r2, [pc, #324]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 80036a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7fd fd86 	bl	80011b8 <HAL_GetTick>
 80036ac:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80036b0:	f7fd fd82 	bl	80011b8 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e254      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80036c2:	4b48      	ldr	r3, [pc, #288]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 80036c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0ef      	beq.n	80036b0 <HAL_RCC_OscConfig+0x3a8>
 80036d0:	e01b      	b.n	800370a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d2:	4b44      	ldr	r3, [pc, #272]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 80036d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036d8:	4a42      	ldr	r2, [pc, #264]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 80036da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e2:	f7fd fd69 	bl	80011b8 <HAL_GetTick>
 80036e6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80036ea:	f7fd fd65 	bl	80011b8 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e237      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80036fc:	4b39      	ldr	r3, [pc, #228]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 80036fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1ef      	bne.n	80036ea <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 80d2 	beq.w	80038bc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003718:	4b34      	ldr	r3, [pc, #208]	; (80037ec <HAL_RCC_OscConfig+0x4e4>)
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d118      	bne.n	8003756 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003724:	4b31      	ldr	r3, [pc, #196]	; (80037ec <HAL_RCC_OscConfig+0x4e4>)
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	4a30      	ldr	r2, [pc, #192]	; (80037ec <HAL_RCC_OscConfig+0x4e4>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003730:	f7fd fd42 	bl	80011b8 <HAL_GetTick>
 8003734:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003738:	f7fd fd3e 	bl	80011b8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e210      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800374a:	4b28      	ldr	r3, [pc, #160]	; (80037ec <HAL_RCC_OscConfig+0x4e4>)
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d108      	bne.n	8003770 <HAL_RCC_OscConfig+0x468>
 800375e:	4b21      	ldr	r3, [pc, #132]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 8003760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003764:	4a1f      	ldr	r2, [pc, #124]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800376e:	e074      	b.n	800385a <HAL_RCC_OscConfig+0x552>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d118      	bne.n	80037aa <HAL_RCC_OscConfig+0x4a2>
 8003778:	4b1a      	ldr	r3, [pc, #104]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 800377a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800377e:	4a19      	ldr	r2, [pc, #100]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 8003780:	f023 0301 	bic.w	r3, r3, #1
 8003784:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003788:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 800378a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800378e:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 8003790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003794:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003798:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 800379a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800379e:	4a11      	ldr	r2, [pc, #68]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80037a8:	e057      	b.n	800385a <HAL_RCC_OscConfig+0x552>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b05      	cmp	r3, #5
 80037b0:	d11e      	bne.n	80037f0 <HAL_RCC_OscConfig+0x4e8>
 80037b2:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 80037b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037b8:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 80037ba:	f043 0304 	orr.w	r3, r3, #4
 80037be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80037c2:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 80037c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037c8:	4a06      	ldr	r2, [pc, #24]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 80037ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80037d2:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 80037d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037d8:	4a02      	ldr	r2, [pc, #8]	; (80037e4 <HAL_RCC_OscConfig+0x4dc>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80037e2:	e03a      	b.n	800385a <HAL_RCC_OscConfig+0x552>
 80037e4:	44020c00 	.word	0x44020c00
 80037e8:	20000004 	.word	0x20000004
 80037ec:	44020800 	.word	0x44020800
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b85      	cmp	r3, #133	; 0x85
 80037f6:	d118      	bne.n	800382a <HAL_RCC_OscConfig+0x522>
 80037f8:	4ba2      	ldr	r3, [pc, #648]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 80037fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037fe:	4aa1      	ldr	r2, [pc, #644]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003800:	f043 0304 	orr.w	r3, r3, #4
 8003804:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003808:	4b9e      	ldr	r3, [pc, #632]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 800380a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800380e:	4a9d      	ldr	r2, [pc, #628]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003814:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003818:	4b9a      	ldr	r3, [pc, #616]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 800381a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800381e:	4a99      	ldr	r2, [pc, #612]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003828:	e017      	b.n	800385a <HAL_RCC_OscConfig+0x552>
 800382a:	4b96      	ldr	r3, [pc, #600]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 800382c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003830:	4a94      	ldr	r2, [pc, #592]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800383a:	4b92      	ldr	r3, [pc, #584]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 800383c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003840:	4a90      	ldr	r2, [pc, #576]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003842:	f023 0304 	bic.w	r3, r3, #4
 8003846:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800384a:	4b8e      	ldr	r3, [pc, #568]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 800384c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003850:	4a8c      	ldr	r2, [pc, #560]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003856:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d016      	beq.n	8003890 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003862:	f7fd fca9 	bl	80011b8 <HAL_GetTick>
 8003866:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003868:	e00a      	b.n	8003880 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386a:	f7fd fca5 	bl	80011b8 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	f241 3288 	movw	r2, #5000	; 0x1388
 8003878:	4293      	cmp	r3, r2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e175      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003880:	4b80      	ldr	r3, [pc, #512]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0ed      	beq.n	800386a <HAL_RCC_OscConfig+0x562>
 800388e:	e015      	b.n	80038bc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003890:	f7fd fc92 	bl	80011b8 <HAL_GetTick>
 8003894:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003896:	e00a      	b.n	80038ae <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003898:	f7fd fc8e 	bl	80011b8 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e15e      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038ae:	4b75      	ldr	r3, [pc, #468]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 80038b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1ed      	bne.n	8003898 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d036      	beq.n	8003936 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d019      	beq.n	8003904 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038d0:	4b6c      	ldr	r3, [pc, #432]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a6b      	ldr	r2, [pc, #428]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 80038d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038dc:	f7fd fc6c 	bl	80011b8 <HAL_GetTick>
 80038e0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80038e4:	f7fd fc68 	bl	80011b8 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e13a      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80038f6:	4b63      	ldr	r3, [pc, #396]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0x5dc>
 8003902:	e018      	b.n	8003936 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003904:	4b5f      	ldr	r3, [pc, #380]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a5e      	ldr	r2, [pc, #376]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 800390a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800390e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7fd fc52 	bl	80011b8 <HAL_GetTick>
 8003914:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003918:	f7fd fc4e 	bl	80011b8 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e120      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800392a:	4b56      	ldr	r3, [pc, #344]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 8115 	beq.w	8003b6a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2b18      	cmp	r3, #24
 8003944:	f000 80af 	beq.w	8003aa6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	2b02      	cmp	r3, #2
 800394e:	f040 8086 	bne.w	8003a5e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003952:	4b4c      	ldr	r3, [pc, #304]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a4b      	ldr	r2, [pc, #300]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800395c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395e:	f7fd fc2b 	bl	80011b8 <HAL_GetTick>
 8003962:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003966:	f7fd fc27 	bl	80011b8 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e0f9      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003978:	4b42      	ldr	r3, [pc, #264]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f0      	bne.n	8003966 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003984:	4b3f      	ldr	r3, [pc, #252]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800398c:	f023 0303 	bic.w	r3, r3, #3
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003998:	0212      	lsls	r2, r2, #8
 800399a:	430a      	orrs	r2, r1
 800399c:	4939      	ldr	r1, [pc, #228]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	628b      	str	r3, [r1, #40]	; 0x28
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a6:	3b01      	subs	r3, #1
 80039a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	3b01      	subs	r3, #1
 80039b2:	025b      	lsls	r3, r3, #9
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039bc:	3b01      	subs	r3, #1
 80039be:	041b      	lsls	r3, r3, #16
 80039c0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	3b01      	subs	r3, #1
 80039cc:	061b      	lsls	r3, r3, #24
 80039ce:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039d2:	492c      	ldr	r1, [pc, #176]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80039d8:	4b2a      	ldr	r3, [pc, #168]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 80039de:	f023 0310 	bic.w	r3, r3, #16
 80039e2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e8:	4a26      	ldr	r2, [pc, #152]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80039ee:	4b25      	ldr	r3, [pc, #148]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	4a24      	ldr	r2, [pc, #144]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 80039f4:	f043 0310 	orr.w	r3, r3, #16
 80039f8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80039fa:	4b22      	ldr	r3, [pc, #136]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	f023 020c 	bic.w	r2, r3, #12
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	491f      	ldr	r1, [pc, #124]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	f023 0220 	bic.w	r2, r3, #32
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a18:	491a      	ldr	r1, [pc, #104]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a1e:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	4a18      	ldr	r2, [pc, #96]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a28:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003a2a:	4b16      	ldr	r3, [pc, #88]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a15      	ldr	r2, [pc, #84]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003a30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a36:	f7fd fbbf 	bl	80011b8 <HAL_GetTick>
 8003a3a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003a3e:	f7fd fbbb 	bl	80011b8 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e08d      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x736>
 8003a5c:	e085      	b.n	8003b6a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a08      	ldr	r2, [pc, #32]	; (8003a84 <HAL_RCC_OscConfig+0x77c>)
 8003a64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fd fba5 	bl	80011b8 <HAL_GetTick>
 8003a6e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a70:	e00a      	b.n	8003a88 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003a72:	f7fd fba1 	bl	80011b8 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d903      	bls.n	8003a88 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e073      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
 8003a84:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a88:	4b3a      	ldr	r3, [pc, #232]	; (8003b74 <HAL_RCC_OscConfig+0x86c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1ee      	bne.n	8003a72 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003a94:	4b37      	ldr	r3, [pc, #220]	; (8003b74 <HAL_RCC_OscConfig+0x86c>)
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	4a36      	ldr	r2, [pc, #216]	; (8003b74 <HAL_RCC_OscConfig+0x86c>)
 8003a9a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003a9e:	f023 0303 	bic.w	r3, r3, #3
 8003aa2:	6293      	str	r3, [r2, #40]	; 0x28
 8003aa4:	e061      	b.n	8003b6a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003aa6:	4b33      	ldr	r3, [pc, #204]	; (8003b74 <HAL_RCC_OscConfig+0x86c>)
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003aac:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <HAL_RCC_OscConfig+0x86c>)
 8003aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d031      	beq.n	8003b1e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f003 0203 	and.w	r2, r3, #3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d12a      	bne.n	8003b1e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d122      	bne.n	8003b1e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d11a      	bne.n	8003b1e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	0a5b      	lsrs	r3, r3, #9
 8003aec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d111      	bne.n	8003b1e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d108      	bne.n	8003b1e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	0e1b      	lsrs	r3, r3, #24
 8003b10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d001      	beq.n	8003b22 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e024      	b.n	8003b6c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003b22:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <HAL_RCC_OscConfig+0x86c>)
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	08db      	lsrs	r3, r3, #3
 8003b28:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d01a      	beq.n	8003b6a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003b34:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <HAL_RCC_OscConfig+0x86c>)
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	4a0e      	ldr	r2, [pc, #56]	; (8003b74 <HAL_RCC_OscConfig+0x86c>)
 8003b3a:	f023 0310 	bic.w	r3, r3, #16
 8003b3e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fd fb3a 	bl	80011b8 <HAL_GetTick>
 8003b44:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003b46:	bf00      	nop
 8003b48:	f7fd fb36 	bl	80011b8 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d0f9      	beq.n	8003b48 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b58:	4a06      	ldr	r2, [pc, #24]	; (8003b74 <HAL_RCC_OscConfig+0x86c>)
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003b5e:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <HAL_RCC_OscConfig+0x86c>)
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	4a04      	ldr	r2, [pc, #16]	; (8003b74 <HAL_RCC_OscConfig+0x86c>)
 8003b64:	f043 0310 	orr.w	r3, r3, #16
 8003b68:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	44020c00 	.word	0x44020c00

08003b78 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e19e      	b.n	8003eca <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b8c:	4b83      	ldr	r3, [pc, #524]	; (8003d9c <HAL_RCC_ClockConfig+0x224>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d910      	bls.n	8003bbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9a:	4b80      	ldr	r3, [pc, #512]	; (8003d9c <HAL_RCC_ClockConfig+0x224>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f023 020f 	bic.w	r2, r3, #15
 8003ba2:	497e      	ldr	r1, [pc, #504]	; (8003d9c <HAL_RCC_ClockConfig+0x224>)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003baa:	4b7c      	ldr	r3, [pc, #496]	; (8003d9c <HAL_RCC_ClockConfig+0x224>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e186      	b.n	8003eca <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d012      	beq.n	8003bee <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	4b74      	ldr	r3, [pc, #464]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	0a1b      	lsrs	r3, r3, #8
 8003bd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d909      	bls.n	8003bee <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003bda:	4b71      	ldr	r3, [pc, #452]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	496d      	ldr	r1, [pc, #436]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d012      	beq.n	8003c20 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691a      	ldr	r2, [r3, #16]
 8003bfe:	4b68      	ldr	r3, [pc, #416]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d909      	bls.n	8003c20 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003c0c:	4b64      	ldr	r3, [pc, #400]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	4961      	ldr	r1, [pc, #388]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d010      	beq.n	8003c4e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	4b5b      	ldr	r3, [pc, #364]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d908      	bls.n	8003c4e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003c3c:	4b58      	ldr	r3, [pc, #352]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4955      	ldr	r1, [pc, #340]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d010      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	4b50      	ldr	r3, [pc, #320]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d908      	bls.n	8003c7c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003c6a:	4b4d      	ldr	r3, [pc, #308]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f023 020f 	bic.w	r2, r3, #15
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	494a      	ldr	r1, [pc, #296]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8093 	beq.w	8003db0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003c92:	4b43      	ldr	r3, [pc, #268]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d121      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e113      	b.n	8003eca <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003caa:	4b3d      	ldr	r3, [pc, #244]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d115      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e107      	b.n	8003eca <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d107      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003cc2:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e0fb      	b.n	8003eca <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd2:	4b33      	ldr	r3, [pc, #204]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e0f3      	b.n	8003eca <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003ce2:	4b2f      	ldr	r3, [pc, #188]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	f023 0203 	bic.w	r2, r3, #3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	492c      	ldr	r1, [pc, #176]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf4:	f7fd fa60 	bl	80011b8 <HAL_GetTick>
 8003cf8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d112      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d02:	e00a      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003d04:	f7fd fa58 	bl	80011b8 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e0d7      	b.n	8003eca <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d1a:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f003 0318 	and.w	r3, r3, #24
 8003d22:	2b18      	cmp	r3, #24
 8003d24:	d1ee      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x18c>
 8003d26:	e043      	b.n	8003db0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d112      	bne.n	8003d56 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d30:	e00a      	b.n	8003d48 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003d32:	f7fd fa41 	bl	80011b8 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e0c0      	b.n	8003eca <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d48:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	f003 0318 	and.w	r3, r3, #24
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d1ee      	bne.n	8003d32 <HAL_RCC_ClockConfig+0x1ba>
 8003d54:	e02c      	b.n	8003db0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d122      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003d60:	f7fd fa2a 	bl	80011b8 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e0a9      	b.n	8003eca <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003d76:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <HAL_RCC_ClockConfig+0x228>)
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f003 0318 	and.w	r3, r3, #24
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d1ee      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x1e8>
 8003d82:	e015      	b.n	8003db0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003d84:	f7fd fa18 	bl	80011b8 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d906      	bls.n	8003da4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e097      	b.n	8003eca <HAL_RCC_ClockConfig+0x352>
 8003d9a:	bf00      	nop
 8003d9c:	40022000 	.word	0x40022000
 8003da0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003da4:	4b4b      	ldr	r3, [pc, #300]	; (8003ed4 <HAL_RCC_ClockConfig+0x35c>)
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f003 0318 	and.w	r3, r3, #24
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e9      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d010      	beq.n	8003dde <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	4b44      	ldr	r3, [pc, #272]	; (8003ed4 <HAL_RCC_ClockConfig+0x35c>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d208      	bcs.n	8003dde <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003dcc:	4b41      	ldr	r3, [pc, #260]	; (8003ed4 <HAL_RCC_ClockConfig+0x35c>)
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	f023 020f 	bic.w	r2, r3, #15
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	493e      	ldr	r1, [pc, #248]	; (8003ed4 <HAL_RCC_ClockConfig+0x35c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dde:	4b3e      	ldr	r3, [pc, #248]	; (8003ed8 <HAL_RCC_ClockConfig+0x360>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d210      	bcs.n	8003e0e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dec:	4b3a      	ldr	r3, [pc, #232]	; (8003ed8 <HAL_RCC_ClockConfig+0x360>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f023 020f 	bic.w	r2, r3, #15
 8003df4:	4938      	ldr	r1, [pc, #224]	; (8003ed8 <HAL_RCC_ClockConfig+0x360>)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfc:	4b36      	ldr	r3, [pc, #216]	; (8003ed8 <HAL_RCC_ClockConfig+0x360>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d001      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e05d      	b.n	8003eca <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d010      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	4b2d      	ldr	r3, [pc, #180]	; (8003ed4 <HAL_RCC_ClockConfig+0x35c>)
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d208      	bcs.n	8003e3c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003e2a:	4b2a      	ldr	r3, [pc, #168]	; (8003ed4 <HAL_RCC_ClockConfig+0x35c>)
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	4927      	ldr	r1, [pc, #156]	; (8003ed4 <HAL_RCC_ClockConfig+0x35c>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d012      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	4b21      	ldr	r3, [pc, #132]	; (8003ed4 <HAL_RCC_ClockConfig+0x35c>)
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d209      	bcs.n	8003e6e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003e5a:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <HAL_RCC_ClockConfig+0x35c>)
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	491a      	ldr	r1, [pc, #104]	; (8003ed4 <HAL_RCC_ClockConfig+0x35c>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d012      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695a      	ldr	r2, [r3, #20]
 8003e7e:	4b15      	ldr	r3, [pc, #84]	; (8003ed4 <HAL_RCC_ClockConfig+0x35c>)
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	0a1b      	lsrs	r3, r3, #8
 8003e84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d209      	bcs.n	8003ea0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003e8c:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <HAL_RCC_ClockConfig+0x35c>)
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	490e      	ldr	r1, [pc, #56]	; (8003ed4 <HAL_RCC_ClockConfig+0x35c>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003ea0:	f000 f822 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_RCC_ClockConfig+0x35c>)
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	490b      	ldr	r1, [pc, #44]	; (8003edc <HAL_RCC_ClockConfig+0x364>)
 8003eb0:	5ccb      	ldrb	r3, [r1, r3]
 8003eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <HAL_RCC_ClockConfig+0x368>)
 8003eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003eba:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <HAL_RCC_ClockConfig+0x36c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fc fdca 	bl	8000a58 <HAL_InitTick>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003ec8:	7afb      	ldrb	r3, [r7, #11]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	44020c00 	.word	0x44020c00
 8003ed8:	40022000 	.word	0x40022000
 8003edc:	08013110 	.word	0x08013110
 8003ee0:	20000000 	.word	0x20000000
 8003ee4:	20000004 	.word	0x20000004

08003ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b089      	sub	sp, #36	; 0x24
 8003eec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003eee:	4b8c      	ldr	r3, [pc, #560]	; (8004120 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f003 0318 	and.w	r3, r3, #24
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d102      	bne.n	8003f00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003efa:	4b8a      	ldr	r3, [pc, #552]	; (8004124 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	e107      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f00:	4b87      	ldr	r3, [pc, #540]	; (8004120 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	f003 0318 	and.w	r3, r3, #24
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d112      	bne.n	8003f32 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003f0c:	4b84      	ldr	r3, [pc, #528]	; (8004120 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d009      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f18:	4b81      	ldr	r3, [pc, #516]	; (8004120 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	08db      	lsrs	r3, r3, #3
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	4a81      	ldr	r2, [pc, #516]	; (8004128 <HAL_RCC_GetSysClockFreq+0x240>)
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	e0f1      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003f2c:	4b7e      	ldr	r3, [pc, #504]	; (8004128 <HAL_RCC_GetSysClockFreq+0x240>)
 8003f2e:	61fb      	str	r3, [r7, #28]
 8003f30:	e0ee      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f32:	4b7b      	ldr	r3, [pc, #492]	; (8004120 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f003 0318 	and.w	r3, r3, #24
 8003f3a:	2b10      	cmp	r3, #16
 8003f3c:	d102      	bne.n	8003f44 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f3e:	4b7b      	ldr	r3, [pc, #492]	; (800412c <HAL_RCC_GetSysClockFreq+0x244>)
 8003f40:	61fb      	str	r3, [r7, #28]
 8003f42:	e0e5      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f44:	4b76      	ldr	r3, [pc, #472]	; (8004120 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f003 0318 	and.w	r3, r3, #24
 8003f4c:	2b18      	cmp	r3, #24
 8003f4e:	f040 80dd 	bne.w	800410c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003f52:	4b73      	ldr	r3, [pc, #460]	; (8004120 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003f5c:	4b70      	ldr	r3, [pc, #448]	; (8004120 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	0a1b      	lsrs	r3, r3, #8
 8003f62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f66:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003f68:	4b6d      	ldr	r3, [pc, #436]	; (8004120 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003f74:	4b6a      	ldr	r3, [pc, #424]	; (8004120 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003f78:	08db      	lsrs	r3, r3, #3
 8003f7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	fb02 f303 	mul.w	r3, r2, r3
 8003f84:	ee07 3a90 	vmov	s15, r3
 8003f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 80b7 	beq.w	8004106 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d003      	beq.n	8003fa6 <HAL_RCC_GetSysClockFreq+0xbe>
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d056      	beq.n	8004052 <HAL_RCC_GetSysClockFreq+0x16a>
 8003fa4:	e077      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003fa6:	4b5e      	ldr	r3, [pc, #376]	; (8004120 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d02d      	beq.n	800400e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003fb2:	4b5b      	ldr	r3, [pc, #364]	; (8004120 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	08db      	lsrs	r3, r3, #3
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	4a5a      	ldr	r2, [pc, #360]	; (8004128 <HAL_RCC_GetSysClockFreq+0x240>)
 8003fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	ee07 3a90 	vmov	s15, r3
 8003fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fdc:	4b50      	ldr	r3, [pc, #320]	; (8004120 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe4:	ee07 3a90 	vmov	s15, r3
 8003fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fec:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ff0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004130 <HAL_RCC_GetSysClockFreq+0x248>
 8003ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ffc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004000:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004008:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800400c:	e065      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	ee07 3a90 	vmov	s15, r3
 8004014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004018:	eddf 6a46 	vldr	s13, [pc, #280]	; 8004134 <HAL_RCC_GetSysClockFreq+0x24c>
 800401c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004020:	4b3f      	ldr	r3, [pc, #252]	; (8004120 <HAL_RCC_GetSysClockFreq+0x238>)
 8004022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004028:	ee07 3a90 	vmov	s15, r3
 800402c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004030:	ed97 6a02 	vldr	s12, [r7, #8]
 8004034:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004130 <HAL_RCC_GetSysClockFreq+0x248>
 8004038:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800403c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004044:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004050:	e043      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	ee07 3a90 	vmov	s15, r3
 8004058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8004138 <HAL_RCC_GetSysClockFreq+0x250>
 8004060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004064:	4b2e      	ldr	r3, [pc, #184]	; (8004120 <HAL_RCC_GetSysClockFreq+0x238>)
 8004066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406c:	ee07 3a90 	vmov	s15, r3
 8004070:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004074:	ed97 6a02 	vldr	s12, [r7, #8]
 8004078:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004130 <HAL_RCC_GetSysClockFreq+0x248>
 800407c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004080:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004084:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004088:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800408c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004090:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004094:	e021      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	ee07 3a90 	vmov	s15, r3
 800409c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a0:	eddf 6a26 	vldr	s13, [pc, #152]	; 800413c <HAL_RCC_GetSysClockFreq+0x254>
 80040a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040a8:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_RCC_GetSysClockFreq+0x238>)
 80040aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b0:	ee07 3a90 	vmov	s15, r3
 80040b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80040b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80040bc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004130 <HAL_RCC_GetSysClockFreq+0x248>
 80040c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80040c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80040d8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80040da:	4b11      	ldr	r3, [pc, #68]	; (8004120 <HAL_RCC_GetSysClockFreq+0x238>)
 80040dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040de:	0a5b      	lsrs	r3, r3, #9
 80040e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040e4:	3301      	adds	r3, #1
 80040e6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040f2:	edd7 6a06 	vldr	s13, [r7, #24]
 80040f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040fe:	ee17 3a90 	vmov	r3, s15
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	e004      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]
 800410a:	e001      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_RCC_GetSysClockFreq+0x240>)
 800410e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004110:	69fb      	ldr	r3, [r7, #28]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3724      	adds	r7, #36	; 0x24
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	44020c00 	.word	0x44020c00
 8004124:	003d0900 	.word	0x003d0900
 8004128:	03d09000 	.word	0x03d09000
 800412c:	007a1200 	.word	0x007a1200
 8004130:	46000000 	.word	0x46000000
 8004134:	4c742400 	.word	0x4c742400
 8004138:	4af42400 	.word	0x4af42400
 800413c:	4a742400 	.word	0x4a742400

08004140 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004144:	f7ff fed0 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8004148:	4602      	mov	r2, r0
 800414a:	4b08      	ldr	r3, [pc, #32]	; (800416c <HAL_RCC_GetHCLKFreq+0x2c>)
 800414c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800414e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004152:	4907      	ldr	r1, [pc, #28]	; (8004170 <HAL_RCC_GetHCLKFreq+0x30>)
 8004154:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004156:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800415a:	fa22 f303 	lsr.w	r3, r2, r3
 800415e:	4a05      	ldr	r2, [pc, #20]	; (8004174 <HAL_RCC_GetHCLKFreq+0x34>)
 8004160:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004162:	4b04      	ldr	r3, [pc, #16]	; (8004174 <HAL_RCC_GetHCLKFreq+0x34>)
 8004164:	681b      	ldr	r3, [r3, #0]
}
 8004166:	4618      	mov	r0, r3
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	44020c00 	.word	0x44020c00
 8004170:	08013110 	.word	0x08013110
 8004174:	20000000 	.word	0x20000000

08004178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800417c:	f7ff ffe0 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004180:	4602      	mov	r2, r0
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	4904      	ldr	r1, [pc, #16]	; (80041a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800418e:	5ccb      	ldrb	r3, [r1, r3]
 8004190:	f003 031f 	and.w	r3, r3, #31
 8004194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004198:	4618      	mov	r0, r3
 800419a:	bd80      	pop	{r7, pc}
 800419c:	44020c00 	.word	0x44020c00
 80041a0:	08013120 	.word	0x08013120

080041a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	221f      	movs	r2, #31
 80041b2:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80041b4:	4b15      	ldr	r3, [pc, #84]	; (800420c <HAL_RCC_GetClockConfig+0x68>)
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f003 0203 	and.w	r2, r3, #3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 80041c0:	4b12      	ldr	r3, [pc, #72]	; (800420c <HAL_RCC_GetClockConfig+0x68>)
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f003 020f 	and.w	r2, r3, #15
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	0a1b      	lsrs	r3, r3, #8
 80041ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80041f2:	4b07      	ldr	r3, [pc, #28]	; (8004210 <HAL_RCC_GetClockConfig+0x6c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 020f 	and.w	r2, r3, #15
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	601a      	str	r2, [r3, #0]
}
 80041fe:	bf00      	nop
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	44020c00 	.word	0x44020c00
 8004210:	40022000 	.word	0x40022000

08004214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e049      	b.n	80042ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f841 	bl	80042c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	4619      	mov	r1, r3
 8004252:	4610      	mov	r0, r2
 8004254:	f000 fa60 	bl	8004718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d001      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e07c      	b.n	80043ea <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0201 	orr.w	r2, r2, #1
 8004306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a3a      	ldr	r2, [pc, #232]	; (80043f8 <HAL_TIM_Base_Start_IT+0x120>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d04a      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0xd0>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a39      	ldr	r2, [pc, #228]	; (80043fc <HAL_TIM_Base_Start_IT+0x124>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d045      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0xd0>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004324:	d040      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0xd0>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800432e:	d03b      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0xd0>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a32      	ldr	r2, [pc, #200]	; (8004400 <HAL_TIM_Base_Start_IT+0x128>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d036      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0xd0>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a31      	ldr	r2, [pc, #196]	; (8004404 <HAL_TIM_Base_Start_IT+0x12c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d031      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0xd0>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a2f      	ldr	r2, [pc, #188]	; (8004408 <HAL_TIM_Base_Start_IT+0x130>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d02c      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0xd0>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2e      	ldr	r2, [pc, #184]	; (800440c <HAL_TIM_Base_Start_IT+0x134>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d027      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0xd0>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a2c      	ldr	r2, [pc, #176]	; (8004410 <HAL_TIM_Base_Start_IT+0x138>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d022      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0xd0>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a2b      	ldr	r2, [pc, #172]	; (8004414 <HAL_TIM_Base_Start_IT+0x13c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d01d      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0xd0>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a29      	ldr	r2, [pc, #164]	; (8004418 <HAL_TIM_Base_Start_IT+0x140>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d018      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0xd0>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a28      	ldr	r2, [pc, #160]	; (800441c <HAL_TIM_Base_Start_IT+0x144>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d013      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0xd0>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a26      	ldr	r2, [pc, #152]	; (8004420 <HAL_TIM_Base_Start_IT+0x148>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00e      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0xd0>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a25      	ldr	r2, [pc, #148]	; (8004424 <HAL_TIM_Base_Start_IT+0x14c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d009      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0xd0>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a23      	ldr	r2, [pc, #140]	; (8004428 <HAL_TIM_Base_Start_IT+0x150>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0xd0>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a22      	ldr	r2, [pc, #136]	; (800442c <HAL_TIM_Base_Start_IT+0x154>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d115      	bne.n	80043d4 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	4b20      	ldr	r3, [pc, #128]	; (8004430 <HAL_TIM_Base_Start_IT+0x158>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b06      	cmp	r3, #6
 80043b8:	d015      	beq.n	80043e6 <HAL_TIM_Base_Start_IT+0x10e>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d011      	beq.n	80043e6 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d2:	e008      	b.n	80043e6 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e000      	b.n	80043e8 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40012c00 	.word	0x40012c00
 80043fc:	50012c00 	.word	0x50012c00
 8004400:	40000400 	.word	0x40000400
 8004404:	50000400 	.word	0x50000400
 8004408:	40000800 	.word	0x40000800
 800440c:	50000800 	.word	0x50000800
 8004410:	40000c00 	.word	0x40000c00
 8004414:	50000c00 	.word	0x50000c00
 8004418:	40013400 	.word	0x40013400
 800441c:	50013400 	.word	0x50013400
 8004420:	40001800 	.word	0x40001800
 8004424:	50001800 	.word	0x50001800
 8004428:	40014000 	.word	0x40014000
 800442c:	50014000 	.word	0x50014000
 8004430:	00010007 	.word	0x00010007

08004434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d020      	beq.n	8004498 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01b      	beq.n	8004498 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0202 	mvn.w	r2, #2
 8004468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f92c 	bl	80046dc <HAL_TIM_IC_CaptureCallback>
 8004484:	e005      	b.n	8004492 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f91e 	bl	80046c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f92f 	bl	80046f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d020      	beq.n	80044e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01b      	beq.n	80044e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0204 	mvn.w	r2, #4
 80044b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2202      	movs	r2, #2
 80044ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f906 	bl	80046dc <HAL_TIM_IC_CaptureCallback>
 80044d0:	e005      	b.n	80044de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f8f8 	bl	80046c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f909 	bl	80046f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d020      	beq.n	8004530 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01b      	beq.n	8004530 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0208 	mvn.w	r2, #8
 8004500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2204      	movs	r2, #4
 8004506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f8e0 	bl	80046dc <HAL_TIM_IC_CaptureCallback>
 800451c:	e005      	b.n	800452a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f8d2 	bl	80046c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f8e3 	bl	80046f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b00      	cmp	r3, #0
 8004538:	d020      	beq.n	800457c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01b      	beq.n	800457c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0210 	mvn.w	r2, #16
 800454c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2208      	movs	r2, #8
 8004552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f8ba 	bl	80046dc <HAL_TIM_IC_CaptureCallback>
 8004568:	e005      	b.n	8004576 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f8ac 	bl	80046c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f8bd 	bl	80046f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00c      	beq.n	80045a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d007      	beq.n	80045a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0201 	mvn.w	r2, #1
 8004598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fc f960 	bl	8000860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00c      	beq.n	80045c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d007      	beq.n	80045c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f9d2 	bl	8004968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00c      	beq.n	80045e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d007      	beq.n	80045e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f9ca 	bl	800497c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00c      	beq.n	800460c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d007      	beq.n	800460c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f87c 	bl	8004704 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00c      	beq.n	8004630 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d007      	beq.n	8004630 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0220 	mvn.w	r2, #32
 8004628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f992 	bl	8004954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00c      	beq.n	8004654 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800464c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f99e 	bl	8004990 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00c      	beq.n	8004678 <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f996 	bl	80049a4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f98e 	bl	80049b8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00c      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80046b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f986 	bl	80049cc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046c0:	bf00      	nop
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a74      	ldr	r2, [pc, #464]	; (80048fc <TIM_Base_SetConfig+0x1e4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d02b      	beq.n	8004788 <TIM_Base_SetConfig+0x70>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a73      	ldr	r2, [pc, #460]	; (8004900 <TIM_Base_SetConfig+0x1e8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d027      	beq.n	8004788 <TIM_Base_SetConfig+0x70>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473e:	d023      	beq.n	8004788 <TIM_Base_SetConfig+0x70>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004746:	d01f      	beq.n	8004788 <TIM_Base_SetConfig+0x70>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a6e      	ldr	r2, [pc, #440]	; (8004904 <TIM_Base_SetConfig+0x1ec>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d01b      	beq.n	8004788 <TIM_Base_SetConfig+0x70>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a6d      	ldr	r2, [pc, #436]	; (8004908 <TIM_Base_SetConfig+0x1f0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d017      	beq.n	8004788 <TIM_Base_SetConfig+0x70>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a6c      	ldr	r2, [pc, #432]	; (800490c <TIM_Base_SetConfig+0x1f4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d013      	beq.n	8004788 <TIM_Base_SetConfig+0x70>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a6b      	ldr	r2, [pc, #428]	; (8004910 <TIM_Base_SetConfig+0x1f8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00f      	beq.n	8004788 <TIM_Base_SetConfig+0x70>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a6a      	ldr	r2, [pc, #424]	; (8004914 <TIM_Base_SetConfig+0x1fc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00b      	beq.n	8004788 <TIM_Base_SetConfig+0x70>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a69      	ldr	r2, [pc, #420]	; (8004918 <TIM_Base_SetConfig+0x200>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d007      	beq.n	8004788 <TIM_Base_SetConfig+0x70>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a68      	ldr	r2, [pc, #416]	; (800491c <TIM_Base_SetConfig+0x204>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d003      	beq.n	8004788 <TIM_Base_SetConfig+0x70>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a67      	ldr	r2, [pc, #412]	; (8004920 <TIM_Base_SetConfig+0x208>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d108      	bne.n	800479a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a57      	ldr	r2, [pc, #348]	; (80048fc <TIM_Base_SetConfig+0x1e4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d05b      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a56      	ldr	r2, [pc, #344]	; (8004900 <TIM_Base_SetConfig+0x1e8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d057      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b0:	d053      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047b8:	d04f      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a51      	ldr	r2, [pc, #324]	; (8004904 <TIM_Base_SetConfig+0x1ec>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d04b      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a50      	ldr	r2, [pc, #320]	; (8004908 <TIM_Base_SetConfig+0x1f0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d047      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a4f      	ldr	r2, [pc, #316]	; (800490c <TIM_Base_SetConfig+0x1f4>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d043      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a4e      	ldr	r2, [pc, #312]	; (8004910 <TIM_Base_SetConfig+0x1f8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d03f      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a4d      	ldr	r2, [pc, #308]	; (8004914 <TIM_Base_SetConfig+0x1fc>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d03b      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a4c      	ldr	r2, [pc, #304]	; (8004918 <TIM_Base_SetConfig+0x200>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d037      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a4b      	ldr	r2, [pc, #300]	; (800491c <TIM_Base_SetConfig+0x204>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d033      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a4a      	ldr	r2, [pc, #296]	; (8004920 <TIM_Base_SetConfig+0x208>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d02f      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a49      	ldr	r2, [pc, #292]	; (8004924 <TIM_Base_SetConfig+0x20c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d02b      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a48      	ldr	r2, [pc, #288]	; (8004928 <TIM_Base_SetConfig+0x210>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d027      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a47      	ldr	r2, [pc, #284]	; (800492c <TIM_Base_SetConfig+0x214>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d023      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a46      	ldr	r2, [pc, #280]	; (8004930 <TIM_Base_SetConfig+0x218>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d01f      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a45      	ldr	r2, [pc, #276]	; (8004934 <TIM_Base_SetConfig+0x21c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01b      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a44      	ldr	r2, [pc, #272]	; (8004938 <TIM_Base_SetConfig+0x220>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d017      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a43      	ldr	r2, [pc, #268]	; (800493c <TIM_Base_SetConfig+0x224>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d013      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a42      	ldr	r2, [pc, #264]	; (8004940 <TIM_Base_SetConfig+0x228>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00f      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a41      	ldr	r2, [pc, #260]	; (8004944 <TIM_Base_SetConfig+0x22c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00b      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a40      	ldr	r2, [pc, #256]	; (8004948 <TIM_Base_SetConfig+0x230>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d007      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a3f      	ldr	r2, [pc, #252]	; (800494c <TIM_Base_SetConfig+0x234>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d003      	beq.n	800485a <TIM_Base_SetConfig+0x142>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a3e      	ldr	r2, [pc, #248]	; (8004950 <TIM_Base_SetConfig+0x238>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d108      	bne.n	800486c <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a1a      	ldr	r2, [pc, #104]	; (80048fc <TIM_Base_SetConfig+0x1e4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d023      	beq.n	80048e0 <TIM_Base_SetConfig+0x1c8>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a19      	ldr	r2, [pc, #100]	; (8004900 <TIM_Base_SetConfig+0x1e8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d01f      	beq.n	80048e0 <TIM_Base_SetConfig+0x1c8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a1e      	ldr	r2, [pc, #120]	; (800491c <TIM_Base_SetConfig+0x204>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d01b      	beq.n	80048e0 <TIM_Base_SetConfig+0x1c8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <TIM_Base_SetConfig+0x208>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d017      	beq.n	80048e0 <TIM_Base_SetConfig+0x1c8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a22      	ldr	r2, [pc, #136]	; (800493c <TIM_Base_SetConfig+0x224>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d013      	beq.n	80048e0 <TIM_Base_SetConfig+0x1c8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a21      	ldr	r2, [pc, #132]	; (8004940 <TIM_Base_SetConfig+0x228>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00f      	beq.n	80048e0 <TIM_Base_SetConfig+0x1c8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a20      	ldr	r2, [pc, #128]	; (8004944 <TIM_Base_SetConfig+0x22c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00b      	beq.n	80048e0 <TIM_Base_SetConfig+0x1c8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a1f      	ldr	r2, [pc, #124]	; (8004948 <TIM_Base_SetConfig+0x230>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d007      	beq.n	80048e0 <TIM_Base_SetConfig+0x1c8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a1e      	ldr	r2, [pc, #120]	; (800494c <TIM_Base_SetConfig+0x234>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_Base_SetConfig+0x1c8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a1d      	ldr	r2, [pc, #116]	; (8004950 <TIM_Base_SetConfig+0x238>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d103      	bne.n	80048e8 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	615a      	str	r2, [r3, #20]
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	50012c00 	.word	0x50012c00
 8004904:	40000400 	.word	0x40000400
 8004908:	50000400 	.word	0x50000400
 800490c:	40000800 	.word	0x40000800
 8004910:	50000800 	.word	0x50000800
 8004914:	40000c00 	.word	0x40000c00
 8004918:	50000c00 	.word	0x50000c00
 800491c:	40013400 	.word	0x40013400
 8004920:	50013400 	.word	0x50013400
 8004924:	40001800 	.word	0x40001800
 8004928:	50001800 	.word	0x50001800
 800492c:	40001c00 	.word	0x40001c00
 8004930:	50001c00 	.word	0x50001c00
 8004934:	40002000 	.word	0x40002000
 8004938:	50002000 	.word	0x50002000
 800493c:	40014000 	.word	0x40014000
 8004940:	50014000 	.word	0x50014000
 8004944:	40014400 	.word	0x40014400
 8004948:	50014400 	.word	0x50014400
 800494c:	40014800 	.word	0x40014800
 8004950:	50014800 	.word	0x50014800

08004954 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <nx_eth_phy_init>:
  * @param  none
  * @retval ETH_PHY_STATUS_OK on success, ETH_PHY_STATUS_ERROR otherwise
  */

int32_t nx_eth_phy_init(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
    int32_t ret = ETH_PHY_STATUS_ERROR;
 80049e6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ea:	607b      	str	r3, [r7, #4]
    /* Set PHY IO functions */

    LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80049ec:	4908      	ldr	r1, [pc, #32]	; (8004a10 <nx_eth_phy_init+0x30>)
 80049ee:	4809      	ldr	r0, [pc, #36]	; (8004a14 <nx_eth_phy_init+0x34>)
 80049f0:	f7fc fa47 	bl	8000e82 <LAN8742_RegisterBusIO>
    /* Initialize the LAN8742 ETH PHY */

    if (LAN8742_Init(&LAN8742) == LAN8742_STATUS_OK)
 80049f4:	4807      	ldr	r0, [pc, #28]	; (8004a14 <nx_eth_phy_init+0x34>)
 80049f6:	f7fc fa76 	bl	8000ee6 <LAN8742_Init>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <nx_eth_phy_init+0x24>
    {
        ret = ETH_PHY_STATUS_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	607b      	str	r3, [r7, #4]
    }

    return ret;
 8004a04:	687b      	ldr	r3, [r7, #4]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	2000000c 	.word	0x2000000c
 8004a14:	20007f70 	.word	0x20007f70

08004a18 <nx_eth_phy_get_link_state>:
  * @param  none
  * @retval the link status.
  */

int32_t nx_eth_phy_get_link_state(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
    int32_t  linkstate = LAN8742_GetLinkState(&LAN8742);
 8004a1e:	4804      	ldr	r0, [pc, #16]	; (8004a30 <nx_eth_phy_get_link_state+0x18>)
 8004a20:	f7fc fb09 	bl	8001036 <LAN8742_GetLinkState>
 8004a24:	6078      	str	r0, [r7, #4]

    return linkstate;
 8004a26:	687b      	ldr	r3, [r7, #4]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	20007f70 	.word	0x20007f70

08004a34 <lan8742_io_init>:
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */

int32_t lan8742_io_init(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&eth_handle);
 8004a38:	4802      	ldr	r0, [pc, #8]	; (8004a44 <lan8742_io_init+0x10>)
 8004a3a:	f7fd fc69 	bl	8002310 <HAL_ETH_SetMDIOClockRange>

  return ETH_PHY_STATUS_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20007e64 	.word	0x20007e64

08004a48 <lan8742_io_deinit>:
  * @brief  De-Initialize the MDIO interface
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t lan8742_io_deinit (void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
    return ETH_PHY_STATUS_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <lan8742_io_read_reg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t lan8742_io_read_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&eth_handle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	68f9      	ldr	r1, [r7, #12]
 8004a6a:	4807      	ldr	r0, [pc, #28]	; (8004a88 <lan8742_io_read_reg+0x30>)
 8004a6c:	f7fd f9a0 	bl	8001db0 <HAL_ETH_ReadPHYRegister>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <lan8742_io_read_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8004a76:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7a:	e000      	b.n	8004a7e <lan8742_io_read_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20007e64 	.word	0x20007e64

08004a8c <lan8742_io_write_reg>:

int32_t lan8742_io_write_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&eth_handle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	68f9      	ldr	r1, [r7, #12]
 8004a9e:	4807      	ldr	r0, [pc, #28]	; (8004abc <lan8742_io_write_reg+0x30>)
 8004aa0:	f7fd f9da 	bl	8001e58 <HAL_ETH_WritePHYRegister>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <lan8742_io_write_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8004aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8004aae:	e000      	b.n	8004ab2 <lan8742_io_write_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20007e64 	.word	0x20007e64

08004ac0 <lan8742_io_get_tick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t lan8742_io_get_tick(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004ac4:	f7fc fb78 	bl	80011b8 <HAL_GetTick>
 8004ac8:	4603      	mov	r3, r0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <nx_stm32_eth_driver>:
/*                                                                        */
/**************************************************************************/
/****** DRIVER SPECIFIC ****** Start of part/vendor specific global driver entry function name.  */
VOID  nx_stm32_eth_driver(NX_IP_DRIVER *driver_req_ptr)
/****** DRIVER SPECIFIC ****** End of part/vendor specific global driver entry function name.  */
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	605a      	str	r2, [r3, #4]

  /* Process according to the driver request type in the IP control
  block.  */
  switch (driver_req_ptr -> nx_ip_driver_command)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b16      	cmp	r3, #22
 8004ae4:	d85c      	bhi.n	8004ba0 <nx_stm32_eth_driver+0xd0>
 8004ae6:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <nx_stm32_eth_driver+0x1c>)
 8004ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aec:	08004b69 	.word	0x08004b69
 8004af0:	08004b51 	.word	0x08004b51
 8004af4:	08004b59 	.word	0x08004b59
 8004af8:	08004b61 	.word	0x08004b61
 8004afc:	08004b69 	.word	0x08004b69
 8004b00:	08004b69 	.word	0x08004b69
 8004b04:	08004b69 	.word	0x08004b69
 8004b08:	08004b69 	.word	0x08004b69
 8004b0c:	08004b71 	.word	0x08004b71
 8004b10:	08004b79 	.word	0x08004b79
 8004b14:	08004b81 	.word	0x08004b81
 8004b18:	08004ba1 	.word	0x08004ba1
 8004b1c:	08004ba1 	.word	0x08004ba1
 8004b20:	08004ba1 	.word	0x08004ba1
 8004b24:	08004ba1 	.word	0x08004ba1
 8004b28:	08004ba1 	.word	0x08004ba1
 8004b2c:	08004ba1 	.word	0x08004ba1
 8004b30:	08004ba1 	.word	0x08004ba1
 8004b34:	08004b89 	.word	0x08004b89
 8004b38:	08004b49 	.word	0x08004b49
 8004b3c:	08004ba1 	.word	0x08004ba1
 8004b40:	08004b91 	.word	0x08004b91
 8004b44:	08004b99 	.word	0x08004b99
  {

  case NX_LINK_INTERFACE_ATTACH:

    /* Process link interface attach requests.  */
    _nx_driver_interface_attach(driver_req_ptr);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f835 	bl	8004bb8 <_nx_driver_interface_attach>
    break;
 8004b4e:	e02e      	b.n	8004bae <nx_stm32_eth_driver+0xde>

  case NX_LINK_INITIALIZE:
    {

      /* Process link initialize requests.  */
      _nx_driver_initialize(driver_req_ptr);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f849 	bl	8004be8 <_nx_driver_initialize>
      break;
 8004b56:	e02a      	b.n	8004bae <nx_stm32_eth_driver+0xde>

  case NX_LINK_ENABLE:
    {

      /* Process link enable requests.  */
      _nx_driver_enable(driver_req_ptr);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f8b9 	bl	8004cd0 <_nx_driver_enable>
      break;
 8004b5e:	e026      	b.n	8004bae <nx_stm32_eth_driver+0xde>

  case NX_LINK_DISABLE:
    {

      /* Process link disable requests.  */
      _nx_driver_disable(driver_req_ptr);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f93d 	bl	8004de0 <_nx_driver_disable>
      break;
 8004b66:	e022      	b.n	8004bae <nx_stm32_eth_driver+0xde>
  case NX_LINK_RARP_SEND:
  case NX_LINK_PACKET_SEND:
    {

      /* Process packet send requests.  */
      _nx_driver_packet_send(driver_req_ptr);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f963 	bl	8004e34 <_nx_driver_packet_send>
      break;
 8004b6e:	e01e      	b.n	8004bae <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_JOIN:
    {

      /* Process multicast join requests.  */
      _nx_driver_multicast_join(driver_req_ptr);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fa21 	bl	8004fb8 <_nx_driver_multicast_join>
      break;
 8004b76:	e01a      	b.n	8004bae <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_LEAVE:
    {

      /* Process multicast leave requests.  */
      _nx_driver_multicast_leave(driver_req_ptr);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fa33 	bl	8004fe4 <_nx_driver_multicast_leave>
      break;
 8004b7e:	e016      	b.n	8004bae <nx_stm32_eth_driver+0xde>

  case NX_LINK_GET_STATUS:
    {

      /* Process get status requests.  */
      _nx_driver_get_status(driver_req_ptr);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fa45 	bl	8005010 <_nx_driver_get_status>
      break;
 8004b86:	e012      	b.n	8004bae <nx_stm32_eth_driver+0xde>
    {

      /* Process driver deferred requests.  */

      /* Process a device driver function on behave of the IP thread. */
      _nx_driver_deferred_processing(driver_req_ptr);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fa7f 	bl	800508c <_nx_driver_deferred_processing>

      break;
 8004b8e:	e00e      	b.n	8004bae <nx_stm32_eth_driver+0xde>
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  case NX_INTERFACE_CAPABILITY_GET:
    {

      /* Process get capability requests.  */
      _nx_driver_capability_get(driver_req_ptr);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fa53 	bl	800503c <_nx_driver_capability_get>
      break;
 8004b96:	e00a      	b.n	8004bae <nx_stm32_eth_driver+0xde>

  case NX_INTERFACE_CAPABILITY_SET:
    {

      /* Process set capability requests.  */
      _nx_driver_capability_set(driver_req_ptr);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fa61 	bl	8005060 <_nx_driver_capability_set>
      break;
 8004b9e:	e006      	b.n	8004bae <nx_stm32_eth_driver+0xde>


    /* Invalid driver request.  */

    /* Return the unhandled command status.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_UNHANDLED_COMMAND;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2244      	movs	r2, #68	; 0x44
 8004ba4:	605a      	str	r2, [r3, #4]

    /* Default to successful return.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	225a      	movs	r2, #90	; 0x5a
 8004baa:	605a      	str	r2, [r3, #4]
  }
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop

08004bb8 <_nx_driver_interface_attach>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_interface_attach(NX_IP_DRIVER *driver_req_ptr)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]


  /* Setup the driver's interface.  This example is for a simple one-interface
  Ethernet driver. Additional logic is necessary for multiple port devices.  */
  nx_driver_information.nx_driver_information_interface =  driver_req_ptr -> nx_ip_driver_interface;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	4a07      	ldr	r2, [pc, #28]	; (8004be4 <_nx_driver_interface_attach+0x2c>)
 8004bc6:	60d3      	str	r3, [r2, #12]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  driver_req_ptr -> nx_ip_driver_interface -> nx_interface_capability_flag = NX_DRIVER_CAPABILITY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004bd0:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  /* Return successful status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	605a      	str	r2, [r3, #4]
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	20007f90 	.word	0x20007f90

08004be8 <_nx_driver_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UINT            status;
  CHAR           *payload_address;       /* Address of the first payload*/
  VOID           *rounded_pool_start;    /* Rounded stating address     */

  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	61fb      	str	r3, [r7, #28]

  /* Setup interface pointer.  */
  interface_ptr = driver_req_ptr -> nx_ip_driver_interface;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	61bb      	str	r3, [r7, #24]

  /* Initialize the driver's information structure.  */

  /* Default IP pointer to NULL.  */
  nx_driver_information.nx_driver_information_ip_ptr =               NX_NULL;
 8004bfc:	4b31      	ldr	r3, [pc, #196]	; (8004cc4 <_nx_driver_initialize+0xdc>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]

  /* Setup the driver state to not initialized.  */
  nx_driver_information.nx_driver_information_state =                NX_DRIVER_STATE_NOT_INITIALIZED;
 8004c02:	4b30      	ldr	r3, [pc, #192]	; (8004cc4 <_nx_driver_initialize+0xdc>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	605a      	str	r2, [r3, #4]

  /* Setup the default packet pool for the driver's received packets.  */
  nx_driver_information.nx_driver_information_packet_pool_ptr = ip_ptr -> nx_ip_default_packet_pool;
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004c0e:	4a2d      	ldr	r2, [pc, #180]	; (8004cc4 <_nx_driver_initialize+0xdc>)
 8004c10:	6093      	str	r3, [r2, #8]

  /* Get the rounded start pool start. */
  rounded_pool_start = nx_driver_information.nx_driver_information_packet_pool_ptr->nx_packet_pool_start;
 8004c12:	4b2c      	ldr	r3, [pc, #176]	; (8004cc4 <_nx_driver_initialize+0xdc>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	617b      	str	r3, [r7, #20]

  /* Calculate the address of payload. */
  payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	333c      	adds	r3, #60	; 0x3c
 8004c1e:	613b      	str	r3, [r7, #16]

  /* Align the address of payload. */
  payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	3303      	adds	r3, #3
 8004c24:	f023 0303 	bic.w	r3, r3, #3
 8004c28:	613b      	str	r3, [r7, #16]

  /* Calculate the header size. */
  header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	4a25      	ldr	r2, [pc, #148]	; (8004cc8 <_nx_driver_initialize+0xe0>)
 8004c32:	6013      	str	r3, [r2, #0]

  /* Clear the deferred events for the driver.  */
  nx_driver_information.nx_driver_information_deferred_events =       0;
 8004c34:	4b23      	ldr	r3, [pc, #140]	; (8004cc4 <_nx_driver_initialize+0xdc>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	611a      	str	r2, [r3, #16]

  /* Call the hardware-specific ethernet controller initialization.  */
  status =  _nx_driver_hardware_initialize(driver_req_ptr);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fabc 	bl	80051b8 <_nx_driver_hardware_initialize>
 8004c40:	60f8      	str	r0, [r7, #12]

  /* Determine if the request was successful.  */
  if (status == NX_SUCCESS)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d136      	bne.n	8004cb6 <_nx_driver_initialize+0xce>
  {

    /* Successful hardware initialization.  */

    /* Setup driver information to point to IP pointer.  */
    nx_driver_information.nx_driver_information_ip_ptr = driver_req_ptr -> nx_ip_driver_ptr;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	4a1d      	ldr	r2, [pc, #116]	; (8004cc4 <_nx_driver_initialize+0xdc>)
 8004c4e:	6013      	str	r3, [r2, #0]

    /* Setup the link maximum transfer unit. */
    interface_ptr -> nx_interface_ip_mtu_size =  NX_DRIVER_ETHERNET_MTU - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004c56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the physical address of this IP instance.  Increment the
    physical address lsw to simulate multiple nodes hanging on the
    ethernet.  */
    interface_ptr -> nx_interface_physical_address_msw =
      (ULONG)(( eth_handle.Init.MACAddr[0] << 8) | ( eth_handle.Init.MACAddr[1]));
 8004c58:	4b1c      	ldr	r3, [pc, #112]	; (8004ccc <_nx_driver_initialize+0xe4>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	4a1a      	ldr	r2, [pc, #104]	; (8004ccc <_nx_driver_initialize+0xe4>)
 8004c62:	6852      	ldr	r2, [r2, #4]
 8004c64:	3201      	adds	r2, #1
 8004c66:	7812      	ldrb	r2, [r2, #0]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_msw =
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	60da      	str	r2, [r3, #12]
    interface_ptr -> nx_interface_physical_address_lsw =
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8004c70:	4b16      	ldr	r3, [pc, #88]	; (8004ccc <_nx_driver_initialize+0xe4>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	3302      	adds	r3, #2
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	061a      	lsls	r2, r3, #24
 8004c7a:	4b14      	ldr	r3, [pc, #80]	; (8004ccc <_nx_driver_initialize+0xe4>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	3303      	adds	r3, #3
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	041b      	lsls	r3, r3, #16
 8004c84:	431a      	orrs	r2, r3
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 8004c86:	4b11      	ldr	r3, [pc, #68]	; (8004ccc <_nx_driver_initialize+0xe4>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	021b      	lsls	r3, r3, #8
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8004c90:	4313      	orrs	r3, r2
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 8004c92:	4a0e      	ldr	r2, [pc, #56]	; (8004ccc <_nx_driver_initialize+0xe4>)
 8004c94:	6852      	ldr	r2, [r2, #4]
 8004c96:	3205      	adds	r2, #5
 8004c98:	7812      	ldrb	r2, [r2, #0]
 8004c9a:	4313      	orrs	r3, r2
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8004c9c:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_lsw =
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	611a      	str	r2, [r3, #16]

    /* Indicate to the IP software that IP to physical mapping
    is required.  */
    interface_ptr -> nx_interface_address_mapping_needed =  NX_TRUE;
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	715a      	strb	r2, [r3, #5]

    /* Move the driver's state to initialized.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_INITIALIZED;
 8004ca8:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <_nx_driver_initialize+0xdc>)
 8004caa:	2203      	movs	r2, #3
 8004cac:	605a      	str	r2, [r3, #4]

    /* Indicate successful initialize.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	605a      	str	r2, [r3, #4]
  {

    /* Initialization failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
  }
}
 8004cb4:	e002      	b.n	8004cbc <_nx_driver_initialize+0xd4>
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	225a      	movs	r2, #90	; 0x5a
 8004cba:	605a      	str	r2, [r3, #4]
}
 8004cbc:	bf00      	nop
 8004cbe:	3720      	adds	r7, #32
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20007f90 	.word	0x20007f90
 8004cc8:	20007fdc 	.word	0x20007fdc
 8004ccc:	20007e64 	.word	0x20007e64

08004cd0 <_nx_driver_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b0a0      	sub	sp, #128	; 0x80
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]

  NX_IP           *ip_ptr;
  ETH_MACConfigTypeDef MACConf;
  UINT            status, duplex, speed = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	67bb      	str	r3, [r7, #120]	; 0x78
  INT             PHYLinkState;

  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	677b      	str	r3, [r7, #116]	; 0x74

  /* See if we can honor the NX_LINK_ENABLE request.  */
  if (nx_driver_information.nx_driver_information_state < NX_DRIVER_STATE_INITIALIZED)
 8004ce2:	4b3d      	ldr	r3, [pc, #244]	; (8004dd8 <_nx_driver_enable+0x108>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d803      	bhi.n	8004cf2 <_nx_driver_enable+0x22>
  {

    /* Mark the request as not successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	225a      	movs	r2, #90	; 0x5a
 8004cee:	605a      	str	r2, [r3, #4]
    return;
 8004cf0:	e06e      	b.n	8004dd0 <_nx_driver_enable+0x100>
  }

  /* Check if it is enabled by someone already */
  if (nx_driver_information.nx_driver_information_state >=  NX_DRIVER_STATE_LINK_ENABLED)
 8004cf2:	4b39      	ldr	r3, [pc, #228]	; (8004dd8 <_nx_driver_enable+0x108>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d903      	bls.n	8004d02 <_nx_driver_enable+0x32>
  {

    /* Yes, the request has already been made.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_ALREADY_ENABLED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2215      	movs	r2, #21
 8004cfe:	605a      	str	r2, [r3, #4]
    return;
 8004d00:	e066      	b.n	8004dd0 <_nx_driver_enable+0x100>
  }

  if (nx_eth_phy_init() != ETH_PHY_STATUS_OK)
 8004d02:	f7ff fe6d 	bl	80049e0 <nx_eth_phy_init>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <_nx_driver_enable+0x44>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	225a      	movs	r2, #90	; 0x5a
 8004d10:	605a      	str	r2, [r3, #4]
    return;
 8004d12:	e05d      	b.n	8004dd0 <_nx_driver_enable+0x100>
  }

  PHYLinkState = nx_eth_phy_get_link_state();
 8004d14:	f7ff fe80 	bl	8004a18 <nx_eth_phy_get_link_state>
 8004d18:	6738      	str	r0, [r7, #112]	; 0x70

  /* Get link state */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 8004d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	dc03      	bgt.n	8004d28 <_nx_driver_enable+0x58>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	225a      	movs	r2, #90	; 0x5a
 8004d24:	605a      	str	r2, [r3, #4]
    return;
 8004d26:	e053      	b.n	8004dd0 <_nx_driver_enable+0x100>
  }
  else
  {
    switch (PHYLinkState)
 8004d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d2a:	3b02      	subs	r3, #2
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d823      	bhi.n	8004d78 <_nx_driver_enable+0xa8>
 8004d30:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <_nx_driver_enable+0x68>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d49 	.word	0x08004d49
 8004d3c:	08004d57 	.word	0x08004d57
 8004d40:	08004d63 	.word	0x08004d63
 8004d44:	08004d6f 	.word	0x08004d6f
      duplex = ETH_HALFDUPLEX_MODE;
      speed = ETH_SPEED_1000M;
      break;
#endif
case ETH_PHY_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d4c:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8004d4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d52:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004d54:	e017      	b.n	8004d86 <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8004d5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d5e:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004d60:	e011      	b.n	8004d86 <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004d62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d66:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_10M;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004d6c:	e00b      	b.n	8004d86 <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_10M;
 8004d72:	2300      	movs	r3, #0
 8004d74:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004d76:	e006      	b.n	8004d86 <_nx_driver_enable+0xb6>
    default:
      duplex = ETH_FULLDUPLEX_MODE;
 8004d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d7c:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8004d7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d82:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004d84:	bf00      	nop
    }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&eth_handle, &MACConf);
 8004d86:	f107 0308 	add.w	r3, r7, #8
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4813      	ldr	r0, [pc, #76]	; (8004ddc <_nx_driver_enable+0x10c>)
 8004d8e:	f7fd f8b7 	bl	8001f00 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004d92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d94:	623b      	str	r3, [r7, #32]
    MACConf.Speed = speed;
 8004d96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d98:	61fb      	str	r3, [r7, #28]
    MACConf.PortSelect = 0;
#else
    MACConf.PortSelect = 1;
#endif
#endif
    HAL_ETH_SetMACConfig(&eth_handle, &MACConf);
 8004d9a:	f107 0308 	add.w	r3, r7, #8
 8004d9e:	4619      	mov	r1, r3
 8004da0:	480e      	ldr	r0, [pc, #56]	; (8004ddc <_nx_driver_enable+0x10c>)
 8004da2:	f7fd fa81 	bl	80022a8 <HAL_ETH_SetMACConfig>
  }

  /* Call hardware specific enable.  */
  status =  _nx_driver_hardware_enable(driver_req_ptr);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fa7e 	bl	80052a8 <_nx_driver_hardware_enable>
 8004dac:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* Was the hardware enable successful?  */
  if (status == NX_SUCCESS)
 8004dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <_nx_driver_enable+0xfa>
  {

    /* Update the driver state to link enabled.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_LINK_ENABLED;
 8004db4:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <_nx_driver_enable+0x108>)
 8004db6:	2204      	movs	r2, #4
 8004db8:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	605a      	str	r2, [r3, #4]

    /* Mark the IP instance as link up.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_TRUE;
 8004dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726
 8004dc8:	e002      	b.n	8004dd0 <_nx_driver_enable+0x100>
  }
  else
  {

    /* Enable failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	225a      	movs	r2, #90	; 0x5a
 8004dce:	605a      	str	r2, [r3, #4]
  }
}
 8004dd0:	3780      	adds	r7, #128	; 0x80
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20007f90 	.word	0x20007f90
 8004ddc:	20007e64 	.word	0x20007e64

08004de0 <_nx_driver_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  NX_IP           *ip_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Check if the link is enabled.  */
  if (nx_driver_information.nx_driver_information_state !=  NX_DRIVER_STATE_LINK_ENABLED)
 8004dee:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <_nx_driver_disable+0x50>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d003      	beq.n	8004dfe <_nx_driver_disable+0x1e>
  {

    /* The link is not enabled, so just return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	225a      	movs	r2, #90	; 0x5a
 8004dfa:	605a      	str	r2, [r3, #4]
    return;
 8004dfc:	e014      	b.n	8004e28 <_nx_driver_disable+0x48>
  }

  /* Call hardware specific disable.  */
  status =  _nx_driver_hardware_disable(driver_req_ptr);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fa60 	bl	80052c4 <_nx_driver_hardware_disable>
 8004e04:	60b8      	str	r0, [r7, #8]

  /* Was the hardware disable successful?  */
  if (status == NX_SUCCESS)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <_nx_driver_disable+0x42>
  {

    /* Mark the IP instance as link down.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_FALSE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726

    /* Update the driver state back to initialized.  */
    nx_driver_information.nx_driver_information_state =  NX_DRIVER_STATE_INITIALIZED;
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <_nx_driver_disable+0x50>)
 8004e16:	2203      	movs	r2, #3
 8004e18:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	605a      	str	r2, [r3, #4]
 8004e20:	e002      	b.n	8004e28 <_nx_driver_disable+0x48>
  }
  else
  {

    /* Disable failed, return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	225a      	movs	r2, #90	; 0x5a
 8004e26:	605a      	str	r2, [r3, #4]
  }
}
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20007f90 	.word	0x20007f90

08004e34 <_nx_driver_packet_send>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_packet_send(NX_IP_DRIVER *driver_req_ptr)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  ULONG           *ethernet_frame_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	617b      	str	r3, [r7, #20]

  /* Check to make sure the link is up.  */
  if (nx_driver_information.nx_driver_information_state != NX_DRIVER_STATE_LINK_ENABLED)
 8004e42:	4b5c      	ldr	r3, [pc, #368]	; (8004fb4 <_nx_driver_packet_send+0x180>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d008      	beq.n	8004e5c <_nx_driver_packet_send+0x28>
  {

    /* Inidate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	225a      	movs	r2, #90	; 0x5a
 8004e4e:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(driver_req_ptr -> nx_ip_driver_packet);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3310      	adds	r3, #16
 8004e54:	4618      	mov	r0, r3
 8004e56:	f009 fafb 	bl	800e450 <_nxe_packet_transmit_release>
    return;
 8004e5a:	e0a7      	b.n	8004fac <_nx_driver_packet_send+0x178>
  }

  /* Process driver send packet.  */

  /* Place the ethernet frame at the front of the packet.  */
  packet_ptr =  driver_req_ptr -> nx_ip_driver_packet;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	60bb      	str	r3, [r7, #8]

  /* Adjust the prepend pointer.  */
  packet_ptr -> nx_packet_prepend_ptr =
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	689a      	ldr	r2, [r3, #8]
  packet_ptr -> nx_packet_prepend_ptr =
 8004e66:	68bb      	ldr	r3, [r7, #8]
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004e68:	3a0e      	subs	r2, #14
  packet_ptr -> nx_packet_prepend_ptr =
 8004e6a:	609a      	str	r2, [r3, #8]

  /* Adjust the packet length.  */
  packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	320e      	adds	r2, #14
 8004e74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Setup the ethernet frame pointer to build the ethernet frame.  Backup another 2
  * bytes to get 32-bit word alignment.  */
  ethernet_frame_ptr =  (ULONG *) (packet_ptr -> nx_packet_prepend_ptr - 2);
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	3b02      	subs	r3, #2
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Set up the hardware addresses in the Ethernet header. */
  *ethernet_frame_ptr       =  driver_req_ptr -> nx_ip_driver_physical_address_msw;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 1) =  driver_req_ptr -> nx_ip_driver_physical_address_lsw;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	68d2      	ldr	r2, [r2, #12]
 8004e8e:	601a      	str	r2, [r3, #0]

  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8004e96:	0419      	lsls	r1, r3, #16
    (ip_ptr -> nx_ip_arp_physical_address_lsw >> 16);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f8d3 3730 	ldr.w	r3, [r3, #1840]	; 0x730
 8004e9e:	0c1a      	lsrs	r2, r3, #16
  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 3) =  (ip_ptr -> nx_ip_arp_physical_address_lsw << 16);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f8d3 2730 	ldr.w	r2, [r3, #1840]	; 0x730
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	330c      	adds	r3, #12
 8004eb2:	0412      	lsls	r2, r2, #16
 8004eb4:	601a      	str	r2, [r3, #0]

  /* Set up the frame type field in the Ethernet harder. */
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b05      	cmp	r3, #5
 8004ebc:	d003      	beq.n	8004ec6 <_nx_driver_packet_send+0x92>
      (driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_RESPONSE_SEND))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 8004ec2:	2b06      	cmp	r3, #6
 8004ec4:	d10a      	bne.n	8004edc <_nx_driver_packet_send+0xa8>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_ARP;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	320c      	adds	r2, #12
 8004ed0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ed4:	f043 0306 	orr.w	r3, r3, #6
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	e016      	b.n	8004f0a <_nx_driver_packet_send+0xd6>
  }
  else if(driver_req_ptr -> nx_ip_driver_command == NX_LINK_RARP_SEND)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b07      	cmp	r3, #7
 8004ee2:	d10a      	bne.n	8004efa <_nx_driver_packet_send+0xc6>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_RARP;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	320c      	adds	r2, #12
 8004eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef2:	f043 0335 	orr.w	r3, r3, #53	; 0x35
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	e007      	b.n	8004f0a <_nx_driver_packet_send+0xd6>
#endif /* FEATURE_NX_IPV6 */

  else
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IP;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	330c      	adds	r3, #12
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	330c      	adds	r3, #12
 8004f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f08:	601a      	str	r2, [r3, #0]
  }

  /* Endian swapping if NX_LITTLE_ENDIAN is defined.  */
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr));
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	ba1a      	rev	r2, r3
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 1));
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	3304      	adds	r3, #4
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	ba12      	rev	r2, r2
 8004f20:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 2));
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	3308      	adds	r3, #8
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	3308      	adds	r3, #8
 8004f2c:	ba12      	rev	r2, r2
 8004f2e:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 3));
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	330c      	adds	r3, #12
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	330c      	adds	r3, #12
 8004f3a:	ba12      	rev	r2, r2
 8004f3c:	601a      	str	r2, [r3, #0]

  /* Determine if the packet exceeds the driver's MTU.  */
  if (packet_ptr -> nx_packet_length > NX_DRIVER_ETHERNET_MTU)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d912      	bls.n	8004f70 <_nx_driver_packet_send+0x13c>
  {

    /* This packet exceeds the size of the driver's MTU. Simply throw it away! */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	320e      	adds	r2, #14
 8004f52:	609a      	str	r2, [r3, #8]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	3a0e      	subs	r2, #14
 8004f5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	225a      	movs	r2, #90	; 0x5a
 8004f62:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 8004f64:	f107 0308 	add.w	r3, r7, #8
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f009 fa71 	bl	800e450 <_nxe_packet_transmit_release>
    return;
 8004f6e:	e01d      	b.n	8004fac <_nx_driver_packet_send+0x178>
  }

  /* Transmit the packet through the Ethernet controller low level access routine. */
  status = _nx_driver_hardware_packet_send(packet_ptr);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 f9b4 	bl	80052e0 <_nx_driver_hardware_packet_send>
 8004f78:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d012      	beq.n	8004fa6 <_nx_driver_packet_send+0x172>
  {

    /* Driver's hardware send packet routine failed to send the packet.  */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	320e      	adds	r2, #14
 8004f88:	609a      	str	r2, [r3, #8]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	3a0e      	subs	r2, #14
 8004f92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	225a      	movs	r2, #90	; 0x5a
 8004f98:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 8004f9a:	f107 0308 	add.w	r3, r7, #8
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f009 fa56 	bl	800e450 <_nxe_packet_transmit_release>
 8004fa4:	e002      	b.n	8004fac <_nx_driver_packet_send+0x178>
  }
  else
  {

    /* Set the status of the request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	605a      	str	r2, [r3, #4]
  }
}
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20007f90 	.word	0x20007f90

08004fb8 <_nx_driver_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast join function. */
  status =  _nx_driver_hardware_multicast_join(driver_req_ptr);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fa25 	bl	8005410 <_nx_driver_hardware_multicast_join>
 8004fc6:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <_nx_driver_multicast_join+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	225a      	movs	r2, #90	; 0x5a
 8004fd2:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8004fd4:	e002      	b.n	8004fdc <_nx_driver_multicast_join+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	605a      	str	r2, [r3, #4]
}
 8004fdc:	bf00      	nop
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <_nx_driver_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast leave function. */
  status =  _nx_driver_hardware_multicast_leave(driver_req_ptr);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fa2b 	bl	8005448 <_nx_driver_hardware_multicast_leave>
 8004ff2:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <_nx_driver_multicast_leave+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	225a      	movs	r2, #90	; 0x5a
 8004ffe:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8005000:	e002      	b.n	8005008 <_nx_driver_multicast_leave+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	605a      	str	r2, [r3, #4]
}
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <_nx_driver_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_get_status(driver_req_ptr);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fa35 	bl	8005488 <_nx_driver_hardware_get_status>
 800501e:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <_nx_driver_get_status+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	225a      	movs	r2, #90	; 0x5a
 800502a:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 800502c:	e002      	b.n	8005034 <_nx_driver_get_status+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	605a      	str	r2, [r3, #4]
}
 8005034:	bf00      	nop
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <_nx_driver_capability_get>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_get(NX_IP_DRIVER *driver_req_ptr)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]

  /* Return the capability of the Ethernet controller.  */
  *(driver_req_ptr -> nx_ip_driver_return_ptr) = NX_DRIVER_CAPABILITY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800504c:	601a      	str	r2, [r3, #0]

  /* Return the success status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	605a      	str	r2, [r3, #4]
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <_nx_driver_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_capability_set(driver_req_ptr);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fab3 	bl	80055d4 <_nx_driver_hardware_capability_set>
 800506e:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <_nx_driver_capability_set+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	225a      	movs	r2, #90	; 0x5a
 800507a:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 800507c:	e002      	b.n	8005084 <_nx_driver_capability_set+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	605a      	str	r2, [r3, #4]
}
 8005084:	bf00      	nop
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <_nx_driver_deferred_processing>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_deferred_processing(NX_IP_DRIVER *driver_req_ptr)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005094:	f3ef 8310 	mrs	r3, PRIMASK
 8005098:	613b      	str	r3, [r7, #16]
#endif
    return(posture);
 800509a:	693b      	ldr	r3, [r7, #16]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800509c:	60fb      	str	r3, [r7, #12]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800509e:	b672      	cpsid	i
#endif
    return(int_posture);
 80050a0:	68fb      	ldr	r3, [r7, #12]

    ULONG       deferred_events;


  /* Disable interrupts.  */
  TX_DISABLE
 80050a2:	61fb      	str	r3, [r7, #28]

    /* Pickup deferred events.  */
    deferred_events =  nx_driver_information.nx_driver_information_deferred_events;
 80050a4:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <_nx_driver_deferred_processing+0x5c>)
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	61bb      	str	r3, [r7, #24]
  nx_driver_information.nx_driver_information_deferred_events =  0;
 80050aa:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <_nx_driver_deferred_processing+0x5c>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	611a      	str	r2, [r3, #16]
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f383 8810 	msr	PRIMASK, r3
}
 80050ba:	bf00      	nop

  /* Restore interrupts.  */
  TX_RESTORE
    /* Check for a transmit complete event.  */
    if(deferred_events & NX_DRIVER_DEFERRED_PACKET_TRANSMITTED)
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <_nx_driver_deferred_processing+0x40>
    {

      /* Process transmitted packet(s).  */
      HAL_ETH_ReleaseTxPacket(&eth_handle);
 80050c6:	4809      	ldr	r0, [pc, #36]	; (80050ec <_nx_driver_deferred_processing+0x60>)
 80050c8:	f7fc fcdf 	bl	8001a8a <HAL_ETH_ReleaseTxPacket>
    }
  /* Check for received packet.  */
  if(deferred_events & NX_DRIVER_DEFERRED_PACKET_RECEIVED)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <_nx_driver_deferred_processing+0x4e>
  {

    /* Process received packet(s).  */
    _nx_driver_hardware_packet_received();
 80050d6:	f000 fa09 	bl	80054ec <_nx_driver_hardware_packet_received>
  }

  /* Mark request as successful.  */
  driver_req_ptr->nx_ip_driver_status =  NX_SUCCESS;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	605a      	str	r2, [r3, #4]
}
 80050e0:	bf00      	nop
 80050e2:	3720      	adds	r7, #32
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20007f90 	.word	0x20007f90
 80050ec:	20007e64 	.word	0x20007e64

080050f0 <_nx_driver_transfer_to_netx>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID _nx_driver_transfer_to_netx(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]

  USHORT    packet_type;


  /* Set the interface for the incoming packet.  */
  packet_ptr -> nx_packet_ip_interface = nx_driver_information.nx_driver_information_interface;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	4a2d      	ldr	r2, [pc, #180]	; (80051b4 <_nx_driver_transfer_to_netx+0xc4>)
 80050fe:	68d2      	ldr	r2, [r2, #12]
 8005100:	631a      	str	r2, [r3, #48]	; 0x30

  /* Pickup the packet header to determine where the packet needs to be
  sent.  */
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	330c      	adds	r3, #12
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	b29a      	uxth	r2, r3
    ((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+13)));
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	330d      	adds	r3, #13
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	b29b      	uxth	r3, r3
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 800511a:	4313      	orrs	r3, r2
 800511c:	81fb      	strh	r3, [r7, #14]

  /* Route the incoming packet according to its ethernet type.  */
  if (packet_type == NX_DRIVER_ETHERNET_IP || packet_type == NX_DRIVER_ETHERNET_IPV6)
 800511e:	89fb      	ldrh	r3, [r7, #14]
 8005120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005124:	d004      	beq.n	8005130 <_nx_driver_transfer_to_netx+0x40>
 8005126:	89fb      	ldrh	r3, [r7, #14]
 8005128:	f248 62dd 	movw	r2, #34525	; 0x86dd
 800512c:	4293      	cmp	r3, r2
 800512e:	d10f      	bne.n	8005150 <_nx_driver_transfer_to_netx+0x60>
    cases, the actual packet length after the Ethernet header should
    be derived from the length in the IP header (lower 16 bits of
    the first 32-bit word).  */

    /* Clean off the Ethernet header.  */
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	320e      	adds	r2, #14
 8005138:	609a      	str	r2, [r3, #8]

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	3a0e      	subs	r2, #14
 8005142:	625a      	str	r2, [r3, #36]	; 0x24

    /* Route to the ip receive function.  */
    _nx_ip_packet_deferred_receive(ip_ptr, packet_ptr);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	4619      	mov	r1, r3
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f002 fe8f 	bl	8007e6c <_nx_ip_packet_deferred_receive>
  else
  {
    /* Invalid ethernet header... release the packet.  */
    nx_packet_release(packet_ptr);
  }
}
 800514e:	e02d      	b.n	80051ac <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_ARP)
 8005150:	89fb      	ldrh	r3, [r7, #14]
 8005152:	f640 0206 	movw	r2, #2054	; 0x806
 8005156:	4293      	cmp	r3, r2
 8005158:	d10f      	bne.n	800517a <_nx_driver_transfer_to_netx+0x8a>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	320e      	adds	r2, #14
 8005162:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	3a0e      	subs	r2, #14
 800516c:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_arp_packet_deferred_receive(ip_ptr, packet_ptr);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fc0d 	bl	8005992 <_nx_arp_packet_deferred_receive>
}
 8005178:	e018      	b.n	80051ac <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_RARP)
 800517a:	89fb      	ldrh	r3, [r7, #14]
 800517c:	f248 0235 	movw	r2, #32821	; 0x8035
 8005180:	4293      	cmp	r3, r2
 8005182:	d10f      	bne.n	80051a4 <_nx_driver_transfer_to_netx+0xb4>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	320e      	adds	r2, #14
 800518c:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	3a0e      	subs	r2, #14
 8005196:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_rarp_packet_deferred_receive(ip_ptr, packet_ptr);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	4619      	mov	r1, r3
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f004 fab9 	bl	8009714 <_nx_rarp_packet_deferred_receive>
}
 80051a2:	e003      	b.n	80051ac <_nx_driver_transfer_to_netx+0xbc>
    nx_packet_release(packet_ptr);
 80051a4:	463b      	mov	r3, r7
 80051a6:	4618      	mov	r0, r3
 80051a8:	f009 f91a 	bl	800e3e0 <_nxe_packet_release>
}
 80051ac:	bf00      	nop
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20007f90 	.word	0x20007f90

080051b8 <_nx_driver_hardware_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08c      	sub	sp, #48	; 0x30
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	605a      	str	r2, [r3, #4]

  /* Setup indices.  */
  nx_driver_information.nx_driver_information_receive_current_index = 0;
 80051c6:	4b34      	ldr	r3, [pc, #208]	; (8005298 <_nx_driver_hardware_initialize+0xe0>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	615a      	str	r2, [r3, #20]
  nx_driver_information.nx_driver_information_transmit_current_index = 0;
 80051cc:	4b32      	ldr	r3, [pc, #200]	; (8005298 <_nx_driver_hardware_initialize+0xe0>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	619a      	str	r2, [r3, #24]
  nx_driver_information.nx_driver_information_transmit_release_index = 0;
 80051d2:	4b31      	ldr	r3, [pc, #196]	; (8005298 <_nx_driver_hardware_initialize+0xe0>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	61da      	str	r2, [r3, #28]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use = 0;
 80051d8:	4b2f      	ldr	r3, [pc, #188]	; (8005298 <_nx_driver_hardware_initialize+0xe0>)
 80051da:	2200      	movs	r2, #0
 80051dc:	621a      	str	r2, [r3, #32]

  /* Make sure there are receive packets... otherwise, return an error.  */
  if (nx_driver_information.nx_driver_information_packet_pool_ptr == NULL)
 80051de:	4b2e      	ldr	r3, [pc, #184]	; (8005298 <_nx_driver_hardware_initialize+0xe0>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <_nx_driver_hardware_initialize+0x32>
  {

    /* There must be receive packets. If not, return an error!  */
    return(NX_DRIVER_ERROR);
 80051e6:	235a      	movs	r3, #90	; 0x5a
 80051e8:	e052      	b.n	8005290 <_nx_driver_hardware_initialize+0xd8>
#ifdef NX_DRIVER_ETH_HW_IP_INIT
  nx_eth_init();
#endif /* NX_DRIVER_ETH_HW_IP_INIT */

  ETH_DMAConfigTypeDef dmaDefaultConf;
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80051ee:	2301      	movs	r3, #1
 80051f0:	743b      	strb	r3, [r7, #16]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80051f2:	2301      	movs	r3, #1
 80051f4:	617b      	str	r3, [r7, #20]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80051f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051fa:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80051fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005202:	2300      	movs	r3, #0
 8005204:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
#ifndef STM32_ETH_HAL_LEGACY
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005208:	2300      	movs	r3, #0
 800520a:	767b      	strb	r3, [r7, #25]
#if defined(ETH_DMASBMR_BLEN4) /* ETH AXI support*/
  dmaDefaultConf.RxOSRLimit = ETH_RX_OSR_LIMIT_3;
  dmaDefaultConf.TxOSRLimit = ETH_TX_OSR_LIMIT_3;
  dmaDefaultConf.AXIBLENMaxSize = ETH_BLEN_MAX_SIZE_16;
#else
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800520c:	2300      	movs	r3, #0
 800520e:	763b      	strb	r3, [r7, #24]
#endif
  dmaDefaultConf.SecondPacketOperate = ENABLE;
 8005210:	2301      	movs	r3, #1
 8005212:	f887 3020 	strb.w	r3, [r7, #32]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005216:	2300      	movs	r3, #0
 8005218:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  dmaDefaultConf.MaximumSegmentSize = 536;
 800521c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005220:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.SecondFrameOperate =  DISABLE;
  dmaDefaultConf.EnhancedDescriptorFormat =  DISABLE;
  dmaDefaultConf.DescriptorSkipLength =  DISABLE;
#endif
  /* enable OSF bit to enhance throughput */
  HAL_ETH_SetDMAConfig(&eth_handle, &dmaDefaultConf);
 8005222:	f107 030c 	add.w	r3, r7, #12
 8005226:	4619      	mov	r1, r3
 8005228:	481c      	ldr	r0, [pc, #112]	; (800529c <_nx_driver_hardware_initialize+0xe4>)
 800522a:	f7fd f857 	bl	80022dc <HAL_ETH_SetDMAConfig>
#ifdef STM32_ETH_PROMISCUOUS_ENABLE
  FilterConfig.PromiscuousMode = ENABLE;
#else
  FilterConfig.PromiscuousMode = DISABLE;
 800522e:	4b1c      	ldr	r3, [pc, #112]	; (80052a0 <_nx_driver_hardware_initialize+0xe8>)
 8005230:	2200      	movs	r2, #0
 8005232:	701a      	strb	r2, [r3, #0]
#endif
  FilterConfig.HashUnicast = DISABLE;
 8005234:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <_nx_driver_hardware_initialize+0xe8>)
 8005236:	2200      	movs	r2, #0
 8005238:	70da      	strb	r2, [r3, #3]
  FilterConfig.HashMulticast = DISABLE;
 800523a:	4b19      	ldr	r3, [pc, #100]	; (80052a0 <_nx_driver_hardware_initialize+0xe8>)
 800523c:	2200      	movs	r2, #0
 800523e:	711a      	strb	r2, [r3, #4]
  FilterConfig.DestAddrInverseFiltering = DISABLE;
 8005240:	4b17      	ldr	r3, [pc, #92]	; (80052a0 <_nx_driver_hardware_initialize+0xe8>)
 8005242:	2200      	movs	r2, #0
 8005244:	721a      	strb	r2, [r3, #8]
  FilterConfig.PassAllMulticast = DISABLE;
 8005246:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <_nx_driver_hardware_initialize+0xe8>)
 8005248:	2200      	movs	r2, #0
 800524a:	715a      	strb	r2, [r3, #5]
  FilterConfig.BroadcastFilter = ENABLE;
 800524c:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <_nx_driver_hardware_initialize+0xe8>)
 800524e:	2201      	movs	r2, #1
 8005250:	725a      	strb	r2, [r3, #9]
  FilterConfig.SrcAddrInverseFiltering = DISABLE;
 8005252:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <_nx_driver_hardware_initialize+0xe8>)
 8005254:	2200      	movs	r2, #0
 8005256:	71da      	strb	r2, [r3, #7]
  FilterConfig.SrcAddrFiltering = DISABLE;
 8005258:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <_nx_driver_hardware_initialize+0xe8>)
 800525a:	2200      	movs	r2, #0
 800525c:	719a      	strb	r2, [r3, #6]
  FilterConfig.HachOrPerfectFilter = DISABLE;
 800525e:	4b10      	ldr	r3, [pc, #64]	; (80052a0 <_nx_driver_hardware_initialize+0xe8>)
 8005260:	2200      	movs	r2, #0
 8005262:	709a      	strb	r2, [r3, #2]
  FilterConfig.ReceiveAllMode = DISABLE;
 8005264:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <_nx_driver_hardware_initialize+0xe8>)
 8005266:	2200      	movs	r2, #0
 8005268:	705a      	strb	r2, [r3, #1]
  FilterConfig.ControlPacketsFilter = 0x00;
 800526a:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <_nx_driver_hardware_initialize+0xe8>)
 800526c:	2200      	movs	r2, #0
 800526e:	60da      	str	r2, [r3, #12]

  /* Set Tx packet config common parameters */
  memset(&TxPacketCfg, 0, sizeof(ETH_TxPacketConfig));
 8005270:	2238      	movs	r2, #56	; 0x38
 8005272:	2100      	movs	r1, #0
 8005274:	480b      	ldr	r0, [pc, #44]	; (80052a4 <_nx_driver_hardware_initialize+0xec>)
 8005276:	f00d f81f 	bl	80122b8 <memset>
  TxPacketCfg.Attributes = ETH_TX_PACKETS_FEATURES_CSUM ;
 800527a:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <_nx_driver_hardware_initialize+0xec>)
 800527c:	2201      	movs	r2, #1
 800527e:	601a      	str	r2, [r3, #0]
  TxPacketCfg.CRCPadCtrl = ETH_CRC_PAD_DISABLE;
 8005280:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <_nx_driver_hardware_initialize+0xec>)
 8005282:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005286:	611a      	str	r2, [r3, #16]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_multicast_count = 0;
 8005288:	4b03      	ldr	r3, [pc, #12]	; (8005298 <_nx_driver_hardware_initialize+0xe0>)
 800528a:	2200      	movs	r2, #0
 800528c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Return success!  */
  return(NX_SUCCESS);
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3730      	adds	r7, #48	; 0x30
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20007f90 	.word	0x20007f90
 800529c:	20007e64 	.word	0x20007e64
 80052a0:	20008018 	.word	0x20008018
 80052a4:	20007fe0 	.word	0x20007fe0

080052a8 <_nx_driver_hardware_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_enable(NX_IP_DRIVER *driver_req_ptr)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]

  /* Call STM32 library to start Ethernet operation.  */
  HAL_ETH_Start_IT(&eth_handle);
 80052b0:	4803      	ldr	r0, [pc, #12]	; (80052c0 <_nx_driver_hardware_enable+0x18>)
 80052b2:	f7fc f98d 	bl	80015d0 <HAL_ETH_Start_IT>

  /* Return success!  */
  return(NX_SUCCESS);
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20007e64 	.word	0x20007e64

080052c4 <_nx_driver_hardware_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_disable(NX_IP_DRIVER *driver_req_ptr)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]

  HAL_ETH_Stop(&eth_handle);
 80052cc:	4803      	ldr	r0, [pc, #12]	; (80052dc <_nx_driver_hardware_disable+0x18>)
 80052ce:	f7fc fa0d 	bl	80016ec <HAL_ETH_Stop>

  /* Return success!  */
  return(NX_SUCCESS);
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	20007e64 	.word	0x20007e64

080052e0 <_nx_driver_hardware_packet_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/

static UINT  _nx_driver_hardware_packet_send(NX_PACKET *packet_ptr)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b092      	sub	sp, #72	; 0x48
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]

  NX_PACKET       *pktIdx;
  UINT            buffLen = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	643b      	str	r3, [r7, #64]	; 0x40

  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80052ec:	f107 030c 	add.w	r3, r7, #12
 80052f0:	2230      	movs	r2, #48	; 0x30
 80052f2:	2100      	movs	r1, #0
 80052f4:	4618      	mov	r0, r3
 80052f6:	f00c ffdf 	bl	80122b8 <memset>


  int i = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	63fb      	str	r3, [r7, #60]	; 0x3c

  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	647b      	str	r3, [r7, #68]	; 0x44
 8005302:	e050      	b.n	80053a6 <_nx_driver_hardware_packet_send+0xc6>
  {
    if (i >= ETH_TX_DESC_CNT)
 8005304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005306:	2b03      	cmp	r3, #3
 8005308:	d901      	bls.n	800530e <_nx_driver_hardware_packet_send+0x2e>
    {
      return NX_DRIVER_ERROR;
 800530a:	235a      	movs	r3, #90	; 0x5a
 800530c:	e077      	b.n	80053fe <_nx_driver_hardware_packet_send+0x11e>
    }

    Txbuffer[i].buffer = pktIdx->nx_packet_prepend_ptr;
 800530e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005310:	6899      	ldr	r1, [r3, #8]
 8005312:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005314:	4613      	mov	r3, r2
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	3348      	adds	r3, #72	; 0x48
 800531e:	443b      	add	r3, r7
 8005320:	3b3c      	subs	r3, #60	; 0x3c
 8005322:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 8005324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	4619      	mov	r1, r3
 8005330:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005332:	4613      	mov	r3, r2
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	3348      	adds	r3, #72	; 0x48
 800533c:	443b      	add	r3, r7
 800533e:	3b38      	subs	r3, #56	; 0x38
 8005340:	6019      	str	r1, [r3, #0]
    buffLen += (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 8005342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	461a      	mov	r2, r3
 800534e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005350:	4413      	add	r3, r2
 8005352:	643b      	str	r3, [r7, #64]	; 0x40

    if(i>0)
 8005354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005356:	2b00      	cmp	r3, #0
 8005358:	dd11      	ble.n	800537e <_nx_driver_hardware_packet_send+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800535a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535c:	1e5a      	subs	r2, r3, #1
 800535e:	f107 000c 	add.w	r0, r7, #12
 8005362:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005364:	460b      	mov	r3, r1
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	440b      	add	r3, r1
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	18c1      	adds	r1, r0, r3
 800536e:	4613      	mov	r3, r2
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	3348      	adds	r3, #72	; 0x48
 8005378:	443b      	add	r3, r7
 800537a:	3b34      	subs	r3, #52	; 0x34
 800537c:	6019      	str	r1, [r3, #0]
    }

    if (pktIdx-> nx_packet_next ==NULL)
 800537e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <_nx_driver_hardware_packet_send+0xba>
    {
      Txbuffer[i].next = NULL;
 8005386:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005388:	4613      	mov	r3, r2
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	3348      	adds	r3, #72	; 0x48
 8005392:	443b      	add	r3, r7
 8005394:	3b34      	subs	r3, #52	; 0x34
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
    }

    i++;
 800539a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539c:	3301      	adds	r3, #1
 800539e:	63fb      	str	r3, [r7, #60]	; 0x3c
  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 80053a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	647b      	str	r3, [r7, #68]	; 0x44
 80053a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1ab      	bne.n	8005304 <_nx_driver_hardware_packet_send+0x24>
    SCB_CleanDCache_by_Addr((uint32_t*)(pktIdx -> nx_packet_data_start), pktIdx -> nx_packet_data_end - pktIdx -> nx_packet_data_start);
#endif
  }

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  if (packet_ptr -> nx_packet_interface_capability_flag & (NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM |
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	f403 7315 	and.w	r3, r3, #596	; 0x254
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d004      	beq.n	80053c2 <_nx_driver_hardware_packet_send+0xe2>
                                                           NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM |
                                                             NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM |
                                                               NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM))
  {
    TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80053b8:	4b13      	ldr	r3, [pc, #76]	; (8005408 <_nx_driver_hardware_packet_send+0x128>)
 80053ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80053be:	615a      	str	r2, [r3, #20]
 80053c0:	e009      	b.n	80053d6 <_nx_driver_hardware_packet_send+0xf6>
  }
  else if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <_nx_driver_hardware_packet_send+0xf6>
  {
    TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_IPHDR_INSERT;
 80053ce:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <_nx_driver_hardware_packet_send+0x128>)
 80053d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80053d4:	615a      	str	r2, [r3, #20]
  }
#else
  TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  TxPacketCfg.Length = buffLen;
 80053d6:	4a0c      	ldr	r2, [pc, #48]	; (8005408 <_nx_driver_hardware_packet_send+0x128>)
 80053d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053da:	6053      	str	r3, [r2, #4]
  TxPacketCfg.TxBuffer = Txbuffer;
 80053dc:	4a0a      	ldr	r2, [pc, #40]	; (8005408 <_nx_driver_hardware_packet_send+0x128>)
 80053de:	f107 030c 	add.w	r3, r7, #12
 80053e2:	6093      	str	r3, [r2, #8]
  TxPacketCfg.pData = (uint32_t *)packet_ptr;
 80053e4:	4a08      	ldr	r2, [pc, #32]	; (8005408 <_nx_driver_hardware_packet_send+0x128>)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6353      	str	r3, [r2, #52]	; 0x34

  if(HAL_ETH_Transmit_IT(&eth_handle, &TxPacketCfg))
 80053ea:	4907      	ldr	r1, [pc, #28]	; (8005408 <_nx_driver_hardware_packet_send+0x128>)
 80053ec:	4807      	ldr	r0, [pc, #28]	; (800540c <_nx_driver_hardware_packet_send+0x12c>)
 80053ee:	f7fc f9cd 	bl	800178c <HAL_ETH_Transmit_IT>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <_nx_driver_hardware_packet_send+0x11c>
  {
    return(NX_DRIVER_ERROR);
 80053f8:	235a      	movs	r3, #90	; 0x5a
 80053fa:	e000      	b.n	80053fe <_nx_driver_hardware_packet_send+0x11e>
  }

  return(NX_SUCCESS);
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3748      	adds	r7, #72	; 0x48
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20007fe0 	.word	0x20007fe0
 800540c:	20007e64 	.word	0x20007e64

08005410 <_nx_driver_hardware_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]


  /* Increase the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count++;
 8005418:	4b08      	ldr	r3, [pc, #32]	; (800543c <_nx_driver_hardware_multicast_join+0x2c>)
 800541a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800541c:	3301      	adds	r3, #1
 800541e:	4a07      	ldr	r2, [pc, #28]	; (800543c <_nx_driver_hardware_multicast_join+0x2c>)
 8005420:	6493      	str	r3, [r2, #72]	; 0x48

  /* Enable multicast frame reception.  */
  FilterConfig.PassAllMulticast = ENABLE;
 8005422:	4b07      	ldr	r3, [pc, #28]	; (8005440 <_nx_driver_hardware_multicast_join+0x30>)
 8005424:	2201      	movs	r2, #1
 8005426:	715a      	strb	r2, [r3, #5]
  HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 8005428:	4905      	ldr	r1, [pc, #20]	; (8005440 <_nx_driver_hardware_multicast_join+0x30>)
 800542a:	4806      	ldr	r0, [pc, #24]	; (8005444 <_nx_driver_hardware_multicast_join+0x34>)
 800542c:	f7fc ffd8 	bl	80023e0 <HAL_ETH_SetMACFilterConfig>

  /* Return success.  */
  return(NX_SUCCESS);
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20007f90 	.word	0x20007f90
 8005440:	20008018 	.word	0x20008018
 8005444:	20007e64 	.word	0x20007e64

08005448 <_nx_driver_hardware_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]

  /* Decrease the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count--;
 8005450:	4b0a      	ldr	r3, [pc, #40]	; (800547c <_nx_driver_hardware_multicast_leave+0x34>)
 8005452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005454:	3b01      	subs	r3, #1
 8005456:	4a09      	ldr	r2, [pc, #36]	; (800547c <_nx_driver_hardware_multicast_leave+0x34>)
 8005458:	6493      	str	r3, [r2, #72]	; 0x48

  /* If multicast count reaches zero, disable multicast frame reception.  */
  if (nx_driver_information.nx_driver_information_multicast_count == 0)
 800545a:	4b08      	ldr	r3, [pc, #32]	; (800547c <_nx_driver_hardware_multicast_leave+0x34>)
 800545c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <_nx_driver_hardware_multicast_leave+0x28>
  {

    /* Disable multicast frame reception.  */
    FilterConfig.PassAllMulticast = DISABLE;
 8005462:	4b07      	ldr	r3, [pc, #28]	; (8005480 <_nx_driver_hardware_multicast_leave+0x38>)
 8005464:	2200      	movs	r2, #0
 8005466:	715a      	strb	r2, [r3, #5]
    HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 8005468:	4905      	ldr	r1, [pc, #20]	; (8005480 <_nx_driver_hardware_multicast_leave+0x38>)
 800546a:	4806      	ldr	r0, [pc, #24]	; (8005484 <_nx_driver_hardware_multicast_leave+0x3c>)
 800546c:	f7fc ffb8 	bl	80023e0 <HAL_ETH_SetMACFilterConfig>
  }

  /* Return success.  */
  return(NX_SUCCESS);
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20007f90 	.word	0x20007f90
 8005480:	20008018 	.word	0x20008018
 8005484:	20007e64 	.word	0x20007e64

08005488 <_nx_driver_hardware_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  INT PHYLinkState;

  /* Get link status. */
  PHYLinkState = nx_eth_phy_get_link_state();
 8005490:	f7ff fac2 	bl	8004a18 <nx_eth_phy_get_link_state>
 8005494:	60f8      	str	r0, [r7, #12]

  /* Check link status. */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b01      	cmp	r3, #1
 800549a:	dc04      	bgt.n	80054a6 <_nx_driver_hardware_get_status+0x1e>
  {
    /* Update Link status if physical link is down. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_FALSE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	e003      	b.n	80054ae <_nx_driver_hardware_get_status+0x26>
  }
  else
  {
    /* Update Link status if physical link is up. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_TRUE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	2201      	movs	r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
  }

  /* Return success. */
  return NX_SUCCESS;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  NX_PACKET * release_packet = (NX_PACKET *) buff;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Remove the Ethernet header and release the packet.  */
  NX_DRIVER_ETHERNET_HEADER_REMOVE(release_packet);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	320e      	adds	r2, #14
 80054cc:	609a      	str	r2, [r3, #8]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3a0e      	subs	r2, #14
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Release the packet.  */
  nx_packet_transmit_release(release_packet);
 80054d8:	f107 030c 	add.w	r3, r7, #12
 80054dc:	4618      	mov	r0, r3
 80054de:	f008 ffb7 	bl	800e450 <_nxe_packet_transmit_release>
}
 80054e2:	bf00      	nop
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <_nx_driver_hardware_packet_received>:

static VOID  _nx_driver_hardware_packet_received(VOID)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
  NX_PACKET  *received_packet_ptr;

  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 80054f2:	e006      	b.n	8005502 <_nx_driver_hardware_packet_received+0x16>
  {
      /* Transfer the packet to NetX.  */
      _nx_driver_transfer_to_netx(nx_driver_information.nx_driver_information_ip_ptr, received_packet_ptr);
 80054f4:	4b09      	ldr	r3, [pc, #36]	; (800551c <_nx_driver_hardware_packet_received+0x30>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	4611      	mov	r1, r2
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff fdf7 	bl	80050f0 <_nx_driver_transfer_to_netx>
  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 8005502:	1d3b      	adds	r3, r7, #4
 8005504:	4619      	mov	r1, r3
 8005506:	4806      	ldr	r0, [pc, #24]	; (8005520 <_nx_driver_hardware_packet_received+0x34>)
 8005508:	f7fc f991 	bl	800182e <HAL_ETH_ReadData>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0f0      	beq.n	80054f4 <_nx_driver_hardware_packet_received+0x8>
  }
}
 8005512:	bf00      	nop
 8005514:	bf00      	nop
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20007f90 	.word	0x20007f90
 8005520:	20007e64 	.word	0x20007e64

08005524 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t ** buff)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  NX_PACKET     *packet_ptr;
  if (nx_packet_allocate(nx_driver_information.nx_driver_information_packet_pool_ptr, &packet_ptr,
 800552c:	4b0d      	ldr	r3, [pc, #52]	; (8005564 <HAL_ETH_RxAllocateCallback+0x40>)
 800552e:	6898      	ldr	r0, [r3, #8]
 8005530:	f107 010c 	add.w	r1, r7, #12
 8005534:	2300      	movs	r3, #0
 8005536:	2200      	movs	r2, #0
 8005538:	f008 fe26 	bl	800e188 <_nxe_packet_allocate>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d109      	bne.n	8005556 <HAL_ETH_RxAllocateCallback+0x32>
                         NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
  {
    /* Adjust the packet.  */
    packet_ptr -> nx_packet_prepend_ptr += 2;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3202      	adds	r2, #2
 800554a:	609a      	str	r2, [r3, #8]
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    SCB_InvalidateDCache_by_Addr((uint32_t*)packet_ptr -> nx_packet_data_start, packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start);
#endif
    *buff = packet_ptr -> nx_packet_prepend_ptr;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	601a      	str	r2, [r3, #0]
  else
  {
    /* Rx Buffer Pool is exhausted. */
    *buff = NULL;
  }
}
 8005554:	e002      	b.n	800555c <HAL_ETH_RxAllocateCallback+0x38>
    *buff = NULL;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
}
 800555c:	bf00      	nop
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20007f90 	.word	0x20007f90

08005568 <HAL_ETH_RxLinkCallback>:
/*                                                                        */
/*    HAL_ETH_ReadData              Read a received packet                */
/*                                                                        */
/**************************************************************************/
void HAL_ETH_RxLinkCallback(void **first_packet_ptr, void **last_packet_ptr, uint8_t *buff, uint16_t Length)
{
 8005568:	b480      	push	{r7}
 800556a:	b089      	sub	sp, #36	; 0x24
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	807b      	strh	r3, [r7, #2]
  NX_PACKET **first_nx_packet_ptr = (NX_PACKET **)first_packet_ptr;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	61fb      	str	r3, [r7, #28]
  NX_PACKET **last_nx_packet_ptr = (NX_PACKET **)last_packet_ptr;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	61bb      	str	r3, [r7, #24]
  NX_PACKET  *received_packet_ptr;

  /* Indicate the offset of the received data.  */
  uint8_t *data_buffer_ptr = buff - 2U - header_size;
 800557e:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <HAL_ETH_RxLinkCallback+0x68>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	f06f 0301 	mvn.w	r3, #1
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	4413      	add	r3, r2
 800558c:	617b      	str	r3, [r7, #20]

  received_packet_ptr = (NX_PACKET *)data_buffer_ptr;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	613b      	str	r3, [r7, #16]
  received_packet_ptr->nx_packet_append_ptr = received_packet_ptr->nx_packet_prepend_ptr + Length;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	887b      	ldrh	r3, [r7, #2]
 8005598:	441a      	add	r2, r3
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	60da      	str	r2, [r3, #12]
  received_packet_ptr->nx_packet_length = Length;
 800559e:	887a      	ldrh	r2, [r7, #2]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check whether this is the first packet. */
  if (*first_nx_packet_ptr == NULL)
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d103      	bne.n	80055b4 <HAL_ETH_RxLinkCallback+0x4c>
  {
    /* Add the first buffer of the packet. */
    *first_nx_packet_ptr = received_packet_ptr;
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	e003      	b.n	80055bc <HAL_ETH_RxLinkCallback+0x54>
  }
  /* This is not the first packet. */
  else
  {
    /* Add the rest of the buffer to the end of the packet. */
    (*last_nx_packet_ptr)->nx_packet_next = received_packet_ptr;
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	605a      	str	r2, [r3, #4]
  }
  /* Save the current packet in order to use it in the next iteration. */
  *last_nx_packet_ptr  = received_packet_ptr;
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	601a      	str	r2, [r3, #0]
}
 80055c2:	bf00      	nop
 80055c4:	3724      	adds	r7, #36	; 0x24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	20007fdc 	.word	0x20007fdc

080055d4 <_nx_driver_hardware_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT _nx_driver_hardware_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

  return NX_SUCCESS;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
	...

080055ec <HAL_ETH_RxCpltCallback>:
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]

  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <HAL_ETH_RxCpltCallback+0x34>)
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	60fb      	str	r3, [r7, #12]

  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_RECEIVED;
 80055fa:	4b09      	ldr	r3, [pc, #36]	; (8005620 <HAL_ETH_RxCpltCallback+0x34>)
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f043 0301 	orr.w	r3, r3, #1
 8005602:	4a07      	ldr	r2, [pc, #28]	; (8005620 <HAL_ETH_RxCpltCallback+0x34>)
 8005604:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d104      	bne.n	8005616 <HAL_ETH_RxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 800560c:	4b04      	ldr	r3, [pc, #16]	; (8005620 <HAL_ETH_RxCpltCallback+0x34>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	f001 fdbf 	bl	8007194 <_nx_ip_driver_deferred_processing>
  }
}
 8005616:	bf00      	nop
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20007f90 	.word	0x20007f90

08005624 <HAL_ETH_TxCpltCallback>:

void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 800562c:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <HAL_ETH_TxCpltCallback+0x34>)
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	60fb      	str	r3, [r7, #12]


  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_TRANSMITTED;
 8005632:	4b09      	ldr	r3, [pc, #36]	; (8005658 <HAL_ETH_TxCpltCallback+0x34>)
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f043 0304 	orr.w	r3, r3, #4
 800563a:	4a07      	ldr	r2, [pc, #28]	; (8005658 <HAL_ETH_TxCpltCallback+0x34>)
 800563c:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d104      	bne.n	800564e <HAL_ETH_TxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 8005644:	4b04      	ldr	r3, [pc, #16]	; (8005658 <HAL_ETH_TxCpltCallback+0x34>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f001 fda3 	bl	8007194 <_nx_ip_driver_deferred_processing>
  }
}
 800564e:	bf00      	nop
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20007f90 	.word	0x20007f90

0800565c <_nx_arp_dynamic_entry_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_dynamic_entry_delete(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_PACKET *packet_ptr, *next_packet_ptr;


    /* Determine if this ARP entry is already active.  */
    if (arp_ptr -> nx_arp_active_list_head)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d050      	beq.n	8005710 <_nx_arp_dynamic_entry_delete+0xb4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800566e:	f3ef 8310 	mrs	r3, PRIMASK
 8005672:	613b      	str	r3, [r7, #16]
    return(posture);
 8005674:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8005676:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005678:	b672      	cpsid	i
    return(int_posture);
 800567a:	68fb      	ldr	r3, [r7, #12]
    {

        /* Remove this dynamic ARP entry from the associated list.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800567c:	61bb      	str	r3, [r7, #24]

        /* Determine if this is the only ARP entry on the list.  */
        if (arp_ptr == arp_ptr -> nx_arp_active_next)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d104      	bne.n	8005692 <_nx_arp_dynamic_entry_delete+0x36>
        {

            /* Remove the entry from the list.  */
            *(arp_ptr -> nx_arp_active_list_head) =  NX_NULL;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	e014      	b.n	80056bc <_nx_arp_dynamic_entry_delete+0x60>
        {

            /* Remove the entry from a list of more than one entry.  */

            /* Update the list head pointer.  */
            if (*(arp_ptr -> nx_arp_active_list_head) == arp_ptr)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d104      	bne.n	80056a8 <_nx_arp_dynamic_entry_delete+0x4c>
            {
                *(arp_ptr -> nx_arp_active_list_head) =  arp_ptr -> nx_arp_active_next;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	6952      	ldr	r2, [r2, #20]
 80056a6:	601a      	str	r2, [r3, #0]
            }

            /* Update the links of the adjacent ARP entries.  */
            (arp_ptr -> nx_arp_active_next) -> nx_arp_active_previous = arp_ptr -> nx_arp_active_previous;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	6992      	ldr	r2, [r2, #24]
 80056b0:	619a      	str	r2, [r3, #24]
            (arp_ptr -> nx_arp_active_previous) -> nx_arp_active_next =  arp_ptr -> nx_arp_active_next;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	6952      	ldr	r2, [r2, #20]
 80056ba:	615a      	str	r2, [r3, #20]
        }

        /* No longer active, clear the active list head.  */
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2200      	movs	r2, #0
 80056c0:	61da      	str	r2, [r3, #28]

        /* Decrease the number of active ARP entries.  */
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 80056c8:	1e5a      	subs	r2, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8

        /* Pickup the queued packets head pointer.  */
        next_packet_ptr =  arp_ptr -> nx_arp_packets_waiting;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	61fb      	str	r3, [r7, #28]

        /* Clear the queued packets head pointer.  */
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2200      	movs	r2, #0
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f383 8810 	msr	PRIMASK, r3
}
 80056e6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Loop to remove all queued packets.  */
        while (next_packet_ptr)
 80056e8:	e00f      	b.n	800570a <_nx_arp_dynamic_entry_delete+0xae>
        {

            /* Pickup the packet pointer at the head of the queue.  */
            packet_ptr =  next_packet_ptr;
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	617b      	str	r3, [r7, #20]

            /* Move to the next packet in the queue.  */
            next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	61fb      	str	r3, [r7, #28]

            /* Clear the next packet queue pointer.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2200      	movs	r2, #0
 80056f8:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	655a      	str	r2, [r3, #84]	; 0x54
#endif

            /* Release the packet that was queued from the previous ARP entry.  */
            _nx_packet_transmit_release(packet_ptr);
 8005704:	6978      	ldr	r0, [r7, #20]
 8005706:	f003 ffbf 	bl	8009688 <_nx_packet_transmit_release>
        while (next_packet_ptr)
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1ec      	bne.n	80056ea <_nx_arp_dynamic_entry_delete+0x8e>
        }
    }

    return(NX_SUCCESS);
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <_nx_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ARP_ENABLE, ip_ptr, arp_cache_memory, arp_cache_size, 0, NX_TRACE_ARP_EVENTS, 0, 0);

    /* Clear the entire ARP cache.  */
    memset((void *)arp_cache_memory, 0, arp_cache_size);
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	2100      	movs	r1, #0
 800572c:	68b8      	ldr	r0, [r7, #8]
 800572e:	f00c fdc3 	bl	80122b8 <memset>

    /* Pickup starting address of ARP entry array.  */
    entry_ptr =  (NX_ARP *)arp_cache_memory;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	61bb      	str	r3, [r7, #24]

    /* Determine how many ARP entries will fit in this cache area.  */
    arp_entries =  arp_cache_size / sizeof(NX_ARP);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2d      	ldr	r2, [pc, #180]	; (80057f0 <_nx_arp_enable+0xd4>)
 800573a:	fba2 2303 	umull	r2, r3, r2, r3
 800573e:	091b      	lsrs	r3, r3, #4
 8005740:	617b      	str	r3, [r7, #20]

    /* Initialize the forward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 8005742:	2300      	movs	r3, #0
 8005744:	61fb      	str	r3, [r7, #28]
 8005746:	e00a      	b.n	800575e <_nx_arp_enable+0x42>
    {
        /* Setup each entry to point to the next entry.  */
        entry_ptr -> nx_arp_pool_next =  entry_ptr + 1;
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	60da      	str	r2, [r3, #12]
        entry_ptr++;
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	3334      	adds	r3, #52	; 0x34
 8005756:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	3301      	adds	r3, #1
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	3b01      	subs	r3, #1
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	429a      	cmp	r2, r3
 8005766:	d3ef      	bcc.n	8005748 <_nx_arp_enable+0x2c>
    }

    /* The entry now points to the last entry in the ARP array.  Set its
       next pointer to the first entry.  */
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	60da      	str	r2, [r3, #12]

    /* Initialize the backward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
 8005772:	e00a      	b.n	800578a <_nx_arp_enable+0x6e>
    {
        /* Setup each entry to point to the previous entry.  */
        entry_ptr -> nx_arp_pool_previous =  entry_ptr - 1;
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	f1a3 0234 	sub.w	r2, r3, #52	; 0x34
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	611a      	str	r2, [r3, #16]
        entry_ptr--;
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	3b34      	subs	r3, #52	; 0x34
 8005782:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	3301      	adds	r3, #1
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	3b01      	subs	r3, #1
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	429a      	cmp	r2, r3
 8005792:	d3ef      	bcc.n	8005774 <_nx_arp_enable+0x58>
    }

    /* The entry now points to the first entry, set the previous pointer
       to the last entry.  */
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2234      	movs	r2, #52	; 0x34
 8005798:	fb02 f303 	mul.w	r3, r2, r3
 800579c:	3b34      	subs	r3, #52	; 0x34
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	441a      	add	r2, r3
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	611a      	str	r2, [r3, #16]
       information in the IP structure.  */

    /* Setup the list head pointers in the IP instance.  At first all ARP
       entries are associated with the dynamic ARP list.  The static ARP list
       is NULL until static ARP entry calls are made.  */
    ip_ptr -> nx_ip_arp_static_list =   NX_NULL;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
    ip_ptr -> nx_ip_arp_dynamic_list =  (NX_ARP *)arp_cache_memory;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4

    /* Store the initial ARP cache information in the IP control block.  */
    ip_ptr -> nx_ip_arp_cache_memory  =  arp_cache_memory;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	f8c3 26f8 	str.w	r2, [r3, #1784]	; 0x6f8
    ip_ptr -> nx_ip_arp_total_entries =  arp_entries;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc

    /* Setup the ARP periodic update routine.  */
    ip_ptr -> nx_ip_arp_periodic_update =  _nx_arp_periodic_update;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4a0a      	ldr	r2, [pc, #40]	; (80057f4 <_nx_arp_enable+0xd8>)
 80057ca:	f8c3 26e8 	str.w	r2, [r3, #1768]	; 0x6e8

    /* Setup the ARP queue process routine.  */
    ip_ptr -> nx_ip_arp_queue_process =  _nx_arp_queue_process;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4a09      	ldr	r2, [pc, #36]	; (80057f8 <_nx_arp_enable+0xdc>)
 80057d2:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec

    /* Setup the ARP send packet routine.  */
    ip_ptr -> nx_ip_arp_packet_send =  _nx_arp_packet_send;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4a08      	ldr	r2, [pc, #32]	; (80057fc <_nx_arp_enable+0xe0>)
 80057da:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0

    /* Setup the ARP allocate service request pointer.  */
    ip_ptr -> nx_ip_arp_allocate =  _nx_arp_entry_allocate;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4a07      	ldr	r2, [pc, #28]	; (8005800 <_nx_arp_enable+0xe4>)
 80057e2:	f8c3 26e4 	str.w	r2, [r3, #1764]	; 0x6e4

    /* Return successful completion.  */
    return(NX_SUCCESS);
 80057e6:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	4ec4ec4f 	.word	0x4ec4ec4f
 80057f4:	08005fd1 	.word	0x08005fd1
 80057f8:	080061d3 	.word	0x080061d3
 80057fc:	08005e8d 	.word	0x08005e8d
 8005800:	08005805 	.word	0x08005805

08005804 <_nx_arp_entry_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_entry_allocate(NX_IP *ip_ptr, NX_ARP **arp_list_ptr, UINT is_static)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08a      	sub	sp, #40	; 0x28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
NX_ARP *arp_entry;
UINT    status;


    /* Determine if there is an ARP entry available in the dynamic list.  */
    if (ip_ptr -> nx_ip_arp_dynamic_list)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 80b4 	beq.w	8005984 <_nx_arp_entry_allocate+0x180>
    {

        /* Yes there are one or more free entries.  */

        /* Pickup pointer to last used dynamic ARP entry.  */
        arp_entry =  (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	623b      	str	r3, [r7, #32]

        /* Remove from the dynamic list. */
        _nx_arp_dynamic_entry_delete(ip_ptr, arp_entry);
 8005826:	6a39      	ldr	r1, [r7, #32]
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff ff17 	bl	800565c <_nx_arp_dynamic_entry_delete>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800582e:	f3ef 8310 	mrs	r3, PRIMASK
 8005832:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005834:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005836:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005838:	b672      	cpsid	i
    return(int_posture);
 800583a:	697b      	ldr	r3, [r7, #20]

        /* Disable interrupts temporarily.  */
        TX_DISABLE
 800583c:	61fb      	str	r3, [r7, #28]

        /* Link the ARP entry at the head of the IP list.  */

        /* Determine if the ARP entry is being added to an empty list.  */
        if (*arp_list_ptr)
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d014      	beq.n	8005870 <_nx_arp_entry_allocate+0x6c>
        {

            /* Add the ARP entry to the beginning of the nonempty ARP
               list.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =      *arp_list_ptr;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =  (*arp_list_ptr) -> nx_arp_active_previous;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	619a      	str	r2, [r3, #24]
            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =  arp_entry;
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	6a3a      	ldr	r2, [r7, #32]
 8005864:	615a      	str	r2, [r3, #20]
            (*arp_list_ptr) -> nx_arp_active_previous =  arp_entry;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6a3a      	ldr	r2, [r7, #32]
 800586c:	619a      	str	r2, [r3, #24]
 800586e:	e00b      	b.n	8005888 <_nx_arp_entry_allocate+0x84>
        }
        else
        {
            /* Empty list, just put the ARP entry at the beginning.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =       arp_entry;
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	6a3a      	ldr	r2, [r7, #32]
 800587a:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =   arp_entry;
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	6a3a      	ldr	r2, [r7, #32]
 8005880:	619a      	str	r2, [r3, #24]

            /* Now setup the list head.  */
            *arp_list_ptr =  arp_entry;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	6a3a      	ldr	r2, [r7, #32]
 8005886:	601a      	str	r2, [r3, #0]
        }

        /* Determine if this is a static entry. */
        if (is_static == NX_TRUE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d141      	bne.n	8005912 <_nx_arp_entry_allocate+0x10e>
        {

            /* Remove this entry from the ARP dynamic list.  */

            /* Determine if this is the only ARP entry on the dynamic list.  */
            if (arp_entry == arp_entry -> nx_arp_pool_next)
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	6a3a      	ldr	r2, [r7, #32]
 8005894:	429a      	cmp	r2, r3
 8005896:	d104      	bne.n	80058a2 <_nx_arp_entry_allocate+0x9e>
            {

                /* Remove the sole entry from the dynamic list head.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  NX_NULL;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
 80058a0:	e009      	b.n	80058b6 <_nx_arp_entry_allocate+0xb2>
            {

                /* Remove the entry from a list of more than one entry.  */

                /* Update the links of the adjacent ARP dynamic pool entries.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	6a3a      	ldr	r2, [r7, #32]
 80058a8:	6912      	ldr	r2, [r2, #16]
 80058aa:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	6a3a      	ldr	r2, [r7, #32]
 80058b2:	68d2      	ldr	r2, [r2, #12]
 80058b4:	60da      	str	r2, [r3, #12]
            }

            /* Add the entry to the ARP static list.  */

            /* Determine if the ARP static list is empty.  */
            if (ip_ptr -> nx_ip_arp_static_list == NX_NULL)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <_nx_arp_entry_allocate+0xd2>
            {

                /* Just place this single ARP entry on the list.  */
                arp_entry -> nx_arp_pool_next =     arp_entry;
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	6a3a      	ldr	r2, [r7, #32]
 80058c4:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = arp_entry;
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	6a3a      	ldr	r2, [r7, #32]
 80058ca:	611a      	str	r2, [r3, #16]
                ip_ptr -> nx_ip_arp_static_list =   arp_entry;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a3a      	ldr	r2, [r7, #32]
 80058d0:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
 80058d4:	e015      	b.n	8005902 <_nx_arp_entry_allocate+0xfe>
            }
            else
            {

                /* Add to the end of the ARP static list.  */
                arp_entry -> nx_arp_pool_next = ip_ptr -> nx_ip_arp_static_list;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f8d3 26d0 	ldr.w	r2, [r3, #1744]	; 0x6d0
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	611a      	str	r2, [r3, #16]
                ((ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	6a3a      	ldr	r2, [r7, #32]
 80058f6:	60da      	str	r2, [r3, #12]
                (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous = arp_entry;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80058fe:	6a3a      	ldr	r2, [r7, #32]
 8005900:	611a      	str	r2, [r3, #16]
            }

#ifndef NX_DISABLE_ARP_INFO
            /* Increment the ARP static entry count.  */
            ip_ptr -> nx_ip_arp_static_entries++;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005910:	e02c      	b.n	800596c <_nx_arp_entry_allocate+0x168>
        }
        else  /* Allocate entry from dynamic list. */
        {

            /* Move this ARP entry to the front of the general ARP dynamic entry pool.  */
            if (arp_entry != ip_ptr -> nx_ip_arp_dynamic_list)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8005918:	6a3a      	ldr	r2, [r7, #32]
 800591a:	429a      	cmp	r2, r3
 800591c:	d01f      	beq.n	800595e <_nx_arp_entry_allocate+0x15a>

                /* The current ARP entry is not at the front of the list, so it
                   must be moved.  */

                /* Link up the neighbors first.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	6a3a      	ldr	r2, [r7, #32]
 8005924:	6912      	ldr	r2, [r2, #16]
 8005926:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	6a3a      	ldr	r2, [r7, #32]
 800592e:	68d2      	ldr	r2, [r2, #12]
 8005930:	60da      	str	r2, [r3, #12]

                /* Now link this ARP entry to the head of the list.  */
                arp_entry -> nx_arp_pool_next =  ip_ptr -> nx_ip_arp_dynamic_list;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f8d3 26d4 	ldr.w	r2, [r3, #1748]	; 0x6d4
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous =    (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous;
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =  arp_entry;
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	6a3a      	ldr	r2, [r7, #32]
 800594c:	60da      	str	r2, [r3, #12]
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =  arp_entry;
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	6a3a      	ldr	r2, [r7, #32]
 8005954:	611a      	str	r2, [r3, #16]

                /* Now set the list head to this ARP entry.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a3a      	ldr	r2, [r7, #32]
 800595a:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
            }

            /* Increment the number of active dynamic entries.  */
            ip_ptr -> nx_ip_arp_dynamic_active_count++;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8
        }

        /* Set the entry type.  */
        arp_entry -> nx_arp_route_static = is_static;
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f383 8810 	msr	PRIMASK, r3
}
 800597c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Setup a successful status return.  */
        status =  NX_SUCCESS;
 800597e:	2300      	movs	r3, #0
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
 8005982:	e001      	b.n	8005988 <_nx_arp_entry_allocate+0x184>
    else
    {

        /* No more ARP entries are available, all the ARP entries must be
           allocated on the static list.  */
        status =  NX_NO_MORE_ENTRIES;
 8005984:	2317      	movs	r3, #23
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Return status to the caller.  */
    return(status);
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800598a:	4618      	mov	r0, r3
 800598c:	3728      	adds	r7, #40	; 0x28
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <_nx_arp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b088      	sub	sp, #32
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800599c:	f3ef 8310 	mrs	r3, PRIMASK
 80059a0:	61bb      	str	r3, [r7, #24]
    return(posture);
 80059a2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80059a4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80059a6:	b672      	cpsid	i
    return(int_posture);
 80059a8:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 80059aa:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if ARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_arp_queue_process)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d110      	bne.n	80059d8 <_nx_arp_packet_deferred_receive+0x46>

        /* ARP is not enabled.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count...  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f383 8810 	msr	PRIMASK, r3
}
 80059ce:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since ARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 80059d0:	6838      	ldr	r0, [r7, #0]
 80059d2:	f003 fda1 	bl	8009518 <_nx_packet_release>

        /* Return to caller.  */
        return;
 80059d6:	e02f      	b.n	8005a38 <_nx_arp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the ARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d011      	beq.n	8005a06 <_nx_arp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the ARP deferred queue.  */
        (ip_ptr -> nx_ip_arp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2200      	movs	r2, #0
 80059f0:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f383 8810 	msr	PRIMASK, r3
}
 8005a04:	e018      	b.n	8005a38 <_nx_arp_packet_deferred_receive+0xa6>
    {

        /* Empty ARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the ARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0
        packet_ptr -> nx_packet_queue_next =                 NX_NULL;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	61da      	str	r2, [r3, #28]
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f383 8810 	msr	PRIMASK, r3
}
 8005a26:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the ARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2110      	movs	r1, #16
 8005a32:	4618      	mov	r0, r3
 8005a34:	f009 fc2c 	bl	800f290 <_tx_event_flags_set>
    }
}
 8005a38:	3720      	adds	r7, #32
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <_nx_arp_packet_receive>:
/*                                            fixed compiler errors,      */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8005a3e:	b590      	push	{r4, r7, lr}
 8005a40:	b097      	sub	sp, #92	; 0x5c
 8005a42:	af02      	add	r7, sp, #8
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	6039      	str	r1, [r7, #0]
ULONG         sender_physical_lsw;
ULONG         sender_ip_address;
ULONG         target_ip_address;
ULONG         message_type;
ULONG         index;
UCHAR         consumed = NX_FALSE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
NX_INTERFACE *interface_ptr;


#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Determine if the packet length is valid.  */
    if (packet_ptr -> nx_packet_length < NX_ARP_MESSAGE_SIZE)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	2b1b      	cmp	r3, #27
 8005a54:	d80a      	bhi.n	8005a6c <_nx_arp_packet_receive+0x2e>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 8005a64:	6838      	ldr	r0, [r7, #0]
 8005a66:	f003 fd57 	bl	8009518 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8005a6a:	e20b      	b.n	8005e84 <_nx_arp_packet_receive+0x446>
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING  */

    /* Setup a pointer to the ARP message.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	643b      	str	r3, [r7, #64]	; 0x40

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8005a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a74:	3304      	adds	r3, #4
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	ba12      	rev	r2, r2
 8005a7e:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a82:	3308      	adds	r3, #8
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a88:	3308      	adds	r3, #8
 8005a8a:	ba12      	rev	r2, r2
 8005a8c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8005a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a90:	330c      	adds	r3, #12
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a96:	330c      	adds	r3, #12
 8005a98:	ba12      	rev	r2, r2
 8005a9a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8005a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9e:	3310      	adds	r3, #16
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa4:	3310      	adds	r3, #16
 8005aa6:	ba12      	rev	r2, r2
 8005aa8:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8005aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aac:	3314      	adds	r3, #20
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ab2:	3314      	adds	r3, #20
 8005ab4:	ba12      	rev	r2, r2
 8005ab6:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8005ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aba:	3318      	adds	r3, #24
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac0:	3318      	adds	r3, #24
 8005ac2:	ba12      	rev	r2, r2
 8005ac4:	601a      	str	r2, [r3, #0]

    /* Pickup the ARP message type.  */
    message_type =  (ULONG)(*(message_ptr + 1) & 0xFFFF);
 8005ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac8:	3304      	adds	r3, #4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the ARP message type is valid.  */
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 8005ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d00d      	beq.n	8005af2 <_nx_arp_packet_receive+0xb4>
 8005ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d00a      	beq.n	8005af2 <_nx_arp_packet_receive+0xb4>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 8005aea:	6838      	ldr	r0, [r7, #0]
 8005aec:	f003 fd14 	bl	8009518 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8005af0:	e1c8      	b.n	8005e84 <_nx_arp_packet_receive+0x446>
    }

    /* Pick up the sender's physical address from the message.  */
    sender_physical_msw =  (*(message_ptr + 2) >> 16);
 8005af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af4:	3308      	adds	r3, #8
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	0c1b      	lsrs	r3, r3, #16
 8005afa:	63bb      	str	r3, [r7, #56]	; 0x38
    sender_physical_lsw =  (*(message_ptr + 2) << 16) | (*(message_ptr + 3) >> 16);
 8005afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005afe:	3308      	adds	r3, #8
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	041a      	lsls	r2, r3, #16
 8005b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b06:	330c      	adds	r3, #12
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	0c1b      	lsrs	r3, r3, #16
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	637b      	str	r3, [r7, #52]	; 0x34
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
 8005b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b12:	330c      	adds	r3, #12
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	041a      	lsls	r2, r3, #16
 8005b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b1a:	3310      	adds	r3, #16
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	0c1b      	lsrs	r3, r3, #16
 8005b20:	4313      	orrs	r3, r2
 8005b22:	633b      	str	r3, [r7, #48]	; 0x30
    target_ip_address =    *(message_ptr + 6);
 8005b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Does the packet have an interface assigned? */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d104      	bne.n	8005b3c <_nx_arp_packet_receive+0xfe>
    {

        /* No, so default it to the primary interface. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &ip_ptr -> nx_ip_interface[0];
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f503 62e4 	add.w	r2, r3, #1824	; 0x720
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Pickup the interface information from the incoming packet. */
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b40:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if it is an IP address conflict when IP address probing.  */
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8005b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d12e      	bne.n	8005ba8 <_nx_arp_packet_receive+0x16a>
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d02a      	beq.n	8005ba8 <_nx_arp_packet_receive+0x16a>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 8005b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8005b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d007      	beq.n	8005b6c <_nx_arp_packet_receive+0x12e>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d122      	bne.n	8005ba8 <_nx_arp_packet_receive+0x16a>
         ((sender_ip_address == 0) && (target_ip_address == interface_ptr -> nx_interface_ip_probe_address))))
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d11d      	bne.n	8005ba8 <_nx_arp_packet_receive+0x16a>
    {

        /* Make sure the sender physical address is not ours.  */
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 8005b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d104      	bne.n	8005b80 <_nx_arp_packet_receive+0x142>
            (sender_physical_lsw != interface_ptr -> nx_interface_physical_address_lsw))
 8005b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b78:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 8005b7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d00f      	beq.n	8005ba0 <_nx_arp_packet_receive+0x162>
        {

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00b      	beq.n	8005ba0 <_nx_arp_packet_receive+0x162>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	79db      	ldrb	r3, [r3, #7]
 8005b90:	4619      	mov	r1, r3
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	47a0      	blx	r4
                                                                           sender_physical_msw, sender_physical_lsw);
            }
        }

        /* Release the packet. */
        _nx_packet_release(packet_ptr);
 8005ba0:	6838      	ldr	r0, [r7, #0]
 8005ba2:	f003 fcb9 	bl	8009518 <_nx_packet_release>

        return;
 8005ba6:	e16d      	b.n	8005e84 <_nx_arp_packet_receive+0x446>
    }

    /* Determine if it is an address conflict packet after set the IP address.  */
    if ((sender_ip_address != 0) && (sender_ip_address == interface_ptr -> nx_interface_ip_address))
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d040      	beq.n	8005c30 <_nx_arp_packet_receive+0x1f2>
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d13b      	bne.n	8005c30 <_nx_arp_packet_receive+0x1f2>
    {

        /* Is it sent from other devices. */
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d105      	bne.n	8005bd0 <_nx_arp_packet_receive+0x192>
            (sender_physical_lsw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw))
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc8:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 8005bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d02b      	beq.n	8005c28 <_nx_arp_packet_receive+0x1ea>
        {

            /* Yes it is.  */
            if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout == 0)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10a      	bne.n	8005bf0 <_nx_arp_packet_receive+0x1b2>
            {

                /* Set defend timeout. */
                packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout = NX_ARP_DEFEND_INTERVAL;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bde:	220a      	movs	r2, #10
 8005be0:	645a      	str	r2, [r3, #68]	; 0x44

                /* Send the announcement. */
                _nx_arp_packet_send(ip_ptr, sender_ip_address, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	461a      	mov	r2, r3
 8005be8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f94e 	bl	8005e8c <_nx_arp_packet_send>
            }

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00b      	beq.n	8005c10 <_nx_arp_packet_receive+0x1d2>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	79db      	ldrb	r3, [r3, #7]
 8005c00:	4619      	mov	r1, r3
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	47a0      	blx	r4

            /* This is likely in response to our previous gratuitous ARP from another entity on the
               network has the same IP address.  */

            /* Determine if there is a gratuitous ARP response handler.  */
            if (ip_ptr -> nx_ip_arp_gratuitous_response_handler)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d006      	beq.n	8005c28 <_nx_arp_packet_receive+0x1ea>
            {

                /* Yes, call the gratuitous ARP response handler. Note that it is responsible
                   for releasing the packet!  */
                (ip_ptr -> nx_ip_arp_gratuitous_response_handler)(ip_ptr, packet_ptr);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 8005c20:	6839      	ldr	r1, [r7, #0]
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	4798      	blx	r3

                return;
 8005c26:	e12d      	b.n	8005e84 <_nx_arp_packet_receive+0x446>
            return;
#endif /* NX_ARP_DEFEND_BY_REPLY */
        }

        /* Release the conflict packet. */
        _nx_packet_release(packet_ptr);
 8005c28:	6838      	ldr	r0, [r7, #0]
 8005c2a:	f003 fc75 	bl	8009518 <_nx_packet_release>

        return;
 8005c2e:	e129      	b.n	8005e84 <_nx_arp_packet_receive+0x446>
    }

    /* Determine what type of ARP message this is.  Note that ARP requests must
       also specify this IP instance's IP address.  */
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 8005c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	f040 808f 	bne.w	8005d56 <_nx_arp_packet_receive+0x318>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c40:	429a      	cmp	r2, r3
 8005c42:	f040 8088 	bne.w	8005d56 <_nx_arp_packet_receive+0x318>
    {

#ifndef NX_DISABLE_ARP_INFO

        /* Increment the ARP requests received count.  */
        ip_ptr -> nx_ip_arp_requests_received++;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Increment the ARP responses sent count.  */
        ip_ptr -> nx_ip_arp_responses_sent++;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	675a      	str	r2, [r3, #116]	; 0x74

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_RESPONSE_SEND, ip_ptr, sender_ip_address, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the ARP message type to ARP response.  */
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 8005c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	0c1b      	lsrs	r3, r3, #16
 8005c62:	041b      	lsls	r3, r3, #16
 8005c64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c66:	3204      	adds	r2, #4
 8005c68:	f043 0302 	orr.w	r3, r3, #2
 8005c6c:	6013      	str	r3, [r2, #0]


        /* Now fill in the new source and destination information for the ARP response.  */
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw >> 16);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8005c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c80:	3308      	adds	r3, #8
 8005c82:	430a      	orrs	r2, r1
 8005c84:	601a      	str	r2, [r3, #0]
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address >> 16);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 8005c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c98:	330c      	adds	r3, #12
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	601a      	str	r2, [r3, #0]
        *(message_ptr + 4) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sender_physical_msw;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	0419      	lsls	r1, r3, #16
 8005ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca8:	3310      	adds	r3, #16
 8005caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cac:	430a      	orrs	r2, r1
 8005cae:	601a      	str	r2, [r3, #0]
        *(message_ptr + 5) =  (ULONG)sender_physical_lsw;
 8005cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb2:	3314      	adds	r3, #20
 8005cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cb6:	601a      	str	r2, [r3, #0]
        *(message_ptr + 6) =  (ULONG)sender_ip_address;
 8005cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cba:	3318      	adds	r3, #24
 8005cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cbe:	601a      	str	r2, [r3, #0]

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the ARP message.  */
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8005cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc8:	3304      	adds	r3, #4
 8005cca:	ba12      	rev	r2, r2
 8005ccc:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd0:	3308      	adds	r3, #8
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	ba12      	rev	r2, r2
 8005cda:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8005cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cde:	330c      	adds	r3, #12
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce4:	330c      	adds	r3, #12
 8005ce6:	ba12      	rev	r2, r2
 8005ce8:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8005cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cec:	3310      	adds	r3, #16
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf2:	3310      	adds	r3, #16
 8005cf4:	ba12      	rev	r2, r2
 8005cf6:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8005cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cfa:	3314      	adds	r3, #20
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d00:	3314      	adds	r3, #20
 8005d02:	ba12      	rev	r2, r2
 8005d04:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8005d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d08:	3318      	adds	r3, #24
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d0e:	3318      	adds	r3, #24
 8005d10:	ba12      	rev	r2, r2
 8005d12:	601a      	str	r2, [r3, #0]

        /* Make sure the packet length is set properly.  */
        packet_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	221c      	movs	r2, #28
 8005d18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup the append pointer, since the received ARP packet can be padded
           with unnecessary bytes.  */
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f103 021c 	add.w	r2, r3, #28
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	60da      	str	r2, [r3, #12]

        /* Send the ARP request to the driver.  */
        driver_request.nx_ip_driver_ptr =      ip_ptr;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command =  NX_LINK_ARP_RESPONSE_SEND;
 8005d2a:	2306      	movs	r3, #6
 8005d2c:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet =   packet_ptr;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_physical_address_msw =  sender_physical_msw;
 8005d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d34:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  sender_physical_lsw;
 8005d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d38:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_ARP_RESPONSE_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* No need to update interface.  When responding to an ARP request, use the same interface where the request was received. */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	f107 0208 	add.w	r2, r7, #8
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	4798      	blx	r3

        /* Set the consumed as NX_TRUE, do not need to release the packet.  */
        consumed = NX_TRUE;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8005d54:	e00d      	b.n	8005d72 <_nx_arp_packet_receive+0x334>
        /* We have a response to a previous ARP request or Gratuitous ARP from another network entity.  */

#ifndef NX_DISABLE_ARP_INFO

        /* Check for the message type to see which counter to increment.  */
        if (message_type == NX_ARP_OPTION_REQUEST)
 8005d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d105      	bne.n	8005d68 <_nx_arp_packet_receive+0x32a>
        {

            /* Increment the ARP requests received count.  */
            ip_ptr -> nx_ip_arp_requests_received++;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	671a      	str	r2, [r3, #112]	; 0x70
 8005d66:	e004      	b.n	8005d72 <_nx_arp_packet_receive+0x334>
        }
        else
        {

            /* Increment the ARP responses received count.  */
            ip_ptr -> nx_ip_arp_responses_received++;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Now we need to search through the active ARP list for the IP address
       to see if there is a matching entry.  */

    /* Calculate the hash index for the sender IP address.  */
    index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	0a1a      	lsrs	r2, r3, #8
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	4413      	add	r3, r2
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup the first ARP entry.  */
    arp_ptr = NX_NULL;
 8005d80:	2300      	movs	r3, #0
 8005d82:	647b      	str	r3, [r7, #68]	; 0x44

    /* Ignore anything from any ARP packet with a zero sender IP address. */
    if (sender_ip_address != 0)
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d03a      	beq.n	8005e00 <_nx_arp_packet_receive+0x3c2>
    {
        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ROUTE_TABLE_MASK);
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	0a1a      	lsrs	r2, r3, #8
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	4413      	add	r3, r2
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the first ARP entry.  */
        arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d9c:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da4:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Loop to look for an ARP match.  */
    while (arp_ptr)
 8005da6:	e02b      	b.n	8005e00 <_nx_arp_packet_receive+0x3c2>
    {

        /* Check for an IP match.  */
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 8005da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d117      	bne.n	8005de2 <_nx_arp_packet_receive+0x3a4>
                }
            }
#endif /* NX_ENABLE_ARP_MAC_CHANGE_NOTIFICATION */

            /* No need to update the static ARP entry. */
            if (arp_ptr -> nx_arp_route_static)
 8005db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d126      	bne.n	8005e08 <_nx_arp_packet_receive+0x3ca>
            {
                break;
            }

            /* Save the physical address found in this ARP response.  */
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8005dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dbe:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8005dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dc4:	629a      	str	r2, [r3, #40]	; 0x28

            /* Set the update rate to the expiration rate since we now have an ARP
               response.  */
            arp_ptr -> nx_arp_entry_next_update =  NX_ARP_EXPIRATION_RATE;
 8005dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc8:	2200      	movs	r2, #0
 8005dca:	605a      	str	r2, [r3, #4]

            /* Reset the retry counter for this ARP entry.  */
            arp_ptr -> nx_arp_retries =  0;
 8005dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dce:	2200      	movs	r2, #0
 8005dd0:	609a      	str	r2, [r3, #8]

            /* Set the interface attached to this packet. */
            arp_ptr -> nx_arp_ip_interface = interface_ptr;
 8005dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dd6:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Call queue send function to send the packet queued up.  */
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 8005dd8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fa2c 	bl	8006238 <_nx_arp_queue_send>

            /* Yes, we found a match.  Get out of the loop!  */
            break;
 8005de0:	e013      	b.n	8005e0a <_nx_arp_packet_receive+0x3cc>
        }

        /* Move to the next active ARP entry.  */
        arp_ptr =  arp_ptr -> nx_arp_active_next;
 8005de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	647b      	str	r3, [r7, #68]	; 0x44

        /* Determine if we are at the end of the ARP list.  */
        if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dec:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d102      	bne.n	8005e00 <_nx_arp_packet_receive+0x3c2>
        {

            /* Clear the ARP pointer.  */
            arp_ptr =  NX_NULL;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	647b      	str	r3, [r7, #68]	; 0x44
            break;
 8005dfe:	e004      	b.n	8005e0a <_nx_arp_packet_receive+0x3cc>
    while (arp_ptr)
 8005e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1d0      	bne.n	8005da8 <_nx_arp_packet_receive+0x36a>
 8005e06:	e000      	b.n	8005e0a <_nx_arp_packet_receive+0x3cc>
                break;
 8005e08:	bf00      	nop
        }
    }

    /* Determine if we have a packet to release. */
    if (consumed == NX_FALSE)
 8005e0a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d102      	bne.n	8005e18 <_nx_arp_packet_receive+0x3da>
    {
        _nx_packet_release(packet_ptr);
 8005e12:	6838      	ldr	r0, [r7, #0]
 8005e14:	f003 fb80 	bl	8009518 <_nx_packet_release>
    }

#ifndef NX_DISABLE_ARP_AUTO_ENTRY

    /* Determine if anything was found.  Ignore ARP messages with a zero IP sender address.   */
    if ((arp_ptr == NX_NULL) && (sender_ip_address != 0))
 8005e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d132      	bne.n	8005e84 <_nx_arp_packet_receive+0x446>
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d02f      	beq.n	8005e84 <_nx_arp_packet_receive+0x446>
    {

        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8005e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e26:	0a1a      	lsrs	r2, r3, #8
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f003 031f 	and.w	r3, r3, #31
 8005e30:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Allocate a new ARP entry in advance of the need to send to the IP
           address.  */
        if (((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)) == NX_SUCCESS)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 8005e38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e3a:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005e3e:	0092      	lsls	r2, r2, #2
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	4411      	add	r1, r2
 8005e44:	2200      	movs	r2, #0
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	4798      	blx	r3
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d119      	bne.n	8005e84 <_nx_arp_packet_receive+0x446>
        {

            /* Setup a pointer to the new ARP entry.  */
            arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e54:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	647b      	str	r3, [r7, #68]	; 0x44

            /* Setup the IP address and clear the physical mapping.  */
            arp_ptr -> nx_arp_ip_address =            sender_ip_address;
 8005e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e64:	621a      	str	r2, [r3, #32]
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8005e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e6a:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8005e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e70:	629a      	str	r2, [r3, #40]	; 0x28
            arp_ptr -> nx_arp_entry_next_update =     NX_ARP_EXPIRATION_RATE;
 8005e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e74:	2200      	movs	r2, #0
 8005e76:	605a      	str	r2, [r3, #4]
            arp_ptr -> nx_arp_retries =               0;
 8005e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	609a      	str	r2, [r3, #8]
            arp_ptr -> nx_arp_ip_interface         =  interface_ptr;
 8005e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e82:	62da      	str	r2, [r3, #44]	; 0x2c
        }
    }
#endif /* NX_DISABLE_ARP_AUTO_ENTRY */
}
 8005e84:	3754      	adds	r7, #84	; 0x54
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd90      	pop	{r4, r7, pc}
	...

08005e8c <_nx_arp_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_send(NX_IP *ip_ptr, ULONG destination_ip, NX_INTERFACE *nx_interface)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08e      	sub	sp, #56	; 0x38
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
NX_PACKET   *request_ptr;
ULONG       *message_ptr;
NX_IP_DRIVER driver_request;

    /* nx_interface must not be NX_NULL. */
    NX_ASSERT(nx_interface != NX_NULL);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d104      	bne.n	8005ea8 <_nx_arp_packet_send+0x1c>
 8005e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea2:	f00a fd01 	bl	80108a8 <_tx_thread_sleep>
 8005ea6:	e7fa      	b.n	8005e9e <_nx_arp_packet_send+0x12>
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 8005eae:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	222c      	movs	r2, #44	; 0x2c
 8005eb6:	f002 ff93 	bl	8008de0 <_nx_packet_allocate>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f040 8081 	bne.w	8005fc4 <_nx_arp_packet_send+0x138>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Stamp the packet with the outgoing interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "request_ptr" was initialized in _nx_packet_allocate. */
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = nx_interface;
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	631a      	str	r2, [r3, #48]	; 0x30

#ifndef NX_DISABLE_ARP_INFO
    /* Increment the ARP requests sent count.  */
    ip_ptr -> nx_ip_arp_requests_sent++;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	66da      	str	r2, [r3, #108]	; 0x6c
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_REQUEST_SEND, ip_ptr, destination_ip, request_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Build the ARP request packet.  */

    /* Setup the size of the ARP message.  */
    request_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	221c      	movs	r2, #28
 8005ed6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the prepend pointer.  */
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	3a1c      	subs	r2, #28
 8005ee0:	609a      	str	r2, [r3, #8]

    /* Setup the pointer to the message area.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)request_ptr -> nx_packet_prepend_ptr;
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Write the Hardware type into the message.  */
    *message_ptr =      (ULONG)(NX_ARP_HARDWARE_TYPE << 16) | (NX_ARP_PROTOCOL_TYPE);
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eea:	f44f 3284 	mov.w	r2, #67584	; 0x10800
 8005eee:	601a      	str	r2, [r3, #0]
    *(message_ptr + 1) =  (ULONG)(NX_ARP_HARDWARE_SIZE << 24) | (NX_ARP_PROTOCOL_SIZE << 16) |
 8005ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	4a35      	ldr	r2, [pc, #212]	; (8005fcc <_nx_arp_packet_send+0x140>)
 8005ef6:	601a      	str	r2, [r3, #0]
        NX_ARP_OPTION_REQUEST;

    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_physical_address_lsw >> 16);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8005f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f06:	3308      	adds	r3, #8
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	601a      	str	r2, [r3, #0]
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_ip_address >> 16);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8005f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1a:	330c      	adds	r3, #12
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	601a      	str	r2, [r3, #0]
    *(message_ptr + 4) =  (ULONG)(nx_interface -> nx_interface_ip_address << 16);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695a      	ldr	r2, [r3, #20]
 8005f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f26:	3310      	adds	r3, #16
 8005f28:	0412      	lsls	r2, r2, #16
 8005f2a:	601a      	str	r2, [r3, #0]
    *(message_ptr + 5) =  (ULONG)0;
 8005f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2e:	3314      	adds	r3, #20
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]
    *(message_ptr + 6) =  (ULONG)destination_ip;
 8005f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f36:	3318      	adds	r3, #24
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	601a      	str	r2, [r3, #0]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr));
 8005f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	ba1a      	rev	r2, r3
 8005f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f44:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8005f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f48:	3304      	adds	r3, #4
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4e:	3304      	adds	r3, #4
 8005f50:	ba12      	rev	r2, r2
 8005f52:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f56:	3308      	adds	r3, #8
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	ba12      	rev	r2, r2
 8005f60:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8005f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f64:	330c      	adds	r3, #12
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6a:	330c      	adds	r3, #12
 8005f6c:	ba12      	rev	r2, r2
 8005f6e:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8005f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f72:	3310      	adds	r3, #16
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f78:	3310      	adds	r3, #16
 8005f7a:	ba12      	rev	r2, r2
 8005f7c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8005f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f80:	3314      	adds	r3, #20
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f86:	3314      	adds	r3, #20
 8005f88:	ba12      	rev	r2, r2
 8005f8a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8005f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8e:	3318      	adds	r3, #24
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f94:	3318      	adds	r3, #24
 8005f96:	ba12      	rev	r2, r2
 8005f98:	601a      	str	r2, [r3, #0]

    /* Set up the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_command =               NX_LINK_ARP_SEND;
 8005f9e:	2305      	movs	r3, #5
 8005fa0:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_packet =                request_ptr;
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 8005fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005faa:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8005fac:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb0:	61fb      	str	r3, [r7, #28]
    driver_request.nx_ip_driver_interface            =  nx_interface;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Send the ARP request to the driver.  */
    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fba:	f107 0210 	add.w	r2, r7, #16
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	4798      	blx	r3
 8005fc2:	e000      	b.n	8005fc6 <_nx_arp_packet_send+0x13a>
                return;
 8005fc4:	bf00      	nop
}
 8005fc6:	3738      	adds	r7, #56	; 0x38
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	06040001 	.word	0x06040001

08005fd0 <_nx_arp_periodic_update>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_periodic_update(NX_IP *ip_ptr)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b08a      	sub	sp, #40	; 0x28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Pickup pointer to ARP dynamic list.  */
    arp_entry =  ip_ptr -> nx_ip_arp_dynamic_list;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8005fde:	623b      	str	r3, [r7, #32]

    /* Loop through the active ARP entries to see if they need updating.  */
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe4:	e0af      	b.n	8006146 <_nx_arp_periodic_update+0x176>
    {

        /* Check this ARP entry to see if it need updating.  */
        if (arp_entry -> nx_arp_entry_next_update)
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 80a5 	beq.w	800613a <_nx_arp_periodic_update+0x16a>
        {

            /* Decrement the next update field.  */
            arp_entry -> nx_arp_entry_next_update--;
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	1e5a      	subs	r2, r3, #1
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	605a      	str	r2, [r3, #4]

            /* Determine if an ARP expiration is present.  */
            if (!arp_entry -> nx_arp_entry_next_update)
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f040 809b 	bne.w	800613a <_nx_arp_periodic_update+0x16a>
            {

                /* Yes, an ARP expiration is present.   */

                /* Determine if the retry counter has been exceeded.  */
                if (arp_entry -> nx_arp_retries == NX_ARP_MAXIMUM_RETRIES)
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	2b12      	cmp	r3, #18
 800600a:	f040 8086 	bne.w	800611a <_nx_arp_periodic_update+0x14a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800600e:	f3ef 8310 	mrs	r3, PRIMASK
 8006012:	613b      	str	r3, [r7, #16]
    return(posture);
 8006014:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8006016:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006018:	b672      	cpsid	i
    return(int_posture);
 800601a:	68fb      	ldr	r3, [r7, #12]

                    /* The number of retries has been exceeded. The entry is removed
                       from the active list and any queued packet is released.  */

                    /* Disable interrupts.  */
                    TX_DISABLE
 800601c:	61bb      	str	r3, [r7, #24]

                    /* This ARP entry has expired, remove it from the active ARP list.  Check to make
                       sure it is still active.  */
                    if (arp_entry -> nx_arp_active_list_head)
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d028      	beq.n	8006078 <_nx_arp_periodic_update+0xa8>
                    {

                        /* Determine if this is the only ARP entry on the list.  */
                        if (arp_entry == arp_entry -> nx_arp_active_next)
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	6a3a      	ldr	r2, [r7, #32]
 800602c:	429a      	cmp	r2, r3
 800602e:	d104      	bne.n	800603a <_nx_arp_periodic_update+0x6a>
                        {

                            /* Remove the entry from the list.  */
                            *(arp_entry -> nx_arp_active_list_head) =  NX_NULL;
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	e014      	b.n	8006064 <_nx_arp_periodic_update+0x94>
                        {

                            /* Remove the entry from a list of more than one entry.  */

                            /* Update the list head pointer.  */
                            if (*(arp_entry -> nx_arp_active_list_head) == arp_entry)
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6a3a      	ldr	r2, [r7, #32]
 8006042:	429a      	cmp	r2, r3
 8006044:	d104      	bne.n	8006050 <_nx_arp_periodic_update+0x80>
                            {
                                *(arp_entry -> nx_arp_active_list_head) =  arp_entry -> nx_arp_active_next;
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	6a3a      	ldr	r2, [r7, #32]
 800604c:	6952      	ldr	r2, [r2, #20]
 800604e:	601a      	str	r2, [r3, #0]
                            }

                            /* Update the links of the adjacent ARP entries.  */
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	695b      	ldr	r3, [r3, #20]
                                arp_entry -> nx_arp_active_previous;
 8006054:	6a3a      	ldr	r2, [r7, #32]
 8006056:	6992      	ldr	r2, [r2, #24]
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8006058:	619a      	str	r2, [r3, #24]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	699b      	ldr	r3, [r3, #24]
                                arp_entry -> nx_arp_active_next;
 800605e:	6a3a      	ldr	r2, [r7, #32]
 8006060:	6952      	ldr	r2, [r2, #20]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 8006062:	615a      	str	r2, [r3, #20]
                        }

                        /* Decrease the number of active ARP entries.  */
                        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 800606a:	1e5a      	subs	r2, r3, #1
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8

                        /* Clear the active head pointer.  */
                        arp_entry -> nx_arp_active_list_head =  NX_NULL;
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	2200      	movs	r2, #0
 8006076:	61da      	str	r2, [r3, #28]
                    }

                    /* Determine if this is the only ARP entry on the dynamic list.  */
                    if (arp_entry != arp_entry -> nx_arp_pool_next)
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	6a3a      	ldr	r2, [r7, #32]
 800607e:	429a      	cmp	r2, r3
 8006080:	d02a      	beq.n	80060d8 <_nx_arp_periodic_update+0x108>
                        /* No. Place the ARP entry at the end of the dynamic ARP pool, which is where new
                           ARP requests are allocated from.  */

                        /* Remove the entry from a list of more than one entry.  */
                        /* Update the links of the adjacent ARP dynamic pool entries.  */
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	68db      	ldr	r3, [r3, #12]
                            arp_entry -> nx_arp_pool_previous;
 8006086:	6a3a      	ldr	r2, [r7, #32]
 8006088:	6912      	ldr	r2, [r2, #16]
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 800608a:	611a      	str	r2, [r3, #16]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	691b      	ldr	r3, [r3, #16]
                            arp_entry -> nx_arp_pool_next;
 8006090:	6a3a      	ldr	r2, [r7, #32]
 8006092:	68d2      	ldr	r2, [r2, #12]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8006094:	60da      	str	r2, [r3, #12]

                        /* Update the list head pointer.  */
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 800609c:	6a3a      	ldr	r2, [r7, #32]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d104      	bne.n	80060ac <_nx_arp_periodic_update+0xdc>
                        {
                            ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry -> nx_arp_pool_next;
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
                        }


                        /* Add ARP entry to the end of the list.  */
                        arp_entry -> nx_arp_pool_next =
                            ip_ptr -> nx_ip_arp_dynamic_list;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 26d4 	ldr.w	r2, [r3, #1748]	; 0x6d4
                        arp_entry -> nx_arp_pool_next =
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	60da      	str	r2, [r3, #12]
                        arp_entry -> nx_arp_pool_previous =
                            (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80060bc:	691a      	ldr	r2, [r3, #16]
                        arp_entry -> nx_arp_pool_previous =
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	611a      	str	r2, [r3, #16]
                        ((ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous) -> nx_arp_pool_next =
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	6a3a      	ldr	r2, [r7, #32]
 80060cc:	60da      	str	r2, [r3, #12]
                            arp_entry;
                        (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous =   arp_entry;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80060d4:	6a3a      	ldr	r2, [r7, #32]
 80060d6:	611a      	str	r2, [r3, #16]
                    }

                    /* Pickup the queued packets head pointer.  */
                    next_packet_ptr =  arp_entry -> nx_arp_packets_waiting;
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060dc:	61fb      	str	r3, [r7, #28]

                    /* Clear the queued packets head pointer.  */
                    arp_entry -> nx_arp_packets_waiting =  NX_NULL;
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	2200      	movs	r2, #0
 80060e2:	631a      	str	r2, [r3, #48]	; 0x30
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f383 8810 	msr	PRIMASK, r3
}
 80060ee:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Loop to remove all queued packets.  */
                    while (next_packet_ptr)
 80060f0:	e00f      	b.n	8006112 <_nx_arp_periodic_update+0x142>
                    {

                        /* Pickup the packet pointer at the head of the queue.  */
                        packet_ptr =  next_packet_ptr;
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	617b      	str	r3, [r7, #20]

                        /* Move to the next packet in the queue.  */
                        next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	61fb      	str	r3, [r7, #28]

                        /* Clear the next packet queue pointer.  */
                        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2200      	movs	r2, #0
 8006100:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                        /* Release the packet that was queued for the expired ARP entry.  */
                        _nx_packet_transmit_release(packet_ptr);
 800610c:	6978      	ldr	r0, [r7, #20]
 800610e:	f003 fabb 	bl	8009688 <_nx_packet_transmit_release>
                    while (next_packet_ptr)
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1ec      	bne.n	80060f2 <_nx_arp_periodic_update+0x122>
 8006118:	e00f      	b.n	800613a <_nx_arp_periodic_update+0x16a>
                {

                    /* We haven't yet had a response to this ARP request so send it again!  */

                    /* Increment the ARP retry counter.  */
                    arp_entry -> nx_arp_retries++;
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	609a      	str	r2, [r3, #8]

                    /* Setup the ARP update rate to the maximum value again.  */
                    arp_entry -> nx_arp_entry_next_update =  NX_ARP_UPDATE_RATE;
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	220a      	movs	r2, #10
 8006128:	605a      	str	r2, [r3, #4]

                    /* Send the ARP request out.  */
                    _nx_arp_packet_send(ip_ptr, arp_entry -> nx_arp_ip_address, arp_entry -> nx_arp_ip_interface);
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	6a19      	ldr	r1, [r3, #32]
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006132:	461a      	mov	r2, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff fea9 	bl	8005e8c <_nx_arp_packet_send>
                }
            }
        }

        /* Move to the next ARP entry.  */
        arp_entry =  arp_entry -> nx_arp_pool_next;
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	623b      	str	r3, [r7, #32]
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	3301      	adds	r3, #1
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 800614c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614e:	429a      	cmp	r2, r3
 8006150:	f4ff af49 	bcc.w	8005fe6 <_nx_arp_periodic_update+0x16>
    }


    /* Reduce the defend timeout of interfaces.  */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8006154:	2300      	movs	r3, #0
 8006156:	627b      	str	r3, [r7, #36]	; 0x24
 8006158:	e033      	b.n	80061c2 <_nx_arp_periodic_update+0x1f2>
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_FALSE)
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	440b      	add	r3, r1
 8006168:	f203 7324 	addw	r3, r3, #1828	; 0x724
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d021      	beq.n	80061b6 <_nx_arp_periodic_update+0x1e6>
        {
            continue;
        }

        if (ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout == 0)
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006176:	4613      	mov	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	440b      	add	r3, r1
 8006180:	f203 7364 	addw	r3, r3, #1892	; 0x764
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d017      	beq.n	80061ba <_nx_arp_periodic_update+0x1ea>
        {
            continue;
        }

        ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout--;
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	011b      	lsls	r3, r3, #4
 8006196:	440b      	add	r3, r1
 8006198:	f203 7364 	addw	r3, r3, #1892	; 0x764
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	1e59      	subs	r1, r3, #1
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	4403      	add	r3, r0
 80061ae:	f203 7364 	addw	r3, r3, #1892	; 0x764
 80061b2:	6019      	str	r1, [r3, #0]
 80061b4:	e002      	b.n	80061bc <_nx_arp_periodic_update+0x1ec>
            continue;
 80061b6:	bf00      	nop
 80061b8:	e000      	b.n	80061bc <_nx_arp_periodic_update+0x1ec>
            continue;
 80061ba:	bf00      	nop
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	3301      	adds	r3, #1
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0c8      	beq.n	800615a <_nx_arp_periodic_update+0x18a>
    }
}
 80061c8:	bf00      	nop
 80061ca:	bf00      	nop
 80061cc:	3728      	adds	r7, #40	; 0x28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <_nx_arp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_process(NX_IP *ip_ptr)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b088      	sub	sp, #32
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]

NX_PACKET *packet_ptr;


    /* Loop to process all ARP deferred packet requests.  */
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 80061da:	e023      	b.n	8006224 <_nx_arp_queue_process+0x52>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80061dc:	f3ef 8310 	mrs	r3, PRIMASK
 80061e0:	617b      	str	r3, [r7, #20]
    return(posture);
 80061e2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80061e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80061e6:	b672      	cpsid	i
    return(int_posture);
 80061e8:	693b      	ldr	r3, [r7, #16]
    {

        /* Remove the first packet and process it!  */

        /* Disable interrupts.  */
        TX_DISABLE
 80061ea:	61fb      	str	r3, [r7, #28]

        /* Pickup the first packet.  */
        packet_ptr =  ip_ptr -> nx_ip_arp_deferred_received_packet_head;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 80061f2:	61bb      	str	r3, [r7, #24]

        /* Move the head pointer to the next packet.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	69da      	ldr	r2, [r3, #28]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc

        /* Check for end of ARP deferred processing queue.  */
        if (ip_ptr -> nx_ip_arp_deferred_received_packet_head == NX_NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 8006204:	2b00      	cmp	r3, #0
 8006206:	d103      	bne.n	8006210 <_nx_arp_queue_process+0x3e>
        {

            /* Yes, the ARP deferred queue is empty.  Set the tail pointer to NULL.  */
            ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  NX_NULL;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f383 8810 	msr	PRIMASK, r3
}
 800621a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual ARP packet receive function.  */
        _nx_arp_packet_receive(ip_ptr, packet_ptr);
 800621c:	69b9      	ldr	r1, [r7, #24]
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff fc0d 	bl	8005a3e <_nx_arp_packet_receive>
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1d6      	bne.n	80061dc <_nx_arp_queue_process+0xa>
    }
}
 800622e:	bf00      	nop
 8006230:	bf00      	nop
 8006232:	3720      	adds	r7, #32
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <_nx_arp_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_send(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b090      	sub	sp, #64	; 0x40
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
NX_PACKET   *queued_list_head;
NX_PACKET   *packet_ptr;
NX_IP_DRIVER driver_request;

    /* Initialize the queued list head to NULL.  */
    queued_list_head =  NX_NULL;
 8006242:	2300      	movs	r3, #0
 8006244:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006246:	f3ef 8310 	mrs	r3, PRIMASK
 800624a:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800624e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8006250:	b672      	cpsid	i
    return(int_posture);
 8006252:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Determine if this ARP entry has a packet queued up for sending.  */

    /* Disable interrupts before checking.  */
    TX_DISABLE
 8006254:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Look at the ARP packet queue pointer.  */
    if (arp_ptr -> nx_arp_packets_waiting)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625a:	2b00      	cmp	r3, #0
 800625c:	d005      	beq.n	800626a <_nx_arp_queue_send+0x32>
    {

        /* Pickup the packet pointer and clear the ARP queue pointer.  */
        queued_list_head =  arp_ptr -> nx_arp_packets_waiting;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006262:	63fb      	str	r3, [r7, #60]	; 0x3c
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2200      	movs	r2, #0
 8006268:	631a      	str	r2, [r3, #48]	; 0x30
 800626a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	f383 8810 	msr	PRIMASK, r3
}
 8006274:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Are there any packets queued to send?  */
    while (queued_list_head)
 8006276:	e04c      	b.n	8006312 <_nx_arp_queue_send+0xda>
    {

        /* Pickup the first entry on the list.  */
        packet_ptr =  queued_list_head;
 8006278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627a:	637b      	str	r3, [r7, #52]	; 0x34

        /* Move to the next entry on the ARP packet queue.  */
        queued_list_head =  queued_list_head -> nx_packet_queue_next;
 800627c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the packet's queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8006282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006284:	2200      	movs	r2, #0
 8006286:	61da      	str	r2, [r3, #28]

        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = arp_ptr -> nx_arp_ip_interface;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Build the driver request packet.  */
        driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629a:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_ptr                  =  ip_ptr;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command              =  NX_LINK_PACKET_SEND;
 80062a0:	2300      	movs	r3, #0
 80062a2:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet               =  packet_ptr;
 80062a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a6:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80062a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 80062ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d915      	bls.n	80062e8 <_nx_arp_queue_send+0xb0>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Fragmentation is needed, call the fragment routine if available. */
            if (ip_ptr -> nx_ip_fragment_processing)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <_nx_arp_queue_send+0x9e>
            {

                /* Call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80062cc:	f107 0208 	add.w	r2, r7, #8
 80062d0:	4610      	mov	r0, r2
 80062d2:	4798      	blx	r3
 80062d4:	e01d      	b.n	8006312 <_nx_arp_queue_send+0xda>
#endif /* NX_DISABLE_FRAGMENTATION */

#ifndef NX_DISABLE_IP_INFO

                /* Increment the IP send packets dropped count.  */
                ip_ptr -> nx_ip_send_packets_dropped++;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
 80062e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80062e2:	f003 f9d1 	bl	8009688 <_nx_packet_transmit_release>
 80062e6:	e014      	b.n	8006312 <_nx_arp_queue_send+0xda>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699a      	ldr	r2, [r3, #24]
 80062f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	4413      	add	r3, r2
 80062fc:	f1a3 0214 	sub.w	r2, r3, #20
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	619a      	str	r2, [r3, #24]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_PACKET_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Send the queued IP packet out on the network via the attached driver.  */
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8006304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630a:	f107 0208 	add.w	r2, r7, #8
 800630e:	4610      	mov	r0, r2
 8006310:	4798      	blx	r3
    while (queued_list_head)
 8006312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1af      	bne.n	8006278 <_nx_arp_queue_send+0x40>
        }
    }
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	3740      	adds	r7, #64	; 0x40
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <_nx_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_icmp_enable(NX_IP *ip_ptr)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ICMP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_ICMP_EVENTS, 0, 0);

    /* Setup the ICMP packet queue processing routine.  */
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a09      	ldr	r2, [pc, #36]	; (8006354 <_nx_icmp_enable+0x30>)
 8006330:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c

    /* Setup the ICMP packet receiving routine, thereby enabling ICMP traffic.  */
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a08      	ldr	r2, [pc, #32]	; (8006358 <_nx_icmp_enable+0x34>)
 8006338:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368

    /* Setup the ICMPv4 packet process routine */
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a07      	ldr	r2, [pc, #28]	; (800635c <_nx_icmp_enable+0x38>)
 8006340:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370

    /* Return a successful status!  */
    return(NX_SUCCESS);
 8006344:	2300      	movs	r3, #0
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8006346:	4618      	mov	r0, r3
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	0800645d 	.word	0x0800645d
 8006358:	0800639d 	.word	0x0800639d
 800635c:	080064bb 	.word	0x080064bb

08006360 <_nx_icmp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* FEATURE_NX_IPV6 not defined */
    if (ip_ptr -> nx_ip_icmpv4_packet_process)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 8006370:	2b00      	cmp	r3, #0
 8006372:	d006      	beq.n	8006382 <_nx_icmp_packet_process+0x22>
    {
        ip_ptr -> nx_ip_icmpv4_packet_process(ip_ptr, packet_ptr);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	4798      	blx	r3
        return;
 8006380:	e009      	b.n	8006396 <_nx_icmp_packet_process+0x36>
    }

#ifndef NX_DISABLE_ICMP_INFO
    ip_ptr -> nx_ip_icmp_invalid_packets++;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif /* NX_DISABLE_ICMP_INFO */

    _nx_packet_release(packet_ptr);
 8006390:	6838      	ldr	r0, [r7, #0]
 8006392:	f003 f8c1 	bl	8009518 <_nx_packet_release>
}
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <_nx_icmp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP total messages received counter.  */
    ip_ptr -> nx_ip_icmp_total_messages_received++;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_ICMP_HEADER))
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	2b07      	cmp	r3, #7
 80063ba:	d80a      	bhi.n	80063d2 <_nx_icmp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error.  */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 80063ca:	6838      	ldr	r0, [r7, #0]
 80063cc:	f003 f8a4 	bl	8009518 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 80063d0:	e03c      	b.n	800644c <_nx_icmp_packet_receive+0xb0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80063d2:	f3ef 8305 	mrs	r3, IPSR
 80063d6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80063d8:	69ba      	ldr	r2, [r7, #24]
        return;
    }
#endif /* NX_ENABLE_ICMP_ADDRESS_CHECK  */

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 80063da:	4b1e      	ldr	r3, [pc, #120]	; (8006454 <_nx_icmp_packet_receive+0xb8>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4313      	orrs	r3, r2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d106      	bne.n	80063f2 <_nx_icmp_packet_receive+0x56>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 80063ea:	4b1b      	ldr	r3, [pc, #108]	; (8006458 <_nx_icmp_packet_receive+0xbc>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d028      	beq.n	8006444 <_nx_icmp_packet_receive+0xa8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80063f2:	f3ef 8310 	mrs	r3, PRIMASK
 80063f6:	617b      	str	r3, [r7, #20]
    return(posture);
 80063f8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80063fa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80063fc:	b672      	cpsid	i
    return(int_posture);
 80063fe:	693b      	ldr	r3, [r7, #16]
        /* If system state is non-zero, we are in an ISR. If the current thread is not the IP thread,
           we need to prevent unnecessary recursion in loopback. Just place the message at the
           end of the ICMP message queue and wakeup the IP helper thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8006400:	61fb      	str	r3, [r7, #28]

        /* Add the packet to the ICMP message queue.  */
        if (ip_ptr -> nx_ip_icmp_queue_head)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <_nx_icmp_packet_receive+0x7c>
        {

            /* Link the current packet to the list head.  */
            packet_ptr -> nx_packet_queue_next =  ip_ptr -> nx_ip_icmp_queue_head;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 2374 	ldr.w	r2, [r3, #884]	; 0x374
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	61da      	str	r2, [r3, #28]
 8006416:	e002      	b.n	800641e <_nx_icmp_packet_receive+0x82>
        }
        else
        {

            /* Empty queue, add to the head of the ICMP message queue.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2200      	movs	r2, #0
 800641c:	61da      	str	r2, [r3, #28]
        }

        /* Update the queue head pointer.  */
        ip_ptr -> nx_ip_icmp_queue_head =  packet_ptr;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f383 8810 	msr	PRIMASK, r3
}
 8006430:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the ICMP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ICMP_EVENT, TX_OR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006438:	2200      	movs	r2, #0
 800643a:	2104      	movs	r1, #4
 800643c:	4618      	mov	r0, r3
 800643e:	f008 ff27 	bl	800f290 <_tx_event_flags_set>
 8006442:	e003      	b.n	800644c <_nx_icmp_packet_receive+0xb0>
    else
    {

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the ICMP processing directly.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff ff8a 	bl	8006360 <_nx_icmp_packet_process>
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* NX_DISABLE_IPV4 */
}
 800644c:	3720      	adds	r7, #32
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20000088 	.word	0x20000088
 8006458:	20008094 	.word	0x20008094

0800645c <_nx_icmp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_queue_process(NX_IP *ip_ptr)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006464:	f3ef 8310 	mrs	r3, PRIMASK
 8006468:	60fb      	str	r3, [r7, #12]
    return(posture);
 800646a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800646c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800646e:	b672      	cpsid	i
    return(int_posture);
 8006470:	68bb      	ldr	r3, [r7, #8]
NX_PACKET *queue_head;
NX_PACKET *packet_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 8006472:	61bb      	str	r3, [r7, #24]

    /* Remove the ICMP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_icmp_queue_head;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800647a:	61fb      	str	r3, [r7, #28]
    ip_ptr -> nx_ip_icmp_queue_head =  NX_NULL;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f383 8810 	msr	PRIMASK, r3
}
 800648e:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire ICMP message queue and process packets
       one by one.  */
    while (queue_head)
 8006490:	e00b      	b.n	80064aa <_nx_icmp_queue_process+0x4e>
    {

        /* Pickup the first queued ICMP message and remove it from the
           ICMP queue.  */
        packet_ptr =  queue_head;
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	617b      	str	r3, [r7, #20]
        queue_head =  queue_head -> nx_packet_queue_next;
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	61fb      	str	r3, [r7, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2200      	movs	r2, #0
 80064a0:	61da      	str	r2, [r3, #28]

        /* Process the packet.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 80064a2:	6979      	ldr	r1, [r7, #20]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff ff5b 	bl	8006360 <_nx_icmp_packet_process>
    while (queue_head)
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1f0      	bne.n	8006492 <_nx_icmp_queue_process+0x36>
    }
}
 80064b0:	bf00      	nop
 80064b2:	bf00      	nop
 80064b4:	3720      	adds	r7, #32
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <_nx_icmpv4_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b088      	sub	sp, #32
 80064be:	af02      	add	r7, sp, #8
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	6039      	str	r1, [r7, #0]

NX_ICMPV4_HEADER *header_ptr;
USHORT            checksum;
#if defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT              compute_checksum = 1;
 80064c4:	2301      	movs	r3, #1
 80064c6:	617b      	str	r3, [r7, #20]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	613b      	str	r3, [r7, #16]
#ifdef NX_DISABLE_ICMPV4_RX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_RX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_RX_CHECKSUM)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <_nx_icmpv4_packet_process+0x26>
    {
        compute_checksum = 0;
 80064dc:	2300      	movs	r3, #0
 80064de:	617b      	str	r3, [r7, #20]
    {
        compute_checksum = 1;
    }
#endif
#if defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d023      	beq.n	800652e <_nx_icmpv4_packet_process+0x74>
#endif /* defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Calculate the ICMP message checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
                                            (UINT)packet_ptr -> nx_packet_length,
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 80064ea:	2300      	movs	r3, #0
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	2300      	movs	r3, #0
 80064f0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80064f4:	6838      	ldr	r0, [r7, #0]
 80064f6:	f000 fb14 	bl	8006b22 <_nx_ip_checksum_compute>
 80064fa:	4603      	mov	r3, r0
 80064fc:	81fb      	strh	r3, [r7, #14]
                                            /* ICMPv4 checksum does not include
                                               src/dest addresses */
                                            NX_NULL, NX_NULL);

        checksum =  ((USHORT) ~checksum) & NX_LOWER_16_MASK;
 80064fe:	89fb      	ldrh	r3, [r7, #14]
 8006500:	43db      	mvns	r3, r3
 8006502:	81fb      	strh	r3, [r7, #14]

        /* Determine if the checksum is valid.  */
        if (checksum)
 8006504:	89fb      	ldrh	r3, [r7, #14]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d011      	beq.n	800652e <_nx_icmpv4_packet_process+0x74>
        {

#ifndef NX_DISABLE_ICMP_INFO

            /* Increment the ICMP invalid packet error.  */
            ip_ptr -> nx_ip_icmp_invalid_packets++;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

            /* Increment the ICMP checksum error count.  */
            ip_ptr -> nx_ip_icmp_checksum_errors++;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
#endif

            /* Nope, the checksum is invalid.  Toss this ICMP packet out.  */
            _nx_packet_release(packet_ptr);
 8006526:	6838      	ldr	r0, [r7, #0]
 8006528:	f002 fff6 	bl	8009518 <_nx_packet_release>
            return;
 800652c:	e01b      	b.n	8006566 <_nx_icmpv4_packet_process+0xac>
        }
    }

    /* Determine the message type and call the appropriate handler.  */
    if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REPLY_TYPE)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d104      	bne.n	8006540 <_nx_icmpv4_packet_process+0x86>
    {
        _nx_icmpv4_process_echo_reply(ip_ptr, packet_ptr);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f817 	bl	800656c <_nx_icmpv4_process_echo_reply>
 800653e:	e012      	b.n	8006566 <_nx_icmpv4_packet_process+0xac>
    }
    else if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REQUEST_TYPE)
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b08      	cmp	r3, #8
 8006546:	d104      	bne.n	8006552 <_nx_icmpv4_packet_process+0x98>
    {
        _nx_icmpv4_process_echo_request(ip_ptr, packet_ptr);
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f8cc 	bl	80066e8 <_nx_icmpv4_process_echo_request>
 8006550:	e009      	b.n	8006566 <_nx_icmpv4_packet_process+0xac>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP unhandled message count.  */
        ip_ptr -> nx_ip_icmp_unhandled_messages++;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);
#endif /* TX_ENABLE_EVENT_TRACE  */

        /* Unhandled ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
 8006560:	6838      	ldr	r0, [r7, #0]
 8006562:	f002 ffd9 	bl	8009518 <_nx_packet_release>
    }
}
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <_nx_icmpv4_process_echo_reply>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_reply(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b090      	sub	sp, #64	; 0x40
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    echo_ptr =  (NX_ICMPV4_ECHO *)packet_ptr -> nx_packet_prepend_ptr;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	637b      	str	r3, [r7, #52]	; 0x34

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP responses received count.  */
    ip_ptr -> nx_ip_ping_responses_received++;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#endif

    /* Pickup sequence number.  */
    sequence_num = echo_ptr -> nx_icmpv4_echo_sequence_num;
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	88db      	ldrh	r3, [r3, #6]
 800658e:	867b      	strh	r3, [r7, #50]	; 0x32

    /* Convert to host byte order, if little endian taget. */
    NX_CHANGE_USHORT_ENDIAN(sequence_num);
 8006590:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006592:	ba5b      	rev16	r3, r3
 8006594:	867b      	strh	r3, [r7, #50]	; 0x32
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006596:	f3ef 8310 	mrs	r3, PRIMASK
 800659a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800659e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80065a0:	b672      	cpsid	i
    return(int_posture);
 80065a2:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts.  */
    TX_DISABLE
 80065a4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Pickup the head pointer and the suspended count.  */
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065b4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80065b6:	4b4b      	ldr	r3, [pc, #300]	; (80066e4 <_nx_icmpv4_process_echo_reply+0x178>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3301      	adds	r3, #1
 80065bc:	4a49      	ldr	r2, [pc, #292]	; (80066e4 <_nx_icmpv4_process_echo_reply+0x178>)
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	f383 8810 	msr	PRIMASK, r3
}
 80065ca:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Search through the suspended threads waiting for a ECHO (ping) response
       in an attempt to find a matching sequence number.  */
    while (suspended--)
 80065cc:	e05e      	b.n	800668c <_nx_icmpv4_process_echo_reply+0x120>
    {

        /* Determine if the sequence number matches a suspended thread.  */
        if ((USHORT)(thread_ptr ->  tx_thread_suspend_info) == sequence_num)
 80065ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d155      	bne.n	8006686 <_nx_icmpv4_process_echo_reply+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80065da:	f3ef 8310 	mrs	r3, PRIMASK
 80065de:	61fb      	str	r3, [r7, #28]
    return(posture);
 80065e0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80065e2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80065e4:	b672      	cpsid	i
    return(int_posture);
 80065e6:	69bb      	ldr	r3, [r7, #24]
        {

            /* Disable interrupts.  */
            TX_DISABLE
 80065e8:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80065ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d104      	bne.n	80065fe <_nx_icmpv4_process_echo_reply+0x92>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                ip_ptr -> nx_ip_icmp_ping_suspension_list =  NX_NULL;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
 80065fc:	e014      	b.n	8006628 <_nx_icmpv4_process_echo_reply+0xbc>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                if (ip_ptr -> nx_ip_icmp_ping_suspension_list == thread_ptr)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006604:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006606:	429a      	cmp	r2, r3
 8006608:	d104      	bne.n	8006614 <_nx_icmpv4_process_echo_reply+0xa8>
                {
                    ip_ptr -> nx_ip_icmp_ping_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800660a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800660c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
                }

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8006614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 8006618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800661a:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800661c:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800661e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 8006622:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006624:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8006626:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800662e:	1e5a      	subs	r2, r3, #1
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006638:	2200      	movs	r2, #0
 800663a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800663c:	4b29      	ldr	r3, [pc, #164]	; (80066e4 <_nx_icmpv4_process_echo_reply+0x178>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3301      	adds	r3, #1
 8006642:	4a28      	ldr	r2, [pc, #160]	; (80066e4 <_nx_icmpv4_process_echo_reply+0x178>)
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f383 8810 	msr	PRIMASK, r3
}
 8006650:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to remove the ICMP header that is still in front of
               the response message.  */
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV4_ECHO);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	f1a3 0208 	sub.w	r2, r3, #8
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV4_ECHO);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f103 0208 	add.w	r2, r3, #8
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	609a      	str	r2, [r3, #8]

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800666a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	601a      	str	r2, [r3, #0]

            /* Clear packet pointer so we don't try to release it below.  */
            packet_ptr =  NX_NULL;
 8006672:	2300      	movs	r3, #0
 8006674:	603b      	str	r3, [r7, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8006676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006678:	2200      	movs	r2, #0
 800667a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800667e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006680:	f00a f9cc 	bl	8010a1c <_tx_thread_system_resume>

            /* Get out of the loop.  */
            break;
 8006684:	e007      	b.n	8006696 <_nx_icmpv4_process_echo_reply+0x12a>
        }
        else
        {
            /* Just move to the next suspended thread.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8006686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (suspended--)
 800668c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668e:	1e5a      	subs	r2, r3, #1
 8006690:	63ba      	str	r2, [r7, #56]	; 0x38
 8006692:	2b00      	cmp	r3, #0
 8006694:	d19b      	bne.n	80065ce <_nx_icmpv4_process_echo_reply+0x62>
        }
    }

    /* Determine if no match was made and we just have to release the packet.  */
    if (packet_ptr)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d009      	beq.n	80066b0 <_nx_icmpv4_process_echo_reply+0x144>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif /* NX_DISABLE_ICMP_INFO */

        /* Yes, just release the packet.  */
        _nx_packet_release(packet_ptr);
 80066aa:	6838      	ldr	r0, [r7, #0]
 80066ac:	f002 ff34 	bl	8009518 <_nx_packet_release>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80066b0:	f3ef 8310 	mrs	r3, PRIMASK
 80066b4:	60fb      	str	r3, [r7, #12]
    return(posture);
 80066b6:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80066b8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80066ba:	b672      	cpsid	i
    return(int_posture);
 80066bc:	68bb      	ldr	r3, [r7, #8]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release preemption disable.  */
    _tx_thread_preempt_disable--;
 80066c0:	4b08      	ldr	r3, [pc, #32]	; (80066e4 <_nx_icmpv4_process_echo_reply+0x178>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	4a07      	ldr	r2, [pc, #28]	; (80066e4 <_nx_icmpv4_process_echo_reply+0x178>)
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066cc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f383 8810 	msr	PRIMASK, r3
}
 80066d4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80066d6:	f00a f967 	bl	80109a8 <_tx_thread_system_preempt_check>
}
 80066da:	bf00      	nop
 80066dc:	3740      	adds	r7, #64	; 0x40
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	2000812c 	.word	0x2000812c

080066e8 <_nx_icmpv4_process_echo_request>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_request(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08c      	sub	sp, #48	; 0x30
 80066ec:	af04      	add	r7, sp, #16
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]

NX_ICMPV4_HEADER *header_ptr;
ULONG             checksum;
ULONG             old_m;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
ULONG             compute_checksum = 1;
 80066f2:	2301      	movs	r3, #1
 80066f4:	61fb      	str	r3, [r7, #28]
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
NX_IPV4_HEADER   *ipv4_header;
ULONG             next_hop_address = NX_NULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60bb      	str	r3, [r7, #8]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	61bb      	str	r3, [r7, #24]

    /* Pickup the return IP address.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006704:	617b      	str	r3, [r7, #20]

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings received count.  */
    ip_ptr -> nx_ip_pings_received++;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#endif

    /* Change the type to Echo Reply and send back the message to the caller.  */
    header_ptr -> nx_icmpv4_header_type = NX_ICMP_ECHO_REPLY_TYPE;
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2200      	movs	r2, #0
 8006718:	701a      	strb	r2, [r3, #0]
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <_nx_icmpv4_process_echo_request+0x44>
    {
        compute_checksum = 0;
 8006728:	2300      	movs	r3, #0
 800672a:	61fb      	str	r3, [r7, #28]
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d02c      	beq.n	800678c <_nx_icmpv4_process_echo_request+0xa4>
           m'  - new value of a 16-bit field
           HC' = ~(C + (-m) + m')
           = ~(~HC + ~m + m') */

        /* Endian swapping logic.  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	885b      	ldrh	r3, [r3, #2]
 8006736:	ba5b      	rev16	r3, r3
 8006738:	b29a      	uxth	r2, r3
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	805a      	strh	r2, [r3, #2]

        /* Get the old checksum (HC) in header. */
        checksum = header_ptr -> nx_icmpv4_header_checksum;
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	885b      	ldrh	r3, [r3, #2]
 8006742:	613b      	str	r3, [r7, #16]

        /* Get the old type(m). */
        old_m = (ULONG)(NX_ICMP_ECHO_REQUEST_TYPE << 8);
 8006744:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006748:	60fb      	str	r3, [r7, #12]

        /* Update the checksum, get the new checksum(HC'). */
        /* The m' is value of echo reply type. It is zero so can be ignored. */
        checksum = ((~checksum) & 0xFFFF) + ((~old_m) & 0xFFFF);
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	43db      	mvns	r3, r3
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	43db      	mvns	r3, r3
 8006754:	b29b      	uxth	r3, r3
 8006756:	4413      	add	r3, r2
 8006758:	613b      	str	r3, [r7, #16]

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	0c1a      	lsrs	r2, r3, #16
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	b29b      	uxth	r3, r3
 8006762:	4413      	add	r3, r2
 8006764:	613b      	str	r3, [r7, #16]

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	0c1a      	lsrs	r2, r3, #16
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	b29b      	uxth	r3, r3
 800676e:	4413      	add	r3, r2
 8006770:	613b      	str	r3, [r7, #16]

        /* Store the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = (~checksum & NX_LOWER_16_MASK);
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	b29b      	uxth	r3, r3
 8006776:	43db      	mvns	r3, r3
 8006778:	b29a      	uxth	r2, r3
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	805a      	strh	r2, [r3, #2]

        /* If NX_LITTLE_ENDIAN is defined, the header need to be swapped back
           for output (network byte order).  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	885b      	ldrh	r3, [r3, #2]
 8006782:	ba5b      	rev16	r3, r3
 8006784:	b29a      	uxth	r2, r3
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	805a      	strh	r2, [r3, #2]
 800678a:	e008      	b.n	800679e <_nx_icmpv4_process_echo_request+0xb6>
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
    else
    {

        /* Clear the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = 0;
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	2200      	movs	r2, #0
 8006790:	805a      	strh	r2, [r3, #2]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006796:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
    }
#endif

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	68d9      	ldr	r1, [r3, #12]
                      &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 80067a8:	f107 0308 	add.w	r3, r7, #8
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 fc57 	bl	8008060 <_nx_ip_route_find>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ipv4_header -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings responded to count.  */
    ip_ptr -> nx_ip_pings_responded_to++;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

    /* Send the ICMP packet to the IP component.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, packet_ptr, ipv4_header -> nx_ip_header_source_ip,
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	68da      	ldr	r2, [r3, #12]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	9303      	str	r3, [sp, #12]
 80067c8:	2300      	movs	r3, #0
 80067ca:	9302      	str	r3, [sp, #8]
 80067cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	2380      	movs	r3, #128	; 0x80
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	2300      	movs	r3, #0
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 fbca 	bl	8007f74 <_nx_ip_packet_send>
                       NX_IP_NORMAL, NX_IP_TIME_TO_LIVE, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);
}
 80067e0:	bf00      	nop
 80067e2:	3720      	adds	r7, #32
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <_nx_icmpv4_send_error_message>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv4_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b096      	sub	sp, #88	; 0x58
 80067ec:	af04      	add	r7, sp, #16
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]

NX_PACKET       *pkt_ptr;
USHORT           checksum;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT             compute_checksum = 1;
 80067f6:	2301      	movs	r3, #1
 80067f8:	647b      	str	r3, [r7, #68]	; 0x44
NX_ICMPV4_ERROR *icmpv4_error;
NX_IPV4_HEADER  *ip_header_ptr;
UINT             ip_header_size;
UINT             bytes_to_copy, i;
ULONG            src_ip;
ULONG            next_hop_address = NX_NULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	617b      	str	r3, [r7, #20]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv4 error message if ICMPv4 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv4_packet_process == NX_NULL)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 8113 	beq.w	8006a30 <_nx_icmpv4_send_error_message+0x248>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(offending_packet -> nx_packet_ip_header);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680e:	633b      	str	r3, [r7, #48]	; 0x30
    src_ip = ip_header_ptr -> nx_ip_header_source_ip;
 8006810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the incoming interface. */
    if_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* An ICMP error message MUST NOT be sent as the result of receiving:
       RFC1122, Section3.2.2, Page39.  */

    /* A datagram destined to an IP broadcast or IP multicast address.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006824:	f000 8106 	beq.w	8006a34 <_nx_icmpv4_send_error_message+0x24c>
        ((ip_header_ptr -> nx_ip_header_destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8006830:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8006834:	f000 80fe 	beq.w	8006a34 <_nx_icmpv4_send_error_message+0x24c>
    {
        return;
    }

    /* A datagram sent as a link-layer broadcast.  */
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	691a      	ldr	r2, [r3, #16]
 800683c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	401a      	ands	r2, r3
         if_ptr -> nx_interface_ip_network) &&
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	69db      	ldr	r3, [r3, #28]
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8006846:	429a      	cmp	r2, r3
 8006848:	d10b      	bne.n	8006862 <_nx_icmpv4_send_error_message+0x7a>
        ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	691a      	ldr	r2, [r3, #16]
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	43db      	mvns	r3, r3
 8006854:	401a      	ands	r2, r3
         ~(if_ptr -> nx_interface_ip_network_mask)))
 8006856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	43db      	mvns	r3, r3
         if_ptr -> nx_interface_ip_network) &&
 800685c:	429a      	cmp	r2, r3
 800685e:	f000 80eb 	beq.w	8006a38 <_nx_icmpv4_send_error_message+0x250>
    {
        return;
    }

    /* A non-initial fragment.  */
    if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_OFFSET_MASK)
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800686a:	2b00      	cmp	r3, #0
 800686c:	f040 80e6 	bne.w	8006a3c <_nx_icmpv4_send_error_message+0x254>
    }

    /* A datagram whose source address does not define a single host,
       e.g., a zero address, a loopback address, a broadcast address,
       a multicast address, or a Class E address.  */
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 80e3 	beq.w	8006a40 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	68db      	ldr	r3, [r3, #12]
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 800687e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8006882:	d304      	bcc.n	800688e <_nx_icmpv4_send_error_message+0xa6>
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	68db      	ldr	r3, [r3, #12]
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 8006888:	2b00      	cmp	r3, #0
 800688a:	f280 80d9 	bge.w	8006a40 <_nx_icmpv4_send_error_message+0x258>
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	68db      	ldr	r3, [r3, #12]
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006896:	f000 80d3 	beq.w	8006a40 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 80068a2:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80068a6:	f000 80cb 	beq.w	8006a40 <_nx_icmpv4_send_error_message+0x258>
    {
        return;
    }

    /* Allocate a packet to build the ICMPv4 error message in.  */
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv4_ICMP_PACKET, NX_NO_WAIT))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 80068b0:	f107 0118 	add.w	r1, r7, #24
 80068b4:	2300      	movs	r3, #0
 80068b6:	2224      	movs	r2, #36	; 0x24
 80068b8:	f002 fa92 	bl	8008de0 <_nx_packet_allocate>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f040 80c0 	bne.w	8006a44 <_nx_icmpv4_send_error_message+0x25c>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv4. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	2204      	movs	r2, #4
 80068c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Size of the message is ICMPv4 */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    icmpv4_error = (NX_ICMPV4_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	0e1b      	lsrs	r3, r3, #24
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	701a      	strb	r2, [r3, #0]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	0c1b      	lsrs	r3, r3, #16
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	705a      	strb	r2, [r3, #1]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = 0;
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	2200      	movs	r2, #0
 80068ea:	805a      	strh	r2, [r3, #2]
    icmpv4_error -> nx_icmpv4_error_pointer = (error_pointer << 24);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	061a      	lsls	r2, r3, #24
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	605a      	str	r2, [r3, #4]

    /* Change to network byte order. */
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	ba1a      	rev	r2, r3
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	605a      	str	r2, [r3, #4]

    /* IP Header + 64 bits (64 bits = 2 ULONGs) of Data Datagram.  */
    ip_header_size = ((ip_header_ptr -> nx_ip_header_word_0 & 0x0F000000) >> 24);
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	0e1b      	lsrs	r3, r3, #24
 8006904:	f003 030f 	and.w	r3, r3, #15
 8006908:	623b      	str	r3, [r7, #32]
    bytes_to_copy = (UINT)((ip_header_size + 2) * sizeof(ULONG));
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	3302      	adds	r3, #2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the packet length and pointers.  The length will be increased to include
       the IPv4 header in the IP send function.  The Prepend function will be similarly
       updated in the IP send function. */
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV4_ERROR);
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006916:	3208      	adds	r2, #8
 8006918:	625a      	str	r2, [r3, #36]	; 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	6899      	ldr	r1, [r3, #8]
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	440a      	add	r2, r1
 8006926:	60da      	str	r2, [r3, #12]

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692c:	63bb      	str	r3, [r7, #56]	; 0x38

    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    dest_packet = (ULONG *)NX_UCHAR_POINTER_ADD(icmpv4_error, sizeof(NX_ICMPV4_ERROR));
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	3308      	adds	r3, #8
 8006932:	637b      	str	r3, [r7, #52]	; 0x34

    /* Endian swap the incoming IPv4 normal header to network byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8006934:	2300      	movs	r3, #0
 8006936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006938:	e00a      	b.n	8006950 <_nx_icmpv4_send_error_message+0x168>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 800693a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	ba1a      	rev	r2, r3
 8006940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006942:	601a      	str	r2, [r3, #0]
        src_packet++;
 8006944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006946:	3304      	adds	r3, #4
 8006948:	63bb      	str	r3, [r7, #56]	; 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 800694a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800694c:	3301      	adds	r3, #1
 800694e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006952:	2b04      	cmp	r3, #4
 8006954:	d9f1      	bls.n	800693a <_nx_icmpv4_send_error_message+0x152>
    }

    /* Reset the packet pointer to the received packet IP header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Copy the data from the received packet to the ICMPv4 error packet. */
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 800695c:	e00a      	b.n	8006974 <_nx_icmpv4_send_error_message+0x18c>
    {

        *dest_packet++ = *src_packet++;
 800695e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006960:	1d13      	adds	r3, r2, #4
 8006962:	63bb      	str	r3, [r7, #56]	; 0x38
 8006964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006966:	1d19      	adds	r1, r3, #4
 8006968:	6379      	str	r1, [r7, #52]	; 0x34
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	601a      	str	r2, [r3, #0]
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 800696e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006970:	3b04      	subs	r3, #4
 8006972:	643b      	str	r3, [r7, #64]	; 0x40
 8006974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1f1      	bne.n	800695e <_nx_icmpv4_send_error_message+0x176>
    }

    /* Get the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800697e:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Endian swap the IPv4 normal header back to host byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8006980:	2300      	movs	r3, #0
 8006982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006984:	e00a      	b.n	800699c <_nx_icmpv4_send_error_message+0x1b4>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8006986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	ba1a      	rev	r2, r3
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	601a      	str	r2, [r3, #0]
        src_packet++;
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	3304      	adds	r3, #4
 8006994:	63bb      	str	r3, [r7, #56]	; 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8006996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006998:	3301      	adds	r3, #1
 800699a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800699c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d9f1      	bls.n	8006986 <_nx_icmpv4_send_error_message+0x19e>
    }

    /* Use the corresponding interface address as sender's address. */
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80069a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, src_ip,
                      &pkt_ptr -> nx_packet_address.nx_packet_interface_ptr,
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, src_ip,
 80069b0:	f107 0314 	add.w	r3, r7, #20
 80069b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f001 fb52 	bl	8008060 <_nx_ip_route_find>
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (pkt_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <_nx_icmpv4_send_error_message+0x1e6>
    {
        compute_checksum = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	647b      	str	r3, [r7, #68]	; 0x44
    {
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 80069ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d017      	beq.n	8006a04 <_nx_icmpv4_send_error_message+0x21c>
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Compute the checksum of the ICMP packet.  */
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 80069d4:	69b8      	ldr	r0, [r7, #24]
                                           (UINT)pkt_ptr -> nx_packet_length,
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 80069da:	2300      	movs	r3, #0
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	2300      	movs	r3, #0
 80069e0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80069e4:	f000 f89d 	bl	8006b22 <_nx_ip_checksum_compute>
 80069e8:	4603      	mov	r3, r0
 80069ea:	83fb      	strh	r3, [r7, #30]
                                           /* ICMPV4 checksum does not include
                                              src/dest addresses */
                                           NX_NULL, NX_NULL);

        icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = (USHORT)(~checksum);
 80069ec:	8bfb      	ldrh	r3, [r7, #30]
 80069ee:	43db      	mvns	r3, r3
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	805a      	strh	r2, [r3, #2]

        /* Swap to network byte order. */
        NX_CHANGE_USHORT_ENDIAN(icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum);
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	885b      	ldrh	r3, [r3, #2]
 80069fa:	ba5b      	rev16	r3, r3
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	805a      	strh	r2, [r3, #2]
 8006a02:	e005      	b.n	8006a10 <_nx_icmpv4_send_error_message+0x228>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Send the ICMP packet to the IP component. The time to live is set to 255.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, pkt_ptr, src_ip,
 8006a10:	69b9      	ldr	r1, [r7, #24]
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	9303      	str	r3, [sp, #12]
 8006a16:	2300      	movs	r3, #0
 8006a18:	9302      	str	r3, [sp, #8]
 8006a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	23ff      	movs	r3, #255	; 0xff
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	2300      	movs	r3, #0
 8006a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f001 faa3 	bl	8007f74 <_nx_ip_packet_send>
                       NX_IP_NORMAL, 255, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);

    return;
 8006a2e:	e00a      	b.n	8006a46 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006a30:	bf00      	nop
 8006a32:	e008      	b.n	8006a46 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006a34:	bf00      	nop
 8006a36:	e006      	b.n	8006a46 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006a38:	bf00      	nop
 8006a3a:	e004      	b.n	8006a46 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006a3c:	bf00      	nop
 8006a3e:	e002      	b.n	8006a46 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006a40:	bf00      	nop
 8006a42:	e000      	b.n	8006a46 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006a44:	bf00      	nop
}
 8006a46:	3748      	adds	r7, #72	; 0x48
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <_nx_igmp_multicast_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_igmp_multicast_check(NX_IP *ip_ptr, ULONG group, NX_INTERFACE *nx_interface)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]

UINT i;

    /* Check for "all hosts" group.  We always assume all hosts membership.  */
    /*lint -e{835} -e{845} suppress operating on zero. */
    if (group ==  NX_ALL_HOSTS_ADDRESS)
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4a18      	ldr	r2, [pc, #96]	; (8006abc <_nx_igmp_multicast_check+0x70>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d101      	bne.n	8006a64 <_nx_igmp_multicast_check+0x18>
    {
        return(NX_TRUE);
 8006a60:	2301      	movs	r3, #1
 8006a62:	e025      	b.n	8006ab0 <_nx_igmp_multicast_check+0x64>
    }

    /* Loop through the IP multicast join list to find the matching group that is being
       responded to by another host on this same network.  */

    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	e01e      	b.n	8006aa8 <_nx_igmp_multicast_check+0x5c>
    {

        /* Check for a match.  */
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8006a6a:	68f9      	ldr	r1, [r7, #12]
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	440b      	add	r3, r1
 8006a78:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d10e      	bne.n	8006aa2 <_nx_igmp_multicast_check+0x56>
            (nx_interface == ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_interface_list))
 8006a84:	68f9      	ldr	r1, [r7, #12]
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	440b      	add	r3, r1
 8006a92:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8006a96:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d101      	bne.n	8006aa2 <_nx_igmp_multicast_check+0x56>
        {
            return(NX_TRUE);
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e006      	b.n	8006ab0 <_nx_igmp_multicast_check+0x64>
    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2b06      	cmp	r3, #6
 8006aac:	d9dd      	bls.n	8006a6a <_nx_igmp_multicast_check+0x1e>
        }
    }

    /* Otherwise, we have searched the entire list, return false.  */
    return(NX_FALSE);
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	e0000001 	.word	0xe0000001

08006ac0 <_nx_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]

#ifndef NX_DISABLE_IPV4
TX_INTERRUPT_SAVE_AREA

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006ad2:	f04f 31ff 	mov.w	r1, #4294967295
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f008 ff72 	bl	800f9c0 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006adc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ae0:	617b      	str	r3, [r7, #20]
    return(posture);
 8006ae2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8006ae4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006ae6:	b672      	cpsid	i
    return(int_posture);
 8006ae8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8006aea:	61fb      	str	r3, [r7, #28]

    /* Pickup the IP address and the network mask.  This service assumes
       the operation on the primary interface. */
    *ip_address =    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f8d3 2734 	ldr.w	r2, [r3, #1844]	; 0x734
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8d3 2738 	ldr.w	r2, [r3, #1848]	; 0x738
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	f383 8810 	msr	PRIMASK, r3
}
 8006b0a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006b12:	4618      	mov	r0, r3
 8006b14:	f009 f9cc 	bl	800feb0 <_tx_mutex_put>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_GET, ip_ptr, ip_ptr -> nx_ip_interface[0].nx_interface_ip_address,
                            ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Return completion status.  */
    return(NX_SUCCESS);
 8006b18:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3720      	adds	r7, #32
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <_nx_ip_checksum_compute>:
/*                                                                        */
/**************************************************************************/
USHORT  _nx_ip_checksum_compute(NX_PACKET *packet_ptr, ULONG protocol,
                                UINT data_length, ULONG *src_ip_addr,
                                ULONG *dest_ip_addr)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b08e      	sub	sp, #56	; 0x38
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	607a      	str	r2, [r7, #4]
 8006b2e:	603b      	str	r3, [r7, #0]

ULONG      checksum = 0;
 8006b30:	2300      	movs	r3, #0
 8006b32:	637b      	str	r3, [r7, #52]	; 0x34
UINT       i;
#endif

    /* For computing TCP/UDP/ICMPv6, we need to include the pseudo header.
       The ICMPv4 checksum does not cover the pseudo header. */
    if ((protocol == NX_PROTOCOL_UDP) ||
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2b11      	cmp	r3, #17
 8006b38:	d002      	beq.n	8006b40 <_nx_ip_checksum_compute+0x1e>
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b06      	cmp	r3, #6
 8006b3e:	d141      	bne.n	8006bc4 <_nx_ip_checksum_compute+0xa2>
        (protocol == NX_PROTOCOL_TCP))
    {

    USHORT *src_ip_short, *dest_ip_short;

        checksum = protocol;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	637b      	str	r3, [r7, #52]	; 0x34

        /* The addresses must not be null.  */
        NX_ASSERT((src_ip_addr != NX_NULL) && (dest_ip_addr != NX_NULL));
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <_nx_ip_checksum_compute+0x2e>
 8006b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d104      	bne.n	8006b5a <_nx_ip_checksum_compute+0x38>
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	f009 fea8 	bl	80108a8 <_tx_thread_sleep>
 8006b58:	e7fa      	b.n	8006b50 <_nx_ip_checksum_compute+0x2e>

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        src_ip_short = (USHORT *)src_ip_addr;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	623b      	str	r3, [r7, #32]

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        dest_ip_short = (USHORT *)dest_ip_addr;
 8006b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b60:	61fb      	str	r3, [r7, #28]


        checksum += src_ip_short[0];
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6a:	4413      	add	r3, r2
 8006b6c:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += src_ip_short[1];
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	3302      	adds	r3, #2
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	461a      	mov	r2, r3
 8006b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b78:	4413      	add	r3, r2
 8006b7a:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[0];
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	461a      	mov	r2, r3
 8006b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b84:	4413      	add	r3, r2
 8006b86:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[1];
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	3302      	adds	r3, #2
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b92:	4413      	add	r3, r2
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
#endif /* FEATURE_NX_IPV6 */

        /* Take care of data length */
        checksum += data_length;
 8006b96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba0:	0c1a      	lsrs	r2, r3, #16
 8006ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	4413      	add	r3, r2
 8006ba8:	637b      	str	r3, [r7, #52]	; 0x34

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bac:	0c1a      	lsrs	r2, r3, #16
 8006bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	4413      	add	r3, r2
 8006bb4:	637b      	str	r3, [r7, #52]	; 0x34

        /* Convert to network byte order. */
        tmp = (USHORT)checksum;
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb8:	837b      	strh	r3, [r7, #26]
        NX_CHANGE_USHORT_ENDIAN(tmp);
 8006bba:	8b7b      	ldrh	r3, [r7, #26]
 8006bbc:	ba5b      	rev16	r3, r3
 8006bbe:	837b      	strh	r3, [r7, #26]
        checksum = tmp;
 8006bc0:	8b7b      	ldrh	r3, [r7, #26]
 8006bc2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Now we need to go through the payloads */

    /* Setup the pointer to the start of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    long_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize the current packet to the input packet pointer.  */
    current_packet =  packet_ptr;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop the packet. */
    while (current_packet)
 8006bce:	e058      	b.n	8006c82 <_nx_ip_checksum_compute+0x160>
    {

        /* Calculate current packet size. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr);
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	617b      	str	r3, [r7, #20]

        /* Calculate the end address in this packet. */
        if (data_length > (UINT)packet_size)
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d905      	bls.n	8006bf0 <_nx_ip_checksum_compute+0xce>
        {

            /*lint -e{927} -e{923} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = ((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3);
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	f023 0303 	bic.w	r3, r3, #3
 8006bec:	627b      	str	r3, [r7, #36]	; 0x24
 8006bee:	e006      	b.n	8006bfe <_nx_ip_checksum_compute+0xdc>
        }
        else
        {
#endif /* NX_DISABLE_PACKET_CHAIN */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr + data_length - 3;
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	3b03      	subs	r3, #3
 8006bfc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Set the start address in this packet. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        long_ptr = (ULONG *)current_packet -> nx_packet_prepend_ptr;
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ALIGN_TYPE)long_ptr < end_ptr)
 8006c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d91c      	bls.n	8006c46 <_nx_ip_checksum_compute+0x124>
        {

            /* Calculate the data_length. */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            data_length -= (UINT)(((end_ptr + 3) & (ALIGN_TYPE)(~3llu)) - (ALIGN_TYPE)long_ptr);
 8006c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	3303      	adds	r3, #3
 8006c12:	f023 0303 	bic.w	r3, r3, #3
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	607b      	str	r3, [r7, #4]

            /* Loop to calculate the packet's checksum.  */
            /*lint -e{946} suppress pointer subtraction, since it is necessary. */
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8006c1e:	e00e      	b.n	8006c3e <_nx_ip_checksum_compute+0x11c>
            {
                checksum += (*long_ptr & NX_LOWER_16_MASK);
 8006c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c28:	4413      	add	r3, r2
 8006c2a:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (*long_ptr >> NX_SHIFT_BY_16);
 8006c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	0c1b      	lsrs	r3, r3, #16
 8006c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c34:	4413      	add	r3, r2
 8006c36:	637b      	str	r3, [r7, #52]	; 0x34
                long_ptr++;
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8006c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d8ec      	bhi.n	8006c20 <_nx_ip_checksum_compute+0xfe>
            }
        }
#ifndef NX_DISABLE_PACKET_CHAIN

        /* Determine if we are at the end of the current packet.  */
        if ((data_length > 0) && (current_packet -> nx_packet_next))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d018      	beq.n	8006c7e <_nx_ip_checksum_compute+0x15c>
 8006c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d014      	beq.n	8006c7e <_nx_ip_checksum_compute+0x15c>
        {

            /* Is append_ptr two bytes aligned but not four bytes aligned? */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            if ((((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & 3) == 2)
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f003 0303 	and.w	r3, r3, #3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d10a      	bne.n	8006c76 <_nx_ip_checksum_compute+0x154>
            {

                /* Yes it is. Process the last two bytes in chaining packets. */
                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                short_ptr = (USHORT *)long_ptr;
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	633b      	str	r3, [r7, #48]	; 0x30

                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                checksum += *short_ptr;
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6c:	4413      	add	r3, r2
 8006c6e:	637b      	str	r3, [r7, #52]	; 0x34
                data_length -= 2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3b02      	subs	r3, #2
 8006c74:	607b      	str	r3, [r7, #4]
            }

            /* We have crossed the packet boundary.  Move to the next packet
               structure.  */
            current_packet =  current_packet -> nx_packet_next;
 8006c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c7c:	e001      	b.n	8006c82 <_nx_ip_checksum_compute+0x160>
        }
        else
        {

            /* End the loop.  */
            current_packet = NX_NULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	62bb      	str	r3, [r7, #40]	; 0x28
    while (current_packet)
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1a3      	bne.n	8006bd0 <_nx_ip_checksum_compute+0xae>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if there is only one byte left. */
    if (data_length)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01f      	beq.n	8006cce <_nx_ip_checksum_compute+0x1ac>
    {

        /* Set the short_ptr. */
        short_ptr = (USHORT *)(long_ptr);
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the data length.  */
        if (data_length == 1)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d104      	bne.n	8006ca2 <_nx_ip_checksum_compute+0x180>
        {
            *((UCHAR *)short_ptr + 1) = 0;
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	701a      	strb	r2, [r3, #0]
 8006ca0:	e00f      	b.n	8006cc2 <_nx_ip_checksum_compute+0x1a0>
        }
        else if (data_length == 3)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d10c      	bne.n	8006cc2 <_nx_ip_checksum_compute+0x1a0>
        {
            checksum += *short_ptr;
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	461a      	mov	r2, r3
 8006cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb0:	4413      	add	r3, r2
 8006cb2:	637b      	str	r3, [r7, #52]	; 0x34
            short_ptr++;
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	3302      	adds	r3, #2
 8006cb8:	633b      	str	r3, [r7, #48]	; 0x30

            *((UCHAR *)short_ptr + 1) = 0;
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	701a      	strb	r2, [r3, #0]
        }

        checksum += *short_ptr;
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cca:	4413      	add	r3, r2
 8006ccc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Fold a 4-byte value into a two byte value */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	0c1a      	lsrs	r2, r3, #16
 8006cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	4413      	add	r3, r2
 8006cd8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Do it again in case previous operation generates an overflow */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cdc:	0c1a      	lsrs	r2, r3, #16
 8006cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	4413      	add	r3, r2
 8006ce4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Convert to host byte order. */
    tmp = (USHORT)checksum;
 8006ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce8:	837b      	strh	r3, [r7, #26]
    NX_CHANGE_USHORT_ENDIAN(tmp);
 8006cea:	8b7b      	ldrh	r3, [r7, #26]
 8006cec:	ba5b      	rev16	r3, r3
 8006cee:	837b      	strh	r3, [r7, #26]

    /* Return the computed checksum.  */
    return(tmp);
 8006cf0:	8b7b      	ldrh	r3, [r7, #26]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3738      	adds	r7, #56	; 0x38
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
	...

08006cfc <_nx_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                    NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                    VOID *memory_ptr, ULONG memory_size, UINT priority)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b092      	sub	sp, #72	; 0x48
 8006d00:	af06      	add	r7, sp, #24
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
 8006d08:	603b      	str	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA

NX_IP     *tail_ptr;
UINT       i;
UINT       old_threshold = 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	613b      	str	r3, [r7, #16]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);
#endif /* NX_DISABLE_IPV4 */

    /* Reference the version ID and option words to ensure they are linked in.  */
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8006d0e:	4b8a      	ldr	r3, [pc, #552]	; (8006f38 <_nx_ip_create+0x23c>)
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	4b8a      	ldr	r3, [pc, #552]	; (8006f3c <_nx_ip_create+0x240>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	431a      	orrs	r2, r3
 8006d18:	4b89      	ldr	r3, [pc, #548]	; (8006f40 <_nx_ip_create+0x244>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8006d1e:	4b89      	ldr	r3, [pc, #548]	; (8006f44 <_nx_ip_create+0x248>)
 8006d20:	681b      	ldr	r3, [r3, #0]
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8006d22:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8006d24:	4b88      	ldr	r3, [pc, #544]	; (8006f48 <_nx_ip_create+0x24c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	4a88      	ldr	r2, [pc, #544]	; (8006f4c <_nx_ip_create+0x250>)
 8006d2c:	7812      	ldrb	r2, [r2, #0]
 8006d2e:	4313      	orrs	r3, r2
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <_nx_ip_create+0x3c>
    {

        /* We should never get here!  */
        return(NX_NOT_IMPLEMENTED);
 8006d34:	234a      	movs	r3, #74	; 0x4a
 8006d36:	e0fb      	b.n	8006f30 <_nx_ip_create+0x234>
    }

    /* Initialize the IP control block to zero.  */
    memset((void *)ip_ptr, 0, sizeof(NX_IP));
 8006d38:	f44f 62f9 	mov.w	r2, #1992	; 0x7c8
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f00b faba 	bl	80122b8 <memset>

    /* Configure the primary interface. */
    ip_ptr -> nx_ip_interface[0].nx_interface_valid = 1;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2724 	strb.w	r2, [r3, #1828]	; 0x724

#ifndef NX_DISABLE_IPV4
    /* Save the IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address =   ip_address;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734

    /* Save the network mask.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask =  network_mask;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	f8c3 2738 	str.w	r2, [r3, #1848]	; 0x738

    /* Derive the network bits of this IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network =  ip_address & network_mask;
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	401a      	ands	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_arp_defend_timeout = 0;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
#endif /* !NX_DISABLE_IPV4  */

    /* Setup the link driver address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_link_driver_entry =  ip_link_driver;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d74:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c

    /* Set the device interface name to "PRI". */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[0].nx_interface_name = (CHAR *)"PRI";
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4a75      	ldr	r2, [pc, #468]	; (8006f50 <_nx_ip_create+0x254>)
 8006d7c:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720

    /* Set index of each interface. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8006d80:	2300      	movs	r3, #0
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d84:	e00f      	b.n	8006da6 <_nx_ip_create+0xaa>
    {
        ip_ptr -> nx_ip_interface[i].nx_interface_index = (UCHAR)i;
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	b2d8      	uxtb	r0, r3
 8006d8a:	68f9      	ldr	r1, [r7, #12]
 8006d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	011b      	lsls	r3, r3, #4
 8006d96:	440b      	add	r3, r1
 8006d98:	f203 7327 	addw	r3, r3, #1831	; 0x727
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8006da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da2:	3301      	adds	r3, #1
 8006da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d9ec      	bls.n	8006d86 <_nx_ip_create+0x8a>

#ifndef NX_DISABLE_LOOPBACK_INTERFACE

    /* Set the Loopback interface name. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_name = (CHAR *)"Internal IP Loopback";
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4a69      	ldr	r2, [pc, #420]	; (8006f54 <_nx_ip_create+0x258>)
 8006db0:	f8c3 2770 	str.w	r2, [r3, #1904]	; 0x770


    /* Mark the loopback interface as valid. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_valid = 1;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774

#ifndef NX_DISABLE_IPV4
    /* Set the loopback interface address. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4a66      	ldr	r2, [pc, #408]	; (8006f58 <_nx_ip_create+0x25c>)
 8006dc0:	f8c3 2784 	str.w	r2, [r3, #1924]	; 0x784
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8006dca:	f8c3 2788 	str.w	r2, [r3, #1928]	; 0x788
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network = 0x7F000000;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f04f 42fe 	mov.w	r2, #2130706432	; 0x7f000000
 8006dd4:	f8c3 278c 	str.w	r2, [r3, #1932]	; 0x78c
#endif /* !NX_DISABLE_IPV4  */

    /* Loopback interface is a special case. Therefore no dedicated link driver needed. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_driver_entry = NX_NULL;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 27ac 	str.w	r2, [r3, #1964]	; 0x7ac

    /* Loopback interface does not need IP/MAC address mapping. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_address_mapping_needed = 0;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2775 	strb.w	r2, [r3, #1909]	; 0x775

    /* There is actually no MTU limit for the loopback interface. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_mtu_size = 65535;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dee:	f8c3 2794 	str.w	r2, [r3, #1940]	; 0x794

    /* Mark the loopback interface as LINK UP */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_up = 1;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776

    /* Set all the link capability. */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_capability_flag = (NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM |
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006e00:	f8c3 27b0 	str.w	r2, [r3, #1968]	; 0x7b0
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#endif /* !NX_DISABLE_LOOPBACK_INTERFACE */

    /* Save the supplied IP name.  */
    ip_ptr -> nx_ip_name =  name;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	605a      	str	r2, [r3, #4]

    /* Set the initial IP packet ID.  */
    ip_ptr -> nx_ip_packet_id =  NX_INIT_PACKET_ID;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    /* Setup the default packet pool for this IP instance.  */
    ip_ptr -> nx_ip_default_packet_pool =  default_pool;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e16:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    /* Setup the auxiliary packet pool for this IP instance. By default it pointers to default pool. */
    ip_ptr -> nx_ip_auxiliary_packet_pool = default_pool;
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Create the internal IP protection mutex.  */
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006e20:	2200      	movs	r2, #0
 8006e22:	68b9      	ldr	r1, [r7, #8]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f008 fd71 	bl	800f90c <_tx_mutex_create>

    /* Create the internal IP event flag object.  */
    tx_event_flags_create(&(ip_ptr -> nx_ip_events), name);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006e30:	68b9      	ldr	r1, [r7, #8]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f008 f8f4 	bl	800f020 <_tx_event_flags_create>

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 8006e38:	f009 fb56 	bl	80104e8 <_tx_thread_identify>
 8006e3c:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Disable preemption temporarily.  */
    if (current_thread)
 8006e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d006      	beq.n	8006e52 <_nx_ip_create+0x156>
    {
        tx_thread_preemption_change(current_thread, priority, &old_threshold);
 8006e44:	f107 0310 	add.w	r3, r7, #16
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e4e:	f009 fba5 	bl	801059c <_tx_thread_preemption_change>
    }

    /* Create the internal IP thread for handling more processing intensive
       duties.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_thread_create(&(ip_ptr -> nx_ip_thread), name, _nx_ip_thread_entry, (ULONG)(ALIGN_TYPE)(ip_ptr),
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	9305      	str	r3, [sp, #20]
 8006e5e:	2301      	movs	r3, #1
 8006e60:	9304      	str	r3, [sp, #16]
 8006e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e64:	9303      	str	r3, [sp, #12]
 8006e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e68:	9302      	str	r3, [sp, #8]
 8006e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e6c:	9301      	str	r3, [sp, #4]
 8006e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	4613      	mov	r3, r2
 8006e74:	4a39      	ldr	r2, [pc, #228]	; (8006f5c <_nx_ip_create+0x260>)
 8006e76:	68b9      	ldr	r1, [r7, #8]
 8006e78:	f009 fa40 	bl	80102fc <_tx_thread_create>

    NX_THREAD_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_thread), ip_ptr)

    /* Create the periodic timer for this IP instance.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_periodic_timer), name,
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f503 701b 	add.w	r0, r3, #620	; 0x26c
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	9202      	str	r2, [sp, #8]
 8006e88:	2264      	movs	r2, #100	; 0x64
 8006e8a:	9201      	str	r2, [sp, #4]
 8006e8c:	2264      	movs	r2, #100	; 0x64
 8006e8e:	9200      	str	r2, [sp, #0]
 8006e90:	4a33      	ldr	r2, [pc, #204]	; (8006f60 <_nx_ip_create+0x264>)
 8006e92:	68b9      	ldr	r1, [r7, #8]
 8006e94:	f00a f868 	bl	8010f68 <_tx_timer_create>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_CREATE, ip_ptr, ip_address, network_mask, default_pool, NX_TRACE_IP_EVENTS, 0, 0);

#ifndef NX_DISABLE_IPV4
    /* Install IPv4 packet receive processing function pointer */
    ip_ptr -> nx_ipv4_packet_receive = _nx_ipv4_packet_receive;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4a32      	ldr	r2, [pc, #200]	; (8006f64 <_nx_ip_create+0x268>)
 8006e9c:	f8c3 27c0 	str.w	r2, [r3, #1984]	; 0x7c0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea4:	61fb      	str	r3, [r7, #28]
    return(posture);
 8006ea6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8006ea8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006eaa:	b672      	cpsid	i
    return(int_posture);
 8006eac:	69bb      	ldr	r3, [r7, #24]
#endif

    /* Otherwise, the IP initialization was successful.  Place the
       IP control block on the list of created IP instances.  */
    TX_DISABLE
 8006eae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the IP ID field in the IP control block.  */
    ip_ptr -> nx_ip_id =  NX_IP_ID;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4a2d      	ldr	r2, [pc, #180]	; (8006f68 <_nx_ip_create+0x26c>)
 8006eb4:	601a      	str	r2, [r3, #0]

    /* Place the new IP control block on the list of created IPs.  First,
       check for an empty list.  */
    if (_nx_ip_created_ptr)
 8006eb6:	4b2d      	ldr	r3, [pc, #180]	; (8006f6c <_nx_ip_create+0x270>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d017      	beq.n	8006eee <_nx_ip_create+0x1f2>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_ip_created_ptr -> nx_ip_created_previous;
 8006ebe:	4b2b      	ldr	r3, [pc, #172]	; (8006f6c <_nx_ip_create+0x270>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8006ec6:	623b      	str	r3, [r7, #32]

        /* Place the new IP control block in the list.  */
        _nx_ip_created_ptr -> nx_ip_created_previous =  ip_ptr;
 8006ec8:	4b28      	ldr	r3, [pc, #160]	; (8006f6c <_nx_ip_create+0x270>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
        tail_ptr -> nx_ip_created_next =  ip_ptr;
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710

        /* Setup this IP's created links.  */
        ip_ptr -> nx_ip_created_previous =  tail_ptr;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6a3a      	ldr	r2, [r7, #32]
 8006ede:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
        ip_ptr -> nx_ip_created_next =      _nx_ip_created_ptr;
 8006ee2:	4b22      	ldr	r3, [pc, #136]	; (8006f6c <_nx_ip_create+0x270>)
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
 8006eec:	e00a      	b.n	8006f04 <_nx_ip_create+0x208>
    }
    else
    {

        /* The created IP list is empty.  Add IP control block to empty list.  */
        _nx_ip_created_ptr =                ip_ptr;
 8006eee:	4a1f      	ldr	r2, [pc, #124]	; (8006f6c <_nx_ip_create+0x270>)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6013      	str	r3, [r2, #0]
        ip_ptr -> nx_ip_created_next =      ip_ptr;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
        ip_ptr -> nx_ip_created_previous =  ip_ptr;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
    }

    /* Increment the created IP counter.  */
    _nx_ip_created_count++;
 8006f04:	4b1a      	ldr	r3, [pc, #104]	; (8006f70 <_nx_ip_create+0x274>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	4a19      	ldr	r2, [pc, #100]	; (8006f70 <_nx_ip_create+0x274>)
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f383 8810 	msr	PRIMASK, r3
}
 8006f18:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Restore preemption.  */
    if (current_thread)
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d006      	beq.n	8006f2e <_nx_ip_create+0x232>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized in previous tx_thread_preemption_change call. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f107 0210 	add.w	r2, r7, #16
 8006f26:	4619      	mov	r1, r3
 8006f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f2a:	f009 fb37 	bl	801059c <_tx_thread_preemption_change>
    }

    /* Return success to the caller.  */
    return(NX_SUCCESS);
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3730      	adds	r7, #48	; 0x30
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	20008038 	.word	0x20008038
 8006f3c:	2000803c 	.word	0x2000803c
 8006f40:	20008040 	.word	0x20008040
 8006f44:	20008044 	.word	0x20008044
 8006f48:	20008048 	.word	0x20008048
 8006f4c:	20000020 	.word	0x20000020
 8006f50:	08012f48 	.word	0x08012f48
 8006f54:	08012f4c 	.word	0x08012f4c
 8006f58:	7f000001 	.word	0x7f000001
 8006f5c:	0800835d 	.word	0x0800835d
 8006f60:	0800803d 	.word	0x0800803d
 8006f64:	0800891d 	.word	0x0800891d
 8006f68:	49502020 	.word	0x49502020
 8006f6c:	20008028 	.word	0x20008028
 8006f70:	2000802c 	.word	0x2000802c

08006f74 <_nx_ip_deferred_link_status_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_deferred_link_status_process(NX_IP *ip_ptr)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08c      	sub	sp, #48	; 0x30
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]

UINT         i;
NX_IP_DRIVER driver_request;
ULONG        link_up;

    if (ip_ptr -> nx_ip_link_status_change_callback == NX_NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d052      	beq.n	800702c <_nx_ip_deferred_link_status_process+0xb8>

        /* Callback function is not set. */
        return;
    }

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8006f86:	2300      	movs	r3, #0
 8006f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f8a:	e04b      	b.n	8007024 <_nx_ip_deferred_link_status_process+0xb0>
    {
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8006f8c:	6879      	ldr	r1, [r7, #4]
 8006f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f90:	4613      	mov	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	440b      	add	r3, r1
 8006f9a:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d03c      	beq.n	800701e <_nx_ip_deferred_link_status_process+0xaa>
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change))
 8006fa4:	6879      	ldr	r1, [r7, #4]
 8006fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa8:	4613      	mov	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	011b      	lsls	r3, r3, #4
 8006fb0:	440b      	add	r3, r1
 8006fb2:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8006fb6:	781b      	ldrb	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d030      	beq.n	800701e <_nx_ip_deferred_link_status_process+0xaa>
        {

            /* Reset the flag. */
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	440b      	add	r3, r1
 8006fca:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8006fce:	2200      	movs	r2, #0
 8006fd0:	701a      	strb	r2, [r3, #0]

            driver_request.nx_ip_driver_ptr       = ip_ptr;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	627b      	str	r3, [r7, #36]	; 0x24
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
 8006fd6:	230a      	movs	r3, #10
 8006fd8:	60fb      	str	r3, [r7, #12]
            driver_request.nx_ip_driver_interface = &(ip_ptr -> nx_ip_interface[i]);
 8006fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	011b      	lsls	r3, r3, #4
 8006fe4:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	4413      	add	r3, r2
 8006fec:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_return_ptr = &link_up;
 8006fee:	f107 0308 	add.w	r3, r7, #8
 8006ff2:	623b      	str	r3, [r7, #32]

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8006ff4:	6879      	ldr	r1, [r7, #4]
 8006ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4413      	add	r3, r2
 8006ffe:	011b      	lsls	r3, r3, #4
 8007000:	440b      	add	r3, r1
 8007002:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f107 020c 	add.w	r2, r7, #12
 800700c:	4610      	mov	r0, r2
 800700e:	4798      	blx	r3

            /* Invoke the callback function. */
            /*lint -e{644} suppress variable might not be initialized, since "link_up" was initialized in nx_interface_link_driver_entry. */
            ip_ptr -> nx_ip_link_status_change_callback(ip_ptr, i, link_up);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800701e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007020:	3301      	adds	r3, #1
 8007022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0b0      	beq.n	8006f8c <_nx_ip_deferred_link_status_process+0x18>
 800702a:	e000      	b.n	800702e <_nx_ip_deferred_link_status_process+0xba>
        return;
 800702c:	bf00      	nop
        }
    }
}
 800702e:	3730      	adds	r7, #48	; 0x30
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <_nx_ip_dispatch_process>:
/*                                            packet,                     */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT _nx_ip_dispatch_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr, UINT protocol)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
#endif /* FEATURE_NX_IPV6 */
#endif /* NX_IPSEC_ENABLE */


    /* Initialize local variables. */
    drop_packet = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	617b      	str	r3, [r7, #20]
    next_option_offset = (UINT)sizeof(NX_IPV6_HEADER);
    incoming_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
#endif /* FEATURE_NX_IPV6 */

    /* Parse all options in the packet till we're done or an error is encountered. */
    while (!drop_packet)
 8007044:	e09a      	b.n	800717c <_nx_ip_dispatch_process+0x148>

#if defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE)
        /* Set a local variable for convenience. */
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
#endif /* defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE) */
        switch (protocol)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b32      	cmp	r3, #50	; 0x32
 800704a:	d005      	beq.n	8007058 <_nx_ip_dispatch_process+0x24>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b33      	cmp	r3, #51	; 0x33
 8007050:	d104      	bne.n	800705c <_nx_ip_dispatch_process+0x28>
                /* Continue processing the packet if status = NX_IPSEC_PKT_CONT */
            }
#else /* NX_IPSEC_ENABLE */

            /* Drop this packet if IPsec module is not present. */
            drop_packet = 1;
 8007052:	2301      	movs	r3, #1
 8007054:	617b      	str	r3, [r7, #20]
#endif /* NX_IPSEC_ENABLE */

            break;
 8007056:	e07d      	b.n	8007154 <_nx_ip_dispatch_process+0x120>
            }
            break;

#else /* NX_IPSEC_ENABLE */
            /* Drop this packet if IPsec module is not present. */
            return(1);
 8007058:	2301      	movs	r3, #1
 800705a:	e094      	b.n	8007186 <_nx_ip_dispatch_process+0x152>
                    return(0);
                }
            }
#endif /* defined(NX_ENABLE_IP_RAW_PACKET_ALL_STACK) && defined(NX_ENABLE_IP_RAW_PACKET_FILTER) */

            if (protocol == NX_PROTOCOL_TCP)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b06      	cmp	r3, #6
 8007060:	d10f      	bne.n	8007082 <_nx_ip_dispatch_process+0x4e>
                     (incoming_addr -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)))
                {
#endif /* FEATURE_NX_IPV6 */

                    /* Check that the host is enabled for TCP. */
                    if (ip_ptr -> nx_ip_tcp_packet_receive)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007068:	2b00      	cmp	r3, #0
 800706a:	d007      	beq.n	800707c <_nx_ip_dispatch_process+0x48>
                    {

                        /* Dispatch the packet to the TCP packet handler. */
                        (ip_ptr -> nx_ip_tcp_packet_receive)(ip_ptr, packet_ptr);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007072:	68b9      	ldr	r1, [r7, #8]
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	4798      	blx	r3

                        /* No need to free the packet as it is consumed by TCP packet receive.  */
                        return(0);
 8007078:	2300      	movs	r3, #0
 800707a:	e084      	b.n	8007186 <_nx_ip_dispatch_process+0x152>
#ifdef FEATURE_NX_IPV6
                }
#endif /* FEATURE_NX_IPV6 */

                /* TCP is not enabled.  Drop the packet. */
                drop_packet = 1;
 800707c:	2301      	movs	r3, #1
 800707e:	617b      	str	r3, [r7, #20]
#endif /* NX_DISABLE_IP_INFO */


                drop_packet = 1;
            }
            break;
 8007080:	e067      	b.n	8007152 <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007088:	2b04      	cmp	r3, #4
 800708a:	d112      	bne.n	80070b2 <_nx_ip_dispatch_process+0x7e>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d10f      	bne.n	80070b2 <_nx_ip_dispatch_process+0x7e>
                if (ip_ptr -> nx_ip_icmp_packet_receive != NX_NULL)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 8007098:	2b00      	cmp	r3, #0
 800709a:	d007      	beq.n	80070ac <_nx_ip_dispatch_process+0x78>
                    ip_ptr -> nx_ip_icmp_packet_receive(ip_ptr, packet_ptr);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 80070a2:	68b9      	ldr	r1, [r7, #8]
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	4798      	blx	r3
                    return(0);
 80070a8:	2300      	movs	r3, #0
 80070aa:	e06c      	b.n	8007186 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 80070ac:	2301      	movs	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]
 80070b0:	e04f      	b.n	8007152 <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	d112      	bne.n	80070e2 <_nx_ip_dispatch_process+0xae>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d10f      	bne.n	80070e2 <_nx_ip_dispatch_process+0xae>
                if (ip_ptr -> nx_ip_igmp_packet_receive != NX_NULL)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d007      	beq.n	80070dc <_nx_ip_dispatch_process+0xa8>
                    ip_ptr -> nx_ip_igmp_packet_receive(ip_ptr, packet_ptr);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 80070d2:	68b9      	ldr	r1, [r7, #8]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	4798      	blx	r3
                    return(0);
 80070d8:	2300      	movs	r3, #0
 80070da:	e054      	b.n	8007186 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 80070dc:	2301      	movs	r3, #1
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	e037      	b.n	8007152 <_nx_ip_dispatch_process+0x11e>
            else if (protocol == NX_PROTOCOL_UDP)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b11      	cmp	r3, #17
 80070e6:	d10f      	bne.n	8007108 <_nx_ip_dispatch_process+0xd4>
                    if (ip_ptr -> nx_ip_udp_packet_receive)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d007      	beq.n	8007102 <_nx_ip_dispatch_process+0xce>
                        (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80070f8:	68b9      	ldr	r1, [r7, #8]
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	4798      	blx	r3
                        return(0);
 80070fe:	2300      	movs	r3, #0
 8007100:	e041      	b.n	8007186 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 8007102:	2301      	movs	r3, #1
 8007104:	617b      	str	r3, [r7, #20]
            break;
 8007106:	e024      	b.n	8007152 <_nx_ip_dispatch_process+0x11e>
                if (ip_ptr -> nx_ip_raw_ip_processing)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00c      	beq.n	800712c <_nx_ip_dispatch_process+0xf8>
                        if ((ip_ptr -> nx_ip_raw_ip_processing)(ip_ptr, protocol << 16, packet_ptr) == NX_SUCCESS)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	0411      	lsls	r1, r2, #16
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	4798      	blx	r3
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <_nx_ip_dispatch_process+0xf8>
                            return(0);
 8007128:	2300      	movs	r3, #0
 800712a:	e02c      	b.n	8007186 <_nx_ip_dispatch_process+0x152>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007132:	2b04      	cmp	r3, #4
 8007134:	d105      	bne.n	8007142 <_nx_ip_dispatch_process+0x10e>
                    NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PROTOCOL_UNREACH_CODE);
 8007136:	2300      	movs	r3, #0
 8007138:	4a15      	ldr	r2, [pc, #84]	; (8007190 <_nx_ip_dispatch_process+0x15c>)
 800713a:	68b9      	ldr	r1, [r7, #8]
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f7ff fb53 	bl	80067e8 <_nx_icmpv4_send_error_message>
                ip_ptr -> nx_ip_unknown_protocols_received++;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	641a      	str	r2, [r3, #64]	; 0x40
                drop_packet = 1;
 800714c:	2301      	movs	r3, #1
 800714e:	617b      	str	r3, [r7, #20]
            break;
 8007150:	e7ff      	b.n	8007152 <_nx_ip_dispatch_process+0x11e>
 8007152:	bf00      	nop
        }


        /* If the previous header is processed without errors, move on to the next optional
           header. */
        if (!drop_packet)
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d010      	beq.n	800717c <_nx_ip_dispatch_process+0x148>
        else
        {
#ifndef NX_DISABLE_IP_INFO

            /* Decrement the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered--;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	1e5a      	subs	r2, r3, #1
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	621a      	str	r2, [r3, #32]

            /* Decrement the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	1ad2      	subs	r2, r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	625a      	str	r2, [r3, #36]	; 0x24

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	64da      	str	r2, [r3, #76]	; 0x4c
    while (!drop_packet)
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2b00      	cmp	r3, #0
 8007180:	f43f af61 	beq.w	8007046 <_nx_ip_dispatch_process+0x12>
#endif /* NX_DISABLE_IP_INFO */
        }
    }

    return(drop_packet);
 8007184:	697b      	ldr	r3, [r7, #20]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	03020000 	.word	0x03020000

08007194 <_nx_ip_driver_deferred_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_deferred_processing(NX_IP *ip_ptr)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]

    /* Set event flags to wake the IP helper thread, which will in turn
       call the driver with the NX_LINK_DEFERRED_PROCESSING command.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_DRIVER_DEFERRED_EVENT, TX_OR);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80071a2:	2200      	movs	r2, #0
 80071a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80071a8:	4618      	mov	r0, r3
 80071aa:	f008 f871 	bl	800f290 <_tx_event_flags_set>
}
 80071ae:	bf00      	nop
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <_nx_ip_driver_direct_command>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_driver_direct_command(NX_IP *ip_ptr, UINT command, ULONG *return_value_ptr)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	607a      	str	r2, [r7, #4]

    return(_nx_ip_driver_interface_direct_command(ip_ptr, command, 0, return_value_ptr));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	68b9      	ldr	r1, [r7, #8]
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 f805 	bl	80071d8 <_nx_ip_driver_interface_direct_command>
 80071ce:	4603      	mov	r3, r0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <_nx_ip_driver_interface_direct_command>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_driver_interface_direct_command(NX_IP *ip_ptr, UINT command, UINT interface_index, ULONG *return_value_ptr)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08c      	sub	sp, #48	; 0x30
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_DRIVER_DIRECT_COMMAND, ip_ptr, command, 0, 0, NX_TRACE_IP_EVENTS, &trace_event, &trace_timestamp);

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80071ec:	f04f 31ff 	mov.w	r1, #4294967295
 80071f0:	4618      	mov	r0, r3
 80071f2:	f008 fbe5 	bl	800f9c0 <_tx_mutex_get>

    /* Build the driver request structure.  */
    driver_request.nx_ip_driver_ptr =         ip_ptr;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_command =     command;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_return_ptr =  return_value_ptr;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	627b      	str	r3, [r7, #36]	; 0x24
    driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	4613      	mov	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	011b      	lsls	r3, r3, #4
 800720c:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	4413      	add	r3, r2
 8007214:	62fb      	str	r3, [r7, #44]	; 0x2c
    (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 8007216:	68f9      	ldr	r1, [r7, #12]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	4613      	mov	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	011b      	lsls	r3, r3, #4
 8007222:	440b      	add	r3, r1
 8007224:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f107 0210 	add.w	r2, r7, #16
 800722e:	4610      	mov	r0, r2
 8007230:	4798      	blx	r3

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007238:	4618      	mov	r0, r3
 800723a:	f008 fe39 	bl	800feb0 <_tx_mutex_put>
    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_IP_DRIVER_DIRECT_COMMAND, 0, 0, driver_request.nx_ip_driver_status, 0);

    /* Return status to the caller.  */
    /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
    return(driver_request.nx_ip_driver_status);
 800723e:	697b      	ldr	r3, [r7, #20]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3730      	adds	r7, #48	; 0x30
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <_nx_ip_driver_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip, ULONG fragment, ULONG next_hop_address)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b09e      	sub	sp, #120	; 0x78
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_IP_DRIVER driver_request;
UINT         index;
ULONG        network_mask;
ULONG        network;
UCHAR        loopback = NX_FALSE;
 8007256:	2300      	movs	r3, #0
 8007258:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Initialize the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	633b      	str	r3, [r7, #48]	; 0x30
    driver_request.nx_ip_driver_packet =                packet_ptr;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007268:	637b      	str	r3, [r7, #52]	; 0x34
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_SEND;
 800726a:	2300      	movs	r3, #0
 800726c:	61bb      	str	r3, [r7, #24]

    /* Determine if physical mapping is needed by the link driver.  */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_address_mapping_needed)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007272:	795b      	ldrb	r3, [r3, #5]
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 8174 	beq.w	8007562 <_nx_ip_driver_packet_send+0x31a>
    {

        /* Get the network and network mask.*/
        network_mask = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network_mask;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	65fb      	str	r3, [r7, #92]	; 0x5c
        network = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Determine if an IP limited or directed broadcast is requested.  */
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007290:	d00d      	beq.n	80072ae <_nx_ip_driver_packet_send+0x66>
            (((destination_ip & network_mask) == network) &&
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007296:	4013      	ands	r3, r2
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8007298:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800729a:	429a      	cmp	r2, r3
 800729c:	d110      	bne.n	80072c0 <_nx_ip_driver_packet_send+0x78>
             ((destination_ip & ~network_mask) == ~network_mask)))
 800729e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072a0:	43da      	mvns	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	401a      	ands	r2, r3
 80072a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072a8:	43db      	mvns	r3, r3
            (((destination_ip & network_mask) == network) &&
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d108      	bne.n	80072c0 <_nx_ip_driver_packet_send+0x78>
        {

            /* Build the driver request.  */
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 80072ae:	2304      	movs	r3, #4
 80072b0:	61bb      	str	r3, [r7, #24]
            driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 80072b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072b6:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 80072b8:	f04f 33ff 	mov.w	r3, #4294967295
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24
 80072be:	e162      	b.n	8007586 <_nx_ip_driver_packet_send+0x33e>
        }
        /* Determine if we have a loopback address.  */
        else if (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d105      	bne.n	80072d8 <_nx_ip_driver_packet_send+0x90>
        {
            loopback = NX_TRUE;
 80072cc:	2301      	movs	r3, #1
 80072ce:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	637b      	str	r3, [r7, #52]	; 0x34
 80072d6:	e156      	b.n	8007586 <_nx_ip_driver_packet_send+0x33e>
        }
        /* Determine if we have a class D multicast address.  */
        else if ((destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80072de:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80072e2:	d133      	bne.n	800734c <_nx_ip_driver_packet_send+0x104>

            /* Yes, we have a class D multicast address.  Derive the physical mapping from
               the class D address.  */

            /* Determine if the group address has been joined in this IP instance.  */
            index =  0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 80072e8:	e00f      	b.n	800730a <_nx_ip_driver_packet_send+0xc2>
            {

                /* Determine if the destination address matches the requested address.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_join_list == destination_ip)
 80072ea:	68f9      	ldr	r1, [r7, #12]
 80072ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80072ee:	4613      	mov	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	440b      	add	r3, r1
 80072f8:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	429a      	cmp	r2, r3
 8007302:	d006      	beq.n	8007312 <_nx_ip_driver_packet_send+0xca>
                    /* Yes, break the loop!  */
                    break;
                }

                /* Increment the join list index.  */
                index++;
 8007304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007306:	3301      	adds	r3, #1
 8007308:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 800730a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800730c:	2b06      	cmp	r3, #6
 800730e:	d9ec      	bls.n	80072ea <_nx_ip_driver_packet_send+0xa2>
 8007310:	e000      	b.n	8007314 <_nx_ip_driver_packet_send+0xcc>
                    break;
 8007312:	bf00      	nop
            }

            /* Determine if the group was joined by this IP instance.  */
            if (index < NX_MAX_MULTICAST_GROUPS)
 8007314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007316:	2b06      	cmp	r3, #6
 8007318:	d80e      	bhi.n	8007338 <_nx_ip_driver_packet_send+0xf0>
            {

                /* Determine if the group has loopback enabled.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_loopback_enable)
 800731a:	68f9      	ldr	r1, [r7, #12]
 800731c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	440b      	add	r3, r1
 8007328:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <_nx_ip_driver_packet_send+0xf0>
                {
                    loopback = NX_TRUE;
 8007332:	2301      	movs	r3, #1
 8007334:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                }
            }

            /* Build the driver request. Derive the physical mapping from
               the class D address.  */
            driver_request.nx_ip_driver_physical_address_msw =  NX_IP_MULTICAST_UPPER;
 8007338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800733c:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  NX_IP_MULTICAST_LOWER | (destination_ip & NX_IP_MULTICAST_MASK);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007344:	f043 43bc 	orr.w	r3, r3, #1577058304	; 0x5e000000
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
 800734a:	e11c      	b.n	8007586 <_nx_ip_driver_packet_send+0x33e>

            NX_PARAMETER_NOT_USED(fragment);
            /* Look into the ARP Routing Table to derive the physical address.  */

            /* If we get here, the packet destination is a unicast address.  */
            destination_ip = next_hop_address;
 800734c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007350:	607b      	str	r3, [r7, #4]

            /* Calculate the hash index for the destination IP address.  */
            index =  (UINT)((destination_ip + (destination_ip >> 8)) & NX_ARP_TABLE_MASK);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	0a1a      	lsrs	r2, r3, #8
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4413      	add	r3, r2
 800735a:	f003 031f 	and.w	r3, r3, #31
 800735e:	677b      	str	r3, [r7, #116]	; 0x74

            /* Determine if there is an entry for this IP address.  */
            arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007364:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8007368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736c:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Loop to look for an ARP match.  */
            while (arp_ptr)
 800736e:	e013      	b.n	8007398 <_nx_ip_driver_packet_send+0x150>
            {

                /* Determine if this arp entry matches the destination IP address.  */
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 8007370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	429a      	cmp	r2, r3
 8007378:	d012      	beq.n	80073a0 <_nx_ip_driver_packet_send+0x158>
                    /* Yes, we found a match.  Get out of the loop!  */
                    break;
                }

                /* Move to the next active ARP entry.  */
                arp_ptr =  arp_ptr -> nx_arp_active_next;
 800737a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Determine if we are at the end of the ARP list.  */
                if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007384:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8007388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800738e:	429a      	cmp	r2, r3
 8007390:	d102      	bne.n	8007398 <_nx_ip_driver_packet_send+0x150>
                {
                    /* Clear the ARP pointer.  */
                    arp_ptr =  NX_NULL;
 8007392:	2300      	movs	r3, #0
 8007394:	66fb      	str	r3, [r7, #108]	; 0x6c
                    break;
 8007396:	e004      	b.n	80073a2 <_nx_ip_driver_packet_send+0x15a>
            while (arp_ptr)
 8007398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e8      	bne.n	8007370 <_nx_ip_driver_packet_send+0x128>
 800739e:	e000      	b.n	80073a2 <_nx_ip_driver_packet_send+0x15a>
                    break;
 80073a0:	bf00      	nop
                }
            }

            /* Determine if we actually found a matching and effective ARP entry.  */
            if ((arp_ptr) && (arp_ptr -> nx_arp_physical_address_msw | arp_ptr -> nx_arp_physical_address_lsw))
 80073a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d022      	beq.n	80073ee <_nx_ip_driver_packet_send+0x1a6>
 80073a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b0:	4313      	orrs	r3, r2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d01b      	beq.n	80073ee <_nx_ip_driver_packet_send+0x1a6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80073b6:	f3ef 8310 	mrs	r3, PRIMASK
 80073ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 80073bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 80073be:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 80073c0:	b672      	cpsid	i
    return(int_posture);
 80073c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
            {

                /* Disable interrupts temporarily.  */
                TX_DISABLE
 80073c4:	657b      	str	r3, [r7, #84]	; 0x54

                /* Yes, we have a physical mapping.  Copy the physical address into the driver
                   request structure.  */
                driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 80073c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	623b      	str	r3, [r7, #32]
                driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 80073cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d0:	627b      	str	r3, [r7, #36]	; 0x24

                /* Move this ARP entry to the head of the list.  */
                ip_ptr -> nx_ip_arp_table[index] =  arp_ptr;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80073d6:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 80073da:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80073dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80073e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073e2:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80073e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e6:	f383 8810 	msr	PRIMASK, r3
}
 80073ea:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE
 80073ec:	e0cb      	b.n	8007586 <_nx_ip_driver_packet_send+0x33e>
            }
            else
            {

                /* Determine if fragmentation is needed before queue the packet on the ARP waiting queue.  */
                if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d910      	bls.n	800741e <_nx_ip_driver_packet_send+0x1d6>
                {

#ifndef NX_DISABLE_FRAGMENTATION
                    /* Check the DF bit flag.  */
                    if ((ip_ptr -> nx_ip_fragment_processing == NX_NULL) || (fragment != NX_FRAGMENT_OKAY))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <_nx_ip_driver_packet_send+0x1c4>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d008      	beq.n	800741e <_nx_ip_driver_packet_send+0x1d6>
                    {

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	655a      	str	r2, [r3, #84]	; 0x54
#endif
                        /* Just release the packet.  */
                        _nx_packet_transmit_release(packet_ptr);
 8007416:	68b8      	ldr	r0, [r7, #8]
 8007418:	f002 f936 	bl	8009688 <_nx_packet_transmit_release>

                        /* Return... nothing more can be done!  */
                        return;
 800741c:	e132      	b.n	8007684 <_nx_ip_driver_packet_send+0x43c>
                    }
                }

                /* Determine if we actually found a matching ARP entry.  */
                if (arp_ptr)
 800741e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007420:	2b00      	cmp	r3, #0
 8007422:	d052      	beq.n	80074ca <_nx_ip_driver_packet_send+0x282>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007424:	f3ef 8310 	mrs	r3, PRIMASK
 8007428:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 800742a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    int_posture = __get_interrupt_posture();
 800742c:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSID i" : : : "memory");
 800742e:	b672      	cpsid	i
    return(int_posture);
 8007430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                {

                    /* Yes, we have an existing ARP mapping entry.  */

                    /* Disable interrupts temporarily.  */
                    TX_DISABLE
 8007432:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Ensure the current packet's queue next pointer to NULL.  */
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2200      	movs	r2, #0
 8007438:	61da      	str	r2, [r3, #28]

                    /* Determine if the queue is empty.  */
                    if (arp_ptr -> nx_arp_packets_waiting == NX_NULL)
 800743a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	2b00      	cmp	r3, #0
 8007440:	d109      	bne.n	8007456 <_nx_ip_driver_packet_send+0x20e>
                    {

                        /* Yes, we have an empty ARP packet queue.  Simply place the
                           packet at the head of the list.  */
                        arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 8007442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	631a      	str	r2, [r3, #48]	; 0x30
 8007448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800744a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800744c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800744e:	f383 8810 	msr	PRIMASK, r3
}
 8007452:	bf00      	nop
                    /* Call ARP send to send an ARP request.  */
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
                }

                /* Just return!  */
                return;
 8007454:	e115      	b.n	8007682 <_nx_ip_driver_packet_send+0x43a>
                        last_packet =  arp_ptr -> nx_arp_packets_waiting;
 8007456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	66bb      	str	r3, [r7, #104]	; 0x68
                        queued_count = 1;
 800745c:	2301      	movs	r3, #1
 800745e:	663b      	str	r3, [r7, #96]	; 0x60
                        while (last_packet -> nx_packet_queue_next)
 8007460:	e005      	b.n	800746e <_nx_ip_driver_packet_send+0x226>
                            queued_count++;
 8007462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007464:	3301      	adds	r3, #1
 8007466:	663b      	str	r3, [r7, #96]	; 0x60
                            last_packet =  last_packet -> nx_packet_queue_next;
 8007468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	66bb      	str	r3, [r7, #104]	; 0x68
                        while (last_packet -> nx_packet_queue_next)
 800746e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1f5      	bne.n	8007462 <_nx_ip_driver_packet_send+0x21a>
                        last_packet -> nx_packet_queue_next =  packet_ptr;
 8007476:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	61da      	str	r2, [r3, #28]
                        remove_packet =  NX_NULL;
 800747c:	2300      	movs	r3, #0
 800747e:	667b      	str	r3, [r7, #100]	; 0x64
                        if (queued_count >= NX_ARP_MAX_QUEUE_DEPTH)
 8007480:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007482:	2b03      	cmp	r3, #3
 8007484:	d913      	bls.n	80074ae <_nx_ip_driver_packet_send+0x266>
                            remove_packet =  arp_ptr -> nx_arp_packets_waiting;
 8007486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748a:	667b      	str	r3, [r7, #100]	; 0x64
                            arp_ptr -> nx_arp_packets_waiting =  remove_packet -> nx_packet_queue_next;
 800748c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800748e:	69da      	ldr	r2, [r3, #28]
 8007490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007492:	631a      	str	r2, [r3, #48]	; 0x30
                            remove_packet -> nx_packet_queue_next =  NX_NULL;
 8007494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007496:	2200      	movs	r2, #0
 8007498:	61da      	str	r2, [r3, #28]
                            ip_ptr -> nx_ip_transmit_resource_errors++;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	645a      	str	r2, [r3, #68]	; 0x44
                            ip_ptr -> nx_ip_send_packets_dropped++;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	655a      	str	r2, [r3, #84]	; 0x54
 80074ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074b0:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	f383 8810 	msr	PRIMASK, r3
}
 80074b8:	bf00      	nop
                        if (remove_packet)
 80074ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 80e0 	beq.w	8007682 <_nx_ip_driver_packet_send+0x43a>
                            _nx_packet_transmit_release(remove_packet);
 80074c2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80074c4:	f002 f8e0 	bl	8009688 <_nx_packet_transmit_release>
                return;
 80074c8:	e0db      	b.n	8007682 <_nx_ip_driver_packet_send+0x43a>
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00e      	beq.n	80074f2 <_nx_ip_driver_packet_send+0x2aa>
                        ((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 80074da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80074dc:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 80074e0:	0092      	lsls	r2, r2, #2
 80074e2:	68f9      	ldr	r1, [r7, #12]
 80074e4:	4411      	add	r1, r2
 80074e6:	2200      	movs	r2, #0
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	4798      	blx	r3
 80074ec:	4603      	mov	r3, r0
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00d      	beq.n	800750e <_nx_ip_driver_packet_send+0x2c6>
                        ip_ptr -> nx_ip_transmit_resource_errors++;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	645a      	str	r2, [r3, #68]	; 0x44
                        ip_ptr -> nx_ip_send_packets_dropped++;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	655a      	str	r2, [r3, #84]	; 0x54
                        _nx_packet_transmit_release(packet_ptr);
 8007506:	68b8      	ldr	r0, [r7, #8]
 8007508:	f002 f8be 	bl	8009688 <_nx_packet_transmit_release>
                        return;
 800750c:	e0ba      	b.n	8007684 <_nx_ip_driver_packet_send+0x43c>
                    arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007512:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8007516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	66fb      	str	r3, [r7, #108]	; 0x6c
                    arp_ptr -> nx_arp_ip_address =            destination_ip;
 800751e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	621a      	str	r2, [r3, #32]
                    arp_ptr -> nx_arp_physical_address_msw =  0;
 8007524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007526:	2200      	movs	r2, #0
 8007528:	625a      	str	r2, [r3, #36]	; 0x24
                    arp_ptr -> nx_arp_physical_address_lsw =  0;
 800752a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800752c:	2200      	movs	r2, #0
 800752e:	629a      	str	r2, [r3, #40]	; 0x28
                    arp_ptr -> nx_arp_entry_next_update =     NX_ARP_UPDATE_RATE;
 8007530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007532:	220a      	movs	r2, #10
 8007534:	605a      	str	r2, [r3, #4]
                    arp_ptr -> nx_arp_retries =               0;
 8007536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007538:	2200      	movs	r2, #0
 800753a:	609a      	str	r2, [r3, #8]
                    arp_ptr -> nx_arp_ip_interface =          packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007542:	62da      	str	r2, [r3, #44]	; 0x2c
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2200      	movs	r2, #0
 8007548:	61da      	str	r2, [r3, #28]
                    arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 800754a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	631a      	str	r2, [r3, #48]	; 0x30
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	4798      	blx	r3
                return;
 8007560:	e08f      	b.n	8007682 <_nx_ip_driver_packet_send+0x43a>
    {

        /* This IP instance does not require any IP-to-physical mapping.  */

        /* Determine if we have a loopback address.  */
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007568:	d302      	bcc.n	8007570 <_nx_ip_driver_packet_send+0x328>
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 800756a:	687b      	ldr	r3, [r7, #4]
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800756c:	2b00      	cmp	r3, #0
 800756e:	da05      	bge.n	800757c <_nx_ip_driver_packet_send+0x334>
            (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address))
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007574:	695b      	ldr	r3, [r3, #20]
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	429a      	cmp	r2, r3
 800757a:	d104      	bne.n	8007586 <_nx_ip_driver_packet_send+0x33e>
        {

            /* Yes, we have an internal loopback address.  */
            loopback = NX_TRUE;
 800757c:	2301      	movs	r3, #1
 800757e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 8007582:	2300      	movs	r3, #0
 8007584:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Check whether the packet should be loop back. */
    if (loopback == NX_TRUE)
 8007586:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800758a:	2b01      	cmp	r3, #1
 800758c:	d131      	bne.n	80075f2 <_nx_ip_driver_packet_send+0x3aa>
    {

        /* Copy the packet so it can be enqueued properly by the receive
           processing.  */
        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8007594:	f107 0114 	add.w	r1, r7, #20
 8007598:	2300      	movs	r3, #0
 800759a:	68b8      	ldr	r0, [r7, #8]
 800759c:	f001 fcea 	bl	8008f74 <_nx_packet_copy>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d11b      	bne.n	80075de <_nx_ip_driver_packet_send+0x396>

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

            /* Compute checksum for upper layer protocol. */
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            if (packet_copy -> nx_packet_interface_capability_flag)
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <_nx_ip_driver_packet_send+0x36e>
            {
                _nx_ip_packet_checksum_compute(packet_copy);
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 facf 	bl	8007b54 <_nx_ip_packet_checksum_compute>
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	699a      	ldr	r2, [r3, #24]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	4413      	add	r3, r2
 80075ca:	f1a3 0214 	sub.w	r2, r3, #20
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	619a      	str	r2, [r3, #24]
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_copy);

            /* Send the packet to this IP's receive processing like it came in from the
               driver.  */
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	4619      	mov	r1, r3
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 fc48 	bl	8007e6c <_nx_ip_packet_deferred_receive>
 80075dc:	e009      	b.n	80075f2 <_nx_ip_driver_packet_send+0x3aa>
#ifndef NX_DISABLE_IP_INFO
        else
        {

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Increment the IP transmit resource error count.  */
            ip_ptr -> nx_ip_transmit_resource_errors++;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	645a      	str	r2, [r3, #68]	; 0x44
        }
#endif
    }

    /* Check whether the packet should be sent through driver. */
    if (driver_request.nx_ip_driver_interface)
 80075f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d040      	beq.n	800767a <_nx_ip_driver_packet_send+0x432>
    {

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007602:	429a      	cmp	r2, r3
 8007604:	d919      	bls.n	800763a <_nx_ip_driver_packet_send+0x3f2>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Check the DF bit flag.  */
            if ((ip_ptr -> nx_ip_fragment_processing) && (fragment != NX_DONT_FRAGMENT))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <_nx_ip_driver_packet_send+0x3e0>
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007616:	d007      	beq.n	8007628 <_nx_ip_driver_packet_send+0x3e0>
            {

                /* Fragmentation is needed, call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800761e:	f107 0218 	add.w	r2, r7, #24
 8007622:	4610      	mov	r0, r2
 8007624:	4798      	blx	r3
                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
            }

            /* In either case, this packet send is complete, just return.  */
            return;
 8007626:	e02d      	b.n	8007684 <_nx_ip_driver_packet_send+0x43c>
                ip_ptr -> nx_ip_send_packets_dropped++;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	655a      	str	r2, [r3, #84]	; 0x54
                _nx_packet_transmit_release(packet_ptr);
 8007632:	68b8      	ldr	r0, [r7, #8]
 8007634:	f002 f828 	bl	8009688 <_nx_packet_transmit_release>
            return;
 8007638:	e024      	b.n	8007684 <_nx_ip_driver_packet_send+0x43c>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packet sent count.  */
        ip_ptr -> nx_ip_total_packets_sent++;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	615a      	str	r2, [r3, #20]

        /* Increment the IP bytes sent count.  */
        ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	699a      	ldr	r2, [r3, #24]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	4413      	add	r3, r2
 800764e:	f1a3 0214 	sub.w	r2, r3, #20
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	619a      	str	r2, [r3, #24]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Driver entry must not be NULL. */
        NX_ASSERT(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry != NX_NULL);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765c:	2b00      	cmp	r3, #0
 800765e:	d104      	bne.n	800766a <_nx_ip_driver_packet_send+0x422>
 8007660:	f04f 30ff 	mov.w	r0, #4294967295
 8007664:	f009 f920 	bl	80108a8 <_tx_thread_sleep>
 8007668:	e7fa      	b.n	8007660 <_nx_ip_driver_packet_send+0x418>

        /* Broadcast packet.  */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007670:	f107 0218 	add.w	r2, r7, #24
 8007674:	4610      	mov	r0, r2
 8007676:	4798      	blx	r3
 8007678:	e004      	b.n	8007684 <_nx_ip_driver_packet_send+0x43c>
    }
    else
    {

        /* Release the transmit packet.  */
        _nx_packet_transmit_release(packet_ptr);
 800767a:	68b8      	ldr	r0, [r7, #8]
 800767c:	f002 f804 	bl	8009688 <_nx_packet_transmit_release>
 8007680:	e000      	b.n	8007684 <_nx_ip_driver_packet_send+0x43c>
                return;
 8007682:	bf00      	nop
    }
}
 8007684:	3778      	adds	r7, #120	; 0x78
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <_nx_ip_fast_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_ip_fast_periodic_timer_entry(ULONG ip_address)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_FAST_EVENT, TX_OR);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800769c:	2200      	movs	r2, #0
 800769e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076a2:	4618      	mov	r0, r3
 80076a4:	f007 fdf4 	bl	800f290 <_tx_event_flags_set>
}
 80076a8:	bf00      	nop
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <_nx_ip_fast_periodic_timer_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_fast_periodic_timer_create(NX_IP *ip_ptr)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b088      	sub	sp, #32
 80076b4:	af04      	add	r7, sp, #16
 80076b6:	6078      	str	r0, [r7, #4]

ULONG _nx_ip_fast_timer_rate;

    if (ip_ptr -> nx_ip_fast_periodic_timer_created)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d116      	bne.n	80076f0 <_nx_ip_fast_periodic_timer_create+0x40>
    {
        return;
    }

    _nx_ip_fast_timer_rate =  (NX_IP_PERIODIC_RATE + (NX_IP_FAST_TIMER_RATE - 1)) / NX_IP_FAST_TIMER_RATE;
 80076c2:	230a      	movs	r3, #10
 80076c4:	60fb      	str	r3, [r7, #12]

    /* Create the fast TCP timer.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr -> nx_ip_name,
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f203 6024 	addw	r0, r3, #1572	; 0x624
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6859      	ldr	r1, [r3, #4]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	2301      	movs	r3, #1
 80076d4:	9302      	str	r3, [sp, #8]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	4613      	mov	r3, r2
 80076e0:	4a05      	ldr	r2, [pc, #20]	; (80076f8 <_nx_ip_fast_periodic_timer_create+0x48>)
 80076e2:	f009 fc41 	bl	8010f68 <_tx_timer_create>
                    _nx_ip_fast_timer_rate, _nx_ip_fast_timer_rate, TX_AUTO_ACTIVATE);

    NX_TIMER_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr)

    /* Set the flag to indicate that the fast timer has been created. */
    ip_ptr -> nx_ip_fast_periodic_timer_created = 1;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
 80076ee:	e000      	b.n	80076f2 <_nx_ip_fast_periodic_timer_create+0x42>
        return;
 80076f0:	bf00      	nop
}
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	0800768b 	.word	0x0800768b

080076fc <_nx_ip_header_add>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_header_add(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG source_ip, ULONG destination_ip,
                        ULONG type_of_service, ULONG time_to_live,  ULONG protocol, ULONG fragment)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08c      	sub	sp, #48	; 0x30
 8007700:	af02      	add	r7, sp, #8
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	603b      	str	r3, [r7, #0]
ULONG           router_alert = 0;
 800770a:	2300      	movs	r3, #0
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
NX_IPV4_HEADER *ip_header_ptr;
ULONG           checksum;
#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT            compute_checksum = 1;
 800770e:	2301      	movs	r3, #1
 8007710:	623b      	str	r3, [r7, #32]
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
ULONG           val;

#ifndef NX_DISABLE_IGMPV2
    /* Check IGMPv2 protocol. */
    if ((protocol == NX_IP_IGMP) && (ip_ptr -> nx_ip_igmp_router_version == NX_IGMP_HOST_VERSION_2))
 8007712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007714:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007718:	d106      	bne.n	8007728 <_nx_ip_header_add+0x2c>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8007720:	2b02      	cmp	r3, #2
 8007722:	d101      	bne.n	8007728 <_nx_ip_header_add+0x2c>
    {
        router_alert = 4;
 8007724:	2304      	movs	r3, #4
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	689a      	ldr	r2, [r3, #8]
 800772c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800772e:	f06f 0313 	mvn.w	r3, #19
 8007732:	1a5b      	subs	r3, r3, r1
 8007734:	441a      	add	r2, r3
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	4413      	add	r3, r2
 8007742:	f103 0214 	add.w	r2, r3, #20
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	625a      	str	r2, [r3, #36]	; 0x24

    /* Assert prepend pointer is no less than data start pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	429a      	cmp	r2, r3
 8007754:	d204      	bcs.n	8007760 <_nx_ip_header_add+0x64>
 8007756:	f04f 30ff 	mov.w	r0, #4294967295
 800775a:	f009 f8a5 	bl	80108a8 <_tx_thread_sleep>
 800775e:	e7fa      	b.n	8007756 <_nx_ip_header_add+0x5a>

    /* Setup the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	61fb      	str	r3, [r7, #28]
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	689a      	ldr	r2, [r3, #8]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	635a      	str	r2, [r3, #52]	; 0x34
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
                                                       sizeof(NX_IPV4_HEADER) + router_alert);
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	b2db      	uxtb	r3, r3
 8007778:	4413      	add	r3, r2
 800777a:	b2db      	uxtb	r3, r3
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 800777c:	3314      	adds	r3, #20
 800777e:	b2da      	uxtb	r2, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

    /* Determine if this is an identical copy for TCP retransmission.
       RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800778c:	2b01      	cmp	r3, #1
 800778e:	d101      	bne.n	8007794 <_nx_ip_header_add+0x98>
    {

        /* Yes, this an identical copy for TCP retransmission.
           The IP header has been added, return.  */
        return(NX_SUCCESS);
 8007790:	2300      	movs	r3, #0
 8007792:	e089      	b.n	80078a8 <_nx_ip_header_add+0x1ac>
    }

    /* Build the IP header.  */

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	2b00      	cmp	r3, #0
 8007798:	d009      	beq.n	80077ae <_nx_ip_header_add+0xb2>

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
                                                        (NX_IP_HEADER_LENGTH_ENCODE_6 << 24) |
                                                        type_of_service |
                                                        (0xFFFF & packet_ptr -> nx_packet_length));
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	b29a      	uxth	r2, r3
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
 80077a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a2:	4313      	orrs	r3, r2
 80077a4:	f043 428c 	orr.w	r2, r3, #1174405120	; 0x46000000
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	e008      	b.n	80077c0 <_nx_ip_header_add+0xc4>
    else
#endif
    {

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b6:	4313      	orrs	r3, r2
 80077b8:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	601a      	str	r2, [r3, #0]
    }

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80077c6:	1c59      	adds	r1, r3, #1
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	f8c2 1134 	str.w	r1, [r2, #308]	; 0x134
 80077ce:	041a      	lsls	r2, r3, #16
 80077d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d2:	431a      	orrs	r2, r3
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 80077d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077da:	061a      	lsls	r2, r3, #24
 80077dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077de:	431a      	orrs	r2, r3
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  source_ip;
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  destination_ip;
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d004      	beq.n	8007800 <_nx_ip_header_add+0x104>
    {

        /* Append Router Alert Option. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))) = (NX_IP_OPTION_COPY_FLAG |
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	3314      	adds	r3, #20
 80077fc:	4a2c      	ldr	r2, [pc, #176]	; (80078b0 <_nx_ip_header_add+0x1b4>)
 80077fe:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	ba1a      	rev	r2, r3
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	ba1a      	rev	r2, r3
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	ba1a      	rev	r2, r3
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	ba1a      	rev	r2, r3
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	ba1a      	rev	r2, r3
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	611a      	str	r2, [r3, #16]
#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	2b00      	cmp	r3, #0
 8007836:	d008      	beq.n	800784a <_nx_ip_header_add+0x14e>
    {

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_CHANGE_ULONG_ENDIAN(*((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))));
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	3314      	adds	r3, #20
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	3314      	adds	r3, #20
 8007846:	ba12      	rev	r2, r2
 8007848:	601a      	str	r2, [r3, #0]

#ifdef NX_DISABLE_IP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_IP_TX_CHECKSUM */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <_nx_ip_header_add+0x160>
    {
        compute_checksum = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	623b      	str	r3, [r7, #32]
    }

#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d01b      	beq.n	800789a <_nx_ip_header_add+0x19e>
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* Length is the size of IP header, including options */
                                           (UINT)(20 + router_alert),
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	f103 0214 	add.w	r2, r3, #20
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8007868:	2300      	movs	r3, #0
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	2300      	movs	r3, #0
 800786e:	2104      	movs	r1, #4
 8007870:	68b8      	ldr	r0, [r7, #8]
 8007872:	f7ff f956 	bl	8006b22 <_nx_ip_checksum_compute>
 8007876:	4603      	mov	r3, r0
 8007878:	61bb      	str	r3, [r7, #24]
                                           /* IPv4 header checksum does not use src/dest addresses */
                                           NULL, NULL);

        val = (ULONG)(~checksum);
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	43db      	mvns	r3, r3
 800787e:	617b      	str	r3, [r7, #20]
        val = val & NX_LOWER_16_MASK;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	b29b      	uxth	r3, r3
 8007884:	617b      	str	r3, [r7, #20]

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	ba1b      	rev	r3, r3
 800788a:	617b      	str	r3, [r7, #20]

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	689a      	ldr	r2, [r3, #8]
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	431a      	orrs	r2, r3
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	609a      	str	r2, [r3, #8]
 8007898:	e005      	b.n	80078a6 <_nx_ip_header_add+0x1aa>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	f043 0201 	orr.w	r2, r3, #1
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Return...  */
    return(NX_SUCCESS);
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3728      	adds	r7, #40	; 0x28
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	94040000 	.word	0x94040000

080078b4 <_nx_ip_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_initialize(VOID)
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0

    /* Initialize the created IP instance variables.  */
    _nx_ip_created_ptr =     NX_NULL;
 80078b8:	4b05      	ldr	r3, [pc, #20]	; (80078d0 <_nx_ip_initialize+0x1c>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	601a      	str	r2, [r3, #0]
    _nx_ip_created_count =   0;
 80078be:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <_nx_ip_initialize+0x20>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	601a      	str	r2, [r3, #0]
}
 80078c4:	bf00      	nop
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	20008028 	.word	0x20008028
 80078d4:	2000802c 	.word	0x2000802c

080078d8 <_nx_ip_interface_status_check>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_status_check(NX_IP *ip_ptr, UINT interface_index, ULONG needed_status,
                                    ULONG *actual_status, ULONG wait_option)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08e      	sub	sp, #56	; 0x38
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
    /* Loop to keep checking for the proper status bits.  */
    for (;;)
    {

        /* Clear the current status.  */
        current_status =  0;
 80078e6:	2300      	movs	r3, #0
 80078e8:	637b      	str	r3, [r7, #52]	; 0x34

        /*  Process according to the status option specified.  */

        if (needed_status & NX_IP_INITIALIZE_DONE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d008      	beq.n	8007906 <_nx_ip_interface_status_check+0x2e>
        {

            /* Check for initialization complete.  */
            if (ip_ptr -> nx_ip_initialize_done)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d003      	beq.n	8007906 <_nx_ip_interface_status_check+0x2e>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_INITIALIZE_DONE;
 80078fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007900:	f043 0301 	orr.w	r3, r3, #1
 8007904:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

#ifndef NX_DISABLE_IPV4
        if (needed_status & NX_IP_ADDRESS_RESOLVED)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f003 0302 	and.w	r3, r3, #2
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00f      	beq.n	8007930 <_nx_ip_interface_status_check+0x58>
        {

            /* Check for a non-zero IP address.  */
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 8007910:	68f9      	ldr	r1, [r7, #12]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	4613      	mov	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	011b      	lsls	r3, r3, #4
 800791c:	440b      	add	r3, r1
 800791e:	f203 7334 	addw	r3, r3, #1844	; 0x734
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <_nx_ip_interface_status_check+0x58>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_ADDRESS_RESOLVED;
 8007928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792a:	f043 0302 	orr.w	r3, r3, #2
 800792e:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_ARP_ENABLED)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f003 0308 	and.w	r3, r3, #8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d008      	beq.n	800794c <_nx_ip_interface_status_check+0x74>
        {

            /* Check for ARP being enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <_nx_ip_interface_status_check+0x74>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_ARP_ENABLED;
 8007944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007946:	f043 0308 	orr.w	r3, r3, #8
 800794a:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_RARP_COMPLETE)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00f      	beq.n	8007976 <_nx_ip_interface_status_check+0x9e>
        {

            /* This is effectively the same as the IP address resolved...  */

            /* Check for a non-zero IP address.  */
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 8007956:	68f9      	ldr	r1, [r7, #12]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	440b      	add	r3, r1
 8007964:	f203 7334 	addw	r3, r3, #1844	; 0x734
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <_nx_ip_interface_status_check+0x9e>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_RARP_COMPLETE;
 800796e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_IGMP_ENABLED)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797c:	2b00      	cmp	r3, #0
 800797e:	d008      	beq.n	8007992 <_nx_ip_interface_status_check+0xba>
        {

            /* Check for IGMP being enabled.  */
            if (ip_ptr -> nx_ip_igmp_packet_receive)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <_nx_ip_interface_status_check+0xba>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_IGMP_ENABLED;
 800798a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007990:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        if (needed_status & NX_IP_LINK_ENABLED)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	d04a      	beq.n	8007a32 <_nx_ip_interface_status_check+0x15a>
        {

            /* Get mutex protection.  */
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80079a2:	f04f 31ff 	mov.w	r1, #4294967295
 80079a6:	4618      	mov	r0, r3
 80079a8:	f008 f80a 	bl	800f9c0 <_tx_mutex_get>

            /* Build the driver request structure.  */
            driver_request.nx_ip_driver_ptr =         ip_ptr;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 80079b0:	230a      	movs	r3, #10
 80079b2:	617b      	str	r3, [r7, #20]
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 80079b4:	f107 0310 	add.w	r3, r7, #16
 80079b8:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	4613      	mov	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	011b      	lsls	r3, r3, #4
 80079c4:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	4413      	add	r3, r2
 80079cc:	633b      	str	r3, [r7, #48]	; 0x30

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_GET_STATUS, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Call link level driver.  */
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 80079ce:	68f9      	ldr	r1, [r7, #12]
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	011b      	lsls	r3, r3, #4
 80079da:	440b      	add	r3, r1
 80079dc:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f107 0214 	add.w	r2, r7, #20
 80079e6:	4610      	mov	r0, r2
 80079e8:	4798      	blx	r3

            /* If the driver does not recognize this keyword, we fall back to reading the IP link status.*/
            /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
            if (driver_request.nx_ip_driver_status != NX_SUCCESS)
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d013      	beq.n	8007a18 <_nx_ip_interface_status_check+0x140>
            {
                if (driver_request.nx_ip_driver_status == NX_UNHANDLED_COMMAND)
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	2b44      	cmp	r3, #68	; 0x44
 80079f4:	d117      	bne.n	8007a26 <_nx_ip_interface_status_check+0x14e>
                {
                    if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_up)
 80079f6:	68f9      	ldr	r1, [r7, #12]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	011b      	lsls	r3, r3, #4
 8007a02:	440b      	add	r3, r1
 8007a04:	f203 7326 	addw	r3, r3, #1830	; 0x726
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00b      	beq.n	8007a26 <_nx_ip_interface_status_check+0x14e>
                    {
                        current_status = current_status | NX_IP_LINK_ENABLED;
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a10:	f043 0304 	orr.w	r3, r3, #4
 8007a14:	637b      	str	r3, [r7, #52]	; 0x34
 8007a16:	e006      	b.n	8007a26 <_nx_ip_interface_status_check+0x14e>
            else
            {

                /* Check for a link up condition.  */
                /*lint -e{644} suppress variable might not be initialized, since "return_value" was initialized in nx_interface_link_driver_entry. */
                if (return_value == NX_TRUE)
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d103      	bne.n	8007a26 <_nx_ip_interface_status_check+0x14e>
                {

                    /* Yes, set the appropriate bit in the current status.  */
                    current_status =  current_status | NX_IP_LINK_ENABLED;
 8007a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a20:	f043 0304 	orr.w	r3, r3, #4
 8007a24:	637b      	str	r3, [r7, #52]	; 0x34
                }
            }

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f008 fa3f 	bl	800feb0 <_tx_mutex_put>
        }

        if (needed_status &  NX_IP_UDP_ENABLED)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f003 0310 	and.w	r3, r3, #16
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d008      	beq.n	8007a4e <_nx_ip_interface_status_check+0x176>
        {

            /* Check for UDP being enabled.  */
            if (ip_ptr -> nx_ip_udp_packet_receive)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d003      	beq.n	8007a4e <_nx_ip_interface_status_check+0x176>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_UDP_ENABLED;
 8007a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a48:	f043 0310 	orr.w	r3, r3, #16
 8007a4c:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_TCP_ENABLED)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f003 0320 	and.w	r3, r3, #32
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d008      	beq.n	8007a6a <_nx_ip_interface_status_check+0x192>
        {

            /* Check for TCP being enabled.  */
            if (ip_ptr -> nx_ip_tcp_packet_receive)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <_nx_ip_interface_status_check+0x192>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_TCP_ENABLED;
 8007a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a64:	f043 0320 	orr.w	r3, r3, #32
 8007a68:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_INTERFACE_LINK_ENABLED)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d04a      	beq.n	8007b0a <_nx_ip_interface_status_check+0x232>
        {

            /* Get mutex protection.  */
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007a7a:	f04f 31ff 	mov.w	r1, #4294967295
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f007 ff9e 	bl	800f9c0 <_tx_mutex_get>

            /* Build the driver request structure.  */
            driver_request.nx_ip_driver_ptr =         ip_ptr;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	62fb      	str	r3, [r7, #44]	; 0x2c
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 8007a88:	230a      	movs	r3, #10
 8007a8a:	617b      	str	r3, [r7, #20]
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 8007a8c:	f107 0310 	add.w	r3, r7, #16
 8007a90:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	4613      	mov	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	011b      	lsls	r3, r3, #4
 8007a9c:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	633b      	str	r3, [r7, #48]	; 0x30

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_GET_STATUS, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Call link level driver.  */
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 8007aa6:	68f9      	ldr	r1, [r7, #12]
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	011b      	lsls	r3, r3, #4
 8007ab2:	440b      	add	r3, r1
 8007ab4:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f107 0214 	add.w	r2, r7, #20
 8007abe:	4610      	mov	r0, r2
 8007ac0:	4798      	blx	r3

            /* If the driver does not recognize this keyword, we fall back to reading the IP link status.*/
            /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
            if (driver_request.nx_ip_driver_status != NX_SUCCESS)
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d013      	beq.n	8007af0 <_nx_ip_interface_status_check+0x218>
            {
                if (driver_request.nx_ip_driver_status == NX_UNHANDLED_COMMAND)
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	2b44      	cmp	r3, #68	; 0x44
 8007acc:	d117      	bne.n	8007afe <_nx_ip_interface_status_check+0x226>
                {
                    if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_up)
 8007ace:	68f9      	ldr	r1, [r7, #12]
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	011b      	lsls	r3, r3, #4
 8007ada:	440b      	add	r3, r1
 8007adc:	f203 7326 	addw	r3, r3, #1830	; 0x726
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00b      	beq.n	8007afe <_nx_ip_interface_status_check+0x226>
                    {
                        current_status = current_status | NX_IP_INTERFACE_LINK_ENABLED;
 8007ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aec:	637b      	str	r3, [r7, #52]	; 0x34
 8007aee:	e006      	b.n	8007afe <_nx_ip_interface_status_check+0x226>
            else
            {

                /* Check for a link up condition.  */
                /*lint -e{644} suppress variable might not be initialized, since "return_value" was initialized in nx_interface_link_driver_entry. */
                if (return_value == NX_TRUE)
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d103      	bne.n	8007afe <_nx_ip_interface_status_check+0x226>
                {

                    /* Yes, set the appropriate bit in the current status.  */
                    current_status =  current_status | NX_IP_INTERFACE_LINK_ENABLED;
 8007af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007afc:	637b      	str	r3, [r7, #52]	; 0x34
                }
            }

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007b04:	4618      	mov	r0, r3
 8007b06:	f008 f9d3 	bl	800feb0 <_tx_mutex_put>
        }

        /* Determine if current status is the same.  If so, break out
           of this polling loop.  */
        if (current_status == needed_status)
 8007b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d00f      	beq.n	8007b32 <_nx_ip_interface_status_check+0x25a>
        {
            break;
        }

        /* Check for suspension request.  */
        if (wait_option)
 8007b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00e      	beq.n	8007b36 <_nx_ip_interface_status_check+0x25e>
        {

            /* Decrease the wait time and sleep.  */
            if (wait_option > NX_IP_STATUS_CHECK_WAIT_TIME)
 8007b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d903      	bls.n	8007b26 <_nx_ip_interface_status_check+0x24e>
            {
                wait_option -= NX_IP_STATUS_CHECK_WAIT_TIME;
 8007b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b20:	3b01      	subs	r3, #1
 8007b22:	643b      	str	r3, [r7, #64]	; 0x40
 8007b24:	e001      	b.n	8007b2a <_nx_ip_interface_status_check+0x252>
            }
            else
            {
                wait_option = 0;
 8007b26:	2300      	movs	r3, #0
 8007b28:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* Sleep for a tick and check again.  */
            tx_thread_sleep(NX_IP_STATUS_CHECK_WAIT_TIME);
 8007b2a:	2001      	movs	r0, #1
 8007b2c:	f008 febc 	bl	80108a8 <_tx_thread_sleep>
        current_status =  0;
 8007b30:	e6d9      	b.n	80078e6 <_nx_ip_interface_status_check+0xe>
            break;
 8007b32:	bf00      	nop
 8007b34:	e000      	b.n	8007b38 <_nx_ip_interface_status_check+0x260>
        }
        else
        {

            /* Get out of the loop.  */
            break;
 8007b36:	bf00      	nop
        }
    }

    /* Place the current status in the return destination.  */
    *actual_status =  current_status;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b3c:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_IP_STATUS_CHECK, 0, 0, current_status, 0);

    /* Determine what status to return.  */
    if (needed_status == current_status)
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d101      	bne.n	8007b4a <_nx_ip_interface_status_check+0x272>
    {

        /* Return a success.  */
        return(NX_SUCCESS);
 8007b46:	2300      	movs	r3, #0
 8007b48:	e000      	b.n	8007b4c <_nx_ip_interface_status_check+0x274>
    }
    else
    {

        /* Return an error.  */
        return(NX_NOT_SUCCESSFUL);
 8007b4a:	2343      	movs	r3, #67	; 0x43
    }
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3738      	adds	r7, #56	; 0x38
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <_nx_ip_packet_checksum_compute>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_checksum_compute(NX_PACKET *packet_ptr)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b098      	sub	sp, #96	; 0x60
 8007b58:	af02      	add	r7, sp, #8
 8007b5a:	6078      	str	r0, [r7, #4]
ULONG             next_protocol;
UCHAR            *org_prepend_ptr;
ULONG             checksum;
ULONG             val;
UCHAR             is_done = NX_FALSE;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
ULONG             ip_header_length;
ULONG             ip_src_addr[4];
ULONG             ip_dst_addr[4];
ULONG             data_length = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Get IP version. */
#ifdef FEATURE_NX_IPV6
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
    {
#endif
        next_protocol = NX_PROTOCOL_IPV4;
 8007b66:	2304      	movs	r3, #4
 8007b68:	657b      	str	r3, [r7, #84]	; 0x54
        next_protocol = NX_PROTOCOL_IPV6;
    }
#endif

    /* Store original prepend_ptr. */
    org_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Loop to process headers. */
    while (!is_done)
 8007b70:	e170      	b.n	8007e54 <_nx_ip_packet_checksum_compute+0x300>
    {
        switch (next_protocol)
 8007b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b74:	3b01      	subs	r3, #1
 8007b76:	2b10      	cmp	r3, #16
 8007b78:	f200 8168 	bhi.w	8007e4c <_nx_ip_packet_checksum_compute+0x2f8>
 8007b7c:	a201      	add	r2, pc, #4	; (adr r2, 8007b84 <_nx_ip_packet_checksum_compute+0x30>)
 8007b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b82:	bf00      	nop
 8007b84:	08007d47 	.word	0x08007d47
 8007b88:	08007da7 	.word	0x08007da7
 8007b8c:	08007e4d 	.word	0x08007e4d
 8007b90:	08007bc9 	.word	0x08007bc9
 8007b94:	08007e4d 	.word	0x08007e4d
 8007b98:	08007c79 	.word	0x08007c79
 8007b9c:	08007e4d 	.word	0x08007e4d
 8007ba0:	08007e4d 	.word	0x08007e4d
 8007ba4:	08007e4d 	.word	0x08007e4d
 8007ba8:	08007e4d 	.word	0x08007e4d
 8007bac:	08007e4d 	.word	0x08007e4d
 8007bb0:	08007e4d 	.word	0x08007e4d
 8007bb4:	08007e4d 	.word	0x08007e4d
 8007bb8:	08007e4d 	.word	0x08007e4d
 8007bbc:	08007e4d 	.word	0x08007e4d
 8007bc0:	08007e4d 	.word	0x08007e4d
 8007bc4:	08007ce3 	.word	0x08007ce3
        {

            /* It's assumed that the IP link driver has positioned the top pointer in the
               packet to the start of the IP address... so that's where we will start.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Pick up the first word in the IP header. */
            val = ip_header_ptr -> nx_ip_header_word_0;
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	637b      	str	r3, [r7, #52]	; 0x34

            /* Convert to host byte order. */
            NX_CHANGE_ULONG_ENDIAN(val);
 8007bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd6:	ba1b      	rev	r3, r3
 8007bd8:	637b      	str	r3, [r7, #52]	; 0x34

            /* Obtain IP header length. */
            ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 8007bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bdc:	0e1b      	lsrs	r3, r3, #24
 8007bde:	f003 030f 	and.w	r3, r3, #15
 8007be2:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check if IPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d01f      	beq.n	8007c30 <_nx_ip_packet_checksum_compute+0xdc>
            {

                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                                   /* length is the size of IP header, including options */
                                                   ip_header_length << 2,
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf2:	009a      	lsls	r2, r3, #2
                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	2104      	movs	r1, #4
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7fe ff90 	bl	8006b22 <_nx_ip_checksum_compute>
 8007c02:	4603      	mov	r3, r0
 8007c04:	647b      	str	r3, [r7, #68]	; 0x44
                                                   /* IPv4 header checksum doesn't care src/dest addresses */
                                                   NULL, NULL);

                val = (ULONG)(~checksum);
 8007c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c08:	43db      	mvns	r3, r3
 8007c0a:	637b      	str	r3, [r7, #52]	; 0x34
                val = val & NX_LOWER_16_MASK;
 8007c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	637b      	str	r3, [r7, #52]	; 0x34

                /* Convert to network byte order. */
                NX_CHANGE_ULONG_ENDIAN(val);
 8007c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c14:	ba1b      	rev	r3, r3
 8007c16:	637b      	str	r3, [r7, #52]	; 0x34

                /* Now store the checksum in the IP header.  */
                ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 8007c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c22:	609a      	str	r2, [r3, #8]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c28:	f023 0201 	bic.w	r2, r3, #1
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	639a      	str	r2, [r3, #56]	; 0x38
            }


            /* Get src and dst addresses. */
            ip_src_addr[0] = ip_header_ptr -> nx_ip_header_source_ip;
 8007c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	61bb      	str	r3, [r7, #24]
            ip_dst_addr[0] = ip_header_ptr -> nx_ip_header_destination_ip;
 8007c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	60bb      	str	r3, [r7, #8]
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	ba1b      	rev	r3, r3
 8007c40:	61bb      	str	r3, [r7, #24]
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	ba1b      	rev	r3, r3
 8007c46:	60bb      	str	r3, [r7, #8]

            /* Get next protocol. */
            val = ip_header_ptr -> nx_ip_header_word_2;
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	637b      	str	r3, [r7, #52]	; 0x34
            NX_CHANGE_ULONG_ENDIAN(val);
 8007c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c50:	ba1b      	rev	r3, r3
 8007c52:	637b      	str	r3, [r7, #52]	; 0x34
            next_protocol = (val >> 16) & 0xFF;
 8007c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c56:	0c1b      	lsrs	r3, r3, #16
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Remove IPv4 header. */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + (ip_header_length << 2);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	441a      	add	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	609a      	str	r2, [r3, #8]
            data_length = packet_ptr -> nx_packet_length - (ip_header_length << 2);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	64fb      	str	r3, [r7, #76]	; 0x4c
            break;
 8007c76:	e0ed      	b.n	8007e54 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_TCP:
        {

            /* Check if TCP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d02a      	beq.n	8007cda <_nx_ip_packet_checksum_compute+0x186>
            {

                /* Calculate the TCP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 8007c84:	f107 0218 	add.w	r2, r7, #24
 8007c88:	f107 0308 	add.w	r3, r7, #8
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c92:	2106      	movs	r1, #6
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7fe ff44 	bl	8006b22 <_nx_ip_checksum_compute>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	647b      	str	r3, [r7, #68]	; 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the TCP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c

                checksum = ~checksum & NX_LOWER_16_MASK;
 8007ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ca6:	43db      	mvns	r3, r3
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	647b      	str	r3, [r7, #68]	; 0x44

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8007cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	ba1a      	rev	r2, r3
 8007cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb4:	611a      	str	r2, [r3, #16]
                tcp_header_ptr -> nx_tcp_header_word_4 |=  (checksum << NX_SHIFT_BY_16);
 8007cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb8:	691a      	ldr	r2, [r3, #16]
 8007cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cbc:	041b      	lsls	r3, r3, #16
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc2:	611a      	str	r2, [r3, #16]
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8007cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	ba1a      	rev	r2, r3
 8007cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ccc:	611a      	str	r2, [r3, #16]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd2:	f023 0204 	bic.w	r2, r3, #4
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007ce0:	e0b8      	b.n	8007e54 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_UDP:
        {

            /* Check if UDP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce6:	f003 0310 	and.w	r3, r3, #16
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d027      	beq.n	8007d3e <_nx_ip_packet_checksum_compute+0x1ea>
            {

                /* Calculate the UDP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_UDP,
 8007cee:	f107 0218 	add.w	r2, r7, #24
 8007cf2:	f107 0308 	add.w	r3, r7, #8
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cfc:	2111      	movs	r1, #17
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7fe ff0f 	bl	8006b22 <_nx_ip_checksum_compute>
 8007d04:	4603      	mov	r3, r0
 8007d06:	647b      	str	r3, [r7, #68]	; 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the UDP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8007d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	ba1a      	rev	r2, r3
 8007d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d16:	605a      	str	r2, [r3, #4]
                udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | (~checksum & NX_LOWER_16_MASK);
 8007d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d1e:	43db      	mvns	r3, r3
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	431a      	orrs	r2, r3
 8007d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d26:	605a      	str	r2, [r3, #4]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8007d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	ba1a      	rev	r2, r3
 8007d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d30:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d36:	f023 0210 	bic.w	r2, r3, #16
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007d44:	e086      	b.n	8007e54 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_ICMP:
        {

            /* Check if ICMPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d025      	beq.n	8007d9e <_nx_ip_packet_checksum_compute+0x24a>
            {

                /* Calculate the ICMPv4 checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 8007d52:	2300      	movs	r3, #0
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	2300      	movs	r3, #0
 8007d58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d5a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7fe fedf 	bl	8006b22 <_nx_ip_checksum_compute>
 8007d64:	4603      	mov	r3, r0
 8007d66:	647b      	str	r3, [r7, #68]	; 0x44
                                                    /* ICMPV4 header checksum doesn't care src/dest addresses */
                                                    NULL, NULL);

                /* Pickup the pointer to the head of the ICMPv4 packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                icmpv4_header_ptr =  (NX_ICMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	ba1a      	rev	r2, r3
 8007d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d76:	601a      	str	r2, [r3, #0]
                icmpv4_header_ptr -> nx_icmp_header_word_0 =  icmpv4_header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d7e:	43db      	mvns	r3, r3
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	431a      	orrs	r2, r3
 8007d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d86:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 8007d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	ba1a      	rev	r2, r3
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	601a      	str	r2, [r3, #0]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d96:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007da4:	e056      	b.n	8007e54 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_IGMP:
        {

            /* Check if IGMP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d048      	beq.n	8007e44 <_nx_ip_packet_checksum_compute+0x2f0>
            {

                /* Pickup the pointer to the head of the IGMP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                igmp_header_ptr =  (NX_IGMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 8007db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	ba1a      	rev	r2, r3
 8007dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc0:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 8007dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	ba1a      	rev	r2, r3
 8007dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dca:	605a      	str	r2, [r3, #4]

                /* Calculate the checksum.  */
                val =       igmp_header_ptr -> nx_igmp_header_word_0;
 8007dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	637b      	str	r3, [r7, #52]	; 0x34
                checksum =  (val >> NX_SHIFT_BY_16);
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd4:	0c1b      	lsrs	r3, r3, #16
 8007dd6:	647b      	str	r3, [r7, #68]	; 0x44
                checksum += (val & NX_LOWER_16_MASK);
 8007dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dde:	4413      	add	r3, r2
 8007de0:	647b      	str	r3, [r7, #68]	; 0x44
                val =      igmp_header_ptr -> nx_igmp_header_word_1;
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (val >> NX_SHIFT_BY_16);
 8007de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dea:	0c1b      	lsrs	r3, r3, #16
 8007dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dee:	4413      	add	r3, r2
 8007df0:	647b      	str	r3, [r7, #68]	; 0x44
                checksum += (val & NX_LOWER_16_MASK);
 8007df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007df8:	4413      	add	r3, r2
 8007dfa:	647b      	str	r3, [r7, #68]	; 0x44

                /* Add in the carry bits into the checksum.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 8007dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dfe:	0c1a      	lsrs	r2, r3, #16
 8007e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	4413      	add	r3, r2
 8007e06:	647b      	str	r3, [r7, #68]	; 0x44

                /* Do it again in case previous operation generates an overflow.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 8007e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e0a:	0c1a      	lsrs	r2, r3, #16
 8007e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	4413      	add	r3, r2
 8007e12:	647b      	str	r3, [r7, #68]	; 0x44

                /* Place the checksum into the first header word.  */
                igmp_header_ptr -> nx_igmp_header_word_0 =  igmp_header_ptr -> nx_igmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 8007e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e1a:	43db      	mvns	r3, r3
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e22:	601a      	str	r2, [r3, #0]

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 8007e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	ba1a      	rev	r2, r3
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2c:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 8007e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	ba1a      	rev	r2, r3
 8007e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e36:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8007e44:	2301      	movs	r3, #1
 8007e46:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007e4a:	e003      	b.n	8007e54 <_nx_ip_packet_checksum_compute+0x300>
        }
#endif

        default:
            /* Unsupported protocol. */
            is_done = NX_TRUE;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007e52:	bf00      	nop
    while (!is_done)
 8007e54:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f43f ae8a 	beq.w	8007b72 <_nx_ip_packet_checksum_compute+0x1e>
        }
    }


    /* Restore origianl prepend_ptr. */
    packet_ptr -> nx_packet_prepend_ptr = org_prepend_ptr;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e62:	609a      	str	r2, [r3, #8]
    return;
 8007e64:	bf00      	nop
}
 8007e66:	3758      	adds	r7, #88	; 0x58
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <_nx_ip_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b088      	sub	sp, #32
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007e76:	f3ef 8310 	mrs	r3, PRIMASK
 8007e7a:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007e7c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007e7e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007e80:	b672      	cpsid	i
    return(int_posture);
 8007e82:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8007e84:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if the deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_deferred_received_packet_head)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d011      	beq.n	8007eb4 <_nx_ip_packet_deferred_receive+0x48>
    {

        /* Not empty, just place the packet at the end of the queue.  */
        (ip_ptr -> nx_ip_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f383 8810 	msr	PRIMASK, r3
}
 8007eb2:	e019      	b.n	8007ee8 <_nx_ip_packet_deferred_receive+0x7c>
    {

        /* Empty deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the deferred processing
           queue.  */
        ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        packet_ptr -> nx_packet_queue_next =             NX_NULL;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	61da      	str	r2, [r3, #28]
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f383 8810 	msr	PRIMASK, r3
}
 8007ed4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the IP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RECEIVE_EVENT, TX_OR);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007edc:	2200      	movs	r2, #0
 8007ede:	2108      	movs	r1, #8
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f007 f9d5 	bl	800f290 <_tx_event_flags_set>
    }
}
 8007ee6:	bf00      	nop
 8007ee8:	bf00      	nop
 8007eea:	3720      	adds	r7, #32
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <_nx_ip_packet_receive>:
/*                                            added new ip filter,        */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
UCHAR version_byte;


#ifndef NX_DISABLE_IP_INFO
    /* Increment the IP packet count.  */
    ip_ptr -> nx_ip_total_packets_received++;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	61da      	str	r2, [r3, #28]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* If packet_ptr -> nx_packet_interface_ptr is not set, stamp the packet with interface[0].
       Legacy Ethernet drivers do not stamp incoming packets. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d104      	bne.n	8007f16 <_nx_ip_packet_receive+0x26>
    {
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[0]);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f503 62e4 	add.w	r2, r3, #1824	; 0x720
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    version_byte =  *(packet_ptr -> nx_packet_prepend_ptr);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	73fb      	strb	r3, [r7, #15]

    /* Check the version number */
    ip_version = (version_byte >> 4);
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	091b      	lsrs	r3, r3, #4
 8007f22:	73bb      	strb	r3, [r7, #14]

    packet_ptr -> nx_packet_ip_version = ip_version;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	7bba      	ldrb	r2, [r7, #14]
 8007f28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* NX_ENABLE_IP_PACKET_FILTER */

#ifndef NX_DISABLE_IPV4

    /* Process the packet according to IP version. */
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	d10b      	bne.n	8007f52 <_nx_ip_packet_receive+0x62>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d006      	beq.n	8007f52 <_nx_ip_packet_receive+0x62>
    {

        /* Call the IPv4 packet handler. */
        (ip_ptr -> nx_ipv4_packet_receive)(ip_ptr, packet_ptr);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	4798      	blx	r3
        return;
 8007f50:	e00d      	b.n	8007f6e <_nx_ip_packet_receive+0x7e>
        not defined.  In this case, the packet is reclaimed. */

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP invalid packet error.  */
    ip_ptr -> nx_ip_invalid_packets++;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment the IP receive packets dropped count.  */
    ip_ptr -> nx_ip_receive_packets_dropped++;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f60:	1c5a      	adds	r2, r3, #1
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

    _nx_packet_release(packet_ptr);
 8007f66:	6838      	ldr	r0, [r7, #0]
 8007f68:	f001 fad6 	bl	8009518 <_nx_packet_release>

    return;
 8007f6c:	bf00      	nop
}
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <_nx_ip_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                         ULONG destination_ip, ULONG type_of_service, ULONG time_to_live,
                         ULONG protocol, ULONG fragment, ULONG next_hop_address)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b088      	sub	sp, #32
 8007f78:	af04      	add	r7, sp, #16
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	603b      	str	r3, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_IP_INFO

    /* Increment the total send requests counter.  */
    ip_ptr -> nx_ip_total_packet_send_requests++;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	1c5a      	adds	r2, r3, #1
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	611a      	str	r2, [r3, #16]
#endif

    /* Make sure the packet interface is set. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d114      	bne.n	8007fbe <_nx_ip_packet_send+0x4a>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_transmit_packets++;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f98:	1c5a      	adds	r2, r3, #1
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

        /* Prepend the IP header to the packet.  First, make room for the IP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f1a3 0214 	sub.w	r2, r3, #20
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	609a      	str	r2, [r3, #8]

        /* Increase the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fae:	f103 0214 	add.w	r2, r3, #20
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Release the packet.  */
        _nx_packet_transmit_release(packet_ptr);
 8007fb6:	68b8      	ldr	r0, [r7, #8]
 8007fb8:	f001 fb66 	bl	8009688 <_nx_packet_transmit_release>

        /* Return... nothing more can be done!  */
        return;
 8007fbc:	e03b      	b.n	8008036 <_nx_ip_packet_send+0xc2>
    if (!is_hw_processed)
#endif /* NX_IPSEC_ENABLE  */
    {

        /* Add the IP Header to the packet.  */
        _nx_ip_header_add(ip_ptr, packet_ptr, packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_address,
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc2:	695a      	ldr	r2, [r3, #20]
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	9303      	str	r3, [sp, #12]
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	9302      	str	r3, [sp, #8]
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	9301      	str	r3, [sp, #4]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68b9      	ldr	r1, [r7, #8]
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f7ff fb8f 	bl	80076fc <_nx_ip_header_add>
    }

#endif

    /* If the next hop address is null, indicates the specified interface is unreached.  */
    if (next_hop_address == 0)
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d120      	bne.n	8008026 <_nx_ip_packet_send+0xb2>
    {

        /* Check whether the forward feature is enabled.  */
        if (ip_ptr -> nx_ip_forward_packet_process)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00b      	beq.n	8008006 <_nx_ip_packet_send+0x92>
        {

            /* Initialize the interface.  */
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	631a      	str	r2, [r3, #48]	; 0x30

            /* Figure out the best interface to send the packet on. */
            _nx_ip_route_find(ip_ptr, destination_ip, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr, &next_hop_address);
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 f82d 	bl	8008060 <_nx_ip_route_find>
        }

        /* Make sure the packet interface and next hop address are set. */
        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        if ((packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL) || (next_hop_address == 0))
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <_nx_ip_packet_send+0xa0>
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	d108      	bne.n	8008026 <_nx_ip_packet_send+0xb2>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_transmit_packets++;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

            /* Release the packet.  */
            _nx_packet_transmit_release(packet_ptr);
 800801e:	68b8      	ldr	r0, [r7, #8]
 8008020:	f001 fb32 	bl	8009688 <_nx_packet_transmit_release>

            /* Return... nothing more can be done!  */
            return;
 8008024:	e007      	b.n	8008036 <_nx_ip_packet_send+0xc2>
        }
    }

    /* Directly send the packet.  */
    _nx_ip_driver_packet_send(ip_ptr, packet_ptr, destination_ip, fragment, next_hop_address);
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	68b9      	ldr	r1, [r7, #8]
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f7ff f909 	bl	8007248 <_nx_ip_driver_packet_send>
}
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <_nx_ip_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_periodic_timer_entry(ULONG ip_address)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_PERIODIC_EVENT, TX_OR);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800804e:	2200      	movs	r2, #0
 8008050:	2101      	movs	r1, #1
 8008052:	4618      	mov	r0, r3
 8008054:	f007 f91c 	bl	800f290 <_tx_event_flags_set>
}
 8008058:	bf00      	nop
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <_nx_ip_route_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _nx_ip_route_find(NX_IP *ip_ptr, ULONG destination_address, NX_INTERFACE **ip_interface_ptr, ULONG *next_hop_address)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	603b      	str	r3, [r7, #0]

NX_INTERFACE *interface_ptr;
ULONG         i;

    /* Initialize the next hop address. */
    *next_hop_address = 0;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2200      	movs	r2, #0
 8008072:	601a      	str	r2, [r3, #0]

    /* Determine if the destination_address is multicast or directed broadcast. */
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800807a:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800807e:	d003      	beq.n	8008088 <_nx_ip_route_find+0x28>
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008086:	d132      	bne.n	80080ee <_nx_ip_route_find+0x8e>
        (destination_address  == NX_IP_LIMITED_BROADCAST))
    {

        *next_hop_address = destination_address;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	601a      	str	r2, [r3, #0]

        /* If the caller did not set the ip_interface value, find a link enabled 
           interface, starting with the primary interface, for transmission.  */
        if (*ip_interface_ptr == NX_NULL)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d122      	bne.n	80080dc <_nx_ip_route_find+0x7c>
        {

            /* Find an interface whose link is up. */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008096:	2300      	movs	r3, #0
 8008098:	617b      	str	r3, [r7, #20]
 800809a:	e01b      	b.n	80080d4 <_nx_ip_route_find+0x74>
            {

                if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up)
 800809c:	68f9      	ldr	r1, [r7, #12]
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	4613      	mov	r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4413      	add	r3, r2
 80080a6:	011b      	lsls	r3, r3, #4
 80080a8:	440b      	add	r3, r1
 80080aa:	f203 7326 	addw	r3, r3, #1830	; 0x726
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00c      	beq.n	80080ce <_nx_ip_route_find+0x6e>
                {
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	4613      	mov	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	011b      	lsls	r3, r3, #4
 80080be:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	441a      	add	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	601a      	str	r2, [r3, #0]
                    return(NX_SUCCESS);
 80080ca:	2300      	movs	r3, #0
 80080cc:	e13d      	b.n	800834a <_nx_ip_route_find+0x2ea>
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	3301      	adds	r3, #1
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d0e0      	beq.n	800809c <_nx_ip_route_find+0x3c>
 80080da:	e006      	b.n	80080ea <_nx_ip_route_find+0x8a>
                }
            }
        }
        /* If the specified interface is up, return success. */
        else if ((*ip_interface_ptr) -> nx_interface_link_up)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	799b      	ldrb	r3, [r3, #6]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <_nx_ip_route_find+0x8a>
        {
            return(NX_SUCCESS);
 80080e6:	2300      	movs	r3, #0
 80080e8:	e12f      	b.n	800834a <_nx_ip_route_find+0x2ea>
        }

        /* No available interface. */
        return(NX_IP_ADDRESS_ERROR);
 80080ea:	2321      	movs	r3, #33	; 0x21
 80080ec:	e12d      	b.n	800834a <_nx_ip_route_find+0x2ea>
    }

    /* Search through the interfaces associated with the IP instance,
       check if the the destination address is one of the local interface addresses. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80080ee:	2300      	movs	r3, #0
 80080f0:	617b      	str	r3, [r7, #20]
 80080f2:	e02a      	b.n	800814a <_nx_ip_route_find+0xea>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4613      	mov	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	011b      	lsls	r3, r3, #4
 80080fe:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	4413      	add	r3, r2
 8008106:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	791b      	ldrb	r3, [r3, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d019      	beq.n	8008144 <_nx_ip_route_find+0xe4>
            (interface_ptr -> nx_interface_link_up) &&
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 8008114:	2b00      	cmp	r3, #0
 8008116:	d015      	beq.n	8008144 <_nx_ip_route_find+0xe4>
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	695b      	ldr	r3, [r3, #20]
            (interface_ptr -> nx_interface_link_up) &&
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	429a      	cmp	r2, r3
 8008120:	d110      	bne.n	8008144 <_nx_ip_route_find+0xe4>
            ((*ip_interface_ptr == NX_NULL) ||
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 8008126:	2b00      	cmp	r3, #0
 8008128:	d004      	beq.n	8008134 <_nx_ip_route_find+0xd4>
             (*ip_interface_ptr == interface_ptr)))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
            ((*ip_interface_ptr == NX_NULL) ||
 800812e:	693a      	ldr	r2, [r7, #16]
 8008130:	429a      	cmp	r2, r3
 8008132:	d107      	bne.n	8008144 <_nx_ip_route_find+0xe4>
        {

            /* Yes, use the entry information for interface and next hop. */
            *ip_interface_ptr = interface_ptr;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	601a      	str	r2, [r3, #0]
            *next_hop_address = destination_address;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 8008140:	2300      	movs	r3, #0
 8008142:	e102      	b.n	800834a <_nx_ip_route_find+0x2ea>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	3301      	adds	r3, #1
 8008148:	617b      	str	r3, [r7, #20]
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0d1      	beq.n	80080f4 <_nx_ip_route_find+0x94>

#endif /* NX_ENABLE_IP_STATIC_ROUTING */

    /* Search through the interfaces associated with the IP instance,
       check if the entry exists. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8008150:	2300      	movs	r3, #0
 8008152:	617b      	str	r3, [r7, #20]
 8008154:	e036      	b.n	80081c4 <_nx_ip_route_find+0x164>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	4613      	mov	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	011b      	lsls	r3, r3, #4
 8008160:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	4413      	add	r3, r2
 8008168:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	791b      	ldrb	r3, [r3, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d025      	beq.n	80081be <_nx_ip_route_find+0x15e>
            (interface_ptr -> nx_interface_link_up) &&
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 8008176:	2b00      	cmp	r3, #0
 8008178:	d021      	beq.n	80081be <_nx_ip_route_find+0x15e>
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	699a      	ldr	r2, [r3, #24]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	401a      	ands	r2, r3
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	69db      	ldr	r3, [r3, #28]
            (interface_ptr -> nx_interface_link_up) &&
 8008186:	429a      	cmp	r2, r3
 8008188:	d119      	bne.n	80081be <_nx_ip_route_find+0x15e>
        {

            /* Yes, use the entry information for interface and next hop. */
            if (*ip_interface_ptr == NX_NULL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d103      	bne.n	800819a <_nx_ip_route_find+0x13a>
            {
                *ip_interface_ptr = interface_ptr;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	e00b      	b.n	80081b2 <_nx_ip_route_find+0x152>
            }
            /* Match loopback interface.  */
            /* Suppress constant value, since "NX_MAX_IP_INTERFACES" can be redefined. */
#if (NX_MAX_IP_INTERFACES == (NX_MAX_PHYSICAL_INTERFACES + 1))
            else if (i == NX_MAX_PHYSICAL_INTERFACES)
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d103      	bne.n	80081a8 <_nx_ip_route_find+0x148>
            {
                *ip_interface_ptr = interface_ptr;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	e004      	b.n	80081b2 <_nx_ip_route_find+0x152>
            }
#endif
            else if (*ip_interface_ptr != interface_ptr)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d104      	bne.n	80081bc <_nx_ip_route_find+0x15c>
            {
                continue;
            }

            *next_hop_address = destination_address;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 80081b8:	2300      	movs	r3, #0
 80081ba:	e0c6      	b.n	800834a <_nx_ip_route_find+0x2ea>
                continue;
 80081bc:	bf00      	nop
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	3301      	adds	r3, #1
 80081c2:	617b      	str	r3, [r7, #20]
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d9c5      	bls.n	8008156 <_nx_ip_route_find+0xf6>
        }
    }

    /* Search the interfaces for IPv4 Link-Local Address according to RFC3927, section2.6.  */
    /* Determine if destination addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if ((destination_address & 0xFFFF0000) == 0xA9FE0000)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	0c1b      	lsrs	r3, r3, #16
 80081ce:	041b      	lsls	r3, r3, #16
 80081d0:	4a61      	ldr	r2, [pc, #388]	; (8008358 <_nx_ip_route_find+0x2f8>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d143      	bne.n	800825e <_nx_ip_route_find+0x1fe>
    {

        /* Yes, check if the interface is set.  */
        if (*ip_interface_ptr)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00e      	beq.n	80081fc <_nx_ip_route_find+0x19c>
        {

            /* Determine if the interface is valid.  */
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	791b      	ldrb	r3, [r3, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d03a      	beq.n	800825e <_nx_ip_route_find+0x1fe>
                ((*ip_interface_ptr) -> nx_interface_link_up))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	799b      	ldrb	r3, [r3, #6]
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d035      	beq.n	800825e <_nx_ip_route_find+0x1fe>
            {

                /* Set the next hop address.  */
                *next_hop_address = destination_address;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 80081f8:	2300      	movs	r3, #0
 80081fa:	e0a6      	b.n	800834a <_nx_ip_route_find+0x2ea>
        }
        else
        {

            /* Search through the interfaces associated with the IP instance, set the inteface as first valid interface.  */
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 80081fc:	2300      	movs	r3, #0
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	e02a      	b.n	8008258 <_nx_ip_route_find+0x1f8>
            {

                /* Check for a valid interface that the address is link-local address.  */
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8008202:	68f9      	ldr	r1, [r7, #12]
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	4613      	mov	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	011b      	lsls	r3, r3, #4
 800820e:	440b      	add	r3, r1
 8008210:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d01b      	beq.n	8008252 <_nx_ip_route_find+0x1f2>
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_up))
 800821a:	68f9      	ldr	r1, [r7, #12]
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	4613      	mov	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	011b      	lsls	r3, r3, #4
 8008226:	440b      	add	r3, r1
 8008228:	f203 7326 	addw	r3, r3, #1830	; 0x726
 800822c:	781b      	ldrb	r3, [r3, #0]
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00f      	beq.n	8008252 <_nx_ip_route_find+0x1f2>
                {

                    /* Yes, use the entry information for interface and next hop. */
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	4613      	mov	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	011b      	lsls	r3, r3, #4
 800823c:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	441a      	add	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	601a      	str	r2, [r3, #0]
                    *next_hop_address = destination_address;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	601a      	str	r2, [r3, #0]

                    return(NX_SUCCESS);
 800824e:	2300      	movs	r3, #0
 8008250:	e07b      	b.n	800834a <_nx_ip_route_find+0x2ea>
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	3301      	adds	r3, #1
 8008256:	617b      	str	r3, [r7, #20]
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d9d1      	bls.n	8008202 <_nx_ip_route_find+0x1a2>
            }
        }
    }

    /* Does the IP instance have a gateway? */
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d02b      	beq.n	80082be <_nx_ip_route_find+0x25e>
        (ip_ptr -> nx_ip_gateway_interface) &&
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	68db      	ldr	r3, [r3, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800826a:	2b00      	cmp	r3, #0
 800826c:	d027      	beq.n	80082be <_nx_ip_route_find+0x25e>
        (ip_ptr -> nx_ip_gateway_interface -> nx_interface_link_up))
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	799b      	ldrb	r3, [r3, #6]
        (ip_ptr -> nx_ip_gateway_interface) &&
 8008274:	2b00      	cmp	r3, #0
 8008276:	d022      	beq.n	80082be <_nx_ip_route_find+0x25e>
    {

        /* Get the interface. */
        interface_ptr = ip_ptr -> nx_ip_gateway_interface;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	613b      	str	r3, [r7, #16]

        /* Yes, is gateway address still reachable? */
        if (interface_ptr -> nx_interface_ip_network !=
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	69da      	ldr	r2, [r3, #28]
            (ip_ptr -> nx_ip_gateway_address &
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6899      	ldr	r1, [r3, #8]
             interface_ptr -> nx_interface_ip_network_mask))
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	699b      	ldr	r3, [r3, #24]
            (ip_ptr -> nx_ip_gateway_address &
 800828a:	400b      	ands	r3, r1
        if (interface_ptr -> nx_interface_ip_network !=
 800828c:	429a      	cmp	r2, r3
 800828e:	d001      	beq.n	8008294 <_nx_ip_route_find+0x234>
        {
            return(NX_IP_ADDRESS_ERROR);
 8008290:	2321      	movs	r3, #33	; 0x21
 8008292:	e05a      	b.n	800834a <_nx_ip_route_find+0x2ea>
        }

        /* Use the gateway as default. */
        if (*ip_interface_ptr == NX_NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d103      	bne.n	80082a4 <_nx_ip_route_find+0x244>
        {
            *ip_interface_ptr = interface_ptr;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	e006      	b.n	80082b2 <_nx_ip_route_find+0x252>
        }
        else if (*ip_interface_ptr != interface_ptr)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d001      	beq.n	80082b2 <_nx_ip_route_find+0x252>
        {
            return(NX_IP_ADDRESS_ERROR);
 80082ae:	2321      	movs	r3, #33	; 0x21
 80082b0:	e04b      	b.n	800834a <_nx_ip_route_find+0x2ea>
        }

        *next_hop_address = ip_ptr -> nx_ip_gateway_address;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	689a      	ldr	r2, [r3, #8]
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	601a      	str	r2, [r3, #0]

        return(NX_SUCCESS);
 80082ba:	2300      	movs	r3, #0
 80082bc:	e045      	b.n	800834a <_nx_ip_route_find+0x2ea>
    }

    /* Determine if source addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if (*ip_interface_ptr)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d016      	beq.n	80082f4 <_nx_ip_route_find+0x294>
    {

        /* Determine if the interface is valid and the address of interface is link-local address.  */
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	791b      	ldrb	r3, [r3, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d03b      	beq.n	8008348 <_nx_ip_route_find+0x2e8>
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	799b      	ldrb	r3, [r3, #6]
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d036      	beq.n	8008348 <_nx_ip_route_find+0x2e8>
            (((*ip_interface_ptr) -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	0c1b      	lsrs	r3, r3, #16
 80082e2:	041b      	lsls	r3, r3, #16
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 80082e4:	4a1c      	ldr	r2, [pc, #112]	; (8008358 <_nx_ip_route_find+0x2f8>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d12e      	bne.n	8008348 <_nx_ip_route_find+0x2e8>
        {

            /* Set the next hop address.  */
            *next_hop_address = destination_address;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 80082f0:	2300      	movs	r3, #0
 80082f2:	e02a      	b.n	800834a <_nx_ip_route_find+0x2ea>
    else
    {

        /* Search through the interfaces associated with the IP instance,
           check if interface is valid and the address of interface is link-local address. */
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 80082f4:	2300      	movs	r3, #0
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	e023      	b.n	8008342 <_nx_ip_route_find+0x2e2>
        {

            /* Use a local variable for convenience. */
            interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	4613      	mov	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	011b      	lsls	r3, r3, #4
 8008304:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	4413      	add	r3, r2
 800830c:	613b      	str	r3, [r7, #16]

            /* Check for a valid interface that the address is link-local address.  */
            if ((interface_ptr -> nx_interface_valid) &&
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	791b      	ldrb	r3, [r3, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d012      	beq.n	800833c <_nx_ip_route_find+0x2dc>
                (interface_ptr -> nx_interface_link_up) &&
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	799b      	ldrb	r3, [r3, #6]
            if ((interface_ptr -> nx_interface_valid) &&
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00e      	beq.n	800833c <_nx_ip_route_find+0x2dc>
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	0c1b      	lsrs	r3, r3, #16
 8008324:	041b      	lsls	r3, r3, #16
                (interface_ptr -> nx_interface_link_up) &&
 8008326:	4a0c      	ldr	r2, [pc, #48]	; (8008358 <_nx_ip_route_find+0x2f8>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d107      	bne.n	800833c <_nx_ip_route_find+0x2dc>
            {

                /* Yes, use the entry information for interface and next hop. */
                *ip_interface_ptr = interface_ptr;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	601a      	str	r2, [r3, #0]
                *next_hop_address = destination_address;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 8008338:	2300      	movs	r3, #0
 800833a:	e006      	b.n	800834a <_nx_ip_route_find+0x2ea>
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	3301      	adds	r3, #1
 8008340:	617b      	str	r3, [r7, #20]
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d9d8      	bls.n	80082fa <_nx_ip_route_find+0x29a>
        }
    }

    /* Cannot find a proper way to transmit this packet.
       Return the error status. */
    return(NX_IP_ADDRESS_ERROR);
 8008348:	2321      	movs	r3, #33	; 0x21
}
 800834a:	4618      	mov	r0, r3
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	a9fe0000 	.word	0xa9fe0000

0800835c <_nx_ip_thread_entry>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_thread_entry(ULONG ip_ptr_value)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b096      	sub	sp, #88	; 0x58
 8008360:	af02      	add	r7, sp, #8
 8008362:	6078      	str	r0, [r7, #4]
NXD_IPV6_ADDRESS *interface_ipv6_address;
#endif /* FEATURE_NX_IPV6 */


    /* Setup IP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_ptr_value)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain the IP internal mutex before calling the driver.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8008368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800836a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800836e:	f04f 31ff 	mov.w	r1, #4294967295
 8008372:	4618      	mov	r0, r3
 8008374:	f007 fb24 	bl	800f9c0 <_tx_mutex_get>

    /* Set the IP initialization done flag to true.  */
    ip_ptr -> nx_ip_initialize_done =  NX_TRUE;
 8008378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800837a:	2201      	movs	r2, #1
 800837c:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    /* Loop through all physical interfaces to initialize and enable the hardware. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008380:	2300      	movs	r3, #0
 8008382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008384:	e070      	b.n	8008468 <_nx_ip_thread_entry+0x10c>
    {

        /* Is this a valid interface with a link driver associated with it? */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) && (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry))
 8008386:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008388:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800838a:	4613      	mov	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	011b      	lsls	r3, r3, #4
 8008392:	440b      	add	r3, r1
 8008394:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d061      	beq.n	8008462 <_nx_ip_thread_entry+0x106>
 800839e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083a2:	4613      	mov	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	011b      	lsls	r3, r3, #4
 80083aa:	440b      	add	r3, r1
 80083ac:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d055      	beq.n	8008462 <_nx_ip_thread_entry+0x106>
        {

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            /* Clear capability flag first.  */
            ip_ptr -> nx_ip_interface[i].nx_interface_capability_flag = 0;
 80083b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083ba:	4613      	mov	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	440b      	add	r3, r1
 80083c4:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80083c8:	2200      	movs	r2, #0
 80083ca:	601a      	str	r2, [r3, #0]
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


            ip_ptr -> nx_ip_interface[i].nx_interface_link_up = NX_TRUE;
 80083cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083d0:	4613      	mov	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	440b      	add	r3, r1
 80083da:	f203 7326 	addw	r3, r3, #1830	; 0x726
 80083de:	2201      	movs	r2, #1
 80083e0:	701a      	strb	r2, [r3, #0]

            /* Yes; attach the interface to the device. */
            driver_request.nx_ip_driver_ptr        =  ip_ptr;
 80083e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083e4:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command    =  NX_LINK_INTERFACE_ATTACH;
 80083e6:	2313      	movs	r3, #19
 80083e8:	613b      	str	r3, [r7, #16]
            driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[i]);
 80083ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083ec:	4613      	mov	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80083f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083fa:	4413      	add	r3, r2
 80083fc:	62fb      	str	r3, [r7, #44]	; 0x2c
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80083fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008400:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	440b      	add	r3, r1
 800840c:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f107 0210 	add.w	r2, r7, #16
 8008416:	4610      	mov	r0, r2
 8008418:	4798      	blx	r3
            /* Call the link driver to initialize the hardware. Among other
               responsibilities, the driver is required to provide the
               Maximum Transfer Unit (MTU) for the physical layer. The MTU
               should represent the actual physical layer transfer size
               less the physical layer headers and trailers.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800841a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800841c:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_INITIALIZE;
 800841e:	2301      	movs	r3, #1
 8008420:	613b      	str	r3, [r7, #16]
               When an IP instance is created, the first interface (nx_ip_interface[0]) is configured using parameters
               provided in the IP create call.

               When IP thread runs, it invokes the first interface link driver for link initialization.
             */
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8008422:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008424:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008426:	4613      	mov	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	011b      	lsls	r3, r3, #4
 800842e:	440b      	add	r3, r1
 8008430:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f107 0210 	add.w	r2, r7, #16
 800843a:	4610      	mov	r0, r2
 800843c:	4798      	blx	r3

            /* Call the link driver again to enable the interface.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800843e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008440:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_ENABLE;
 8008442:	2302      	movs	r3, #2
 8008444:	613b      	str	r3, [r7, #16]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_LINK_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8008446:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008448:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800844a:	4613      	mov	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	440b      	add	r3, r1
 8008454:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f107 0210 	add.w	r2, r7, #16
 800845e:	4610      	mov	r0, r2
 8008460:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008464:	3301      	adds	r3, #1
 8008466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800846a:	2b00      	cmp	r3, #0
 800846c:	d08b      	beq.n	8008386 <_nx_ip_thread_entry+0x2a>
    /* Loop to process events for this IP instance.  */
    for (;;)
    {

        /* Release the IP internal mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800846e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008470:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008474:	4618      	mov	r0, r3
 8008476:	f007 fd1b 	bl	800feb0 <_tx_mutex_put>

        /* Pickup IP event flags.  */
        tx_event_flags_get(&(ip_ptr -> nx_ip_events), NX_IP_ALL_EVENTS, TX_OR_CLEAR, &ip_events, TX_WAIT_FOREVER);
 800847a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800847c:	f503 7012 	add.w	r0, r3, #584	; 0x248
 8008480:	f107 030c 	add.w	r3, r7, #12
 8008484:	f04f 32ff 	mov.w	r2, #4294967295
 8008488:	9200      	str	r2, [sp, #0]
 800848a:	2201      	movs	r2, #1
 800848c:	f04f 31ff 	mov.w	r1, #4294967295
 8008490:	f006 fe14 	bl	800f0bc <_tx_event_flags_get>

        /* Obtain the IP internal mutex before processing the IP event.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8008494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008496:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800849a:	f04f 31ff 	mov.w	r1, #4294967295
 800849e:	4618      	mov	r0, r3
 80084a0:	f007 fa8e 	bl	800f9c0 <_tx_mutex_get>
        }
#endif

        /* Check for an IP receive packet event.  */
        /*lint -e{644} suppress variable might not be initialized, since "ip_events" was initialized by tx_event_flags_get. */
        if (ip_events & NX_IP_RECEIVE_EVENT)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f003 0308 	and.w	r3, r3, #8
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d031      	beq.n	8008512 <_nx_ip_thread_entry+0x1b6>
        {

            /* Loop to process all deferred packet requests.  */
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 80084ae:	e023      	b.n	80084f8 <_nx_ip_thread_entry+0x19c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80084b0:	f3ef 8310 	mrs	r3, PRIMASK
 80084b4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80084b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80084b8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80084ba:	b672      	cpsid	i
    return(int_posture);
 80084bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
            {

                /* Remove the first packet and process it!  */

                /* Disable interrupts.  */
                TX_DISABLE
 80084be:	643b      	str	r3, [r7, #64]	; 0x40

                /* Pickup the first packet.  */
                packet_ptr =  ip_ptr -> nx_ip_deferred_received_packet_head;
 80084c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084c2:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80084c6:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Move the head pointer to the next packet.  */
                ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 80084c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ca:	69da      	ldr	r2, [r3, #28]
 80084cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ce:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

                /* Check for end of deferred processing queue.  */
                if (ip_ptr -> nx_ip_deferred_received_packet_head == NX_NULL)
 80084d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d4:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d103      	bne.n	80084e4 <_nx_ip_thread_entry+0x188>
                {

                    /* Yes, the queue is empty.  Set the tail pointer to NULL.  */
                    ip_ptr -> nx_ip_deferred_received_packet_tail =  NX_NULL;
 80084dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 80084e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084e6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80084e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ea:	f383 8810 	msr	PRIMASK, r3
}
 80084ee:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call the actual IP packet receive function.  */
                _nx_ip_packet_receive(ip_ptr, packet_ptr);
 80084f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80084f4:	f7ff fcfc 	bl	8007ef0 <_nx_ip_packet_receive>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 80084f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084fa:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1d6      	bne.n	80084b0 <_nx_ip_thread_entry+0x154>
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_RECEIVE_EVENT);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f023 0308 	bic.w	r3, r3, #8
 8008508:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 8131 	beq.w	8008774 <_nx_ip_thread_entry+0x418>
                continue;
            }
        }

        /* Check for a TCP message event.  */
        if (ip_events & NX_IP_TCP_EVENT)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00c      	beq.n	8008536 <_nx_ip_thread_entry+0x1da>
        {

            /* Process the TCP packet queue.  */
            (ip_ptr -> nx_ip_tcp_queue_process)(ip_ptr);
 800851c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800851e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008522:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008524:	4798      	blx	r3

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_TCP_EVENT);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800852c:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 8121 	beq.w	8008778 <_nx_ip_thread_entry+0x41c>
                continue;
            }
        }

        /* Check for a fast TCP event.  */
        if (ip_events & NX_IP_FAST_EVENT)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800853c:	2b00      	cmp	r3, #0
 800853e:	d011      	beq.n	8008564 <_nx_ip_thread_entry+0x208>
            }

#endif /* FEATURE_NX_IPV6 */

            /* Process the fast TCP processing.  */
            if (ip_ptr -> nx_ip_tcp_fast_periodic_processing)
 8008540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008542:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 8008546:	2b00      	cmp	r3, #0
 8008548:	d004      	beq.n	8008554 <_nx_ip_thread_entry+0x1f8>
            {
                (ip_ptr -> nx_ip_tcp_fast_periodic_processing)(ip_ptr);
 800854a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800854c:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 8008550:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008552:	4798      	blx	r3
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_FAST_EVENT);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800855a:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 810c 	beq.w	800877c <_nx_ip_thread_entry+0x420>
                continue;
            }
        }

        /* Check for a periodic events.  */
        if (ip_events & NX_IP_PERIODIC_EVENT)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	d039      	beq.n	80085e2 <_nx_ip_thread_entry+0x286>
        {

#ifndef NX_DISABLE_IPV4
            /* Process the ARP periodic update, if ARP has been enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 800856e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008570:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 8008574:	2b00      	cmp	r3, #0
 8008576:	d004      	beq.n	8008582 <_nx_ip_thread_entry+0x226>
            {
                (ip_ptr -> nx_ip_arp_periodic_update)(ip_ptr);
 8008578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800857a:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 800857e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008580:	4798      	blx	r3
            }

            /* Process the RARP periodic update, if RARP has been enabled.  */
            if (ip_ptr -> nx_ip_rarp_periodic_update)
 8008582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008584:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 8008588:	2b00      	cmp	r3, #0
 800858a:	d004      	beq.n	8008596 <_nx_ip_thread_entry+0x23a>
            {
                (ip_ptr -> nx_ip_rarp_periodic_update)(ip_ptr);
 800858c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800858e:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 8008592:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008594:	4798      	blx	r3
            }

            /* Process IGMP periodic events, if IGMP has been enabled.  */
            if (ip_ptr -> nx_ip_igmp_periodic_processing)
 8008596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008598:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 800859c:	2b00      	cmp	r3, #0
 800859e:	d004      	beq.n	80085aa <_nx_ip_thread_entry+0x24e>
            {
                (ip_ptr -> nx_ip_igmp_periodic_processing)(ip_ptr);
 80085a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085a2:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 80085a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80085a8:	4798      	blx	r3
            }
#endif /* !NX_DISABLE_IPV4  */

            /* Process IP fragmentation timeouts, if IP fragmenting has been
               enabled.  */
            if (ip_ptr -> nx_ip_fragment_timeout_check)
 80085aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ac:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d004      	beq.n	80085be <_nx_ip_thread_entry+0x262>
            {
                (ip_ptr -> nx_ip_fragment_timeout_check)(ip_ptr);
 80085b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085b6:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 80085ba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80085bc:	4798      	blx	r3
            }

            /* Process TCP periodic events, if TCP has been enabled.  */
            if (ip_ptr -> nx_ip_tcp_periodic_processing)
 80085be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085c0:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d004      	beq.n	80085d2 <_nx_ip_thread_entry+0x276>
            {
                (ip_ptr -> nx_ip_tcp_periodic_processing)(ip_ptr);
 80085c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ca:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80085ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80085d0:	4798      	blx	r3
            }
#endif /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

#endif /* FEATURE_NX_IPV6 */
            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_PERIODIC_EVENT);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f023 0301 	bic.w	r3, r3, #1
 80085d8:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 80cf 	beq.w	8008780 <_nx_ip_thread_entry+0x424>
        }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Check for an ARP receive packet event.  */
        if ((ip_events & NX_IP_ARP_REC_EVENT) && (ip_ptr -> nx_ip_arp_queue_process))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f003 0310 	and.w	r3, r3, #16
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d009      	beq.n	8008600 <_nx_ip_thread_entry+0x2a4>
 80085ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ee:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d004      	beq.n	8008600 <_nx_ip_thread_entry+0x2a4>
        {

            /* Process the ARP queue.  */
            (ip_ptr -> nx_ip_arp_queue_process)(ip_ptr);
 80085f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085f8:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 80085fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80085fe:	4798      	blx	r3
        }

        /* Check for an RARP receive packet event.  */
        if ((ip_events & NX_IP_RARP_REC_EVENT) && (ip_ptr -> nx_ip_rarp_queue_process))
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f003 0320 	and.w	r3, r3, #32
 8008606:	2b00      	cmp	r3, #0
 8008608:	d009      	beq.n	800861e <_nx_ip_thread_entry+0x2c2>
 800860a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800860c:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <_nx_ip_thread_entry+0x2c2>
        {

            /* Process the RARP queue.  */
            (ip_ptr -> nx_ip_rarp_queue_process)(ip_ptr);
 8008614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008616:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 800861a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800861c:	4798      	blx	r3
        }

        /* Check for an IGMP message event.  */
        if (ip_events & NX_IP_IGMP_EVENT)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008624:	2b00      	cmp	r3, #0
 8008626:	d004      	beq.n	8008632 <_nx_ip_thread_entry+0x2d6>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_igmp_queue_process)(ip_ptr);
 8008628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800862a:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 800862e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008630:	4798      	blx	r3
        }

        /* Check for an IGMP enable event.  */
        if (ip_events & NX_IP_IGMP_ENABLE_EVENT)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008638:	2b00      	cmp	r3, #0
 800863a:	d035      	beq.n	80086a8 <_nx_ip_thread_entry+0x34c>
        {

            /* Call the associated driver for this IP instance to register the "all hosts"
               multicast address.  */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800863c:	2300      	movs	r3, #0
 800863e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008640:	e02f      	b.n	80086a2 <_nx_ip_thread_entry+0x346>
            {
                /* Enable the hardware for IGMP for all valid interfaces. */
                if (ip_ptr -> nx_ip_interface[i].nx_interface_valid)
 8008642:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008644:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008646:	4613      	mov	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	011b      	lsls	r3, r3, #4
 800864e:	440b      	add	r3, r1
 8008650:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d020      	beq.n	800869c <_nx_ip_thread_entry+0x340>
                {
                    driver_request.nx_ip_driver_ptr =                    ip_ptr;
 800865a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800865c:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
 800865e:	2308      	movs	r3, #8
 8008660:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
 8008662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008666:	61bb      	str	r3, [r7, #24]
                    /*lint -e{835} -e{845} suppress operating on zero. */
                    driver_request.nx_ip_driver_physical_address_lsw =   NX_IP_MULTICAST_LOWER | (NX_ALL_HOSTS_ADDRESS & NX_IP_MULTICAST_MASK);
 8008668:	4b46      	ldr	r3, [pc, #280]	; (8008784 <_nx_ip_thread_entry+0x428>)
 800866a:	61fb      	str	r3, [r7, #28]
                    driver_request.nx_ip_driver_interface            =   &(ip_ptr -> nx_ip_interface[i]);
 800866c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800866e:	4613      	mov	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	011b      	lsls	r3, r3, #4
 8008676:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800867a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800867c:	4413      	add	r3, r2
 800867e:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_MULTICAST_JOIN, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8008680:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008682:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008684:	4613      	mov	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	011b      	lsls	r3, r3, #4
 800868c:	440b      	add	r3, r1
 800868e:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f107 0210 	add.w	r2, r7, #16
 8008698:	4610      	mov	r0, r2
 800869a:	4798      	blx	r3
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800869c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800869e:	3301      	adds	r3, #1
 80086a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d0cc      	beq.n	8008642 <_nx_ip_thread_entry+0x2e6>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        /* Check for an IP unfragment event.  */
        if (ip_events & NX_IP_UNFRAG_EVENT)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d009      	beq.n	80086c6 <_nx_ip_thread_entry+0x36a>
        {

            /* Process the IP fragment reassemble, if fragment has been enabled.  */
            if (ip_ptr -> nx_ip_fragment_assembly)
 80086b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086b4:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d004      	beq.n	80086c6 <_nx_ip_thread_entry+0x36a>
            {
                (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
 80086bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086be:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80086c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80086c4:	4798      	blx	r3
            }
        }

#ifndef NX_DISABLE_IPV4
        /* Check for an ICMP message event.  */
        if (ip_events & NX_IP_ICMP_EVENT)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f003 0304 	and.w	r3, r3, #4
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d004      	beq.n	80086da <_nx_ip_thread_entry+0x37e>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_icmp_queue_process)(ip_ptr);
 80086d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086d2:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80086d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80086d8:	4798      	blx	r3
        }
#endif /* NX_DISABLE_IPV4 */

        /* Check for a deferred processing request from the driver.  */
        if (ip_events & NX_IP_DRIVER_DEFERRED_EVENT)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d033      	beq.n	800874c <_nx_ip_thread_entry+0x3f0>
        {

            /* Go through each valid interface. */
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 80086e4:	2300      	movs	r3, #0
 80086e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80086e8:	e02d      	b.n	8008746 <_nx_ip_thread_entry+0x3ea>
            {
                if (ip_ptr -> nx_ip_interface[index].nx_interface_valid)
 80086ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086ee:	4613      	mov	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	011b      	lsls	r3, r3, #4
 80086f6:	440b      	add	r3, r1
 80086f8:	f203 7324 	addw	r3, r3, #1828	; 0x724
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d01e      	beq.n	8008740 <_nx_ip_thread_entry+0x3e4>
                {

                    /* Yes, there is a deferred processing event from the driver. The only valid information
                       fields are the IP pointer and the command.  */
                    driver_request.nx_ip_driver_ptr =        ip_ptr;
 8008702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008704:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =    NX_LINK_DEFERRED_PROCESSING;
 8008706:	2312      	movs	r3, #18
 8008708:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[index]);
 800870a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800870c:	4613      	mov	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	011b      	lsls	r3, r3, #4
 8008714:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8008718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800871a:	4413      	add	r3, r2
 800871c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    driver_request.nx_ip_driver_return_ptr = &foo;
 800871e:	f107 0308 	add.w	r3, r7, #8
 8008722:	627b      	str	r3, [r7, #36]	; 0x24

                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 8008724:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008726:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008728:	4613      	mov	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	440b      	add	r3, r1
 8008732:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f107 0210 	add.w	r2, r7, #16
 800873c:	4610      	mov	r0, r2
 800873e:	4798      	blx	r3
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 8008740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008742:	3301      	adds	r3, #1
 8008744:	64bb      	str	r3, [r7, #72]	; 0x48
 8008746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008748:	2b00      	cmp	r3, #0
 800874a:	d0ce      	beq.n	80086ea <_nx_ip_thread_entry+0x38e>
                }
            }
        }

        /* Check for a deferred TCP cleanup processing request from the driver.  */
        if (ip_events & NX_IP_TCP_CLEANUP_DEFERRED)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d004      	beq.n	8008760 <_nx_ip_thread_entry+0x404>
        {

            /* Yes, there is a deferred cleanup processing event. Call the TCP deferred cleanup
               processing function.  */
            (ip_ptr -> nx_tcp_deferred_cleanup_check)(ip_ptr);
 8008756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008758:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 800875c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800875e:	4798      	blx	r3
        }

        /* Check for a link status change request from the driver.  */
        if (ip_events & NX_IP_LINK_STATUS_EVENT)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008766:	2b00      	cmp	r3, #0
 8008768:	f43f ae81 	beq.w	800846e <_nx_ip_thread_entry+0x112>
        {

            /* Yes, there is a link status change  event. Call the deferred link status processing function. */
            _nx_ip_deferred_link_status_process(ip_ptr);
 800876c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800876e:	f7fe fc01 	bl	8006f74 <_nx_ip_deferred_link_status_process>
 8008772:	e67c      	b.n	800846e <_nx_ip_thread_entry+0x112>
                continue;
 8008774:	bf00      	nop
 8008776:	e67a      	b.n	800846e <_nx_ip_thread_entry+0x112>
                continue;
 8008778:	bf00      	nop
 800877a:	e678      	b.n	800846e <_nx_ip_thread_entry+0x112>
                continue;
 800877c:	bf00      	nop
 800877e:	e676      	b.n	800846e <_nx_ip_thread_entry+0x112>
                continue;
 8008780:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008782:	e674      	b.n	800846e <_nx_ip_thread_entry+0x112>
 8008784:	5e000001 	.word	0x5e000001

08008788 <_nx_ipv4_option_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ipv4_option_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08a      	sub	sp, #40	; 0x28
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]

NX_IPV4_HEADER *ip_header_ptr;
UCHAR          *option_ptr;
ULONG           ip_option_length;
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
ULONG           ip_normal_length = 20;
 8008792:	2314      	movs	r3, #20
 8008794:	61bb      	str	r3, [r7, #24]
#endif /* NX_DISABLE_ICMPV4_ERROR_MESSAGE */
UINT            index = 0;
 8008796:	2300      	movs	r3, #0
 8008798:	623b      	str	r3, [r7, #32]
UCHAR           op_type;
UCHAR           op_length;
UCHAR           op_timestamp_offset;
UCHAR           op_timestamp_overflow;
UCHAR           op_timestamp_flags;
UINT            op_timestamp_counter = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	61fb      	str	r3, [r7, #28]

    /* Set the IPv4 header and IPv4 option pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	617b      	str	r3, [r7, #20]
    option_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	3314      	adds	r3, #20
 80087aa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate the IPv4 option length.  */
    ip_option_length = ((((ip_header_ptr -> nx_ip_header_word_0 & NX_IP_LENGTH_MASK) >> 24) - NX_IP_NORMAL_LENGTH) & 0xFF) * (ULONG)sizeof(ULONG);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	0e1b      	lsrs	r3, r3, #24
 80087b2:	f003 030f 	and.w	r3, r3, #15
 80087b6:	3b05      	subs	r3, #5
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	613b      	str	r3, [r7, #16]

    /* Loop to process the IPv4 option.  */
    while (index < ip_option_length)
 80087be:	e0a3      	b.n	8008908 <_nx_ipv4_option_process+0x180>
    {

        /* Get the option type.  */
        op_type = *option_ptr;
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	73fb      	strb	r3, [r7, #15]

        /* Process the option type. */
        switch (op_type)
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	2b44      	cmp	r3, #68	; 0x44
 80087ca:	d010      	beq.n	80087ee <_nx_ipv4_option_process+0x66>
 80087cc:	2b44      	cmp	r3, #68	; 0x44
 80087ce:	f300 8082 	bgt.w	80088d6 <_nx_ipv4_option_process+0x14e>
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <_nx_ipv4_option_process+0x54>
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d002      	beq.n	80087e0 <_nx_ipv4_option_process+0x58>
                return(NX_FALSE);
            }
            break;
        }
        default:
            break;
 80087da:	e07c      	b.n	80088d6 <_nx_ipv4_option_process+0x14e>
            return(NX_TRUE);
 80087dc:	2301      	movs	r3, #1
 80087de:	e099      	b.n	8008914 <_nx_ipv4_option_process+0x18c>
            option_ptr++;
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	3301      	adds	r3, #1
 80087e4:	627b      	str	r3, [r7, #36]	; 0x24
            index++;
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	3301      	adds	r3, #1
 80087ea:	623b      	str	r3, [r7, #32]
            continue;
 80087ec:	e08c      	b.n	8008908 <_nx_ipv4_option_process+0x180>
            op_timestamp_counter++;
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	3301      	adds	r3, #1
 80087f2:	61fb      	str	r3, [r7, #28]
            if (op_timestamp_counter > 1)
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d90b      	bls.n	8008812 <_nx_ipv4_option_process+0x8a>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	4413      	add	r3, r2
 8008800:	3302      	adds	r3, #2
 8008802:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7fd ffed 	bl	80067e8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800880e:	2300      	movs	r3, #0
 8008810:	e080      	b.n	8008914 <_nx_ipv4_option_process+0x18c>
            op_length = *(option_ptr + 1);
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	785b      	ldrb	r3, [r3, #1]
 8008816:	73bb      	strb	r3, [r7, #14]
            op_timestamp_offset = *(option_ptr + 2);
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	789b      	ldrb	r3, [r3, #2]
 800881c:	737b      	strb	r3, [r7, #13]
            op_timestamp_overflow = (*(option_ptr + 3)) >> 4;
 800881e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008820:	3303      	adds	r3, #3
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	091b      	lsrs	r3, r3, #4
 8008826:	733b      	strb	r3, [r7, #12]
            op_timestamp_flags = (*(option_ptr + 3)) & 0xF;
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	3303      	adds	r3, #3
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	f003 030f 	and.w	r3, r3, #15
 8008832:	72fb      	strb	r3, [r7, #11]
            if ((op_length < 8) || (op_length > 40) || ((op_length % 4) != 0))
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	2b07      	cmp	r3, #7
 8008838:	d908      	bls.n	800884c <_nx_ipv4_option_process+0xc4>
 800883a:	7bbb      	ldrb	r3, [r7, #14]
 800883c:	2b28      	cmp	r3, #40	; 0x28
 800883e:	d805      	bhi.n	800884c <_nx_ipv4_option_process+0xc4>
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	f003 0303 	and.w	r3, r3, #3
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00b      	beq.n	8008864 <_nx_ipv4_option_process+0xdc>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800884c:	69ba      	ldr	r2, [r7, #24]
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	4413      	add	r3, r2
 8008852:	3302      	adds	r3, #2
 8008854:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7fd ffc4 	bl	80067e8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 8008860:	2300      	movs	r3, #0
 8008862:	e057      	b.n	8008914 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_offset < 5) || ((op_timestamp_offset % 2) == 0))
 8008864:	7b7b      	ldrb	r3, [r7, #13]
 8008866:	2b04      	cmp	r3, #4
 8008868:	d905      	bls.n	8008876 <_nx_ipv4_option_process+0xee>
 800886a:	7b7b      	ldrb	r3, [r7, #13]
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10b      	bne.n	800888e <_nx_ipv4_option_process+0x106>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 3));
 8008876:	69ba      	ldr	r2, [r7, #24]
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	4413      	add	r3, r2
 800887c:	3303      	adds	r3, #3
 800887e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7fd ffaf 	bl	80067e8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800888a:	2300      	movs	r3, #0
 800888c:	e042      	b.n	8008914 <_nx_ipv4_option_process+0x18c>
            if (op_timestamp_overflow == 15)
 800888e:	7b3b      	ldrb	r3, [r7, #12]
 8008890:	2b0f      	cmp	r3, #15
 8008892:	d10b      	bne.n	80088ac <_nx_ipv4_option_process+0x124>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	6a3b      	ldr	r3, [r7, #32]
 8008898:	4413      	add	r3, r2
 800889a:	3304      	adds	r3, #4
 800889c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7fd ffa0 	bl	80067e8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 80088a8:	2300      	movs	r3, #0
 80088aa:	e033      	b.n	8008914 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_flags != 0) && (op_timestamp_flags != 1) && (op_timestamp_flags != 3))
 80088ac:	7afb      	ldrb	r3, [r7, #11]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d013      	beq.n	80088da <_nx_ipv4_option_process+0x152>
 80088b2:	7afb      	ldrb	r3, [r7, #11]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d010      	beq.n	80088da <_nx_ipv4_option_process+0x152>
 80088b8:	7afb      	ldrb	r3, [r7, #11]
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d00d      	beq.n	80088da <_nx_ipv4_option_process+0x152>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 80088be:	69ba      	ldr	r2, [r7, #24]
 80088c0:	6a3b      	ldr	r3, [r7, #32]
 80088c2:	4413      	add	r3, r2
 80088c4:	3304      	adds	r3, #4
 80088c6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7fd ff8b 	bl	80067e8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 80088d2:	2300      	movs	r3, #0
 80088d4:	e01e      	b.n	8008914 <_nx_ipv4_option_process+0x18c>
            break;
 80088d6:	bf00      	nop
 80088d8:	e000      	b.n	80088dc <_nx_ipv4_option_process+0x154>
            break;
 80088da:	bf00      	nop
        }

        /* Get the option length.  */
        op_length = *(option_ptr + 1);
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	785b      	ldrb	r3, [r3, #1]
 80088e0:	73bb      	strb	r3, [r7, #14]

        /* Check for invalid option length.
           RFC 791: The option-length octet counts the option-type octet and the 
           option-length octet as well as the option-data octets.  */
        if ((op_length < 2) || ((index + op_length) > ip_option_length))
 80088e2:	7bbb      	ldrb	r3, [r7, #14]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d905      	bls.n	80088f4 <_nx_ipv4_option_process+0x16c>
 80088e8:	7bba      	ldrb	r2, [r7, #14]
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	4413      	add	r3, r2
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d201      	bcs.n	80088f8 <_nx_ipv4_option_process+0x170>
        {
            return(NX_FALSE);
 80088f4:	2300      	movs	r3, #0
 80088f6:	e00d      	b.n	8008914 <_nx_ipv4_option_process+0x18c>
        }

        /* Move to the next top level option. */
        option_ptr += op_length;
 80088f8:	7bbb      	ldrb	r3, [r7, #14]
 80088fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088fc:	4413      	add	r3, r2
 80088fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* Update the index.  */
        index += op_length;
 8008900:	7bbb      	ldrb	r3, [r7, #14]
 8008902:	6a3a      	ldr	r2, [r7, #32]
 8008904:	4413      	add	r3, r2
 8008906:	623b      	str	r3, [r7, #32]
    while (index < ip_option_length)
 8008908:	6a3a      	ldr	r2, [r7, #32]
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	429a      	cmp	r2, r3
 800890e:	f4ff af57 	bcc.w	80087c0 <_nx_ipv4_option_process+0x38>
    }

    /* Return NX_TRUE.  */
    return(NX_TRUE);
 8008912:	2301      	movs	r3, #1
}
 8008914:	4618      	mov	r0, r3
 8008916:	3728      	adds	r7, #40	; 0x28
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <_nx_ipv4_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ipv4_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b098      	sub	sp, #96	; 0x60
 8008920:	af02      	add	r7, sp, #8
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
NX_INTERFACE   *if_ptr;
NX_UDP_HEADER  *udp_header_ptr;
UINT            dest_port;
UINT            option_processed;
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
UINT            compute_checksum = 1;
 8008926:	2301      	movs	r3, #1
 8008928:	64bb      	str	r3, [r7, #72]	; 0x48
#endif /* NX_DISABLE_IP_RX_CHECKSUM */

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	653b      	str	r3, [r7, #80]	; 0x50
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, packet_ptr -> nx_packet_length, NX_TRACE_INTERNAL_EVENTS, 0, 0);


    /* Pick up the first word in the IP header. */
    val = ip_header_ptr -> nx_ip_header_word_0;
 8008930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	647b      	str	r3, [r7, #68]	; 0x44

    /* Convert to host byte order. */
    NX_CHANGE_ULONG_ENDIAN(val);
 8008936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008938:	ba1b      	rev	r3, r3
 800893a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain packet length. */
    pkt_length = val & NX_LOWER_16_MASK;
 800893c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800893e:	b29b      	uxth	r3, r3
 8008940:	643b      	str	r3, [r7, #64]	; 0x40

    /* Make sure the IP length matches the packet length.  Some Ethernet devices
       add padding to small packets, which results in a discrepancy between the
       packet length and the IP header length.  */
    if (packet_ptr -> nx_packet_length != pkt_length)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008948:	429a      	cmp	r2, r3
 800894a:	d066      	beq.n	8008a1a <_nx_ipv4_packet_receive+0xfe>
    {

        /* Determine if the packet length is less than the size reported in the IP header.  */
        if (packet_ptr -> nx_packet_length < pkt_length)
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008950:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008952:	429a      	cmp	r2, r3
 8008954:	d90d      	bls.n	8008972 <_nx_ipv4_packet_receive+0x56>
            /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008964:	1c5a      	adds	r2, r3, #1
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Invalid packet length, just release it.  */
            _nx_packet_release(packet_ptr);
 800896a:	6838      	ldr	r0, [r7, #0]
 800896c:	f000 fdd4 	bl	8009518 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 8008970:	e233      	b.n	8008dda <_nx_ipv4_packet_receive+0x4be>
        }

        /* Calculate the difference in the length.  */
        delta =  packet_ptr -> nx_packet_length - pkt_length;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Adjust the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - delta;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008982:	1ad2      	subs	r2, r2, r3
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	625a      	str	r2, [r3, #36]	; 0x24

        /* Adjust the append pointer.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Loop to process adjustment that spans multiple packets.  */
        while (delta)
 8008988:	e044      	b.n	8008a14 <_nx_ipv4_packet_receive+0xf8>
        {

            /* Determine if the packet is chained (or still chained after the adjustment).  */
            if (packet_ptr -> nx_packet_last == NX_NULL)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d107      	bne.n	80089a2 <_nx_ipv4_packet_receive+0x86>
            {

                /* No, packet is not chained, simply adjust the append pointer in the packet.  */
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	68da      	ldr	r2, [r3, #12]
 8008996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008998:	425b      	negs	r3, r3
 800899a:	441a      	add	r2, r3
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	60da      	str	r2, [r3, #12]

                /* Break out of the loop, since the adjustment is complete.  */
                break;
 80089a0:	e03b      	b.n	8008a1a <_nx_ipv4_packet_receive+0xfe>
            }

            /* Pickup the pointer to the last packet.  */
            last_packet =  packet_ptr -> nx_packet_last;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if the amount to adjust is less than the payload in the last packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 80089a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089aa:	68da      	ldr	r2, [r3, #12]
 80089ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	461a      	mov	r2, r3
 80089b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d207      	bcs.n	80089ca <_nx_ipv4_packet_receive+0xae>
            {

                /* Yes, simply adjust the append pointer of the last packet in the chain.  */
                /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                last_packet -> nx_packet_append_ptr =  last_packet -> nx_packet_append_ptr - delta;
 80089ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c0:	425b      	negs	r3, r3
 80089c2:	441a      	add	r2, r3
 80089c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c6:	60da      	str	r2, [r3, #12]

                /* Get out of the loop, since the adjustment is complete.  */
                break;
 80089c8:	e027      	b.n	8008a1a <_nx_ipv4_packet_receive+0xfe>
            }
            else
            {

                /* Adjust the delta by the amount in the last packet.  */
                delta =  delta - ((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr));
 80089ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089cc:	68da      	ldr	r2, [r3, #12]
 80089ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	461a      	mov	r2, r3
 80089d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d8:	1a9b      	subs	r3, r3, r2
 80089da:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Find the packet before the last packet.  */
                before_last_packet =  packet_ptr;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	657b      	str	r3, [r7, #84]	; 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 80089e0:	e002      	b.n	80089e8 <_nx_ipv4_packet_receive+0xcc>
                {

                    /* Move to the next packet in the chain.  */
                    before_last_packet =  before_last_packet -> nx_packet_next;
 80089e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	657b      	str	r3, [r7, #84]	; 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 80089e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d1f7      	bne.n	80089e2 <_nx_ipv4_packet_receive+0xc6>

                /* At this point, we need to release the last packet and adjust the other packet
                   pointers.  */

                /* Ensure the next packet pointer is NULL in what is now the last packet.  */
                before_last_packet -> nx_packet_next =  NX_NULL;
 80089f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089f4:	2200      	movs	r2, #0
 80089f6:	605a      	str	r2, [r3, #4]

                /* Determine if the packet is still chained.  */
                if (packet_ptr != before_last_packet)
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d003      	beq.n	8008a08 <_nx_ipv4_packet_receive+0xec>
                {

                    /* Yes, the packet is still chained, setup the last packet pointer.  */
                    packet_ptr -> nx_packet_last =  before_last_packet;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a04:	619a      	str	r2, [r3, #24]
 8008a06:	e002      	b.n	8008a0e <_nx_ipv4_packet_receive+0xf2>
                }
                else
                {

                    /* The packet is no longer chained, set the last packet pointer to NULL.  */
                    packet_ptr -> nx_packet_last =  NX_NULL;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	619a      	str	r2, [r3, #24]
                }

                /* Release the last packet.   */
                _nx_packet_release(last_packet);
 8008a0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008a10:	f000 fd82 	bl	8009518 <_nx_packet_release>
        while (delta)
 8008a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1b7      	bne.n	800898a <_nx_ipv4_packet_receive+0x6e>
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Get the incoming interface. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1e:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Obtain IP header length. */
    ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 8008a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a22:	0e1b      	lsrs	r3, r3, #24
 8008a24:	f003 030f 	and.w	r3, r3, #15
 8008a28:	637b      	str	r3, [r7, #52]	; 0x34
    /* Check for minimal packet length. The check is done after the endian swapping
       since the compiler may possibly be able to optimize the lookup of
       "nx_packet_length" and therefore reduce the amount of work performing these
       size checks. The endian logic is okay since packets must always have
       payloads greater than the IP header in size.  */
    if ((packet_ptr -> nx_packet_length <= (ip_header_length << 2)) ||
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d902      	bls.n	8008a3c <_nx_ipv4_packet_receive+0x120>
 8008a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	d80d      	bhi.n	8008a58 <_nx_ipv4_packet_receive+0x13c>
        /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_packets++;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a40:	1c5a      	adds	r2, r3, #1
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	635a      	str	r2, [r3, #52]	; 0x34

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 8008a50:	6838      	ldr	r0, [r7, #0]
 8008a52:	f000 fd61 	bl	8009518 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8008a56:	e1c0      	b.n	8008dda <_nx_ipv4_packet_receive+0x4be>
    }
#endif

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (if_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_RX_CHECKSUM)
 8008a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <_nx_ipv4_packet_receive+0x14c>
    {
        compute_checksum = 0;
 8008a64:	2300      	movs	r3, #0
 8008a66:	64bb      	str	r3, [r7, #72]	; 0x48
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
    if (compute_checksum == 1)
 8008a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d124      	bne.n	8008ab8 <_nx_ipv4_packet_receive+0x19c>
    {


        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* length is the size of IP header, including options */
                                           (UINT)(ip_header_length << 2),
 8008a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a70:	009a      	lsls	r2, r3, #2
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8008a72:	2300      	movs	r3, #0
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	2300      	movs	r3, #0
 8008a78:	2104      	movs	r1, #4
 8008a7a:	6838      	ldr	r0, [r7, #0]
 8008a7c:	f7fe f851 	bl	8006b22 <_nx_ip_checksum_compute>
 8008a80:	4603      	mov	r3, r0
 8008a82:	633b      	str	r3, [r7, #48]	; 0x30
                                           /* IPv4 header checksum doesn't care src/dest addresses */
                                           NULL, NULL);
        checksum =  ~checksum & NX_LOWER_16_MASK;
 8008a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a86:	43db      	mvns	r3, r3
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the checksum again.  */
        if (checksum)
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d012      	beq.n	8008ab8 <_nx_ipv4_packet_receive+0x19c>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a96:	1c5a      	adds	r2, r3, #1
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP checksum error.  */
            ip_ptr -> nx_ip_receive_checksum_errors++;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa0:	1c5a      	adds	r2, r3, #1
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Checksum error, just release it.  */
            _nx_packet_release(packet_ptr);
 8008ab0:	6838      	ldr	r0, [r7, #0]
 8008ab2:	f000 fd31 	bl	8009518 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 8008ab6:	e190      	b.n	8008dda <_nx_ipv4_packet_receive+0x4be>
    /* IP receive checksum processing is disabled... just check for and remove if
       necessary the IP option words.  */

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8008ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	ba1a      	rev	r2, r3
 8008abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ac0:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8008ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	ba1a      	rev	r2, r3
 8008ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aca:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8008acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	ba1a      	rev	r2, r3
 8008ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ad4:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8008ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	ba1a      	rev	r2, r3
 8008adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ade:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8008ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	ba1a      	rev	r2, r3
 8008ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ae8:	611a      	str	r2, [r3, #16]
    }
#endif /* NX_ENABLE_SOURCE_ADDRESS_CHECK */

    /* Determine if there are options in the IP header that make the length greater
       than the default length.  */
    if (ip_header_length > NX_IP_NORMAL_LENGTH)
 8008aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aec:	2b05      	cmp	r3, #5
 8008aee:	d949      	bls.n	8008b84 <_nx_ipv4_packet_receive+0x268>
    {

        /* Process the IPv4 option.  */
        option_processed = _nx_ipv4_option_process(ip_ptr, packet_ptr);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7ff fe48 	bl	8008788 <_nx_ipv4_option_process>
 8008af8:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the status.  */
        if (option_processed == NX_FALSE)
 8008afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d108      	bne.n	8008b12 <_nx_ipv4_packet_receive+0x1f6>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* IPv4 option error, toss the packet!  */
            _nx_packet_release(packet_ptr);
 8008b0a:	6838      	ldr	r0, [r7, #0]
 8008b0c:	f000 fd04 	bl	8009518 <_nx_packet_release>

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 8008b10:	e163      	b.n	8008dda <_nx_ipv4_packet_receive+0x4be>
        }

        /* Setup a pointer to the last option word.  */
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 8008b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b1e:	4413      	add	r3, r2
 8008b20:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Remove the option words prior to handling the IP header.  */
        *word_ptr-- = ip_header_ptr -> nx_ip_header_destination_ip;
 8008b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b24:	1f1a      	subs	r2, r3, #4
 8008b26:	62ba      	str	r2, [r7, #40]	; 0x28
 8008b28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b2a:	6912      	ldr	r2, [r2, #16]
 8008b2c:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_source_ip;
 8008b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b30:	1f1a      	subs	r2, r3, #4
 8008b32:	62ba      	str	r2, [r7, #40]	; 0x28
 8008b34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b36:	68d2      	ldr	r2, [r2, #12]
 8008b38:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_2;
 8008b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3c:	1f1a      	subs	r2, r3, #4
 8008b3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8008b40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b42:	6892      	ldr	r2, [r2, #8]
 8008b44:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_1;
 8008b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b48:	1f1a      	subs	r2, r3, #4
 8008b4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8008b4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b4e:	6852      	ldr	r2, [r2, #4]
 8008b50:	601a      	str	r2, [r3, #0]
        *word_ptr = (ULONG)(((ip_header_ptr -> nx_ip_header_word_0) & (~NX_IP_LENGTH_MASK)) | NX_IP_VERSION);
 8008b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f023 439e 	bic.w	r3, r3, #1325400064	; 0x4f000000
 8008b5a:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 8008b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b60:	601a      	str	r2, [r3, #0]

        /* Update the ip_header_ptr and the packet and the packet prepend pointer, ip header pointer and length.  */
        /*lint -e{929} -e{740} -e{826} suppress cast from pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)word_ptr;
 8008b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b64:	653b      	str	r3, [r7, #80]	; 0x50

        /*lint -e{928} suppress cast from pointer to pointer, since it is necessary  */
        packet_ptr -> nx_packet_prepend_ptr = (UCHAR *)word_ptr;
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b6a:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	689a      	ldr	r2, [r3, #8]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	635a      	str	r2, [r3, #52]	; 0x34
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7a:	3b05      	subs	r3, #5
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	1ad2      	subs	r2, r2, r3
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	625a      	str	r2, [r3, #36]	; 0x24
    }
#endif

    /* Determine if the IP datagram is for this IP address or a broadcast IP on this
       network.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 8008b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b86:	691a      	ldr	r2, [r3, #16]
 8008b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d02f      	beq.n	8008bf0 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for incoming IP address of zero.  Incoming IP address of zero should
           be received regardless of our current IP address.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 8008b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b92:	691b      	ldr	r3, [r3, #16]
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d02b      	beq.n	8008bf0 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for IP broadcast.  */
        (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8008b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b9a:	691a      	ldr	r2, [r3, #16]
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	401a      	ands	r2, r3
          if_ptr -> nx_interface_ip_network) &&
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba4:	69db      	ldr	r3, [r3, #28]
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d10a      	bne.n	8008bc0 <_nx_ipv4_packet_receive+0x2a4>
         ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 8008baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bac:	691a      	ldr	r2, [r3, #16]
 8008bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	43db      	mvns	r3, r3
 8008bb4:	401a      	ands	r2, r3
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	43db      	mvns	r3, r3
          if_ptr -> nx_interface_ip_network) &&
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d017      	beq.n	8008bf0 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for limited broadcast.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8008bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bc2:	691b      	ldr	r3, [r3, #16]
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 8008bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc8:	d012      	beq.n	8008bf0 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for loopback address.  */
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8008bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bcc:	691b      	ldr	r3, [r3, #16]
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8008bce:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8008bd2:	d303      	bcc.n	8008bdc <_nx_ipv4_packet_receive+0x2c0>
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 8008bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bd6:	691b      	ldr	r3, [r3, #16]
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	da09      	bge.n	8008bf0 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for valid Multicast address.  */
        (_nx_igmp_multicast_check(ip_ptr, ip_header_ptr -> nx_ip_header_destination_ip, if_ptr)))
 8008bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008be2:	4619      	mov	r1, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7fd ff31 	bl	8006a4c <_nx_igmp_multicast_check>
 8008bea:	4603      	mov	r3, r0
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d076      	beq.n	8008cde <_nx_ipv4_packet_receive+0x3c2>
    {

        /* Determine if this packet is fragmented.  If so, place it on the deferred processing
           queue.  The input packet will then be processed by an IP system thread.  */
        if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_FRAGMENT_MASK)
 8008bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d046      	beq.n	8008c8a <_nx_ipv4_packet_receive+0x36e>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive fragments count.  */
            ip_ptr -> nx_ip_total_fragments_received++;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c00:	1c5a      	adds	r2, r3, #1
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	669a      	str	r2, [r3, #104]	; 0x68
#ifdef NX_ENABLE_LOW_WATERMARK
            if (ip_ptr -> nx_ip_fragment_assembly &&
                (packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_available >=
                 packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_low_watermark))
#else
            if (ip_ptr -> nx_ip_fragment_assembly)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d033      	beq.n	8008c78 <_nx_ipv4_packet_receive+0x35c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c10:	f3ef 8310 	mrs	r3, PRIMASK
 8008c14:	617b      	str	r3, [r7, #20]
    return(posture);
 8008c16:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008c18:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c1a:	b672      	cpsid	i
    return(int_posture);
 8008c1c:	693b      	ldr	r3, [r7, #16]

                /* Yes, fragmenting is available.  Place the packet on the incoming
                   fragment queue.  */

                /* Disable interrupts.  */
                TX_DISABLE
 8008c1e:	61bb      	str	r3, [r7, #24]

                /* Determine if the queue is empty.  */
                if (ip_ptr -> nx_ip_received_fragment_head)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00c      	beq.n	8008c44 <_nx_ipv4_packet_receive+0x328>
                {

                    /* Reassembly queue is not empty, add this packet to the end of
                       the queue.  */
                    (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 8008c30:	683a      	ldr	r2, [r7, #0]
 8008c32:	61da      	str	r2, [r3, #28]
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	2200      	movs	r2, #0
 8008c38:	61da      	str	r2, [r3, #28]
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
 8008c42:	e00a      	b.n	8008c5a <_nx_ipv4_packet_receive+0x33e>
                else
                {

                    /* Reassembly queue is empty.  Just setup the head and tail pointers
                       to point to this packet.  */
                    ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	683a      	ldr	r2, [r7, #0]
 8008c48:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
                    packet_ptr -> nx_packet_queue_next =      NX_NULL;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2200      	movs	r2, #0
 8008c58:	61da      	str	r2, [r3, #28]
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f383 8810 	msr	PRIMASK, r3
}
 8008c64:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
                /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
                tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2102      	movs	r1, #2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f006 fb0d 	bl	800f290 <_tx_event_flags_set>
                /* Fragmentation has not been enabled, toss the packet!  */
                _nx_packet_release(packet_ptr);
            }

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 8008c76:	e0b0      	b.n	8008dda <_nx_ipv4_packet_receive+0x4be>
                ip_ptr -> nx_ip_receive_packets_dropped++;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c7c:	1c5a      	adds	r2, r3, #1
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	64da      	str	r2, [r3, #76]	; 0x4c
                _nx_packet_release(packet_ptr);
 8008c82:	6838      	ldr	r0, [r7, #0]
 8008c84:	f000 fc48 	bl	8009518 <_nx_packet_release>
            return;
 8008c88:	e0a7      	b.n	8008dda <_nx_ipv4_packet_receive+0x4be>
        }

        /* Determine what protocol the current IP datagram is.  */
        protocol =  (ip_header_ptr -> nx_ip_header_word_2 >> 16) & 0xFF;
 8008c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	0c1b      	lsrs	r3, r3, #16
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the IP header from the packet.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f103 0214 	add.w	r2, r3, #20
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	609a      	str	r2, [r3, #8]

        /* Adjust the length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	f1a3 0214 	sub.w	r2, r3, #20
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

        /* Increment the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered++;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a1b      	ldr	r3, [r3, #32]
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	621a      	str	r2, [r3, #32]

        /* Increment the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	441a      	add	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	625a      	str	r2, [r3, #36]	; 0x24
#endif
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 8008cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7fe f9b3 	bl	8007034 <_nx_ip_dispatch_process>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 8082 	beq.w	8008dda <_nx_ipv4_packet_receive+0x4be>
        {
            _nx_packet_release(packet_ptr);
 8008cd6:	6838      	ldr	r0, [r7, #0]
 8008cd8:	f000 fc1e 	bl	8009518 <_nx_packet_release>
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 8008cdc:	e07d      	b.n	8008dda <_nx_ipv4_packet_receive+0x4be>
    }
    /* Try to receive the DHCP message before release this packet.
       NetX should receive the unicast DHCP message when interface IP address is zero.  */

    /* Check if this IP interface has IP address.  */
    else if (if_ptr -> nx_interface_ip_address == 0)
 8008cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d15a      	bne.n	8008d9c <_nx_ipv4_packet_receive+0x480>
    {

        /* Determine what protocol the current IP datagram is.  */
        protocol =  ip_header_ptr -> nx_ip_header_word_2 & NX_IP_PROTOCOL_MASK;
 8008ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008cee:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check if this packet is UDP message.  */
        if (protocol == NX_IP_UDP)
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8008cf6:	d137      	bne.n	8008d68 <_nx_ipv4_packet_receive+0x44c>
        {

            /* Remove the IP header from the packet.  */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f103 0214 	add.w	r2, r3, #20
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	609a      	str	r2, [r3, #8]

            /* Adjust the length.  */
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d08:	f1a3 0214 	sub.w	r2, r3, #20
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

            /* Increment the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered++;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a1b      	ldr	r3, [r3, #32]
 8008d14:	1c5a      	adds	r2, r3, #1
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	621a      	str	r2, [r3, #32]

            /* Increment the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d22:	441a      	add	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	625a      	str	r2, [r3, #36]	; 0x24
#endif

            /* Pickup the pointer to the head of the UDP packet.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	623b      	str	r3, [r7, #32]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008d2e:	6a3b      	ldr	r3, [r7, #32]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	ba1a      	rev	r2, r3
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	601a      	str	r2, [r3, #0]

            /* Pickup the destination UDP port.  */
            dest_port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 8008d38:	6a3b      	ldr	r3, [r7, #32]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	61fb      	str	r3, [r7, #28]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008d40:	6a3b      	ldr	r3, [r7, #32]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	ba1a      	rev	r2, r3
 8008d46:	6a3b      	ldr	r3, [r7, #32]
 8008d48:	601a      	str	r2, [r3, #0]

            /* Check if this packet is DHCP message.  */
            if (dest_port == 68)
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	2b44      	cmp	r3, #68	; 0x44
 8008d4e:	d10b      	bne.n	8008d68 <_nx_ipv4_packet_receive+0x44c>
            {
                if (ip_ptr -> nx_ip_udp_packet_receive)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d006      	beq.n	8008d68 <_nx_ipv4_packet_receive+0x44c>
                {

                    /* Yes, dispatch it to the appropriate UDP handler if present.  */
                    (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	4798      	blx	r3

                    return;
 8008d66:	e038      	b.n	8008dda <_nx_ipv4_packet_receive+0x4be>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Decrement the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered--;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	1e5a      	subs	r2, r3, #1
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	621a      	str	r2, [r3, #32]

        /* Decrement the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7a:	1ad2      	subs	r2, r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d8e:	1c5a      	adds	r2, r3, #1
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 8008d94:	6838      	ldr	r0, [r7, #0]
 8008d96:	f000 fbbf 	bl	8009518 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8008d9a:	e01e      	b.n	8008dda <_nx_ipv4_packet_receive+0x4be>
    }
    else if (ip_ptr -> nx_ip_forward_packet_process)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00b      	beq.n	8008dbe <_nx_ipv4_packet_receive+0x4a2>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packets forwarded counter.  */
        ip_ptr -> nx_ip_packets_forwarded++;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	629a      	str	r2, [r3, #40]	; 0x28
#endif

        /* The packet is not for this IP instance so call the
           forward IP packet processing routine.  */
        (ip_ptr -> nx_ip_forward_packet_process)(ip_ptr, packet_ptr);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	4798      	blx	r3
 8008dbc:	e00d      	b.n	8008dda <_nx_ipv4_packet_receive+0x4be>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dcc:	1c5a      	adds	r2, r3, #1
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 8008dd2:	6838      	ldr	r0, [r7, #0]
 8008dd4:	f000 fba0 	bl	8009518 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8008dd8:	bf00      	nop
    }
}
 8008dda:	3758      	adds	r7, #88	; 0x58
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <_nx_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                          ULONG packet_type, ULONG wait_option)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b08c      	sub	sp, #48	; 0x30
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
 8008dec:	603b      	str	r3, [r7, #0]
TX_TRACE_BUFFER_ENTRY *trace_event;
ULONG                  trace_timestamp;
#endif

    /* Make sure the packet_type does not go beyond nx_packet_data_end. */
    if (pool_ptr -> nx_packet_pool_payload_size < packet_type)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d901      	bls.n	8008dfc <_nx_packet_allocate+0x1c>
    {
        return(NX_INVALID_PARAMETERS);
 8008df8:	234d      	movs	r3, #77	; 0x4d
 8008dfa:	e0b1      	b.n	8008f60 <_nx_packet_allocate+0x180>
    }

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e02:	f3ef 8310 	mrs	r3, PRIMASK
 8008e06:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008e08:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8008e0a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e0c:	b672      	cpsid	i
    return(int_posture);
 8008e0e:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_ALLOCATE, pool_ptr, 0, packet_type, pool_ptr -> nx_packet_pool_available, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Disable interrupts to get a packet from the pool.  */
    TX_DISABLE
 8008e10:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there is an available packet.  */
    if (pool_ptr -> nx_packet_pool_available)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d03d      	beq.n	8008e96 <_nx_packet_allocate+0xb6>
    {

        /* Yes, a packet is available.  Decrement the available count.  */
        pool_ptr -> nx_packet_pool_available--;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	1e5a      	subs	r2, r3, #1
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	609a      	str	r2, [r3, #8]

        /* Pickup the current packet pointer.  */
        work_ptr =  pool_ptr -> nx_packet_pool_available_list;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	69db      	ldr	r3, [r3, #28]
 8008e28:	623b      	str	r3, [r7, #32]

        /* Modify the available list to point at the next packet in the pool. */
        pool_ptr -> nx_packet_pool_available_list =  work_ptr -> nx_packet_queue_next;
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	69da      	ldr	r2, [r3, #28]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	61da      	str	r2, [r3, #28]

        /* Setup various fields for this packet.  */
        work_ptr -> nx_packet_queue_next =   NX_NULL;
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	2200      	movs	r2, #0
 8008e36:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
        work_ptr -> nx_packet_next =         NX_NULL;
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	605a      	str	r2, [r3, #4]
        work_ptr -> nx_packet_last =         NX_NULL;
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	2200      	movs	r2, #0
 8008e42:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr -> nx_packet_length =       0;
 8008e44:	6a3b      	ldr	r3, [r7, #32]
 8008e46:	2200      	movs	r2, #0
 8008e48:	625a      	str	r2, [r3, #36]	; 0x24
        work_ptr -> nx_packet_prepend_ptr =  work_ptr -> nx_packet_data_start + packet_type;
 8008e4a:	6a3b      	ldr	r3, [r7, #32]
 8008e4c:	691a      	ldr	r2, [r3, #16]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	441a      	add	r2, r3
 8008e52:	6a3b      	ldr	r3, [r7, #32]
 8008e54:	609a      	str	r2, [r3, #8]
        work_ptr -> nx_packet_append_ptr =   work_ptr -> nx_packet_prepend_ptr;
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	689a      	ldr	r2, [r3, #8]
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	60da      	str	r2, [r3, #12]
        work_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	2200      	movs	r2, #0
 8008e62:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        work_ptr -> nx_packet_interface_capability_flag = 0;
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	2200      	movs	r2, #0
 8008e68:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
        /* Set the TCP queue to the value that indicates it has been allocated.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8008e70:	621a      	str	r2, [r3, #32]
        work_ptr -> nx_packet_ipsec_sa_ptr = NX_NULL;
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Initialize the IP version field */
        work_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	2204      	movs	r2, #4
 8008e76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#endif /* !NX_DISABLE_IPV4  */

        /* Initialize the IP identification flag.  */
        work_ptr -> nx_packet_identical_copy = NX_FALSE;
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Initialize the IP header length. */
        work_ptr -> nx_packet_ip_header_length = 0;
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
#ifdef NX_ENABLE_THREAD
        work_ptr -> nx_packet_type = 0;
#endif /* NX_ENABLE_THREAD  */

        /* Place the new packet pointer in the return destination.  */
        *packet_ptr =  work_ptr;
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	6a3a      	ldr	r2, [r7, #32]
 8008e8e:	601a      	str	r2, [r3, #0]

        /* Set status to success.  */
        status =  NX_SUCCESS;
 8008e90:	2300      	movs	r3, #0
 8008e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e94:	e05d      	b.n	8008f52 <_nx_packet_allocate+0x172>
    else
    {

#ifndef NX_DISABLE_PACKET_INFO
        /* Increment the packet pool empty request count.  */
        pool_ptr -> nx_packet_pool_empty_requests++;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	1c5a      	adds	r2, r3, #1
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	611a      	str	r2, [r3, #16]
#endif

        /* Determine if the request specifies suspension.  */
        if (wait_option)
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d053      	beq.n	8008f4e <_nx_packet_allocate+0x16e>

            /* Prepare for suspension of this thread.  */

#ifndef NX_DISABLE_PACKET_INFO
            /* Increment the packet pool empty request suspension count.  */
            pool_ptr -> nx_packet_pool_empty_suspensions++;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	1c5a      	adds	r2, r3, #1
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	615a      	str	r2, [r3, #20]
#endif

            /* Pickup thread pointer.  */
            thread_ptr =  _tx_thread_current_ptr;
 8008eb0:	4b2d      	ldr	r3, [pc, #180]	; (8008f68 <_nx_packet_allocate+0x188>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  _nx_packet_pool_cleanup;
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	4a2c      	ldr	r2, [pc, #176]	; (8008f6c <_nx_packet_allocate+0x18c>)
 8008eba:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this pool control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (void *)pool_ptr;
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Save the return packet pointer address as well.  */
            thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	67da      	str	r2, [r3, #124]	; 0x7c

            /* Save the packet type (or prepend offset) so this can be added
               after a new packet becomes available.  */
            thread_ptr -> tx_thread_suspend_info =  packet_type;
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	679a      	str	r2, [r3, #120]	; 0x78

            /* Setup suspension list.  */
            if (pool_ptr -> nx_packet_pool_suspension_list)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d012      	beq.n	8008efc <_nx_packet_allocate+0x11c>
            {

                /* This list is not NULL, add current thread to the end. */
                thread_ptr -> tx_thread_suspended_next =
                    pool_ptr -> nx_packet_pool_suspension_list;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =
                    (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	675a      	str	r2, [r3, #116]	; 0x74
                ((pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef0:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr;
                (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef8:	675a      	str	r2, [r3, #116]	; 0x74
 8008efa:	e008      	b.n	8008f0e <_nx_packet_allocate+0x12e>
            else
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f00:	62da      	str	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =            thread_ptr;
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f06:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =        thread_ptr;
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f0c:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            pool_ptr -> nx_packet_pool_suspended_count++;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	220c      	movs	r2, #12
 8008f1c:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f20:	2201      	movs	r2, #1
 8008f22:	639a      	str	r2, [r3, #56]	; 0x38

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008f24:	4b12      	ldr	r3, [pc, #72]	; (8008f70 <_nx_packet_allocate+0x190>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	4a11      	ldr	r2, [pc, #68]	; (8008f70 <_nx_packet_allocate+0x190>)
 8008f2c:	6013      	str	r3, [r2, #0]

            /* Save the timeout value.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	64da      	str	r2, [r3, #76]	; 0x4c
 8008f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f36:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f383 8810 	msr	PRIMASK, r3
}
 8008f3e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8008f40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f42:	f007 fe6b 	bl	8010c1c <_tx_thread_system_suspend>
                NX_PACKET_DEBUG(__FILE__, __LINE__, *packet_ptr);
            }
#endif /* NX_ENABLE_PACKET_DEBUG_INFO */

            /* Return the completion status.  */
            return(thread_ptr -> tx_thread_suspend_status);
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f4c:	e008      	b.n	8008f60 <_nx_packet_allocate+0x180>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  NX_NO_PACKET;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f54:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f383 8810 	msr	PRIMASK, r3
}
 8008f5c:	bf00      	nop

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_ALLOCATE, 0, *packet_ptr, 0, 0);

    /* Return completion status.  */
    return(status);
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3730      	adds	r7, #48	; 0x30
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	20008094 	.word	0x20008094
 8008f6c:	0800928d 	.word	0x0800928d
 8008f70:	2000812c 	.word	0x2000812c

08008f74 <_nx_packet_copy>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_copy(NX_PACKET *packet_ptr, NX_PACKET **new_packet_ptr,
                      NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08e      	sub	sp, #56	; 0x38
 8008f78:	af02      	add	r7, sp, #8
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
 8008f80:	603b      	str	r3, [r7, #0]
ULONG                  trace_timestamp;
#endif


    /* Default the return packet pointer to NULL.  */
    *new_packet_ptr =  NX_NULL;
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2200      	movs	r2, #0
 8008f86:	601a      	str	r2, [r3, #0]

    /* Default the first packet to TRUE.  */
    first_packet = NX_TRUE;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_COPY, packet_ptr, 0, pool_ptr, wait_option, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Determine if there is anything to copy.  */
    if (packet_ptr -> nx_packet_length == 0)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <_nx_packet_copy+0x24>
    {

        /* Empty source packet, return an error.  */
        return(NX_INVALID_PACKET);
 8008f94:	2312      	movs	r3, #18
 8008f96:	e079      	b.n	800908c <_nx_packet_copy+0x118>
    }

    /* Allocate a new packet from the default packet pool supplied.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 8008f98:	f107 0114 	add.w	r1, r7, #20
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7ff ff1d 	bl	8008de0 <_nx_packet_allocate>
 8008fa6:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the packet was not allocated.  */
    if (status != NX_SUCCESS)
 8008fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d001      	beq.n	8008fb2 <_nx_packet_copy+0x3e>
    {

        /* Return the error code from the packet allocate routine.  */
        return(status);
 8008fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb0:	e06c      	b.n	800908c <_nx_packet_copy+0x118>
    }

    /* Copy the packet interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized by _nx_packet_allocate. */
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008fb8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* FEATURE_NX_IPV6 */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

    /* Copy the packet interface capability. */
    work_ptr -> nx_packet_interface_capability_flag = packet_ptr -> nx_packet_interface_capability_flag;
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008fc0:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef NX_IPSEC_ENABLE
    work_ptr -> nx_packet_ipsec_sa_ptr = packet_ptr -> nx_packet_ipsec_sa_ptr;
#endif /* NX_IPSEC_ENABLE */

    /* Save the source packet pointer.  */
    source_ptr =  packet_ptr;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	627b      	str	r3, [r7, #36]	; 0x24
    do
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check if it is the first packet.  */
        if (first_packet == NX_TRUE)
 8008fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d110      	bne.n	8008fee <_nx_packet_copy+0x7a>

            /* Yes, it is, copied the data beginning at data starting position.  */

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_data_start);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	68da      	ldr	r2, [r3, #12]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 8008fd8:	6978      	ldr	r0, [r7, #20]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6919      	ldr	r1, [r3, #16]
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a3a      	ldr	r2, [r7, #32]
 8008fe6:	f000 f855 	bl	8009094 <_nx_packet_data_append>
 8008fea:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008fec:	e00f      	b.n	800900e <_nx_packet_copy+0x9a>
        else
        {

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_prepend_ptr, size, pool_ptr, wait_option);
 8008ffa:	6978      	ldr	r0, [r7, #20]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6899      	ldr	r1, [r3, #8]
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a3a      	ldr	r2, [r7, #32]
 8009008:	f000 f844 	bl	8009094 <_nx_packet_data_append>
 800900c:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        /* Determine if there was an error in the data append.  */
        if (status != NX_SUCCESS)
 800900e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009010:	2b00      	cmp	r3, #0
 8009012:	d005      	beq.n	8009020 <_nx_packet_copy+0xac>
        {

            /* An error is present, release the new packet.  */
            _nx_packet_release(work_ptr);
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	4618      	mov	r0, r3
 8009018:	f000 fa7e 	bl	8009518 <_nx_packet_release>

            /* Return the error code from the packet data append service.  */
            return(status);
 800901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901e:	e035      	b.n	800908c <_nx_packet_copy+0x118>
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the packet chain.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	60fb      	str	r3, [r7, #12]

        /* Set the first packet to FALSE.  */
        first_packet = NX_FALSE;
 8009026:	2300      	movs	r3, #0
 8009028:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (packet_ptr);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1ca      	bne.n	8008fc6 <_nx_packet_copy+0x52>
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Adjust the prepend pointer and data length.  */
    /*lint --e{946} --e{947} --e{732} suppress pointer subtraction, since it is necessary. */
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	689a      	ldr	r2, [r3, #8]
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	61fb      	str	r3, [r7, #28]
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	6919      	ldr	r1, [r3, #16]
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	69fa      	ldr	r2, [r7, #28]
 8009044:	440a      	add	r2, r1
 8009046:	609a      	str	r2, [r3, #8]
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	69fa      	ldr	r2, [r7, #28]
 8009050:	1a8a      	subs	r2, r1, r2
 8009052:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the ip_header information. */
    ip_header_offset = (UINT)(source_ptr -> nx_packet_ip_header - source_ptr -> nx_packet_data_start);
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	61bb      	str	r3, [r7, #24]
    work_ptr -> nx_packet_ip_header = work_ptr -> nx_packet_data_start + ip_header_offset;
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	6919      	ldr	r1, [r3, #16]
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	69ba      	ldr	r2, [r7, #24]
 8009068:	440a      	add	r2, r1
 800906a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Determine if the packet copy was successful.  */
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009074:	429a      	cmp	r2, r3
 8009076:	d005      	beq.n	8009084 <_nx_packet_copy+0x110>
    {

        /* An error is present, release the new packet.  */
        _nx_packet_release(work_ptr);
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	4618      	mov	r0, r3
 800907c:	f000 fa4c 	bl	8009518 <_nx_packet_release>

        /* Return an error code.  */
        return(NX_INVALID_PACKET);
 8009080:	2312      	movs	r3, #18
 8009082:	e003      	b.n	800908c <_nx_packet_copy+0x118>
    }
    else
    {

        /* Everything is okay, return the new packet pointer.  */
        *new_packet_ptr =  work_ptr;
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	601a      	str	r2, [r3, #0]

        /* Update the trace event with the status.  */
        NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_COPY, 0, work_ptr, 0, 0);

        /* Return success status.  */
        return(NX_SUCCESS);
 800908a:	2300      	movs	r3, #0
    }
}
 800908c:	4618      	mov	r0, r3
 800908e:	3730      	adds	r7, #48	; 0x30
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <_nx_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                             NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b08c      	sub	sp, #48	; 0x30
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
 80090a0:	603b      	str	r3, [r7, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
UINT       status;                 /* Return status              */
NX_PACKET *new_list_ptr;           /* Head of new list pointer   */
NX_PACKET *last_packet =  NX_NULL; /* Last supplied packet       */
 80090a2:	2300      	movs	r3, #0
 80090a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_APPEND, packet_ptr, data_start, data_size, pool_ptr, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Calculate the number of bytes available at the end of the supplied packet.  */
    if (packet_ptr -> nx_packet_last)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d016      	beq.n	80090dc <_nx_packet_data_append+0x48>
    {

        /* More than one packet.  Walk the packet chain starting at the last packet
           to calculate the remaining bytes.  */
        available_bytes =  0;
 80090ae:	2300      	movs	r3, #0
 80090b0:	627b      	str	r3, [r7, #36]	; 0x24
        work_ptr =  packet_ptr -> nx_packet_last;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	617b      	str	r3, [r7, #20]

            /* Calculate the available bytes in this packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	695a      	ldr	r2, [r3, #20]
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 80090c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c6:	4413      	add	r3, r2
 80090c8:	627b      	str	r3, [r7, #36]	; 0x24

            /* Remember the last packet.  */
            last_packet =  work_ptr;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Move to the next packet.   There typically won't be another packet, but just in
               case the logic is here for it!  */
            work_ptr =  work_ptr -> nx_packet_next;
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	617b      	str	r3, [r7, #20]
        } while (work_ptr);
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1ee      	bne.n	80090b8 <_nx_packet_data_append+0x24>
 80090da:	e005      	b.n	80090e8 <_nx_packet_data_append+0x54>
#endif /* NX_DISABLE_PACKET_CHAIN */
    {

        /* Just calculate the number of bytes available in the first packet.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        available_bytes =  (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_append_ptr);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	695a      	ldr	r2, [r3, #20]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Determine if any new packets are required to satisfy this request. */
    if (available_bytes < data_size)
 80090e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d247      	bcs.n	8009180 <_nx_packet_data_append+0xec>
    {

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Setup a temporary head pointer.  */
        new_list_ptr =  NX_NULL;
 80090f0:	2300      	movs	r3, #0
 80090f2:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Loop to pickup enough packets to complete the append request.  */
        while (available_bytes < data_size)
 80090f4:	e033      	b.n	800915e <_nx_packet_data_append+0xca>
        {

            /* Allocate a new packet.  */
            status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 80090f6:	f107 0114 	add.w	r1, r7, #20
 80090fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fc:	2200      	movs	r2, #0
 80090fe:	6838      	ldr	r0, [r7, #0]
 8009100:	f7ff fe6e 	bl	8008de0 <_nx_packet_allocate>
 8009104:	61b8      	str	r0, [r7, #24]

            /* Determine if an error is present.  */
            if (status)
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d007      	beq.n	800911c <_nx_packet_data_append+0x88>
            {

                /* Yes, an error is present.   */

                /* First release any packets that have been allocated so far.  */
                if (new_list_ptr)
 800910c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910e:	2b00      	cmp	r3, #0
 8009110:	d002      	beq.n	8009118 <_nx_packet_data_append+0x84>
                {
                    _nx_packet_release(new_list_ptr);
 8009112:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009114:	f000 fa00 	bl	8009518 <_nx_packet_release>
                }

                /* Return the error status to the caller of this service.  */
                return(status);
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	e078      	b.n	800920e <_nx_packet_data_append+0x17a>

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, work_ptr);

            /* No error is present.  Link the new packet to the temporary list being built.  */
            if (new_list_ptr)
 800911c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911e:	2b00      	cmp	r3, #0
 8009120:	d012      	beq.n	8009148 <_nx_packet_data_append+0xb4>
            {

                /* Determine if there is already more than one packet on the list.  */
                if (new_list_ptr -> nx_packet_last)
 8009122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d007      	beq.n	800913a <_nx_packet_data_append+0xa6>
                {

                    /* Yes, link up the last packet to the new packet and update the
                       last pointer.  */
                    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized in _nx_packet_allocate. */
                    (new_list_ptr -> nx_packet_last) -> nx_packet_next =  work_ptr;
 800912a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	605a      	str	r2, [r3, #4]
                    new_list_ptr -> nx_packet_last =  work_ptr;
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009136:	619a      	str	r2, [r3, #24]
 8009138:	e008      	b.n	800914c <_nx_packet_data_append+0xb8>
                else
                {

                    /* Second packet allocated.  Just setup the last and next in the
                       head pointer.  */
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913e:	619a      	str	r2, [r3, #24]
                    new_list_ptr -> nx_packet_next =  work_ptr;
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009144:	605a      	str	r2, [r3, #4]
 8009146:	e001      	b.n	800914c <_nx_packet_data_append+0xb8>
            }
            else
            {

                /* Just setup the temporary list head.  */
                new_list_ptr =  work_ptr;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	62fb      	str	r3, [r7, #44]	; 0x2c
               is in the new packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            /*lint -e{613} suppress possible use of null pointer, since "work_ptr" was set in _nx_packet_allocate. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	695a      	ldr	r2, [r3, #20]
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915a:	4413      	add	r3, r2
 800915c:	627b      	str	r3, [r7, #36]	; 0x24
        while (available_bytes < data_size)
 800915e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	429a      	cmp	r2, r3
 8009164:	d3c7      	bcc.n	80090f6 <_nx_packet_data_append+0x62>
        }

        /* At this point, all the necessary packets have been allocated and are present
           on the temporary list.  We need to link this new list to the end of the supplied
           packet.  */
        if (last_packet)
 8009166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009168:	2b00      	cmp	r3, #0
 800916a:	d003      	beq.n	8009174 <_nx_packet_data_append+0xe0>
        {

            /* Already more than one packet.  Add the new packet list to the end.  */
            last_packet -> nx_packet_next =  new_list_ptr;
 800916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009170:	605a      	str	r2, [r3, #4]
 8009172:	e002      	b.n	800917a <_nx_packet_data_append+0xe6>
        }
        else
        {

            /* Link the new packet list to the head packet.  */
            packet_ptr -> nx_packet_next =  new_list_ptr;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009178:	605a      	str	r2, [r3, #4]
        }

        /* Clear the last packet that was used to maintain the new list.  */
        /*lint -e{613} suppress possible use of null pointer, since "new_list_ptr" was set in previous loop. */
        new_list_ptr -> nx_packet_last =  NX_NULL;
 800917a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917c:	2200      	movs	r2, #0
 800917e:	619a      	str	r2, [r3, #24]
        return(NX_SIZE_ERROR);
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Setup the new data length in the packet.  */
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	441a      	add	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Now copy the supplied data buffer at the end of the packet.  */
    source_ptr =  (UCHAR *)data_start;
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	61fb      	str	r3, [r7, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
    if (packet_ptr -> nx_packet_last)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d003      	beq.n	80091a0 <_nx_packet_data_append+0x10c>
    {
        work_ptr =    packet_ptr -> nx_packet_last;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	617b      	str	r3, [r7, #20]
 800919e:	e032      	b.n	8009206 <_nx_packet_data_append+0x172>
    }
    else
    {
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr =    packet_ptr;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	617b      	str	r3, [r7, #20]
#ifndef NX_DISABLE_PACKET_CHAIN
    }
    while (data_size)
 80091a4:	e02f      	b.n	8009206 <_nx_packet_data_append+0x172>
    {

        /* Determine the amount of memory to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	695a      	ldr	r2, [r3, #20]
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	461a      	mov	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d202      	bcs.n	80091be <_nx_packet_data_append+0x12a>
        {
            copy_size =  data_size;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	623b      	str	r3, [r7, #32]
 80091bc:	e005      	b.n	80091ca <_nx_packet_data_append+0x136>
        }
        else
        {

            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            copy_size =  (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	695a      	ldr	r2, [r3, #20]
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	623b      	str	r3, [r7, #32]
#else
        copy_size = data_size;
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Copy the data into the current packet buffer.  */
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size); /* Use case of memcpy is verified.  lgtm[cpp/banned-api-usage-required-any] */
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	6a3a      	ldr	r2, [r7, #32]
 80091d0:	69f9      	ldr	r1, [r7, #28]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f009 f8eb 	bl	80123ae <memcpy>

        /* Adjust the remaining data size.  */
        data_size =  data_size - copy_size;
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	6a3b      	ldr	r3, [r7, #32]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	607b      	str	r3, [r7, #4]

        /* Update this packets append pointer.  */
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	68d9      	ldr	r1, [r3, #12]
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	6a3a      	ldr	r2, [r7, #32]
 80091e8:	440a      	add	r2, r1
 80091ea:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Any more data left to append?  */
        if (data_size)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d009      	beq.n	8009206 <_nx_packet_data_append+0x172>
        {

            /* Yes, there is more to move.  Update the source pointer, move the work pointer
               to the next packet in the chain and update the last packet pointer.  */
            source_ptr =  source_ptr + copy_size;
 80091f2:	69fa      	ldr	r2, [r7, #28]
 80091f4:	6a3b      	ldr	r3, [r7, #32]
 80091f6:	4413      	add	r3, r2
 80091f8:	61fb      	str	r3, [r7, #28]
            work_ptr =  work_ptr -> nx_packet_next;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	617b      	str	r3, [r7, #20]
            packet_ptr -> nx_packet_last =  work_ptr;
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	619a      	str	r2, [r3, #24]
    while (data_size)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1cc      	bne.n	80091a6 <_nx_packet_data_append+0x112>

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Return successful status.  */
    return(NX_SUCCESS);
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3730      	adds	r7, #48	; 0x30
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <_nx_packet_data_retrieve>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_retrieve(NX_PACKET *packet_ptr, VOID *buffer_start, ULONG *bytes_copied)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b088      	sub	sp, #32
 800921a:	af00      	add	r7, sp, #0
 800921c:	60f8      	str	r0, [r7, #12]
 800921e:	60b9      	str	r1, [r7, #8]
 8009220:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_RETRIEVE, packet_ptr, buffer_start, bytes_copied, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Setup the destination pointer.  */
    destination_ptr =  buffer_start;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	61bb      	str	r3, [r7, #24]

    /* Pickup the amount of bytes to copy.  */
    *bytes_copied =  packet_ptr -> nx_packet_length;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	601a      	str	r2, [r3, #0]

    /* Setup the remaining bytes.  */
    remaining_bytes =  packet_ptr -> nx_packet_length;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009232:	61fb      	str	r3, [r7, #28]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to copy bytes from packet(s).  */
    while (packet_ptr)
 8009234:	e017      	b.n	8009266 <_nx_packet_data_retrieve+0x50>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Calculate the bytes to copy in this packet. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        bytes_to_copy = (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	68da      	ldr	r2, [r3, #12]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	617b      	str	r3, [r7, #20]

        /* Copy data to destination. */
        /* Note: The buffer size must be not less than packet_ptr -> nx_packet_length.  */
        memcpy(destination_ptr, packet_ptr -> nx_packet_prepend_ptr, bytes_to_copy); /* Use case of memcpy is verified. The buffer is provided by user.  lgtm[cpp/banned-api-usage-required-any] */
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	4619      	mov	r1, r3
 800924a:	69b8      	ldr	r0, [r7, #24]
 800924c:	f009 f8af 	bl	80123ae <memcpy>

        remaining_bytes -= bytes_to_copy;
 8009250:	69fa      	ldr	r2, [r7, #28]
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	61fb      	str	r3, [r7, #28]
        destination_ptr += bytes_to_copy;
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	4413      	add	r3, r2
 800925e:	61bb      	str	r3, [r7, #24]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to next packet.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	60fb      	str	r3, [r7, #12]
    while (packet_ptr)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e4      	bne.n	8009236 <_nx_packet_data_retrieve+0x20>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if the packet chain was valid.  */
    if (remaining_bytes)
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d007      	beq.n	8009282 <_nx_packet_data_retrieve+0x6c>
    {

        /* Invalid packet chain.  Calculate the actual number of bytes
           copied.  */
        *bytes_copied =  *bytes_copied - remaining_bytes;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	1ad2      	subs	r2, r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	601a      	str	r2, [r3, #0]

        /* Return an error.  */
        return(NX_INVALID_PACKET);
 800927e:	2312      	movs	r3, #18
 8009280:	e000      	b.n	8009284 <_nx_packet_data_retrieve+0x6e>
    }

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3720      	adds	r7, #32
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <_nx_packet_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_packet_pool_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b088      	sub	sp, #32
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
NX_PACKET_POOL *pool_ptr;   /* Working packet pool pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to packet pool control block.  */
    pool_ptr =  (NX_PACKET_POOL *)thread_ptr -> tx_thread_suspend_control_block;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800929a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800929c:	f3ef 8310 	mrs	r3, PRIMASK
 80092a0:	617b      	str	r3, [r7, #20]
    return(posture);
 80092a2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80092a4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80092a6:	b672      	cpsid	i
    return(int_posture);
 80092a8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the packet pool.  */
    TX_DISABLE
 80092aa:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d042      	beq.n	800933a <_nx_packet_pool_cleanup+0xae>
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d03f      	beq.n	800933a <_nx_packet_pool_cleanup+0xae>
        (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 80092be:	4a23      	ldr	r2, [pc, #140]	; (800934c <_nx_packet_pool_cleanup+0xc0>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d13a      	bne.n	800933a <_nx_packet_pool_cleanup+0xae>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d103      	bne.n	80092dc <_nx_packet_pool_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	2200      	movs	r2, #0
 80092d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80092da:	e012      	b.n	8009302 <_nx_packet_pool_cleanup+0x76>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer if necessary.  */
            if (pool_ptr -> nx_packet_pool_suspension_list == thread_ptr)
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d103      	bne.n	80092ee <_nx_packet_pool_cleanup+0x62>
            {
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	62da      	str	r2, [r3, #44]	; 0x2c
            }

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80092f6:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009300:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009306:	1e5a      	subs	r2, r3, #1
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009310:	2b0c      	cmp	r3, #12
 8009312:	d112      	bne.n	800933a <_nx_packet_pool_cleanup+0xae>

            /* Thread still suspended on the packet pool.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800931c:	4b0c      	ldr	r3, [pc, #48]	; (8009350 <_nx_packet_pool_cleanup+0xc4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3301      	adds	r3, #1
 8009322:	4a0b      	ldr	r2, [pc, #44]	; (8009350 <_nx_packet_pool_cleanup+0xc4>)
 8009324:	6013      	str	r3, [r2, #0]
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f383 8810 	msr	PRIMASK, r3
}
 8009330:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f007 fb72 	bl	8010a1c <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8009338:	e005      	b.n	8009346 <_nx_packet_pool_cleanup+0xba>
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f383 8810 	msr	PRIMASK, r3
}
 8009344:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8009346:	3720      	adds	r7, #32
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	5041434b 	.word	0x5041434b
 8009350:	2000812c 	.word	0x2000812c

08009354 <_nx_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                             VOID *pool_start, ULONG pool_size)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b092      	sub	sp, #72	; 0x48
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
 8009360:	603b      	str	r3, [r7, #0]
CHAR           *payload_address;       /* Address of the first payload*/
VOID           *rounded_pool_start;    /* Rounded stating address     */


    /* Save the original payload size.  */
    original_payload_size =  payload_size;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	3303      	adds	r3, #3
 800936a:	f023 0303 	bic.w	r3, r3, #3
 800936e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8009370:	683a      	ldr	r2, [r7, #0]
 8009372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009374:	1ad2      	subs	r2, r2, r3
 8009376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009378:	4413      	add	r3, r2
 800937a:	f023 0303 	bic.w	r3, r3, #3
 800937e:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the pool starting address. */
    pool_start = rounded_pool_start;
 8009380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009382:	603b      	str	r3, [r7, #0]

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 8009384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009386:	333c      	adds	r3, #60	; 0x3c
 8009388:	633b      	str	r3, [r7, #48]	; 0x30

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800938a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938c:	3303      	adds	r3, #3
 800938e:	f023 0303 	bic.w	r3, r3, #3
 8009392:	633b      	str	r3, [r7, #48]	; 0x30

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 8009394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    payload_size = (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 800939c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4413      	add	r3, r2
 80093a2:	3303      	adds	r3, #3
 80093a4:	f023 0203 	bic.w	r2, r3, #3
 80093a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	607b      	str	r3, [r7, #4]

    /* Clear pool fields. */
    memset(pool_ptr, 0, sizeof(NX_PACKET_POOL));
 80093ae:	223c      	movs	r2, #60	; 0x3c
 80093b0:	2100      	movs	r1, #0
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f008 ff80 	bl	80122b8 <memset>

    /* Setup the basic packet pool fields.  */
    pool_ptr -> nx_packet_pool_name =             name_ptr;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	605a      	str	r2, [r3, #4]
    pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	62da      	str	r2, [r3, #44]	; 0x2c
    pool_ptr -> nx_packet_pool_suspended_count =  0;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	631a      	str	r2, [r3, #48]	; 0x30
    pool_ptr -> nx_packet_pool_start =            (CHAR *)pool_start;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	621a      	str	r2, [r3, #32]
    pool_ptr -> nx_packet_pool_size =             pool_size;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80093d4:	625a      	str	r2, [r3, #36]	; 0x24
    pool_ptr -> nx_packet_pool_payload_size =     original_payload_size;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Calculate the end of the pool's memory area.  */
    end_of_pool =  ((CHAR *)pool_start) + pool_size;
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093e0:	4413      	add	r3, r2
 80093e2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Walk through the pool area, setting up the available packet list.  */
    packets =            0;
 80093e4:	2300      	movs	r3, #0
 80093e6:	647b      	str	r3, [r7, #68]	; 0x44
    packet_ptr =         (CHAR *)rounded_pool_start;
 80093e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ea:	643b      	str	r3, [r7, #64]	; 0x40
    next_packet_ptr =    packet_ptr + (payload_size + header_size);
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f0:	4413      	add	r3, r2
 80093f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093f4:	4413      	add	r3, r2
 80093f6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    while (next_packet_ptr <= end_of_pool)
 80093f8:	e023      	b.n	8009442 <_nx_packet_pool_create+0xee>
    {

        /* Yes, we have another packet.  Increment the packet count.  */
        packets++;
 80093fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093fc:	3301      	adds	r3, #1
 80093fe:	647b      	str	r3, [r7, #68]	; 0x44

        /* Setup the link to the next packet.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  (NX_PACKET *)next_packet_ptr;
 8009400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009402:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009404:	61da      	str	r2, [r3, #28]

        /* Remember that this packet pool is the owner.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_pool_owner =  pool_ptr;
 8009406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	601a      	str	r2, [r3, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Clear the next packet pointer.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
 800940c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800940e:	2200      	movs	r2, #0
 8009410:	605a      	str	r2, [r3, #4]
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Mark the packet as free.  */
        /*lint -e{929} -e{923} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 8009412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009414:	f04f 32ff 	mov.w	r2, #4294967295
 8009418:	621a      	str	r2, [r3, #32]

        /* Setup the packet data pointers.  */
        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_start =  (UCHAR *)(packet_ptr + header_size);
 800941a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800941c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941e:	441a      	add	r2, r3
 8009420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009422:	611a      	str	r2, [r3, #16]

        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 8009424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009428:	4413      	add	r3, r2
 800942a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800942c:	441a      	add	r2, r3
 800942e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009430:	615a      	str	r2, [r3, #20]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, (NX_PACKET *)packet_ptr);

        /* Advance to the next packet.  */
        packet_ptr =   next_packet_ptr;
 8009432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009434:	643b      	str	r3, [r7, #64]	; 0x40

        /* Update the next packet pointer.  */
        next_packet_ptr =  packet_ptr + (payload_size + header_size);
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943a:	4413      	add	r3, r2
 800943c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800943e:	4413      	add	r3, r2
 8009440:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (next_packet_ptr <= end_of_pool)
 8009442:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009446:	429a      	cmp	r2, r3
 8009448:	d9d7      	bls.n	80093fa <_nx_packet_pool_create+0xa6>
    }

    /* Backup to the last packet in the pool.  */
    packet_ptr =  packet_ptr - (payload_size + header_size);
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944e:	4413      	add	r3, r2
 8009450:	425b      	negs	r3, r3
 8009452:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009454:	4413      	add	r3, r2
 8009456:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the last packet's forward pointer to NULL.  */
    /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  NX_NULL;
 8009458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800945a:	2200      	movs	r2, #0
 800945c:	61da      	str	r2, [r3, #28]

    /* Save the remaining information in the pool control packet.  */
    pool_ptr -> nx_packet_pool_available =  packets;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009462:	609a      	str	r2, [r3, #8]
    pool_ptr -> nx_packet_pool_total =      packets;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009468:	60da      	str	r2, [r3, #12]

    /* Set the packet pool available list.  */
    pool_ptr -> nx_packet_pool_available_list =  (NX_PACKET *)pool_start;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	61da      	str	r2, [r3, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009470:	f3ef 8310 	mrs	r3, PRIMASK
 8009474:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009476:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009478:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800947a:	b672      	cpsid	i
    return(int_posture);
 800947c:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_POOL_CREATE, pool_ptr, payload_size, pool_start, pool_size, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts to place the packet pool on the created list.  */
    TX_DISABLE
 800947e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the packet pool ID to make it valid.  */
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	4a19      	ldr	r2, [pc, #100]	; (80094e8 <_nx_packet_pool_create+0x194>)
 8009484:	601a      	str	r2, [r3, #0]

    /* Place the packet pool on the list of created packet pools.  First,
       check for an empty list.  */
    if (_nx_packet_pool_created_ptr)
 8009486:	4b19      	ldr	r3, [pc, #100]	; (80094ec <_nx_packet_pool_create+0x198>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d012      	beq.n	80094b4 <_nx_packet_pool_create+0x160>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous;
 800948e:	4b17      	ldr	r3, [pc, #92]	; (80094ec <_nx_packet_pool_create+0x198>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009494:	623b      	str	r3, [r7, #32]

        /* Place the new packet pool in the list.  */
        _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 8009496:	4b15      	ldr	r3, [pc, #84]	; (80094ec <_nx_packet_pool_create+0x198>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	639a      	str	r2, [r3, #56]	; 0x38
        tail_ptr -> nx_packet_pool_created_next =  pool_ptr;
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup this packet pool's created links.  */
        pool_ptr -> nx_packet_pool_created_previous =  tail_ptr;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6a3a      	ldr	r2, [r7, #32]
 80094a8:	639a      	str	r2, [r3, #56]	; 0x38
        pool_ptr -> nx_packet_pool_created_next =      _nx_packet_pool_created_ptr;
 80094aa:	4b10      	ldr	r3, [pc, #64]	; (80094ec <_nx_packet_pool_create+0x198>)
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	635a      	str	r2, [r3, #52]	; 0x34
 80094b2:	e008      	b.n	80094c6 <_nx_packet_pool_create+0x172>
    }
    else
    {

        /* The created packet pool list is empty.  Add packet pool to empty list.  */
        _nx_packet_pool_created_ptr =                  pool_ptr;
 80094b4:	4a0d      	ldr	r2, [pc, #52]	; (80094ec <_nx_packet_pool_create+0x198>)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6013      	str	r3, [r2, #0]
        pool_ptr -> nx_packet_pool_created_next =      pool_ptr;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	635a      	str	r2, [r3, #52]	; 0x34
        pool_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Increment the number of packet pools created.  */
    _nx_packet_pool_created_count++;
 80094c6:	4b0a      	ldr	r3, [pc, #40]	; (80094f0 <_nx_packet_pool_create+0x19c>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3301      	adds	r3, #1
 80094cc:	4a08      	ldr	r2, [pc, #32]	; (80094f0 <_nx_packet_pool_create+0x19c>)
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	f383 8810 	msr	PRIMASK, r3
}
 80094da:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3748      	adds	r7, #72	; 0x48
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	5041434b 	.word	0x5041434b
 80094ec:	20008030 	.word	0x20008030
 80094f0:	20008034 	.word	0x20008034

080094f4 <_nx_packet_pool_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _nx_packet_pool_initialize(VOID)
{
 80094f4:	b480      	push	{r7}
 80094f6:	af00      	add	r7, sp, #0

    /* Initialize the head pointer of the created packet pools list and the
       number of packet pools created.  */
    _nx_packet_pool_created_ptr =        NX_NULL;
 80094f8:	4b05      	ldr	r3, [pc, #20]	; (8009510 <_nx_packet_pool_initialize+0x1c>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	601a      	str	r2, [r3, #0]
    _nx_packet_pool_created_count =      0;
 80094fe:	4b05      	ldr	r3, [pc, #20]	; (8009514 <_nx_packet_pool_initialize+0x20>)
 8009500:	2200      	movs	r2, #0
 8009502:	601a      	str	r2, [r3, #0]
}
 8009504:	bf00      	nop
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	20008030 	.word	0x20008030
 8009514:	20008034 	.word	0x20008034

08009518 <_nx_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_release(NX_PACKET *packet_ptr)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b08a      	sub	sp, #40	; 0x28
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to free all packets chained together, not assuming they are
       from the same pool.  */
    while (packet_ptr)
 8009520:	e0a5      	b.n	800966e <_nx_packet_release+0x156>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check to see if the packet is releasable.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800952a:	d011      	beq.n	8009550 <_nx_packet_release+0x38>
        {

#ifndef NX_DISABLE_PACKET_INFO
            /* Pickup the pool pointer.  */
            pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	61fb      	str	r3, [r7, #28]

            /* Check for a good pool pointer...  error must be the packet!  */
            if ((pool_ptr) && (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d009      	beq.n	800954c <_nx_packet_release+0x34>
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a50      	ldr	r2, [pc, #320]	; (8009680 <_nx_packet_release+0x168>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d104      	bne.n	800954c <_nx_packet_release+0x34>
            {

                /* Increment the packet pool invalid release error count.  */
                pool_ptr -> nx_packet_pool_invalid_releases++;
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	1c5a      	adds	r2, r3, #1
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	619a      	str	r2, [r3, #24]
            }
#endif

            /* Return an error indicating the packet could not be released.  */
            return(NX_PTR_ERROR);
 800954c:	2307      	movs	r3, #7
 800954e:	e093      	b.n	8009678 <_nx_packet_release+0x160>
        }
        /* End of packet check.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Pickup the next packet. */
        next_packet =  packet_ptr -> nx_packet_next;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009556:	f3ef 8310 	mrs	r3, PRIMASK
 800955a:	617b      	str	r3, [r7, #20]
    return(posture);
 800955c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800955e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009560:	b672      	cpsid	i
    return(int_posture);
 8009562:	693b      	ldr	r3, [r7, #16]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Disable interrupts to put this packet back in the packet pool.  */
        TX_DISABLE
 8009564:	623b      	str	r3, [r7, #32]

        /* Pickup the pool pointer.  */
        pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	61fb      	str	r3, [r7, #28]

        /* Determine if there are any threads suspended on the block pool.  */
        thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009570:	61bb      	str	r3, [r7, #24]
        if (thread_ptr)
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d062      	beq.n	800963e <_nx_packet_release+0x126>
        {

            /* Remove the suspended thread from the list.  */

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800957c:	69ba      	ldr	r2, [r7, #24]
 800957e:	429a      	cmp	r2, r3
 8009580:	d103      	bne.n	800958a <_nx_packet_release+0x72>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  NX_NULL;
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	2200      	movs	r2, #0
 8009586:	62da      	str	r2, [r3, #44]	; 0x2c
 8009588:	e00d      	b.n	80095a6 <_nx_packet_release+0x8e>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 8009596:	69ba      	ldr	r2, [r7, #24]
 8009598:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800959a:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80095a4:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            pool_ptr -> nx_packet_pool_suspended_count--;
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095aa:	1e5a      	subs	r2, r3, #1
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	631a      	str	r2, [r3, #48]	; 0x30

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	2200      	movs	r2, #0
 80095b4:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80095b6:	4b33      	ldr	r3, [pc, #204]	; (8009684 <_nx_packet_release+0x16c>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	3301      	adds	r3, #1
 80095bc:	4a31      	ldr	r2, [pc, #196]	; (8009684 <_nx_packet_release+0x16c>)
 80095be:	6013      	str	r3, [r2, #0]
 80095c0:	6a3b      	ldr	r3, [r7, #32]
 80095c2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f383 8810 	msr	PRIMASK, r3
}
 80095ca:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to look just like a new packet.  */
            packet_ptr -> nx_packet_queue_next  =  NX_NULL;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
            packet_ptr -> nx_packet_next        =  NX_NULL;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	605a      	str	r2, [r3, #4]
            packet_ptr -> nx_packet_last        =  NX_NULL;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
            packet_ptr -> nx_packet_length      =  0;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	691a      	ldr	r2, [r3, #16]
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095ec:	441a      	add	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	609a      	str	r2, [r3, #8]
            packet_ptr -> nx_packet_append_ptr  =  packet_ptr -> nx_packet_prepend_ptr;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	689a      	ldr	r2, [r3, #8]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	60da      	str	r2, [r3, #12]
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            packet_ptr -> nx_packet_interface_capability_flag = 0;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
            /* Set the TCP queue to the value that indicates it has been allocated.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800960c:	621a      	str	r2, [r3, #32]
            /* Clear the ipsec state. */
            packet_ptr -> nx_packet_ipsec_state = 0;
#endif /* NX_IPSEC_ENABLE */

            /* Clear the IP version.  */
            packet_ptr -> nx_packet_ip_version  =  0;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            /* Clear the IP identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_FALSE;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

            /* Initialize the IP header length. */
            packet_ptr -> nx_packet_ip_header_length = 0;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	601a      	str	r2, [r3, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	2200      	movs	r2, #0
 8009632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8009636:	69b8      	ldr	r0, [r7, #24]
 8009638:	f007 f9f0 	bl	8010a1c <_tx_thread_system_resume>
 800963c:	e015      	b.n	800966a <_nx_packet_release+0x152>

            /* No thread is suspended for a memory block.  */

            /* Mark the packet as free.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f04f 32ff 	mov.w	r2, #4294967295
 8009644:	621a      	str	r2, [r3, #32]

            /* Put the packet back in the available list.  */
            packet_ptr -> nx_packet_queue_next =  pool_ptr -> nx_packet_pool_available_list;
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	69da      	ldr	r2, [r3, #28]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	61da      	str	r2, [r3, #28]

            /* Adjust the head pointer.  */
            pool_ptr -> nx_packet_pool_available_list =  packet_ptr;
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	61da      	str	r2, [r3, #28]

            /* Increment the count of available blocks.  */
            pool_ptr -> nx_packet_pool_available++;
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	1c5a      	adds	r2, r3, #1
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	609a      	str	r2, [r3, #8]
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	f383 8810 	msr	PRIMASK, r3
}
 8009668:	bf00      	nop
            TX_RESTORE
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the list.  */
        packet_ptr =  next_packet;
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966c:	607b      	str	r3, [r7, #4]
    while (packet_ptr)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	f47f af56 	bne.w	8009522 <_nx_packet_release+0xa>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Return completion status.  */
    return(NX_SUCCESS);
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3728      	adds	r7, #40	; 0x28
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	5041434b 	.word	0x5041434b
 8009684:	2000812c 	.word	0x2000812c

08009688 <_nx_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_transmit_release(NX_PACKET *packet_ptr)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b088      	sub	sp, #32
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009690:	f3ef 8310 	mrs	r3, PRIMASK
 8009694:	617b      	str	r3, [r7, #20]
    return(posture);
 8009696:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009698:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800969a:	b672      	cpsid	i
    return(int_posture);
 800969c:	693b      	ldr	r3, [r7, #16]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_TRANSMIT_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts temporarily.  */
    TX_DISABLE
 800969e:	61bb      	str	r3, [r7, #24]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the packet is a queued TCP data packet.  Such packets cannot be released
       immediately, since they may need to be resent.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a1b      	ldr	r3, [r3, #32]
 80096a4:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 80096a8:	d025      	beq.n	80096f6 <_nx_packet_transmit_release+0x6e>
        (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_FREE)))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 80096ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b2:	d020      	beq.n	80096f6 <_nx_packet_transmit_release+0x6e>
    {

        /* Yes, this is indeed a TCP packet.  Just mark this with the NX_DRIVER_TX_DONE
           value to let the TCP layer know it is no longer queued up.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f04f 32dd 	mov.w	r2, #3722304989	; 0xdddddddd
 80096ba:	61da      	str	r2, [r3, #28]

        /* Remove the IP header and adjust the length.  */
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 80096c6:	441a      	add	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 80096d6:	1a9a      	subs	r2, r3, r2
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	625a      	str	r2, [r3, #36]	; 0x24

        /* Reset the IP header length. */
        packet_ptr -> nx_packet_ip_header_length = 0;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f383 8810 	msr	PRIMASK, r3
}
 80096ee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  NX_SUCCESS;
 80096f0:	2300      	movs	r3, #0
 80096f2:	61fb      	str	r3, [r7, #28]
 80096f4:	e009      	b.n	800970a <_nx_packet_transmit_release+0x82>
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	f383 8810 	msr	PRIMASK, r3
}
 8009700:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual packet release function.  */
        status =  _nx_packet_release(packet_ptr);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7ff ff08 	bl	8009518 <_nx_packet_release>
 8009708:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800970a:	69fb      	ldr	r3, [r7, #28]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3720      	adds	r7, #32
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <_nx_rarp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_rarp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b088      	sub	sp, #32
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800971e:	f3ef 8310 	mrs	r3, PRIMASK
 8009722:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009724:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009726:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009728:	b672      	cpsid	i
    return(int_posture);
 800972a:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800972c:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if RARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_rarp_queue_process)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 8009734:	2b00      	cmp	r3, #0
 8009736:	d110      	bne.n	800975a <_nx_rarp_packet_deferred_receive+0x46>

        /* RARP is not enabled.  */

#ifndef NX_DISABLE_RARP_INFO
        /* Increment the RARP invalid messages count...  */
        ip_ptr -> nx_ip_rarp_invalid_messages++;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800973e:	1c5a      	adds	r2, r3, #1
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	f383 8810 	msr	PRIMASK, r3
}
 8009750:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since RARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8009752:	6838      	ldr	r0, [r7, #0]
 8009754:	f7ff fee0 	bl	8009518 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8009758:	e02f      	b.n	80097ba <_nx_rarp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the RARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_rarp_deferred_received_packet_head)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 8009760:	2b00      	cmp	r3, #0
 8009762:	d011      	beq.n	8009788 <_nx_rarp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the RARP deferred queue.  */
        (ip_ptr -> nx_ip_rarp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2200      	movs	r2, #0
 8009772:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	683a      	ldr	r2, [r7, #0]
 8009778:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f383 8810 	msr	PRIMASK, r3
}
 8009786:	e018      	b.n	80097ba <_nx_rarp_packet_deferred_receive+0xa6>
    {

        /* Empty RARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the RARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_rarp_deferred_received_packet_head =  packet_ptr;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        packet_ptr -> nx_packet_queue_next =                  NX_NULL;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	2200      	movs	r2, #0
 800979c:	61da      	str	r2, [r3, #28]
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	f383 8810 	msr	PRIMASK, r3
}
 80097a8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the RARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80097b0:	2200      	movs	r2, #0
 80097b2:	2120      	movs	r1, #32
 80097b4:	4618      	mov	r0, r3
 80097b6:	f005 fd6b 	bl	800f290 <_tx_event_flags_set>
    }
}
 80097ba:	3720      	adds	r7, #32
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <_nx_system_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_system_initialize(VOID)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0

    /* Check whether or not system has been initialized? */
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 80097c4:	4b38      	ldr	r3, [pc, #224]	; (80098a8 <_nx_system_initialize+0xe8>)
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	4b38      	ldr	r3, [pc, #224]	; (80098ac <_nx_system_initialize+0xec>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	431a      	orrs	r2, r3
 80097ce:	4b38      	ldr	r3, [pc, #224]	; (80098b0 <_nx_system_initialize+0xf0>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	431a      	orrs	r2, r3
        _nx_system_build_options_3 | _nx_system_build_options_4 | _nx_system_build_options_5)
 80097d4:	4b37      	ldr	r3, [pc, #220]	; (80098b4 <_nx_system_initialize+0xf4>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	431a      	orrs	r2, r3
 80097da:	4b37      	ldr	r3, [pc, #220]	; (80098b8 <_nx_system_initialize+0xf8>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4313      	orrs	r3, r2
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d15e      	bne.n	80098a2 <_nx_system_initialize+0xe2>

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Call the packet pool initialization component for NetX.  */
    _nx_packet_pool_initialize();
 80097e4:	f7ff fe86 	bl	80094f4 <_nx_packet_pool_initialize>

    /* Call the IP component initialization.  */
    _nx_ip_initialize();
 80097e8:	f7fe f864 	bl	80078b4 <_nx_ip_initialize>

    /* Call the TCP component initialization.  */
    /*lint -e{522} suppress lack of side-effects.  */
    _nx_tcp_initialize();
 80097ec:	f000 fc12 	bl	800a014 <_nx_tcp_initialize>

    /* Setup the build options variables.  */
    _nx_system_build_options_1 = 0
 80097f0:	4b2d      	ldr	r3, [pc, #180]	; (80098a8 <_nx_system_initialize+0xe8>)
 80097f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097f6:	601a      	str	r2, [r3, #0]

    /* Add the retry shift value to the options.  */
#if (NX_TCP_RETRY_SHIFT > 0xF)
    _nx_system_build_options_1 |=  0xF;
#else
    _nx_system_build_options_1 |=  NX_TCP_RETRY_SHIFT;
 80097f8:	4b2b      	ldr	r3, [pc, #172]	; (80098a8 <_nx_system_initialize+0xe8>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a2a      	ldr	r2, [pc, #168]	; (80098a8 <_nx_system_initialize+0xe8>)
 80097fe:	6013      	str	r3, [r2, #0]
#endif

#if (NX_IP_PERIODIC_RATE > 0xFFFFUL)
    _nx_system_build_options_2 =  ((ULONG)0xFFFF0000);
#else
    _nx_system_build_options_2 =  ((ULONG)NX_IP_PERIODIC_RATE) << 16;
 8009800:	4b2a      	ldr	r3, [pc, #168]	; (80098ac <_nx_system_initialize+0xec>)
 8009802:	f44f 02c8 	mov.w	r2, #6553600	; 0x640000
 8009806:	601a      	str	r2, [r3, #0]
#endif

#if (NX_ARP_EXPIRATION_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_EXPIRATION_RATE) << 8;
 8009808:	4b28      	ldr	r3, [pc, #160]	; (80098ac <_nx_system_initialize+0xec>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a27      	ldr	r2, [pc, #156]	; (80098ac <_nx_system_initialize+0xec>)
 800980e:	6013      	str	r3, [r2, #0]
#endif
#if (NX_ARP_UPDATE_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_UPDATE_RATE);
 8009810:	4b26      	ldr	r3, [pc, #152]	; (80098ac <_nx_system_initialize+0xec>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f043 030a 	orr.w	r3, r3, #10
 8009818:	4a24      	ldr	r2, [pc, #144]	; (80098ac <_nx_system_initialize+0xec>)
 800981a:	6013      	str	r3, [r2, #0]

    /* Setup third option word.  */
#if (NX_TCP_ACK_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 =  ((ULONG)0xFF000000);
#else
    _nx_system_build_options_3 =  ((ULONG)NX_TCP_ACK_TIMER_RATE) << 24;
 800981c:	4b24      	ldr	r3, [pc, #144]	; (80098b0 <_nx_system_initialize+0xf0>)
 800981e:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
 8009822:	601a      	str	r2, [r3, #0]
#endif
#if (NX_TCP_FAST_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF) << 16;
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_FAST_TIMER_RATE) << 16;
 8009824:	4b22      	ldr	r3, [pc, #136]	; (80098b0 <_nx_system_initialize+0xf0>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800982c:	4a20      	ldr	r2, [pc, #128]	; (80098b0 <_nx_system_initialize+0xf0>)
 800982e:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_TRANSMIT_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_TRANSMIT_TIMER_RATE) << 8;
 8009830:	4b1f      	ldr	r3, [pc, #124]	; (80098b0 <_nx_system_initialize+0xf0>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009838:	4a1d      	ldr	r2, [pc, #116]	; (80098b0 <_nx_system_initialize+0xf0>)
 800983a:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_KEEPALIVE_RETRY > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRY);
 800983c:	4b1c      	ldr	r3, [pc, #112]	; (80098b0 <_nx_system_initialize+0xf0>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f043 034b 	orr.w	r3, r3, #75	; 0x4b
 8009844:	4a1a      	ldr	r2, [pc, #104]	; (80098b0 <_nx_system_initialize+0xf0>)
 8009846:	6013      	str	r3, [r2, #0]

    /* Setup the fourth option word.  */
#if (NX_TCP_KEEPALIVE_INITIAL > 0xFFFFUL)
    _nx_system_build_options_4 =  ((ULONG)0xFFFF0000);
#else
    _nx_system_build_options_4 =  ((ULONG)NX_TCP_KEEPALIVE_INITIAL) << 16;
 8009848:	4b1a      	ldr	r3, [pc, #104]	; (80098b4 <_nx_system_initialize+0xf4>)
 800984a:	f04f 52e1 	mov.w	r2, #471859200	; 0x1c200000
 800984e:	601a      	str	r2, [r3, #0]
#endif
#if (NX_ARP_MAXIMUM_RETRIES > 0xFF)
    _nx_system_build_options_4 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAXIMUM_RETRIES) << 8;
 8009850:	4b18      	ldr	r3, [pc, #96]	; (80098b4 <_nx_system_initialize+0xf4>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 8009858:	4a16      	ldr	r2, [pc, #88]	; (80098b4 <_nx_system_initialize+0xf4>)
 800985a:	6013      	str	r3, [r2, #0]
#endif
#if (NX_ARP_MAX_QUEUE_DEPTH > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF) << 4;
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAX_QUEUE_DEPTH) << 4;
 800985c:	4b15      	ldr	r3, [pc, #84]	; (80098b4 <_nx_system_initialize+0xf4>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009864:	4a13      	ldr	r2, [pc, #76]	; (80098b4 <_nx_system_initialize+0xf4>)
 8009866:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_KEEPALIVE_RETRIES > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF);
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRIES);
 8009868:	4b12      	ldr	r3, [pc, #72]	; (80098b4 <_nx_system_initialize+0xf4>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f043 030a 	orr.w	r3, r3, #10
 8009870:	4a10      	ldr	r2, [pc, #64]	; (80098b4 <_nx_system_initialize+0xf4>)
 8009872:	6013      	str	r3, [r2, #0]

    /* Setup the fifth option word.  */
#if (NX_MAX_MULTICAST_GROUPS > 0xFF)
    _nx_system_build_options_5 =  ((ULONG)0xFF000000);
#else
    _nx_system_build_options_5 =  ((ULONG)NX_MAX_MULTICAST_GROUPS) << 24;
 8009874:	4b10      	ldr	r3, [pc, #64]	; (80098b8 <_nx_system_initialize+0xf8>)
 8009876:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800987a:	601a      	str	r2, [r3, #0]
#endif
#if (NX_MAX_LISTEN_REQUESTS > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF) << 16;
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_MAX_LISTEN_REQUESTS) << 16;
 800987c:	4b0e      	ldr	r3, [pc, #56]	; (80098b8 <_nx_system_initialize+0xf8>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8009884:	4a0c      	ldr	r2, [pc, #48]	; (80098b8 <_nx_system_initialize+0xf8>)
 8009886:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_MAXIMUM_RETRIES > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_RETRIES) << 8;
 8009888:	4b0b      	ldr	r3, [pc, #44]	; (80098b8 <_nx_system_initialize+0xf8>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8009890:	4a09      	ldr	r2, [pc, #36]	; (80098b8 <_nx_system_initialize+0xf8>)
 8009892:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_MAXIMUM_TX_QUEUE > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_TX_QUEUE);
 8009894:	4b08      	ldr	r3, [pc, #32]	; (80098b8 <_nx_system_initialize+0xf8>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f043 0314 	orr.w	r3, r3, #20
 800989c:	4a06      	ldr	r2, [pc, #24]	; (80098b8 <_nx_system_initialize+0xf8>)
 800989e:	6013      	str	r3, [r2, #0]
 80098a0:	e000      	b.n	80098a4 <_nx_system_initialize+0xe4>
        return;
 80098a2:	bf00      	nop
#endif
}
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20008038 	.word	0x20008038
 80098ac:	2000803c 	.word	0x2000803c
 80098b0:	20008040 	.word	0x20008040
 80098b4:	20008044 	.word	0x20008044
 80098b8:	20008048 	.word	0x20008048

080098bc <_nx_tcp_cleanup_deferred>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_cleanup_deferred(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
    NX_PARAMETER_NOT_USED(thread_ptr);

    NX_CLEANUP_EXTENSION
    /* This function is never called... so do nothing!  */
}
 80098c6:	bf00      	nop
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
	...

080098d4 <_nx_tcp_client_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_client_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08e      	sub	sp, #56	; 0x38
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80098de:	f3ef 8310 	mrs	r3, PRIMASK
 80098e2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80098e6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80098e8:	b672      	cpsid	i
    return(int_posture);
 80098ea:	6a3b      	ldr	r3, [r7, #32]
NX_TCP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts to remove the suspended thread from the TCP socket.  */
    TX_DISABLE
 80098ec:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098f2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 80098f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d004      	beq.n	8009904 <_nx_tcp_client_bind_cleanup+0x30>
 80098fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a42      	ldr	r2, [pc, #264]	; (8009a08 <_nx_tcp_client_bind_cleanup+0x134>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d006      	beq.n	8009912 <_nx_tcp_client_bind_cleanup+0x3e>
 8009904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009906:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	f383 8810 	msr	PRIMASK, r3
}
 800990e:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 8009910:	e077      	b.n	8009a02 <_nx_tcp_client_bind_cleanup+0x12e>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009916:	2b00      	cmp	r3, #0
 8009918:	d106      	bne.n	8009928 <_nx_tcp_client_bind_cleanup+0x54>
 800991a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800991c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	f383 8810 	msr	PRIMASK, r3
}
 8009924:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 8009926:	e06c      	b.n	8009a02 <_nx_tcp_client_bind_cleanup+0x12e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009928:	f3ef 8305 	mrs	r3, IPSR
 800992c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800992e:	697a      	ldr	r2, [r7, #20]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 8009930:	4b36      	ldr	r3, [pc, #216]	; (8009a0c <_nx_tcp_client_bind_cleanup+0x138>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4313      	orrs	r3, r2
 8009936:	2b00      	cmp	r3, #0
 8009938:	d104      	bne.n	8009944 <_nx_tcp_client_bind_cleanup+0x70>
 800993a:	4b35      	ldr	r3, [pc, #212]	; (8009a10 <_nx_tcp_client_bind_cleanup+0x13c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a35      	ldr	r2, [pc, #212]	; (8009a14 <_nx_tcp_client_bind_cleanup+0x140>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d116      	bne.n	8009972 <_nx_tcp_client_bind_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a34      	ldr	r2, [pc, #208]	; (8009a18 <_nx_tcp_client_bind_cleanup+0x144>)
 8009948:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009950:	62bb      	str	r3, [r7, #40]	; 0x28
 8009952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009954:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	f383 8810 	msr	PRIMASK, r3
}
 800995c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800995e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009960:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8009964:	2200      	movs	r2, #0
 8009966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800996a:	4618      	mov	r0, r3
 800996c:	f005 fc90 	bl	800f290 <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 8009970:	e047      	b.n	8009a02 <_nx_tcp_client_bind_cleanup+0x12e>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_tcp_socket_bind_in_progress =  NX_NULL;
 8009972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009974:	2200      	movs	r2, #0
 8009976:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_tcp_socket_bound_previous;
 8009980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009982:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009986:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	429a      	cmp	r2, r3
 8009990:	d104      	bne.n	800999c <_nx_tcp_client_bind_cleanup+0xc8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_tcp_socket_bind_suspension_list =  NX_NULL;
 8009992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009994:	2200      	movs	r2, #0
 8009996:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800999a:	e00e      	b.n	80099ba <_nx_tcp_client_bind_cleanup+0xe6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_tcp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80099a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80099ae:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80099b8:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_tcp_socket_bind_suspended_count--;
 80099ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80099c0:	1e5a      	subs	r2, r3, #1
 80099c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099cc:	2b0c      	cmp	r3, #12
 80099ce:	d112      	bne.n	80099f6 <_nx_tcp_client_bind_cleanup+0x122>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2223      	movs	r2, #35	; 0x23
 80099d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80099d8:	4b10      	ldr	r3, [pc, #64]	; (8009a1c <_nx_tcp_client_bind_cleanup+0x148>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	3301      	adds	r3, #1
 80099de:	4a0f      	ldr	r2, [pc, #60]	; (8009a1c <_nx_tcp_client_bind_cleanup+0x148>)
 80099e0:	6013      	str	r3, [r2, #0]
 80099e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f383 8810 	msr	PRIMASK, r3
}
 80099ec:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f007 f814 	bl	8010a1c <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 80099f4:	e005      	b.n	8009a02 <_nx_tcp_client_bind_cleanup+0x12e>
 80099f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	f383 8810 	msr	PRIMASK, r3
}
 8009a00:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8009a02:	3738      	adds	r7, #56	; 0x38
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	54435020 	.word	0x54435020
 8009a0c:	20000088 	.word	0x20000088
 8009a10:	20008094 	.word	0x20008094
 8009a14:	200081dc 	.word	0x200081dc
 8009a18:	080098bd 	.word	0x080098bd
 8009a1c:	2000812c 	.word	0x2000812c

08009a20 <_nx_tcp_connect_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_connect_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b08e      	sub	sp, #56	; 0x38
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8009a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8009a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8009a32:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8009a34:	b672      	cpsid	i
    return(int_posture);
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 8009a38:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a3e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8009a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d004      	beq.n	8009a50 <_nx_tcp_connect_cleanup+0x30>
 8009a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a3a      	ldr	r2, [pc, #232]	; (8009b34 <_nx_tcp_connect_cleanup+0x114>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d006      	beq.n	8009a5e <_nx_tcp_connect_cleanup+0x3e>
 8009a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a52:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	f383 8810 	msr	PRIMASK, r3
}
 8009a5a:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 8009a5c:	e067      	b.n	8009b2e <_nx_tcp_connect_cleanup+0x10e>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d106      	bne.n	8009a74 <_nx_tcp_connect_cleanup+0x54>
 8009a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a68:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	f383 8810 	msr	PRIMASK, r3
}
 8009a70:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 8009a72:	e05c      	b.n	8009b2e <_nx_tcp_connect_cleanup+0x10e>
    }

    /* Pickup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8009a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009a7c:	f3ef 8305 	mrs	r3, IPSR
 8009a80:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8009a82:	69ba      	ldr	r2, [r7, #24]

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 8009a84:	4b2c      	ldr	r3, [pc, #176]	; (8009b38 <_nx_tcp_connect_cleanup+0x118>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d104      	bne.n	8009a98 <_nx_tcp_connect_cleanup+0x78>
 8009a8e:	4b2b      	ldr	r3, [pc, #172]	; (8009b3c <_nx_tcp_connect_cleanup+0x11c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a2b      	ldr	r2, [pc, #172]	; (8009b40 <_nx_tcp_connect_cleanup+0x120>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d112      	bne.n	8009abe <_nx_tcp_connect_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a2a      	ldr	r2, [pc, #168]	; (8009b44 <_nx_tcp_connect_cleanup+0x124>)
 8009a9c:	669a      	str	r2, [r3, #104]	; 0x68
 8009a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	f383 8810 	msr	PRIMASK, r3
}
 8009aa8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8009aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aac:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f005 fbea 	bl	800f290 <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 8009abc:	e037      	b.n	8009b2e <_nx_tcp_connect_cleanup+0x10e>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	669a      	str	r2, [r3, #104]	; 0x68

        /* Clear the suspension pointer.   */
        socket_ptr -> nx_tcp_socket_connect_suspended_thread =  NX_NULL;
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

        /* Clear the timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 8009acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Return to the proper socket state.  */
        if (socket_ptr -> nx_tcp_socket_client_type)
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d003      	beq.n	8009ae4 <_nx_tcp_connect_cleanup+0xc4>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Client socket, return to a CLOSED state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 8009adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ade:	2201      	movs	r2, #1
 8009ae0:	639a      	str	r2, [r3, #56]	; 0x38
 8009ae2:	e007      	b.n	8009af4 <_nx_tcp_connect_cleanup+0xd4>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_LISTEN_STATE, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Server socket, return to LISTEN state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Move back the acknowledgment number just in case there is a retry.  */
            socket_ptr -> nx_tcp_socket_rx_sequence--;
 8009aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aee:	1e5a      	subs	r2, r3, #1
 8009af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af2:	641a      	str	r2, [r3, #64]	; 0x40
        }

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af8:	2b0c      	cmp	r3, #12
 8009afa:	d112      	bne.n	8009b22 <_nx_tcp_connect_cleanup+0x102>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2238      	movs	r2, #56	; 0x38
 8009b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009b04:	4b10      	ldr	r3, [pc, #64]	; (8009b48 <_nx_tcp_connect_cleanup+0x128>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	4a0f      	ldr	r2, [pc, #60]	; (8009b48 <_nx_tcp_connect_cleanup+0x128>)
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b10:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	f383 8810 	msr	PRIMASK, r3
}
 8009b18:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f006 ff7e 	bl	8010a1c <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8009b20:	e005      	b.n	8009b2e <_nx_tcp_connect_cleanup+0x10e>
 8009b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b24:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f383 8810 	msr	PRIMASK, r3
}
 8009b2c:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8009b2e:	3738      	adds	r7, #56	; 0x38
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	54435020 	.word	0x54435020
 8009b38:	20000088 	.word	0x20000088
 8009b3c:	20008094 	.word	0x20008094
 8009b40:	200081dc 	.word	0x200081dc
 8009b44:	080098bd 	.word	0x080098bd
 8009b48:	2000812c 	.word	0x2000812c

08009b4c <_nx_tcp_deferred_cleanup_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_deferred_cleanup_check(NX_IP *ip_ptr)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
NX_TCP_SOCKET *socket_ptr;
TX_THREAD     *thread_ptr;


    /* Pickup the first socket and the created count.  */
    socket_ptr =       ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8009b5a:	60fb      	str	r3, [r7, #12]
    created_sockets =  ip_ptr -> nx_ip_tcp_created_sockets_count;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009b62:	617b      	str	r3, [r7, #20]

    /* Loop through all created TCP sockets on the IP instance.  */
    while (created_sockets--)
 8009b64:	e07a      	b.n	8009c5c <_nx_tcp_deferred_cleanup_check+0x110>
    {

        /* Check the socket for deferred bind cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_bind_suspended_count;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009b6c:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d015      	beq.n	8009ba0 <_nx_tcp_deferred_cleanup_check+0x54>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_bind_suspension_list;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009b7a:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b80:	4a3c      	ldr	r2, [pc, #240]	; (8009c74 <_nx_tcp_deferred_cleanup_check+0x128>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d103      	bne.n	8009b8e <_nx_tcp_deferred_cleanup_check+0x42>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_client_bind_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 8009b86:	2100      	movs	r1, #0
 8009b88:	68b8      	ldr	r0, [r7, #8]
 8009b8a:	f7ff fea3 	bl	80098d4 <_nx_tcp_client_bind_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b92:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	3b01      	subs	r3, #1
 8009b98:	613b      	str	r3, [r7, #16]
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1ed      	bne.n	8009b7c <_nx_tcp_deferred_cleanup_check+0x30>
        }

        /* Check the socket for deferred connect cleanup.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_connect_suspended_thread;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009ba6:	60bb      	str	r3, [r7, #8]
        if (thread_ptr)
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d008      	beq.n	8009bc0 <_nx_tcp_deferred_cleanup_check+0x74>
        {

            /* Determine if this thread has deferred the timeout processing.  */
            if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bb2:	4a30      	ldr	r2, [pc, #192]	; (8009c74 <_nx_tcp_deferred_cleanup_check+0x128>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d103      	bne.n	8009bc0 <_nx_tcp_deferred_cleanup_check+0x74>
            {

                /* Yes, call the cleanup routine again!  */
                _nx_tcp_connect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 8009bb8:	2100      	movs	r1, #0
 8009bba:	68b8      	ldr	r0, [r7, #8]
 8009bbc:	f7ff ff30 	bl	8009a20 <_nx_tcp_connect_cleanup>
            }
        }

        /* Check the socket for deferred disconnect cleanup.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_disconnect_suspended_thread;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009bc6:	60bb      	str	r3, [r7, #8]
        if (thread_ptr)
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d008      	beq.n	8009be0 <_nx_tcp_deferred_cleanup_check+0x94>
        {

            /* Determine if this thread has deferred the timeout processing.  */
            if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bd2:	4a28      	ldr	r2, [pc, #160]	; (8009c74 <_nx_tcp_deferred_cleanup_check+0x128>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d103      	bne.n	8009be0 <_nx_tcp_deferred_cleanup_check+0x94>
            {

                /* Yes, call the cleanup routine again!  */
                _nx_tcp_disconnect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 8009bd8:	2100      	movs	r1, #0
 8009bda:	68b8      	ldr	r0, [r7, #8]
 8009bdc:	f000 f84c 	bl	8009c78 <_nx_tcp_disconnect_cleanup>
            }
        }

        /* Check the socket for deferred receive cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_receive_suspended_count;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009be6:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d015      	beq.n	8009c1a <_nx_tcp_deferred_cleanup_check+0xce>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_receive_suspension_list;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009bf4:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bfa:	4a1e      	ldr	r2, [pc, #120]	; (8009c74 <_nx_tcp_deferred_cleanup_check+0x128>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d103      	bne.n	8009c08 <_nx_tcp_deferred_cleanup_check+0xbc>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_receive_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 8009c00:	2100      	movs	r1, #0
 8009c02:	68b8      	ldr	r0, [r7, #8]
 8009c04:	f001 f982 	bl	800af0c <_nx_tcp_receive_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c0c:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	3b01      	subs	r3, #1
 8009c12:	613b      	str	r3, [r7, #16]
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1ed      	bne.n	8009bf6 <_nx_tcp_deferred_cleanup_check+0xaa>
        }

        /* Check the socket for deferred transmit cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_transmit_suspended_count;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009c20:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d015      	beq.n	8009c54 <_nx_tcp_deferred_cleanup_check+0x108>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_transmit_suspension_list;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c2e:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c34:	4a0f      	ldr	r2, [pc, #60]	; (8009c74 <_nx_tcp_deferred_cleanup_check+0x128>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d103      	bne.n	8009c42 <_nx_tcp_deferred_cleanup_check+0xf6>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_transmit_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	68b8      	ldr	r0, [r7, #8]
 8009c3e:	f003 f845 	bl	800cccc <_nx_tcp_transmit_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c46:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	613b      	str	r3, [r7, #16]
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d1ed      	bne.n	8009c30 <_nx_tcp_deferred_cleanup_check+0xe4>
        }

        /* Move to next created TCP socket.  */
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009c5a:	60fb      	str	r3, [r7, #12]
    while (created_sockets--)
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	1e5a      	subs	r2, r3, #1
 8009c60:	617a      	str	r2, [r7, #20]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f47f af7f 	bne.w	8009b66 <_nx_tcp_deferred_cleanup_check+0x1a>
    }
}
 8009c68:	bf00      	nop
 8009c6a:	bf00      	nop
 8009c6c:	3718      	adds	r7, #24
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	080098bd 	.word	0x080098bd

08009c78 <_nx_tcp_disconnect_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_disconnect_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08e      	sub	sp, #56	; 0x38
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c82:	f3ef 8310 	mrs	r3, PRIMASK
 8009c86:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8009c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8009c8a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8009c8c:	b672      	cpsid	i
    return(int_posture);
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 8009c90:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c96:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8009c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d004      	beq.n	8009ca8 <_nx_tcp_disconnect_cleanup+0x30>
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a30      	ldr	r2, [pc, #192]	; (8009d64 <_nx_tcp_disconnect_cleanup+0xec>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d006      	beq.n	8009cb6 <_nx_tcp_disconnect_cleanup+0x3e>
 8009ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009caa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009cac:	6a3b      	ldr	r3, [r7, #32]
 8009cae:	f383 8810 	msr	PRIMASK, r3
}
 8009cb2:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 8009cb4:	e053      	b.n	8009d5e <_nx_tcp_disconnect_cleanup+0xe6>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d106      	bne.n	8009ccc <_nx_tcp_disconnect_cleanup+0x54>
 8009cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	f383 8810 	msr	PRIMASK, r3
}
 8009cc8:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 8009cca:	e048      	b.n	8009d5e <_nx_tcp_disconnect_cleanup+0xe6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009ccc:	f3ef 8305 	mrs	r3, IPSR
 8009cd0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8009cd2:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 8009cd4:	4b24      	ldr	r3, [pc, #144]	; (8009d68 <_nx_tcp_disconnect_cleanup+0xf0>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d104      	bne.n	8009ce8 <_nx_tcp_disconnect_cleanup+0x70>
 8009cde:	4b23      	ldr	r3, [pc, #140]	; (8009d6c <_nx_tcp_disconnect_cleanup+0xf4>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a23      	ldr	r2, [pc, #140]	; (8009d70 <_nx_tcp_disconnect_cleanup+0xf8>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d116      	bne.n	8009d16 <_nx_tcp_disconnect_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a22      	ldr	r2, [pc, #136]	; (8009d74 <_nx_tcp_disconnect_cleanup+0xfc>)
 8009cec:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8009cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f383 8810 	msr	PRIMASK, r3
}
 8009d00:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8009d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d04:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f005 fabe 	bl	800f290 <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 8009d14:	e023      	b.n	8009d5e <_nx_tcp_disconnect_cleanup+0xe6>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Clear the suspension pointer.   */
        socket_ptr -> nx_tcp_socket_disconnect_suspended_thread =  NX_NULL;
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d28:	2b0c      	cmp	r3, #12
 8009d2a:	d112      	bne.n	8009d52 <_nx_tcp_disconnect_cleanup+0xda>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_DISCONNECT_FAILED;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2241      	movs	r2, #65	; 0x41
 8009d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009d34:	4b10      	ldr	r3, [pc, #64]	; (8009d78 <_nx_tcp_disconnect_cleanup+0x100>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	4a0f      	ldr	r2, [pc, #60]	; (8009d78 <_nx_tcp_disconnect_cleanup+0x100>)
 8009d3c:	6013      	str	r3, [r2, #0]
 8009d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d40:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	f383 8810 	msr	PRIMASK, r3
}
 8009d48:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f006 fe66 	bl	8010a1c <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8009d50:	e005      	b.n	8009d5e <_nx_tcp_disconnect_cleanup+0xe6>
 8009d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d54:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f383 8810 	msr	PRIMASK, r3
}
 8009d5c:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8009d5e:	3738      	adds	r7, #56	; 0x38
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	54435020 	.word	0x54435020
 8009d68:	20000088 	.word	0x20000088
 8009d6c:	20008094 	.word	0x20008094
 8009d70:	200081dc 	.word	0x200081dc
 8009d74:	080098bd 	.word	0x080098bd
 8009d78:	2000812c 	.word	0x2000812c

08009d7c <_nx_tcp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_enable(NX_IP *ip_ptr)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_TCP_EVENTS, 0, 0);
    /* Place all server listen request structures on the available list.   */

    /* Setup a pointer to the first listen.  */
    listen_ptr =  &(ip_ptr -> nx_ip_tcp_server_listen_reqs[0]);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009d8a:	60bb      	str	r3, [r7, #8]

    /* Setup the available listen requests head pointer.  */
    ip_ptr -> nx_ip_tcp_available_listen_requests =  listen_ptr;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618

    /* Loop through the listen requests and link them on the available list.  */
    for (i = 0; i < NX_MAX_LISTEN_REQUESTS; i++)
 8009d94:	2300      	movs	r3, #0
 8009d96:	60fb      	str	r3, [r7, #12]
 8009d98:	e00d      	b.n	8009db6 <_nx_tcp_enable+0x3a>
    {

        /* Link listen request to next listen request.  */
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	61da      	str	r2, [r3, #28]

        /* Determine if we need to move to the next listen request.  */
        if (i < (NX_MAX_LISTEN_REQUESTS - 1))
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2b08      	cmp	r3, #8
 8009da8:	d802      	bhi.n	8009db0 <_nx_tcp_enable+0x34>
        {
            listen_ptr++;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	3324      	adds	r3, #36	; 0x24
 8009dae:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < NX_MAX_LISTEN_REQUESTS; i++)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	3301      	adds	r3, #1
 8009db4:	60fb      	str	r3, [r7, #12]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2b09      	cmp	r3, #9
 8009dba:	d9ee      	bls.n	8009d9a <_nx_tcp_enable+0x1e>
        }
    }

    /* Make sure the last listen request has a NULL pointer.  */
    listen_ptr -> nx_tcp_listen_next =  NX_NULL;
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	61da      	str	r2, [r3, #28]

    /* Set the TCP packet queue processing function.  */
    ip_ptr -> nx_ip_tcp_queue_process =  _nx_tcp_queue_process;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a13      	ldr	r2, [pc, #76]	; (8009e14 <_nx_tcp_enable+0x98>)
 8009dc6:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

    /* Set the TCP periodic processing function.  */
    ip_ptr -> nx_ip_tcp_periodic_processing =  _nx_tcp_periodic_processing;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a12      	ldr	r2, [pc, #72]	; (8009e18 <_nx_tcp_enable+0x9c>)
 8009dce:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498

    /* Set the TCP fast periodic processing function.  */
    ip_ptr -> nx_ip_tcp_fast_periodic_processing =  _nx_tcp_fast_periodic_processing;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a11      	ldr	r2, [pc, #68]	; (8009e1c <_nx_tcp_enable+0xa0>)
 8009dd6:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c

    /* Set the TCP deferred cleanup check function.  */
    ip_ptr -> nx_tcp_deferred_cleanup_check =  _nx_tcp_deferred_cleanup_check;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a10      	ldr	r2, [pc, #64]	; (8009e20 <_nx_tcp_enable+0xa4>)
 8009dde:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c

    /* Setup base timer variables.  */
    _nx_tcp_fast_timer_rate =       (NX_IP_PERIODIC_RATE + (NX_TCP_FAST_TIMER_RATE - 1)) / NX_TCP_FAST_TIMER_RATE;
 8009de2:	4b10      	ldr	r3, [pc, #64]	; (8009e24 <_nx_tcp_enable+0xa8>)
 8009de4:	220a      	movs	r2, #10
 8009de6:	601a      	str	r2, [r3, #0]
    _nx_tcp_ack_timer_rate =        (NX_IP_PERIODIC_RATE + (NX_TCP_ACK_TIMER_RATE - 1)) / NX_TCP_ACK_TIMER_RATE;
 8009de8:	4b0f      	ldr	r3, [pc, #60]	; (8009e28 <_nx_tcp_enable+0xac>)
 8009dea:	2214      	movs	r2, #20
 8009dec:	601a      	str	r2, [r3, #0]

    /*lint -e{778} suppress constant expression, since NX_TCP_TRANSMIT_TIMER_RATE can be redefined. */
    /*lint -e{835} -e{845} suppress operating on zero. */
    _nx_tcp_transmit_timer_rate =   (NX_IP_PERIODIC_RATE + (NX_TCP_TRANSMIT_TIMER_RATE - 1)) / NX_TCP_TRANSMIT_TIMER_RATE;
 8009dee:	4b0f      	ldr	r3, [pc, #60]	; (8009e2c <_nx_tcp_enable+0xb0>)
 8009df0:	2264      	movs	r2, #100	; 0x64
 8009df2:	601a      	str	r2, [r3, #0]

    _nx_tcp_2MSL_timer_rate = 2 * NX_IP_PERIODIC_RATE * NX_TCP_MAXIMUM_SEGMENT_LIFETIME;
 8009df4:	4b0e      	ldr	r3, [pc, #56]	; (8009e30 <_nx_tcp_enable+0xb4>)
 8009df6:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8009dfa:	601a      	str	r2, [r3, #0]

    _nx_ip_fast_periodic_timer_create(ip_ptr);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f7fd fc57 	bl	80076b0 <_nx_ip_fast_periodic_timer_create>

    /* Set the TCP packet receive function in the IP structure to indicate
       we are ready to receive TCP packets.  */
    ip_ptr -> nx_ip_tcp_packet_receive =  _nx_tcp_packet_receive;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a0b      	ldr	r2, [pc, #44]	; (8009e34 <_nx_tcp_enable+0xb8>)
 8009e06:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	0800ae9d 	.word	0x0800ae9d
 8009e18:	0800ae89 	.word	0x0800ae89
 8009e1c:	08009e39 	.word	0x08009e39
 8009e20:	08009b4d 	.word	0x08009b4d
 8009e24:	2000804c 	.word	0x2000804c
 8009e28:	20008050 	.word	0x20008050
 8009e2c:	20008054 	.word	0x20008054
 8009e30:	20008058 	.word	0x20008058
 8009e34:	0800a985 	.word	0x0800a985

08009e38 <_nx_tcp_fast_periodic_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_fast_periodic_processing(NX_IP *ip_ptr)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
ULONG          sockets;
ULONG          timer_rate;


    /* Pickup this timer's periodic rate.  */
    timer_rate =  _nx_tcp_fast_timer_rate;
 8009e40:	4b73      	ldr	r3, [pc, #460]	; (800a010 <_nx_tcp_fast_periodic_processing+0x1d8>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	60fb      	str	r3, [r7, #12]

    /* Pickup the number of created TCP sockets.  */
    sockets =  ip_ptr -> nx_ip_tcp_created_sockets_count;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009e4c:	613b      	str	r3, [r7, #16]

    /* Pickup the first socket.  */
    socket_ptr =  ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8009e54:	617b      	str	r3, [r7, #20]

    /* Loop through the created sockets.  */
    while (sockets--)
 8009e56:	e0cf      	b.n	8009ff8 <_nx_tcp_fast_periodic_processing+0x1c0>
    {

        /* Determine if the socket is in an established or disconnect state and has delayed sending an ACK
           from a previous receive packet event.  */
        if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_ESTABLISHED) &&
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5c:	2b04      	cmp	r3, #4
 8009e5e:	d91d      	bls.n	8009e9c <_nx_tcp_fast_periodic_processing+0x64>
            ((socket_ptr -> nx_tcp_socket_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence_acked) ||
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_ESTABLISHED) &&
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d105      	bne.n	8009e78 <_nx_tcp_fast_periodic_processing+0x40>
             (socket_ptr -> nx_tcp_socket_rx_window_last_sent < socket_ptr -> nx_tcp_socket_rx_window_current)))
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
            ((socket_ptr -> nx_tcp_socket_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence_acked) ||
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d211      	bcs.n	8009e9c <_nx_tcp_fast_periodic_processing+0x64>
        {

            /* Determine if the ACK has expired.  */
            if (socket_ptr -> nx_tcp_socket_delayed_ack_timeout <= timer_rate)
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d306      	bcc.n	8009e90 <_nx_tcp_fast_periodic_processing+0x58>
            {

                /* Send the delayed ACK, which also resets the ACK timeout.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e86:	4619      	mov	r1, r3
 8009e88:	6978      	ldr	r0, [r7, #20]
 8009e8a:	f000 fde9 	bl	800aa60 <_nx_tcp_packet_send_ack>
 8009e8e:	e005      	b.n	8009e9c <_nx_tcp_fast_periodic_processing+0x64>
            }
            else
            {

                /* No, it hasn't expired yet.  Just decrement it for now.  */
                socket_ptr -> nx_tcp_socket_delayed_ack_timeout -= timer_rate;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	1ad2      	subs	r2, r2, r3
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	649a      	str	r2, [r3, #72]	; 0x48
            }
        }

        /* Determine if a timeout is active.  */
        if (socket_ptr -> nx_tcp_socket_timeout)
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f000 80a4 	beq.w	8009ff0 <_nx_tcp_fast_periodic_processing+0x1b8>
        {

            /* Yes, a timeout is active.  Determine if it has expired.  */
            if (socket_ptr -> nx_tcp_socket_timeout > timer_rate)
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d208      	bcs.n	8009ec6 <_nx_tcp_fast_periodic_processing+0x8e>
            {

                /* No, it hasn't expired yet.  Just decrement the timeout value.  */
                socket_ptr -> nx_tcp_socket_timeout -= timer_rate;
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	1ad2      	subs	r2, r2, r3
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8009ec4:	e094      	b.n	8009ff0 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            else if (((socket_ptr -> nx_tcp_socket_timeout_retries >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d304      	bcc.n	8009ee0 <_nx_tcp_fast_periodic_processing+0xa8>
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)) ||
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
            else if (((socket_ptr -> nx_tcp_socket_timeout_retries >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00c      	beq.n	8009efa <_nx_tcp_fast_periodic_processing+0xc2>
                     ((socket_ptr -> nx_tcp_socket_zero_window_probe_failure >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)) ||
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d308      	bcc.n	8009f02 <_nx_tcp_fast_periodic_processing+0xca>
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_TRUE))
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
                     ((socket_ptr -> nx_tcp_socket_zero_window_probe_failure >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d103      	bne.n	8009f02 <_nx_tcp_fast_periodic_processing+0xca>
            {

                /* Number of retries has been exceeded.  */

                /* Close the socket via a connection reset.  */
                _nx_tcp_socket_connection_reset(socket_ptr);
 8009efa:	6978      	ldr	r0, [r7, #20]
 8009efc:	f001 f8db 	bl	800b0b6 <_nx_tcp_socket_connection_reset>
 8009f00:	e076      	b.n	8009ff0 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            /* YUXIN MODIFIED HERE */
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) ||
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f06:	2b03      	cmp	r3, #3
 8009f08:	d003      	beq.n	8009f12 <_nx_tcp_fast_periodic_processing+0xda>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED))
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) ||
 8009f0e:	2b04      	cmp	r3, #4
 8009f10:	d11d      	bne.n	8009f4e <_nx_tcp_fast_periodic_processing+0x116>
            {

                /* Yes, the timeout on the SYN message has expired.  */

                /* Increment the retry counter.  */
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                /* Setup the next timeout.  */
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009f2c:	6979      	ldr	r1, [r7, #20]
 8009f2e:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
 8009f32:	fb01 f303 	mul.w	r3, r1, r3
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8009f36:	409a      	lsls	r2, r3
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

                /* Send the initial SYN message again.  Adjust the sequence number before and
                   after to ensure the same sequence as the initial SYN.  */
                _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f42:	3b01      	subs	r3, #1
 8009f44:	4619      	mov	r1, r3
 8009f46:	6978      	ldr	r0, [r7, #20]
 8009f48:	f000 ff2e 	bl	800ada8 <_nx_tcp_packet_send_syn>
 8009f4c:	e050      	b.n	8009ff0 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            /* Has the TCP timeout for transmit packet or probing zero window expired?  */
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_head ||
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d107      	bne.n	8009f68 <_nx_tcp_fast_periodic_processing+0x130>
                     ((socket_ptr -> nx_tcp_socket_tx_window_advertised == 0) &&
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_head ||
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d116      	bne.n	8009f8e <_nx_tcp_fast_periodic_processing+0x156>
                      (socket_ptr -> nx_tcp_socket_state <= NX_TCP_CLOSE_WAIT)))
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     ((socket_ptr -> nx_tcp_socket_tx_window_advertised == 0) &&
 8009f64:	2b06      	cmp	r3, #6
 8009f66:	d812      	bhi.n	8009f8e <_nx_tcp_fast_periodic_processing+0x156>
            {

                /* Update the transmit sequence that entered fast transmit. */
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f6c:	1e5a      	subs	r2, r3, #1
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	661a      	str	r2, [r3, #96]	; 0x60

                /* Retransmit the packet. */
                _nx_tcp_socket_retransmit(ip_ptr, socket_ptr, NX_FALSE);
 8009f72:	2200      	movs	r2, #0
 8009f74:	6979      	ldr	r1, [r7, #20]
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f001 fa8a 	bl	800b490 <_nx_tcp_socket_retransmit>

                /* Exit fast recovery procedure. */
                socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	659a      	str	r2, [r3, #88]	; 0x58
 8009f8c:	e030      	b.n	8009ff0 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f92:	2b07      	cmp	r3, #7
 8009f94:	d007      	beq.n	8009fa6 <_nx_tcp_fast_periodic_processing+0x16e>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 8009f9a:	2b09      	cmp	r3, #9
 8009f9c:	d003      	beq.n	8009fa6 <_nx_tcp_fast_periodic_processing+0x16e>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_LAST_ACK))
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 8009fa2:	2b0b      	cmp	r3, #11
 8009fa4:	d11d      	bne.n	8009fe2 <_nx_tcp_fast_periodic_processing+0x1aa>

                /* We have a timeout condition on sending the FIN... so it needs to be
                   retried.  */

                /* Increment the retry counter.  */
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009fac:	1c5a      	adds	r2, r3, #1
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                /* Setup the next timeout.  */
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009fc0:	6979      	ldr	r1, [r7, #20]
 8009fc2:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
 8009fc6:	fb01 f303 	mul.w	r3, r1, r3
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8009fca:	409a      	lsls	r2, r3
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

                /* Send another FIN packet.  */
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6978      	ldr	r0, [r7, #20]
 8009fdc:	f000 fe79 	bl	800acd2 <_nx_tcp_packet_send_fin>
 8009fe0:	e006      	b.n	8009ff0 <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            else if (socket_ptr -> nx_tcp_socket_state == NX_TCP_TIMED_WAIT)
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe6:	2b0a      	cmp	r3, #10
 8009fe8:	d102      	bne.n	8009ff0 <_nx_tcp_fast_periodic_processing+0x1b8>
            {

                /* Clean the transmission control block.  */
                _nx_tcp_socket_block_cleanup(socket_ptr);
 8009fea:	6978      	ldr	r0, [r7, #20]
 8009fec:	f001 f836 	bl	800b05c <_nx_tcp_socket_block_cleanup>
            }
        }

        /* Move to the next TCP socket.  */
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009ff6:	617b      	str	r3, [r7, #20]
    while (sockets--)
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	1e5a      	subs	r2, r3, #1
 8009ffc:	613a      	str	r2, [r7, #16]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f47f af2a 	bne.w	8009e58 <_nx_tcp_fast_periodic_processing+0x20>
    }
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	2000804c 	.word	0x2000804c

0800a014 <_nx_tcp_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_initialize(VOID)
{
 800a014:	b480      	push	{r7}
 800a016:	af00      	add	r7, sp, #0
}
 800a018:	bf00      	nop
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <_nx_tcp_mss_option_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_mss_option_get(UCHAR *option_ptr, ULONG option_area_size, ULONG *mss)
{
 800a022:	b480      	push	{r7}
 800a024:	b087      	sub	sp, #28
 800a026:	af00      	add	r7, sp, #0
 800a028:	60f8      	str	r0, [r7, #12]
 800a02a:	60b9      	str	r1, [r7, #8]
 800a02c:	607a      	str	r2, [r7, #4]

ULONG option_length;

    /* Initialize the value.  */
    *mss = 0;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	601a      	str	r2, [r3, #0]

    /* Loop through the option area looking for the MSS.  */
    while (option_area_size >= 4)
 800a034:	e043      	b.n	800a0be <_nx_tcp_mss_option_get+0x9c>
    {

        /* Is the current character the MSS type?  */
        if (*option_ptr == NX_TCP_MSS_KIND)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d11a      	bne.n	800a074 <_nx_tcp_mss_option_get+0x52>
        {

            /* Yes, we found it!  */

            /* Move the pointer forward by one.  */
            option_ptr++;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	3301      	adds	r3, #1
 800a042:	60fb      	str	r3, [r7, #12]

            /* Check the option length, if option length is not equal to 4, return NX_FALSE.  */
            if (*option_ptr++ != 4)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	1c5a      	adds	r2, r3, #1
 800a048:	60fa      	str	r2, [r7, #12]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2b04      	cmp	r3, #4
 800a04e:	d001      	beq.n	800a054 <_nx_tcp_mss_option_get+0x32>
            {
                return(NX_FALSE);
 800a050:	2300      	movs	r3, #0
 800a052:	e03a      	b.n	800a0ca <_nx_tcp_mss_option_get+0xa8>
            }

            /* Build the mss size.  */
            *mss = (ULONG)*option_ptr++;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	1c5a      	adds	r2, r3, #1
 800a058:	60fa      	str	r2, [r7, #12]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	461a      	mov	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	601a      	str	r2, [r3, #0]

            /* Get the LSB of the MSS.  */
            *mss = (*mss << 8) | (ULONG)*option_ptr;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	021b      	lsls	r3, r3, #8
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	7812      	ldrb	r2, [r2, #0]
 800a06c:	431a      	orrs	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	601a      	str	r2, [r3, #0]

            /* Finished, get out of the loop!  */
            break;
 800a072:	e029      	b.n	800a0c8 <_nx_tcp_mss_option_get+0xa6>
        }

        /* Otherwise, process relative to the option type.  */

        /* Check for end of list.  */
        if (*option_ptr == NX_TCP_EOL_KIND)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d024      	beq.n	800a0c6 <_nx_tcp_mss_option_get+0xa4>
            /* Yes, end of list, get out!  */
            break;
        }

        /* Check for NOP.  */
        if (*option_ptr++ == NX_TCP_NOP_KIND)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	1c5a      	adds	r2, r3, #1
 800a080:	60fa      	str	r2, [r7, #12]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	2b01      	cmp	r3, #1
 800a086:	d103      	bne.n	800a090 <_nx_tcp_mss_option_get+0x6e>
        {

            /* One character option!  */
            option_area_size--;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	60bb      	str	r3, [r7, #8]
 800a08e:	e016      	b.n	800a0be <_nx_tcp_mss_option_get+0x9c>
        }
        else
        {

            /* Derive the option length.  */
            option_length =  ((ULONG)*option_ptr);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	617b      	str	r3, [r7, #20]

            /* Return when option length is invalid. */
            if (option_length == 0)
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d101      	bne.n	800a0a0 <_nx_tcp_mss_option_get+0x7e>
            {
                return(NX_FALSE);
 800a09c:	2300      	movs	r3, #0
 800a09e:	e014      	b.n	800a0ca <_nx_tcp_mss_option_get+0xa8>
            }

            /* Move the option pointer forward.  */
            option_ptr =  option_ptr + (option_length - 1);
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	60fb      	str	r3, [r7, #12]

            /* Determine if this is greater than the option area size.  */
            if (option_length > option_area_size)
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d901      	bls.n	800a0b6 <_nx_tcp_mss_option_get+0x94>
            {
                return(NX_FALSE);
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e009      	b.n	800a0ca <_nx_tcp_mss_option_get+0xa8>
            }
            else
            {
                option_area_size =  option_area_size - option_length;
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	60bb      	str	r3, [r7, #8]
    while (option_area_size >= 4)
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	2b03      	cmp	r3, #3
 800a0c2:	d8b8      	bhi.n	800a036 <_nx_tcp_mss_option_get+0x14>
 800a0c4:	e000      	b.n	800a0c8 <_nx_tcp_mss_option_get+0xa6>
            break;
 800a0c6:	bf00      	nop
            }
        }
    }

    /* Return.  */
    return(NX_TRUE);
 800a0c8:	2301      	movs	r3, #1
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	371c      	adds	r7, #28
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <_nx_tcp_no_connection_reset>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_no_connection_reset(NX_IP *ip_ptr, NX_PACKET *packet_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800a0d6:	b590      	push	{r4, r7, lr}
 800a0d8:	b0d3      	sub	sp, #332	; 0x14c
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a0e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a0e4:	6018      	str	r0, [r3, #0]
 800a0e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a0ea:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800a0ee:	6019      	str	r1, [r3, #0]
 800a0f0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a0f4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a0f8:	601a      	str	r2, [r3, #0]
ULONG         data_offset = 0;
#endif /* NX_IPSEC_ENABLE */


    /* Clear the fake socket first.  */
    memset((void *)&fake_socket, 0, sizeof(NX_TCP_SOCKET));
 800a0fa:	f107 0314 	add.w	r3, r7, #20
 800a0fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a102:	2100      	movs	r1, #0
 800a104:	4618      	mov	r0, r3
 800a106:	f008 f8d7 	bl	80122b8 <memset>

    /* Build a fake socket so we can send a reset TCP requests that are not valid.  */
    fake_socket.nx_tcp_socket_ip_ptr = ip_ptr;
 800a10a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a10e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a112:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a116:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800a11a:	6812      	ldr	r2, [r2, #0]
 800a11c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    /* Set the connection IP address.  */
#ifndef NX_DISABLE_IPV4
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800a120:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a124:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a12e:	2b04      	cmp	r3, #4
 800a130:	d13b      	bne.n	800a1aa <_nx_tcp_no_connection_reset+0xd4>
    {
    NX_IPV4_HEADER *ip_header_ptr;

        /* Set the IP header.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800a132:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a136:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a13e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

        /* Set the connection ip.  */
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_version = NX_IP_VERSION_V4;
 800a142:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a146:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a14a:	2204      	movs	r2, #4
 800a14c:	615a      	str	r2, [r3, #20]
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4 = ip_header_ptr -> nx_ip_header_source_ip;
 800a14e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a152:	68da      	ldr	r2, [r3, #12]
 800a154:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a158:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a15c:	619a      	str	r2, [r3, #24]

        /* Assume the interface that receives the incoming packet is the best interface
           for sending responses. */
        fake_socket.nx_tcp_socket_connect_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800a15e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a162:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a16a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a16e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a172:	629a      	str	r2, [r3, #40]	; 0x28
        fake_socket.nx_tcp_socket_next_hop_address = NX_NULL;
 800a174:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a178:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a17c:	2200      	movs	r2, #0
 800a17e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Find the next hop info. */
        _nx_ip_route_find(ip_ptr, fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4, &fake_socket.nx_tcp_socket_connect_interface,
 800a180:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a184:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a188:	6999      	ldr	r1, [r3, #24]
 800a18a:	f107 0314 	add.w	r3, r7, #20
 800a18e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a192:	f107 0314 	add.w	r3, r7, #20
 800a196:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a19a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a19e:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 800a1a2:	4623      	mov	r3, r4
 800a1a4:	6800      	ldr	r0, [r0, #0]
 800a1a6:	f7fd ff5b 	bl	8008060 <_nx_ip_route_find>
#endif /*NX_IPSEC_ENABLE*/
    }
#endif /* FEATURE_NX_IPV6 */

    /* Set the source port and destination port.  */
    fake_socket.nx_tcp_socket_port  = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 800a1aa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a1ae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a1bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a1c0:	60da      	str	r2, [r3, #12]
    fake_socket.nx_tcp_socket_connect_port = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 800a1c2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a1c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	0c1a      	lsrs	r2, r3, #16
 800a1d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a1d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a1d8:	61da      	str	r2, [r3, #28]

    /* Set the sequence number only if the incoming segment does not have the ACK flag, according to
       Section 3.4, "Reset Generation" on page 37, RFC793. */
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 800a1da:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a1de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d136      	bne.n	800a25c <_nx_tcp_no_connection_reset+0x186>
    {
        /* Get the header length.  */
        header_length = (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800a1ee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a1f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	0f1b      	lsrs	r3, r3, #28
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        /* Update sequence number to set the reset acknowledge number.  */
        tcp_header_ptr -> nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 800a202:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a206:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	685a      	ldr	r2, [r3, #4]
 800a20e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a212:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a21a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a21e:	1acb      	subs	r3, r1, r3
 800a220:	441a      	add	r2, r3
 800a222:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a226:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	605a      	str	r2, [r3, #4]

        /* Check the SYN and FIN bits.  */
        if (tcp_header_ptr -> nx_tcp_header_word_3 & (NX_TCP_SYN_BIT | NX_TCP_FIN_BIT))
 800a22e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a232:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00c      	beq.n	800a25c <_nx_tcp_no_connection_reset+0x186>
        {

            /* Update sequence number to set the reset acknowledge number.  */
            tcp_header_ptr -> nx_tcp_sequence_number++;
 800a242:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a246:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	1c5a      	adds	r2, r3, #1
 800a250:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a254:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	605a      	str	r2, [r3, #4]
            fake_socket.nx_tcp_socket_egress_sa_data_offset = 0;
        }
    }
#endif

    fake_socket.nx_tcp_socket_time_to_live = (UINT)NX_IP_TIME_TO_LIVE;
 800a25c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a260:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a264:	2280      	movs	r2, #128	; 0x80
 800a266:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    /* Send a RST to indicate the connection was not available.  */
    _nx_tcp_packet_send_rst(&fake_socket, tcp_header_ptr);
 800a26a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a26e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800a272:	f107 0214 	add.w	r2, r7, #20
 800a276:	6819      	ldr	r1, [r3, #0]
 800a278:	4610      	mov	r0, r2
 800a27a:	f000 fd61 	bl	800ad40 <_nx_tcp_packet_send_rst>
}
 800a27e:	bf00      	nop
 800a280:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 800a284:	46bd      	mov	sp, r7
 800a286:	bd90      	pop	{r4, r7, pc}

0800a288 <_nx_tcp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b09c      	sub	sp, #112	; 0x70
 800a28c:	af02      	add	r7, sp, #8
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]

UINT                         index;
UINT                         port;
ULONG                       *source_ip = NX_NULL;
 800a292:	2300      	movs	r3, #0
 800a294:	667b      	str	r3, [r7, #100]	; 0x64
ULONG                       *dest_ip = NX_NULL;
 800a296:	2300      	movs	r3, #0
 800a298:	663b      	str	r3, [r7, #96]	; 0x60
NX_TCP_SOCKET               *socket_ptr;
NX_TCP_HEADER               *tcp_header_ptr;
struct NX_TCP_LISTEN_STRUCT *listen_ptr;
VOID                         (*listen_callback)(NX_TCP_SOCKET *socket_ptr, UINT port);
ULONG                        option_words;
ULONG                        mss = 0;
 800a29a:	2300      	movs	r3, #0
 800a29c:	60bb      	str	r3, [r7, #8]
ULONG                        checksum;
NX_INTERFACE                *interface_ptr = NX_NULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(NX_DISABLE_TCP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT                         compute_checksum = 1;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	653b      	str	r3, [r7, #80]	; 0x50
NX_PACKET                   *queued_ptr;
NX_PACKET                   *queued_prev_ptr;
ULONG                       *queued_source_ip;
UINT                         queued_source_port;
UINT                         is_a_RST_request;
UINT                         is_valid_option_flag = NX_TRUE;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Pickup the source IP address.  */
#ifndef NX_DISABLE_IPV4
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a2b0:	2b04      	cmp	r3, #4
 800a2b2:	d10e      	bne.n	800a2d2 <_nx_tcp_packet_process+0x4a>
    {

    NX_IPV4_HEADER *ip_header_ptr;

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b8:	637b      	str	r3, [r7, #52]	; 0x34

        source_ip = &ip_header_ptr -> nx_ip_header_source_ip;
 800a2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2bc:	330c      	adds	r3, #12
 800a2be:	667b      	str	r3, [r7, #100]	; 0x64

        dest_ip = &ip_header_ptr -> nx_ip_header_destination_ip;
 800a2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c2:	3310      	adds	r3, #16
 800a2c4:	663b      	str	r3, [r7, #96]	; 0x60

        mss = 536;
 800a2c6:	f44f 7306 	mov.w	r3, #536	; 0x218
 800a2ca:	60bb      	str	r3, [r7, #8]

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d0:	657b      	str	r3, [r7, #84]	; 0x54
        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
    }
#endif /* FEATURE_NX_IPV6 */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_RX_CHECKSUM)
 800a2d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d6:	f003 0308 	and.w	r3, r3, #8
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <_nx_tcp_packet_process+0x5a>
    {
        compute_checksum = 0;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	653b      	str	r3, [r7, #80]	; 0x50
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_TCP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800a2e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d023      	beq.n	800a330 <_nx_tcp_packet_process+0xa8>
#endif /* defined(NX_DISABLE_TCP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
                                           (UINT)packet_ptr -> nx_packet_length,
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800a2ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2f2:	2106      	movs	r1, #6
 800a2f4:	6838      	ldr	r0, [r7, #0]
 800a2f6:	f7fc fc14 	bl	8006b22 <_nx_ip_checksum_compute>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	633b      	str	r3, [r7, #48]	; 0x30
                                           source_ip, dest_ip);

        checksum = NX_LOWER_16_MASK & ~checksum;
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a300:	43db      	mvns	r3, r3
 800a302:	b29b      	uxth	r3, r3
 800a304:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the checksum.  */
        if (checksum != 0)
 800a306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d011      	beq.n	800a330 <_nx_tcp_packet_process+0xa8>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the TCP invalid packet error count.  */
            ip_ptr -> nx_ip_tcp_invalid_packets++;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a312:	1c5a      	adds	r2, r3, #1
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Increment the TCP packet checksum error count.  */
            ip_ptr -> nx_ip_tcp_checksum_errors++;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a320:	1c5a      	adds	r2, r3, #1
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
#endif

            /* Checksum error, just release the packet.  */
            _nx_packet_release(packet_ptr);
 800a328:	6838      	ldr	r0, [r7, #0]
 800a32a:	f7ff f8f5 	bl	8009518 <_nx_packet_release>
            return;
 800a32e:	e325      	b.n	800a97c <_nx_tcp_packet_process+0x6f4>
        }
    }

    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the TCP header.  */
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 800a336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	ba1a      	rev	r2, r3
 800a33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33e:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 800a340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	ba1a      	rev	r2, r3
 800a346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a348:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 800a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	ba1a      	rev	r2, r3
 800a350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a352:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 800a354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	ba1a      	rev	r2, r3
 800a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35c:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800a35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	ba1a      	rev	r2, r3
 800a364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a366:	611a      	str	r2, [r3, #16]

    /* Determine if there are any option words...  Note there are always 5 words in a TCP header.  */
    option_words =  (tcp_header_ptr -> nx_tcp_header_word_3 >> 28) - 5;
 800a368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	0f1b      	lsrs	r3, r3, #28
 800a36e:	3b05      	subs	r3, #5
 800a370:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Check for valid packet length.  */
    if (((INT)option_words < 0) || (packet_ptr -> nx_packet_length < (sizeof(NX_TCP_HEADER) + (option_words << 2))))
 800a372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a374:	2b00      	cmp	r3, #0
 800a376:	db06      	blt.n	800a386 <_nx_tcp_packet_process+0xfe>
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	3314      	adds	r3, #20
 800a382:	429a      	cmp	r2, r3
 800a384:	d20a      	bcs.n	800a39c <_nx_tcp_packet_process+0x114>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800a394:	6838      	ldr	r0, [r7, #0]
 800a396:	f7ff f8bf 	bl	8009518 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800a39a:	e2ef      	b.n	800a97c <_nx_tcp_packet_process+0x6f4>
    }
#endif

    if (option_words)
 800a39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d01c      	beq.n	800a3dc <_nx_tcp_packet_process+0x154>
    {

        /* Yes, there are one or more option words.  */

        /* Derive the Maximum Segment Size (MSS) in the option words.  */
        status = _nx_tcp_mss_option_get((packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER)), option_words * (ULONG)sizeof(ULONG), &mss);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	f103 0014 	add.w	r0, r3, #20
 800a3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	f107 0208 	add.w	r2, r7, #8
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	f7ff fe35 	bl	800a022 <_nx_tcp_mss_option_get>
 800a3b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Check the status. if status is NX_FALSE, means Option Length is invalid.  */
        if (status == NX_FALSE)
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d102      	bne.n	800a3c6 <_nx_tcp_packet_process+0x13e>
        {

            /* The option is invalid.  */
            is_valid_option_flag = NX_FALSE;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3c4:	e00a      	b.n	800a3dc <_nx_tcp_packet_process+0x154>
        else
        {

            /* Set the default MSS if the MSS value was not found.  */
            /*lint -e{644} suppress variable might not be initialized, since "mss" was initialized in _nx_tcp_mss_option_get. */
            if (mss == 0)
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d107      	bne.n	800a3dc <_nx_tcp_packet_process+0x154>
            {
#ifndef NX_DISABLE_IPV4
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a3d2:	2b04      	cmp	r3, #4
 800a3d4:	d102      	bne.n	800a3dc <_nx_tcp_packet_process+0x154>
                {
                    mss = 536;
 800a3d6:	f44f 7306 	mov.w	r3, #536	; 0x218
 800a3da:	60bb      	str	r3, [r7, #8]
        }
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
    }

    /* Pickup the destination TCP port.  */
    port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 800a3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	623b      	str	r3, [r7, #32]

    /* Pickup the source TCP port.  */
    source_port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 800a3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	0c1b      	lsrs	r3, r3, #16
 800a3ea:	61fb      	str	r3, [r7, #28]

    /* Calculate the hash index in the TCP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	0a1a      	lsrs	r2, r3, #8
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f003 031f 	and.w	r3, r3, #31
 800a3f8:	61bb      	str	r3, [r7, #24]

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_tcp_port_table[index];
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Determine if there are any sockets bound on this port index.  */
    if (socket_ptr)
 800a40a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d068      	beq.n	800a4e2 <_nx_tcp_packet_process+0x25a>

        /*  Yes, loop to examine the list of bound ports on this index.  */
        do
        {

            find_a_match = 0;
 800a410:	2300      	movs	r3, #0
 800a412:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Determine if the port has been found.  */
            if ((socket_ptr -> nx_tcp_socket_port == port) &&
 800a414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	6a3a      	ldr	r2, [r7, #32]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d153      	bne.n	800a4c6 <_nx_tcp_packet_process+0x23e>
                (socket_ptr -> nx_tcp_socket_connect_port == source_port))
 800a41e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a420:	69db      	ldr	r3, [r3, #28]
            if ((socket_ptr -> nx_tcp_socket_port == port) &&
 800a422:	69fa      	ldr	r2, [r7, #28]
 800a424:	429a      	cmp	r2, r3
 800a426:	d14e      	bne.n	800a4c6 <_nx_tcp_packet_process+0x23e>
            {

                /* Make sure they are the same IP protocol */
                if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == packet_ptr -> nx_packet_ip_version)
 800a428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	683a      	ldr	r2, [r7, #0]
 800a42e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800a432:	4293      	cmp	r3, r2
 800a434:	d10c      	bne.n	800a450 <_nx_tcp_packet_process+0x1c8>
                {

#ifndef NX_DISABLE_IPV4
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a43c:	2b04      	cmp	r3, #4
 800a43e:	d107      	bne.n	800a450 <_nx_tcp_packet_process+0x1c8>
                    {

                        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 == *source_ip)
 800a440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a442:	699a      	ldr	r2, [r3, #24]
 800a444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d101      	bne.n	800a450 <_nx_tcp_packet_process+0x1c8>
                        {
                            find_a_match = 1;
 800a44c:	2301      	movs	r3, #1
 800a44e:	63bb      	str	r3, [r7, #56]	; 0x38
                        }
                    }
#endif /* FEATURE_NX_IPV6 */
                }

                if (find_a_match)
 800a450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a452:	2b00      	cmp	r3, #0
 800a454:	d037      	beq.n	800a4c6 <_nx_tcp_packet_process+0x23e>
                    /* Determine if we need to update the tcp port head pointer.  This should
                       only be done if the found socket pointer is not the head pointer and
                       the mutex for this IP instance is available.  */

                    /* Move the port head pointer to this socket.  */
                    ip_ptr -> nx_ip_tcp_port_table[index] = socket_ptr;
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	4413      	add	r3, r2
 800a462:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a464:	605a      	str	r2, [r3, #4]

                    /* If this packet contains SYN */
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 800a466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d024      	beq.n	800a4bc <_nx_tcp_packet_process+0x234>
                    {

                        /* Record the MSS value if it is present and the   Otherwise use 536, as
                           outlined in RFC 1122 section 4.2.2.6. */
                        socket_ptr -> nx_tcp_socket_peer_mss = mss;
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a476:	625a      	str	r2, [r3, #36]	; 0x24

                        if ((mss > socket_ptr -> nx_tcp_socket_mss) && socket_ptr -> nx_tcp_socket_mss)
 800a478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a47a:	691a      	ldr	r2, [r3, #16]
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d208      	bcs.n	800a494 <_nx_tcp_packet_process+0x20c>
 800a482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d004      	beq.n	800a494 <_nx_tcp_packet_process+0x20c>
                        {
                            socket_ptr -> nx_tcp_socket_connect_mss  = socket_ptr -> nx_tcp_socket_mss;
 800a48a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a48c:	691a      	ldr	r2, [r3, #16]
 800a48e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a490:	621a      	str	r2, [r3, #32]
 800a492:	e00b      	b.n	800a4ac <_nx_tcp_packet_process+0x224>
                        }
                        else if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) ||
 800a494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a498:	2b03      	cmp	r3, #3
 800a49a:	d104      	bne.n	800a4a6 <_nx_tcp_packet_process+0x21e>
                                 (socket_ptr -> nx_tcp_socket_connect_mss > mss))
 800a49c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a49e:	6a1a      	ldr	r2, [r3, #32]
 800a4a0:	68bb      	ldr	r3, [r7, #8]
                        else if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) ||
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d902      	bls.n	800a4ac <_nx_tcp_packet_process+0x224>
                        {
                            socket_ptr -> nx_tcp_socket_connect_mss  = mss;
 800a4a6:	68ba      	ldr	r2, [r7, #8]
 800a4a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4aa:	621a      	str	r2, [r3, #32]
                        }

                        /* Compute the SMSS * SMSS value, so later TCP module doesn't need to redo the multiplication. */
                        socket_ptr -> nx_tcp_socket_connect_mss2 =
                            socket_ptr -> nx_tcp_socket_connect_mss * socket_ptr -> nx_tcp_socket_connect_mss;
 800a4ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4ae:	6a1b      	ldr	r3, [r3, #32]
 800a4b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a4b2:	6a12      	ldr	r2, [r2, #32]
 800a4b4:	fb03 f202 	mul.w	r2, r3, r2
                        socket_ptr -> nx_tcp_socket_connect_mss2 =
 800a4b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4ba:	631a      	str	r2, [r3, #48]	; 0x30
                        socket_ptr -> nx_tcp_snd_win_scale_value = rwin_scale;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
                    }

                    /* Process the packet within an existing TCP connection.  */
                    _nx_tcp_socket_packet_process(socket_ptr, packet_ptr);
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a4c0:	f000 fe4e 	bl	800b160 <_nx_tcp_socket_packet_process>

                    /* Get out of the search loop and this function!  */
                    return;
 800a4c4:	e25a      	b.n	800a97c <_nx_tcp_packet_process+0x6f4>
                }
            }

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_tcp_socket_bound_next;
 800a4c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4cc:	65fb      	str	r3, [r7, #92]	; 0x5c
        } while (socket_ptr != ip_ptr -> nx_ip_tcp_port_table[index]);
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d196      	bne.n	800a410 <_nx_tcp_packet_process+0x188>
    }

    /* At this point, we know there is not an existing TCP connection.  */

    /* If this packet contains the valid option.  */
    if (is_valid_option_flag == NX_FALSE)
 800a4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10f      	bne.n	800a508 <_nx_tcp_packet_process+0x280>
    {

        /* Send RST message.
           TCP MUST be prepared to handle an illegal option length (e.g., zero) without crashing;
           a suggested procedure is to reset the connection and log the reason, outlined in RFC 1122, Section 4.2.2.5, Page85. */
        _nx_tcp_no_connection_reset(ip_ptr, packet_ptr, tcp_header_ptr);
 800a4e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4ea:	6839      	ldr	r1, [r7, #0]
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7ff fdf2 	bl	800a0d6 <_nx_tcp_no_connection_reset>

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error count.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a4f8:	1c5a      	adds	r2, r3, #1
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* NX_DISABLE_TCP_INFO */

        /* Not a connection request, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800a500:	6838      	ldr	r0, [r7, #0]
 800a502:	f7ff f809 	bl	8009518 <_nx_packet_release>

        return;
 800a506:	e239      	b.n	800a97c <_nx_tcp_packet_process+0x6f4>
#endif

    /* Handle new connection requests without ACK bit in NX_TCP_SYN_RECEIVED state.
       NX_TCP_SYN_RECEIVED state is equal of LISTEN state of RFC.
       RFC793, Section3.9, Page65. */
    if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)) &&
 800a508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a510:	2b00      	cmp	r3, #0
 800a512:	f040 820f 	bne.w	800a934 <_nx_tcp_packet_process+0x6ac>
        (ip_ptr -> nx_ip_tcp_active_listen_requests))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
    if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)) &&
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 8209 	beq.w	800a934 <_nx_tcp_packet_process+0x6ac>
    {

#ifndef NX_DISABLE_IPV4
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a528:	2b04      	cmp	r3, #4
 800a52a:	d145      	bne.n	800a5b8 <_nx_tcp_packet_process+0x330>
        {

            /* Check for LAND attack packet. This is an incoming packet with matching
               Source and Destination IP address, and matching source and destination port. */
            if ((*source_ip == *dest_ip) && (source_port == port))
 800a52c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	429a      	cmp	r2, r3
 800a536:	d10e      	bne.n	800a556 <_nx_tcp_packet_process+0x2ce>
 800a538:	69fa      	ldr	r2, [r7, #28]
 800a53a:	6a3b      	ldr	r3, [r7, #32]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d10a      	bne.n	800a556 <_nx_tcp_packet_process+0x2ce>

                /* Bogus packet. Drop it! */

#ifndef NX_DISABLE_TCP_INFO
                /* Increment the TCP invalid packet error count.  */
                ip_ptr -> nx_ip_tcp_invalid_packets++;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a546:	1c5a      	adds	r2, r3, #1
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* NX_DISABLE_TCP_INFO */

                /* Release the packet we will not process any further.  */
                _nx_packet_release(packet_ptr);
 800a54e:	6838      	ldr	r0, [r7, #0]
 800a550:	f7fe ffe2 	bl	8009518 <_nx_packet_release>
                return;
 800a554:	e212      	b.n	800a97c <_nx_tcp_packet_process+0x6f4>

            /* It shall not make connections if the source IP address
               is broadcast or multicast.   */
            if (
                /* Check for Multicast address */
                ((*source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 800a556:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
            if (
 800a55e:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800a562:	d01e      	beq.n	800a5a2 <_nx_tcp_packet_process+0x31a>
                /* Check for subnet-directed broadcast */
                (((*source_ip & interface_ptr -> nx_interface_ip_network_mask) == interface_ptr -> nx_interface_ip_network) &&
 800a564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	401a      	ands	r2, r3
 800a56e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a570:	69db      	ldr	r3, [r3, #28]
                ((*source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 800a572:	429a      	cmp	r2, r3
 800a574:	d10a      	bne.n	800a58c <_nx_tcp_packet_process+0x304>
                 ((*source_ip & ~(interface_ptr -> nx_interface_ip_network_mask)) == ~(interface_ptr -> nx_interface_ip_network_mask))) ||
 800a576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	43db      	mvns	r3, r3
 800a580:	401a      	ands	r2, r3
 800a582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	43db      	mvns	r3, r3
                (((*source_ip & interface_ptr -> nx_interface_ip_network_mask) == interface_ptr -> nx_interface_ip_network) &&
 800a588:	429a      	cmp	r2, r3
 800a58a:	d00a      	beq.n	800a5a2 <_nx_tcp_packet_process+0x31a>
                /* Check for local subnet address */
                (*source_ip == interface_ptr -> nx_interface_ip_network)  ||
 800a58c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a592:	69db      	ldr	r3, [r3, #28]
                 ((*source_ip & ~(interface_ptr -> nx_interface_ip_network_mask)) == ~(interface_ptr -> nx_interface_ip_network_mask))) ||
 800a594:	429a      	cmp	r2, r3
 800a596:	d004      	beq.n	800a5a2 <_nx_tcp_packet_process+0x31a>
                /* Check for limited broadcast */
                (*source_ip == NX_IP_LIMITED_BROADCAST)
 800a598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a59a:	681b      	ldr	r3, [r3, #0]
                (*source_ip == interface_ptr -> nx_interface_ip_network)  ||
 800a59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a0:	d10a      	bne.n	800a5b8 <_nx_tcp_packet_process+0x330>
               )
            {

#ifndef NX_DISABLE_TCP_INFO
                /* Increment the TCP invalid packet error count.  */
                ip_ptr -> nx_ip_tcp_invalid_packets++;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a5a8:	1c5a      	adds	r2, r3, #1
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* NX_DISABLE_TCP_INFO */

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 800a5b0:	6838      	ldr	r0, [r7, #0]
 800a5b2:	f7fe ffb1 	bl	8009518 <_nx_packet_release>

                /* Finished processing, simply return!  */
                return;
 800a5b6:	e1e1      	b.n	800a97c <_nx_tcp_packet_process+0x6f4>
            }
        }
#endif /* FEATURE_NX_IPV6*/

        /* Search all ports in listen mode for a match. */
        listen_ptr =  ip_ptr -> nx_ip_tcp_active_listen_requests;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 800a5be:	65bb      	str	r3, [r7, #88]	; 0x58
        do
        {

            /* Determine if this port is in a listen mode.  */
            if (listen_ptr -> nx_tcp_listen_port == port)
 800a5c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6a3a      	ldr	r2, [r7, #32]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	f040 81aa 	bne.w	800a920 <_nx_tcp_packet_process+0x698>

                /* Determine if the packet is an initial connection request.
                   The incoming SYN packet is a connection request.
                   The incoming RST packet is related to a previous connection request.
                   Fourth other text or control. RFC793, Section3.9, Page66. */
                if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)) &&
 800a5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d110      	bne.n	800a5fa <_nx_tcp_packet_process+0x372>
                    (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)))
 800a5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
                if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)) &&
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10a      	bne.n	800a5fa <_nx_tcp_packet_process+0x372>
                {

#ifndef NX_DISABLE_TCP_INFO
                    /* This is a duplicate connection request. Increment the TCP dropped packet count.  */
                    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif /* NX_DISABLE_TCP_INFO */

                    /* Release the packet.  */
                    _nx_packet_release(packet_ptr);
 800a5f2:	6838      	ldr	r0, [r7, #0]
 800a5f4:	f7fe ff90 	bl	8009518 <_nx_packet_release>

                    return;
 800a5f8:	e1c0      	b.n	800a97c <_nx_tcp_packet_process+0x6f4>
                }

#ifndef NX_DISABLE_TCP_INFO

                /* Check for a SYN bit set.  */
                if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT))
 800a5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00d      	beq.n	800a622 <_nx_tcp_packet_process+0x39a>
                {

                    /* Increment the passive TCP connections count.  */
                    ip_ptr -> nx_ip_tcp_passive_connections++;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a60c:	1c5a      	adds	r2, r3, #1
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

                    /* Increment the TCP connections count.  */
                    ip_ptr -> nx_ip_tcp_connections++;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a61a:	1c5a      	adds	r2, r3, #1
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
#endif

                /* Okay, this port is in a listen mode.  We now need to see if
                   there is an available socket for the new connection request
                   present.  */
                if ((listen_ptr -> nx_tcp_listen_socket_ptr) &&
 800a622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	2b00      	cmp	r3, #0
 800a628:	f000 80b8 	beq.w	800a79c <_nx_tcp_packet_process+0x514>
                    ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT) == NX_NULL))
 800a62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
                if ((listen_ptr -> nx_tcp_listen_socket_ptr) &&
 800a634:	2b00      	cmp	r3, #0
 800a636:	f040 80b1 	bne.w	800a79c <_nx_tcp_packet_process+0x514>
                    /* Yes there is indeed a socket present.  We now need to
                       fill in the appropriate info and call the server callback
                       routine.  */

                    /* Allocate the supplied server socket.  */
                    socket_ptr = listen_ptr -> nx_tcp_listen_socket_ptr;
 800a63a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	65fb      	str	r3, [r7, #92]	; 0x5c

                    /* Clear the server socket pointer in the listen request.  If the
                       application wishes to honor more server connections on this port,
                       the application must call relisten with a new server socket
                       pointer.  */
                    listen_ptr -> nx_tcp_listen_socket_ptr =  NX_NULL;
 800a640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a642:	2200      	movs	r2, #0
 800a644:	609a      	str	r2, [r3, #8]

                    /* Fill the socket in with the appropriate information.  */


#ifndef NX_DISABLE_IPV4
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a64c:	2b04      	cmp	r3, #4
 800a64e:	d116      	bne.n	800a67e <_nx_tcp_packet_process+0x3f6>
                    {

                        /* Assume the interface that receives the incoming packet is the best interface
                           for sending responses. */
                        socket_ptr -> nx_tcp_socket_connect_interface = interface_ptr;
 800a650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a652:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a654:	629a      	str	r2, [r3, #40]	; 0x28
                        socket_ptr -> nx_tcp_socket_next_hop_address = NX_NULL;
 800a656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a658:	2200      	movs	r2, #0
 800a65a:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Set the next hop address.  */
                        _nx_ip_route_find(ip_ptr, *source_ip, &socket_ptr -> nx_tcp_socket_connect_interface,
 800a65c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a65e:	6819      	ldr	r1, [r3, #0]
 800a660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a662:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a668:	332c      	adds	r3, #44	; 0x2c
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f7fd fcf8 	bl	8008060 <_nx_ip_route_find>
                                          &socket_ptr -> nx_tcp_socket_next_hop_address);

                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version =  NX_IP_VERSION_V4;
 800a670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a672:	2204      	movs	r2, #4
 800a674:	615a      	str	r2, [r3, #20]
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = *source_ip;
 800a676:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a67c:	619a      	str	r2, [r3, #24]
                        socket_ptr -> nx_tcp_socket_ipv6_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
                        socket_ptr -> nx_tcp_socket_connect_interface = interface_ptr;
                    }
#endif /* FEATURE_NX_IPV6 */

                    socket_ptr -> nx_tcp_socket_connect_port = source_port;
 800a67e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a680:	69fa      	ldr	r2, [r7, #28]
 800a682:	61da      	str	r2, [r3, #28]
                    socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number;
 800a684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a68a:	641a      	str	r2, [r3, #64]	; 0x40


                    /* Yes, MSS was found, so store it!  */
                    socket_ptr -> nx_tcp_socket_peer_mss = mss;
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a690:	625a      	str	r2, [r3, #36]	; 0x24
                     */
                    socket_ptr -> nx_tcp_snd_win_scale_value = rwin_scale;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

                    /* Set the initial slow start threshold to be the advertised window size. */
                    socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800a692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a694:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a698:	635a      	str	r2, [r3, #52]	; 0x34

                    /* Slow start:  setup initial window (IW) to be MSS,  RFC 2581, 3.1 */
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = mss;
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a69e:	659a      	str	r2, [r3, #88]	; 0x58

                    /* Initialize the transmit outstanding byte count to zero. */
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800a6a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	65da      	str	r2, [r3, #92]	; 0x5c

                    /* Calculate the hash index in the TCP port array of the associated IP instance.  */
                    index = (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 800a6a6:	6a3b      	ldr	r3, [r7, #32]
 800a6a8:	0a1a      	lsrs	r2, r3, #8
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	f003 031f 	and.w	r3, r3, #31
 800a6b2:	61bb      	str	r3, [r7, #24]

                    /* Determine if the list is NULL.  */
                    if (ip_ptr -> nx_ip_tcp_port_table[index])
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4413      	add	r3, r2
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d02c      	beq.n	800a720 <_nx_tcp_packet_process+0x498>
                    {

                        /* There are already sockets on this list... just add this one
                           to the end.  */
                        socket_ptr -> nx_tcp_socket_bound_next =
                            ip_ptr -> nx_ip_tcp_port_table[index];
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	4413      	add	r3, r2
 800a6d2:	685a      	ldr	r2, [r3, #4]
                        socket_ptr -> nx_tcp_socket_bound_next =
 800a6d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                        socket_ptr -> nx_tcp_socket_bound_previous =
                            (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous;
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	4413      	add	r3, r2
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
                        socket_ptr -> nx_tcp_socket_bound_previous =
 800a6ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6ee:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
                        ((ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a704:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a706:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                            socket_ptr;
                        (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous = socket_ptr;
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	4413      	add	r3, r2
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a71a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800a71e:	e00f      	b.n	800a740 <_nx_tcp_packet_process+0x4b8>
                    else
                    {

                        /* Nothing is on the TCP port list.  Add this TCP socket to an
                           empty list.  */
                        socket_ptr -> nx_tcp_socket_bound_next =      socket_ptr;
 800a720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a722:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a724:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                        socket_ptr -> nx_tcp_socket_bound_previous =  socket_ptr;
 800a728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a72a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a72c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
                        ip_ptr -> nx_ip_tcp_port_table[index] =       socket_ptr;
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4413      	add	r3, r2
 800a73c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a73e:	605a      	str	r2, [r3, #4]
                    }

                    /* Pickup the listen callback function.  */
                    listen_callback = listen_ptr -> nx_tcp_listen_callback;
 800a740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	617b      	str	r3, [r7, #20]

                    /* Release the incoming packet.  */
                    _nx_packet_release(packet_ptr);
 800a746:	6838      	ldr	r0, [r7, #0]
 800a748:	f7fe fee6 	bl	8009518 <_nx_packet_release>

                    /* Determine if an accept call with suspension has already been made
                       for this socket.  If so, the SYN message needs to be sent from
                       here.  */
                    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 800a74c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a750:	2b04      	cmp	r3, #4
 800a752:	d11a      	bne.n	800a78a <_nx_tcp_packet_process+0x502>
                        /* The application is suspended on an accept call for this socket.
                           Simply send the SYN now and keep the thread suspended until the
                           other side completes the connection.  */

                        /* Send the SYN message, but increment the ACK first.  */
                        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800a754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a758:	1c5a      	adds	r2, r3, #1
 800a75a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a75c:	641a      	str	r2, [r3, #64]	; 0x40

                        /* Increment the sequence number for the SYN message.  */
                        socket_ptr -> nx_tcp_socket_tx_sequence++;
 800a75e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a762:	1c5a      	adds	r2, r3, #1
 800a764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a766:	63da      	str	r2, [r3, #60]	; 0x3c

                        /* Setup a timeout so the connection attempt can be sent again.  */
                        socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800a768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a76a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800a76e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a770:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                        socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800a774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a776:	2200      	movs	r2, #0
 800a778:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                        /* Send the SYN+ACK message.  */
                        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800a77c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a77e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a780:	3b01      	subs	r3, #1
 800a782:	4619      	mov	r1, r3
 800a784:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a786:	f000 fb0f 	bl	800ada8 <_nx_tcp_packet_send_syn>
                    }

                    /* Determine if there is a listen callback function.  */
                    if (listen_callback)
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f000 80c6 	beq.w	800a91e <_nx_tcp_packet_process+0x696>
                    {
                        /* Call the user's listen callback function.  */
                        (listen_callback)(socket_ptr, port);
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	6a39      	ldr	r1, [r7, #32]
 800a796:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a798:	4798      	blx	r3
                    if (listen_callback)
 800a79a:	e0c0      	b.n	800a91e <_nx_tcp_packet_process+0x696>
                        /* If trace is enabled, insert this event into the trace buffer.  */
                        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_SYN_RECEIVE, ip_ptr, NX_NULL, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);
                    }

                    /* Check for the same connection request already in the queue.  */
                    queued_count = listen_ptr -> nx_tcp_listen_queue_current;
 800a79c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a79e:	691b      	ldr	r3, [r3, #16]
 800a7a0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    queued_ptr = listen_ptr -> nx_tcp_listen_queue_head;
 800a7a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	64bb      	str	r3, [r7, #72]	; 0x48
                    queued_prev_ptr = queued_ptr;
 800a7a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7aa:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Initialize the check for queued request to false.*/
                    is_a_RST_request = NX_FALSE;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Loop through the queued list in order to search for duplicate request.  */
                    while (queued_count--)
 800a7b0:	e05c      	b.n	800a86c <_nx_tcp_packet_process+0x5e4>
                    {

                        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                        queued_source_port = (UINT)(*((ULONG *)queued_ptr -> nx_packet_prepend_ptr) >> NX_SHIFT_BY_16);
 800a7b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	0c1b      	lsrs	r3, r3, #16
 800a7ba:	613b      	str	r3, [r7, #16]

#ifndef NX_DISABLE_IPV4
                        /* Pickup the queued source port and source IP address for comparison.  */
                        if (queued_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800a7bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a7c2:	2b04      	cmp	r3, #4
 800a7c4:	d121      	bne.n	800a80a <_nx_tcp_packet_process+0x582>
                        {

                            /*lint -e{929} -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                            queued_source_ip = (ULONG *)(((ULONG *)queued_ptr -> nx_packet_prepend_ptr) - 2);
 800a7c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	3b08      	subs	r3, #8
 800a7cc:	60fb      	str	r3, [r7, #12]

                            /* Determine if this matches the current connection request.  */
                            if ((*queued_source_ip == *source_ip) && (queued_source_port == source_port))
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d117      	bne.n	800a80a <_nx_tcp_packet_process+0x582>
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d113      	bne.n	800a80a <_nx_tcp_packet_process+0x582>
                            {

                                /* Possible duplicate connection request to one that is already queued.  */

                                /* Check for a RST (reset) bit set.  */
                                if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800a7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d002      	beq.n	800a7f4 <_nx_tcp_packet_process+0x56c>
                                {

                                    /* RST packet matches a previously queued connection request. */
                                    is_a_RST_request = NX_TRUE;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	643b      	str	r3, [r7, #64]	; 0x40
 800a7f2:	e00a      	b.n	800a80a <_nx_tcp_packet_process+0x582>
                                }
                                else
                                {
#ifndef NX_DISABLE_TCP_INFO
                                    /* This is a duplicate connection request. Increment the TCP dropped packet count.  */
                                    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a7fa:	1c5a      	adds	r2, r3, #1
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif
                                    /* Simply release the packet and return.  */
                                    _nx_packet_release(packet_ptr);
 800a802:	6838      	ldr	r0, [r7, #0]
 800a804:	f7fe fe88 	bl	8009518 <_nx_packet_release>

                                    /* Return!  */
                                    return;
 800a808:	e0b8      	b.n	800a97c <_nx_tcp_packet_process+0x6f4>
                        }
#endif /* FEATURE_NX_IPV6  */

                        /* Handle the case of the RST packet which cancels a previously received
                           connection request. */
                        if (is_a_RST_request)
 800a80a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d028      	beq.n	800a862 <_nx_tcp_packet_process+0x5da>
                        {

                            /* A previous connection request needs to be removed from the listen queue. */
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_head)
 800a810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a816:	429a      	cmp	r2, r3
 800a818:	d104      	bne.n	800a824 <_nx_tcp_packet_process+0x59c>
                            {

                                /* Reset the front (oldest) of the queue to the next request. */
                                listen_ptr -> nx_tcp_listen_queue_head = queued_ptr -> nx_packet_queue_next;
 800a81a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a81c:	69da      	ldr	r2, [r3, #28]
 800a81e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a820:	615a      	str	r2, [r3, #20]
 800a822:	e003      	b.n	800a82c <_nx_tcp_packet_process+0x5a4>
                            else
                            {

                                /* Link around the request we are removing. */
                                /*lint -e{613} suppress possible use of null pointer, since 'queued_prev_ptr' must not be NULL.  */
                                queued_prev_ptr -> nx_packet_queue_next = queued_ptr -> nx_packet_queue_next;
 800a824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a826:	69da      	ldr	r2, [r3, #28]
 800a828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a82a:	61da      	str	r2, [r3, #28]
                            }

                            /* Is the request being removed the tail (most recent connection?)   */
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_tail)
 800a82c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a82e:	699b      	ldr	r3, [r3, #24]
 800a830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a832:	429a      	cmp	r2, r3
 800a834:	d102      	bne.n	800a83c <_nx_tcp_packet_process+0x5b4>
                            {

                                /* Yes, set the previous connection request as the tail. */
                                listen_ptr -> nx_tcp_listen_queue_tail = queued_prev_ptr;
 800a836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a83a:	619a      	str	r2, [r3, #24]
                            }

                            /* Release the connection request packet.  */
                            _nx_packet_release(queued_ptr);
 800a83c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a83e:	f7fe fe6b 	bl	8009518 <_nx_packet_release>

                            /* Update the listen queue. */
                            listen_ptr -> nx_tcp_listen_queue_current--;
 800a842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	1e5a      	subs	r2, r3, #1
 800a848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a84a:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_TCP_INFO
                            /* Increment the TCP dropped packet count.  */
                            ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a852:	1c5a      	adds	r2, r3, #1
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

                            /* Simply release the packet and return.  */
                            _nx_packet_release(packet_ptr);
 800a85a:	6838      	ldr	r0, [r7, #0]
 800a85c:	f7fe fe5c 	bl	8009518 <_nx_packet_release>

                            /* Return!  */
                            return;
 800a860:	e08c      	b.n	800a97c <_nx_tcp_packet_process+0x6f4>
                        }

                        /* Move to next item in the queue.  */
                        queued_prev_ptr = queued_ptr;
 800a862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a864:	647b      	str	r3, [r7, #68]	; 0x44
                        queued_ptr = queued_ptr -> nx_packet_queue_next;
 800a866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	64bb      	str	r3, [r7, #72]	; 0x48
                    while (queued_count--)
 800a86c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a86e:	1e5a      	subs	r2, r3, #1
 800a870:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a872:	2b00      	cmp	r3, #0
 800a874:	d19d      	bne.n	800a7b2 <_nx_tcp_packet_process+0x52a>
                    }

                    /* Not a duplicate connection request, place this request on the listen queue.  */

                    /* Is this a RST packet? */
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800a876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00a      	beq.n	800a898 <_nx_tcp_packet_process+0x610>
                    {

                        /* Yes, so not a connection request. Do not place on the listen queue. */
#ifndef NX_DISABLE_TCP_INFO
                        /* Increment the TCP dropped packet count.  */
                        ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a888:	1c5a      	adds	r2, r3, #1
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

                        /* Release the packet.  */
                        _nx_packet_release(packet_ptr);
 800a890:	6838      	ldr	r0, [r7, #0]
 800a892:	f7fe fe41 	bl	8009518 <_nx_packet_release>

                        /* Return!  */
                        return;
 800a896:	e071      	b.n	800a97c <_nx_tcp_packet_process+0x6f4>
                    }

                    /* Set the next pointer of the packet to NULL.  */
                    packet_ptr -> nx_packet_queue_next = NX_NULL;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	2200      	movs	r2, #0
 800a89c:	61da      	str	r2, [r3, #28]

                    /* Queue the new connection request.  */
                    if (listen_ptr -> nx_tcp_listen_queue_head)
 800a89e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8a0:	695b      	ldr	r3, [r3, #20]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d004      	beq.n	800a8b0 <_nx_tcp_packet_process+0x628>
                    {

                        /* There is a connection request already queued, just link packet to tail.  */
                        (listen_ptr -> nx_tcp_listen_queue_tail) -> nx_packet_queue_next = packet_ptr;
 800a8a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8a8:	699b      	ldr	r3, [r3, #24]
 800a8aa:	683a      	ldr	r2, [r7, #0]
 800a8ac:	61da      	str	r2, [r3, #28]
 800a8ae:	e002      	b.n	800a8b6 <_nx_tcp_packet_process+0x62e>
                    }
                    else
                    {

                        /* The queue is empty.  Setup head pointer to the new packet.  */
                        listen_ptr -> nx_tcp_listen_queue_head = packet_ptr;
 800a8b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	615a      	str	r2, [r3, #20]
                    }

                    /* Setup the tail pointer to the new packet and increment the queue count.  */
                    listen_ptr -> nx_tcp_listen_queue_tail =  packet_ptr;
 800a8b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	619a      	str	r2, [r3, #24]
                    listen_ptr -> nx_tcp_listen_queue_current++;
 800a8bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	1c5a      	adds	r2, r3, #1
 800a8c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8c4:	611a      	str	r2, [r3, #16]

                    /* Add debug information. */
                    NX_PACKET_DEBUG(NX_PACKET_TCP_LISTEN_QUEUE, __LINE__, packet_ptr);

                    /* Determine if the queue depth has been exceeded.  */
                    if (listen_ptr -> nx_tcp_listen_queue_current > listen_ptr -> nx_tcp_listen_queue_maximum)
 800a8c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8c8:	691a      	ldr	r2, [r3, #16]
 800a8ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d953      	bls.n	800a97a <_nx_tcp_packet_process+0x6f2>
                    {

#ifndef NX_DISABLE_TCP_INFO

                        /* Increment the TCP connections dropped count.  */
                        ip_ptr -> nx_ip_tcp_connections_dropped++;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a8d8:	1c5a      	adds	r2, r3, #1
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                        ip_ptr -> nx_ip_tcp_connections--;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a8e6:	1e5a      	subs	r2, r3, #1
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

                        /* Increment the TCP dropped packet count.  */
                        ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a8f4:	1c5a      	adds	r2, r3, #1
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

                        /* Save the head packet pointer, since this will be released below.  */
                        packet_ptr = listen_ptr -> nx_tcp_listen_queue_head;
 800a8fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8fe:	695b      	ldr	r3, [r3, #20]
 800a900:	603b      	str	r3, [r7, #0]

                        /* Remove the oldest packet from the queue.  */
                        listen_ptr -> nx_tcp_listen_queue_head = (listen_ptr -> nx_tcp_listen_queue_head) -> nx_packet_queue_next;
 800a902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a904:	695b      	ldr	r3, [r3, #20]
 800a906:	69da      	ldr	r2, [r3, #28]
 800a908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a90a:	615a      	str	r2, [r3, #20]

                        /* Decrement the number of packets in the queue.  */
                        listen_ptr -> nx_tcp_listen_queue_current--;
 800a90c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	1e5a      	subs	r2, r3, #1
 800a912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a914:	611a      	str	r2, [r3, #16]

                        /* We have exceeded the number of connections that can be
                           queued for this port.  */

                        /* Release the packet.  */
                        _nx_packet_release(packet_ptr);
 800a916:	6838      	ldr	r0, [r7, #0]
 800a918:	f7fe fdfe 	bl	8009518 <_nx_packet_release>
                    }
                }

                /* Finished processing, just return.  */
                return;
 800a91c:	e02d      	b.n	800a97a <_nx_tcp_packet_process+0x6f2>
 800a91e:	e02c      	b.n	800a97a <_nx_tcp_packet_process+0x6f2>
            }

            /* Move to the next listen request.  */
            listen_ptr = listen_ptr -> nx_tcp_listen_next;
 800a920:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a922:	69db      	ldr	r3, [r3, #28]
 800a924:	65bb      	str	r3, [r7, #88]	; 0x58
        } while (listen_ptr != ip_ptr -> nx_ip_tcp_active_listen_requests);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 800a92c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a92e:	429a      	cmp	r2, r3
 800a930:	f47f ae46 	bne.w	800a5c0 <_nx_tcp_packet_process+0x338>
    }

#ifndef NX_DISABLE_TCP_INFO

    /* Determine if a connection request is present.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 800a934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d006      	beq.n	800a94e <_nx_tcp_packet_process+0x6c6>
    {

        /* Yes, increment the TCP connections dropped count.  */
        ip_ptr -> nx_ip_tcp_connections_dropped++;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a946:	1c5a      	adds	r2, r3, #1
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }

    /* Increment the TCP dropped packet count.  */
    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a954:	1c5a      	adds	r2, r3, #1
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif /* NX_DISABLE_TCP_INFO  */

    /* Determine if a RST is present. If so, don't send a RST in response.  */
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT))
 800a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a964:	2b00      	cmp	r3, #0
 800a966:	d104      	bne.n	800a972 <_nx_tcp_packet_process+0x6ea>
    {

        /* Non RST is present, send reset when no connection is present.  */
        _nx_tcp_no_connection_reset(ip_ptr, packet_ptr, tcp_header_ptr);
 800a968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a96a:	6839      	ldr	r1, [r7, #0]
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7ff fbb2 	bl	800a0d6 <_nx_tcp_no_connection_reset>
    }

    /* Not a connection request, just release the packet.  */
    _nx_packet_release(packet_ptr);
 800a972:	6838      	ldr	r0, [r7, #0]
 800a974:	f7fe fdd0 	bl	8009518 <_nx_packet_release>

    return;
 800a978:	e000      	b.n	800a97c <_nx_tcp_packet_process+0x6f4>
                return;
 800a97a:	bf00      	nop
}
 800a97c:	3768      	adds	r7, #104	; 0x68
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
	...

0800a984 <_nx_tcp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b088      	sub	sp, #32
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_TCP_HEADER))
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a992:	2b13      	cmp	r3, #19
 800a994:	d80a      	bhi.n	800a9ac <_nx_tcp_packet_receive+0x28>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a99c:	1c5a      	adds	r2, r3, #1
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800a9a4:	6838      	ldr	r0, [r7, #0]
 800a9a6:	f7fe fdb7 	bl	8009518 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800a9aa:	e052      	b.n	800aa52 <_nx_tcp_packet_receive+0xce>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a9ac:	f3ef 8305 	mrs	r3, IPSR
 800a9b0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a9b2:	69ba      	ldr	r2, [r7, #24]
    }
#endif

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 800a9b4:	4b28      	ldr	r3, [pc, #160]	; (800aa58 <_nx_tcp_packet_receive+0xd4>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d106      	bne.n	800a9cc <_nx_tcp_packet_receive+0x48>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800a9c4:	4b25      	ldr	r3, [pc, #148]	; (800aa5c <_nx_tcp_packet_receive+0xd8>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d03e      	beq.n	800aa4a <_nx_tcp_packet_receive+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a9cc:	f3ef 8310 	mrs	r3, PRIMASK
 800a9d0:	617b      	str	r3, [r7, #20]
    return(posture);
 800a9d2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a9d4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a9d6:	b672      	cpsid	i
    return(int_posture);
 800a9d8:	693b      	ldr	r3, [r7, #16]
        /* If system state is non-zero, we are in an ISR. If the current thread is not the IP thread,
           we need to prevent unnecessary recursion in loopback.  Just place the message at the
           end of the TCP message queue and wakeup the IP helper thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800a9da:	61fb      	str	r3, [r7, #28]

        /* Add the packet to the TCP message queue.  */
        if (ip_ptr -> nx_ip_tcp_queue_head)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d013      	beq.n	800aa0e <_nx_tcp_packet_receive+0x8a>
        {

            /* Link the current packet at the end of the queue.  */
            (ip_ptr -> nx_ip_tcp_queue_tail) -> nx_packet_queue_next =  packet_ptr;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	61da      	str	r2, [r3, #28]
            ip_ptr -> nx_ip_tcp_queue_tail =                            packet_ptr;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
            packet_ptr -> nx_packet_queue_next =                        NX_NULL;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	61da      	str	r2, [r3, #28]

            /* Increment the count of incoming TCP packets queued.  */
            ip_ptr -> nx_ip_tcp_received_packet_count++;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 800aa04:	1c5a      	adds	r2, r3, #1
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
 800aa0c:	e00e      	b.n	800aa2c <_nx_tcp_packet_receive+0xa8>
        }
        else
        {

            /* Empty queue, add to the head of the TCP message queue.  */
            ip_ptr -> nx_ip_tcp_queue_head =        packet_ptr;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	683a      	ldr	r2, [r7, #0]
 800aa12:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
            ip_ptr -> nx_ip_tcp_queue_tail =        packet_ptr;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	683a      	ldr	r2, [r7, #0]
 800aa1a:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
            packet_ptr -> nx_packet_queue_next =    NX_NULL;
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	2200      	movs	r2, #0
 800aa22:	61da      	str	r2, [r3, #28]

            /* Set the initial count TCP packets queued.  */
            ip_ptr -> nx_ip_tcp_received_packet_count =  1;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f383 8810 	msr	PRIMASK, r3
}
 800aa36:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the TCP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_EVENT, TX_OR);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800aa3e:	2200      	movs	r2, #0
 800aa40:	2180      	movs	r1, #128	; 0x80
 800aa42:	4618      	mov	r0, r3
 800aa44:	f004 fc24 	bl	800f290 <_tx_event_flags_set>
 800aa48:	e003      	b.n	800aa52 <_nx_tcp_packet_receive+0xce>
    else
    {

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the TCP processing directly.  */
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f7ff fc1b 	bl	800a288 <_nx_tcp_packet_process>
    }
}
 800aa52:	3720      	adds	r7, #32
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	20000088 	.word	0x20000088
 800aa5c:	20008094 	.word	0x20008094

0800aa60 <_nx_tcp_packet_send_ack>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_ack(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af04      	add	r7, sp, #16
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6e:	2200      	movs	r2, #0
 800aa70:	9202      	str	r2, [sp, #8]
 800aa72:	2200      	movs	r2, #0
 800aa74:	9201      	str	r2, [sp, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	9200      	str	r2, [sp, #0]
 800aa7a:	683a      	ldr	r2, [r7, #0]
 800aa7c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 f80b 	bl	800aa9c <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, NX_NULL);

    /* Setup a new delayed ACK timeout.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800aa86:	4b04      	ldr	r3, [pc, #16]	; (800aa98 <_nx_tcp_packet_send_ack+0x38>)
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	649a      	str	r2, [r3, #72]	; 0x48
}
 800aa8e:	bf00      	nop
 800aa90:	3708      	adds	r7, #8
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	20008050 	.word	0x20008050

0800aa9c <_nx_tcp_packet_send_control>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_control(NX_TCP_SOCKET *socket_ptr, ULONG control_bits, ULONG tx_sequence,
                                  ULONG ack_number, ULONG option_word_1, ULONG option_word_2, UCHAR *data)
{
 800aa9c:	b5b0      	push	{r4, r5, r7, lr}
 800aa9e:	b092      	sub	sp, #72	; 0x48
 800aaa0:	af04      	add	r7, sp, #16
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	607a      	str	r2, [r7, #4]
 800aaa8:	603b      	str	r3, [r7, #0]

NX_IP         *ip_ptr;
NX_PACKET     *packet_ptr;
NX_TCP_HEADER *tcp_header_ptr;
ULONG          checksum;
ULONG          data_offset = 0;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	623b      	str	r3, [r7, #32]
ULONG         *source_ip = NX_NULL, *dest_ip = NX_NULL;
 800aaae:	2300      	movs	r3, #0
 800aab0:	637b      	str	r3, [r7, #52]	; 0x34
 800aab2:	2300      	movs	r3, #0
 800aab4:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT           compute_checksum = 1;
 800aab6:	2301      	movs	r3, #1
 800aab8:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifdef NX_DISABLE_TCP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_TCP_TX_CHECKSUM */

    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aac0:	61fb      	str	r3, [r7, #28]

    if (control_bits & NX_TCP_SYN_BIT)
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d006      	beq.n	800aada <_nx_tcp_packet_send_control+0x3e>
    {

        /* Set header size. */
        header_size = NX_TCP_SYN_HEADER;
 800aacc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800aad0:	62bb      	str	r3, [r7, #40]	; 0x28
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aad6:	627b      	str	r3, [r7, #36]	; 0x24
 800aad8:	e005      	b.n	800aae6 <_nx_tcp_packet_send_control+0x4a>
    }
    else
    {

        /* Set header size. */
        header_size = NX_TCP_HEADER_SIZE;
 800aada:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800aade:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Set window size. */
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current >> socket_ptr -> nx_tcp_rcv_win_scale_value;
#else
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aae4:	627b      	str	r3, [r7, #36]	; 0x24
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {

            /*lint -e{835} -e{845} suppress operating on zero. */
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool,
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 800aaec:	6a3b      	ldr	r3, [r7, #32]
 800aaee:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800aaf2:	f107 0110 	add.w	r1, r7, #16
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	f7fe f972 	bl	8008de0 <_nx_packet_allocate>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	f040 80e3 	bne.w	800acca <_nx_tcp_packet_send_control+0x22e>
        }
    }
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Check to see if the packet has enough room to fill with the max TCP header (SYN + probe data).  */
    if ((UINT)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_prepend_ptr) < (NX_TCP_SYN_SIZE + 1))
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	695a      	ldr	r2, [r3, #20]
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	2b1c      	cmp	r3, #28
 800ab10:	d804      	bhi.n	800ab1c <_nx_tcp_packet_send_control+0x80>
    {

        /* Error getting packet, so just get out!  */
        _nx_packet_release(packet_ptr);
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7fe fcff 	bl	8009518 <_nx_packet_release>
        return;
 800ab1a:	e0d7      	b.n	800accc <_nx_tcp_packet_send_control+0x230>
    }

    /*lint -e{644} suppress variable might not be initialized, since "packet_ptr" was initialized in _nx_packet_allocate. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	695a      	ldr	r2, [r3, #20]
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	b2d2      	uxtb	r2, r2
 800ab24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Allocate a packet for the control message.  */
#ifndef NX_DISABLE_IPV4
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	695b      	ldr	r3, [r3, #20]
 800ab2c:	2b04      	cmp	r3, #4
 800ab2e:	d103      	bne.n	800ab38 <_nx_tcp_packet_send_control+0x9c>
    {

        /* The outgoing interface should have been stored in the socket structure. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = socket_ptr -> nx_tcp_socket_connect_interface;
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ab36:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_IPSEC_ENABLE
    packet_ptr -> nx_packet_ipsec_sa_ptr = socket_ptr -> nx_tcp_socket_egress_sa;
#endif

    /* Setup the packet payload pointers and length for a basic TCP packet.  */
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER);
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	689a      	ldr	r2, [r3, #8]
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	3214      	adds	r2, #20
 800ab40:	60da      	str	r2, [r3, #12]

    /* Setup the packet length.  */
    packet_ptr -> nx_packet_length =  sizeof(NX_TCP_HEADER);
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	2214      	movs	r2, #20
 800ab46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	61bb      	str	r3, [r7, #24]

    /* Build the control request in the TCP header.  */
    tcp_header_ptr -> nx_tcp_header_word_0 =        (((ULONG)(socket_ptr -> nx_tcp_socket_port)) << NX_SHIFT_BY_16) | (ULONG)socket_ptr -> nx_tcp_socket_connect_port;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	041a      	lsls	r2, r3, #16
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	69db      	ldr	r3, [r3, #28]
 800ab58:	431a      	orrs	r2, r3
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	601a      	str	r2, [r3, #0]
    tcp_header_ptr -> nx_tcp_sequence_number =      tx_sequence;
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	605a      	str	r2, [r3, #4]
    tcp_header_ptr -> nx_tcp_acknowledgment_number = ack_number;
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	609a      	str	r2, [r3, #8]
    tcp_header_ptr -> nx_tcp_header_word_3 =        header_size | control_bits | window_size;
 800ab6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	431a      	orrs	r2, r3
 800ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab72:	431a      	orrs	r2, r3
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	60da      	str	r2, [r3, #12]
    tcp_header_ptr -> nx_tcp_header_word_4 =        0;
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	611a      	str	r2, [r3, #16]

    /* Remember the last ACKed sequence and the last reported window size.  */
    socket_ptr -> nx_tcp_socket_rx_sequence_acked =    ack_number;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	683a      	ldr	r2, [r7, #0]
 800ab82:	645a      	str	r2, [r3, #68]	; 0x44
    socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the TCP header.  */
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 800ab8c:	69bb      	ldr	r3, [r7, #24]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	ba1a      	rev	r2, r3
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	ba1a      	rev	r2, r3
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	ba1a      	rev	r2, r3
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 800abaa:	69bb      	ldr	r3, [r7, #24]
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	ba1a      	rev	r2, r3
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	ba1a      	rev	r2, r3
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	611a      	str	r2, [r3, #16]

    /* Check whether or not data is set. */
    if (data)
 800abbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00a      	beq.n	800abda <_nx_tcp_packet_send_control+0x13e>
    {

        /* Zero window probe data exist. */
        *packet_ptr -> nx_packet_append_ptr++ = *data;
 800abc4:	693a      	ldr	r2, [r7, #16]
 800abc6:	68d3      	ldr	r3, [r2, #12]
 800abc8:	1c59      	adds	r1, r3, #1
 800abca:	60d1      	str	r1, [r2, #12]
 800abcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800abce:	7812      	ldrb	r2, [r2, #0]
 800abd0:	701a      	strb	r2, [r3, #0]
        packet_ptr -> nx_packet_length++;
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abd6:	3201      	adds	r2, #1
 800abd8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Whether it is a SYN packet. */
    if (control_bits & NX_TCP_SYN_BIT)
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d018      	beq.n	800ac16 <_nx_tcp_packet_send_control+0x17a>
    {

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the TCP header.  */
        NX_CHANGE_ULONG_ENDIAN(option_word_1);
 800abe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abe6:	ba1b      	rev	r3, r3
 800abe8:	64bb      	str	r3, [r7, #72]	; 0x48
        NX_CHANGE_ULONG_ENDIAN(option_word_2);
 800abea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abec:	ba1b      	rev	r3, r3
 800abee:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Set options. */
        /*lint --e{927} --e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)packet_ptr -> nx_packet_append_ptr) = option_word_1;
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abf6:	601a      	str	r2, [r3, #0]
        *(((ULONG *)packet_ptr -> nx_packet_append_ptr) + 1) = option_word_2;
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	3304      	adds	r3, #4
 800abfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac00:	601a      	str	r2, [r3, #0]

        /* Adjust packet information. */
        packet_ptr -> nx_packet_append_ptr += (sizeof(ULONG) << 1);
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	68da      	ldr	r2, [r3, #12]
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	3208      	adds	r2, #8
 800ac0a:	60da      	str	r2, [r3, #12]
        packet_ptr -> nx_packet_length += (ULONG)(sizeof(ULONG) << 1);
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	3208      	adds	r2, #8
 800ac14:	625a      	str	r2, [r3, #36]	; 0x24
    }

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1c:	f003 0304 	and.w	r3, r3, #4
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d001      	beq.n	800ac28 <_nx_tcp_packet_send_control+0x18c>
    {
        compute_checksum = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	62fb      	str	r3, [r7, #44]	; 0x2c
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800ac28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d028      	beq.n	800ac80 <_nx_tcp_packet_send_control+0x1e4>
    {


        /* Set the packet source IP address. */
#ifndef NX_DISABLE_IPV4
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	695b      	ldr	r3, [r3, #20]
 800ac32:	2b04      	cmp	r3, #4
 800ac34:	d106      	bne.n	800ac44 <_nx_tcp_packet_send_control+0x1a8>
        {

            /* For IPv4 the IP instance has only one global address. */
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3a:	3314      	adds	r3, #20
 800ac3c:	637b      	str	r3, [r7, #52]	; 0x34

            /* Set the destination address to the other side of the TCP connection. */
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	3318      	adds	r3, #24
 800ac42:	633b      	str	r3, [r7, #48]	; 0x30
            dest_ip = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6;
        }
#endif /* FEATURE_NX_IPV6 */

        /* Calculate the TCP checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800ac44:	6938      	ldr	r0, [r7, #16]
                                            (UINT)packet_ptr -> nx_packet_length, source_ip, dest_ip);
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac50:	2106      	movs	r1, #6
 800ac52:	f7fb ff66 	bl	8006b22 <_nx_ip_checksum_compute>
 800ac56:	4603      	mov	r3, r0
 800ac58:	617b      	str	r3, [r7, #20]

        checksum = ~checksum & NX_LOWER_16_MASK;
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	43db      	mvns	r3, r3
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	617b      	str	r3, [r7, #20]

        /* Move the checksum into header.  */
        NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	ba1a      	rev	r2, r3
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	611a      	str	r2, [r3, #16]
        tcp_header_ptr -> nx_tcp_header_word_4 =  (checksum << NX_SHIFT_BY_16);
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	041a      	lsls	r2, r3, #16
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	611a      	str	r2, [r3, #16]
        NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	ba1a      	rev	r2, r3
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	611a      	str	r2, [r3, #16]
 800ac7e:	e005      	b.n	800ac8c <_nx_tcp_packet_send_control+0x1f0>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM;
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	f042 0204 	orr.w	r2, r2, #4
 800ac8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY  */

#ifndef NX_DISABLE_IPV4
    /* Send the TCP packet to the IP component.  */
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	695b      	ldr	r3, [r3, #20]
 800ac90:	2b04      	cmp	r3, #4
 800ac92:	d11b      	bne.n	800accc <_nx_tcp_packet_send_control+0x230>
    {

        _nx_ip_packet_send(ip_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
 800ac94:	6938      	ldr	r0, [r7, #16]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	699c      	ldr	r4, [r3, #24]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
                           socket_ptr -> nx_tcp_socket_type_of_service, socket_ptr -> nx_tcp_socket_time_to_live, NX_IP_TCP,
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
        _nx_ip_packet_send(ip_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 800acac:	68f9      	ldr	r1, [r7, #12]
 800acae:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800acb0:	9103      	str	r1, [sp, #12]
 800acb2:	9202      	str	r2, [sp, #8]
 800acb4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800acb8:	9201      	str	r2, [sp, #4]
 800acba:	9300      	str	r3, [sp, #0]
 800acbc:	462b      	mov	r3, r5
 800acbe:	4622      	mov	r2, r4
 800acc0:	4601      	mov	r1, r0
 800acc2:	69f8      	ldr	r0, [r7, #28]
 800acc4:	f7fd f956 	bl	8007f74 <_nx_ip_packet_send>
 800acc8:	e000      	b.n	800accc <_nx_tcp_packet_send_control+0x230>
                return;
 800acca:	bf00      	nop
        _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP, packet_ptr -> nx_packet_length, ip_ptr -> nx_ipv6_hop_limit,
                             socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address,
                             socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
    }
#endif /* FEATURE_NX_IPV6 */
}
 800accc:	3738      	adds	r7, #56	; 0x38
 800acce:	46bd      	mov	sp, r7
 800acd0:	bdb0      	pop	{r4, r5, r7, pc}

0800acd2 <_nx_tcp_packet_send_fin>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_fin(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b086      	sub	sp, #24
 800acd6:	af04      	add	r7, sp, #16
 800acd8:	6078      	str	r0, [r7, #4]
 800acda:	6039      	str	r1, [r7, #0]
    _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_FIN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace0:	2200      	movs	r2, #0
 800ace2:	9202      	str	r2, [sp, #8]
 800ace4:	2200      	movs	r2, #0
 800ace6:	9201      	str	r2, [sp, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	9200      	str	r2, [sp, #0]
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f7ff fed2 	bl	800aa9c <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, NX_NULL);
}
 800acf8:	bf00      	nop
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <_nx_tcp_packet_send_probe>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_probe(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence, UCHAR data)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b088      	sub	sp, #32
 800ad04:	af04      	add	r7, sp, #16
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	71fb      	strb	r3, [r7, #7]

    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad12:	1dfb      	adds	r3, r7, #7
 800ad14:	9302      	str	r3, [sp, #8]
 800ad16:	2300      	movs	r3, #0
 800ad18:	9301      	str	r3, [sp, #4]
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	68ba      	ldr	r2, [r7, #8]
 800ad22:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	f7ff feb8 	bl	800aa9c <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, &data);

    /* Setup a new delayed ACK timeout.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800ad2c:	4b03      	ldr	r3, [pc, #12]	; (800ad3c <_nx_tcp_packet_send_probe+0x3c>)
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ad34:	bf00      	nop
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	20008050 	.word	0x20008050

0800ad40 <_nx_tcp_packet_send_rst>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_rst(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *header_ptr)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af04      	add	r7, sp, #16
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
    /* Reset Generation, RFC793, Section3.4, Page37, the RST packet is set up based on if the incoming packet has the ACK bit set. */
    /* If the incoming segment has an ACK field, the reset takes its sequence number from the ACK field of the segment,
       otherwise the reset has sequence number zero and the ACK field is set to the sum of the sequence number and segment length of the incoming segment.  */

    /* Check for the ACK bit in the incoming TCP header.  */
    if (header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00e      	beq.n	800ad74 <_nx_tcp_packet_send_rst+0x34>
    {
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_RST_BIT, header_ptr -> nx_tcp_acknowledgment_number,
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	689a      	ldr	r2, [r3, #8]
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	9302      	str	r3, [sp, #8]
 800ad5e:	2300      	movs	r3, #0
 800ad60:	9301      	str	r3, [sp, #4]
 800ad62:	2300      	movs	r3, #0
 800ad64:	9300      	str	r3, [sp, #0]
 800ad66:	2300      	movs	r3, #0
 800ad68:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f7ff fe95 	bl	800aa9c <_nx_tcp_packet_send_control>
 800ad72:	e00d      	b.n	800ad90 <_nx_tcp_packet_send_rst+0x50>
                                    0, 0, 0, NX_NULL);
    }
    else
    {
        _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_RST_BIT | NX_TCP_ACK_BIT), 0,
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	9202      	str	r2, [sp, #8]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	9201      	str	r2, [sp, #4]
 800ad80:	2200      	movs	r2, #0
 800ad82:	9200      	str	r2, [sp, #0]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f7ff fe86 	bl	800aa9c <_nx_tcp_packet_send_control>
                                    header_ptr -> nx_tcp_sequence_number, 0, 0, NX_NULL);
    }

#ifndef NX_DISABLE_TCP_INFO
    /* Increment the resets sent count.  */
    socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_resets_sent++;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ad96:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ad9a:	3201      	adds	r2, #1
 800ad9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
#endif /* NX_DISABLE_TCP_INFO */
}
 800ada0:	bf00      	nop
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <_nx_tcp_packet_send_syn>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_syn(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b08a      	sub	sp, #40	; 0x28
 800adac:	af04      	add	r7, sp, #16
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
ULONG        option_word_2;
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
UINT         include_window_scaling = NX_FALSE;
UINT         scale_factor;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
ULONG        mss = 0;
 800adb2:	2300      	movs	r3, #0
 800adb4:	617b      	str	r3, [r7, #20]
    }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
    /* Update the mss value based on IP version type. */
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	695b      	ldr	r3, [r3, #20]
 800adba:	2b04      	cmp	r3, #4
 800adbc:	d104      	bne.n	800adc8 <_nx_tcp_packet_send_syn+0x20>
    {
        mss = (ULONG)((socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_mtu_size - sizeof(NX_IPV4_HEADER)) - sizeof(NX_TCP_HEADER));
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc4:	3b28      	subs	r3, #40	; 0x28
 800adc6:	617b      	str	r3, [r7, #20]
        }
#endif /* NX_IPSEC_ENABLE */
    }
#endif /* FEATURE_NX_IPV6 */

    mss &= 0x0000FFFFUL;
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	b29b      	uxth	r3, r3
 800adcc:	617b      	str	r3, [r7, #20]

    if ((socket_ptr -> nx_tcp_socket_mss < mss) && socket_ptr -> nx_tcp_socket_mss)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	697a      	ldr	r2, [r7, #20]
 800add4:	429a      	cmp	r2, r3
 800add6:	d906      	bls.n	800ade6 <_nx_tcp_packet_send_syn+0x3e>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	691b      	ldr	r3, [r3, #16]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d002      	beq.n	800ade6 <_nx_tcp_packet_send_syn+0x3e>
    {

        /* Use the custom MSS. */
        mss = socket_ptr -> nx_tcp_socket_mss;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	691b      	ldr	r3, [r3, #16]
 800ade4:	617b      	str	r3, [r7, #20]
    }

    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adea:	2b04      	cmp	r3, #4
 800adec:	d115      	bne.n	800ae1a <_nx_tcp_packet_send_syn+0x72>
    {

        /* Update the connect MSS for TCP server socket. */
        if (mss < socket_ptr -> nx_tcp_socket_peer_mss)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf2:	697a      	ldr	r2, [r7, #20]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d203      	bcs.n	800ae00 <_nx_tcp_packet_send_syn+0x58>
        {
            socket_ptr -> nx_tcp_socket_connect_mss  = mss;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	697a      	ldr	r2, [r7, #20]
 800adfc:	621a      	str	r2, [r3, #32]
 800adfe:	e003      	b.n	800ae08 <_nx_tcp_packet_send_syn+0x60>
        }
        else
        {
            socket_ptr -> nx_tcp_socket_connect_mss =  socket_ptr -> nx_tcp_socket_peer_mss;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	621a      	str	r2, [r3, #32]
        }

        /* Compute the SMSS * SMSS value, so later TCP module doesn't need to redo the multiplication. */
        socket_ptr -> nx_tcp_socket_connect_mss2 =
            socket_ptr -> nx_tcp_socket_connect_mss * socket_ptr -> nx_tcp_socket_connect_mss;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a1b      	ldr	r3, [r3, #32]
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	6a12      	ldr	r2, [r2, #32]
 800ae10:	fb03 f202 	mul.w	r2, r3, r2
        socket_ptr -> nx_tcp_socket_connect_mss2 =
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	631a      	str	r2, [r3, #48]	; 0x30
 800ae18:	e002      	b.n	800ae20 <_nx_tcp_packet_send_syn+0x78>
    }
    else
    {

        /* Set the MSS. */
        socket_ptr -> nx_tcp_socket_connect_mss = mss;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	697a      	ldr	r2, [r7, #20]
 800ae1e:	621a      	str	r2, [r3, #32]
    }

    /* Build the MSS option.  */
    option_word_1 = NX_TCP_MSS_OPTION | mss;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ae26:	613b      	str	r3, [r7, #16]

    /* Set default option word2. */
    option_word_2 = NX_TCP_OPTION_END;
 800ae28:	4b16      	ldr	r3, [pc, #88]	; (800ae84 <_nx_tcp_packet_send_syn+0xdc>)
 800ae2a:	60fb      	str	r3, [r7, #12]
        socket_ptr -> nx_tcp_rcv_win_scale_value = scale_factor;
    }
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

    /* Send SYN or SYN+ACK packet according to socket state. */
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae30:	2b03      	cmp	r3, #3
 800ae32:	d10d      	bne.n	800ae50 <_nx_tcp_packet_send_syn+0xa8>
    {
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_SYN_BIT, tx_sequence,
 800ae34:	2300      	movs	r3, #0
 800ae36:	9302      	str	r3, [sp, #8]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	9301      	str	r3, [sp, #4]
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	2300      	movs	r3, #0
 800ae42:	683a      	ldr	r2, [r7, #0]
 800ae44:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f7ff fe27 	bl	800aa9c <_nx_tcp_packet_send_control>
 800ae4e:	e00e      	b.n	800ae6e <_nx_tcp_packet_send_syn+0xc6>
                                    0, option_word_1, option_word_2, NX_NULL);
    }
    else
    {
        _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_SYN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae54:	2300      	movs	r3, #0
 800ae56:	9302      	str	r3, [sp, #8]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	9301      	str	r3, [sp, #4]
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	4613      	mov	r3, r2
 800ae62:	683a      	ldr	r2, [r7, #0]
 800ae64:	f44f 1190 	mov.w	r1, #1179648	; 0x120000
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7ff fe17 	bl	800aa9c <_nx_tcp_packet_send_control>
                                    socket_ptr -> nx_tcp_socket_rx_sequence, option_word_1, option_word_2, NX_NULL);
    }

    /* Initialize recover sequence and previous cumulative acknowledgment. */
    socket_ptr -> nx_tcp_socket_tx_sequence_recover = tx_sequence;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	661a      	str	r2, [r3, #96]	; 0x60
    socket_ptr -> nx_tcp_socket_previous_highest_ack = tx_sequence;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	683a      	ldr	r2, [r7, #0]
 800ae78:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ae7a:	bf00      	nop
 800ae7c:	3718      	adds	r7, #24
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	01010100 	.word	0x01010100

0800ae88 <_nx_tcp_periodic_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_periodic_processing(NX_IP *ip_ptr)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
        keepalive_enabled = socket_ptr -> nx_tcp_socket_keepalive_enabled;
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
#endif
}
 800ae90:	bf00      	nop
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <_nx_tcp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_queue_process(NX_IP *ip_ptr)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b088      	sub	sp, #32
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aea4:	f3ef 8310 	mrs	r3, PRIMASK
 800aea8:	60fb      	str	r3, [r7, #12]
    return(posture);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800aeac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aeae:	b672      	cpsid	i
    return(int_posture);
 800aeb0:	68bb      	ldr	r3, [r7, #8]
NX_PACKET *queue_head;
NX_PACKET *packet_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 800aeb2:	61bb      	str	r3, [r7, #24]

    /* Remove the TCP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_tcp_queue_head;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800aeba:	61fb      	str	r3, [r7, #28]
    ip_ptr -> nx_ip_tcp_queue_head =  NX_NULL;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
    ip_ptr -> nx_ip_tcp_queue_tail =  NX_NULL;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
    ip_ptr -> nx_ip_tcp_received_packet_count =  0;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	f383 8810 	msr	PRIMASK, r3
}
 800aede:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire TCP message queue and process packets
       one by one.  */
    while (queue_head)
 800aee0:	e00b      	b.n	800aefa <_nx_tcp_queue_process+0x5e>
    {

        /* Pickup the first queue TCP message and remove it from the
           TCP queue.  */
        packet_ptr =  queue_head;
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	617b      	str	r3, [r7, #20]
        queue_head =  queue_head -> nx_packet_queue_next;
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	69db      	ldr	r3, [r3, #28]
 800aeea:	61fb      	str	r3, [r7, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	2200      	movs	r2, #0
 800aef0:	61da      	str	r2, [r3, #28]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Process the packet.  */
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 800aef2:	6979      	ldr	r1, [r7, #20]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f7ff f9c7 	bl	800a288 <_nx_tcp_packet_process>
    while (queue_head)
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1f0      	bne.n	800aee2 <_nx_tcp_queue_process+0x46>
    }
}
 800af00:	bf00      	nop
 800af02:	bf00      	nop
 800af04:	3720      	adds	r7, #32
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
	...

0800af0c <_nx_tcp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b08e      	sub	sp, #56	; 0x38
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800af16:	f3ef 8310 	mrs	r3, PRIMASK
 800af1a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800af1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800af1e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800af20:	b672      	cpsid	i
    return(int_posture);
 800af22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 800af24:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af2a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800af2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d004      	beq.n	800af3c <_nx_tcp_receive_cleanup+0x30>
 800af32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a43      	ldr	r2, [pc, #268]	; (800b044 <_nx_tcp_receive_cleanup+0x138>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d006      	beq.n	800af4a <_nx_tcp_receive_cleanup+0x3e>
 800af3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af3e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af40:	6a3b      	ldr	r3, [r7, #32]
 800af42:	f383 8810 	msr	PRIMASK, r3
}
 800af46:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800af48:	e078      	b.n	800b03c <_nx_tcp_receive_cleanup+0x130>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d106      	bne.n	800af60 <_nx_tcp_receive_cleanup+0x54>
 800af52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af54:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	f383 8810 	msr	PRIMASK, r3
}
 800af5c:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800af5e:	e06d      	b.n	800b03c <_nx_tcp_receive_cleanup+0x130>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800af60:	f3ef 8305 	mrs	r3, IPSR
 800af64:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800af66:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 800af68:	4b37      	ldr	r3, [pc, #220]	; (800b048 <_nx_tcp_receive_cleanup+0x13c>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4313      	orrs	r3, r2
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d104      	bne.n	800af7c <_nx_tcp_receive_cleanup+0x70>
 800af72:	4b36      	ldr	r3, [pc, #216]	; (800b04c <_nx_tcp_receive_cleanup+0x140>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a36      	ldr	r2, [pc, #216]	; (800b050 <_nx_tcp_receive_cleanup+0x144>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d116      	bne.n	800afaa <_nx_tcp_receive_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a35      	ldr	r2, [pc, #212]	; (800b054 <_nx_tcp_receive_cleanup+0x148>)
 800af80:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800af82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800af88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af8c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f383 8810 	msr	PRIMASK, r3
}
 800af94:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800af96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af98:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800af9c:	2200      	movs	r2, #0
 800af9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800afa2:	4618      	mov	r0, r3
 800afa4:	f004 f974 	bl	800f290 <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 800afa8:	e048      	b.n	800b03c <_nx_tcp_receive_cleanup+0x130>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d104      	bne.n	800afc4 <_nx_tcp_receive_cleanup+0xb8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_tcp_socket_receive_suspension_list =  NX_NULL;
 800afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbc:	2200      	movs	r2, #0
 800afbe:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 800afc2:	e00e      	b.n	800afe2 <_nx_tcp_receive_cleanup+0xd6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_tcp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800afc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afca:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800afd6:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800afe0:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 800afe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800afe8:	1e5a      	subs	r2, r3, #1
 800afea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afec:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff4:	2b0c      	cmp	r3, #12
 800aff6:	d11b      	bne.n	800b030 <_nx_tcp_receive_cleanup+0x124>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Determine which receive error is present.  */
            if (socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED)
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affc:	2b05      	cmp	r3, #5
 800affe:	d004      	beq.n	800b00a <_nx_tcp_receive_cleanup+0xfe>
            {

                /* This socket is no longer connected.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2238      	movs	r2, #56	; 0x38
 800b004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b008:	e003      	b.n	800b012 <_nx_tcp_receive_cleanup+0x106>
            }
            else
            {

                /* Setup return status.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2201      	movs	r2, #1
 800b00e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            }

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b012:	4b11      	ldr	r3, [pc, #68]	; (800b058 <_nx_tcp_receive_cleanup+0x14c>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	3301      	adds	r3, #1
 800b018:	4a0f      	ldr	r2, [pc, #60]	; (800b058 <_nx_tcp_receive_cleanup+0x14c>)
 800b01a:	6013      	str	r3, [r2, #0]
 800b01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b01e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	f383 8810 	msr	PRIMASK, r3
}
 800b026:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f005 fcf7 	bl	8010a1c <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800b02e:	e005      	b.n	800b03c <_nx_tcp_receive_cleanup+0x130>
 800b030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b032:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f383 8810 	msr	PRIMASK, r3
}
 800b03a:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800b03c:	3738      	adds	r7, #56	; 0x38
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	54435020 	.word	0x54435020
 800b048:	20000088 	.word	0x20000088
 800b04c:	20008094 	.word	0x20008094
 800b050:	200081dc 	.word	0x200081dc
 800b054:	080098bd 	.word	0x080098bd
 800b058:	2000812c 	.word	0x2000812c

0800b05c <_nx_tcp_socket_block_cleanup>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_block_cleanup(NX_TCP_SOCKET *socket_ptr)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]

    /* Clean up the connect IP address.  */

    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version = 0;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	615a      	str	r2, [r3, #20]
#ifdef FEATURE_NX_IPV6
    /* Clean up the IP address field. */
    SET_UNSPECIFIED_ADDRESS(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
#else /* FEATURE_NX_IPV6 */
    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = 0;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	619a      	str	r2, [r3, #24]
#endif /* FEATURE_NX_IPV6 */

    /* Clean up the connect port.  */
    socket_ptr -> nx_tcp_socket_connect_port = 0;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	61da      	str	r2, [r3, #28]

    /* Reset zero window probe flag. */
    socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

    /* Simply clear the timeout.  */
    socket_ptr -> nx_tcp_socket_timeout = 0;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Reset duplicated ack received. */
    socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Reset fast recovery stage. */
    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

    /* Connection needs to be closed down immediately.  */
    if (socket_ptr -> nx_tcp_socket_client_type)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d003      	beq.n	800b0a4 <_nx_tcp_socket_block_cleanup+0x48>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Client socket, return to a CLOSED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	639a      	str	r2, [r3, #56]	; 0x38
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_LISTEN_STATE, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Server socket, return to LISTEN state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
    }
}
 800b0a2:	e002      	b.n	800b0aa <_nx_tcp_socket_block_cleanup+0x4e>
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2202      	movs	r2, #2
 800b0a8:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b0aa:	bf00      	nop
 800b0ac:	370c      	adds	r7, #12
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <_nx_tcp_socket_connection_reset>:
/*                                            flushing receive queue.     */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_connection_reset(NX_TCP_SOCKET *socket_ptr)
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b084      	sub	sp, #16
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]

UINT saved_state;

    /* Save the current state of the socket.  */
    saved_state =  socket_ptr -> nx_tcp_socket_state;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c2:	60fb      	str	r3, [r7, #12]

    /* Cleanup the transmission control block.  */
    _nx_tcp_socket_block_cleanup(socket_ptr);
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f7ff ffc9 	bl	800b05c <_nx_tcp_socket_block_cleanup>

    /* Check for queued sent packets and if found they need
       to be released.  */
    if (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00a      	beq.n	800b0ea <_nx_tcp_socket_connection_reset+0x34>
    {

        /* Release all transmit packets.  */
        _nx_tcp_socket_transmit_queue_flush(socket_ptr);
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f001 fdb1 	bl	800cc3c <_nx_tcp_socket_transmit_queue_flush>
    }

    /* Clear all receive thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800b0da:	e006      	b.n	800b0ea <_nx_tcp_socket_connection_reset+0x34>
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7ff ff11 	bl	800af0c <_nx_tcp_receive_cleanup>
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d1f3      	bne.n	800b0dc <_nx_tcp_socket_connection_reset+0x26>
    }

    /* Clear all transmit thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 800b0f4:	e006      	b.n	800b104 <_nx_tcp_socket_connection_reset+0x4e>
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_transmit_cleanup(socket_ptr -> nx_tcp_socket_transmit_suspension_list NX_CLEANUP_ARGUMENT);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	4618      	mov	r0, r3
 800b100:	f001 fde4 	bl	800cccc <_nx_tcp_transmit_cleanup>
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d1f3      	bne.n	800b0f6 <_nx_tcp_socket_connection_reset+0x40>
    }

    /* Check for suspended connect thread.  */
    if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b114:	2b00      	cmp	r3, #0
 800b116:	d006      	beq.n	800b126 <_nx_tcp_socket_connection_reset+0x70>
    {

        /* Call the connect thread suspension cleanup routine.  */
        _nx_tcp_connect_cleanup(socket_ptr -> nx_tcp_socket_connect_suspended_thread NX_CLEANUP_ARGUMENT);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b11e:	2100      	movs	r1, #0
 800b120:	4618      	mov	r0, r3
 800b122:	f7fe fc7d 	bl	8009a20 <_nx_tcp_connect_cleanup>
    }

    /* Check for suspended disconnect thread.  */
    if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d006      	beq.n	800b13e <_nx_tcp_socket_connection_reset+0x88>
    {

        /* Resume the thread suspended on the disconnect.  */
        _nx_tcp_disconnect_cleanup(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread NX_CLEANUP_ARGUMENT);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800b136:	2100      	movs	r1, #0
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fe fd9d 	bl	8009c78 <_nx_tcp_disconnect_cleanup>
    }

    /* Determine if the socket was in an established state.  */
    if (saved_state == NX_TCP_ESTABLISHED)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2b05      	cmp	r3, #5
 800b142:	d109      	bne.n	800b158 <_nx_tcp_socket_connection_reset+0xa2>
    {

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d004      	beq.n	800b158 <_nx_tcp_socket_connection_reset+0xa2>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	4798      	blx	r3

        /* Notify the application through the socket disconnect_complete callback.  */
        (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
    }
#endif
}
 800b158:	bf00      	nop
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <_nx_tcp_socket_packet_process>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_packet_process(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr)
{
 800b160:	b5b0      	push	{r4, r5, r7, lr}
 800b162:	b090      	sub	sp, #64	; 0x40
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]

UINT          packet_queued =  NX_FALSE;
 800b16a:	2300      	movs	r3, #0
 800b16c:	63fb      	str	r3, [r7, #60]	; 0x3c
ULONG         packet_data_length;
ULONG         packet_sequence;
ULONG         rx_sequence;
ULONG         rx_window;
UINT          outside_of_window;
ULONG         mss = 0;
 800b16e:	2300      	movs	r3, #0
 800b170:	60bb      	str	r3, [r7, #8]

    /* Copy the TCP header, since the actual packet can be delivered to
       a waiting socket/thread during this routine and before we are done
       using the header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	f107 040c 	add.w	r4, r7, #12
 800b17a:	461d      	mov	r5, r3
 800b17c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b17e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b180:	682b      	ldr	r3, [r5, #0]
 800b182:	6023      	str	r3, [r4, #0]

    /* Get the size of the TCP header.  */
    header_length =  (tcp_header_copy.nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	0f1b      	lsrs	r3, r3, #28
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Process the segment if socket state is equal or greater than NX_TCP_SYN_RECEIVED. According to RFC 793, Section 3.9, Page 69.  */
    if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_SYN_RECEIVED)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b190:	2b03      	cmp	r3, #3
 800b192:	f240 80b5 	bls.w	800b300 <_nx_tcp_socket_packet_process+0x1a0>
    {

        /* Step1: Check sequence number. According to RFC 793, Section 3.9, Page 69.  */

        /* Pickup the sequence of this packet. */
        packet_sequence = tcp_header_copy.nx_tcp_sequence_number;
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the data length in the packet.  */
        packet_data_length = packet_ptr -> nx_packet_length - header_length;
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a0:	1ad3      	subs	r3, r2, r3
 800b1a2:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Pickup the rx sequence.  */
        rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a8:	62bb      	str	r3, [r7, #40]	; 0x28
            socket_ptr -> nx_tcp_socket_rx_window_current =  socket_ptr -> nx_tcp_socket_rx_window_default;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Pickup the rx window.  */
        rx_window = socket_ptr -> nx_tcp_socket_rx_window_current;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* There are four cases for the acceptability test for an incoming segment.
           Section 3.9 Page 69, RFC 793.  */
        outside_of_window = NX_TRUE;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	63bb      	str	r3, [r7, #56]	; 0x38

        if (packet_data_length == 0)
 800b1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d12b      	bne.n	800b212 <_nx_tcp_socket_packet_process+0xb2>
        {
            if (rx_window == 0)
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d119      	bne.n	800b1f4 <_nx_tcp_socket_packet_process+0x94>
            {
                if (packet_sequence == rx_sequence)
 800b1c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d102      	bne.n	800b1ce <_nx_tcp_socket_packet_process+0x6e>
                {
                    outside_of_window = NX_FALSE;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800b1cc:	e044      	b.n	800b258 <_nx_tcp_socket_packet_process+0xf8>
                }
                else if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT) ||
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10a      	bne.n	800b1ee <_nx_tcp_socket_packet_process+0x8e>
                         (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT) ||
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
                else if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT) ||
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d105      	bne.n	800b1ee <_nx_tcp_socket_packet_process+0x8e>
                         ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_CONTROL_MASK) == NX_TCP_ACK_BIT))
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	f403 13b8 	and.w	r3, r3, #1507328	; 0x170000
                         (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT) ||
 800b1e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1ec:	d134      	bne.n	800b258 <_nx_tcp_socket_packet_process+0xf8>
                {

                    /* If the RCV.WND is zero, no segments will be acceptable, but
                       special allowance should be made to accept valid ACKs, URGs and RSTs.
                       Section 3.9 Page 69, RFC 793. */
                    outside_of_window = NX_FALSE;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b1f2:	e031      	b.n	800b258 <_nx_tcp_socket_packet_process+0xf8>
                }
            }
            else if (((INT)(packet_sequence - rx_sequence) >= 0) &&
 800b1f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	db2c      	blt.n	800b258 <_nx_tcp_socket_packet_process+0xf8>
                     ((INT)(rx_sequence + rx_window - packet_sequence) > 0))
 800b1fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	441a      	add	r2, r3
 800b204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b206:	1ad3      	subs	r3, r2, r3
            else if (((INT)(packet_sequence - rx_sequence) >= 0) &&
 800b208:	2b00      	cmp	r3, #0
 800b20a:	dd25      	ble.n	800b258 <_nx_tcp_socket_packet_process+0xf8>
            {
                outside_of_window = NX_FALSE;
 800b20c:	2300      	movs	r3, #0
 800b20e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b210:	e022      	b.n	800b258 <_nx_tcp_socket_packet_process+0xf8>
            }
        }
        else
        {
            if ((rx_window > 0) &&
 800b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b214:	2b00      	cmp	r3, #0
 800b216:	d01f      	beq.n	800b258 <_nx_tcp_socket_packet_process+0xf8>
                ((((INT)(packet_sequence - rx_sequence) >= 0) &&
 800b218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21c:	1ad3      	subs	r3, r2, r3
            if ((rx_window > 0) &&
 800b21e:	2b00      	cmp	r3, #0
 800b220:	db06      	blt.n	800b230 <_nx_tcp_socket_packet_process+0xd0>
                  ((INT)(rx_sequence + rx_window - packet_sequence) > 0)) ||
 800b222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	441a      	add	r2, r3
 800b228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22a:	1ad3      	subs	r3, r2, r3
                ((((INT)(packet_sequence - rx_sequence) >= 0) &&
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	dc11      	bgt.n	800b254 <_nx_tcp_socket_packet_process+0xf4>
                 (((INT)(packet_sequence + (packet_data_length - 1) - rx_sequence) >= 0) &&
 800b230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b234:	441a      	add	r2, r3
 800b236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	3b01      	subs	r3, #1
                  ((INT)(rx_sequence + rx_window - packet_sequence) > 0)) ||
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	db0b      	blt.n	800b258 <_nx_tcp_socket_packet_process+0xf8>
                  ((INT)(rx_sequence + 1 + (rx_window - packet_sequence) - packet_data_length) > 0))))
 800b240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b244:	1ad2      	subs	r2, r2, r3
 800b246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b248:	441a      	add	r2, r3
 800b24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	3301      	adds	r3, #1
                 (((INT)(packet_sequence + (packet_data_length - 1) - rx_sequence) >= 0) &&
 800b250:	2b00      	cmp	r3, #0
 800b252:	dd01      	ble.n	800b258 <_nx_tcp_socket_packet_process+0xf8>
            {
                outside_of_window = NX_FALSE;
 800b254:	2300      	movs	r3, #0
 800b256:	63bb      	str	r3, [r7, #56]	; 0x38
            }
        }

        /* Detect whether or not the data is outside the window.  */
        if (outside_of_window)
 800b258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d016      	beq.n	800b28c <_nx_tcp_socket_packet_process+0x12c>
        {

            /* If an incoming segment is not acceptable, an acknowledgment should be sent in reply
               (unless the RST bit is set, if so drop the segment and return).
               Section 3.9, Page 69, RFC 793.  */
            if (!(tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT))
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b264:	2b00      	cmp	r3, #0
 800b266:	d105      	bne.n	800b274 <_nx_tcp_socket_packet_process+0x114>
            {

                /* Send an immediate ACK.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b26c:	4619      	mov	r1, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7ff fbf6 	bl	800aa60 <_nx_tcp_packet_send_ack>
            }

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the TCP dropped packet count.  */
            socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b27a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800b27e:	3201      	adds	r2, #1
 800b280:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800b284:	6838      	ldr	r0, [r7, #0]
 800b286:	f7fe f947 	bl	8009518 <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 800b28a:	e0fe      	b.n	800b48a <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step2: Check the RST bit. According to RFC 793, Section 3.9, Page 70.  */
        if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00e      	beq.n	800b2b4 <_nx_tcp_socket_packet_process+0x154>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the resets received count.  */
            (socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_resets_received++;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b29c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800b2a0:	3201      	adds	r2, #1
 800b2a2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RESET_RECEIVE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, packet_ptr, tcp_header_copy.nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Reset connection.  */
            _nx_tcp_socket_connection_reset(socket_ptr);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f7ff ff05 	bl	800b0b6 <_nx_tcp_socket_connection_reset>

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800b2ac:	6838      	ldr	r0, [r7, #0]
 800b2ae:	f7fe f933 	bl	8009518 <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 800b2b2:	e0ea      	b.n	800b48a <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step3: Check the SYN bit. According to RFC 793, Section 3.9, Page 71.  */
        if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d00f      	beq.n	800b2de <_nx_tcp_socket_packet_process+0x17e>

            /* The SYN is in the window it is an error, send a reset.  */

            /* Adjust the SEQ for the SYN bit. */
            /* The reset logic uses the sequence number in tcp_header_ptr as its ACK number. */
            tcp_header_copy.nx_tcp_sequence_number++;
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	613b      	str	r3, [r7, #16]

            /* Send RST message.  */
            _nx_tcp_packet_send_rst(socket_ptr, &tcp_header_copy);
 800b2c4:	f107 030c 	add.w	r3, r7, #12
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f7ff fd38 	bl	800ad40 <_nx_tcp_packet_send_rst>

            /* Reset the connection. */
            _nx_tcp_socket_connection_reset(socket_ptr);
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f7ff fef0 	bl	800b0b6 <_nx_tcp_socket_connection_reset>

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800b2d6:	6838      	ldr	r0, [r7, #0]
 800b2d8:	f7fe f91e 	bl	8009518 <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 800b2dc:	e0d5      	b.n	800b48a <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step4: Check the ACK field. According to RFC 793, Section 3.9, Page 72.  */
        if (socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_RECEIVED)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e2:	2b04      	cmp	r3, #4
 800b2e4:	d00c      	beq.n	800b300 <_nx_tcp_socket_packet_process+0x1a0>
        {

            /* Check the ACK field.  */
            if (_nx_tcp_socket_state_ack_check(socket_ptr, &tcp_header_copy) == NX_FALSE)
 800b2e6:	f107 030c 	add.w	r3, r7, #12
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 fa87 	bl	800b800 <_nx_tcp_socket_state_ack_check>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d103      	bne.n	800b300 <_nx_tcp_socket_packet_process+0x1a0>
            {

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 800b2f8:	6838      	ldr	r0, [r7, #0]
 800b2fa:	f7fe f90d 	bl	8009518 <_nx_packet_release>

                /* Finished processing, simply return!  */
                return;
 800b2fe:	e0c4      	b.n	800b48a <_nx_tcp_socket_packet_process+0x32a>
            }
        }
    }

    /* Illegal option length check. */
    if (header_length > sizeof(NX_TCP_HEADER))
 800b300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b302:	2b14      	cmp	r3, #20
 800b304:	d93b      	bls.n	800b37e <_nx_tcp_socket_packet_process+0x21e>
    {

        /* There are one or more option words.  */
        /* The illegal option length is validated during MSS option get function. */
        if (!_nx_tcp_mss_option_get((packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER)),
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	f103 0014 	add.w	r0, r3, #20
 800b30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b310:	3b14      	subs	r3, #20
 800b312:	f107 0208 	add.w	r2, r7, #8
 800b316:	4619      	mov	r1, r3
 800b318:	f7fe fe83 	bl	800a022 <_nx_tcp_mss_option_get>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d12d      	bne.n	800b37e <_nx_tcp_socket_packet_process+0x21e>
            /* TCP MUST be prepared to handle an illegal option length (e.g., zero) without crashing;
               a suggested procedure is to reset the connection and log the reason, outlined in RFC 1122, Section 4.2.2.5, Page85. */

            /* Preprocess the sequence number if the incoming segment does not have an ACK field.
               Reset Generation, RFC793, Section3.4, Page37. */
            if (!(tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d113      	bne.n	800b354 <_nx_tcp_socket_packet_process+0x1f4>
            {

                /* Update sequence number to set the reset acknowledge number.  */
                tcp_header_copy.nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b334:	1acb      	subs	r3, r1, r3
 800b336:	4413      	add	r3, r2
 800b338:	613b      	str	r3, [r7, #16]

                /* Check the SYN and FIN bits.  */
                if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT) ||
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b340:	2b00      	cmp	r3, #0
 800b342:	d104      	bne.n	800b34e <_nx_tcp_socket_packet_process+0x1ee>
                    (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_FIN_BIT))
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT) ||
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d002      	beq.n	800b354 <_nx_tcp_socket_packet_process+0x1f4>
                {

                    /* Update sequence number to set the reset acknowledge number.  */
                    tcp_header_copy.nx_tcp_sequence_number++;
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	3301      	adds	r3, #1
 800b352:	613b      	str	r3, [r7, #16]
                }
            }

            /* Send RST message.  */
            _nx_tcp_packet_send_rst(socket_ptr, &tcp_header_copy);
 800b354:	f107 030c 	add.w	r3, r7, #12
 800b358:	4619      	mov	r1, r3
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f7ff fcf0 	bl	800ad40 <_nx_tcp_packet_send_rst>

            /* Reset the connection. */
            _nx_tcp_socket_connection_reset(socket_ptr);
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f7ff fea8 	bl	800b0b6 <_nx_tcp_socket_connection_reset>

#ifndef NX_DISABLE_TCP_INFO
            /* Increment the TCP invalid packet error count.  */
            socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_invalid_packets++;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b36c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800b370:	3201      	adds	r2, #1
 800b372:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* NX_DISABLE_TCP_INFO */

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800b376:	6838      	ldr	r0, [r7, #0]
 800b378:	f7fe f8ce 	bl	8009518 <_nx_packet_release>

            return;
 800b37c:	e085      	b.n	800b48a <_nx_tcp_socket_packet_process+0x32a>
        }

    }

    /* Process relative to the state of the socket.  */
    switch (socket_ptr -> nx_tcp_socket_state)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b382:	3b03      	subs	r3, #3
 800b384:	2b08      	cmp	r3, #8
 800b386:	d866      	bhi.n	800b456 <_nx_tcp_socket_packet_process+0x2f6>
 800b388:	a201      	add	r2, pc, #4	; (adr r2, 800b390 <_nx_tcp_socket_packet_process+0x230>)
 800b38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38e:	bf00      	nop
 800b390:	0800b3b5 	.word	0x0800b3b5
 800b394:	0800b3d7 	.word	0x0800b3d7
 800b398:	0800b3f7 	.word	0x0800b3f7
 800b39c:	0800b40f 	.word	0x0800b40f
 800b3a0:	0800b425 	.word	0x0800b425
 800b3a4:	0800b437 	.word	0x0800b437
 800b3a8:	0800b449 	.word	0x0800b449
 800b3ac:	0800b457 	.word	0x0800b457
 800b3b0:	0800b417 	.word	0x0800b417

    case  NX_TCP_SYN_SENT:

        /* Call the SYN SENT state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_syn_sent(socket_ptr, &tcp_header_copy, packet_ptr);
 800b3b4:	f107 030c 	add.w	r3, r7, #12
 800b3b8:	683a      	ldr	r2, [r7, #0]
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f001 faa8 	bl	800c912 <_nx_tcp_socket_state_syn_sent>

        /* Check whether socket is established. */
        if (socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c6:	2b05      	cmp	r3, #5
 800b3c8:	d147      	bne.n	800b45a <_nx_tcp_socket_packet_process+0x2fa>
        {

            /* Check for data in the current packet.  */
            packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800b3ca:	6839      	ldr	r1, [r7, #0]
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 fdf3 	bl	800bfb8 <_nx_tcp_socket_state_data_check>
 800b3d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        /* State processing is complete.  */
        break;
 800b3d4:	e041      	b.n	800b45a <_nx_tcp_socket_packet_process+0x2fa>

    case  NX_TCP_SYN_RECEIVED:

        /* Call the SYN RECEIVED state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_syn_received(socket_ptr, &tcp_header_copy);
 800b3d6:	f107 030c 	add.w	r3, r7, #12
 800b3da:	4619      	mov	r1, r3
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f001 fa3b 	bl	800c858 <_nx_tcp_socket_state_syn_received>

        /* Check whether socket is established. */
        if (socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e6:	2b05      	cmp	r3, #5
 800b3e8:	d139      	bne.n	800b45e <_nx_tcp_socket_packet_process+0x2fe>
        {

            /* Check for data in the current packet.  */
            packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800b3ea:	6839      	ldr	r1, [r7, #0]
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 fde3 	bl	800bfb8 <_nx_tcp_socket_state_data_check>
 800b3f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        /* State processing is complete.  */
        break;
 800b3f4:	e033      	b.n	800b45e <_nx_tcp_socket_packet_process+0x2fe>

    case  NX_TCP_ESTABLISHED:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800b3f6:	6839      	ldr	r1, [r7, #0]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 fddd 	bl	800bfb8 <_nx_tcp_socket_state_data_check>
 800b3fe:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif /* NX_ENABLE_TCPIP_OFFLOAD */
        {

            /* Call the ESTABLISHED state handling function to process any state
            changes caused by this new packet.  */
            _nx_tcp_socket_state_established(socket_ptr);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f001 f911 	bl	800c628 <_nx_tcp_socket_state_established>

            /* Determine if any transmit suspension can be lifted.  */
            _nx_tcp_socket_state_transmit_check(socket_ptr);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f001 fb6c 	bl	800cae4 <_nx_tcp_socket_state_transmit_check>
        }

        /* State processing is complete.  */
        break;
 800b40c:	e028      	b.n	800b460 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_CLOSE_WAIT:

        /* Determine if any transmit suspension can be lifted.  */
        _nx_tcp_socket_state_transmit_check(socket_ptr);
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f001 fb68 	bl	800cae4 <_nx_tcp_socket_state_transmit_check>

        /* State processing is complete.  */
        break;
 800b414:	e024      	b.n	800b460 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_LAST_ACK:

        /* Call the LAST ACK state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_last_ack(socket_ptr, &tcp_header_copy);
 800b416:	f107 030c 	add.w	r3, r7, #12
 800b41a:	4619      	mov	r1, r3
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f001 f9f1 	bl	800c804 <_nx_tcp_socket_state_last_ack>

        /* State processing is complete.  */
        break;
 800b422:	e01d      	b.n	800b460 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_FIN_WAIT_1:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800b424:	6839      	ldr	r1, [r7, #0]
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 fdc6 	bl	800bfb8 <_nx_tcp_socket_state_data_check>
 800b42c:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Call the FIN WAIT 1 state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_fin_wait1(socket_ptr);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f001 f93e 	bl	800c6b0 <_nx_tcp_socket_state_fin_wait1>

        /* State processing is complete.  */
        break;
 800b434:	e014      	b.n	800b460 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_FIN_WAIT_2:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fdbd 	bl	800bfb8 <_nx_tcp_socket_state_data_check>
 800b43e:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Call the FIN WAIT 2 state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_fin_wait2(socket_ptr);
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f001 f9a1 	bl	800c788 <_nx_tcp_socket_state_fin_wait2>

        /* State processing is complete.  */
        break;
 800b446:	e00b      	b.n	800b460 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_CLOSING:

        /* Call the CLOSING state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_closing(socket_ptr, &tcp_header_copy);
 800b448:	f107 030c 	add.w	r3, r7, #12
 800b44c:	4619      	mov	r1, r3
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 fcb6 	bl	800bdc0 <_nx_tcp_socket_state_closing>

        /* State processing is complete.  */
        break;
 800b454:	e004      	b.n	800b460 <_nx_tcp_socket_packet_process+0x300>

        /* State processing is complete.  */
        break;

    default:
        break;
 800b456:	bf00      	nop
 800b458:	e002      	b.n	800b460 <_nx_tcp_socket_packet_process+0x300>
        break;
 800b45a:	bf00      	nop
 800b45c:	e000      	b.n	800b460 <_nx_tcp_socket_packet_process+0x300>
        break;
 800b45e:	bf00      	nop
    }
#endif /* NX_ENABLE_HTTP_PROXY */

    /* Check for an URG (urgent) bit set.  */
    /*lint -e{644} suppress variable might not be initialized, since "tcp_header_copy" was initialized. */
    if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT)
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b466:	2b00      	cmp	r3, #0
 800b468:	d009      	beq.n	800b47e <_nx_tcp_socket_packet_process+0x31e>
    {

        /* Yes, an Urgent bit is set.  */

        /* Pickup the urgent callback function specified when the socket was created.  */
        urgent_callback =  socket_ptr -> nx_tcp_urgent_data_callback;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b470:	623b      	str	r3, [r7, #32]

        /* Determine if there is an urgent callback function specified.  */
        if (urgent_callback)
 800b472:	6a3b      	ldr	r3, [r7, #32]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <_nx_tcp_socket_packet_process+0x31e>
        {

            /* Yes, call the application's urgent callback function to alert the application
               of the presence of the urgent bit.  */
            (urgent_callback)(socket_ptr);
 800b478:	6a3b      	ldr	r3, [r7, #32]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	4798      	blx	r3
        }
    }

    /* Determine if we need to release the packet.  */
    if (!packet_queued)
 800b47e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b480:	2b00      	cmp	r3, #0
 800b482:	d102      	bne.n	800b48a <_nx_tcp_socket_packet_process+0x32a>
    {

        /* Yes, the packet was not queued up above, so it needs to be released.  */
        _nx_packet_release(packet_ptr);
 800b484:	6838      	ldr	r0, [r7, #0]
 800b486:	f7fe f847 	bl	8009518 <_nx_packet_release>
    }
}
 800b48a:	3740      	adds	r7, #64	; 0x40
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bdb0      	pop	{r4, r5, r7, pc}

0800b490 <_nx_tcp_socket_retransmit>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_retransmit(NX_IP *ip_ptr, NX_TCP_SOCKET *socket_ptr, UINT need_fast_retransmit)
{
 800b490:	b590      	push	{r4, r7, lr}
 800b492:	b097      	sub	sp, #92	; 0x5c
 800b494:	af04      	add	r7, sp, #16
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
       RFC 793 Sec 3.7, p42: keep send new data.

       In the zero window probe phase, we send the zero window probe, and increase
       exponentially the interval between successive probes.
       RFC 1122 Sec 4.2.2.17, p92.  */
    if (socket_ptr -> nx_tcp_socket_tx_window_advertised == 0)
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d164      	bne.n	800b56e <_nx_tcp_socket_retransmit+0xde>
    {

        /* Pickup the head of the transmit queue.  */
        packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b4aa:	647b      	str	r3, [r7, #68]	; 0x44

        if (packet_ptr)
 800b4ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d02f      	beq.n	800b512 <_nx_tcp_socket_retransmit+0x82>
        {

        /* Get one byte from send queue. */
        /* Pick up the pointer to the head of the TCP packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_TCP_HEADER *header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800b4b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	613b      	str	r3, [r7, #16]

            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	ba1a      	rev	r2, r3
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	60da      	str	r2, [r3, #12]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	ba1a      	rev	r2, r3
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	605a      	str	r2, [r3, #4]

            /* Get sequence number and first byte. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr + ((header_ptr -> nx_tcp_header_word_3 >> 28) << 2));
 800b4cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4ce:	689a      	ldr	r2, [r3, #8]
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	68db      	ldr	r3, [r3, #12]
 800b4d4:	0f1b      	lsrs	r3, r3, #28
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4413      	add	r3, r2
 800b4da:	781a      	ldrb	r2, [r3, #0]
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

            /* Now set zero window probe started. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_TRUE;
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            socket_ptr -> nx_tcp_socket_zero_window_probe_sequence = header_ptr -> nx_tcp_sequence_number;
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	685a      	ldr	r2, [r3, #4]
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	ba1a      	rev	r2, r3
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	605a      	str	r2, [r3, #4]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	ba1a      	rev	r2, r3
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	60da      	str	r2, [r3, #12]
 800b510:	e005      	b.n	800b51e <_nx_tcp_socket_retransmit+0x8e>
        }
        else if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f000 816b 	beq.w	800b7f4 <_nx_tcp_socket_retransmit+0x364>

        /* In the zero window probe phase, we send the zero window probe, and increase
           exponentially the interval between successive probes.  */

        /* Increment the retry counter.  */
        socket_ptr -> nx_tcp_socket_timeout_retries++;
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b524:	1c5a      	adds	r2, r3, #1
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        socket_ptr -> nx_tcp_socket_zero_window_probe_failure++;
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b532:	1c5a      	adds	r2, r3, #1
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Setup the next timeout.  */
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
            (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b546:	68b9      	ldr	r1, [r7, #8]
 800b548:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
 800b54c:	fb01 f303 	mul.w	r3, r1, r3
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800b550:	409a      	lsls	r2, r3
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Send the zero window probe.  */
        _nx_tcp_packet_send_probe(socket_ptr, socket_ptr -> nx_tcp_socket_zero_window_probe_sequence,
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b564:	461a      	mov	r2, r3
 800b566:	68b8      	ldr	r0, [r7, #8]
 800b568:	f7ff fbca 	bl	800ad00 <_nx_tcp_packet_send_probe>
                                  socket_ptr -> nx_tcp_socket_zero_window_probe_data);

        return;
 800b56c:	e145      	b.n	800b7fa <_nx_tcp_socket_retransmit+0x36a>
    }
    else if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_TRUE)
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b574:	2b01      	cmp	r3, #1
 800b576:	d103      	bne.n	800b580 <_nx_tcp_socket_retransmit+0xf0>
    {

        /* If advertised window isn't zero, reset zero window probe flag. */
        socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    }

    /* Increment the retry counter only if the receiver window is open. */
    /* Increment the retry counter.  */
    socket_ptr -> nx_tcp_socket_timeout_retries++;
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b586:	1c5a      	adds	r2, r3, #1
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

    if ((need_fast_retransmit == NX_TRUE) || (socket_ptr -> nx_tcp_socket_fast_recovery == NX_FALSE))
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d004      	beq.n	800b59e <_nx_tcp_socket_retransmit+0x10e>
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d12a      	bne.n	800b5f4 <_nx_tcp_socket_retransmit+0x164>
    {

        /* Timed out on an outgoing packet.  Enter slow start mode. */
        /* Compute the flight size / 2 value. */
        window = socket_ptr -> nx_tcp_socket_tx_outstanding_bytes >> 1;
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5a2:	085b      	lsrs	r3, r3, #1
 800b5a4:	643b      	str	r3, [r7, #64]	; 0x40

        /* Make sure we have at least 2 * MSS */
        if (window < (socket_ptr -> nx_tcp_socket_connect_mss << 1))
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	6a1b      	ldr	r3, [r3, #32]
 800b5aa:	005b      	lsls	r3, r3, #1
 800b5ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d203      	bcs.n	800b5ba <_nx_tcp_socket_retransmit+0x12a>
        {
            window = socket_ptr -> nx_tcp_socket_connect_mss << 1;
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	6a1b      	ldr	r3, [r3, #32]
 800b5b6:	005b      	lsls	r3, r3, #1
 800b5b8:	643b      	str	r3, [r7, #64]	; 0x40
        }

        /* Set the slow_start_threshold */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = window;
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b5be:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the current window to be MSS size. */
        socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	6a1a      	ldr	r2, [r3, #32]
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Determine if this socket needs fast retransmit.  */
        if (need_fast_retransmit == NX_TRUE)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d112      	bne.n	800b5f4 <_nx_tcp_socket_retransmit+0x164>
        {

            /* Update cwnd to ssthreshold plus 3 * MSS.  */
            socket_ptr -> nx_tcp_socket_tx_window_congestion += window + (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	6a1b      	ldr	r3, [r3, #32]
 800b5d6:	0059      	lsls	r1, r3, #1
 800b5d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5da:	440b      	add	r3, r1
 800b5dc:	441a      	add	r2, r3
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Now TCP is in fast recovery procedure. */
            socket_ptr -> nx_tcp_socket_fast_recovery = NX_TRUE;
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

            /* Update the transmit sequence that enters fast transmit. */
            socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ee:	1e5a      	subs	r2, r3, #1
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	661a      	str	r2, [r3, #96]	; 0x60
        }
    }

    /* Setup the next timeout.  */
    socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
        (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b600:	68b9      	ldr	r1, [r7, #8]
 800b602:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
 800b606:	fb01 f303 	mul.w	r3, r1, r3
    socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 800b60a:	409a      	lsls	r2, r3
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Get available size of packet that can be sent. */
    available = socket_ptr -> nx_tcp_socket_tx_window_congestion;
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b616:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Pickup the head of the transmit queue.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b61e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if the packet has been released by the
       application I/O driver.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    while (packet_ptr && (packet_ptr -> nx_packet_queue_next == (NX_PACKET *)NX_DRIVER_TX_DONE))
 800b620:	e0de      	b.n	800b7e0 <_nx_tcp_socket_retransmit+0x350>
    {

    /* Update the ACK number in case it has changed since the data was originally transmitted. */
    ULONG          checksum;
    NX_TCP_HEADER *header_ptr;
    ULONG         *source_ip = NX_NULL, *dest_ip = NX_NULL;
 800b622:	2300      	movs	r3, #0
 800b624:	63bb      	str	r3, [r7, #56]	; 0x38
 800b626:	2300      	movs	r3, #0
 800b628:	637b      	str	r3, [r7, #52]	; 0x34
    NX_PACKET     *next_ptr;
#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    UINT           compute_checksum = 1;
 800b62a:	2301      	movs	r3, #1
 800b62c:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef NX_DISABLE_TCP_TX_CHECKSUM
        compute_checksum = 0;
#endif /* NX_DISABLE_TCP_TX_CHECKSUM */

        if (packet_ptr -> nx_packet_length > (available + sizeof(NX_TCP_HEADER)))
 800b62e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b634:	3314      	adds	r3, #20
 800b636:	429a      	cmp	r2, r3
 800b638:	f200 80de 	bhi.w	800b7f8 <_nx_tcp_socket_retransmit+0x368>
            /* This packet can not be sent. */
            break;
        }

        /* Decrease the available size. */
        available -= (packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 800b63c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	3314      	adds	r3, #20
 800b646:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Pickup next packet. */
        next_ptr = packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800b648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifndef NX_DISABLE_IPV4
        /* Is this an IPv4 connection? */
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	2b04      	cmp	r3, #4
 800b654:	d10a      	bne.n	800b66c <_nx_tcp_socket_retransmit+0x1dc>
        {

            packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 800b656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b658:	2204      	movs	r2, #4
 800b65a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            /* Get the source and destination addresses. */
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b662:	3314      	adds	r3, #20
 800b664:	63bb      	str	r3, [r7, #56]	; 0x38
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	3318      	adds	r3, #24
 800b66a:	637b      	str	r3, [r7, #52]	; 0x34
        }
#endif /* FEATURE_NX_IPV6 */

        /* Pick up the pointer to the head of the TCP packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800b66c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Record the original data.  */
        original_acknowledgment_number = header_ptr -> nx_tcp_acknowledgment_number;
 800b672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	627b      	str	r3, [r7, #36]	; 0x24
        original_header_word_3 = header_ptr -> nx_tcp_header_word_3;
 800b678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	623b      	str	r3, [r7, #32]
        original_header_word_4 = header_ptr -> nx_tcp_header_word_4;
 800b67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	61fb      	str	r3, [r7, #28]

        /* Update the ACK number in the TCP header.  */
        header_ptr -> nx_tcp_acknowledgment_number = socket_ptr -> nx_tcp_socket_rx_sequence;
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68a:	609a      	str	r2, [r3, #8]

        /* Convert to network byte order for checksum */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 800b68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	ba1a      	rev	r2, r3
 800b692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b694:	609a      	str	r2, [r3, #8]
        if (window_size > 0xFFFF)
        {
            window_size = 0xFFFF;
        }
#else
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b69a:	61bb      	str	r3, [r7, #24]
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

        header_ptr -> nx_tcp_header_word_3 =        NX_TCP_HEADER_SIZE | NX_TCP_ACK_BIT | NX_TCP_PSH_BIT | window_size;
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800b6a2:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 800b6a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6a8:	60d3      	str	r3, [r2, #12]

        /* Swap the content to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 800b6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	ba1a      	rev	r2, r3
 800b6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b2:	60da      	str	r2, [r3, #12]

        /* Convert back to host byte order to so we can zero out the checksum. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800b6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	ba1a      	rev	r2, r3
 800b6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6bc:	611a      	str	r2, [r3, #16]

        /* Remember the last ACKed sequence and the last reported window size.  */
        socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	645a      	str	r2, [r3, #68]	; 0x44
        socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	679a      	str	r2, [r3, #120]	; 0x78

        /* Zero out existing checksum before computing new one. */
        header_ptr -> nx_tcp_header_word_4 = header_ptr -> nx_tcp_header_word_4 & 0x0000FFFF;
 800b6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d0:	691b      	ldr	r3, [r3, #16]
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d6:	611a      	str	r2, [r3, #16]

        /* Convert back to network byte order to so we can do the checksum. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800b6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6da:	691b      	ldr	r3, [r3, #16]
 800b6dc:	ba1a      	rev	r2, r3
 800b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e0:	611a      	str	r2, [r3, #16]


#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        if (socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e8:	f003 0304 	and.w	r3, r3, #4
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d001      	beq.n	800b6f4 <_nx_tcp_socket_retransmit+0x264>
        {
            compute_checksum = 0;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	633b      	str	r3, [r7, #48]	; 0x30
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d020      	beq.n	800b73c <_nx_tcp_socket_retransmit+0x2ac>
#endif /* defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
        {
            /* Calculate the TCP checksum without protection.  */
            checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
                                                packet_ptr -> nx_packet_length,
 800b6fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800b6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b704:	2106      	movs	r1, #6
 800b706:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b708:	f7fb fa0b 	bl	8006b22 <_nx_ip_checksum_compute>
 800b70c:	4603      	mov	r3, r0
 800b70e:	617b      	str	r3, [r7, #20]
                                                source_ip, dest_ip);
            checksum = ~checksum & NX_LOWER_16_MASK;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	43db      	mvns	r3, r3
 800b714:	b29b      	uxth	r3, r3
 800b716:	617b      	str	r3, [r7, #20]

            /* Convert back to host byte order */
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800b718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	ba1a      	rev	r2, r3
 800b71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b720:	611a      	str	r2, [r3, #16]

            /* Move the checksum into header.  */
            header_ptr -> nx_tcp_header_word_4 =  header_ptr -> nx_tcp_header_word_4 | (checksum << NX_SHIFT_BY_16);
 800b722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b724:	691a      	ldr	r2, [r3, #16]
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	041b      	lsls	r3, r3, #16
 800b72a:	431a      	orrs	r2, r3
 800b72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72e:	611a      	str	r2, [r3, #16]

            /* Convert back to network byte order for transmit. */
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 800b730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	ba1a      	rev	r2, r3
 800b736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b738:	611a      	str	r2, [r3, #16]
 800b73a:	e005      	b.n	800b748 <_nx_tcp_socket_retransmit+0x2b8>
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        else
        {
            packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM;
 800b73c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b740:	f043 0204 	orr.w	r2, r3, #4
 800b744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b746:	639a      	str	r2, [r3, #56]	; 0x38
        }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

        /* Determine if the retransmitted packet is identical to the original packet.
           RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
        if ((header_ptr -> nx_tcp_acknowledgment_number == original_acknowledgment_number) &&
 800b748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b74e:	429a      	cmp	r2, r3
 800b750:	d10d      	bne.n	800b76e <_nx_tcp_socket_retransmit+0x2de>
            (header_ptr -> nx_tcp_header_word_3 == original_header_word_3) &&
 800b752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b754:	68db      	ldr	r3, [r3, #12]
        if ((header_ptr -> nx_tcp_acknowledgment_number == original_acknowledgment_number) &&
 800b756:	6a3a      	ldr	r2, [r7, #32]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d108      	bne.n	800b76e <_nx_tcp_socket_retransmit+0x2de>
            (header_ptr -> nx_tcp_header_word_4 == original_header_word_4))
 800b75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75e:	691b      	ldr	r3, [r3, #16]
            (header_ptr -> nx_tcp_header_word_3 == original_header_word_3) &&
 800b760:	69fa      	ldr	r2, [r7, #28]
 800b762:	429a      	cmp	r2, r3
 800b764:	d103      	bne.n	800b76e <_nx_tcp_socket_retransmit+0x2de>
        {

            /* Yes, identical packet, update the identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_TRUE;
 800b766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        }


#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP retransmit count.  */
        ip_ptr -> nx_ip_tcp_retransmit_packets++;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b774:	1c5a      	adds	r2, r3, #1
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

        /* Increment the TCP retransmit count for the socket.  */
        socket_ptr -> nx_tcp_socket_retransmit_packets++;
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RETRY, ip_ptr, socket_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_timeout_retries, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Clear the queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800b78a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b78c:	2200      	movs	r2, #0
 800b78e:	61da      	str	r2, [r3, #28]
        /* Yes, the driver has finished with the packet at the head of the
           transmit sent list... so it can be sent again!  */

#ifndef NX_DISABLE_IPV4
        /* Is this an IPv4 connection? */
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	695b      	ldr	r3, [r3, #20]
 800b794:	2b04      	cmp	r3, #4
 800b796:	d118      	bne.n	800b7ca <_nx_tcp_socket_retransmit+0x33a>
        {
            _nx_ip_packet_send(ip_ptr, packet_ptr,
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	6998      	ldr	r0, [r3, #24]
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
                               socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
                               socket_ptr -> nx_tcp_socket_type_of_service,
                               socket_ptr -> nx_tcp_socket_time_to_live, NX_IP_TCP,
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
            _nx_ip_packet_send(ip_ptr, packet_ptr,
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 800b7ae:	68b9      	ldr	r1, [r7, #8]
 800b7b0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800b7b2:	9103      	str	r1, [sp, #12]
 800b7b4:	9202      	str	r2, [sp, #8]
 800b7b6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800b7ba:	9201      	str	r2, [sp, #4]
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	4623      	mov	r3, r4
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f7fc fbd5 	bl	8007f74 <_nx_ip_packet_send>
#endif /* FEATURE_NX_IPV6 */

        /* Move to next packet. */
        /* During fast recovery, only one packet is retransmitted at once. */
        /* After a timeout, the sending data can be at most one SMSS. */
        if ((next_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED) ||
 800b7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7cc:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 800b7d0:	d013      	beq.n	800b7fa <_nx_tcp_socket_retransmit+0x36a>
            (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE))
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
        if ((next_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED) ||
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d00e      	beq.n	800b7fa <_nx_tcp_socket_retransmit+0x36a>
        {
            break;
        }
        else
        {
            packet_ptr = next_ptr;
 800b7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7de:	647b      	str	r3, [r7, #68]	; 0x44
    while (packet_ptr && (packet_ptr -> nx_packet_queue_next == (NX_PACKET *)NX_DRIVER_TX_DONE))
 800b7e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d009      	beq.n	800b7fa <_nx_tcp_socket_retransmit+0x36a>
 800b7e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7e8:	69db      	ldr	r3, [r3, #28]
 800b7ea:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800b7ee:	f43f af18 	beq.w	800b622 <_nx_tcp_socket_retransmit+0x192>
 800b7f2:	e002      	b.n	800b7fa <_nx_tcp_socket_retransmit+0x36a>
            return;
 800b7f4:	bf00      	nop
 800b7f6:	e000      	b.n	800b7fa <_nx_tcp_socket_retransmit+0x36a>
            break;
 800b7f8:	bf00      	nop
        }
    }
}
 800b7fa:	374c      	adds	r7, #76	; 0x4c
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd90      	pop	{r4, r7, pc}

0800b800 <_nx_tcp_socket_state_ack_check>:
/*                                            comparison,                 */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_state_ack_check(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b096      	sub	sp, #88	; 0x58
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]

TX_INTERRUPT_SAVE_AREA

NX_TCP_HEADER *search_header_ptr = NX_NULL;
 800b80a:	2300      	movs	r3, #0
 800b80c:	657b      	str	r3, [r7, #84]	; 0x54
ULONG          starting_tx_sequence;
ULONG          ending_tx_sequence;
ULONG          ending_rx_sequence;
ULONG          acked_bytes;
ULONG          tcp_payload_length;
UINT           wrapped_flag = NX_FALSE;
 800b80e:	2300      	movs	r3, #0
 800b810:	63bb      	str	r3, [r7, #56]	; 0x38


    /* Determine if the header has an ACK bit set.  This is an
       acknowledgement of a previous transmission.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f000 82ca 	beq.w	800bdb4 <_nx_tcp_socket_state_ack_check+0x5b4>
    {

        /* Initialize tx sequence. */
        if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b826:	2b00      	cmp	r3, #0
 800b828:	d004      	beq.n	800b834 <_nx_tcp_socket_state_ack_check+0x34>
        {
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence + 1;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b82e:	3301      	adds	r3, #1
 800b830:	643b      	str	r3, [r7, #64]	; 0x40
 800b832:	e002      	b.n	800b83a <_nx_tcp_socket_state_ack_check+0x3a>
        }
        else
        {
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b838:	643b      	str	r3, [r7, #64]	; 0x40
        }
        starting_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence - socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b842:	1ad3      	subs	r3, r2, r3
 800b844:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize ending rx sequence. */
        if (socket_ptr -> nx_tcp_socket_receive_queue_tail)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d028      	beq.n	800b8a2 <_nx_tcp_socket_state_ack_check+0xa2>
        {
            search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_tail;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b856:	653b      	str	r3, [r7, #80]	; 0x50

            /* Setup a pointer to header of this packet in the sent list.  */
#ifndef NX_DISABLE_IPV4
            if (search_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800b858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b85a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b85e:	2b04      	cmp	r3, #4
 800b860:	d11d      	bne.n	800b89e <_nx_tcp_socket_state_ack_check+0x9e>
            {

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 800b862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b866:	3314      	adds	r3, #20
 800b868:	657b      	str	r3, [r7, #84]	; 0x54
            {
                return(NX_FALSE);
            }

            /* Determine the size of the TCP header.  */
            temp =  search_header_ptr -> nx_tcp_header_word_3;
 800b86a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	64bb      	str	r3, [r7, #72]	; 0x48
            header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800b870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b872:	0f1b      	lsrs	r3, r3, #28
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	633b      	str	r3, [r7, #48]	; 0x30

            /* Determine the sequence number in the TCP header.  */
            search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 800b878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Calculate the payload length of TCP. */
            tcp_payload_length = (search_ptr -> nx_packet_length -
 800b87e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                  (header_length +
                                   (ULONG)((ALIGN_TYPE)search_header_ptr -
                                           (ALIGN_TYPE)search_ptr -> nx_packet_prepend_ptr)));
 800b882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	4619      	mov	r1, r3
                                   (ULONG)((ALIGN_TYPE)search_header_ptr -
 800b888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b88a:	1ac9      	subs	r1, r1, r3
                                  (header_length +
 800b88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88e:	1acb      	subs	r3, r1, r3
            tcp_payload_length = (search_ptr -> nx_packet_length -
 800b890:	4413      	add	r3, r2
 800b892:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Calculate the ending packet sequence.  */
            ending_rx_sequence =  search_sequence + tcp_payload_length;
 800b894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b898:	4413      	add	r3, r2
 800b89a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b89c:	e004      	b.n	800b8a8 <_nx_tcp_socket_state_ack_check+0xa8>
                return(NX_FALSE);
 800b89e:	2300      	movs	r3, #0
 800b8a0:	e289      	b.n	800bdb6 <_nx_tcp_socket_state_ack_check+0x5b6>
        }
        else
        {
            ending_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
#endif

        /* First, determine if incoming ACK matches our transmit sequence.  */
        /*lint -e{923} suppress cast of pointer to ULONG.  */
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d111      	bne.n	800b8d6 <_nx_tcp_socket_state_ack_check+0xd6>
        {

            /* In this case, everything on the transmit list is acknowledged.  Simply set the packet
               release count to the number of packets in the transmit queue.  */
            packet_release_count =  socket_ptr -> nx_tcp_socket_transmit_sent_count;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b8b8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Set the previous pointer to the socket transmit tail pointer.  */
            previous_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_tail;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800b8c0:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Is this ACK to FIN? */
            if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_FIN_WAIT_1)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c6:	2b06      	cmp	r3, #6
 800b8c8:	f240 80d3 	bls.w	800ba72 <_nx_tcp_socket_state_ack_check+0x272>
            {

                /* Yes it is. */
                socket_ptr -> nx_tcp_socket_fin_acked = NX_TRUE;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800b8d4:	e0cd      	b.n	800ba72 <_nx_tcp_socket_state_ack_check+0x272>
        {

            /* Calculate the start and end of the transmit sequence.  */

            /* Pickup the head of the transmit queue.  */
            search_ptr =    socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b8dc:	653b      	str	r3, [r7, #80]	; 0x50

            /* Determine if there is a packet on the transmit queue... and determine if the packet has been
               transmitted.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if ((search_ptr) && (search_ptr -> nx_packet_queue_next == ((NX_PACKET *)NX_DRIVER_TX_DONE)))
 800b8de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d056      	beq.n	800b992 <_nx_tcp_socket_state_ack_check+0x192>
 800b8e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8e6:	69db      	ldr	r3, [r3, #28]
 800b8e8:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800b8ec:	d151      	bne.n	800b992 <_nx_tcp_socket_state_ack_check+0x192>
            {

                /* Determine if the incoming ACK matches the front of our transmit queue. */
                if (tcp_header_ptr -> nx_tcp_acknowledgment_number == starting_tx_sequence)
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d143      	bne.n	800b980 <_nx_tcp_socket_state_ack_check+0x180>
                {

                    /* Handle duplicated ACK packet.  */
                    socket_ptr -> nx_tcp_socket_duplicated_ack_received++;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8fc:	1c5a      	adds	r2, r3, #1
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	66da      	str	r2, [r3, #108]	; 0x6c

                    if (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 3)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b906:	2b03      	cmp	r3, #3
 800b908:	d12a      	bne.n	800b960 <_nx_tcp_socket_state_ack_check+0x160>
                    {
                        if ((INT)((tcp_header_ptr -> nx_tcp_acknowledgment_number - 1) -
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	689a      	ldr	r2, [r3, #8]
                                  socket_ptr -> nx_tcp_socket_tx_sequence_recover) > 0)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                        if ((INT)((tcp_header_ptr -> nx_tcp_acknowledgment_number - 1) -
 800b912:	1ad3      	subs	r3, r2, r3
 800b914:	3b01      	subs	r3, #1
 800b916:	2b00      	cmp	r3, #0
 800b918:	dd08      	ble.n	800b92c <_nx_tcp_socket_state_ack_check+0x12c>
                        {

                            /* Cumulative acknowledge covers more than recover. */
                            /* Section 3.2, Page 5, RFC6582. */
                            /* Retransmit packet immediately. */
                            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_TRUE);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b920:	2201      	movs	r2, #1
 800b922:	6879      	ldr	r1, [r7, #4]
 800b924:	4618      	mov	r0, r3
 800b926:	f7ff fdb3 	bl	800b490 <_nx_tcp_socket_retransmit>
 800b92a:	e029      	b.n	800b980 <_nx_tcp_socket_state_ack_check+0x180>
                        }
                        else if ((socket_ptr -> nx_tcp_socket_tx_window_congestion > socket_ptr -> nx_tcp_socket_connect_mss) &&
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a1b      	ldr	r3, [r3, #32]
 800b934:	429a      	cmp	r2, r3
 800b936:	d923      	bls.n	800b980 <_nx_tcp_socket_state_ack_check+0x180>
                                 ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - (socket_ptr -> nx_tcp_socket_previous_highest_ack +
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	689a      	ldr	r2, [r3, #8]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6e59      	ldr	r1, [r3, #100]	; 0x64
                                                                                          (socket_ptr -> nx_tcp_socket_connect_mss << 2))) < 0))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6a1b      	ldr	r3, [r3, #32]
 800b944:	009b      	lsls	r3, r3, #2
                                 ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - (socket_ptr -> nx_tcp_socket_previous_highest_ack +
 800b946:	440b      	add	r3, r1
 800b948:	1ad3      	subs	r3, r2, r3
                        else if ((socket_ptr -> nx_tcp_socket_tx_window_congestion > socket_ptr -> nx_tcp_socket_connect_mss) &&
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	da18      	bge.n	800b980 <_nx_tcp_socket_state_ack_check+0x180>

                            /* Congestion window is greater than SMSS bytes and
                               the difference between highest_ack and prev_highest_ack is at most 4*SMSS bytes.*/
                            /* Section 4.1, Page 5, RFC6582. */
                            /* Retransmit packet immediately. */
                            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_TRUE);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b954:	2201      	movs	r2, #1
 800b956:	6879      	ldr	r1, [r7, #4]
 800b958:	4618      	mov	r0, r3
 800b95a:	f7ff fd99 	bl	800b490 <_nx_tcp_socket_retransmit>
 800b95e:	e00f      	b.n	800b980 <_nx_tcp_socket_state_ack_check+0x180>
                        }
                    }
                    else if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received > 3) &&
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b964:	2b03      	cmp	r3, #3
 800b966:	d90b      	bls.n	800b980 <_nx_tcp_socket_state_ack_check+0x180>
                             (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
                    else if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received > 3) &&
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d106      	bne.n	800b980 <_nx_tcp_socket_state_ack_check+0x180>
                    {

                        /* CWND += MSS  */
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	441a      	add	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	659a      	str	r2, [r3, #88]	; 0x58
                    }
                }

                /* Determine if the transmit queue has wrapped.  */
                if (ending_tx_sequence > starting_tx_sequence)
 800b980:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b984:	429a      	cmp	r2, r3
 800b986:	d902      	bls.n	800b98e <_nx_tcp_socket_state_ack_check+0x18e>
                {

                    /* Clear the wrapped flag.  */
                    wrapped_flag =  NX_FALSE;
 800b988:	2300      	movs	r3, #0
 800b98a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b98c:	e001      	b.n	800b992 <_nx_tcp_socket_state_ack_check+0x192>
                }
                else
                {

                    /* Set the wrapped flag.  */
                    wrapped_flag =  NX_TRUE;
 800b98e:	2301      	movs	r3, #1
 800b990:	63bb      	str	r3, [r7, #56]	; 0x38
                }
            }

            /* Initialize the packet release count.  */
            packet_release_count =  0;
 800b992:	2300      	movs	r3, #0
 800b994:	647b      	str	r3, [r7, #68]	; 0x44

            /* See if we can find the sequence number in the sent queue for this
               socket.  */
            previous_ptr =  NX_NULL;
 800b996:	2300      	movs	r3, #0
 800b998:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (search_ptr)
 800b99a:	e063      	b.n	800ba64 <_nx_tcp_socket_state_ack_check+0x264>
            {

                /* Determine if the packet has been transmitted.  */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                if (search_ptr -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 800b99c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b99e:	69db      	ldr	r3, [r3, #28]
 800b9a0:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800b9a4:	d007      	beq.n	800b9b6 <_nx_tcp_socket_state_ack_check+0x1b6>
                {

                    /* Setup a pointer to header of this packet in the sent list.  */
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 800b9a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                           search_ptr -> nx_packet_ip_header_length);
 800b9aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9ac:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 800b9b0:	4413      	add	r3, r2
 800b9b2:	657b      	str	r3, [r7, #84]	; 0x54
 800b9b4:	e002      	b.n	800b9bc <_nx_tcp_socket_state_ack_check+0x1bc>
                else
                {

                    /* Setup a pointer to header of this packet in the sent list.  */
                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800b9b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9b8:	689b      	ldr	r3, [r3, #8]
 800b9ba:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Determine the size of the TCP header.  */
                temp =  search_header_ptr -> nx_tcp_header_word_3;
 800b9bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	64bb      	str	r3, [r7, #72]	; 0x48
                NX_CHANGE_ULONG_ENDIAN(temp);
 800b9c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9c4:	ba1b      	rev	r3, r3
 800b9c6:	64bb      	str	r3, [r7, #72]	; 0x48
                header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800b9c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9ca:	0f1b      	lsrs	r3, r3, #28
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	633b      	str	r3, [r7, #48]	; 0x30

                /* Determine the sequence number in the TCP header.  */
                search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 800b9d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 800b9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d8:	ba1b      	rev	r3, r3
 800b9da:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the payload length of TCP. */
                tcp_payload_length = (search_ptr -> nx_packet_length -
 800b9dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                      (header_length +
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
                                               (ALIGN_TYPE)search_ptr -> nx_packet_prepend_ptr)));
 800b9e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	4619      	mov	r1, r3
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
 800b9e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9e8:	1ac9      	subs	r1, r1, r3
                                      (header_length +
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ec:	1acb      	subs	r3, r1, r3
                tcp_payload_length = (search_ptr -> nx_packet_length -
 800b9ee:	4413      	add	r3, r2
 800b9f0:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Calculate the ending packet sequence.  */
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 800b9f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f6:	4413      	add	r3, r2
 800b9f8:	627b      	str	r3, [r7, #36]	; 0x24

                /* Determine if the transmit window is wrapped.  */
                if (wrapped_flag == NX_FALSE)
 800b9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10a      	bne.n	800ba16 <_nx_tcp_socket_state_ack_check+0x216>

                    /* No, the transmit window is not wrapped. Perform a simple compare to determine if the ACK
                       covers the current search packet.  */

                    /* Is this ACK before the current search packet or after the transmit sequence?  */
                    if ((tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence) ||
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d833      	bhi.n	800ba72 <_nx_tcp_socket_state_ack_check+0x272>
                        (tcp_header_ptr -> nx_tcp_acknowledgment_number > ending_tx_sequence))
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	689b      	ldr	r3, [r3, #8]
                    if ((tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence) ||
 800ba0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d32e      	bcc.n	800ba72 <_nx_tcp_socket_state_ack_check+0x272>
 800ba14:	e018      	b.n	800ba48 <_nx_tcp_socket_state_ack_check+0x248>

                    /* Yes, the transmit window has wrapped.  We need to now check for all the wrap conditions to
                       determine if ACK covers the current search packet.  */

                    /* Is the search packet's ending sequence number in the wrapped part of the window.  */
                    if (ending_packet_sequence < starting_tx_sequence)
 800ba16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d20a      	bcs.n	800ba34 <_nx_tcp_socket_state_ack_check+0x234>
                    {

                        /* The search packet ends in the wrapped portion of the window.  Determine if the ACK
                           sequence in the wrapped portion as well.  */
                        if (tcp_header_ptr -> nx_tcp_acknowledgment_number < starting_tx_sequence)
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d921      	bls.n	800ba6c <_nx_tcp_socket_state_ack_check+0x26c>
                        {

                            /* Yes, the ACK sequence is in the wrapped portion as well. Simply compare the ACK
                               sequence with the search packet sequence.  */
                            if (tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence)
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d90a      	bls.n	800ba48 <_nx_tcp_socket_state_ack_check+0x248>
                            {

                                /* ACK does not cover the search packet. Break out of the loop.  */
                                break;
 800ba32:	e01e      	b.n	800ba72 <_nx_tcp_socket_state_ack_check+0x272>
                    else
                    {

                        /* The search packet is in the non-wrapped portion of the window.  Determine if the ACK
                           sequence is in the non-wrapped portion as well.  */
                        if (tcp_header_ptr -> nx_tcp_acknowledgment_number >= starting_tx_sequence)
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d804      	bhi.n	800ba48 <_nx_tcp_socket_state_ack_check+0x248>
                        {

                            /* Yes, the ACK sequence is in the non-wrapped portion of the window. Simply compare the ACK
                               sequence with the search packet sequence.  */
                            if (tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence)
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d813      	bhi.n	800ba70 <_nx_tcp_socket_state_ack_check+0x270>
                }

                /* At this point we know that the ACK received covers the search packet.  */

                /* Increase the packet release count.  */
                packet_release_count++;
 800ba48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	647b      	str	r3, [r7, #68]	; 0x44

                /* Move the search and previous pointers forward.  */
                previous_ptr =  search_ptr;
 800ba4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba50:	64fb      	str	r3, [r7, #76]	; 0x4c
                search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800ba52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba54:	6a1b      	ldr	r3, [r3, #32]
 800ba56:	653b      	str	r3, [r7, #80]	; 0x50

                /* Determine if we are at the end of the TCP queue.  */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                if (search_ptr == ((NX_PACKET *)NX_PACKET_ENQUEUED))
 800ba58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba5a:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 800ba5e:	d101      	bne.n	800ba64 <_nx_tcp_socket_state_ack_check+0x264>
                {

                    /* Yes, set the search pointer to NULL.  */
                    search_ptr =  NX_NULL;
 800ba60:	2300      	movs	r3, #0
 800ba62:	653b      	str	r3, [r7, #80]	; 0x50
            while (search_ptr)
 800ba64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d198      	bne.n	800b99c <_nx_tcp_socket_state_ack_check+0x19c>
 800ba6a:	e002      	b.n	800ba72 <_nx_tcp_socket_state_ack_check+0x272>
                            break;
 800ba6c:	bf00      	nop
 800ba6e:	e000      	b.n	800ba72 <_nx_tcp_socket_state_ack_check+0x272>
                                break;
 800ba70:	bf00      	nop
                }
            }
        }

        /* Determine if anything needs to be released.  */
        if (!packet_release_count)
 800ba72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d120      	bne.n	800baba <_nx_tcp_socket_state_ack_check+0x2ba>
        {

            /* No, check and see if the ACK is valid.  */
            /* If the ACK acks something not yet sent (SEG.ACK > SND.NXT) then send an ACK, drop the segment */
            /* Page 72, section 3.9, RFC 793.*/
            if (tcp_header_ptr -> nx_tcp_acknowledgment_number != ending_tx_sequence)
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d00c      	beq.n	800ba9c <_nx_tcp_socket_state_ack_check+0x29c>
            {

                /* If the ACK is a duplicate, it can be ignored. */
                if ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - ending_tx_sequence) > 0)
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	689a      	ldr	r2, [r3, #8]
 800ba86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba88:	1ad3      	subs	r3, r2, r3
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f340 8085 	ble.w	800bb9a <_nx_tcp_socket_state_ack_check+0x39a>
                {

                    /* The ACK sequence is invalid. Respond with an ACK to let the other
                       side of the connection figure out if everything is still okay.  */
                    _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
 800ba90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f7fe ffe4 	bl	800aa60 <_nx_tcp_packet_send_ack>
                    return(NX_FALSE);
 800ba98:	2300      	movs	r3, #0
 800ba9a:	e18c      	b.n	800bdb6 <_nx_tcp_socket_state_ack_check+0x5b6>
                }
            }
            else if ((socket_ptr -> nx_tcp_socket_rx_window_current == 0) &&
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d17a      	bne.n	800bb9a <_nx_tcp_socket_state_ack_check+0x39a>
                     (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	685a      	ldr	r2, [r3, #4]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            else if ((socket_ptr -> nx_tcp_socket_rx_window_current == 0) &&
 800baac:	429a      	cmp	r2, r3
 800baae:	d174      	bne.n	800bb9a <_nx_tcp_socket_state_ack_check+0x39a>
            {

                /* Response to zero window probe.  */
                _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
 800bab0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f7fe ffd4 	bl	800aa60 <_nx_tcp_packet_send_ack>
 800bab8:	e06f      	b.n	800bb9a <_nx_tcp_socket_state_ack_check+0x39a>

            /* Congestion window adjustment during slow start and congestion avoidance is executed
               on every incoming ACK that acknowledges new data. RFC5681, Section3.1, Page4-8.  */

            /* Check whether the socket is in fast recovery procedure. */
            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d10e      	bne.n	800bae2 <_nx_tcp_socket_state_ack_check+0x2e2>
            {

                /* Yes. */
                if ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number -
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	689a      	ldr	r2, [r3, #8]
                          socket_ptr -> nx_tcp_socket_tx_sequence_recover) > 0)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                if ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number -
 800bacc:	1ad3      	subs	r3, r2, r3
 800bace:	2b00      	cmp	r3, #0
 800bad0:	dd07      	ble.n	800bae2 <_nx_tcp_socket_state_ack_check+0x2e2>
                {

                    /* All packets sent before entering fast recovery are ACKed. */
                    /* Exit fast recovery procedure. */
                    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	659a      	str	r2, [r3, #88]	; 0x58
                }
            }

            if ((INT)(socket_ptr -> nx_tcp_socket_tx_sequence_recover -
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
                      (tcp_header_ptr -> nx_tcp_acknowledgment_number - 2)) < 0)
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	689b      	ldr	r3, [r3, #8]
            if ((INT)(socket_ptr -> nx_tcp_socket_tx_sequence_recover -
 800baea:	1ad3      	subs	r3, r2, r3
 800baec:	3302      	adds	r3, #2
 800baee:	2b00      	cmp	r3, #0
 800baf0:	da04      	bge.n	800bafc <_nx_tcp_socket_state_ack_check+0x2fc>
            {

                /* Update the transmit sequence that entered fast transmit. */
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = tcp_header_ptr -> nx_tcp_acknowledgment_number - 2;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	1e9a      	subs	r2, r3, #2
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	661a      	str	r2, [r3, #96]	; 0x60
            }

            /* Reset the duplicated ACK counter. */
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Set previous cumulative acknowlesgement. */
            socket_ptr -> nx_tcp_socket_previous_highest_ack = starting_tx_sequence;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb06:	665a      	str	r2, [r3, #100]	; 0x64

            /* Calculate ACKed length. */
            acked_bytes = tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence;
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	689a      	ldr	r2, [r3, #8]
 800bb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb0e:	1ad3      	subs	r3, r2, r3
 800bb10:	623b      	str	r3, [r7, #32]

            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d112      	bne.n	800bb42 <_nx_tcp_socket_state_ack_check+0x342>
            {

                /* Process cwnd in fast recovery procedure. */
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= acked_bytes;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb20:	6a3b      	ldr	r3, [r7, #32]
 800bb22:	1ad2      	subs	r2, r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	659a      	str	r2, [r3, #88]	; 0x58
                if (acked_bytes > socket_ptr -> nx_tcp_socket_connect_mss)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6a1b      	ldr	r3, [r3, #32]
 800bb2c:	6a3a      	ldr	r2, [r7, #32]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d933      	bls.n	800bb9a <_nx_tcp_socket_state_ack_check+0x39a>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	441a      	add	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	659a      	str	r2, [r3, #88]	; 0x58
 800bb40:	e02b      	b.n	800bb9a <_nx_tcp_socket_state_ack_check+0x39a>
            else
            {

                /* Adjust the transmit window.  In slow start phase, the transmit window is incremented for every ACK.
                   In Congestion Avoidance phase, the window is incremented for every RTT. Section 3.1, Page 4-7, RFC5681.  */
                if (socket_ptr -> nx_tcp_socket_tx_window_congestion >= socket_ptr -> nx_tcp_socket_tx_slow_start_threshold)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d312      	bcc.n	800bb74 <_nx_tcp_socket_state_ack_check+0x374>
                {

                    /* In Congestion avoidance phase, for every ACK it receives, increase the window size using the
                       following approximation:
                       cwnd = cwnd + MSS * MSS / cwnd;  */
                    temp = socket_ptr -> nx_tcp_socket_connect_mss2 / socket_ptr -> nx_tcp_socket_tx_window_congestion;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb56:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb5a:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* If the above formula yields 0, the result SHOULD be rounded up to 1 byte.  */
                    if (temp == 0)
 800bb5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d101      	bne.n	800bb66 <_nx_tcp_socket_state_ack_check+0x366>
                    {
                        temp = 1;
 800bb62:	2301      	movs	r3, #1
 800bb64:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_window_congestion + temp;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb6c:	441a      	add	r2, r3
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	659a      	str	r2, [r3, #88]	; 0x58
 800bb72:	e012      	b.n	800bb9a <_nx_tcp_socket_state_ack_check+0x39a>
                {

                    /* In Slow start phase:
                       cwnd += min (N, SMSS),
                       where N is the number of ACKed bytes. */
                    if (acked_bytes < socket_ptr -> nx_tcp_socket_connect_mss)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6a1b      	ldr	r3, [r3, #32]
 800bb78:	6a3a      	ldr	r2, [r7, #32]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d206      	bcs.n	800bb8c <_nx_tcp_socket_state_ack_check+0x38c>
                    {

                        /* In Slow start phase. Increase the cwnd by acked bytes.*/
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += acked_bytes;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb82:	6a3b      	ldr	r3, [r7, #32]
 800bb84:	441a      	add	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	659a      	str	r2, [r3, #88]	; 0x58
 800bb8a:	e006      	b.n	800bb9a <_nx_tcp_socket_state_ack_check+0x39a>
                    }
                    else
                    {

                        /* In Slow start phase. Increase the cwnd by full MSS for every ack.*/
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6a1b      	ldr	r3, [r3, #32]
 800bb94:	441a      	add	r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	659a      	str	r2, [r3, #88]	; 0x58
        /* Update the window only when
         * 1. SND.UNA < SEG.ACK =< SND.NXT or
         * 2. SND.WL1 < SEG.SEQ or
         * 3. SND.WL1 = SEG.SEQ and SND.WL2 =< SEG.ACK
         * RFC793, Section 3.9, Page72. */
        if ((((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence) > 0) &&
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	689a      	ldr	r2, [r3, #8]
 800bb9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	dd05      	ble.n	800bbb2 <_nx_tcp_socket_state_ack_check+0x3b2>
             ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - ending_tx_sequence) <= 0)) ||
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	689a      	ldr	r2, [r3, #8]
 800bbaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbac:	1ad3      	subs	r3, r2, r3
        if ((((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence) > 0) &&
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	dd10      	ble.n	800bbd4 <_nx_tcp_socket_state_ack_check+0x3d4>
            ((INT)(tcp_header_ptr -> nx_tcp_sequence_number - ending_rx_sequence) > 0) ||
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	685a      	ldr	r2, [r3, #4]
 800bbb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbb8:	1ad3      	subs	r3, r2, r3
             ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - ending_tx_sequence) <= 0)) ||
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	dc0a      	bgt.n	800bbd4 <_nx_tcp_socket_state_ack_check+0x3d4>
            (((INT)(tcp_header_ptr -> nx_tcp_sequence_number == ending_rx_sequence)) &&
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	685b      	ldr	r3, [r3, #4]
            ((INT)(tcp_header_ptr -> nx_tcp_sequence_number - ending_rx_sequence) > 0) ||
 800bbc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d10a      	bne.n	800bbde <_nx_tcp_socket_state_ack_check+0x3de>
             ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence) >= 0)))
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	689a      	ldr	r2, [r3, #8]
 800bbcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbce:	1ad3      	subs	r3, r2, r3
            (((INT)(tcp_header_ptr -> nx_tcp_sequence_number == ending_rx_sequence)) &&
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	db04      	blt.n	800bbde <_nx_tcp_socket_state_ack_check+0x3de>
        {

            /* Update this socket's transmit window with the advertised window size in the ACK message.  */
            socket_ptr -> nx_tcp_socket_tx_window_advertised =  (tcp_header_ptr -> nx_tcp_header_word_3) & NX_LOWER_16_MASK;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	b29a      	uxth	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	655a      	str	r2, [r3, #84]	; 0x54
            socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_snd_win_scale_value;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
        }

        /* Check advertised window. */
        if ((socket_ptr -> nx_tcp_socket_tx_window_advertised <= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes) &&
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d80a      	bhi.n	800bc00 <_nx_tcp_socket_state_ack_check+0x400>
            (tcp_header_ptr -> nx_tcp_acknowledgment_number >= socket_ptr -> nx_tcp_socket_zero_window_probe_sequence))
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	689a      	ldr	r2, [r3, #8]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
        if ((socket_ptr -> nx_tcp_socket_tx_window_advertised <= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes) &&
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d303      	bcc.n	800bc00 <_nx_tcp_socket_state_ack_check+0x400>
        {

            /* It is an ACK to Zero Window Probe. Reset the zero window probe failure. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }

        if (!packet_release_count)
 800bc00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d101      	bne.n	800bc0a <_nx_tcp_socket_state_ack_check+0x40a>
        {
            /* Done, return to caller. */
            return(NX_TRUE);
 800bc06:	2301      	movs	r3, #1
 800bc08:	e0d5      	b.n	800bdb6 <_nx_tcp_socket_state_ack_check+0x5b6>
            }
        }
#endif

        /* Save the front of the of the transmit queue.  */
        search_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800bc10:	653b      	str	r3, [r7, #80]	; 0x50

        /* Okay so now the packet after the previous pointer needs to be the front of the
           queue.  */
        if (previous_ptr != socket_ptr -> nx_tcp_socket_transmit_sent_tail)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800bc18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d017      	beq.n	800bc4e <_nx_tcp_socket_state_ack_check+0x44e>
        {

            /* Just update the head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800bc1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc20:	6a1a      	ldr	r2, [r3, #32]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

            /* And decrease the transmit queue count accordingly.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_count =   socket_ptr -> nx_tcp_socket_transmit_sent_count - packet_release_count;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800bc2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc30:	1ad2      	subs	r2, r2, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

            /* Setup a new transmit timeout.  */
            socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800bc4c:	e09e      	b.n	800bd8c <_nx_tcp_socket_state_ack_check+0x58c>
        else
        {

            /* The transmit list is now cleared, just set the head and tail pointers to
               NULL.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  NX_NULL;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
            socket_ptr -> nx_tcp_socket_transmit_sent_tail  =  NX_NULL;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

            /* Clear the transmit queue count.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_count =  0;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

            /* Determine if a disconnect FIN has been sent from this side of the connection.  */
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6a:	2b07      	cmp	r3, #7
 800bc6c:	d007      	beq.n	800bc7e <_nx_tcp_socket_state_ack_check+0x47e>
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 800bc72:	2b09      	cmp	r3, #9
 800bc74:	d003      	beq.n	800bc7e <_nx_tcp_socket_state_ack_check+0x47e>
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_LAST_ACK))
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 800bc7a:	2b0b      	cmp	r3, #11
 800bc7c:	d10a      	bne.n	800bc94 <_nx_tcp_socket_state_ack_check+0x494>
            {

                /* Yes, setup timeout such that the FIN can be retried if it is lost.  */
                socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800bc92:	e007      	b.n	800bca4 <_nx_tcp_socket_state_ack_check+0x4a4>
            }
            else if (socket_ptr -> nx_tcp_socket_tx_window_advertised != 0)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d077      	beq.n	800bd8c <_nx_tcp_socket_state_ack_check+0x58c>
            {

                /* Otherwise, a FIN has not been sent, simply clear the transmit timeout.  */
                socket_ptr -> nx_tcp_socket_timeout =  0;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            }
        }

        /* Now walk through the packets to release and set them
           free.  */
        while (packet_release_count--)
 800bca4:	e072      	b.n	800bd8c <_nx_tcp_socket_state_ack_check+0x58c>
        {

            /* Use the previous pointer as the release pointer.  */
            previous_ptr =  search_ptr;
 800bca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bca8:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Move to the next packet in the queue before we clip the
               next pointer.  */
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800bcaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcac:	6a1b      	ldr	r3, [r3, #32]
 800bcae:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcb0:	f3ef 8310 	mrs	r3, PRIMASK
 800bcb4:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bcb6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bcb8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bcba:	b672      	cpsid	i
    return(int_posture);
 800bcbc:	697b      	ldr	r3, [r7, #20]

            /* Disable interrupts temporarily.  */
            TX_DISABLE
 800bcbe:	61fb      	str	r3, [r7, #28]

            /* Set the packet to allocated to indicate it is no longer part of the TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  ((NX_PACKET *)NX_PACKET_ALLOCATED);
 800bcc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcc2:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800bcc6:	621a      	str	r2, [r3, #32]
               the packet occurred prior to receiving the ACK. If so, the packet could be
               in an ARP queue or in a driver queue waiting for transmission so we can't
               release it directly at this point.  The driver or the ARP processing will
               release it when finished.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (previous_ptr -> nx_packet_queue_next ==  ((NX_PACKET *)NX_DRIVER_TX_DONE))
 800bcc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcca:	69db      	ldr	r3, [r3, #28]
 800bccc:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800bcd0:	d12b      	bne.n	800bd2a <_nx_tcp_socket_state_ack_check+0x52a>
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	f383 8810 	msr	PRIMASK, r3
}
 800bcdc:	bf00      	nop

                /* Yes, the driver has already released the packet.  */

                /* Open up the transmit window. */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr = (NX_TCP_HEADER *)previous_ptr -> nx_packet_prepend_ptr;
 800bcde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	657b      	str	r3, [r7, #84]	; 0x54

                temp = search_header_ptr -> nx_tcp_header_word_3;
 800bce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	64bb      	str	r3, [r7, #72]	; 0x48
                NX_CHANGE_ULONG_ENDIAN(temp);
 800bcea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcec:	ba1b      	rev	r3, r3
 800bcee:	64bb      	str	r3, [r7, #72]	; 0x48
                header_length = (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800bcf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcf2:	0f1b      	lsrs	r3, r3, #28
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	633b      	str	r3, [r7, #48]	; 0x30
                if (socket_ptr -> nx_tcp_socket_tx_outstanding_bytes > (previous_ptr -> nx_packet_length - header_length))
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bcfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcfe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800bd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd02:	1acb      	subs	r3, r1, r3
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d909      	bls.n	800bd1c <_nx_tcp_socket_state_ack_check+0x51c>
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes -= previous_ptr -> nx_packet_length - header_length;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bd0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd12:	1acb      	subs	r3, r1, r3
 800bd14:	441a      	add	r2, r3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	65da      	str	r2, [r3, #92]	; 0x5c
 800bd1a:	e002      	b.n	800bd22 <_nx_tcp_socket_state_ack_check+0x522>
                }
                else
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	65da      	str	r2, [r3, #92]	; 0x5c
                }
                /* Release the packet.  */
                _nx_packet_release(previous_ptr);
 800bd22:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bd24:	f7fd fbf8 	bl	8009518 <_nx_packet_release>
 800bd28:	e030      	b.n	800bd8c <_nx_tcp_socket_state_ack_check+0x58c>
            else
            {

                /* No, the driver has not released the packet.  */
                /* Open up the transmit window. */
                search_header_ptr =  (NX_TCP_HEADER *)(previous_ptr -> nx_packet_ip_header +
 800bd2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                       previous_ptr -> nx_packet_ip_header_length);
 800bd2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd30:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
                search_header_ptr =  (NX_TCP_HEADER *)(previous_ptr -> nx_packet_ip_header +
 800bd34:	4413      	add	r3, r2
 800bd36:	657b      	str	r3, [r7, #84]	; 0x54

                temp = search_header_ptr -> nx_tcp_header_word_3;
 800bd38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	64bb      	str	r3, [r7, #72]	; 0x48
                NX_CHANGE_ULONG_ENDIAN(temp);
 800bd3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd40:	ba1b      	rev	r3, r3
 800bd42:	64bb      	str	r3, [r7, #72]	; 0x48
                header_length = (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800bd44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd46:	0f1b      	lsrs	r3, r3, #28
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	633b      	str	r3, [r7, #48]	; 0x30
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 800bd4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                      (header_length +
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
                                               (ALIGN_TYPE)(previous_ptr -> nx_packet_prepend_ptr))));
 800bd50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	4619      	mov	r1, r3
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
 800bd56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd58:	1ac9      	subs	r1, r1, r3
                                      (header_length +
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	1acb      	subs	r3, r1, r3
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 800bd5e:	4413      	add	r3, r2
 800bd60:	62bb      	str	r3, [r7, #40]	; 0x28
                if (socket_ptr -> nx_tcp_socket_tx_outstanding_bytes > tcp_payload_length)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d206      	bcs.n	800bd7a <_nx_tcp_socket_state_ack_check+0x57a>
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes -= tcp_payload_length;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd72:	1ad2      	subs	r2, r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	65da      	str	r2, [r3, #92]	; 0x5c
 800bd78:	e002      	b.n	800bd80 <_nx_tcp_socket_state_ack_check+0x580>
                }
                else
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	65da      	str	r2, [r3, #92]	; 0x5c
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f383 8810 	msr	PRIMASK, r3
}
 800bd8a:	bf00      	nop
        while (packet_release_count--)
 800bd8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd8e:	1e5a      	subs	r2, r3, #1
 800bd90:	647a      	str	r2, [r7, #68]	; 0x44
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d187      	bne.n	800bca6 <_nx_tcp_socket_state_ack_check+0x4a6>
                /* Restore interrupts.  */
                TX_RESTORE
            }
        }

        if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d107      	bne.n	800bdb0 <_nx_tcp_socket_state_ack_check+0x5b0>
        {

            /* Only partial data are ACKed. Retransmit packet immediately. */
            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_FALSE);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bda6:	2200      	movs	r2, #0
 800bda8:	6879      	ldr	r1, [r7, #4]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7ff fb70 	bl	800b490 <_nx_tcp_socket_retransmit>
        }

        return(NX_TRUE);
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e000      	b.n	800bdb6 <_nx_tcp_socket_state_ack_check+0x5b6>
    else
    {

        /* The ACK bit is off drop the segment and return.  */
        /* RFC793, Section3.9, Page72.  */
        return(NX_FALSE);
 800bdb4:	2300      	movs	r3, #0
    }
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3758      	adds	r7, #88	; 0x58
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
	...

0800bdc0 <_nx_tcp_socket_state_closing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_closing(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]


    /* Determine if the incoming message is an ACK message.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d029      	beq.n	800be2a <_nx_tcp_socket_state_closing+0x6a>
    {

        /* If it is proper, finish the disconnect. */
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	689a      	ldr	r2, [r3, #8]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d123      	bne.n	800be2a <_nx_tcp_socket_state_closing+0x6a>
            (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	685a      	ldr	r2, [r3, #4]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d11d      	bne.n	800be2a <_nx_tcp_socket_state_closing+0x6a>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Set the socket state to TIMED WAIT now.  */
            socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	220a      	movs	r2, #10
 800bdf2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Set the timeout as 2MSL (Maximum Segment Lifetime). */
            socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 800bdf4:	4b0f      	ldr	r3, [pc, #60]	; (800be34 <_nx_tcp_socket_state_closing+0x74>)
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800be04:	2b00      	cmp	r3, #0
 800be06:	d006      	beq.n	800be16 <_nx_tcp_socket_state_closing+0x56>
            {

                /* Resume the thread suspended for the disconnect.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800be0e:	2100      	movs	r1, #0
 800be10:	4618      	mov	r0, r3
 800be12:	f000 fec7 	bl	800cba4 <_nx_tcp_socket_thread_resume>
            }

            /* If given, call the application's disconnect callback function
               for disconnect.  */
            if (socket_ptr -> nx_tcp_disconnect_callback)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d004      	beq.n	800be2a <_nx_tcp_socket_state_closing+0x6a>
            {

                /* Call the application's disconnect handling function.  It is
                   responsible for calling the socket disconnect function.  */
                (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	4798      	blx	r3
#endif
        }

        /* Ignore the segment.  According to RFC 793, Section 3.9, Page 73.  */
    }
}
 800be2a:	bf00      	nop
 800be2c:	3708      	adds	r7, #8
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	20008058 	.word	0x20008058

0800be38 <_nx_tcp_socket_state_data_trim>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
VOID _nx_tcp_socket_state_data_trim(NX_PACKET *packet_ptr, ULONG amount)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b086      	sub	sp, #24
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
ULONG      bytes_to_keep;
NX_PACKET *work_ptr;

    if (amount >= packet_ptr -> nx_packet_length)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be46:	683a      	ldr	r2, [r7, #0]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d23c      	bcs.n	800bec6 <_nx_tcp_socket_state_data_trim+0x8e>
    {
        /* Invalid input. */
        return;
    }

    bytes_to_keep = packet_ptr -> nx_packet_length - amount;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	1ad3      	subs	r3, r2, r3
 800be54:	617b      	str	r3, [r7, #20]

    packet_ptr -> nx_packet_length = bytes_to_keep;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	697a      	ldr	r2, [r7, #20]
 800be5a:	625a      	str	r2, [r3, #36]	; 0x24

    work_ptr = packet_ptr;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	613b      	str	r3, [r7, #16]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Walk down the packet chain for the "bytes_to_keep" amount. */
    while (work_ptr)
 800be60:	e02d      	b.n	800bebe <_nx_tcp_socket_state_data_trim+0x86>
    {

    NX_PACKET *tmp_ptr;

        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if ((INT)(work_ptr -> nx_packet_append_ptr - work_ptr -> nx_packet_prepend_ptr) < (INT)bytes_to_keep)
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	68da      	ldr	r2, [r3, #12]
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	1ad2      	subs	r2, r2, r3
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	429a      	cmp	r2, r3
 800be70:	da0c      	bge.n	800be8c <_nx_tcp_socket_state_data_trim+0x54>
        {

            /*lint -e{923} suppress cast of pointer to ULONG.  */
            bytes_to_keep -= (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	461a      	mov	r2, r3
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	1ad3      	subs	r3, r2, r3
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	4413      	add	r3, r2
 800be82:	617b      	str	r3, [r7, #20]

            work_ptr = work_ptr -> nx_packet_next;
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	613b      	str	r3, [r7, #16]

            continue;
 800be8a:	e018      	b.n	800bebe <_nx_tcp_socket_state_data_trim+0x86>
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* This is the last packet. */
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	689a      	ldr	r2, [r3, #8]
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	441a      	add	r2, r3
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Free the rest of the packet chain. */
        tmp_ptr = work_ptr -> nx_packet_next;
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	60fb      	str	r3, [r7, #12]
        work_ptr -> nx_packet_next = NX_NULL;
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	2200      	movs	r2, #0
 800bea2:	605a      	str	r2, [r3, #4]
        work_ptr = tmp_ptr;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	613b      	str	r3, [r7, #16]

        if (work_ptr)
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d007      	beq.n	800bebe <_nx_tcp_socket_state_data_trim+0x86>
        {

            /*lint -e{923} suppress cast of ULONG to pointer.  */
            work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800beb4:	621a      	str	r2, [r3, #32]

            _nx_packet_release(work_ptr);
 800beb6:	6938      	ldr	r0, [r7, #16]
 800beb8:	f7fd fb2e 	bl	8009518 <_nx_packet_release>

            /* All done. Break out of the while loop and return. */
            break;
 800bebc:	e004      	b.n	800bec8 <_nx_tcp_socket_state_data_trim+0x90>
    while (work_ptr)
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1ce      	bne.n	800be62 <_nx_tcp_socket_state_data_trim+0x2a>
 800bec4:	e000      	b.n	800bec8 <_nx_tcp_socket_state_data_trim+0x90>
        return;
 800bec6:	bf00      	nop
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */
}
 800bec8:	3718      	adds	r7, #24
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <_nx_tcp_socket_state_data_trim_front>:
/*                                            verified memmove use cases, */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_tcp_socket_state_data_trim_front(NX_PACKET *packet_ptr, ULONG amount)
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b084      	sub	sp, #16
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
 800bed6:	6039      	str	r1, [r7, #0]
NX_PACKET *work_ptr = packet_ptr;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	60fb      	str	r3, [r7, #12]
ULONG      work_length;

    if (amount >= packet_ptr -> nx_packet_length || amount == 0)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d263      	bcs.n	800bfae <_nx_tcp_socket_state_data_trim_front+0xe0>
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d060      	beq.n	800bfae <_nx_tcp_socket_state_data_trim_front+0xe0>
        /* Invalid input. */
        return;
    }

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= amount;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	1ad2      	subs	r2, r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Move prepend_ptr of first packet to TCP data.  */
    packet_ptr -> nx_packet_prepend_ptr += sizeof(NX_TCP_HEADER);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	f103 0214 	add.w	r2, r3, #20
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	609a      	str	r2, [r3, #8]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Walk down the packet chain for the amount. */
    while (amount)
 800bf04:	e049      	b.n	800bf9a <_nx_tcp_socket_state_data_trim_front+0xcc>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Compute the size of the data portion work_ptr.  */
        /*lint -e{923} suppress cast of pointer to ULONG.  */
        work_length = (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	1ad3      	subs	r3, r2, r3
 800bf12:	60bb      	str	r3, [r7, #8]

#ifndef NX_DISABLE_PACKET_CHAIN
        if (amount > work_length)
 800bf14:	683a      	ldr	r2, [r7, #0]
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d91e      	bls.n	800bf5a <_nx_tcp_socket_state_data_trim_front+0x8c>
        {

            /* All data in work_ptr need to be trimmed.  */
            if (work_ptr == packet_ptr)
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d104      	bne.n	800bf2e <_nx_tcp_socket_state_data_trim_front+0x60>
            {

                /* This packet is the header of packet chain.  */
                /* Clear TCP data in this packet.  */
                work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	689a      	ldr	r2, [r3, #8]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	60da      	str	r2, [r3, #12]
 800bf2c:	e00d      	b.n	800bf4a <_nx_tcp_socket_state_data_trim_front+0x7c>
            else
            {

                /* This packet is not the first packet.  */
                /* Remove work_ptr from packet chain.  */
                packet_ptr -> nx_packet_next = work_ptr -> nx_packet_next;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	685a      	ldr	r2, [r3, #4]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	605a      	str	r2, [r3, #4]

                /* Disconnect work_ptr from the rest of the packet chain. */
                work_ptr -> nx_packet_next = NX_NULL;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	605a      	str	r2, [r3, #4]

                /* Mark the packet as ALLOCATED. */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800bf42:	621a      	str	r2, [r3, #32]

                _nx_packet_release(work_ptr);
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	f7fd fae7 	bl	8009518 <_nx_packet_release>
            }
            /* Reduce the amount being trimmed.  */
            amount -= work_length;
 800bf4a:	683a      	ldr	r2, [r7, #0]
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	1ad3      	subs	r3, r2, r3
 800bf50:	603b      	str	r3, [r7, #0]

            /* Move to the next packet. */
            work_ptr = packet_ptr -> nx_packet_next;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	60fb      	str	r3, [r7, #12]
 800bf58:	e01f      	b.n	800bf9a <_nx_tcp_socket_state_data_trim_front+0xcc>
        else
        {

            /* This is the last packet to trim.  */

            if (work_ptr == packet_ptr)
 800bf5a:	68fa      	ldr	r2, [r7, #12]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d113      	bne.n	800bf8a <_nx_tcp_socket_state_data_trim_front+0xbc>
            {
#endif /* NX_DISABLE_PACKET_CHAIN */

                /* For the first packet, move data towards the beginning
                   of the packet, right after TCP header.  */
                memmove(packet_ptr -> nx_packet_prepend_ptr, /* Use case of memmove is verified.  */
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6898      	ldr	r0, [r3, #8]
                        packet_ptr -> nx_packet_prepend_ptr + amount,
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	689a      	ldr	r2, [r3, #8]
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	18d1      	adds	r1, r2, r3
                        work_length - amount);
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	1ad3      	subs	r3, r2, r3
                memmove(packet_ptr -> nx_packet_prepend_ptr, /* Use case of memmove is verified.  */
 800bf74:	461a      	mov	r2, r3
 800bf76:	f006 f985 	bl	8012284 <memmove>
                packet_ptr -> nx_packet_append_ptr -= amount;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	68da      	ldr	r2, [r3, #12]
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	425b      	negs	r3, r3
 800bf82:	441a      	add	r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	60da      	str	r2, [r3, #12]
 800bf88:	e005      	b.n	800bf96 <_nx_tcp_socket_state_data_trim_front+0xc8>
            }
            else
            {

                /* Advance nx_packet_prepend_ptr to where the usable data starts. */
                work_ptr -> nx_packet_prepend_ptr += amount;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	689a      	ldr	r2, [r3, #8]
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	441a      	add	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	609a      	str	r2, [r3, #8]
            }

            /* Cut down amount*/
            amount = 0;
 800bf96:	2300      	movs	r3, #0
 800bf98:	603b      	str	r3, [r7, #0]
    while (amount)
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d1b2      	bne.n	800bf06 <_nx_tcp_socket_state_data_trim_front+0x38>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Restore prepend_ptr of first packet to TCP data.  */
    packet_ptr -> nx_packet_prepend_ptr -= sizeof(NX_TCP_HEADER);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	f1a3 0214 	sub.w	r2, r3, #20
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	609a      	str	r2, [r3, #8]
 800bfac:	e000      	b.n	800bfb0 <_nx_tcp_socket_state_data_trim_front+0xe2>
        return;
 800bfae:	bf00      	nop
}
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
	...

0800bfb8 <_nx_tcp_socket_state_data_check>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_state_data_check(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b096      	sub	sp, #88	; 0x58
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
ULONG          search_begin_sequence;
ULONG          search_end_sequence;
ULONG          original_rx_sequence;
ULONG          trim_data_length;
TX_THREAD     *thread_ptr;
ULONG          acked_packets = 0;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	63bb      	str	r3, [r7, #56]	; 0x38
UINT           need_ack = NX_FALSE;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* NX_ENABLE_LOW_WATERMARK */
#if ((!defined(NX_DISABLE_TCP_INFO)) || defined(TX_ENABLE_EVENT_TRACE))
NX_IP         *ip_ptr;

    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfd0:	633b      	str	r3, [r7, #48]	; 0x30
                    NX_INTERFACE_CAPABILITY_TCPIP_OFFLOAD;
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine the size of the TCP header.  */
    header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800bfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	0f1b      	lsrs	r3, r3, #28
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Record the original rx_sequence. */
    original_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup the begin sequence of this packet. */
    packet_begin_sequence = tcp_header_ptr -> nx_tcp_sequence_number;
 800bfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Calculate the data length in the packet.  */
    packet_data_length = packet_ptr -> nx_packet_length - header_length;
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff4:	1ad3      	subs	r3, r2, r3
 800bff6:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the end sequence of this packet. The end sequence is one byte to the last byte in this packet. */
    packet_end_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 800bff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bffe:	4413      	add	r3, r2
 800c000:	647b      	str	r3, [r7, #68]	; 0x44

    /* Trim the data that out of the receive window, make sure all data are in receive window.  */
    if (packet_data_length
 800c002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c004:	2b00      	cmp	r3, #0
 800c006:	d039      	beq.n	800c07c <_nx_tcp_socket_state_data_check+0xc4>
#endif /* NX_ENABLE_TCPIP_OFFLOAD */
       )
    {

        /* Step1. trim the data on the left side of the receive window.  */
        if (((INT)(socket_ptr -> nx_tcp_socket_rx_sequence - packet_begin_sequence)) > 0)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c00c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c00e:	1ad3      	subs	r3, r2, r3
 800c010:	2b00      	cmp	r3, #0
 800c012:	dd16      	ble.n	800c042 <_nx_tcp_socket_state_data_check+0x8a>
        {

            /* Calculate the data length that out of window.  */
            trim_data_length = socket_ptr -> nx_tcp_socket_rx_sequence - packet_begin_sequence;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	623b      	str	r3, [r7, #32]

            /* Trim the data that exceed the receive window.  */
            _nx_tcp_socket_state_data_trim_front(packet_ptr, trim_data_length);
 800c01e:	6a39      	ldr	r1, [r7, #32]
 800c020:	6838      	ldr	r0, [r7, #0]
 800c022:	f7ff ff54 	bl	800bece <_nx_tcp_socket_state_data_trim_front>

            /* Fix the sequence of this packet. */
            tcp_header_ptr -> nx_tcp_sequence_number += trim_data_length;
 800c026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c028:	685a      	ldr	r2, [r3, #4]
 800c02a:	6a3b      	ldr	r3, [r7, #32]
 800c02c:	441a      	add	r2, r3
 800c02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c030:	605a      	str	r2, [r3, #4]

            /* Update the data length and begin sequence.  */
            packet_data_length -= trim_data_length;
 800c032:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c034:	6a3b      	ldr	r3, [r7, #32]
 800c036:	1ad3      	subs	r3, r2, r3
 800c038:	643b      	str	r3, [r7, #64]	; 0x40
            packet_begin_sequence += trim_data_length;
 800c03a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c03c:	6a3b      	ldr	r3, [r7, #32]
 800c03e:	4413      	add	r3, r2
 800c040:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Step2. trim the data on the right side of the receive window.  */
        if (((INT)((packet_end_sequence - socket_ptr -> nx_tcp_socket_rx_sequence) -
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c046:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c048:	1ad2      	subs	r2, r2, r3
                   socket_ptr -> nx_tcp_socket_rx_window_current)) > 0)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        if (((INT)((packet_end_sequence - socket_ptr -> nx_tcp_socket_rx_sequence) -
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	2b00      	cmp	r3, #0
 800c052:	dd13      	ble.n	800c07c <_nx_tcp_socket_state_data_check+0xc4>
        {

            /* Calculate the data length that out of window.  */
            trim_data_length = packet_end_sequence - (socket_ptr -> nx_tcp_socket_rx_sequence + socket_ptr -> nx_tcp_socket_rx_window_current);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c05c:	4413      	add	r3, r2
 800c05e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	623b      	str	r3, [r7, #32]

            /* Trim the data that exceed the receive window.  */
            _nx_tcp_socket_state_data_trim(packet_ptr, trim_data_length);
 800c064:	6a39      	ldr	r1, [r7, #32]
 800c066:	6838      	ldr	r0, [r7, #0]
 800c068:	f7ff fee6 	bl	800be38 <_nx_tcp_socket_state_data_trim>

            /* Update the data length and end sequence.  */
            packet_data_length -= trim_data_length;
 800c06c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c06e:	6a3b      	ldr	r3, [r7, #32]
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	643b      	str	r3, [r7, #64]	; 0x40
            packet_end_sequence -= trim_data_length;
 800c074:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c076:	6a3b      	ldr	r3, [r7, #32]
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Determine if the packet has the FIN bit set to signal a disconnect.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_FIN_BIT)
 800c07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c084:	2b00      	cmp	r3, #0
 800c086:	d009      	beq.n	800c09c <_nx_tcp_socket_state_data_check+0xe4>
    {

        /* Setup the FIN sequence number that we need to look at.  */
        socket_ptr -> nx_tcp_socket_fin_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 800c088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08a:	685a      	ldr	r2, [r3, #4]
 800c08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c08e:	441a      	add	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Indicate that the FIN sequence is now valid.  Once the receive chain is complete
           we will process (ACK) the FIN command which is part of a disconnect started by the
           other side of the connection.  */
        socket_ptr -> nx_tcp_socket_fin_received =  NX_TRUE;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2201      	movs	r2, #1
 800c098:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_FIN_RECEIVE, ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);
    }

    /* Compute the amount of payload data in this packet. */
    if (packet_data_length == 0)
 800c09c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d11d      	bne.n	800c0de <_nx_tcp_socket_state_data_check+0x126>
    {
        /* This packet does not contain TCP data payload.  */

        /* Check for invalid sequence number.  */
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a6:	2b05      	cmp	r3, #5
 800c0a8:	d117      	bne.n	800c0da <_nx_tcp_socket_state_data_check+0x122>
            (socket_ptr -> nx_tcp_socket_receive_queue_count == 0) &&
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d112      	bne.n	800c0da <_nx_tcp_socket_state_data_check+0x122>
            (socket_ptr -> nx_tcp_socket_rx_sequence != tcp_header_ptr -> nx_tcp_sequence_number) &&
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ba:	685b      	ldr	r3, [r3, #4]
            (socket_ptr -> nx_tcp_socket_receive_queue_count == 0) &&
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d00c      	beq.n	800c0da <_nx_tcp_socket_state_data_check+0x122>
            ((socket_ptr -> nx_tcp_socket_rx_sequence - 1) != tcp_header_ptr -> nx_tcp_sequence_number))
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c4:	1e5a      	subs	r2, r3, #1
 800c0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c8:	685b      	ldr	r3, [r3, #4]
            (socket_ptr -> nx_tcp_socket_rx_sequence != tcp_header_ptr -> nx_tcp_sequence_number) &&
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d005      	beq.n	800c0da <_nx_tcp_socket_state_data_check+0x122>
        {

            /* Send an immediate ACK.  */
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f7fe fcc3 	bl	800aa60 <_nx_tcp_packet_send_ack>
        }

        /* This packet does not have data, so return false. */
        return(NX_FALSE);
 800c0da:	2300      	movs	r3, #0
 800c0dc:	e29f      	b.n	800c61e <_nx_tcp_socket_state_data_check+0x666>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_DATA_RECEIVE, ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Ensure the next pointer in the packet is set to NULL, which will indicate to the
       receive logic that it is not yet part of a contiguous stream.  */
    packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_NULL;
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	61da      	str	r2, [r3, #28]

    /* Otherwise, the packet is within the receive window so continue processing
       the incoming TCP data.  */

    /* Pickup the tail pointer of the receive queue.  */
    search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_tail;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c0ea:	657b      	str	r3, [r7, #84]	; 0x54

    /* Check to see if the tail pointer is part of a contiguous stream.  */
    if (search_ptr)
 800c0ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d010      	beq.n	800c114 <_nx_tcp_socket_state_data_check+0x15c>
    {

        /* Setup a pointer to header of this packet in the sent list.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800c0f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	61fb      	str	r3, [r7, #28]

        /* Determine the size of the search TCP header.  */
        search_header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	0f1b      	lsrs	r3, r3, #28
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	61bb      	str	r3, [r7, #24]

        /* Now see if the current sequence number accounts for the last packet.  */
        search_end_sequence = search_header_ptr -> nx_tcp_sequence_number  + search_ptr -> nx_packet_length - search_header_length;
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	685a      	ldr	r2, [r3, #4]
 800c106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10a:	441a      	add	r2, r3
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	1ad3      	subs	r3, r2, r3
 800c110:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c112:	e002      	b.n	800c11a <_nx_tcp_socket_state_data_check+0x162>
    else
    {

        /* Set the sequence number to the socket's receive sequence if there isn't a receive
           packet on the queue.  */
        search_end_sequence =  socket_ptr -> nx_tcp_socket_rx_sequence;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c118:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* NX_ENABLE_LOW_WATERMARK */

    /* Determine if we have a simple case of TCP data coming in the correct order.  This means
       the socket's sequence number matches the incoming packet sequence number and the last packet's
       data on the socket's receive queue (if any) matches the current sequence number.  */
    if (((tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence) &&
 800c11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11c:	685a      	ldr	r2, [r3, #4]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c122:	429a      	cmp	r2, r3
 800c124:	d132      	bne.n	800c18c <_nx_tcp_socket_state_data_check+0x1d4>
         (search_end_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if (((tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence) &&
 800c12a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d12d      	bne.n	800c18c <_nx_tcp_socket_state_data_check+0x1d4>
        {
#endif /* NX_ENABLE_LOW_WATERMARK */

            /* Mark the packet as ready. This is done to simplify the logic in socket receive.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 800c136:	61da      	str	r2, [r3, #28]
            /* Add debug information. */
            NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

            /* Place the packet on the receive queue.  Search pointer still points to the tail packet on
               the queue.  */
            if (search_ptr)
 800c138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d007      	beq.n	800c14e <_nx_tcp_socket_state_data_check+0x196>
            {

                /* Nonempty receive queue, add packet to the end of the receive queue.  */
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  packet_ptr;
 800c13e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c140:	683a      	ldr	r2, [r7, #0]
 800c142:	621a      	str	r2, [r3, #32]

                /* Update the tail of the receive queue.  */
                socket_ptr -> nx_tcp_socket_receive_queue_tail =  packet_ptr;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	683a      	ldr	r2, [r7, #0]
 800c148:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800c14c:	e00b      	b.n	800c166 <_nx_tcp_socket_state_data_check+0x1ae>
            }
            else
            {

                /* Empty receive queue.  Set both the head and the tail pointers this packet.  */
                socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	683a      	ldr	r2, [r7, #0]
 800c152:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
                socket_ptr -> nx_tcp_socket_receive_queue_tail =  packet_ptr;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	683a      	ldr	r2, [r7, #0]
 800c15a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
                /* Setup a new delayed ACK timeout.  */
#ifdef NX_ENABLE_TCPIP_OFFLOAD
                if (!tcpip_offload)
#endif /* NX_ENABLE_TCPIP_OFFLOAD */
                {
                    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800c15e:	4b8b      	ldr	r3, [pc, #556]	; (800c38c <_nx_tcp_socket_state_data_check+0x3d4>)
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	649a      	str	r2, [r3, #72]	; 0x48
                }
            }

            /* Increment the receive TCP packet count.  */
            socket_ptr -> nx_tcp_socket_receive_queue_count++;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c16c:	1c5a      	adds	r2, r3, #1
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Set the next pointer to indicate the packet is part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800c17a:	621a      	str	r2, [r3, #32]

            /* Calculate the next sequence number.  */
            socket_ptr -> nx_tcp_socket_rx_sequence =  packet_end_sequence;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c180:	641a      	str	r2, [r3, #64]	; 0x40

            /* All packets can be acked. */
            acked_packets = socket_ptr -> nx_tcp_socket_receive_queue_count;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c188:	63bb      	str	r3, [r7, #56]	; 0x38
 800c18a:	e148      	b.n	800c41e <_nx_tcp_socket_state_data_check+0x466>
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* End of the simple case: add new packet towards the end of the recv queue.
           All packets in the receive queue are in sequence. */
    }
    else if (socket_ptr -> nx_tcp_socket_receive_queue_head == NX_NULL)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c192:	2b00      	cmp	r3, #0
 800c194:	d11a      	bne.n	800c1cc <_nx_tcp_socket_state_data_check+0x214>
        if (drop_packet == NX_FALSE)
        {
#endif /* NX_ENABLE_LOW_WATERMARK */

            /* Packet data begins to the right of the expected sequence (out of sequence data). Force an ACK. */
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c19a:	4619      	mov	r1, r3
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f7fe fc5f 	bl	800aa60 <_nx_tcp_packet_send_ack>
            /* Add debug information. */
            NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

            /* There are no packets chained on the receive queue.  Simply add the
               new packet to the receive queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = packet_ptr;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	683a      	ldr	r2, [r7, #0]
 800c1a6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
            socket_ptr -> nx_tcp_socket_receive_queue_tail = packet_ptr;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	683a      	ldr	r2, [r7, #0]
 800c1ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Increase the receive queue count. */
            socket_ptr -> nx_tcp_socket_receive_queue_count = 1;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Setup a new delayed ACK timeout.  */
            socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 800c1ba:	4b74      	ldr	r3, [pc, #464]	; (800c38c <_nx_tcp_socket_state_data_check+0x3d4>)
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	649a      	str	r2, [r3, #72]	; 0x48

            /* Mark the packet as being part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800c1c8:	621a      	str	r2, [r3, #32]
 800c1ca:	e128      	b.n	800c41e <_nx_tcp_socket_state_data_check+0x466>

        /* Go through the received packet chain, and locate the first packet that the
           packet_begin_sequence is to the right of the end of it. */

        /* Packet data begins to the right of the expected sequence (out of sequence data). Force an ACK. */
        if (((INT)(packet_begin_sequence - socket_ptr -> nx_tcp_socket_rx_sequence)) > 0)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1d2:	1ad3      	subs	r3, r2, r3
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	dd05      	ble.n	800c1e4 <_nx_tcp_socket_state_data_check+0x22c>
        {
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1dc:	4619      	mov	r1, r3
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f7fe fc3e 	bl	800aa60 <_nx_tcp_packet_send_ack>
        }

        /* At this point, it is guaranteed that the receive queue contains packets. */
        search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_head;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c1ea:	657b      	str	r3, [r7, #84]	; 0x54

        previous_ptr = NX_NULL;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	653b      	str	r3, [r7, #80]	; 0x50

        while (search_ptr)
 800c1f0:	e0ae      	b.n	800c350 <_nx_tcp_socket_state_data_check+0x398>
        {

            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (search_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED)
 800c1f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1f4:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 800c1f8:	d102      	bne.n	800c200 <_nx_tcp_socket_state_data_check+0x248>
            {
                /* We hit the end of the receive queue. */
                search_ptr = NX_NULL;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	657b      	str	r3, [r7, #84]	; 0x54

                /* Terminate the out-of-order search.  */
                break;
 800c1fe:	e0ad      	b.n	800c35c <_nx_tcp_socket_state_data_check+0x3a4>
            }

            /* Setup a pointer to header of this packet in the receive list.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800c200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	61fb      	str	r3, [r7, #28]

            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;
 800c206:	69fb      	ldr	r3, [r7, #28]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	617b      	str	r3, [r7, #20]

            /* Calculate the header size for this packet.  */
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	0f1b      	lsrs	r3, r3, #28
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	62bb      	str	r3, [r7, #40]	; 0x28

            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 800c216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	441a      	add	r2, r3
 800c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c220:	1ad3      	subs	r3, r2, r3
 800c222:	63fb      	str	r3, [r7, #60]	; 0x3c
             *        In this configuration, the incoming packet is completely to the right of      *
             *        search_ptr.  Move to the next search packet.                                  *
             *                                                                                      *
             ****************************************************************************************/
            /* packet_ptr is to the right of search_ptr */
            if (((INT)(packet_begin_sequence - search_end_sequence)) >= 0)
 800c224:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	db05      	blt.n	800c23a <_nx_tcp_socket_state_data_check+0x282>
            {
                /* Move on to the next packet. */
                previous_ptr = search_ptr;
 800c22e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c230:	653b      	str	r3, [r7, #80]	; 0x50

                search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800c232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c234:	6a1b      	ldr	r3, [r3, #32]
 800c236:	657b      	str	r3, [r7, #84]	; 0x54

                /* Continue the search */
                continue;
 800c238:	e08a      	b.n	800c350 <_nx_tcp_socket_state_data_check+0x398>
             *              SSSSSSSSS                                                               *
             *        In this configuration, the incoming packet is completely to the left of       *
             *        search_ptr.  Incoming packet needs to be inserted in front of search ptr.     *
             *                                                                                      *
             ****************************************************************************************/
            if (((INT)(search_begin_sequence - packet_end_sequence)) >= 0)
 800c23a:	697a      	ldr	r2, [r7, #20]
 800c23c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c23e:	1ad3      	subs	r3, r2, r3
 800c240:	2b00      	cmp	r3, #0
 800c242:	f280 808a 	bge.w	800c35a <_nx_tcp_socket_state_data_check+0x3a2>
             *        to search for contigous data, therefore no need to wake up user thread.       *
             *        Howerver may need to send out ACK if new packet is to the right of the seq    *
             *        number.                                                                       *
             *                                                                                      *
             ****************************************************************************************/
            if ((((INT)(packet_begin_sequence - search_begin_sequence)) >= 0) &&
 800c246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	1ad3      	subs	r3, r2, r3
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	db0c      	blt.n	800c26a <_nx_tcp_socket_state_data_check+0x2b2>
                (((INT)(search_end_sequence - packet_end_sequence)) >= 0))
 800c250:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c254:	1ad3      	subs	r3, r2, r3
            if ((((INT)(packet_begin_sequence - search_begin_sequence)) >= 0) &&
 800c256:	2b00      	cmp	r3, #0
 800c258:	db07      	blt.n	800c26a <_nx_tcp_socket_state_data_check+0x2b2>
            {

                /* Send an immediate ACK.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c25e:	4619      	mov	r1, r3
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f7fe fbfd 	bl	800aa60 <_nx_tcp_packet_send_ack>

                /* Since packet is not queued, return NX_FALSE so the caller releases the packet. */
                return(NX_FALSE);
 800c266:	2300      	movs	r3, #0
 800c268:	e1d9      	b.n	800c61e <_nx_tcp_socket_state_data_check+0x666>
             *         Release existing packet, and insert new packet, then check for the next      *
             *         packet on the chain.  The next search may yield case (5).  Need to check     *
             *         for contingous data, may need to send ACK.                                   *
             *                                                                                      *
            ****************************************************************************************/
            if ((((INT)(search_begin_sequence - packet_begin_sequence)) >= 0) &&
 800c26a:	697a      	ldr	r2, [r7, #20]
 800c26c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c26e:	1ad3      	subs	r3, r2, r3
 800c270:	2b00      	cmp	r3, #0
 800c272:	db3a      	blt.n	800c2ea <_nx_tcp_socket_state_data_check+0x332>
                (((INT)(packet_end_sequence - search_end_sequence) >= 0)))
 800c274:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c278:	1ad3      	subs	r3, r2, r3
            if ((((INT)(search_begin_sequence - packet_begin_sequence)) >= 0) &&
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	db35      	blt.n	800c2ea <_nx_tcp_socket_state_data_check+0x332>
            {
            NX_PACKET *tmp_ptr;
                /* Release the search_ptr, and move to the next packet on the chain. */
                tmp_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800c27e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	613b      	str	r3, [r7, #16]

                /* Mark the packet as no longer being part of the TCP queue. */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 800c284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c286:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800c28a:	621a      	str	r2, [r3, #32]

                /* Decrease the packet queue count */
                socket_ptr -> nx_tcp_socket_receive_queue_count--;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c292:	1e5a      	subs	r2, r3, #1
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Adjust the receive window. */

                /* Release the search packet. */
                _nx_packet_release(search_ptr);
 800c29a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c29c:	f7fd f93c 	bl	8009518 <_nx_packet_release>

#ifndef NX_DISABLE_TCP_INFO
                /* The new packet has been admitted to the receive queue. */

                /* Increment the TCP packet receive count and bytes received count.  */
                ip_ptr -> nx_ip_tcp_packets_received--;
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c2a6:	1e5a      	subs	r2, r3, #1
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                ip_ptr -> nx_ip_tcp_bytes_received -= (search_end_sequence - search_begin_sequence);
 800c2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c2b4:	6979      	ldr	r1, [r7, #20]
 800c2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2b8:	1acb      	subs	r3, r1, r3
 800c2ba:	441a      	add	r2, r3
 800c2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2be:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

                /* Increment the TCP packet receive count and bytes received count for the socket.  */
                socket_ptr -> nx_tcp_socket_packets_received--;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2c8:	1e5a      	subs	r2, r3, #1
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                socket_ptr -> nx_tcp_socket_bytes_received -= (search_end_sequence - search_begin_sequence);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c2d6:	6979      	ldr	r1, [r7, #20]
 800c2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2da:	1acb      	subs	r3, r1, r3
 800c2dc:	441a      	add	r2, r3
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#endif /* NX_DISABLE_TCP_INFO */

                /* Move to the next packet.  (note: no need to update previous_ptr. */
                search_ptr = tmp_ptr;
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	657b      	str	r3, [r7, #84]	; 0x54

                /* Continue the search. */
                continue;
 800c2e8:	e032      	b.n	800c350 <_nx_tcp_socket_state_data_check+0x398>
             *                   SSSSSSSSSSSS                                                       *
             *        In this configuration, remove data from the back of the new packet,  insert   *
             *        packet into the chain, and terminate the search.  Need to search for          *
             *        contigous data, may need to send out ACK.                                     *
             ****************************************************************************************/
            if (((INT)(search_begin_sequence - packet_begin_sequence)) >= 0)
 800c2ea:	697a      	ldr	r2, [r7, #20]
 800c2ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	db0d      	blt.n	800c310 <_nx_tcp_socket_state_data_check+0x358>
            {

                _nx_tcp_socket_state_data_trim(packet_ptr, (packet_end_sequence - search_begin_sequence));
 800c2f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	6838      	ldr	r0, [r7, #0]
 800c2fe:	f7ff fd9b 	bl	800be38 <_nx_tcp_socket_state_data_trim>

                /* Update packet_data_length. */
                packet_data_length -= (packet_end_sequence - search_begin_sequence);
 800c302:	697a      	ldr	r2, [r7, #20]
 800c304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c306:	1ad3      	subs	r3, r2, r3
 800c308:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c30a:	4413      	add	r3, r2
 800c30c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Now the packet should be chained before search_ptr. */

                break;
 800c30e:	e025      	b.n	800c35c <_nx_tcp_socket_state_data_check+0x3a4>
             *        insert the packet after the search packet and continue the search.  This may  *
             *        lead to case (2) and (3).                                                     *
             *                                                                                      *
             *                                                                                      *
             ***************************************************************************************/
            _nx_tcp_socket_state_data_trim(search_ptr, (ULONG)(search_end_sequence - packet_begin_sequence));
 800c310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c314:	1ad3      	subs	r3, r2, r3
 800c316:	4619      	mov	r1, r3
 800c318:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c31a:	f7ff fd8d 	bl	800be38 <_nx_tcp_socket_state_data_trim>

#ifndef NX_DISABLE_TCP_INFO
            /* The new packet has been admitted to the receive queue. */

            /* Reduce the TCP bytes received count.  */
            ip_ptr -> nx_ip_tcp_bytes_received -= (search_end_sequence - packet_begin_sequence);
 800c31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c320:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c324:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c328:	1acb      	subs	r3, r1, r3
 800c32a:	441a      	add	r2, r3
 800c32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

            /* Reduce the TCP bytes received count for the socket.  */
            socket_ptr -> nx_tcp_socket_bytes_received -= (search_end_sequence - packet_begin_sequence);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c338:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c33c:	1acb      	subs	r3, r1, r3
 800c33e:	441a      	add	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#endif /* NX_DISABLE_TCP_INFO */

            /* Move to the next packet and continue; */
            previous_ptr = search_ptr;
 800c346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c348:	653b      	str	r3, [r7, #80]	; 0x50
            search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800c34a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c34c:	6a1b      	ldr	r3, [r3, #32]
 800c34e:	657b      	str	r3, [r7, #84]	; 0x54
        while (search_ptr)
 800c350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c352:	2b00      	cmp	r3, #0
 800c354:	f47f af4d 	bne.w	800c1f2 <_nx_tcp_socket_state_data_check+0x23a>
 800c358:	e000      	b.n	800c35c <_nx_tcp_socket_state_data_check+0x3a4>
                break;
 800c35a:	bf00      	nop
        }   /* End of while (search_ptr) */

        /* At this point, the logic (within the while loop) finds a location where this packet should be inserted. */
        if (previous_ptr == NX_NULL)
 800c35c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d104      	bne.n	800c36c <_nx_tcp_socket_state_data_check+0x3b4>
        {

            /* The packet needs to be inserted at the beginning of the queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = packet_ptr;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	683a      	ldr	r2, [r7, #0]
 800c366:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800c36a:	e002      	b.n	800c372 <_nx_tcp_socket_state_data_check+0x3ba>
        }
        else
        {

            /* The packet needs to be inserted after previous_ptr. */
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = packet_ptr;
 800c36c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c36e:	683a      	ldr	r2, [r7, #0]
 800c370:	621a      	str	r2, [r3, #32]
        }

        if (search_ptr == NX_NULL)
 800c372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10b      	bne.n	800c390 <_nx_tcp_socket_state_data_check+0x3d8>
        {

            /* This packet is on the last one on the queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_tail = packet_ptr;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	683a      	ldr	r2, [r7, #0]
 800c37c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Set the next pointer to indicate the packet is part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ENQUEUED;
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800c386:	621a      	str	r2, [r3, #32]
 800c388:	e005      	b.n	800c396 <_nx_tcp_socket_state_data_check+0x3de>
 800c38a:	bf00      	nop
 800c38c:	20008050 	.word	0x20008050
        }
        else
        {

            /* Chain search_ptr onto packet_ptr. */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = search_ptr;
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c394:	621a      	str	r2, [r3, #32]

        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

        /* Increment the receive TCP packet count.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count++;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c39c:	1c5a      	adds	r2, r3, #1
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* End of the out-of-order search.  At this point, the packet has been inserted. */

        /* Now we need to figure out how much, if any, we can ACK.  */
        search_ptr =    socket_ptr -> nx_tcp_socket_receive_queue_head;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c3aa:	657b      	str	r3, [r7, #84]	; 0x54

        /* Get the sequence number expected by the TCP receive socket. */
        expected_sequence =  socket_ptr -> nx_tcp_socket_rx_sequence;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b0:	64fb      	str	r3, [r7, #76]	; 0x4c
        do
        {

            /* Setup a pointer to header of this packet in the sent list.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 800c3b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	61fb      	str	r3, [r7, #28]


            /* Calculate the header size for this packet.  */
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	0f1b      	lsrs	r3, r3, #28
 800c3be:	009b      	lsls	r3, r3, #2
 800c3c0:	62bb      	str	r3, [r7, #40]	; 0x28

            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	617b      	str	r3, [r7, #20]

            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 800c3c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	441a      	add	r2, r3
 800c3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d2:	1ad3      	subs	r3, r2, r3
 800c3d4:	63fb      	str	r3, [r7, #60]	; 0x3c

            if ((INT)(expected_sequence - search_begin_sequence) >= 0)
 800c3d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	1ad3      	subs	r3, r2, r3
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	db1d      	blt.n	800c41c <_nx_tcp_socket_state_data_check+0x464>
            {

                if ((INT)(search_end_sequence - expected_sequence) > 0)
 800c3e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3e4:	1ad3      	subs	r3, r2, r3
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	dd0b      	ble.n	800c402 <_nx_tcp_socket_state_data_check+0x44a>
                {
                    /* Sequence number is within this packet.  Advance sequence number. */
                    expected_sequence = search_end_sequence;
 800c3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ec:	64fb      	str	r3, [r7, #76]	; 0x4c

                    socket_ptr -> nx_tcp_socket_rx_sequence = expected_sequence;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c3f2:	641a      	str	r2, [r3, #64]	; 0x40

                    acked_packets++;
 800c3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	63bb      	str	r3, [r7, #56]	; 0x38

                    /* Mark this packet as ready for retrieval.  */
                    /*lint -e{923} suppress cast of ULONG to pointer.  */
                    search_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 800c3fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3fc:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 800c400:	61da      	str	r2, [r3, #28]
                /* Expected number is to the left of search_ptr.   Get out of the do-while loop!  */
                break;
            }

            /* Move the search pointer to the next queued receive packet.  */
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800c402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c404:	6a1b      	ldr	r3, [r3, #32]
 800c406:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if we are at the end of the queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (search_ptr == ((NX_PACKET *)NX_PACKET_ENQUEUED))
 800c408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c40a:	f1b3 3fee 	cmp.w	r3, #4008636142	; 0xeeeeeeee
 800c40e:	d101      	bne.n	800c414 <_nx_tcp_socket_state_data_check+0x45c>
            {

                /* At the end, set the search pointer to NULL.  */
                search_ptr =  NX_NULL;
 800c410:	2300      	movs	r3, #0
 800c412:	657b      	str	r3, [r7, #84]	; 0x54

                /* Get out of the loop!  */
                break;
            }
#endif /* NX_ENABLE_LOW_WATERMARK */
        } while (search_ptr);
 800c414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c416:	2b00      	cmp	r3, #0
 800c418:	d1cb      	bne.n	800c3b2 <_nx_tcp_socket_state_data_check+0x3fa>
 800c41a:	e000      	b.n	800c41e <_nx_tcp_socket_state_data_check+0x466>
                break;
 800c41c:	bf00      	nop

#ifndef NX_DISABLE_TCP_INFO
    /* The new packet has been admitted to the receive queue. */

    /* Increment the TCP packet receive count and bytes received count.  */
    ip_ptr -> nx_ip_tcp_packets_received++;
 800c41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c420:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c424:	1c5a      	adds	r2, r3, #1
 800c426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c428:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    ip_ptr -> nx_ip_tcp_bytes_received += packet_data_length;
 800c42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c434:	441a      	add	r2, r3
 800c436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c438:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* Increment the TCP packet receive count and bytes received count for the socket.  */
    socket_ptr -> nx_tcp_socket_packets_received++;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c442:	1c5a      	adds	r2, r3, #1
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    socket_ptr -> nx_tcp_socket_bytes_received += packet_data_length;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c452:	441a      	add	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

    /* Check if the rx sequence number has been updated.  */
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c460:	429a      	cmp	r2, r3
 800c462:	d011      	beq.n	800c488 <_nx_tcp_socket_state_data_check+0x4d0>
    {

        /* Decrease the receive window size since rx_sequence is updated.  */
        socket_ptr -> nx_tcp_socket_rx_window_current -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c46c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c46e:	1acb      	subs	r3, r1, r3
 800c470:	441a      	add	r2, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	675a      	str	r2, [r3, #116]	; 0x74

        /* Update the rx_window_last_sent for SWS avoidance algorithm.
           RFC1122, Section4.2.3.3, Page97-98.  */
        socket_ptr -> nx_tcp_socket_rx_window_last_sent -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c47e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c480:	1acb      	subs	r3, r1, r3
 800c482:	441a      	add	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	679a      	str	r2, [r3, #120]	; 0x78
    }

#ifdef NX_TCP_MAX_OUT_OF_ORDER_PACKETS
    /* Does the count of out of order packets exceed the defined value? */
    if ((socket_ptr -> nx_tcp_socket_receive_queue_count - acked_packets) >
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800c48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	2b08      	cmp	r3, #8
 800c494:	f240 8089 	bls.w	800c5aa <_nx_tcp_socket_state_data_check+0x5f2>
        NX_TCP_MAX_OUT_OF_ORDER_PACKETS)
    {

        /* Yes it is. Remove the last packet in queue. */
        socket_ptr -> nx_tcp_socket_receive_queue_tail -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c49e:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800c4a2:	621a      	str	r2, [r3, #32]
        if (socket_ptr -> nx_tcp_socket_receive_queue_count > 1)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	d91d      	bls.n	800c4ea <_nx_tcp_socket_state_data_check+0x532>
        {

            /* Find the previous packet of tail. */
            search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_head;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c4b4:	657b      	str	r3, [r7, #84]	; 0x54
            while (search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != socket_ptr -> nx_tcp_socket_receive_queue_tail)
 800c4b6:	e002      	b.n	800c4be <_nx_tcp_socket_state_data_check+0x506>
            {
                search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800c4b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4ba:	6a1b      	ldr	r3, [r3, #32]
 800c4bc:	657b      	str	r3, [r7, #84]	; 0x54
            while (search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != socket_ptr -> nx_tcp_socket_receive_queue_tail)
 800c4be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4c0:	6a1a      	ldr	r2, [r3, #32]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d1f5      	bne.n	800c4b8 <_nx_tcp_socket_state_data_check+0x500>
            }

            /* Release the tail. */
            _nx_packet_release(socket_ptr -> nx_tcp_socket_receive_queue_tail);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7fd f820 	bl	8009518 <_nx_packet_release>

            /* Setup the tail packet. */
            socket_ptr -> nx_tcp_socket_receive_queue_tail = search_ptr;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c4dc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ENQUEUED;
 800c4e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4e2:	f04f 32ee 	mov.w	r2, #4008636142	; 0xeeeeeeee
 800c4e6:	621a      	str	r2, [r3, #32]
 800c4e8:	e00d      	b.n	800c506 <_nx_tcp_socket_state_data_check+0x54e>
        }
        else
        {

            /* Release the tail. */
            _nx_packet_release(socket_ptr -> nx_tcp_socket_receive_queue_tail);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7fd f811 	bl	8009518 <_nx_packet_release>

            /* Clear the head and tail packets. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = NX_NULL;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
            socket_ptr -> nx_tcp_socket_receive_queue_tail = NX_NULL;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        }

        /* Decrease receive queue count. */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c50c:	1e5a      	subs	r2, r3, #1
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    /* At this point, we can use the packet TCP header pointers since the received
       packet is already queued.  */

    /* Any packets for receiving? */
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list
 800c514:	e049      	b.n	800c5aa <_nx_tcp_socket_state_data_check+0x5f2>
#endif /* NX_ENABLE_HTTP_PROXY */
          )
    {

        /* Setup a pointer to the first queued packet.  */
        packet_ptr =  socket_ptr -> nx_tcp_socket_receive_queue_head;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c51c:	603b      	str	r3, [r7, #0]
        /* Remove it from the queue.  */

        /* Simply update the head pointer of the queue.  */
        socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	6a1a      	ldr	r2, [r3, #32]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* Mark the packet as no longer being part of the TCP queue.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800c52e:	621a      	str	r2, [r3, #32]

        /* Clear the queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	2200      	movs	r2, #0
 800c534:	61da      	str	r2, [r3, #28]

        /* Decrease the number of received packets.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c53c:	1e5a      	subs	r2, r3, #1
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Adjust the packet for delivery to the suspended thread.  */

        /* Setup a pointer to the TCP header of this packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Calculate the header size for this packet.  */
        header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 800c54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	0f1b      	lsrs	r3, r3, #28
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Adjust the packet prepend pointer and length to position past the TCP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + header_length;
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	689a      	ldr	r2, [r3, #8]
 800c558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55a:	441a      	add	r2, r3
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length =       packet_ptr -> nx_packet_length - header_length;
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c566:	1ad2      	subs	r2, r2, r3
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup a pointer to the first thread suspended on the receive queue.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_receive_suspension_list;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800c572:	60fb      	str	r3, [r7, #12]

        /* Place the packet pointer in the return pointer.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c578:	683a      	ldr	r2, [r7, #0]
 800c57a:	601a      	str	r2, [r3, #0]

        /* Increase the receive window size.  */
        socket_ptr -> nx_tcp_socket_rx_window_current += packet_ptr -> nx_packet_length;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c584:	441a      	add	r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	675a      	str	r2, [r3, #116]	; 0x74

        /* Remove the suspended thread from the list.  */

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c590:	1e5a      	subs	r2, r3, #1
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

        /* Decrement the acked_packets count. */
        acked_packets--;
 800c598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59a:	3b01      	subs	r3, #1
 800c59c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Resume thread.  */
        _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_receive_suspension_list), NX_SUCCESS);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	33ec      	adds	r3, #236	; 0xec
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f000 fafd 	bl	800cba4 <_nx_tcp_socket_thread_resume>
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list
 800c5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d004      	beq.n	800c5ba <_nx_tcp_socket_state_data_check+0x602>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d1ad      	bne.n	800c516 <_nx_tcp_socket_state_data_check+0x55e>
    }

    /* Is the queue empty?.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_count == 0)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d107      	bne.n	800c5d4 <_nx_tcp_socket_state_data_check+0x61c>
    {

        /* Yes. Set both head and tail pointers to NULL.  */
        socket_ptr -> nx_tcp_socket_receive_queue_head =  NX_NULL;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        socket_ptr -> nx_tcp_socket_receive_queue_tail =  NX_NULL;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    }

    /* Determine if an ACK should be forced out for window update, SWS avoidance algorithm.
       RFC1122, Section4.2.3.3, Page97-98. */
    if ((socket_ptr -> nx_tcp_socket_rx_window_current - socket_ptr -> nx_tcp_socket_rx_window_last_sent) >= (socket_ptr -> nx_tcp_socket_rx_window_default / 2))
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5dc:	1ad2      	subs	r2, r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5e2:	085b      	lsrs	r3, r3, #1
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d301      	bcc.n	800c5ec <_nx_tcp_socket_state_data_check+0x634>
    {

        /* Need to send ACK for window update.  */
        need_ack = NX_TRUE;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* If the incoming packet caused the sequence number to move forward,
       indicating the new piece of data is in order, in sequence, and valid for receiving. */
    if ((original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d009      	beq.n	800c60a <_nx_tcp_socket_state_data_check+0x652>
        if (socket_ptr -> nx_tcp_socket_http_proxy_state != NX_HTTP_PROXY_STATE_CONNECTING)
#endif /* NX_ENABLE_HTTP_PROXY */
        {

            /* Determine if there is a socket receive notification function specified.  */
            if (socket_ptr -> nx_tcp_receive_callback)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d004      	beq.n	800c60a <_nx_tcp_socket_state_data_check+0x652>
            {

                /* Yes, notification is requested.  Call the application's receive notification
                   function for this socket.  */
                (socket_ptr -> nx_tcp_receive_callback)(socket_ptr);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	4798      	blx	r3
            }
        }
#endif
    }

    if (need_ack == NX_TRUE)
 800c60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d105      	bne.n	800c61c <_nx_tcp_socket_state_data_check+0x664>
    {

        /* Need to send ACK.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c614:	4619      	mov	r1, r3
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f7fe fa22 	bl	800aa60 <_nx_tcp_packet_send_ack>
    }

    /* Return true since the packet was queued.  */
    return(NX_TRUE);
 800c61c:	2301      	movs	r3, #1
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3758      	adds	r7, #88	; 0x58
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop

0800c628 <_nx_tcp_socket_state_established>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_established(NX_TCP_SOCKET *socket_ptr)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
#if !defined(NX_DISABLE_TCP_INFO) || defined(TX_ENABLE_EVENT_TRACE)
NX_IP *ip_ptr;


    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c636:	60fb      	str	r3, [r7, #12]
#endif
    /* Determine if a FIN has been previously detected in the _nx_tcp_socket_state_data_check
       routine and if the socket's sequence number matches the expected FIN sequence number.  */
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d031      	beq.n	800c6a6 <_nx_tcp_socket_state_established+0x7e>
        (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d12b      	bne.n	800c6a6 <_nx_tcp_socket_state_established+0x7e>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP disconnections count.  */
        ip_ptr -> nx_ip_tcp_disconnections++;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c654:	1c5a      	adds	r2, r3, #1
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSE_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* The FIN bit is set, we need to go into the finished state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSE_WAIT;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2206      	movs	r2, #6
 800c660:	639a      	str	r2, [r3, #56]	; 0x38

        /* Increment the received sequence.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c666:	1c5a      	adds	r2, r3, #1
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Loop to release all threads suspended while trying to receive on the socket.  */
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800c66c:	e006      	b.n	800c67c <_nx_tcp_socket_state_established+0x54>
        {

            /* Release the head of the receive suspension list. */
            _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800c674:	2100      	movs	r1, #0
 800c676:	4618      	mov	r0, r3
 800c678:	f7fe fc48 	bl	800af0c <_nx_tcp_receive_cleanup>
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800c682:	2b00      	cmp	r3, #0
 800c684:	d1f3      	bne.n	800c66e <_nx_tcp_socket_state_established+0x46>
        }

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c68a:	4619      	mov	r1, r3
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f7fe f9e7 	bl	800aa60 <_nx_tcp_packet_send_ack>
#endif /* NX_ENABLE_HTTP_PROXY */
        {

            /* If given, call the application's disconnect callback function
               for disconnect.  */
            if (socket_ptr -> nx_tcp_disconnect_callback)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d004      	beq.n	800c6a6 <_nx_tcp_socket_state_established+0x7e>
            {

                /* Call the application's disconnect handling function.  It is
                   responsible for calling the socket disconnect function.  */
                (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	4798      	blx	r3
            }
        }
    }
}
 800c6a6:	bf00      	nop
 800c6a8:	3710      	adds	r7, #16
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
	...

0800c6b0 <_nx_tcp_socket_state_fin_wait1>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_fin_wait1(NX_TCP_SOCKET *socket_ptr)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]


    /* Determine if the peer has proper ACK number but FIN is not sent,
       move into the FIN WAIT 2 state and do nothing else.  */
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00c      	beq.n	800c6dc <_nx_tcp_socket_state_fin_wait1+0x2c>
        (socket_ptr -> nx_tcp_socket_fin_received == NX_FALSE))
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d107      	bne.n	800c6dc <_nx_tcp_socket_state_fin_wait1+0x2c>
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_FIN_WAIT_2, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* We have a legitimate ACK message.  Simply move into the WAIT FIN 2 state
           for the other side to finish its processing and disconnect.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_FIN_WAIT_2;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2208      	movs	r2, #8
 800c6d0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Otherwise, simply clear the FIN timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800c6da:	e04e      	b.n	800c77a <_nx_tcp_socket_state_fin_wait1+0xca>
    }
    else if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d02f      	beq.n	800c746 <_nx_tcp_socket_state_fin_wait1+0x96>
             (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    else if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d129      	bne.n	800c746 <_nx_tcp_socket_state_fin_wait1+0x96>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the socket state to TIMED WAIT now.  */
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	220a      	movs	r2, #10
 800c6f6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Set the timeout as 2MSL (Maximum Segment Lifetime). */
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 800c6f8:	4b22      	ldr	r3, [pc, #136]	; (800c784 <_nx_tcp_socket_state_fin_wait1+0xd4>)
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c706:	1c5a      	adds	r2, r3, #1
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c710:	4619      	mov	r1, r3
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f7fe f9a4 	bl	800aa60 <_nx_tcp_packet_send_ack>

        /* Determine if we need to wake a thread suspended on the connection.  */
        if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d006      	beq.n	800c730 <_nx_tcp_socket_state_fin_wait1+0x80>
        {

            /* Resume the thread suspended for the disconnect.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c728:	2100      	movs	r1, #0
 800c72a:	4618      	mov	r0, r3
 800c72c:	f000 fa3a 	bl	800cba4 <_nx_tcp_socket_thread_resume>
        }

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c736:	2b00      	cmp	r3, #0
 800c738:	d01f      	beq.n	800c77a <_nx_tcp_socket_state_fin_wait1+0xca>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	4798      	blx	r3
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800c744:	e019      	b.n	800c77a <_nx_tcp_socket_state_fin_wait1+0xca>
            /* Call the application's disconnect_complete callback function.    */
            (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
        }
#endif
    }
    else if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d014      	beq.n	800c77a <_nx_tcp_socket_state_fin_wait1+0xca>
             (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    else if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800c758:	429a      	cmp	r2, r3
 800c75a:	d10e      	bne.n	800c77a <_nx_tcp_socket_state_fin_wait1+0xca>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSING, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the CLOSING state for simultaneous close situation.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSING;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2209      	movs	r2, #9
 800c760:	639a      	str	r2, [r3, #56]	; 0x38

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c766:	1c5a      	adds	r2, r3, #1
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c770:	4619      	mov	r1, r3
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f7fe f974 	bl	800aa60 <_nx_tcp_packet_send_ack>
    }
}
 800c778:	e7ff      	b.n	800c77a <_nx_tcp_socket_state_fin_wait1+0xca>
 800c77a:	bf00      	nop
 800c77c:	3708      	adds	r7, #8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	20008058 	.word	0x20008058

0800c788 <_nx_tcp_socket_state_fin_wait2>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_fin_wait2(NX_TCP_SOCKET *socket_ptr)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]


    /* Determine if a FIN has been previously detected in the _nx_tcp_socket_state_data_check
       routine and if the socket's sequence number matches the expected FIN sequence number.  */
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c796:	2b00      	cmp	r3, #0
 800c798:	d02e      	beq.n	800c7f8 <_nx_tcp_socket_state_fin_wait2+0x70>
        (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d128      	bne.n	800c7f8 <_nx_tcp_socket_state_fin_wait2+0x70>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the socket state to TIMED WAIT now.  */
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	220a      	movs	r2, #10
 800c7aa:	639a      	str	r2, [r3, #56]	; 0x38

        /* Set the timeout as 2MSL (Maximum Segment Lifetime).  */
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 800c7ac:	4b14      	ldr	r3, [pc, #80]	; (800c800 <_nx_tcp_socket_state_fin_wait2+0x78>)
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ba:	1c5a      	adds	r2, r3, #1
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f7fe f94a 	bl	800aa60 <_nx_tcp_packet_send_ack>

        /* Determine if we need to wake a thread suspended on the connection.  */
        if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d006      	beq.n	800c7e4 <_nx_tcp_socket_state_fin_wait2+0x5c>
        {

            /* Resume the thread suspended for the disconnect.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c7dc:	2100      	movs	r1, #0
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f000 f9e0 	bl	800cba4 <_nx_tcp_socket_thread_resume>
        }

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d004      	beq.n	800c7f8 <_nx_tcp_socket_state_fin_wait2+0x70>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	4798      	blx	r3
            /* Call the application's disconnect_complete callback function.    */
            (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
        }
#endif
    }
}
 800c7f8:	bf00      	nop
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	20008058 	.word	0x20008058

0800c804 <_nx_tcp_socket_state_last_ack>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_last_ack(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]

    /* Determine if the incoming message is an ACK message.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c816:	2b00      	cmp	r3, #0
 800c818:	d01a      	beq.n	800c850 <_nx_tcp_socket_state_last_ack+0x4c>
    {

        /*   If it is proper, finish the disconnect. */
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	689a      	ldr	r2, [r3, #8]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c822:	429a      	cmp	r2, r3
 800c824:	d114      	bne.n	800c850 <_nx_tcp_socket_state_last_ack+0x4c>
            (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	685a      	ldr	r2, [r3, #4]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 800c82e:	429a      	cmp	r2, r3
 800c830:	d10e      	bne.n	800c850 <_nx_tcp_socket_state_last_ack+0x4c>
        {

            /* Cleanup the transmission control block.  */
            _nx_tcp_socket_block_cleanup(socket_ptr);
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f7fe fc12 	bl	800b05c <_nx_tcp_socket_block_cleanup>

            /* Determine if we need to wake a thread suspended on the disconnection.  */
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d006      	beq.n	800c850 <_nx_tcp_socket_state_last_ack+0x4c>
            {

                /* Resume suspended thread.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c848:	2100      	movs	r1, #0
 800c84a:	4618      	mov	r0, r3
 800c84c:	f000 f9aa 	bl	800cba4 <_nx_tcp_socket_thread_resume>
                (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
            }
#endif
        }
    }
}
 800c850:	bf00      	nop
 800c852:	3708      	adds	r7, #8
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <_nx_tcp_socket_state_syn_received>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_syn_received(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]


    /* Determine if the incoming message is an ACK message.  If it is and
       if it is proper, move into the ESTABLISHED state.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d04d      	beq.n	800c90a <_nx_tcp_socket_state_syn_received+0xb2>
    {

        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence)
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	689a      	ldr	r2, [r3, #8]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c876:	429a      	cmp	r2, r3
 800c878:	d143      	bne.n	800c902 <_nx_tcp_socket_state_syn_received+0xaa>
            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_ESTABLISHED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Save the window size.  */
            socket_ptr -> nx_tcp_socket_tx_window_advertised =
                tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	b29a      	uxth	r2, r3
            socket_ptr -> nx_tcp_socket_tx_window_advertised =
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	655a      	str	r2, [r3, #84]	; 0x54
            socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_snd_win_scale_value;

#endif /* NX_ENABLE_TCP_WINDOW_SCALING  */

            /* Set the initial slow start threshold to be the advertised window size. */
            socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Set the initial congestion control window size. */
            /* Section 3.1, Page 5, RFC5681. */
            if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c892:	2b00      	cmp	r3, #0
 800c894:	d004      	beq.n	800c8a0 <_nx_tcp_socket_state_syn_received+0x48>
            {

                /* Set the initial congestion control window size to be the mss. */
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6a1a      	ldr	r2, [r3, #32]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	659a      	str	r2, [r3, #88]	; 0x58
 800c89e:	e01d      	b.n	800c8dc <_nx_tcp_socket_state_syn_received+0x84>
            }
            else
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6a1b      	ldr	r3, [r3, #32]
 800c8a4:	009a      	lsls	r2, r3, #2
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	659a      	str	r2, [r3, #88]	; 0x58
                if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6a1b      	ldr	r3, [r3, #32]
 800c8ae:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
 800c8b2:	d306      	bcc.n	800c8c2 <_nx_tcp_socket_state_syn_received+0x6a>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6a1b      	ldr	r3, [r3, #32]
 800c8bc:	1ad2      	subs	r2, r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	659a      	str	r2, [r3, #88]	; 0x58
                }
                if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a1b      	ldr	r3, [r3, #32]
 800c8c6:	f640 028e 	movw	r2, #2190	; 0x88e
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d906      	bls.n	800c8dc <_nx_tcp_socket_state_syn_received+0x84>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6a1b      	ldr	r3, [r3, #32]
 800c8d6:	1ad2      	subs	r2, r2, r3
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	659a      	str	r2, [r3, #88]	; 0x58
                }
            }

            /* Move into the ESTABLISHED state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2205      	movs	r2, #5
 800c8e0:	639a      	str	r2, [r3, #56]	; 0x38
                socket_ptr -> nx_tcp_socket_keepalive_timeout =  NX_TCP_KEEPALIVE_INITIAL;
                socket_ptr -> nx_tcp_socket_keepalive_retries =  0;
            }
#endif
            /* Update the value of nx_tcp_socket_rx_sequence_acked */
            socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	645a      	str	r2, [r3, #68]	; 0x44

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00a      	beq.n	800c90a <_nx_tcp_socket_state_syn_received+0xb2>
            {

                /* Resume the suspended thread.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	33fc      	adds	r3, #252	; 0xfc
 800c8f8:	2100      	movs	r1, #0
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f000 f952 	bl	800cba4 <_nx_tcp_socket_thread_resume>

            /* Send the RST packet.  */
            _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
        }
    }
}
 800c900:	e003      	b.n	800c90a <_nx_tcp_socket_state_syn_received+0xb2>
            _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 800c902:	6839      	ldr	r1, [r7, #0]
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f7fe fa1b 	bl	800ad40 <_nx_tcp_packet_send_rst>
}
 800c90a:	bf00      	nop
 800c90c:	3708      	adds	r7, #8
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <_nx_tcp_socket_state_syn_sent>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_syn_sent(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr, NX_PACKET *packet_ptr)
{
 800c912:	b580      	push	{r7, lr}
 800c914:	b084      	sub	sp, #16
 800c916:	af00      	add	r7, sp, #0
 800c918:	60f8      	str	r0, [r7, #12]
 800c91a:	60b9      	str	r1, [r7, #8]
 800c91c:	607a      	str	r2, [r7, #4]
#ifndef TX_ENABLE_EVENT_TRACE
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* TX_ENABLE_EVENT_TRACE */

    /* Check if a RST is present. */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c926:	2b00      	cmp	r3, #0
 800c928:	d019      	beq.n	800c95e <_nx_tcp_socket_state_syn_sent+0x4c>
    {

        /* Check if the ACK was acceptable. According to RFC 793, Section 3.9, Page 67.  */
        if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c932:	2b00      	cmp	r3, #0
 800c934:	f000 80d2 	beq.w	800cadc <_nx_tcp_socket_state_syn_sent+0x1ca>
            (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence))
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	689a      	ldr	r2, [r3, #8]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
        if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800c940:	429a      	cmp	r2, r3
 800c942:	f040 80cb 	bne.w	800cadc <_nx_tcp_socket_state_syn_sent+0x1ca>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the resets received count.  */
            (socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_resets_received++;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c94c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800c950:	3201      	adds	r2, #1
 800c952:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RESET_RECEIVE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Reset connection.  */
            _nx_tcp_socket_connection_reset(socket_ptr);
 800c956:	68f8      	ldr	r0, [r7, #12]
 800c958:	f7fe fbad 	bl	800b0b6 <_nx_tcp_socket_connection_reset>
        }

        /* Finished processing, simply return!  */
        return;
 800c95c:	e0be      	b.n	800cadc <_nx_tcp_socket_state_syn_sent+0x1ca>
    }
    /* Determine if a valid SYN/ACK is present.  */
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c966:	2b00      	cmp	r3, #0
 800c968:	d05d      	beq.n	800ca26 <_nx_tcp_socket_state_syn_sent+0x114>
             (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	68db      	ldr	r3, [r3, #12]
 800c96e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 800c972:	2b00      	cmp	r3, #0
 800c974:	d057      	beq.n	800ca26 <_nx_tcp_socket_state_syn_sent+0x114>
             (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence))
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	689a      	ldr	r2, [r3, #8]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
             (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800c97e:	429a      	cmp	r2, r3
 800c980:	d151      	bne.n	800ca26 <_nx_tcp_socket_state_syn_sent+0x114>
        /* Yes, this is a proper SYN/ACK message.  We need to send an ACK
           back the other direction before we go into the ESTABLISHED
           state.  */

        /* Save the sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + 1;
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	1c5a      	adds	r2, r3, #1
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Save the window size.  */
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	b29a      	uxth	r2, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	655a      	str	r2, [r3, #84]	; 0x54
        }

#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

        /* Initialize the slow start threshold to be the advertised window size. */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the Initial transmit outstanding byte count. */
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set the initial congestion control window size. */
        /* Section 3.1, Page 5, RFC5681. */
        if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d004      	beq.n	800c9b8 <_nx_tcp_socket_state_syn_sent+0xa6>
        {

            /* Set the initial congestion control window size to be the mss. */
            socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6a1a      	ldr	r2, [r3, #32]
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	659a      	str	r2, [r3, #88]	; 0x58
 800c9b6:	e01d      	b.n	800c9f4 <_nx_tcp_socket_state_syn_sent+0xe2>
        }
        else
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	6a1b      	ldr	r3, [r3, #32]
 800c9bc:	009a      	lsls	r2, r3, #2
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	659a      	str	r2, [r3, #88]	; 0x58
            if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	6a1b      	ldr	r3, [r3, #32]
 800c9c6:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
 800c9ca:	d306      	bcc.n	800c9da <_nx_tcp_socket_state_syn_sent+0xc8>
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	6a1b      	ldr	r3, [r3, #32]
 800c9d4:	1ad2      	subs	r2, r2, r3
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	659a      	str	r2, [r3, #88]	; 0x58
            }
            if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	6a1b      	ldr	r3, [r3, #32]
 800c9de:	f640 028e 	movw	r2, #2190	; 0x88e
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d906      	bls.n	800c9f4 <_nx_tcp_socket_state_syn_sent+0xe2>
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	6a1b      	ldr	r3, [r3, #32]
 800c9ee:	1ad2      	subs	r2, r2, r3
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	659a      	str	r2, [r3, #88]	; 0x58
            }
        }

        /* Send the ACK.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	68f8      	ldr	r0, [r7, #12]
 800c9fc:	f7fe f830 	bl	800aa60 <_nx_tcp_packet_send_ack>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_ESTABLISHED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the ESTABLISHED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2205      	movs	r2, #5
 800ca04:	639a      	str	r2, [r3, #56]	; 0x38

        /* Clear the socket timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                (socket_ptr -> nx_tcp_establish_notify)(socket_ptr);
            }
#endif

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d062      	beq.n	800cade <_nx_tcp_socket_state_syn_sent+0x1cc>
            {

                /* Resume the suspended thread.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	33fc      	adds	r3, #252	; 0xfc
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f000 f8c0 	bl	800cba4 <_nx_tcp_socket_thread_resume>
            if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 800ca24:	e05b      	b.n	800cade <_nx_tcp_socket_state_syn_sent+0x1cc>
            }
        }
    }
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d043      	beq.n	800caba <_nx_tcp_socket_state_syn_sent+0x1a8>
             (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)))
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	68db      	ldr	r3, [r3, #12]
 800ca36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d13d      	bne.n	800caba <_nx_tcp_socket_state_syn_sent+0x1a8>

        /* Simultaneous Connection Synchronization,
           A SYN message was received.  We need to send both a SYN and ACK and move to the SYN RECEIVED state.  */

        /* Save the sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence =   tcp_header_ptr -> nx_tcp_sequence_number + 1;
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	1c5a      	adds	r2, r3, #1
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Save the window size.  */
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	b29a      	uxth	r2, r3
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
        socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_rcv_win_scale_value;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING  */

        /* Initialize the slow start threshold to be the advertised window size. */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the initial congestion control window size. */
        /* Section 3.1, Page 5, RFC5681. */
        socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6a1b      	ldr	r3, [r3, #32]
 800ca5e:	009a      	lsls	r2, r3, #2
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	659a      	str	r2, [r3, #88]	; 0x58
        if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	6a1b      	ldr	r3, [r3, #32]
 800ca68:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
 800ca6c:	d306      	bcc.n	800ca7c <_nx_tcp_socket_state_syn_sent+0x16a>
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	6a1b      	ldr	r3, [r3, #32]
 800ca76:	1ad2      	subs	r2, r2, r3
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	659a      	str	r2, [r3, #88]	; 0x58
        }
        if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6a1b      	ldr	r3, [r3, #32]
 800ca80:	f640 028e 	movw	r2, #2190	; 0x88e
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d906      	bls.n	800ca96 <_nx_tcp_socket_state_syn_sent+0x184>
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6a1b      	ldr	r3, [r3, #32]
 800ca90:	1ad2      	subs	r2, r2, r3
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the Initial transmit outstanding byte count. */
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_SYN_RECEIVED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the SYN RECEIVED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_SYN_RECEIVED;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2204      	movs	r2, #4
 800caa0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Clear the timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2200      	movs	r2, #0
 800caa6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Send the SYN packet.  */
        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caae:	3b01      	subs	r3, #1
 800cab0:	4619      	mov	r1, r3
 800cab2:	68f8      	ldr	r0, [r7, #12]
 800cab4:	f7fe f978 	bl	800ada8 <_nx_tcp_packet_send_syn>
 800cab8:	e011      	b.n	800cade <_nx_tcp_socket_state_syn_sent+0x1cc>
    }
    /* Check for an invalid response to an attempted connection.  */
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	68db      	ldr	r3, [r3, #12]
 800cabe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d00b      	beq.n	800cade <_nx_tcp_socket_state_syn_sent+0x1cc>
             (tcp_header_ptr -> nx_tcp_acknowledgment_number != socket_ptr -> nx_tcp_socket_tx_sequence))
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	689a      	ldr	r2, [r3, #8]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 800cace:	429a      	cmp	r2, r3
 800cad0:	d005      	beq.n	800cade <_nx_tcp_socket_state_syn_sent+0x1cc>
        /* Invalid response was received, it is likely that the other side still
           thinks a previous connection is active.  Send a reset (RST) message to
           the other side to clear any previous connection.  */

        /* Send the RST packet.  */
        _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 800cad2:	68b9      	ldr	r1, [r7, #8]
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f7fe f933 	bl	800ad40 <_nx_tcp_packet_send_rst>
 800cada:	e000      	b.n	800cade <_nx_tcp_socket_state_syn_sent+0x1cc>
        return;
 800cadc:	bf00      	nop
    }
}
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <_nx_tcp_socket_state_transmit_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_transmit_check(NX_TCP_SOCKET *socket_ptr)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]

ULONG tx_window_current;

    /* Now check to see if there is a thread suspended attempting to transmit.  */
    if (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d051      	beq.n	800cb9a <_nx_tcp_socket_state_transmit_check+0xb6>
        /* Yes, a thread is suspended attempting to transmit when the transmit window
           is lower than its request size.  Determine if the current transmit window
           size can now accommodate the request.  */

        /* Pick up the min(cwnd, swnd) */
        if (socket_ptr -> nx_tcp_socket_tx_window_advertised > socket_ptr -> nx_tcp_socket_tx_window_congestion)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d919      	bls.n	800cb36 <_nx_tcp_socket_state_transmit_check+0x52>
        {
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_congestion;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb06:	60fb      	str	r3, [r7, #12]

            /* On the first and second duplicate ACKs received, the total FlightSize would
               remain less than or equal to cwnd plus 2*SMSS.
               Section 3.2, Page 9, RFC5681. */
            if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received == 1) ||
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d003      	beq.n	800cb18 <_nx_tcp_socket_state_transmit_check+0x34>
                (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 2))
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
            if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received == 1) ||
 800cb14:	2b02      	cmp	r3, #2
 800cb16:	d105      	bne.n	800cb24 <_nx_tcp_socket_state_transmit_check+0x40>
            {
                tx_window_current += (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6a1b      	ldr	r3, [r3, #32]
 800cb1c:	005b      	lsls	r3, r3, #1
 800cb1e:	68fa      	ldr	r2, [r7, #12]
 800cb20:	4413      	add	r3, r2
 800cb22:	60fb      	str	r3, [r7, #12]
            }

            /* Make sure the tx_window_current is less or equal to swnd. */
            if (tx_window_current > socket_ptr -> nx_tcp_socket_tx_window_advertised)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d906      	bls.n	800cb3c <_nx_tcp_socket_state_transmit_check+0x58>
            {
                tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb32:	60fb      	str	r3, [r7, #12]
 800cb34:	e002      	b.n	800cb3c <_nx_tcp_socket_state_transmit_check+0x58>
            }
        }
        else
        {
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb3a:	60fb      	str	r3, [r7, #12]
        }

        /* Substract any data transmitted but unacked (outstanding bytes) */
        if (tx_window_current > socket_ptr -> nx_tcp_socket_tx_outstanding_bytes)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb40:	68fa      	ldr	r2, [r7, #12]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d905      	bls.n	800cb52 <_nx_tcp_socket_state_transmit_check+0x6e>
        {
            tx_window_current -= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb4a:	68fa      	ldr	r2, [r7, #12]
 800cb4c:	1ad3      	subs	r3, r2, r3
 800cb4e:	60fb      	str	r3, [r7, #12]
 800cb50:	e001      	b.n	800cb56 <_nx_tcp_socket_state_transmit_check+0x72>
        }
        else    /* Set tx_window_current to zero. */
        {
            tx_window_current = 0;
 800cb52:	2300      	movs	r3, #0
 800cb54:	60fb      	str	r3, [r7, #12]
        }


        /* Determine if the current transmit window (received from the connected socket)
           is large enough to handle the transmit.  */
        if ((tx_window_current) &&
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d01e      	beq.n	800cb9a <_nx_tcp_socket_state_transmit_check+0xb6>
            (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum))
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
        if ((tx_window_current) &&
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d216      	bcs.n	800cb9a <_nx_tcp_socket_state_transmit_check+0xb6>
        {

            /* Is NetX set up with a windows update callback? */
            if (socket_ptr -> nx_tcp_socket_window_update_notify)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d004      	beq.n	800cb80 <_nx_tcp_socket_state_transmit_check+0x9c>
            {

                /* Yes; Call this function when there is a change in transmit windows size. */
                (socket_ptr -> nx_tcp_socket_window_update_notify)(socket_ptr);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	4798      	blx	r3
            }


            /* Decrement the suspension count.  */
            socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800cb86:	1e5a      	subs	r2, r3, #1
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

            /* Remove the suspended thread from the list.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_transmit_suspension_list), NX_SUCCESS);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	33f4      	adds	r3, #244	; 0xf4
 800cb92:	2100      	movs	r1, #0
 800cb94:	4618      	mov	r0, r3
 800cb96:	f000 f805 	bl	800cba4 <_nx_tcp_socket_thread_resume>
        }
    }
}
 800cb9a:	bf00      	nop
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
	...

0800cba4 <_nx_tcp_socket_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_thread_resume(TX_THREAD **suspension_list_head, UINT status)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b088      	sub	sp, #32
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cbae:	f3ef 8310 	mrs	r3, PRIMASK
 800cbb2:	617b      	str	r3, [r7, #20]
    return(posture);
 800cbb4:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800cbb6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cbb8:	b672      	cpsid	i
    return(int_posture);
 800cbba:	693b      	ldr	r3, [r7, #16]

TX_THREAD *thread_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 800cbbc:	61fb      	str	r3, [r7, #28]

    /* Pickup the thread pointer.  */
    thread_ptr =  *suspension_list_head;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	61bb      	str	r3, [r7, #24]

    /* Determine if there still is a thread suspended.  */
    if (thread_ptr)
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d02c      	beq.n	800cc24 <_nx_tcp_socket_thread_resume+0x80>
    {

        /* Determine if there are anymore threads on the suspension list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbce:	69ba      	ldr	r2, [r7, #24]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d103      	bne.n	800cbdc <_nx_tcp_socket_thread_resume+0x38>
        {

            /* Only this thread is on the suspension list.  Simply set the
               list head to NULL to reflect an empty suspension list.  */
            *suspension_list_head =  TX_NULL;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	601a      	str	r2, [r3, #0]
 800cbda:	e00d      	b.n	800cbf8 <_nx_tcp_socket_thread_resume+0x54>
        {

            /* More than one thread is on the suspension list, we need to
               adjust the link pointers and move the next entry to the
               front of the list.  */
            *suspension_list_head =  thread_ptr -> tx_thread_suspended_next;
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	601a      	str	r2, [r3, #0]

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800cbe4:	69bb      	ldr	r3, [r7, #24]
 800cbe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800cbe8:	69ba      	ldr	r2, [r7, #24]
 800cbea:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800cbec:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800cbf2:	69ba      	ldr	r2, [r7, #24]
 800cbf4:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800cbf6:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Prepare for resumption of the thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800cbf8:	69bb      	ldr	r3, [r7, #24]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800cbfe:	4b0e      	ldr	r3, [pc, #56]	; (800cc38 <_nx_tcp_socket_thread_resume+0x94>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3301      	adds	r3, #1
 800cc04:	4a0c      	ldr	r2, [pc, #48]	; (800cc38 <_nx_tcp_socket_thread_resume+0x94>)
 800cc06:	6013      	str	r3, [r2, #0]
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f383 8810 	msr	PRIMASK, r3
}
 800cc12:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  status;
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	683a      	ldr	r2, [r7, #0]
 800cc18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800cc1c:	69b8      	ldr	r0, [r7, #24]
 800cc1e:	f003 fefd 	bl	8010a1c <_tx_thread_system_resume>
    {

        /* Nothing was suspended.  Simply restore interrupts.  */
        TX_RESTORE
    }
}
 800cc22:	e005      	b.n	800cc30 <_nx_tcp_socket_thread_resume+0x8c>
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	f383 8810 	msr	PRIMASK, r3
}
 800cc2e:	bf00      	nop
 800cc30:	bf00      	nop
 800cc32:	3720      	adds	r7, #32
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	2000812c 	.word	0x2000812c

0800cc3c <_nx_tcp_socket_transmit_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_transmit_queue_flush(NX_TCP_SOCKET *socket_ptr)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b08a      	sub	sp, #40	; 0x28
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800cc4a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear the head and the tail pointers.  */
    socket_ptr -> nx_tcp_socket_transmit_sent_head =  NX_NULL;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    socket_ptr -> nx_tcp_socket_transmit_sent_tail =  NX_NULL;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    /* Loop to clear all the packets out.  */
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 800cc5c:	e02c      	b.n	800ccb8 <_nx_tcp_socket_transmit_queue_flush+0x7c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc5e:	f3ef 8310 	mrs	r3, PRIMASK
 800cc62:	61bb      	str	r3, [r7, #24]
    return(posture);
 800cc64:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800cc66:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cc68:	b672      	cpsid	i
    return(int_posture);
 800cc6a:	697b      	ldr	r3, [r7, #20]
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800cc6c:	623b      	str	r3, [r7, #32]

        /* Pickup the next queued packet.  */
        next_packet_ptr =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 800cc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc70:	6a1b      	ldr	r3, [r3, #32]
 800cc72:	61fb      	str	r3, [r7, #28]

        /* Mark the packet as no longer being in a TCP queue.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800cc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc76:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800cc7a:	621a      	str	r2, [r3, #32]

        /* Has the packet been transmitted?  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_queue_next ==  ((NX_PACKET *)NX_DRIVER_TX_DONE))
 800cc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7e:	69db      	ldr	r3, [r3, #28]
 800cc80:	f1b3 3fdd 	cmp.w	r3, #3722304989	; 0xdddddddd
 800cc84:	d109      	bne.n	800cc9a <_nx_tcp_socket_transmit_queue_flush+0x5e>
 800cc86:	6a3b      	ldr	r3, [r7, #32]
 800cc88:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	f383 8810 	msr	PRIMASK, r3
}
 800cc90:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800cc92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc94:	f7fc fc40 	bl	8009518 <_nx_packet_release>
 800cc98:	e005      	b.n	800cca6 <_nx_tcp_socket_transmit_queue_flush+0x6a>
 800cc9a:	6a3b      	ldr	r3, [r7, #32]
 800cc9c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f383 8810 	msr	PRIMASK, r3
}
 800cca4:	bf00      	nop
            /* Just restore interrupts.  */
            TX_RESTORE
        }

        /* Move to the next packet.  */
        packet_ptr =  next_packet_ptr;
 800cca6:	69fb      	ldr	r3, [r7, #28]
 800cca8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Decrease the queued packet count.  */
        socket_ptr -> nx_tcp_socket_transmit_sent_count--;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ccb0:	1e5a      	subs	r2, r3, #1
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d1cd      	bne.n	800cc5e <_nx_tcp_socket_transmit_queue_flush+0x22>
    }
}
 800ccc2:	bf00      	nop
 800ccc4:	bf00      	nop
 800ccc6:	3728      	adds	r7, #40	; 0x28
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <_nx_tcp_transmit_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_transmit_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b08e      	sub	sp, #56	; 0x38
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ccd6:	f3ef 8310 	mrs	r3, PRIMASK
 800ccda:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800ccdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800ccde:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800cce0:	b672      	cpsid	i
    return(int_posture);
 800cce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
NX_IP         *ip_ptr;

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 800cce4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccea:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 800ccec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d004      	beq.n	800ccfc <_nx_tcp_transmit_cleanup+0x30>
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a49      	ldr	r2, [pc, #292]	; (800ce1c <_nx_tcp_transmit_cleanup+0x150>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d006      	beq.n	800cd0a <_nx_tcp_transmit_cleanup+0x3e>
 800ccfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccfe:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd00:	6a3b      	ldr	r3, [r7, #32]
 800cd02:	f383 8810 	msr	PRIMASK, r3
}
 800cd06:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800cd08:	e085      	b.n	800ce16 <_nx_tcp_transmit_cleanup+0x14a>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d106      	bne.n	800cd20 <_nx_tcp_transmit_cleanup+0x54>
 800cd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd14:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	f383 8810 	msr	PRIMASK, r3
}
 800cd1c:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 800cd1e:	e07a      	b.n	800ce16 <_nx_tcp_transmit_cleanup+0x14a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cd20:	f3ef 8305 	mrs	r3, IPSR
 800cd24:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800cd26:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 800cd28:	4b3d      	ldr	r3, [pc, #244]	; (800ce20 <_nx_tcp_transmit_cleanup+0x154>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d104      	bne.n	800cd3c <_nx_tcp_transmit_cleanup+0x70>
 800cd32:	4b3c      	ldr	r3, [pc, #240]	; (800ce24 <_nx_tcp_transmit_cleanup+0x158>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a3c      	ldr	r2, [pc, #240]	; (800ce28 <_nx_tcp_transmit_cleanup+0x15c>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d116      	bne.n	800cd6a <_nx_tcp_transmit_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	4a3b      	ldr	r2, [pc, #236]	; (800ce2c <_nx_tcp_transmit_cleanup+0x160>)
 800cd40:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 800cd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cd48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd4c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	f383 8810 	msr	PRIMASK, r3
}
 800cd54:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 800cd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd58:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cd62:	4618      	mov	r0, r3
 800cd64:	f002 fa94 	bl	800f290 <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 800cd68:	e055      	b.n	800ce16 <_nx_tcp_transmit_cleanup+0x14a>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d104      	bne.n	800cd84 <_nx_tcp_transmit_cleanup+0xb8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_suspension_list =  NX_NULL;
 800cd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800cd82:	e00e      	b.n	800cda2 <_nx_tcp_transmit_cleanup+0xd6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800cd96:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800cda0:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 800cda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800cda8:	1e5a      	subs	r2, r3, #1
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdac:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdb4:	2b0c      	cmp	r3, #12
 800cdb6:	d128      	bne.n	800ce0a <_nx_tcp_transmit_cleanup+0x13e>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Determine which transmit error is present.  */
            if (socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED)
 800cdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdbc:	2b05      	cmp	r3, #5
 800cdbe:	d004      	beq.n	800cdca <_nx_tcp_transmit_cleanup+0xfe>
            {

                /* This socket is no longer connected.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2238      	movs	r2, #56	; 0x38
 800cdc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800cdc8:	e010      	b.n	800cdec <_nx_tcp_transmit_cleanup+0x120>
            }
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum)
 800cdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdcc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800cdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d204      	bcs.n	800cde4 <_nx_tcp_transmit_cleanup+0x118>
            {

                /* Not a queue depth problem, return a window overflow error.  */
                thread_ptr -> tx_thread_suspend_status =  NX_WINDOW_OVERFLOW;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2239      	movs	r2, #57	; 0x39
 800cdde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800cde2:	e003      	b.n	800cdec <_nx_tcp_transmit_cleanup+0x120>
            }
            else
            {

                /* Return a transmit queue exceeded error.  */
                thread_ptr -> tx_thread_suspend_status =  NX_TX_QUEUE_DEPTH;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2249      	movs	r2, #73	; 0x49
 800cde8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            }

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800cdec:	4b10      	ldr	r3, [pc, #64]	; (800ce30 <_nx_tcp_transmit_cleanup+0x164>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	4a0f      	ldr	r2, [pc, #60]	; (800ce30 <_nx_tcp_transmit_cleanup+0x164>)
 800cdf4:	6013      	str	r3, [r2, #0]
 800cdf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	f383 8810 	msr	PRIMASK, r3
}
 800ce00:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume the thread!  */
            _tx_thread_system_resume(thread_ptr);
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f003 fe0a 	bl	8010a1c <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800ce08:	e005      	b.n	800ce16 <_nx_tcp_transmit_cleanup+0x14a>
 800ce0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce0c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	f383 8810 	msr	PRIMASK, r3
}
 800ce14:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800ce16:	3738      	adds	r7, #56	; 0x38
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	54435020 	.word	0x54435020
 800ce20:	20000088 	.word	0x20000088
 800ce24:	20008094 	.word	0x20008094
 800ce28:	200081dc 	.word	0x200081dc
 800ce2c:	080098bd 	.word	0x080098bd
 800ce30:	2000812c 	.word	0x2000812c

0800ce34 <_nx_udp_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b08a      	sub	sp, #40	; 0x28
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce42:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce44:	f3ef 8310 	mrs	r3, PRIMASK
 800ce48:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ce4a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ce4c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ce4e:	b672      	cpsid	i
    return(int_posture);
 800ce50:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 800ce52:	623b      	str	r3, [r7, #32]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d043      	beq.n	800cee4 <_nx_udp_bind_cleanup+0xb0>
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d040      	beq.n	800cee4 <_nx_udp_bind_cleanup+0xb0>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 800ce62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce64:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800ce66:	4a24      	ldr	r2, [pc, #144]	; (800cef8 <_nx_udp_bind_cleanup+0xc4>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d13b      	bne.n	800cee4 <_nx_udp_bind_cleanup+0xb0>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 800ce6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6e:	2200      	movs	r2, #0
 800ce70:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_udp_socket_bound_previous;
 800ce78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce7c:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d103      	bne.n	800ce90 <_nx_udp_bind_cleanup+0x5c>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	661a      	str	r2, [r3, #96]	; 0x60
 800ce8e:	e00d      	b.n	800ceac <_nx_udp_bind_cleanup+0x78>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800cea0:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800ceaa:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ceb0:	1e5a      	subs	r2, r3, #1
 800ceb2:	69fb      	ldr	r3, [r7, #28]
 800ceb4:	665a      	str	r2, [r3, #100]	; 0x64

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceba:	2b0c      	cmp	r3, #12
 800cebc:	d112      	bne.n	800cee4 <_nx_udp_bind_cleanup+0xb0>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2223      	movs	r2, #35	; 0x23
 800cec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800cec6:	4b0d      	ldr	r3, [pc, #52]	; (800cefc <_nx_udp_bind_cleanup+0xc8>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	3301      	adds	r3, #1
 800cecc:	4a0b      	ldr	r2, [pc, #44]	; (800cefc <_nx_udp_bind_cleanup+0xc8>)
 800cece:	6013      	str	r3, [r2, #0]
 800ced0:	6a3b      	ldr	r3, [r7, #32]
 800ced2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	f383 8810 	msr	PRIMASK, r3
}
 800ceda:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f003 fd9d 	bl	8010a1c <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800cee2:	e005      	b.n	800cef0 <_nx_udp_bind_cleanup+0xbc>
 800cee4:	6a3b      	ldr	r3, [r7, #32]
 800cee6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f383 8810 	msr	PRIMASK, r3
}
 800ceee:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800cef0:	3728      	adds	r7, #40	; 0x28
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	55445020 	.word	0x55445020
 800cefc:	2000812c 	.word	0x2000812c

0800cf00 <_nx_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_enable(NX_IP *ip_ptr)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b083      	sub	sp, #12
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Set the UDP packet receive function in the IP structure to indicate
       we are ready to receive UDP packets.  */
    ip_ptr -> nx_ip_udp_packet_receive =  _nx_udp_packet_receive;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	4a05      	ldr	r2, [pc, #20]	; (800cf20 <_nx_udp_enable+0x20>)
 800cf0c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800cf10:	2300      	movs	r3, #0
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	370c      	adds	r7, #12
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr
 800cf1e:	bf00      	nop
 800cf20:	0800cfcd 	.word	0x0800cfcd

0800cf24 <_nx_udp_free_port_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_free_port_find(NX_IP *ip_ptr, UINT port, UINT *free_port_ptr)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b08a      	sub	sp, #40	; 0x28
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_FREE_PORT_FIND, ip_ptr, port, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Save the original port.  */
    starting_port =  port;
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	61fb      	str	r3, [r7, #28]
    /* Loop through the UDP ports until a free entry is found.  */
    do
    {

        /* Calculate the hash index in the UDP port array of the associated IP instance.  */
        index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	0a1a      	lsrs	r2, r3, #8
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	4413      	add	r3, r2
 800cf3c:	f003 031f 	and.w	r3, r3, #31
 800cf40:	61bb      	str	r3, [r7, #24]

        /* Obtain the IP mutex so we can figure out whether or not the port has already
           been bound to.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800cf48:	f04f 31ff 	mov.w	r1, #4294967295
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f002 fd37 	bl	800f9c0 <_tx_mutex_get>

        /* Pickup the head of the UDP ports bound list.  */
        search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	69ba      	ldr	r2, [r7, #24]
 800cf56:	32e0      	adds	r2, #224	; 0xe0
 800cf58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf5c:	623b      	str	r3, [r7, #32]

        /* Set the bound flag to false.  */
        bound =  NX_FALSE;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if we need to perform a list search.  */
        if (search_ptr)
 800cf62:	6a3b      	ldr	r3, [r7, #32]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d010      	beq.n	800cf8a <_nx_udp_free_port_find+0x66>
        {

            /* Walk through the circular list of UDP sockets that are already
               bound.  */
            end_ptr =     search_ptr;
 800cf68:	6a3b      	ldr	r3, [r7, #32]
 800cf6a:	617b      	str	r3, [r7, #20]
            do
            {

                /* Determine if this entry is the same as the requested port.  */
                if (search_ptr -> nx_udp_socket_port == port)
 800cf6c:	6a3b      	ldr	r3, [r7, #32]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	68ba      	ldr	r2, [r7, #8]
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d102      	bne.n	800cf7c <_nx_udp_free_port_find+0x58>
                {

                    /* Set the bound flag.  */
                    bound =  NX_TRUE;
 800cf76:	2301      	movs	r3, #1
 800cf78:	627b      	str	r3, [r7, #36]	; 0x24

                    /* Get out of the loop.  */
                    break;
 800cf7a:	e006      	b.n	800cf8a <_nx_udp_free_port_find+0x66>
                }

                /* Move to the next entry in the list.  */
                search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 800cf7c:	6a3b      	ldr	r3, [r7, #32]
 800cf7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf80:	623b      	str	r3, [r7, #32]
            } while (search_ptr != end_ptr);
 800cf82:	6a3a      	ldr	r2, [r7, #32]
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d1f0      	bne.n	800cf6c <_nx_udp_free_port_find+0x48>
            }
        }
#endif

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800cf90:	4618      	mov	r0, r3
 800cf92:	f002 ff8d 	bl	800feb0 <_tx_mutex_put>

        /* Determine if the port is available.  */
        if (!bound)
 800cf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d104      	bne.n	800cfa6 <_nx_udp_free_port_find+0x82>
        {

            /* Setup the return port number.  */
            *free_port_ptr =  port;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	68ba      	ldr	r2, [r7, #8]
 800cfa0:	601a      	str	r2, [r3, #0]

            /* Update the trace event with the status.  */
            NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_FREE_PORT_FIND, 0, 0, port, 0);

            /* Return success.  */
            return(NX_SUCCESS);
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	e00e      	b.n	800cfc4 <_nx_udp_free_port_find+0xa0>
        }

        /* Move to the next port.  */
        port++;
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	60bb      	str	r3, [r7, #8]

        /* Determine if we need to wrap.  */
        if (port > NX_MAX_PORT)
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfb2:	d302      	bcc.n	800cfba <_nx_udp_free_port_find+0x96>
        {

            /* Yes, we need to wrap around.  */
            port =  NX_SEARCH_PORT_START;
 800cfb4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800cfb8:	60bb      	str	r3, [r7, #8]
        }
    } while (starting_port != port);
 800cfba:	69fa      	ldr	r2, [r7, #28]
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d1b8      	bne.n	800cf34 <_nx_udp_free_port_find+0x10>

    /* A free port was not found, return an error.  */
    return(NX_NO_FREE_PORTS);
 800cfc2:	2345      	movs	r3, #69	; 0x45
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3728      	adds	r7, #40	; 0x28
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <_nx_udp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b094      	sub	sp, #80	; 0x50
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_UDP_INFO

    /* Increment the total UDP receive packets count.  */
    ip_ptr -> nx_ip_udp_packets_received++;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfdc:	1c5a      	adds	r2, r3, #1
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_UDP_HEADER))
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe8:	2b07      	cmp	r3, #7
 800cfea:	d80a      	bhi.n	800d002 <_nx_udp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cff2:	1c5a      	adds	r2, r3, #1
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800cffa:	6838      	ldr	r0, [r7, #0]
 800cffc:	f7fc fa8c 	bl	8009518 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800d000:	e1d4      	b.n	800d3ac <_nx_udp_packet_receive+0x3e0>
    }
#endif

    /* Pickup the pointer to the head of the UDP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	689b      	ldr	r3, [r3, #8]
 800d006:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800d008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	ba1a      	rev	r2, r3
 800d00e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d010:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800d012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	ba1a      	rev	r2, r3
 800d018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d01a:	605a      	str	r2, [r3, #4]

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK))
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	0c1b      	lsrs	r3, r3, #16
 800d026:	429a      	cmp	r2, r3
 800d028:	d20a      	bcs.n	800d040 <_nx_udp_packet_receive+0x74>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d030:	1c5a      	adds	r2, r3, #1
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800d038:	6838      	ldr	r0, [r7, #0]
 800d03a:	f7fc fa6d 	bl	8009518 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800d03e:	e1b5      	b.n	800d3ac <_nx_udp_packet_receive+0x3e0>
    /* Recompute the packet length in case TFC padding is present. */
    packet_ptr -> nx_packet_length = (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK);
#endif /* NX_IPSEC_ENABLE */

    /* Pickup the destination UDP port.  */
    port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 800d040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	b29b      	uxth	r3, r3
 800d046:	647b      	str	r3, [r7, #68]	; 0x44

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800d048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d04a:	0a1a      	lsrs	r2, r3, #8
 800d04c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d04e:	4413      	add	r3, r2
 800d050:	f003 031f 	and.w	r3, r3, #31
 800d054:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if the caller is a thread. If so, we should use the protection mutex
       to avoid having the port list examined while we are traversing it. If this routine
       is called from an ISR nothing needs to be done since bind/unbind are not allowed
       from ISRs.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800d056:	4b8d      	ldr	r3, [pc, #564]	; (800d28c <_nx_udp_packet_receive+0x2c0>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d010      	beq.n	800d080 <_nx_udp_packet_receive+0xb4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d05e:	f3ef 8305 	mrs	r3, IPSR
 800d062:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800d064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d066:	4b8a      	ldr	r3, [pc, #552]	; (800d290 <_nx_udp_packet_receive+0x2c4>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4313      	orrs	r3, r2
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d107      	bne.n	800d080 <_nx_udp_packet_receive+0xb4>
    {

        /* Get mutex protection.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), NX_WAIT_FOREVER);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d076:	f04f 31ff 	mov.w	r1, #4294967295
 800d07a:	4618      	mov	r0, r3
 800d07c:	f002 fca0 	bl	800f9c0 <_tx_mutex_get>
    }

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d084:	32e0      	adds	r2, #224	; 0xe0
 800d086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d08a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Determine if there are any sockets bound on this port index.  */
    if (!socket_ptr)
 800d08c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d13e      	bne.n	800d110 <_nx_udp_packet_receive+0x144>
    {

#ifndef NX_DISABLE_IPV4
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d098:	2b04      	cmp	r3, #4
 800d09a:	d114      	bne.n	800d0c6 <_nx_udp_packet_receive+0xfa>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d00f      	beq.n	800d0c6 <_nx_udp_packet_receive+0xfa>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800d0a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	ba1a      	rev	r2, r3
 800d0ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0ae:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800d0b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	ba1a      	rev	r2, r3
 800d0b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0b8:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	4a75      	ldr	r2, [pc, #468]	; (800d294 <_nx_udp_packet_receive+0x2c8>)
 800d0be:	6839      	ldr	r1, [r7, #0]
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f7f9 fb91 	bl	80067e8 <_nx_icmpv4_send_error_message>
#endif /* FEATURE_NX_IPV6 */

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d0cc:	1c5a      	adds	r2, r3, #1
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d0da:	1c5a      	adds	r2, r3, #1
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

        /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
        if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800d0e2:	4b6a      	ldr	r3, [pc, #424]	; (800d28c <_nx_udp_packet_receive+0x2c0>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d00e      	beq.n	800d108 <_nx_udp_packet_receive+0x13c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d0ea:	f3ef 8305 	mrs	r3, IPSR
 800d0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800d0f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0f2:	4b67      	ldr	r3, [pc, #412]	; (800d290 <_nx_udp_packet_receive+0x2c4>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d105      	bne.n	800d108 <_nx_udp_packet_receive+0x13c>
        {

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d102:	4618      	mov	r0, r3
 800d104:	f002 fed4 	bl	800feb0 <_tx_mutex_put>
        }

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800d108:	6838      	ldr	r0, [r7, #0]
 800d10a:	f7fc fa05 	bl	8009518 <_nx_packet_release>

        /* Just return.  */
        return;
 800d10e:	e14d      	b.n	800d3ac <_nx_udp_packet_receive+0x3e0>
    /*  Loop to examine the list of bound ports on this index.  */
    do
    {

        /* Determine if the port has been found.  */
        if (socket_ptr -> nx_udp_socket_port == port)
 800d110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d116:	429a      	cmp	r2, r3
 800d118:	d119      	bne.n	800d14e <_nx_udp_packet_receive+0x182>
            /* Yes, we have a match.  */

#ifndef NX_DISABLE_UDP_INFO

            /* Increment the total number of packets received for this socket.  */
            socket_ptr -> nx_udp_socket_packets_received++;
 800d11a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d11c:	699b      	ldr	r3, [r3, #24]
 800d11e:	1c5a      	adds	r2, r3, #1
 800d120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d122:	619a      	str	r2, [r3, #24]

            /* Increment the total UDP receive bytes.  */
            ip_ptr -> nx_ip_udp_bytes_received +=          packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d12e:	4413      	add	r3, r2
 800d130:	f1a3 0208 	sub.w	r2, r3, #8
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            socket_ptr -> nx_udp_socket_bytes_received +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800d13a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d13c:	69da      	ldr	r2, [r3, #28]
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d142:	4413      	add	r3, r2
 800d144:	f1a3 0208 	sub.w	r2, r3, #8
 800d148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d14a:	61da      	str	r2, [r3, #28]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_RECEIVE, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Get out of the search loop.  */
            break;
 800d14c:	e00a      	b.n	800d164 <_nx_udp_packet_receive+0x198>
        }
        else
        {

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_udp_socket_bound_next;
 800d14e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d152:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
    } while (socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d158:	32e0      	adds	r2, #224	; 0xe0
 800d15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d15e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d160:	429a      	cmp	r2, r3
 800d162:	d1d5      	bne.n	800d110 <_nx_udp_packet_receive+0x144>

    /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800d164:	4b49      	ldr	r3, [pc, #292]	; (800d28c <_nx_udp_packet_receive+0x2c0>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00e      	beq.n	800d18a <_nx_udp_packet_receive+0x1be>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d16c:	f3ef 8305 	mrs	r3, IPSR
 800d170:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800d172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d174:	4b46      	ldr	r3, [pc, #280]	; (800d290 <_nx_udp_packet_receive+0x2c4>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4313      	orrs	r3, r2
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d105      	bne.n	800d18a <_nx_udp_packet_receive+0x1be>
    {

        /* Release mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d184:	4618      	mov	r0, r3
 800d186:	f002 fe93 	bl	800feb0 <_tx_mutex_put>
    }

    /* Determine if a match was found.  */
    if (socket_ptr -> nx_udp_socket_port != port)
 800d18a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d190:	429a      	cmp	r2, r3
 800d192:	d02b      	beq.n	800d1ec <_nx_udp_packet_receive+0x220>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d19a:	1c5a      	adds	r2, r3, #1
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d1a8:	1c5a      	adds	r2, r3, #1
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

#if !defined(NX_DISABLE_IPV4) && !defined(NX_DISABLE_ICMPV4_ERROR_MESSAGE)
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d1b6:	2b04      	cmp	r3, #4
 800d1b8:	d114      	bne.n	800d1e4 <_nx_udp_packet_receive+0x218>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00f      	beq.n	800d1e4 <_nx_udp_packet_receive+0x218>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800d1c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	ba1a      	rev	r2, r3
 800d1ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1cc:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800d1ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	ba1a      	rev	r2, r3
 800d1d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1d6:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 800d1d8:	2300      	movs	r3, #0
 800d1da:	4a2e      	ldr	r2, [pc, #184]	; (800d294 <_nx_udp_packet_receive+0x2c8>)
 800d1dc:	6839      	ldr	r1, [r7, #0]
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f7f9 fb02 	bl	80067e8 <_nx_icmpv4_send_error_message>
            }
        }
#endif /* FEATURE_NX_IPV6 && !NX_DISABLE_ICMPV6_ERROR_MESSAGE  */

        /* No socket structure bound to this port, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800d1e4:	6838      	ldr	r0, [r7, #0]
 800d1e6:	f7fc f997 	bl	8009518 <_nx_packet_release>
        return;
 800d1ea:	e0df      	b.n	800d3ac <_nx_udp_packet_receive+0x3e0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d1ec:	f3ef 8310 	mrs	r3, PRIMASK
 800d1f0:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800d1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800d1f4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d1f6:	b672      	cpsid	i
    return(int_posture);
 800d1f8:	6a3b      	ldr	r3, [r7, #32]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800d1fa:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the socket is still valid.  */
    if (socket_ptr -> nx_udp_socket_id != NX_UDP_ID)
 800d1fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a25      	ldr	r2, [pc, #148]	; (800d298 <_nx_udp_packet_receive+0x2cc>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d01c      	beq.n	800d240 <_nx_udp_packet_receive+0x274>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d20c:	1c5a      	adds	r2, r3, #1
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d21a:	1c5a      	adds	r2, r3, #1
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Increment the total UDP receive packets dropped count for this socket.  */
        socket_ptr -> nx_udp_socket_packets_dropped++;
 800d222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d226:	1c5a      	adds	r2, r3, #1
 800d228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d22a:	625a      	str	r2, [r3, #36]	; 0x24
 800d22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d22e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	f383 8810 	msr	PRIMASK, r3
}
 800d236:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800d238:	6838      	ldr	r0, [r7, #0]
 800d23a:	f7fc f96d 	bl	8009518 <_nx_packet_release>

        /* Return to caller.  */
        return;
 800d23e:	e0b5      	b.n	800d3ac <_nx_udp_packet_receive+0x3e0>
    }

    /* Pickup the receive notify function.  */
    receive_callback =  socket_ptr -> nx_udp_receive_callback;
 800d240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d244:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if we need to update the UDP port head pointer.  This should
       only be done if the found socket pointer is not the head pointer and
       the mutex for this IP instance is available.  */
    if ((socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]) && (!ip_ptr -> nx_ip_protection.tx_mutex_ownership_count))
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d24a:	32e0      	adds	r2, #224	; 0xe0
 800d24c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d250:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d252:	429a      	cmp	r2, r3
 800d254:	d00a      	beq.n	800d26c <_nx_udp_packet_receive+0x2a0>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d105      	bne.n	800d26c <_nx_udp_packet_receive+0x2a0>
    {

        /* Move the port head pointer to this socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d264:	32e0      	adds	r2, #224	; 0xe0
 800d266:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    /* Determine if there is thread waiting for a packet from this port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 800d26c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d26e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d270:	637b      	str	r3, [r7, #52]	; 0x34
    if (thread_ptr)
 800d272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d274:	2b00      	cmp	r3, #0
 800d276:	d03e      	beq.n	800d2f6 <_nx_udp_packet_receive+0x32a>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800d278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d27a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d27c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d27e:	429a      	cmp	r2, r3
 800d280:	d10c      	bne.n	800d29c <_nx_udp_packet_receive+0x2d0>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800d282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d284:	2200      	movs	r2, #0
 800d286:	659a      	str	r2, [r3, #88]	; 0x58
 800d288:	e016      	b.n	800d2b8 <_nx_udp_packet_receive+0x2ec>
 800d28a:	bf00      	nop
 800d28c:	20008094 	.word	0x20008094
 800d290:	20000088 	.word	0x20000088
 800d294:	03030000 	.word	0x03030000
 800d298:	55445020 	.word	0x55445020
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800d29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d29e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d2a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2a2:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800d2a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d2ac:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800d2b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2b4:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d2b6:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800d2b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2bc:	1e5a      	subs	r2, r3, #1
 800d2be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2c0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800d2c8:	4b3a      	ldr	r3, [pc, #232]	; (800d3b4 <_nx_udp_packet_receive+0x3e8>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	4a39      	ldr	r2, [pc, #228]	; (800d3b4 <_nx_udp_packet_receive+0x3e8>)
 800d2d0:	6013      	str	r3, [r2, #0]

        /* Return this block pointer to the suspended thread waiting for
           a block.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800d2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2d6:	683a      	ldr	r2, [r7, #0]
 800d2d8:	601a      	str	r2, [r3, #0]
 800d2da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2dc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d2de:	69bb      	ldr	r3, [r7, #24]
 800d2e0:	f383 8810 	msr	PRIMASK, r3
}
 800d2e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800d2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d2ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d2f0:	f003 fb94 	bl	8010a1c <_tx_thread_system_resume>
 800d2f4:	e054      	b.n	800d3a0 <_nx_udp_packet_receive+0x3d4>
            return;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Place the packet at the end of the socket's receive queue.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 800d2f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d03c      	beq.n	800d378 <_nx_udp_packet_receive+0x3ac>
        {

            /* Add the new packet to a nonempty list.  */
            (socket_ptr -> nx_udp_socket_receive_tail) -> nx_packet_queue_next =  packet_ptr;
 800d2fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d302:	683a      	ldr	r2, [r7, #0]
 800d304:	61da      	str	r2, [r3, #28]
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 800d306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d308:	683a      	ldr	r2, [r7, #0]
 800d30a:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	2200      	movs	r2, #0
 800d310:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 800d312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d316:	1c5a      	adds	r2, r3, #1
 800d318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d31a:	63da      	str	r2, [r3, #60]	; 0x3c

            /* Determine if the maximum queue depth has been reached.  */
            if (socket_ptr -> nx_udp_socket_receive_count >
 800d31c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d31e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                socket_ptr -> nx_udp_socket_queue_maximum)
 800d320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            if (socket_ptr -> nx_udp_socket_receive_count >
 800d324:	429a      	cmp	r2, r3
 800d326:	d921      	bls.n	800d36c <_nx_udp_packet_receive+0x3a0>
            {

                /* We have exceeded the queue depth, so remove the first item
                   in the queue (which is the oldest).  */
                packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800d328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d32a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d32c:	603b      	str	r3, [r7, #0]
                socket_ptr -> nx_udp_socket_receive_head =  packet_ptr -> nx_packet_queue_next;
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	69da      	ldr	r2, [r3, #28]
 800d332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d334:	645a      	str	r2, [r3, #68]	; 0x44

                /* Decrement the number of packets queued.  */
                socket_ptr -> nx_udp_socket_receive_count--;
 800d336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d33a:	1e5a      	subs	r2, r3, #1
 800d33c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d33e:	63da      	str	r2, [r3, #60]	; 0x3c

#ifndef NX_DISABLE_UDP_INFO

                /* Increment the total UDP receive packets dropped count.  */
                ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d346:	1c5a      	adds	r2, r3, #1
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                /* Increment the total UDP receive packets dropped count for this socket.  */
                socket_ptr -> nx_udp_socket_packets_dropped++;
 800d34e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d352:	1c5a      	adds	r2, r3, #1
 800d354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d356:	625a      	str	r2, [r3, #36]	; 0x24
 800d358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d35a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	f383 8810 	msr	PRIMASK, r3
}
 800d362:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 800d364:	6838      	ldr	r0, [r7, #0]
 800d366:	f7fc f8d7 	bl	8009518 <_nx_packet_release>
 800d36a:	e019      	b.n	800d3a0 <_nx_udp_packet_receive+0x3d4>
 800d36c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d36e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	f383 8810 	msr	PRIMASK, r3
}
 800d376:	e013      	b.n	800d3a0 <_nx_udp_packet_receive+0x3d4>
        }
        else
        {

            /* Add the new packet to an empty list.  */
            socket_ptr -> nx_udp_socket_receive_head =  packet_ptr;
 800d378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d37a:	683a      	ldr	r2, [r7, #0]
 800d37c:	645a      	str	r2, [r3, #68]	; 0x44
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 800d37e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d380:	683a      	ldr	r2, [r7, #0]
 800d382:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	2200      	movs	r2, #0
 800d388:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 800d38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d38e:	1c5a      	adds	r2, r3, #1
 800d390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d392:	63da      	str	r2, [r3, #60]	; 0x3c
 800d394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d396:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f383 8810 	msr	PRIMASK, r3
}
 800d39e:	bf00      	nop
        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_UDP_RECEIVE_QUEUE, __LINE__, packet_ptr);
    }

    /* Determine if there is a socket receive notification function specified.  */
    if (receive_callback)
 800d3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d002      	beq.n	800d3ac <_nx_udp_packet_receive+0x3e0>
    {

        /* Yes, notification is requested.  Call the application's receive notification
           function for this socket.  */
        (receive_callback)(socket_ptr);
 800d3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d3aa:	4798      	blx	r3
    }
}
 800d3ac:	3750      	adds	r7, #80	; 0x50
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	2000812c 	.word	0x2000812c

0800d3b8 <_nx_udp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b088      	sub	sp, #32
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3c6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d3c8:	f3ef 8310 	mrs	r3, PRIMASK
 800d3cc:	617b      	str	r3, [r7, #20]
    return(posture);
 800d3ce:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d3d0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d3d2:	b672      	cpsid	i
    return(int_posture);
 800d3d4:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 800d3d6:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d03d      	beq.n	800d45c <_nx_udp_receive_cleanup+0xa4>
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d03a      	beq.n	800d45c <_nx_udp_receive_cleanup+0xa4>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800d3ea:	4a21      	ldr	r2, [pc, #132]	; (800d470 <_nx_udp_receive_cleanup+0xb8>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d135      	bne.n	800d45c <_nx_udp_receive_cleanup+0xa4>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d103      	bne.n	800d408 <_nx_udp_receive_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	2200      	movs	r2, #0
 800d404:	659a      	str	r2, [r3, #88]	; 0x58
 800d406:	e00d      	b.n	800d424 <_nx_udp_receive_cleanup+0x6c>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d40c:	69fb      	ldr	r3, [r7, #28]
 800d40e:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d418:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d422:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800d424:	69fb      	ldr	r3, [r7, #28]
 800d426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d428:	1e5a      	subs	r2, r3, #1
 800d42a:	69fb      	ldr	r3, [r7, #28]
 800d42c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d432:	2b0c      	cmp	r3, #12
 800d434:	d112      	bne.n	800d45c <_nx_udp_receive_cleanup+0xa4>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2201      	movs	r2, #1
 800d43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d43e:	4b0d      	ldr	r3, [pc, #52]	; (800d474 <_nx_udp_receive_cleanup+0xbc>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	3301      	adds	r3, #1
 800d444:	4a0b      	ldr	r2, [pc, #44]	; (800d474 <_nx_udp_receive_cleanup+0xbc>)
 800d446:	6013      	str	r3, [r2, #0]
 800d448:	69bb      	ldr	r3, [r7, #24]
 800d44a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f383 8810 	msr	PRIMASK, r3
}
 800d452:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f003 fae1 	bl	8010a1c <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800d45a:	e005      	b.n	800d468 <_nx_udp_receive_cleanup+0xb0>
 800d45c:	69bb      	ldr	r3, [r7, #24]
 800d45e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	f383 8810 	msr	PRIMASK, r3
}
 800d466:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800d468:	3720      	adds	r7, #32
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	55445020 	.word	0x55445020
 800d474:	2000812c 	.word	0x2000812c

0800d478 <_nx_udp_socket_bind>:
/*                                            corrected the random value, */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b092      	sub	sp, #72	; 0x48
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
#endif /* NX_NAT_ENABLE */
NX_IP         *ip_ptr;
TX_THREAD     *thread_ptr;
NX_UDP_SOCKET *search_ptr;
NX_UDP_SOCKET *end_ptr;
UINT           status = NX_SUCCESS;
 800d484:	2300      	movs	r3, #0
 800d486:	643b      	str	r3, [r7, #64]	; 0x40


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_BIND, ip_ptr, socket_ptr, port, wait_option, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800d48e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d490:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d494:	f04f 31ff 	mov.w	r1, #4294967295
 800d498:	4618      	mov	r0, r3
 800d49a:	f002 fa91 	bl	800f9c0 <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d103      	bne.n	800d4ae <_nx_udp_socket_bind+0x36>
        (socket_ptr -> nx_udp_socket_bind_in_progress))
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d007      	beq.n	800d4be <_nx_udp_socket_bind+0x46>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4b0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f002 fcfb 	bl	800feb0 <_tx_mutex_put>

        /* Return an already bound error code.  */
        return(NX_ALREADY_BOUND);
 800d4ba:	2322      	movs	r3, #34	; 0x22
 800d4bc:	e0f4      	b.n	800d6a8 <_nx_udp_socket_bind+0x230>
    }

    /* Determine if the port needs to be allocated.  */
    if (port == NX_ANY_PORT)
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d119      	bne.n	800d4f8 <_nx_udp_socket_bind+0x80>
    {

        /* Call the find routine to allocate a UDP port.  */
        port = NX_SEARCH_PORT_START + (UINT)(((ULONG)NX_RAND()) % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 800d4c4:	f004 fc98 	bl	8011df8 <rand>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d4ce:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800d4d2:	60bb      	str	r3, [r7, #8]
        if (_nx_udp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	f107 0208 	add.w	r2, r7, #8
 800d4da:	4619      	mov	r1, r3
 800d4dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d4de:	f7ff fd21 	bl	800cf24 <_nx_udp_free_port_find>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d007      	beq.n	800d4f8 <_nx_udp_socket_bind+0x80>
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d4e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4ea:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f002 fcde 	bl	800feb0 <_tx_mutex_put>

            /* There was no free port, return an error code.  */
            return(NX_NO_FREE_PORTS);
 800d4f4:	2345      	movs	r3, #69	; 0x45
 800d4f6:	e0d7      	b.n	800d6a8 <_nx_udp_socket_bind+0x230>
        }
    }
#endif

    /* Save the port number in the UDP socket structure.  */
    socket_ptr -> nx_udp_socket_port =  port;
 800d4f8:	68ba      	ldr	r2, [r7, #8]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	609a      	str	r2, [r3, #8]

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	0a1a      	lsrs	r2, r3, #8
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	4413      	add	r3, r2
 800d506:	f003 031f 	and.w	r3, r3, #31
 800d50a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Pickup the head of the UDP ports bound list.  */
    search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800d50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d50e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d510:	32e0      	adds	r2, #224	; 0xe0
 800d512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d516:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if we need to perform a list search.  */
    if (search_ptr)
 800d518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00f      	beq.n	800d53e <_nx_udp_socket_bind+0xc6>
    {

        /* Walk through the circular list of UDP sockets that are already
           bound.  */
        end_ptr = search_ptr;
 800d51e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d520:	637b      	str	r3, [r7, #52]	; 0x34
        do
        {

            /* Determine if this entry is the same as the requested port.  */
            if (search_ptr -> nx_udp_socket_port == port)
 800d522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d524:	689a      	ldr	r2, [r3, #8]
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	429a      	cmp	r2, r3
 800d52a:	d007      	beq.n	800d53c <_nx_udp_socket_bind+0xc4>
                /* Yes, the port has already been allocated.  */
                break;
            }

            /* Move to the next entry in the list.  */
            search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 800d52c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d52e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d530:	647b      	str	r3, [r7, #68]	; 0x44
        } while (search_ptr != end_ptr);
 800d532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d536:	429a      	cmp	r2, r3
 800d538:	d1f3      	bne.n	800d522 <_nx_udp_socket_bind+0xaa>
 800d53a:	e000      	b.n	800d53e <_nx_udp_socket_bind+0xc6>
                break;
 800d53c:	bf00      	nop
    }

    /* Now determine if the port is available.  */
    if ((search_ptr == NX_NULL) || (search_ptr -> nx_udp_socket_port != port))
 800d53e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d540:	2b00      	cmp	r3, #0
 800d542:	d004      	beq.n	800d54e <_nx_udp_socket_bind+0xd6>
 800d544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d546:	689a      	ldr	r2, [r3, #8]
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d042      	beq.n	800d5d4 <_nx_udp_socket_bind+0x15c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d54e:	f3ef 8310 	mrs	r3, PRIMASK
 800d552:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d554:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800d556:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d558:	b672      	cpsid	i
    return(int_posture);
 800d55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {

        /* Place this UDP socket structure on the list of bound ports.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800d55c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if the list is NULL.  */
        if (search_ptr)
 800d55e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d560:	2b00      	cmp	r3, #0
 800d562:	d01e      	beq.n	800d5a2 <_nx_udp_socket_bind+0x12a>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            socket_ptr -> nx_udp_socket_bound_next =       ip_ptr -> nx_ip_udp_port_table[index];
 800d564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d568:	32e0      	adds	r2, #224	; 0xe0
 800d56a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =   (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 800d572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d576:	32e0      	adds	r2, #224	; 0xe0
 800d578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d57c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next = socket_ptr;
 800d582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d586:	32e0      	adds	r2, #224	; 0xe0
 800d588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d58c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d58e:	68fa      	ldr	r2, [r7, #12]
 800d590:	64da      	str	r2, [r3, #76]	; 0x4c
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   socket_ptr;
 800d592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d596:	32e0      	adds	r2, #224	; 0xe0
 800d598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d59c:	68fa      	ldr	r2, [r7, #12]
 800d59e:	651a      	str	r2, [r3, #80]	; 0x50
 800d5a0:	e00b      	b.n	800d5ba <_nx_udp_socket_bind+0x142>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            socket_ptr -> nx_udp_socket_bound_next =      socket_ptr;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	68fa      	ldr	r2, [r7, #12]
 800d5a6:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =  socket_ptr;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	68fa      	ldr	r2, [r7, #12]
 800d5ac:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =       socket_ptr;
 800d5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5b2:	32e0      	adds	r2, #224	; 0xe0
 800d5b4:	68f9      	ldr	r1, [r7, #12]
 800d5b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5bc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d5be:	6a3b      	ldr	r3, [r7, #32]
 800d5c0:	f383 8810 	msr	PRIMASK, r3
}
 800d5c4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d5c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5c8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f002 fc6f 	bl	800feb0 <_tx_mutex_put>
 800d5d2:	e068      	b.n	800d6a6 <_nx_udp_socket_bind+0x22e>
    }
    else if (wait_option)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d05d      	beq.n	800d696 <_nx_udp_socket_bind+0x21e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d5da:	f3ef 8310 	mrs	r3, PRIMASK
 800d5de:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d5e0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d5e2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d5e4:	b672      	cpsid	i
    return(int_posture);
 800d5e6:	69bb      	ldr	r3, [r7, #24]
    {

        /* Prepare for suspension of this thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800d5e8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Pickup thread pointer.  */
        thread_ptr =  _tx_thread_current_ptr;
 800d5ea:	4b31      	ldr	r3, [pc, #196]	; (800d6b0 <_nx_udp_socket_bind+0x238>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Setup cleanup routine pointer.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_bind_cleanup;
 800d5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f2:	4a30      	ldr	r2, [pc, #192]	; (800d6b4 <_nx_udp_socket_bind+0x23c>)
 800d5f4:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup cleanup information, i.e. this socket control
           block.  */
        thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 800d5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Also remember the socket that has bound to the port, since the thread
           is going to be suspended on that socket.  */
        socket_ptr -> nx_udp_socket_bound_previous =  search_ptr;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d600:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the socket bind in progress flag (thread pointer).  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  thread_ptr;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d606:	655a      	str	r2, [r3, #84]	; 0x54

        /* Setup suspension list.  */
        if (search_ptr -> nx_udp_socket_bind_suspension_list)
 800d608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d60a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d012      	beq.n	800d636 <_nx_udp_socket_bind+0x1be>
        {

            /* This list is not NULL, add current thread to the end. */
            thread_ptr -> tx_thread_suspended_next =       search_ptr -> nx_udp_socket_bind_suspension_list;
 800d610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d612:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d616:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =  (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous;
 800d618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d61a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d61c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d620:	675a      	str	r2, [r3, #116]	; 0x74
            ((search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =  thread_ptr;
 800d622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d62a:	671a      	str	r2, [r3, #112]	; 0x70
            (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800d62c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d62e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d632:	675a      	str	r2, [r3, #116]	; 0x74
 800d634:	e008      	b.n	800d648 <_nx_udp_socket_bind+0x1d0>
        else
        {

            /* No other threads are suspended.  Setup the head pointer and
               just setup this threads pointers to itself.  */
            search_ptr -> nx_udp_socket_bind_suspension_list =         thread_ptr;
 800d636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d63a:	661a      	str	r2, [r3, #96]	; 0x60
            thread_ptr -> tx_thread_suspended_next =                   thread_ptr;
 800d63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d640:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =               thread_ptr;
 800d642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d646:	675a      	str	r2, [r3, #116]	; 0x74
        }

        /* Increment the suspended thread count.  */
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 800d648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d64a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d64c:	1c5a      	adds	r2, r3, #1
 800d64e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d650:	665a      	str	r2, [r3, #100]	; 0x64

        /* Set the state to suspended.  */
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800d652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d654:	220c      	movs	r2, #12
 800d656:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65a:	2201      	movs	r2, #1
 800d65c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800d65e:	4b16      	ldr	r3, [pc, #88]	; (800d6b8 <_nx_udp_socket_bind+0x240>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	3301      	adds	r3, #1
 800d664:	4a14      	ldr	r2, [pc, #80]	; (800d6b8 <_nx_udp_socket_bind+0x240>)
 800d666:	6013      	str	r3, [r2, #0]

        /* Save the timeout value.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800d668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	64da      	str	r2, [r3, #76]	; 0x4c
 800d66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d670:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	f383 8810 	msr	PRIMASK, r3
}
 800d678:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d67c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d680:	4618      	mov	r0, r3
 800d682:	f002 fc15 	bl	800feb0 <_tx_mutex_put>

        /* Call actual thread suspension routine.  */
        _tx_thread_system_suspend(thread_ptr);
 800d686:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d688:	f003 fac8 	bl	8010c1c <_tx_thread_system_suspend>

        /* Return the completion status.  */
        status = thread_ptr -> tx_thread_suspend_status;
 800d68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d692:	643b      	str	r3, [r7, #64]	; 0x40
 800d694:	e007      	b.n	800d6a6 <_nx_udp_socket_bind+0x22e>
    }
    else
    {

        /* Release the IP protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d698:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d69c:	4618      	mov	r0, r3
 800d69e:	f002 fc07 	bl	800feb0 <_tx_mutex_put>

        /* Return the port unavailable error.  */
        status = NX_PORT_UNAVAILABLE;
 800d6a2:	2323      	movs	r3, #35	; 0x23
 800d6a4:	643b      	str	r3, [r7, #64]	; 0x40
        status = _nx_udp_socket_driver_bind(socket_ptr, port, wait_option);
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Return success to the caller.  */
    return(status);
 800d6a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3748      	adds	r7, #72	; 0x48
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	20008094 	.word	0x20008094
 800d6b4:	0800ce35 	.word	0x0800ce35
 800d6b8:	2000812c 	.word	0x2000812c

0800d6bc <_nx_udp_socket_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                            ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG queue_maximum)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b08a      	sub	sp, #40	; 0x28
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	607a      	str	r2, [r7, #4]
 800d6c8:	603b      	str	r3, [r7, #0]

NX_UDP_SOCKET *tail_ptr;


    /* Initialize the TCP control block to zero.  */
    memset((void *)socket_ptr, 0, sizeof(NX_UDP_SOCKET));
 800d6ca:	2278      	movs	r2, #120	; 0x78
 800d6cc:	2100      	movs	r1, #0
 800d6ce:	68b8      	ldr	r0, [r7, #8]
 800d6d0:	f004 fdf2 	bl	80122b8 <memset>

    /* Fill in the basic information in the new UDP socket structure.  */

    /* Remember the associated IP structure.  */
    socket_ptr -> nx_udp_socket_ip_ptr =  ip_ptr;
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	68fa      	ldr	r2, [r7, #12]
 800d6d8:	60da      	str	r2, [r3, #12]

    /* Save the UDP socket's name.  */
    socket_ptr -> nx_udp_socket_name =  name;
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	605a      	str	r2, [r3, #4]

    /* Save the type of service input parameter.  */
    socket_ptr -> nx_udp_socket_type_of_service =  type_of_service;
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	683a      	ldr	r2, [r7, #0]
 800d6e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Save the fragment input parameter.  */
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 800d6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Save the time-to-live input parameter.  */
    socket_ptr -> nx_udp_socket_time_to_live =  time_to_live;
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* By default, have UDP checksum logic enabled.  To disable checksum logic, the
       application must call the nx_udp_checksum disable function for this UDP socket.  */
    socket_ptr -> nx_udp_socket_disable_checksum =  NX_FALSE;
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Clear the socket bind in progress flag.  */
    socket_ptr -> nx_udp_socket_bind_in_progress =  NX_FALSE;
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	2200      	movs	r2, #0
 800d700:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set various list pointers to NULL.  */
    socket_ptr -> nx_udp_socket_bound_next =            NX_NULL;
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	2200      	movs	r2, #0
 800d706:	64da      	str	r2, [r3, #76]	; 0x4c
    socket_ptr -> nx_udp_socket_bound_previous =        NX_NULL;
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	2200      	movs	r2, #0
 800d70c:	651a      	str	r2, [r3, #80]	; 0x50
    socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	2200      	movs	r2, #0
 800d712:	661a      	str	r2, [r3, #96]	; 0x60
    socket_ptr -> nx_udp_socket_bind_suspended_count =  0;
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	2200      	movs	r2, #0
 800d718:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize the receive queue parameters.  */
    socket_ptr -> nx_udp_socket_receive_count =         0;
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	2200      	movs	r2, #0
 800d71e:	63da      	str	r2, [r3, #60]	; 0x3c
    socket_ptr -> nx_udp_socket_queue_maximum =         queue_maximum;
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d724:	641a      	str	r2, [r3, #64]	; 0x40
    socket_ptr -> nx_udp_socket_receive_head =          NX_NULL;
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	2200      	movs	r2, #0
 800d72a:	645a      	str	r2, [r3, #68]	; 0x44
    socket_ptr -> nx_udp_socket_receive_tail =          NX_NULL;
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	2200      	movs	r2, #0
 800d730:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =             NX_NULL;
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	2200      	movs	r2, #0
 800d736:	671a      	str	r2, [r3, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_CREATE, ip_ptr, socket_ptr, type_of_service, queue_maximum, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can add socket to IP structure.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d73e:	f04f 31ff 	mov.w	r1, #4294967295
 800d742:	4618      	mov	r0, r3
 800d744:	f002 f93c 	bl	800f9c0 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d748:	f3ef 8310 	mrs	r3, PRIMASK
 800d74c:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d74e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d750:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d752:	b672      	cpsid	i
    return(int_posture);
 800d754:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts while we link the new UDP socket to the IP structure.  */
    TX_DISABLE
 800d756:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the UDP ID field in the UDP control block.  */
    socket_ptr -> nx_udp_socket_id =  NX_UDP_ID;
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	4a1f      	ldr	r2, [pc, #124]	; (800d7d8 <_nx_udp_socket_create+0x11c>)
 800d75c:	601a      	str	r2, [r3, #0]

    /* Place the new UDP control block on the list of created UDP sockets for this IP.  First,
       check for an empty list.  */
    if (ip_ptr -> nx_ip_udp_created_sockets_ptr)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d764:	2b00      	cmp	r3, #0
 800d766:	d015      	beq.n	800d794 <_nx_udp_socket_create+0xd8>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d76e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d770:	623b      	str	r3, [r7, #32]

        /* Place the new UDP socket control block in the list.  */
        (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous =  socket_ptr;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d778:	68ba      	ldr	r2, [r7, #8]
 800d77a:	66da      	str	r2, [r3, #108]	; 0x6c
        tail_ptr ->  nx_udp_socket_created_next =  socket_ptr;
 800d77c:	6a3b      	ldr	r3, [r7, #32]
 800d77e:	68ba      	ldr	r2, [r7, #8]
 800d780:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup this UDP socket's created links.  */
        socket_ptr -> nx_udp_socket_created_previous =  tail_ptr;
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	6a3a      	ldr	r2, [r7, #32]
 800d786:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      ip_ptr -> nx_ip_udp_created_sockets_ptr;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	669a      	str	r2, [r3, #104]	; 0x68
 800d792:	e009      	b.n	800d7a8 <_nx_udp_socket_create+0xec>
    }
    else
    {

        /* The created UDP socket list is empty.  Add UDP socket control block to empty list.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =       socket_ptr;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	68ba      	ldr	r2, [r7, #8]
 800d798:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        socket_ptr -> nx_udp_socket_created_previous =  socket_ptr;
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	68ba      	ldr	r2, [r7, #8]
 800d7a0:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      socket_ptr;
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	68ba      	ldr	r2, [r7, #8]
 800d7a6:	669a      	str	r2, [r3, #104]	; 0x68
    }

    /* Increment the created UDP socket counter.  */
    ip_ptr -> nx_ip_udp_created_sockets_count++;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d7ae:	1c5a      	adds	r2, r3, #1
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800d7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	f383 8810 	msr	PRIMASK, r3
}
 800d7c0:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f002 fb71 	bl	800feb0 <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800d7ce:	2300      	movs	r3, #0
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3728      	adds	r7, #40	; 0x28
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	55445020 	.word	0x55445020

0800d7dc <_nx_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b09a      	sub	sp, #104	; 0x68
 800d7e0:	af02      	add	r7, sp, #8
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]
TX_INTERRUPT_SAVE_AREA

ULONG                 *temp_ptr;
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
NX_INTERFACE          *interface_ptr = NX_NULL;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT                   compute_checksum = 1;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	65bb      	str	r3, [r7, #88]	; 0x58

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d7f6:	f3ef 8310 	mrs	r3, PRIMASK
 800d7fa:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800d7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800d7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d800:	b672      	cpsid	i
    return(int_posture);
 800d802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /* Loop to retrieve a packet from the interface.  */
    for (;;)
    {

        /* Lockout interrupts.  */
        TX_DISABLE
 800d804:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the socket is currently bound.  */
        if (!socket_ptr ->  nx_udp_socket_bound_next)
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d107      	bne.n	800d81e <_nx_udp_socket_receive+0x42>
 800d80e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d810:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d814:	f383 8810 	msr	PRIMASK, r3
}
 800d818:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Socket is not bound, return an error message.  */
            return(NX_NOT_BOUND);
 800d81a:	2324      	movs	r3, #36	; 0x24
 800d81c:	e142      	b.n	800daa4 <_nx_udp_socket_receive+0x2c8>
        }

        /* Determine if there is a packet already queued up for this socket.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d822:	2b00      	cmp	r3, #0
 800d824:	d01a      	beq.n	800d85c <_nx_udp_socket_receive+0x80>
        {

            /* Yes, there is a packet waiting.  */

            /* Remove it and place it in the thread's destination.  */
            *packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	601a      	str	r2, [r3, #0]
            socket_ptr -> nx_udp_socket_receive_head =  (*packet_ptr) -> nx_packet_queue_next;
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	69da      	ldr	r2, [r3, #28]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	645a      	str	r2, [r3, #68]	; 0x44

            /* If this was the last packet, set the tail pointer to NULL.  */
            if (socket_ptr -> nx_udp_socket_receive_head == NX_NULL)
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d102      	bne.n	800d846 <_nx_udp_socket_receive+0x6a>
            {
                socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2200      	movs	r2, #0
 800d844:	649a      	str	r2, [r3, #72]	; 0x48
            }

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d84a:	1e5a      	subs	r2, r3, #1
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	63da      	str	r2, [r3, #60]	; 0x3c
 800d850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d852:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d856:	f383 8810 	msr	PRIMASK, r3
}
 800d85a:	e05e      	b.n	800d91a <_nx_udp_socket_receive+0x13e>
        }
        else
        {

            /* Determine if the request specifies suspension.  */
            if (wait_option)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d050      	beq.n	800d904 <_nx_udp_socket_receive+0x128>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup thread pointer.  */
                thread_ptr =  _tx_thread_current_ptr;
 800d862:	4b92      	ldr	r3, [pc, #584]	; (800daac <_nx_udp_socket_receive+0x2d0>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_receive_cleanup;
 800d868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d86a:	4a91      	ldr	r2, [pc, #580]	; (800dab0 <_nx_udp_socket_receive+0x2d4>)
 800d86c:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 800d86e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return packet pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 800d874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d876:	68ba      	ldr	r2, [r7, #8]
 800d878:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup suspension list.  */
                if (socket_ptr -> nx_udp_socket_receive_suspension_list)
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d012      	beq.n	800d8a8 <_nx_udp_socket_receive+0xcc>
                {

                    /* This list is not NULL, add current thread to the end. */
                    thread_ptr -> tx_thread_suspended_next =
                        socket_ptr -> nx_udp_socket_receive_suspension_list;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next =
 800d886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d888:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =
                        (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d88e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =
 800d890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d892:	675a      	str	r2, [r3, #116]	; 0x74
                    ((socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d89a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d89c:	671a      	str	r2, [r3, #112]	; 0x70
                        thread_ptr;
                    (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8a4:	675a      	str	r2, [r3, #116]	; 0x74
 800d8a6:	e008      	b.n	800d8ba <_nx_udp_socket_receive+0xde>
                else
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    socket_ptr -> nx_udp_socket_receive_suspension_list =   thread_ptr;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8ac:	659a      	str	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next              =   thread_ptr;
 800d8ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8b2:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous          =   thread_ptr;
 800d8b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8b8:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspended thread count.  */
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8be:	1c5a      	adds	r2, r3, #1
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	65da      	str	r2, [r3, #92]	; 0x5c

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800d8c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8c6:	220c      	movs	r2, #12
 800d8c8:	631a      	str	r2, [r3, #48]	; 0x30

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d8ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	639a      	str	r2, [r3, #56]	; 0x38

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800d8d0:	4b78      	ldr	r3, [pc, #480]	; (800dab4 <_nx_udp_socket_receive+0x2d8>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	4a77      	ldr	r2, [pc, #476]	; (800dab4 <_nx_udp_socket_receive+0x2d8>)
 800d8d8:	6013      	str	r3, [r2, #0]

                /* Save the timeout value.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800d8da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	64da      	str	r2, [r3, #76]	; 0x4c
 800d8e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8e2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8e4:	6a3b      	ldr	r3, [r7, #32]
 800d8e6:	f383 8810 	msr	PRIMASK, r3
}
 800d8ea:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800d8ec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d8ee:	f003 f995 	bl	8010c1c <_tx_thread_system_suspend>

                /* Determine if a packet was received successfully.  */
                if (thread_ptr -> tx_thread_suspend_status != NX_SUCCESS)
 800d8f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00e      	beq.n	800d91a <_nx_udp_socket_receive+0x13e>
                {

                    /* If not, just return the error code.  */
                    return(thread_ptr -> tx_thread_suspend_status);
 800d8fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d902:	e0cf      	b.n	800daa4 <_nx_udp_socket_receive+0x2c8>
 800d904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d906:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	f383 8810 	msr	PRIMASK, r3
}
 800d90e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Set the return pointer to NULL in case it was set but released due to checksum error.  */
                *packet_ptr =   NX_NULL;
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	2200      	movs	r2, #0
 800d914:	601a      	str	r2, [r3, #0]

                /* Immediate return, return error completion.  */
                return(NX_NO_PACKET);
 800d916:	2301      	movs	r3, #1
 800d918:	e0c4      	b.n	800daa4 <_nx_udp_socket_receive+0x2c8>
            }
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        /* Get the packet interface. */
#ifndef NX_DISABLE_IPV4
        if ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d922:	2b04      	cmp	r3, #4
 800d924:	d103      	bne.n	800d92e <_nx_udp_socket_receive+0x152>
        {
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_interface_ptr;
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d92c:	65fb      	str	r3, [r7, #92]	; 0x5c
        {
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
        }
#endif /* FEATURE_NX_IPV6 */

        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_RX_CHECKSUM)
 800d92e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d932:	f003 0320 	and.w	r3, r3, #32
 800d936:	2b00      	cmp	r3, #0
 800d938:	d001      	beq.n	800d93e <_nx_udp_socket_receive+0x162>
        {
            compute_checksum = 0;
 800d93a:	2300      	movs	r3, #0
 800d93c:	65bb      	str	r3, [r7, #88]	; 0x58
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 800d93e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d940:	2b00      	cmp	r3, #0
 800d942:	f000 809d 	beq.w	800da80 <_nx_udp_socket_receive+0x2a4>

            /* Determine if we need to compute the UDP checksum.  If it is disabled for this socket
               or if the UDP packet has a zero in the checksum field (indicating it was not computed
               by the sender, skip the checksum processing.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            temp_ptr =  (ULONG *)(*packet_ptr) -> nx_packet_prepend_ptr;
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	689b      	ldr	r3, [r3, #8]
 800d94c:	647b      	str	r3, [r7, #68]	; 0x44
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d952:	2b00      	cmp	r3, #0
 800d954:	d105      	bne.n	800d962 <_nx_udp_socket_receive+0x186>
 800d956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d958:	3304      	adds	r3, #4
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d106      	bne.n	800d970 <_nx_udp_socket_receive+0x194>
                ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V6))                               /* It is IPv6 packet */
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 800d96a:	2b06      	cmp	r3, #6
 800d96c:	f040 808b 	bne.w	800da86 <_nx_udp_socket_receive+0x2aa>
            {
            ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 800d970:	2300      	movs	r3, #0
 800d972:	657b      	str	r3, [r7, #84]	; 0x54
 800d974:	2300      	movs	r3, #0
 800d976:	653b      	str	r3, [r7, #80]	; 0x50
            ULONG          checksum;
            NX_PACKET     *current_ptr = *packet_ptr;
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	643b      	str	r3, [r7, #64]	; 0x40
#ifdef NX_LITTLE_ENDIAN
            NX_UDP_HEADER *udp_header_ptr;

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(current_ptr -> nx_packet_prepend_ptr);
 800d97e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d980:	689b      	ldr	r3, [r3, #8]
 800d982:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* NX_LITTLE_ENDIAN */

#ifndef NX_DISABLE_IPV4
                if (current_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800d984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d986:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d98a:	2b04      	cmp	r3, #4
 800d98c:	d108      	bne.n	800d9a0 <_nx_udp_socket_receive+0x1c4>
                {
                NX_IPV4_HEADER *ipv4_header;

                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    ipv4_header = (NX_IPV4_HEADER *)(current_ptr -> nx_packet_ip_header);
 800d98e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d992:	63bb      	str	r3, [r7, #56]	; 0x38
                    ip_src_addr = &(ipv4_header -> nx_ip_header_source_ip);
 800d994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d996:	330c      	adds	r3, #12
 800d998:	657b      	str	r3, [r7, #84]	; 0x54
                    ip_dest_addr = &(ipv4_header -> nx_ip_header_destination_ip);
 800d99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d99c:	3310      	adds	r3, #16
 800d99e:	653b      	str	r3, [r7, #80]	; 0x50

#endif /* FEATURE_NX_IPV6 */

#ifdef NX_LITTLE_ENDIAN
                /* Restore UDP header to network byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800d9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	ba1a      	rev	r2, r3
 800d9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9a8:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800d9aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ac:	685b      	ldr	r3, [r3, #4]
 800d9ae:	ba1a      	rev	r2, r3
 800d9b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9b2:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* nx_ip_checksum_compute takes care of both even number length and odd number length */
                /* Compute the checksum of the first packet */
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
                                                   (UINT)current_ptr -> nx_packet_length,
 800d9b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
 800d9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9ba:	9300      	str	r3, [sp, #0]
 800d9bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9be:	2111      	movs	r1, #17
 800d9c0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d9c2:	f7f9 f8ae 	bl	8006b22 <_nx_ip_checksum_compute>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	637b      	str	r3, [r7, #52]	; 0x34
                                                   ip_src_addr,
                                                   ip_dest_addr);

#ifdef NX_LITTLE_ENDIAN
                /* Convert UDP header to host byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800d9ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	ba1a      	rev	r2, r3
 800d9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9d2:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800d9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	ba1a      	rev	r2, r3
 800d9da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9dc:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* Perform the one's complement processing on the checksum.  */
                checksum =  NX_LOWER_16_MASK & ~checksum;
 800d9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9e0:	43db      	mvns	r3, r3
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	637b      	str	r3, [r7, #52]	; 0x34

                /* Determine if it is valid.  */
                if (checksum == 0)
 800d9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d04b      	beq.n	800da84 <_nx_udp_socket_receive+0x2a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d9ec:	f3ef 8310 	mrs	r3, PRIMASK
 800d9f0:	617b      	str	r3, [r7, #20]
    return(posture);
 800d9f2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d9f4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d9f6:	b672      	cpsid	i
    return(int_posture);
 800d9f8:	693b      	ldr	r3, [r7, #16]
                {

#ifndef NX_DISABLE_UDP_INFO

                    /* Disable interrupts.  */
                    TX_DISABLE
 800d9fa:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Increment the UDP checksum error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_checksum_errors++;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	68db      	ldr	r3, [r3, #12]
 800da00:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800da04:	3201      	adds	r2, #1
 800da06:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

                    /* Increment the UDP invalid packets error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800da12:	3201      	adds	r2, #1
 800da14:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                    /* Increment the UDP checksum error count for this socket.  */
                    socket_ptr -> nx_udp_socket_checksum_errors++;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da1c:	1c5a      	adds	r2, r3, #1
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Decrement the total UDP receive packets count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packets_received--;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	68db      	ldr	r3, [r3, #12]
 800da26:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800da2a:	3a01      	subs	r2, #1
 800da2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

                    /* Decrement the total UDP receive bytes.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	68db      	ldr	r3, [r3, #12]
 800da34:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da3e:	1ad2      	subs	r2, r2, r3
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	3208      	adds	r2, #8
 800da46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

                    /* Decrement the total UDP receive packets count.  */
                    socket_ptr -> nx_udp_socket_packets_received--;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	699b      	ldr	r3, [r3, #24]
 800da4e:	1e5a      	subs	r2, r3, #1
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	619a      	str	r2, [r3, #24]

                    /* Decrement the total UDP receive bytes.  */
                    socket_ptr -> nx_udp_socket_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	69da      	ldr	r2, [r3, #28]
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5e:	1ad3      	subs	r3, r2, r3
 800da60:	f103 0208 	add.w	r2, r3, #8
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	61da      	str	r2, [r3, #28]
 800da68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da6a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	f383 8810 	msr	PRIMASK, r3
}
 800da72:	bf00      	nop
                    /* Restore interrupts.  */
                    TX_RESTORE
#endif

                    /* Bad UDP checksum.  Release the packet. */
                    _nx_packet_release(*packet_ptr);
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4618      	mov	r0, r3
 800da7a:	f7fb fd4d 	bl	8009518 <_nx_packet_release>
        TX_DISABLE
 800da7e:	e6ba      	b.n	800d7f6 <_nx_udp_socket_receive+0x1a>
#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        else
        {

            /* Simply break - checksum logic is conditionally disabled.  */
            break;
 800da80:	bf00      	nop
 800da82:	e000      	b.n	800da86 <_nx_udp_socket_receive+0x2aa>
                    break;
 800da84:	bf00      	nop
    /* At this point, we have a valid UDP packet for the caller.  */

    /* Remove the UDP header.  */

    /* Decrease the packet length.  */
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	3a08      	subs	r2, #8
 800da92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Position past the UDP header pointer.  */
    (*packet_ptr) -> nx_packet_prepend_ptr =   (*packet_ptr) -> nx_packet_prepend_ptr + sizeof(NX_UDP_HEADER);
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	689a      	ldr	r2, [r3, #8]
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	3208      	adds	r2, #8
 800daa0:	609a      	str	r2, [r3, #8]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_SOCKET_RECEIVE, 0, 0, *packet_ptr, (*packet_ptr) -> nx_packet_length);

    /* Return a successful status to the caller.  */
    return(NX_SUCCESS);
 800daa2:	2300      	movs	r3, #0
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3760      	adds	r7, #96	; 0x60
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	20008094 	.word	0x20008094
 800dab0:	0800d3b9 	.word	0x0800d3b9
 800dab4:	2000812c 	.word	0x2000812c

0800dab8 <_nx_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                          ULONG ip_address, UINT port)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b088      	sub	sp, #32
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	607a      	str	r2, [r7, #4]
 800dac4:	603b      	str	r3, [r7, #0]
UINT        status;

NXD_ADDRESS dual_ip_address;

    /* build up the IP Address structure. */
    dual_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
 800dac6:	2304      	movs	r3, #4
 800dac8:	617b      	str	r3, [r7, #20]
    dual_ip_address.nxd_ip_address.v4 = ip_address;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	61bb      	str	r3, [r7, #24]

    /* Call the actual udp socket send routine. */
    status = _nxd_udp_socket_send(socket_ptr, packet_ptr, &dual_ip_address, port);
 800dace:	f107 0214 	add.w	r2, r7, #20
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	68b9      	ldr	r1, [r7, #8]
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	f000 f823 	bl	800db22 <_nxd_udp_socket_send>
 800dadc:	61f8      	str	r0, [r7, #28]

    return(status);
 800dade:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3720      	adds	r7, #32
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <_nx_udp_source_extract>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_source_extract(NX_PACKET *packet_ptr, ULONG *ip_address, UINT *port)
{
 800dae8:	b480      	push	{r7}
 800daea:	b087      	sub	sp, #28
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	607a      	str	r2, [r7, #4]
ULONG          *temp_ptr;
NX_IPV4_HEADER *ipv4_header;

    /* Build an address to the current top of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    temp_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	689b      	ldr	r3, [r3, #8]
 800daf8:	617b      	str	r3, [r7, #20]

    /* Pickup the source port.  */
    *port =  (UINT)(*(temp_ptr - 2) >> NX_SHIFT_BY_16);
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	3b08      	subs	r3, #8
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	0c1a      	lsrs	r2, r3, #16
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	601a      	str	r2, [r3, #0]

    /* Obtain the IPv4 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db0a:	613b      	str	r3, [r7, #16]

    /* Pickup the source IP address.  */
    *ip_address =  ipv4_header -> nx_ip_header_source_ip;
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	68da      	ldr	r2, [r3, #12]
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	601a      	str	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOURCE_EXTRACT, packet_ptr, *ip_address, *port, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    return(NX_SUCCESS);
 800db14:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800db16:	4618      	mov	r0, r3
 800db18:	371c      	adds	r7, #28
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr

0800db22 <_nxd_udp_socket_send>:
/**************************************************************************/
UINT  _nxd_udp_socket_send(NX_UDP_SOCKET *socket_ptr,
                           NX_PACKET     *packet_ptr,
                           NXD_ADDRESS   *ip_address,
                           UINT           port)
{
 800db22:	b590      	push	{r4, r7, lr}
 800db24:	b097      	sub	sp, #92	; 0x5c
 800db26:	af04      	add	r7, sp, #16
 800db28:	60f8      	str	r0, [r7, #12]
 800db2a:	60b9      	str	r1, [r7, #8]
 800db2c:	607a      	str	r2, [r7, #4]
 800db2e:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

NX_IP         *ip_ptr;
NX_UDP_HEADER *udp_header_ptr;
ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 800db30:	2300      	movs	r3, #0
 800db32:	647b      	str	r3, [r7, #68]	; 0x44
 800db34:	2300      	movs	r3, #0
 800db36:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef NX_DISABLE_IPV4
ULONG          next_hop_address = 0;
 800db38:	2300      	movs	r3, #0
 800db3a:	617b      	str	r3, [r7, #20]
#endif /* !NX_DISABLE_IPV4  */
#if !defined(NX_DISABLE_IPV4) || (defined(FEATURE_NX_IPV6) && defined(NX_ENABLE_INTERFACE_CAPABILITY))
NX_INTERFACE  *interface_ptr = NX_NULL;
 800db3c:	2300      	movs	r3, #0
 800db3e:	63fb      	str	r3, [r7, #60]	; 0x3c
#ifdef TX_ENABLE_EVENT_TRACE
UINT           ip_address_log = 0;
#endif /* TX_ENABLE_EVENT_TRACE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT           compute_checksum = 1;
 800db40:	2301      	movs	r3, #1
 800db42:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db44:	f3ef 8310 	mrs	r3, PRIMASK
 800db48:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800db4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800db4c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800db4e:	b672      	cpsid	i
    return(int_posture);
 800db50:	6a3b      	ldr	r3, [r7, #32]
    /* Disable UDP TX checksum. */
    compute_checksum = 0;
#endif /* NX_DISABLE_UDP_TX_CHECKSUM */

    /* Lockout interrupts.  */
    TX_DISABLE
 800db52:	633b      	str	r3, [r7, #48]	; 0x30

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the socket is currently bound to a UDP port.  */
    if (!socket_ptr ->  nx_udp_socket_bound_next)
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d107      	bne.n	800db6c <_nxd_udp_socket_send+0x4a>
 800db5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	f383 8810 	msr	PRIMASK, r3
}
 800db66:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Socket is not bound, return an error message.  */
        return(NX_NOT_BOUND);
 800db68:	2324      	movs	r3, #36	; 0x24
 800db6a:	e0d3      	b.n	800dd14 <_nxd_udp_socket_send+0x1f2>
    }

    /* Pickup the important information from the socket.  */

    /* Set up the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	68db      	ldr	r3, [r3, #12]
 800db70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db74:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db76:	69bb      	ldr	r3, [r7, #24]
 800db78:	f383 8810 	msr	PRIMASK, r3
}
 800db7c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

#ifndef NX_DISABLE_IPV4
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2b04      	cmp	r3, #4
 800db84:	d118      	bne.n	800dbb8 <_nxd_udp_socket_send+0x96>
    {

        /* Look for a suitable interface. */
        _nx_ip_route_find(ip_ptr, ip_address -> nxd_ip_address.v4, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6859      	ldr	r1, [r3, #4]
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800db90:	f107 0314 	add.w	r3, r7, #20
 800db94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db96:	f7fa fa63 	bl	8008060 <_nx_ip_route_find>
                          &next_hop_address);

        /* Check the packet interface.  */
        if (!packet_ptr -> nx_packet_address.nx_packet_interface_ptr)
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d101      	bne.n	800dba6 <_nxd_udp_socket_send+0x84>
        {

            /* None found; return the error status. */
            return(NX_IP_ADDRESS_ERROR);
 800dba2:	2321      	movs	r3, #33	; 0x21
 800dba4:	e0b6      	b.n	800dd14 <_nxd_udp_socket_send+0x1f2>
        }

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbaa:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Fill in the IP src/dest address */
        ip_dest_addr = &ip_address -> nxd_ip_address.v4;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	3304      	adds	r3, #4
 800dbb0:	643b      	str	r3, [r7, #64]	; 0x40
        ip_src_addr = &interface_ptr -> nx_interface_ip_address;
 800dbb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbb4:	3314      	adds	r3, #20
 800dbb6:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }
#endif /* NX_IPSEC_ENABLE */
        
    /* Prepend the UDP header to the packet.  First, make room for the UDP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	689b      	ldr	r3, [r3, #8]
 800dbbc:	f1a3 0208 	sub.w	r2, r3, #8
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	609a      	str	r2, [r3, #8]

    /* Set the correct IP version. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(ip_address -> nxd_ip_version);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	b2da      	uxtb	r2, r3
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

#ifndef NX_DISABLE_UDP_INFO
    /* Increment the total UDP packets sent count.  */
    ip_ptr -> nx_ip_udp_packets_sent++;
 800dbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbd6:	1c5a      	adds	r2, r3, #1
 800dbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Increment the total UDP bytes sent.  */
    ip_ptr -> nx_ip_udp_bytes_sent +=  packet_ptr -> nx_packet_length;
 800dbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbe8:	441a      	add	r2, r3
 800dbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Increment the total UDP packets sent count for this socket.  */
    socket_ptr -> nx_udp_socket_packets_sent++;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	691b      	ldr	r3, [r3, #16]
 800dbf4:	1c5a      	adds	r2, r3, #1
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	611a      	str	r2, [r3, #16]

    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	695a      	ldr	r2, [r3, #20]
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc02:	441a      	add	r2, r3
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	615a      	str	r2, [r3, #20]
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc0c:	f103 0208 	add.w	r2, r3, #8
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the UDP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	689b      	ldr	r3, [r3, #8]
 800dc18:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 =
        (((ULONG)socket_ptr -> nx_udp_socket_port) << NX_SHIFT_BY_16) | (ULONG)port;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	689b      	ldr	r3, [r3, #8]
 800dc1e:	041a      	lsls	r2, r3, #16
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	431a      	orrs	r2, r3
    udp_header_ptr -> nx_udp_header_word_0 =
 800dc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc26:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc2c:	041a      	lsls	r2, r3, #16
 800dc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc30:	605a      	str	r2, [r3, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_SEND, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
    swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800dc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	ba1a      	rev	r2, r3
 800dc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800dc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	ba1a      	rev	r2, r3
 800dc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc44:	605a      	str	r2, [r3, #4]
    Note that with IPv6, UDP packet checksum is mandatory. However if the underly device
    driver is able to compute UDP checksum in hardware, let the driver handle the checksum
    computation.
    */

    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d003      	beq.n	800dc56 <_nxd_udp_socket_send+0x134>
        (ip_address -> nxd_ip_version == NX_IP_VERSION_V6))
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800dc52:	2b06      	cmp	r3, #6
 800dc54:	d136      	bne.n	800dcc4 <_nxd_udp_socket_send+0x1a2>
    {
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 800dc56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc5a:	f003 0310 	and.w	r3, r3, #16
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d001      	beq.n	800dc66 <_nxd_udp_socket_send+0x144>
        {
            compute_checksum = 0;
 800dc62:	2300      	movs	r3, #0
 800dc64:	63bb      	str	r3, [r7, #56]	; 0x38
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 800dc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d025      	beq.n	800dcb8 <_nxd_udp_socket_send+0x196>
        ULONG checksum;

            /* Yes, we need to compute the UDP checksum.  */
            checksum = _nx_ip_checksum_compute(packet_ptr,
                                               NX_PROTOCOL_UDP,
                                               (UINT)packet_ptr -> nx_packet_length,
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            checksum = _nx_ip_checksum_compute(packet_ptr,
 800dc70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc72:	9300      	str	r3, [sp, #0]
 800dc74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc76:	2111      	movs	r1, #17
 800dc78:	68b8      	ldr	r0, [r7, #8]
 800dc7a:	f7f8 ff52 	bl	8006b22 <_nx_ip_checksum_compute>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	637b      	str	r3, [r7, #52]	; 0x34
                                               ip_src_addr,
                                               ip_dest_addr);
            checksum = ~checksum & NX_LOWER_16_MASK;
 800dc82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc84:	43db      	mvns	r3, r3
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	637b      	str	r3, [r7, #52]	; 0x34

            /* If the computed checksum is zero, it will be transmitted as all ones. */
            /* RFC 768, page 2. */
            if (checksum == 0)
 800dc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d102      	bne.n	800dc96 <_nxd_udp_socket_send+0x174>
            {
                checksum = 0xFFFF;
 800dc90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc94:	637b      	str	r3, [r7, #52]	; 0x34
            }

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800dc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	ba1a      	rev	r2, r3
 800dc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9e:	605a      	str	r2, [r3, #4]

            udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 800dca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca2:	685a      	ldr	r2, [r3, #4]
 800dca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dca6:	431a      	orrs	r2, r3
 800dca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcaa:	605a      	str	r2, [r3, #4]

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800dcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	ba1a      	rev	r2, r3
 800dcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb4:	605a      	str	r2, [r3, #4]
 800dcb6:	e005      	b.n	800dcc4 <_nxd_udp_socket_send+0x1a2>
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        else
        {
            /* Set CHECKSUM flag so the driver would invoke the HW checksum. */
            packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcbc:	f043 0210 	orr.w	r2, r3, #16
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	639a      	str	r2, [r3, #56]	; 0x38
        }
#endif
    }

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800dcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800dcca:	f04f 31ff 	mov.w	r1, #4294967295
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f001 fe76 	bl	800f9c0 <_tx_mutex_get>
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

#ifndef NX_DISABLE_IPV4
    /* Send the UDP packet to the IPv4 component.  */
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b04      	cmp	r3, #4
 800dcda:	d114      	bne.n	800dd06 <_nxd_udp_socket_send+0x1e4>
    {

        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6858      	ldr	r0, [r3, #4]
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
                           socket_ptr -> nx_udp_socket_type_of_service,
                           socket_ptr -> nx_udp_socket_time_to_live,
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800dce8:	68fa      	ldr	r2, [r7, #12]
 800dcea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800dcec:	6979      	ldr	r1, [r7, #20]
 800dcee:	9103      	str	r1, [sp, #12]
 800dcf0:	9202      	str	r2, [sp, #8]
 800dcf2:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800dcf6:	9201      	str	r2, [sp, #4]
 800dcf8:	9300      	str	r3, [sp, #0]
 800dcfa:	4623      	mov	r3, r4
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	68b9      	ldr	r1, [r7, #8]
 800dd00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd02:	f7fa f937 	bl	8007f74 <_nx_ip_packet_send>
                             ip_dest_addr);
    }
#endif /* FEATURE_NX_IPV6 */

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800dd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd08:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f002 f8cf 	bl	800feb0 <_tx_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 800dd12:	2300      	movs	r3, #0
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	374c      	adds	r7, #76	; 0x4c
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd90      	pop	{r4, r7, pc}

0800dd1c <_nxe_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b088      	sub	sp, #32
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (arp_cache_memory == NX_NULL))
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d007      	beq.n	800dd3e <_nxe_arp_enable+0x22>
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4a1c      	ldr	r2, [pc, #112]	; (800dda4 <_nxe_arp_enable+0x88>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d102      	bne.n	800dd3e <_nxe_arp_enable+0x22>
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d101      	bne.n	800dd42 <_nxe_arp_enable+0x26>
    {
        return(NX_PTR_ERROR);
 800dd3e:	2307      	movs	r3, #7
 800dd40:	e02c      	b.n	800dd9c <_nxe_arp_enable+0x80>
    }

    /* Check to see if ARP is already enabled.  */
    if (ip_ptr -> nx_ip_arp_allocate)
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d001      	beq.n	800dd50 <_nxe_arp_enable+0x34>
    {
        return(NX_ALREADY_ENABLED);
 800dd4c:	2315      	movs	r3, #21
 800dd4e:	e025      	b.n	800dd9c <_nxe_arp_enable+0x80>
    }

    /* Check for invalid ARP cache size.  */
    if (arp_cache_size < sizeof(NX_ARP))
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2b33      	cmp	r3, #51	; 0x33
 800dd54:	d801      	bhi.n	800dd5a <_nxe_arp_enable+0x3e>
    {
        return(NX_SIZE_ERROR);
 800dd56:	2309      	movs	r3, #9
 800dd58:	e020      	b.n	800dd9c <_nxe_arp_enable+0x80>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dd5a:	f3ef 8305 	mrs	r3, IPSR
 800dd5e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800dd60:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800dd62:	4b11      	ldr	r3, [pc, #68]	; (800dda8 <_nxe_arp_enable+0x8c>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	4313      	orrs	r3, r2
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d009      	beq.n	800dd80 <_nxe_arp_enable+0x64>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dd6c:	f3ef 8305 	mrs	r3, IPSR
 800dd70:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800dd72:	697a      	ldr	r2, [r7, #20]
 800dd74:	4b0c      	ldr	r3, [pc, #48]	; (800dda8 <_nxe_arp_enable+0x8c>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800dd7e:	d304      	bcc.n	800dd8a <_nxe_arp_enable+0x6e>
 800dd80:	4b0a      	ldr	r3, [pc, #40]	; (800ddac <_nxe_arp_enable+0x90>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4a0a      	ldr	r2, [pc, #40]	; (800ddb0 <_nxe_arp_enable+0x94>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d101      	bne.n	800dd8e <_nxe_arp_enable+0x72>
 800dd8a:	2311      	movs	r3, #17
 800dd8c:	e006      	b.n	800dd9c <_nxe_arp_enable+0x80>

    /* Call actual ARP enable function.  */
    status =  _nx_arp_enable(ip_ptr, arp_cache_memory, arp_cache_size);
 800dd8e:	687a      	ldr	r2, [r7, #4]
 800dd90:	68b9      	ldr	r1, [r7, #8]
 800dd92:	68f8      	ldr	r0, [r7, #12]
 800dd94:	f7f7 fcc2 	bl	800571c <_nx_arp_enable>
 800dd98:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800dd9a:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3720      	adds	r7, #32
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	49502020 	.word	0x49502020
 800dda8:	20000088 	.word	0x20000088
 800ddac:	20008094 	.word	0x20008094
 800ddb0:	200081dc 	.word	0x200081dc

0800ddb4 <_nxe_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_icmp_enable(NX_IP *ip_ptr)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b086      	sub	sp, #24
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d004      	beq.n	800ddcc <_nxe_icmp_enable+0x18>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4a17      	ldr	r2, [pc, #92]	; (800de24 <_nxe_icmp_enable+0x70>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d001      	beq.n	800ddd0 <_nxe_icmp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 800ddcc:	2307      	movs	r3, #7
 800ddce:	e025      	b.n	800de1c <_nxe_icmp_enable+0x68>
    }

    /* Check to see if ICMP is enabled.  */
    if (ip_ptr -> nx_ip_icmp_packet_receive)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d001      	beq.n	800ddde <_nxe_icmp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 800ddda:	2315      	movs	r3, #21
 800dddc:	e01e      	b.n	800de1c <_nxe_icmp_enable+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ddde:	f3ef 8305 	mrs	r3, IPSR
 800dde2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800dde4:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800dde6:	4b10      	ldr	r3, [pc, #64]	; (800de28 <_nxe_icmp_enable+0x74>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4313      	orrs	r3, r2
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d009      	beq.n	800de04 <_nxe_icmp_enable+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ddf0:	f3ef 8305 	mrs	r3, IPSR
 800ddf4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800ddf6:	68fa      	ldr	r2, [r7, #12]
 800ddf8:	4b0b      	ldr	r3, [pc, #44]	; (800de28 <_nxe_icmp_enable+0x74>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4313      	orrs	r3, r2
 800ddfe:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800de02:	d304      	bcc.n	800de0e <_nxe_icmp_enable+0x5a>
 800de04:	4b09      	ldr	r3, [pc, #36]	; (800de2c <_nxe_icmp_enable+0x78>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a09      	ldr	r2, [pc, #36]	; (800de30 <_nxe_icmp_enable+0x7c>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d101      	bne.n	800de12 <_nxe_icmp_enable+0x5e>
 800de0e:	2311      	movs	r3, #17
 800de10:	e004      	b.n	800de1c <_nxe_icmp_enable+0x68>

    /* Call actual ICMP enable function.  */
    status =  _nx_icmp_enable(ip_ptr);
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f7f8 fa86 	bl	8006324 <_nx_icmp_enable>
 800de18:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800de1a:	697b      	ldr	r3, [r7, #20]
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3718      	adds	r7, #24
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	49502020 	.word	0x49502020
 800de28:	20000088 	.word	0x20000088
 800de2c:	20008094 	.word	0x20008094
 800de30:	200081dc 	.word	0x200081dc

0800de34 <_nxe_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b088      	sub	sp, #32
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (ip_address == NX_NULL) || (network_mask == NX_NULL))
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00a      	beq.n	800de5c <_nxe_ip_address_get+0x28>
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	4a18      	ldr	r2, [pc, #96]	; (800deac <_nxe_ip_address_get+0x78>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d105      	bne.n	800de5c <_nxe_ip_address_get+0x28>
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d002      	beq.n	800de5c <_nxe_ip_address_get+0x28>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d101      	bne.n	800de60 <_nxe_ip_address_get+0x2c>
    {
        return(NX_PTR_ERROR);
 800de5c:	2307      	movs	r3, #7
 800de5e:	e020      	b.n	800dea2 <_nxe_ip_address_get+0x6e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800de60:	f3ef 8305 	mrs	r3, IPSR
 800de64:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800de66:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800de68:	4b11      	ldr	r3, [pc, #68]	; (800deb0 <_nxe_ip_address_get+0x7c>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4313      	orrs	r3, r2
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d009      	beq.n	800de86 <_nxe_ip_address_get+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800de72:	f3ef 8305 	mrs	r3, IPSR
 800de76:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800de78:	697a      	ldr	r2, [r7, #20]
 800de7a:	4b0d      	ldr	r3, [pc, #52]	; (800deb0 <_nxe_ip_address_get+0x7c>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4313      	orrs	r3, r2
 800de80:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800de84:	d304      	bcc.n	800de90 <_nxe_ip_address_get+0x5c>
 800de86:	4b0b      	ldr	r3, [pc, #44]	; (800deb4 <_nxe_ip_address_get+0x80>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a0b      	ldr	r2, [pc, #44]	; (800deb8 <_nxe_ip_address_get+0x84>)
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d101      	bne.n	800de94 <_nxe_ip_address_get+0x60>
 800de90:	2311      	movs	r3, #17
 800de92:	e006      	b.n	800dea2 <_nxe_ip_address_get+0x6e>

    /* Call actual IP address get function.  */
    status =  _nx_ip_address_get(ip_ptr, ip_address, network_mask);
 800de94:	687a      	ldr	r2, [r7, #4]
 800de96:	68b9      	ldr	r1, [r7, #8]
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	f7f8 fe11 	bl	8006ac0 <_nx_ip_address_get>
 800de9e:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800dea0:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3720      	adds	r7, #32
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop
 800deac:	49502020 	.word	0x49502020
 800deb0:	20000088 	.word	0x20000088
 800deb4:	20008094 	.word	0x20008094
 800deb8:	200081dc 	.word	0x200081dc

0800debc <_nxe_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                     NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                     VOID *memory_ptr, ULONG memory_size, UINT priority, UINT ip_control_block_size)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b092      	sub	sp, #72	; 0x48
 800dec0:	af06      	add	r7, sp, #24
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	607a      	str	r2, [r7, #4]
 800dec8:	603b      	str	r3, [r7, #0]

UINT       status;
UINT       old_threshold = 0;
 800deca:	2300      	movs	r3, #0
 800decc:	613b      	str	r3, [r7, #16]
UCHAR     *end_stack;
TX_THREAD *current_thread;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d011      	beq.n	800def8 <_nxe_ip_create+0x3c>
 800ded4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d00e      	beq.n	800def8 <_nxe_ip_create+0x3c>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 800deda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dedc:	681b      	ldr	r3, [r3, #0]
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 800dede:	4a58      	ldr	r2, [pc, #352]	; (800e040 <_nxe_ip_create+0x184>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d109      	bne.n	800def8 <_nxe_ip_create+0x3c>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 800dee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d006      	beq.n	800def8 <_nxe_ip_create+0x3c>
 800deea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deec:	2b00      	cmp	r3, #0
 800deee:	d003      	beq.n	800def8 <_nxe_ip_create+0x3c>
        (memory_ptr == NX_NULL) || (ip_control_block_size != (UINT)sizeof(NX_IP)))
 800def0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800def2:	f5b3 6ff9 	cmp.w	r3, #1992	; 0x7c8
 800def6:	d001      	beq.n	800defc <_nxe_ip_create+0x40>
    {
        return(NX_PTR_ERROR);
 800def8:	2307      	movs	r3, #7
 800defa:	e09d      	b.n	800e038 <_nxe_ip_create+0x17c>
    }

    /* Check for a memory size error.  */
    if (memory_size < TX_MINIMUM_STACK)
 800defc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800defe:	2bc7      	cmp	r3, #199	; 0xc7
 800df00:	d801      	bhi.n	800df06 <_nxe_ip_create+0x4a>
    {
        return(NX_SIZE_ERROR);
 800df02:	2309      	movs	r3, #9
 800df04:	e098      	b.n	800e038 <_nxe_ip_create+0x17c>
    }

    /* Check the priority specified.  */
    if (priority >= TX_MAX_PRIORITIES)
 800df06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df08:	2b1f      	cmp	r3, #31
 800df0a:	d901      	bls.n	800df10 <_nxe_ip_create+0x54>
    {
        return(NX_OPTION_ERROR);
 800df0c:	230a      	movs	r3, #10
 800df0e:	e093      	b.n	800e038 <_nxe_ip_create+0x17c>
    }

    /* Calculate the end of the stack area.  */
    end_stack =  ((UCHAR *)memory_ptr) + (memory_size - 1);
 800df10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df12:	3b01      	subs	r3, #1
 800df14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df16:	4413      	add	r3, r2
 800df18:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800df1a:	f002 fae5 	bl	80104e8 <_tx_thread_identify>
 800df1e:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    if (current_thread)
 800df20:	6a3b      	ldr	r3, [r7, #32]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d006      	beq.n	800df34 <_nxe_ip_create+0x78>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800df26:	f107 0310 	add.w	r3, r7, #16
 800df2a:	461a      	mov	r2, r3
 800df2c:	2100      	movs	r1, #0
 800df2e:	6a38      	ldr	r0, [r7, #32]
 800df30:	f002 fb34 	bl	801059c <_tx_thread_preemption_change>
    }

    /* Loop to check for the IP instance already created.  */
    created_ip =     _nx_ip_created_ptr;
 800df34:	4b43      	ldr	r3, [pc, #268]	; (800e044 <_nxe_ip_create+0x188>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	62fb      	str	r3, [r7, #44]	; 0x2c
    created_count =  _nx_ip_created_count;
 800df3a:	4b43      	ldr	r3, [pc, #268]	; (800e048 <_nxe_ip_create+0x18c>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	62bb      	str	r3, [r7, #40]	; 0x28
    while (created_count--)
 800df40:	e02b      	b.n	800df9a <_nxe_ip_create+0xde>
    {

        /* Is the new ip already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ip_ptr == created_ip) ||
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df46:	429a      	cmp	r2, r3
 800df48:	d017      	beq.n	800df7a <_nxe_ip_create+0xbe>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800df4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
        if ((ip_ptr == created_ip) ||
 800df50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df52:	429a      	cmp	r2, r3
 800df54:	d305      	bcc.n	800df62 <_nxe_ip_create+0xa6>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800df56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df58:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800df5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df5e:	429a      	cmp	r2, r3
 800df60:	d30b      	bcc.n	800df7a <_nxe_ip_create+0xbe>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 800df62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df64:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800df68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d311      	bcc.n	800df92 <_nxe_ip_create+0xd6>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 800df6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df70:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800df74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df76:	429a      	cmp	r2, r3
 800df78:	d20b      	bcs.n	800df92 <_nxe_ip_create+0xd6>
        {

            /* Restore preemption.  */
            if (current_thread)
 800df7a:	6a3b      	ldr	r3, [r7, #32]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d006      	beq.n	800df8e <_nxe_ip_create+0xd2>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	f107 0210 	add.w	r2, r7, #16
 800df86:	4619      	mov	r1, r3
 800df88:	6a38      	ldr	r0, [r7, #32]
 800df8a:	f002 fb07 	bl	801059c <_tx_thread_preemption_change>
            }

            /* Duplicate ip created, return an error!  */
            return(NX_PTR_ERROR);
 800df8e:	2307      	movs	r3, #7
 800df90:	e052      	b.n	800e038 <_nxe_ip_create+0x17c>
        }

        /* Move to next entry.  */
        created_ip =  created_ip -> nx_ip_created_next;
 800df92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df94:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 800df98:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (created_count--)
 800df9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9c:	1e5a      	subs	r2, r3, #1
 800df9e:	62ba      	str	r2, [r7, #40]	; 0x28
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d1ce      	bne.n	800df42 <_nxe_ip_create+0x86>
    }

    /* Restore preemption.  */
    if (current_thread)
 800dfa4:	6a3b      	ldr	r3, [r7, #32]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d006      	beq.n	800dfb8 <_nxe_ip_create+0xfc>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	f107 0210 	add.w	r2, r7, #16
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	6a38      	ldr	r0, [r7, #32]
 800dfb4:	f002 faf2 	bl	801059c <_tx_thread_preemption_change>
    }

    /* Check for invalid IP address.  Note that Interface with DHCP enabled
       would start with 0.0.0.0.  Therefore the 0 IP address is allowed. */
    if ((ip_address != 0) &&
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d010      	beq.n	800dfe0 <_nxe_ip_create+0x124>
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 800dfbe:	687b      	ldr	r3, [r7, #4]
    if ((ip_address != 0) &&
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	da0d      	bge.n	800dfe0 <_nxe_ip_create+0x124>
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 800dfca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dfce:	d007      	beq.n	800dfe0 <_nxe_ip_create+0x124>
        ((ip_address & NX_IP_CLASS_C_MASK) != NX_IP_CLASS_C_TYPE))
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 800dfd6:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800dfda:	d001      	beq.n	800dfe0 <_nxe_ip_create+0x124>
    {
        return(NX_IP_ADDRESS_ERROR);
 800dfdc:	2321      	movs	r3, #33	; 0x21
 800dfde:	e02b      	b.n	800e038 <_nxe_ip_create+0x17c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dfe0:	f3ef 8305 	mrs	r3, IPSR
 800dfe4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800dfe6:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800dfe8:	4b18      	ldr	r3, [pc, #96]	; (800e04c <_nxe_ip_create+0x190>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	4313      	orrs	r3, r2
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d009      	beq.n	800e006 <_nxe_ip_create+0x14a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dff2:	f3ef 8305 	mrs	r3, IPSR
 800dff6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800dff8:	697a      	ldr	r2, [r7, #20]
 800dffa:	4b14      	ldr	r3, [pc, #80]	; (800e04c <_nxe_ip_create+0x190>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4313      	orrs	r3, r2
 800e000:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e004:	d304      	bcc.n	800e010 <_nxe_ip_create+0x154>
 800e006:	4b12      	ldr	r3, [pc, #72]	; (800e050 <_nxe_ip_create+0x194>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4a12      	ldr	r2, [pc, #72]	; (800e054 <_nxe_ip_create+0x198>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d101      	bne.n	800e014 <_nxe_ip_create+0x158>
 800e010:	2311      	movs	r3, #17
 800e012:	e011      	b.n	800e038 <_nxe_ip_create+0x17c>

    /* Call actual IP instance create function.  */
    status =  _nx_ip_create(ip_ptr, name, ip_address, network_mask, default_pool, ip_link_driver,
 800e014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e016:	9304      	str	r3, [sp, #16]
 800e018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e01a:	9303      	str	r3, [sp, #12]
 800e01c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e01e:	9302      	str	r3, [sp, #8]
 800e020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e022:	9301      	str	r3, [sp, #4]
 800e024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e026:	9300      	str	r3, [sp, #0]
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	68b9      	ldr	r1, [r7, #8]
 800e02e:	68f8      	ldr	r0, [r7, #12]
 800e030:	f7f8 fe64 	bl	8006cfc <_nx_ip_create>
 800e034:	61f8      	str	r0, [r7, #28]
                            memory_ptr, memory_size, priority);

    /* Return completion status.  */
    return(status);
 800e036:	69fb      	ldr	r3, [r7, #28]
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3730      	adds	r7, #48	; 0x30
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	5041434b 	.word	0x5041434b
 800e044:	20008028 	.word	0x20008028
 800e048:	2000802c 	.word	0x2000802c
 800e04c:	20000088 	.word	0x20000088
 800e050:	20008094 	.word	0x20008094
 800e054:	200081dc 	.word	0x200081dc

0800e058 <_nxe_ip_driver_direct_command>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_driver_direct_command(NX_IP *ip_ptr, UINT command, ULONG *return_value_ptr)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b088      	sub	sp, #32
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	60f8      	str	r0, [r7, #12]
 800e060:	60b9      	str	r1, [r7, #8]
 800e062:	607a      	str	r2, [r7, #4]

UINT status;

    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (return_value_ptr == NX_NULL))
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d007      	beq.n	800e07a <_nxe_ip_driver_direct_command+0x22>
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	4a16      	ldr	r2, [pc, #88]	; (800e0c8 <_nxe_ip_driver_direct_command+0x70>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d102      	bne.n	800e07a <_nxe_ip_driver_direct_command+0x22>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d101      	bne.n	800e07e <_nxe_ip_driver_direct_command+0x26>
    {
        return(NX_PTR_ERROR);
 800e07a:	2307      	movs	r3, #7
 800e07c:	e020      	b.n	800e0c0 <_nxe_ip_driver_direct_command+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e07e:	f3ef 8305 	mrs	r3, IPSR
 800e082:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e084:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800e086:	4b11      	ldr	r3, [pc, #68]	; (800e0cc <_nxe_ip_driver_direct_command+0x74>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4313      	orrs	r3, r2
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d009      	beq.n	800e0a4 <_nxe_ip_driver_direct_command+0x4c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e090:	f3ef 8305 	mrs	r3, IPSR
 800e094:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e096:	697a      	ldr	r2, [r7, #20]
 800e098:	4b0c      	ldr	r3, [pc, #48]	; (800e0cc <_nxe_ip_driver_direct_command+0x74>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4313      	orrs	r3, r2
 800e09e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e0a2:	d304      	bcc.n	800e0ae <_nxe_ip_driver_direct_command+0x56>
 800e0a4:	4b0a      	ldr	r3, [pc, #40]	; (800e0d0 <_nxe_ip_driver_direct_command+0x78>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4a0a      	ldr	r2, [pc, #40]	; (800e0d4 <_nxe_ip_driver_direct_command+0x7c>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d101      	bne.n	800e0b2 <_nxe_ip_driver_direct_command+0x5a>
 800e0ae:	2311      	movs	r3, #17
 800e0b0:	e006      	b.n	800e0c0 <_nxe_ip_driver_direct_command+0x68>

    /* Call actual IP direct driver command function.  */
    status =  _nx_ip_driver_direct_command(ip_ptr, command, return_value_ptr);
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	68b9      	ldr	r1, [r7, #8]
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f7f9 f87d 	bl	80071b6 <_nx_ip_driver_direct_command>
 800e0bc:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800e0be:	69fb      	ldr	r3, [r7, #28]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3720      	adds	r7, #32
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}
 800e0c8:	49502020 	.word	0x49502020
 800e0cc:	20000088 	.word	0x20000088
 800e0d0:	20008094 	.word	0x20008094
 800e0d4:	200081dc 	.word	0x200081dc

0800e0d8 <_nxe_ip_interface_status_check>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_interface_status_check(NX_IP *ip_ptr, UINT interface_index, ULONG needed_status,
                                     ULONG *actual_status, ULONG wait_option)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b088      	sub	sp, #32
 800e0dc:	af02      	add	r7, sp, #8
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	607a      	str	r2, [r7, #4]
 800e0e4:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (actual_status == NX_NULL))
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d007      	beq.n	800e0fc <_nxe_ip_interface_status_check+0x24>
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	4a21      	ldr	r2, [pc, #132]	; (800e178 <_nxe_ip_interface_status_check+0xa0>)
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d102      	bne.n	800e0fc <_nxe_ip_interface_status_check+0x24>
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d101      	bne.n	800e100 <_nxe_ip_interface_status_check+0x28>
    {
        return(NX_PTR_ERROR);
 800e0fc:	2307      	movs	r3, #7
 800e0fe:	e037      	b.n	800e170 <_nxe_ip_interface_status_check+0x98>
    }

    /* Check for invalid interface index. */
    if ((interface_index >= NX_MAX_PHYSICAL_INTERFACES) ||
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d10b      	bne.n	800e11e <_nxe_ip_interface_status_check+0x46>
        (ip_ptr -> nx_ip_interface[interface_index].nx_interface_valid) == 0)
 800e106:	68f9      	ldr	r1, [r7, #12]
 800e108:	68ba      	ldr	r2, [r7, #8]
 800e10a:	4613      	mov	r3, r2
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	4413      	add	r3, r2
 800e110:	011b      	lsls	r3, r3, #4
 800e112:	440b      	add	r3, r1
 800e114:	f203 7324 	addw	r3, r3, #1828	; 0x724
 800e118:	781b      	ldrb	r3, [r3, #0]
    if ((interface_index >= NX_MAX_PHYSICAL_INTERFACES) ||
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d101      	bne.n	800e122 <_nxe_ip_interface_status_check+0x4a>
    {
        return(NX_INVALID_INTERFACE);
 800e11e:	234c      	movs	r3, #76	; 0x4c
 800e120:	e026      	b.n	800e170 <_nxe_ip_interface_status_check+0x98>
    }

    /* Check for valid options.  */
    if (needed_status &
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800e128:	f023 0301 	bic.w	r3, r3, #1
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d001      	beq.n	800e134 <_nxe_ip_interface_status_check+0x5c>
#ifndef NX_DISABLE_IPV4
          | (NX_IP_ADDRESS_RESOLVED | NX_IP_ARP_ENABLED | NX_IP_RARP_COMPLETE | NX_IP_IGMP_ENABLED)
#endif /* !NX_DISABLE_IPV4  */
         ))
    {
        return(NX_OPTION_ERROR);
 800e130:	230a      	movs	r3, #10
 800e132:	e01d      	b.n	800e170 <_nxe_ip_interface_status_check+0x98>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e134:	f3ef 8305 	mrs	r3, IPSR
 800e138:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e13a:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800e13c:	4b0f      	ldr	r3, [pc, #60]	; (800e17c <_nxe_ip_interface_status_check+0xa4>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	4313      	orrs	r3, r2
 800e142:	2b00      	cmp	r3, #0
 800e144:	d108      	bne.n	800e158 <_nxe_ip_interface_status_check+0x80>
 800e146:	4b0e      	ldr	r3, [pc, #56]	; (800e180 <_nxe_ip_interface_status_check+0xa8>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d004      	beq.n	800e158 <_nxe_ip_interface_status_check+0x80>
 800e14e:	4b0c      	ldr	r3, [pc, #48]	; (800e180 <_nxe_ip_interface_status_check+0xa8>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4a0c      	ldr	r2, [pc, #48]	; (800e184 <_nxe_ip_interface_status_check+0xac>)
 800e154:	4293      	cmp	r3, r2
 800e156:	d101      	bne.n	800e15c <_nxe_ip_interface_status_check+0x84>
 800e158:	2311      	movs	r3, #17
 800e15a:	e009      	b.n	800e170 <_nxe_ip_interface_status_check+0x98>

    /* Call actual IP interface status check function.  */
    status =  _nx_ip_interface_status_check(ip_ptr, interface_index, needed_status, actual_status, wait_option);
 800e15c:	6a3b      	ldr	r3, [r7, #32]
 800e15e:	9300      	str	r3, [sp, #0]
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	68b9      	ldr	r1, [r7, #8]
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f7f9 fbb6 	bl	80078d8 <_nx_ip_interface_status_check>
 800e16c:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800e16e:	697b      	ldr	r3, [r7, #20]
}
 800e170:	4618      	mov	r0, r3
 800e172:	3718      	adds	r7, #24
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	49502020 	.word	0x49502020
 800e17c:	20000088 	.word	0x20000088
 800e180:	20008094 	.word	0x20008094
 800e184:	200081dc 	.word	0x200081dc

0800e188 <_nxe_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                           ULONG packet_type, ULONG wait_option)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b086      	sub	sp, #24
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	60b9      	str	r1, [r7, #8]
 800e192:	607a      	str	r2, [r7, #4]
 800e194:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (packet_ptr == NX_NULL))
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d007      	beq.n	800e1ac <_nxe_packet_allocate+0x24>
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4a18      	ldr	r2, [pc, #96]	; (800e204 <_nxe_packet_allocate+0x7c>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d102      	bne.n	800e1ac <_nxe_packet_allocate+0x24>
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d101      	bne.n	800e1b0 <_nxe_packet_allocate+0x28>
    {
        return(NX_PTR_ERROR);
 800e1ac:	2307      	movs	r3, #7
 800e1ae:	e025      	b.n	800e1fc <_nxe_packet_allocate+0x74>
    }

    /* Check for an invalid packet type - for alignment purposes, it must be evenly divisible by the size
       of a ULONG.  */
    if (packet_type % sizeof(ULONG))
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f003 0303 	and.w	r3, r3, #3
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d001      	beq.n	800e1be <_nxe_packet_allocate+0x36>
    {
        return(NX_OPTION_ERROR);
 800e1ba:	230a      	movs	r3, #10
 800e1bc:	e01e      	b.n	800e1fc <_nxe_packet_allocate+0x74>
    }

    /* Check for a thread caller if the wait option specifies suspension.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d013      	beq.n	800e1ec <_nxe_packet_allocate+0x64>
 800e1c4:	4b10      	ldr	r3, [pc, #64]	; (800e208 <_nxe_packet_allocate+0x80>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d00d      	beq.n	800e1e8 <_nxe_packet_allocate+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e1cc:	f3ef 8305 	mrs	r3, IPSR
 800e1d0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e1d2:	693a      	ldr	r2, [r7, #16]
 800e1d4:	4b0d      	ldr	r3, [pc, #52]	; (800e20c <_nxe_packet_allocate+0x84>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4313      	orrs	r3, r2
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d104      	bne.n	800e1e8 <_nxe_packet_allocate+0x60>
 800e1de:	4b0a      	ldr	r3, [pc, #40]	; (800e208 <_nxe_packet_allocate+0x80>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a0b      	ldr	r2, [pc, #44]	; (800e210 <_nxe_packet_allocate+0x88>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d101      	bne.n	800e1ec <_nxe_packet_allocate+0x64>
 800e1e8:	2311      	movs	r3, #17
 800e1ea:	e007      	b.n	800e1fc <_nxe_packet_allocate+0x74>

    /* Call actual packet allocate function.  */
    status =  _nx_packet_allocate(pool_ptr,  packet_ptr, packet_type, wait_option);
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	68b9      	ldr	r1, [r7, #8]
 800e1f2:	68f8      	ldr	r0, [r7, #12]
 800e1f4:	f7fa fdf4 	bl	8008de0 <_nx_packet_allocate>
 800e1f8:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800e1fa:	697b      	ldr	r3, [r7, #20]
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3718      	adds	r7, #24
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	5041434b 	.word	0x5041434b
 800e208:	20008094 	.word	0x20008094
 800e20c:	20000088 	.word	0x20000088
 800e210:	200081dc 	.word	0x200081dc

0800e214 <_nxe_packet_data_retrieve>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_data_retrieve(NX_PACKET *packet_ptr, VOID *buffer_start, ULONG *bytes_copied)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b086      	sub	sp, #24
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((packet_ptr == NX_NULL) || (buffer_start == NX_NULL) || (bytes_copied == NX_NULL))
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d005      	beq.n	800e232 <_nxe_packet_data_retrieve+0x1e>
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d002      	beq.n	800e232 <_nxe_packet_data_retrieve+0x1e>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d101      	bne.n	800e236 <_nxe_packet_data_retrieve+0x22>
    {
        return(NX_PTR_ERROR);
 800e232:	2307      	movs	r3, #7
 800e234:	e006      	b.n	800e244 <_nxe_packet_data_retrieve+0x30>
    }

    /* Call actual packet data retrieve function.  */
    status =  _nx_packet_data_retrieve(packet_ptr, buffer_start, bytes_copied);
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	68b9      	ldr	r1, [r7, #8]
 800e23a:	68f8      	ldr	r0, [r7, #12]
 800e23c:	f7fa ffeb 	bl	8009216 <_nx_packet_data_retrieve>
 800e240:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800e242:	697b      	ldr	r3, [r7, #20]
}
 800e244:	4618      	mov	r0, r3
 800e246:	3718      	adds	r7, #24
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <_nxe_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                              VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b094      	sub	sp, #80	; 0x50
 800e250:	af02      	add	r7, sp, #8
 800e252:	60f8      	str	r0, [r7, #12]
 800e254:	60b9      	str	r1, [r7, #8]
 800e256:	607a      	str	r2, [r7, #4]
 800e258:	603b      	str	r3, [r7, #0]

UINT            status;
ULONG           rounded_payload_size;
ULONG           rounded_pool_size;
ULONG           header_size;
UINT            old_threshold = 0;
 800e25a:	2300      	movs	r3, #0
 800e25c:	613b      	str	r3, [r7, #16]
VOID           *rounded_pool_start;
TX_THREAD      *current_thread;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_start == NX_NULL) || (pool_control_block_size != (UINT)sizeof(NX_PACKET_POOL)))
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d005      	beq.n	800e270 <_nxe_packet_pool_create+0x24>
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d002      	beq.n	800e270 <_nxe_packet_pool_create+0x24>
 800e26a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e26c:	2b3c      	cmp	r3, #60	; 0x3c
 800e26e:	d001      	beq.n	800e274 <_nxe_packet_pool_create+0x28>
    {
        return(NX_PTR_ERROR);
 800e270:	2307      	movs	r3, #7
 800e272:	e0a7      	b.n	800e3c4 <_nxe_packet_pool_create+0x178>
    }

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	3303      	adds	r3, #3
 800e278:	f023 0303 	bic.w	r3, r3, #3
 800e27c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800e27e:	683a      	ldr	r2, [r7, #0]
 800e280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e282:	1ad2      	subs	r2, r2, r3
 800e284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e286:	4413      	add	r3, r2
 800e288:	f023 0303 	bic.w	r3, r3, #3
 800e28c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 800e28e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e290:	333c      	adds	r3, #60	; 0x3c
 800e292:	637b      	str	r3, [r7, #52]	; 0x34

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800e294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e296:	3303      	adds	r3, #3
 800e298:	f023 0303 	bic.w	r3, r3, #3
 800e29c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 800e29e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2a2:	1ad3      	subs	r3, r2, r3
 800e2a4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    rounded_payload_size =  (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 800e2a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4413      	add	r3, r2
 800e2ac:	3303      	adds	r3, #3
 800e2ae:	f023 0203 	bic.w	r2, r3, #3
 800e2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b4:	1ad3      	subs	r3, r2, r3
 800e2b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check for an invalid pool and payload size.  */
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 800e2b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2ba:	2b04      	cmp	r3, #4
 800e2bc:	d908      	bls.n	800e2d0 <_nxe_packet_pool_create+0x84>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d005      	beq.n	800e2d0 <_nxe_packet_pool_create+0x84>
        ((rounded_payload_size + header_size) > rounded_pool_size))
 800e2c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c8:	4413      	add	r3, r2
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 800e2ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d201      	bcs.n	800e2d4 <_nxe_packet_pool_create+0x88>
    {
        return(NX_SIZE_ERROR);
 800e2d0:	2309      	movs	r3, #9
 800e2d2:	e077      	b.n	800e3c4 <_nxe_packet_pool_create+0x178>
    }

    /* Calculate the end of the pool memory area.  */
    end_memory =  ((CHAR *)pool_start) + (pool_size - 1);
 800e2d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	683a      	ldr	r2, [r7, #0]
 800e2da:	4413      	add	r3, r2
 800e2dc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800e2de:	f002 f903 	bl	80104e8 <_tx_thread_identify>
 800e2e2:	6278      	str	r0, [r7, #36]	; 0x24

    /* Disable preemption temporarily.  */
    if (current_thread)
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d006      	beq.n	800e2f8 <_nxe_packet_pool_create+0xac>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800e2ea:	f107 0310 	add.w	r3, r7, #16
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2f4:	f002 f952 	bl	801059c <_tx_thread_preemption_change>
    }

    /* Loop to check for the pool instance already created.  */
    created_pool =   _nx_packet_pool_created_ptr;
 800e2f8:	4b34      	ldr	r3, [pc, #208]	; (800e3cc <_nxe_packet_pool_create+0x180>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	647b      	str	r3, [r7, #68]	; 0x44
    created_count =  _nx_packet_pool_created_count;
 800e2fe:	4b34      	ldr	r3, [pc, #208]	; (800e3d0 <_nxe_packet_pool_create+0x184>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	643b      	str	r3, [r7, #64]	; 0x40
    while (created_count--)
 800e304:	e02b      	b.n	800e35e <_nxe_packet_pool_create+0x112>
    {

        /* Calculate the created pool's end of memory.  */
        created_end =  created_pool -> nx_packet_pool_start + (created_pool -> nx_packet_pool_size - 1);
 800e306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e308:	6a1a      	ldr	r2, [r3, #32]
 800e30a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e30e:	3b01      	subs	r3, #1
 800e310:	4413      	add	r3, r2
 800e312:	61fb      	str	r3, [r7, #28]

        /* Is the new pool already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((pool_ptr == created_pool) ||
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e318:	429a      	cmp	r2, r3
 800e31a:	d011      	beq.n	800e340 <_nxe_packet_pool_create+0xf4>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800e31c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e31e:	6a1b      	ldr	r3, [r3, #32]
        if ((pool_ptr == created_pool) ||
 800e320:	683a      	ldr	r2, [r7, #0]
 800e322:	429a      	cmp	r2, r3
 800e324:	d303      	bcc.n	800e32e <_nxe_packet_pool_create+0xe2>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800e326:	683a      	ldr	r2, [r7, #0]
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d308      	bcc.n	800e340 <_nxe_packet_pool_create+0xf4>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 800e32e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e330:	6a1b      	ldr	r3, [r3, #32]
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800e332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e334:	429a      	cmp	r2, r3
 800e336:	d30f      	bcc.n	800e358 <_nxe_packet_pool_create+0x10c>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 800e338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e33a:	69fb      	ldr	r3, [r7, #28]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d20b      	bcs.n	800e358 <_nxe_packet_pool_create+0x10c>
        {

            /* Restore preemption.  */
            if (current_thread)
 800e340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e342:	2b00      	cmp	r3, #0
 800e344:	d006      	beq.n	800e354 <_nxe_packet_pool_create+0x108>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	f107 0210 	add.w	r2, r7, #16
 800e34c:	4619      	mov	r1, r3
 800e34e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e350:	f002 f924 	bl	801059c <_tx_thread_preemption_change>
            }

            /* Duplicate packet pool created, return an error!  */
            return(NX_PTR_ERROR);
 800e354:	2307      	movs	r3, #7
 800e356:	e035      	b.n	800e3c4 <_nxe_packet_pool_create+0x178>
        }

        /* Move to next entry.  */
        created_pool =  created_pool -> nx_packet_pool_created_next;
 800e358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e35a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e35c:	647b      	str	r3, [r7, #68]	; 0x44
    while (created_count--)
 800e35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e360:	1e5a      	subs	r2, r3, #1
 800e362:	643a      	str	r2, [r7, #64]	; 0x40
 800e364:	2b00      	cmp	r3, #0
 800e366:	d1ce      	bne.n	800e306 <_nxe_packet_pool_create+0xba>
    }

    /* Restore preemption.  */
    if (current_thread)
 800e368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d006      	beq.n	800e37c <_nxe_packet_pool_create+0x130>
    {
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	f107 0210 	add.w	r2, r7, #16
 800e374:	4619      	mov	r1, r3
 800e376:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e378:	f002 f910 	bl	801059c <_tx_thread_preemption_change>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e37c:	f3ef 8305 	mrs	r3, IPSR
 800e380:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e382:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800e384:	4b13      	ldr	r3, [pc, #76]	; (800e3d4 <_nxe_packet_pool_create+0x188>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4313      	orrs	r3, r2
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d009      	beq.n	800e3a2 <_nxe_packet_pool_create+0x156>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e38e:	f3ef 8305 	mrs	r3, IPSR
 800e392:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e394:	697a      	ldr	r2, [r7, #20]
 800e396:	4b0f      	ldr	r3, [pc, #60]	; (800e3d4 <_nxe_packet_pool_create+0x188>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4313      	orrs	r3, r2
 800e39c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e3a0:	d304      	bcc.n	800e3ac <_nxe_packet_pool_create+0x160>
 800e3a2:	4b0d      	ldr	r3, [pc, #52]	; (800e3d8 <_nxe_packet_pool_create+0x18c>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	4a0d      	ldr	r2, [pc, #52]	; (800e3dc <_nxe_packet_pool_create+0x190>)
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	d101      	bne.n	800e3b0 <_nxe_packet_pool_create+0x164>
 800e3ac:	2311      	movs	r3, #17
 800e3ae:	e009      	b.n	800e3c4 <_nxe_packet_pool_create+0x178>

    /* Call actual packet pool create function.  */
    status =  _nx_packet_pool_create(pool_ptr, name_ptr, payload_size, pool_start, pool_size);
 800e3b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3b2:	9300      	str	r3, [sp, #0]
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	68b9      	ldr	r1, [r7, #8]
 800e3ba:	68f8      	ldr	r0, [r7, #12]
 800e3bc:	f7fa ffca 	bl	8009354 <_nx_packet_pool_create>
 800e3c0:	6238      	str	r0, [r7, #32]

    /* Return completion status.  */
    return(status);
 800e3c2:	6a3b      	ldr	r3, [r7, #32]
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3748      	adds	r7, #72	; 0x48
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	20008030 	.word	0x20008030
 800e3d0:	20008034 	.word	0x20008034
 800e3d4:	20000088 	.word	0x20000088
 800e3d8:	20008094 	.word	0x20008094
 800e3dc:	200081dc 	.word	0x200081dc

0800e3e0 <_nxe_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_release(NX_PACKET **packet_ptr_ptr)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d009      	beq.n	800e408 <_nxe_packet_release+0x28>
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d005      	beq.n	800e408 <_nxe_packet_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800e402:	4a12      	ldr	r2, [pc, #72]	; (800e44c <_nxe_packet_release+0x6c>)
 800e404:	4293      	cmp	r3, r2
 800e406:	d001      	beq.n	800e40c <_nxe_packet_release+0x2c>
    {

        return(NX_PTR_ERROR);
 800e408:	2307      	movs	r3, #7
 800e40a:	e01a      	b.n	800e442 <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	689a      	ldr	r2, [r3, #8]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	691b      	ldr	r3, [r3, #16]
 800e414:	429a      	cmp	r2, r3
 800e416:	d201      	bcs.n	800e41c <_nxe_packet_release+0x3c>
    {
        return(NX_UNDERFLOW);
 800e418:	2302      	movs	r3, #2
 800e41a:	e012      	b.n	800e442 <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	68da      	ldr	r2, [r3, #12]
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	695b      	ldr	r3, [r3, #20]
 800e424:	429a      	cmp	r2, r3
 800e426:	d901      	bls.n	800e42c <_nxe_packet_release+0x4c>
    {
        return(NX_OVERFLOW);
 800e428:	2303      	movs	r3, #3
 800e42a:	e00a      	b.n	800e442 <_nxe_packet_release+0x62>
    }

    /* Call actual packet release function.  */
    status =  _nx_packet_release(packet_ptr);
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f7fb f873 	bl	8009518 <_nx_packet_release>
 800e432:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d102      	bne.n	800e440 <_nxe_packet_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2200      	movs	r2, #0
 800e43e:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800e440:	68bb      	ldr	r3, [r7, #8]
}
 800e442:	4618      	mov	r0, r3
 800e444:	3710      	adds	r7, #16
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	5041434b 	.word	0x5041434b

0800e450 <_nxe_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_transmit_release(NX_PACKET **packet_ptr_ptr)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d009      	beq.n	800e478 <_nxe_packet_transmit_release+0x28>
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d005      	beq.n	800e478 <_nxe_packet_transmit_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800e472:	4a12      	ldr	r2, [pc, #72]	; (800e4bc <_nxe_packet_transmit_release+0x6c>)
 800e474:	4293      	cmp	r3, r2
 800e476:	d001      	beq.n	800e47c <_nxe_packet_transmit_release+0x2c>
    {

        return(NX_PTR_ERROR);
 800e478:	2307      	movs	r3, #7
 800e47a:	e01a      	b.n	800e4b2 <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	689a      	ldr	r2, [r3, #8]
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	691b      	ldr	r3, [r3, #16]
 800e484:	429a      	cmp	r2, r3
 800e486:	d201      	bcs.n	800e48c <_nxe_packet_transmit_release+0x3c>
    {
        return(NX_UNDERFLOW);
 800e488:	2302      	movs	r3, #2
 800e48a:	e012      	b.n	800e4b2 <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	68da      	ldr	r2, [r3, #12]
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	695b      	ldr	r3, [r3, #20]
 800e494:	429a      	cmp	r2, r3
 800e496:	d901      	bls.n	800e49c <_nxe_packet_transmit_release+0x4c>
    {
        return(NX_OVERFLOW);
 800e498:	2303      	movs	r3, #3
 800e49a:	e00a      	b.n	800e4b2 <_nxe_packet_transmit_release+0x62>
    }

    /* Call actual packet transmit release function.  */
    status =  _nx_packet_transmit_release(packet_ptr);
 800e49c:	68f8      	ldr	r0, [r7, #12]
 800e49e:	f7fb f8f3 	bl	8009688 <_nx_packet_transmit_release>
 800e4a2:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d102      	bne.n	800e4b0 <_nxe_packet_transmit_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800e4b0:	68bb      	ldr	r3, [r7, #8]
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3710      	adds	r7, #16
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	5041434b 	.word	0x5041434b

0800e4c0 <_nxe_tcp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_tcp_enable(NX_IP *ip_ptr)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b086      	sub	sp, #24
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d004      	beq.n	800e4d8 <_nxe_tcp_enable+0x18>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	4a15      	ldr	r2, [pc, #84]	; (800e528 <_nxe_tcp_enable+0x68>)
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	d001      	beq.n	800e4dc <_nxe_tcp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 800e4d8:	2307      	movs	r3, #7
 800e4da:	e020      	b.n	800e51e <_nxe_tcp_enable+0x5e>
    }

    /* Check to see if TCP is already enabled.  */
    if (ip_ptr -> nx_ip_tcp_packet_receive)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d001      	beq.n	800e4ea <_nxe_tcp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 800e4e6:	2315      	movs	r3, #21
 800e4e8:	e019      	b.n	800e51e <_nxe_tcp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e4ea:	f3ef 8305 	mrs	r3, IPSR
 800e4ee:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e4f0:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 800e4f2:	4b0e      	ldr	r3, [pc, #56]	; (800e52c <_nxe_tcp_enable+0x6c>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	4313      	orrs	r3, r2
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d00b      	beq.n	800e514 <_nxe_tcp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e4fc:	f3ef 8305 	mrs	r3, IPSR
 800e500:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800e502:	68fa      	ldr	r2, [r7, #12]
 800e504:	4b09      	ldr	r3, [pc, #36]	; (800e52c <_nxe_tcp_enable+0x6c>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4313      	orrs	r3, r2
 800e50a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e50e:	d201      	bcs.n	800e514 <_nxe_tcp_enable+0x54>
 800e510:	2311      	movs	r3, #17
 800e512:	e004      	b.n	800e51e <_nxe_tcp_enable+0x5e>

    /* Call actual TCP enable function.  */
    status =  _nx_tcp_enable(ip_ptr);
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f7fb fc31 	bl	8009d7c <_nx_tcp_enable>
 800e51a:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800e51c:	697b      	ldr	r3, [r7, #20]
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3718      	adds	r7, #24
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	49502020 	.word	0x49502020
 800e52c:	20000088 	.word	0x20000088

0800e530 <_nxe_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_enable(NX_IP *ip_ptr)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b086      	sub	sp, #24
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d004      	beq.n	800e548 <_nxe_udp_enable+0x18>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	4a15      	ldr	r2, [pc, #84]	; (800e598 <_nxe_udp_enable+0x68>)
 800e544:	4293      	cmp	r3, r2
 800e546:	d001      	beq.n	800e54c <_nxe_udp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 800e548:	2307      	movs	r3, #7
 800e54a:	e020      	b.n	800e58e <_nxe_udp_enable+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (ip_ptr -> nx_ip_udp_packet_receive)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800e552:	2b00      	cmp	r3, #0
 800e554:	d001      	beq.n	800e55a <_nxe_udp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 800e556:	2315      	movs	r3, #21
 800e558:	e019      	b.n	800e58e <_nxe_udp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e55a:	f3ef 8305 	mrs	r3, IPSR
 800e55e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e560:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 800e562:	4b0e      	ldr	r3, [pc, #56]	; (800e59c <_nxe_udp_enable+0x6c>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	4313      	orrs	r3, r2
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d00b      	beq.n	800e584 <_nxe_udp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e56c:	f3ef 8305 	mrs	r3, IPSR
 800e570:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800e572:	68fa      	ldr	r2, [r7, #12]
 800e574:	4b09      	ldr	r3, [pc, #36]	; (800e59c <_nxe_udp_enable+0x6c>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	4313      	orrs	r3, r2
 800e57a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e57e:	d201      	bcs.n	800e584 <_nxe_udp_enable+0x54>
 800e580:	2311      	movs	r3, #17
 800e582:	e004      	b.n	800e58e <_nxe_udp_enable+0x5e>

    /* Call actual UDP enable function.  */
    status =  _nx_udp_enable(ip_ptr);
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f7fe fcbb 	bl	800cf00 <_nx_udp_enable>
 800e58a:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800e58c:	697b      	ldr	r3, [r7, #20]
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3718      	adds	r7, #24
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	49502020 	.word	0x49502020
 800e59c:	20000088 	.word	0x20000088

0800e5a0 <_nxe_udp_socket_bind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d004      	beq.n	800e5bc <_nxe_udp_socket_bind+0x1c>
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	4a19      	ldr	r2, [pc, #100]	; (800e61c <_nxe_udp_socket_bind+0x7c>)
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	d001      	beq.n	800e5c0 <_nxe_udp_socket_bind+0x20>
    {
        return(NX_PTR_ERROR);
 800e5bc:	2307      	movs	r3, #7
 800e5be:	e028      	b.n	800e612 <_nxe_udp_socket_bind+0x72>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d101      	bne.n	800e5d0 <_nxe_udp_socket_bind+0x30>
    {
        return(NX_NOT_ENABLED);
 800e5cc:	2314      	movs	r3, #20
 800e5ce:	e020      	b.n	800e612 <_nxe_udp_socket_bind+0x72>
    }

    /* Check for an invalid port.  */
    if (((ULONG)port) > (ULONG)NX_MAX_PORT)
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5d6:	d301      	bcc.n	800e5dc <_nxe_udp_socket_bind+0x3c>
    {
        return(NX_INVALID_PORT);
 800e5d8:	2346      	movs	r3, #70	; 0x46
 800e5da:	e01a      	b.n	800e612 <_nxe_udp_socket_bind+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e5dc:	f3ef 8305 	mrs	r3, IPSR
 800e5e0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e5e2:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800e5e4:	4b0e      	ldr	r3, [pc, #56]	; (800e620 <_nxe_udp_socket_bind+0x80>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4313      	orrs	r3, r2
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d108      	bne.n	800e600 <_nxe_udp_socket_bind+0x60>
 800e5ee:	4b0d      	ldr	r3, [pc, #52]	; (800e624 <_nxe_udp_socket_bind+0x84>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d004      	beq.n	800e600 <_nxe_udp_socket_bind+0x60>
 800e5f6:	4b0b      	ldr	r3, [pc, #44]	; (800e624 <_nxe_udp_socket_bind+0x84>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4a0b      	ldr	r2, [pc, #44]	; (800e628 <_nxe_udp_socket_bind+0x88>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d101      	bne.n	800e604 <_nxe_udp_socket_bind+0x64>
 800e600:	2311      	movs	r3, #17
 800e602:	e006      	b.n	800e612 <_nxe_udp_socket_bind+0x72>

    /* Call actual UDP socket bind function.  */
    status =  _nx_udp_socket_bind(socket_ptr, port, wait_option);
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	68b9      	ldr	r1, [r7, #8]
 800e608:	68f8      	ldr	r0, [r7, #12]
 800e60a:	f7fe ff35 	bl	800d478 <_nx_udp_socket_bind>
 800e60e:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800e610:	697b      	ldr	r3, [r7, #20]
}
 800e612:	4618      	mov	r0, r3
 800e614:	3718      	adds	r7, #24
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	55445020 	.word	0x55445020
 800e620:	20000088 	.word	0x20000088
 800e624:	20008094 	.word	0x20008094
 800e628:	200081dc 	.word	0x200081dc

0800e62c <_nxe_udp_socket_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                             ULONG type_of_service, ULONG fragment, UINT time_to_live,
                             ULONG queue_maximum, UINT udp_socket_size)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b08e      	sub	sp, #56	; 0x38
 800e630:	af04      	add	r7, sp, #16
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	607a      	str	r2, [r7, #4]
 800e638:	603b      	str	r3, [r7, #0]
NX_UDP_SOCKET *created_socket;
ULONG          created_count;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) ||
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d00a      	beq.n	800e656 <_nxe_udp_socket_create+0x2a>
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4a3f      	ldr	r2, [pc, #252]	; (800e744 <_nxe_udp_socket_create+0x118>)
 800e646:	4293      	cmp	r3, r2
 800e648:	d105      	bne.n	800e656 <_nxe_udp_socket_create+0x2a>
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d002      	beq.n	800e656 <_nxe_udp_socket_create+0x2a>
        (socket_ptr == NX_NULL) || (udp_socket_size != (UINT)sizeof(NX_UDP_SOCKET)))
 800e650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e652:	2b78      	cmp	r3, #120	; 0x78
 800e654:	d001      	beq.n	800e65a <_nxe_udp_socket_create+0x2e>
    {
        return(NX_PTR_ERROR);
 800e656:	2307      	movs	r3, #7
 800e658:	e06f      	b.n	800e73a <_nxe_udp_socket_create+0x10e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e65a:	f3ef 8305 	mrs	r3, IPSR
 800e65e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e660:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800e662:	4b39      	ldr	r3, [pc, #228]	; (800e748 <_nxe_udp_socket_create+0x11c>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	4313      	orrs	r3, r2
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d009      	beq.n	800e680 <_nxe_udp_socket_create+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e66c:	f3ef 8305 	mrs	r3, IPSR
 800e670:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e672:	697a      	ldr	r2, [r7, #20]
 800e674:	4b34      	ldr	r3, [pc, #208]	; (800e748 <_nxe_udp_socket_create+0x11c>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4313      	orrs	r3, r2
 800e67a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e67e:	d304      	bcc.n	800e68a <_nxe_udp_socket_create+0x5e>
 800e680:	4b32      	ldr	r3, [pc, #200]	; (800e74c <_nxe_udp_socket_create+0x120>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	4a32      	ldr	r2, [pc, #200]	; (800e750 <_nxe_udp_socket_create+0x124>)
 800e686:	4293      	cmp	r3, r2
 800e688:	d101      	bne.n	800e68e <_nxe_udp_socket_create+0x62>
 800e68a:	2311      	movs	r3, #17
 800e68c:	e055      	b.n	800e73a <_nxe_udp_socket_create+0x10e>

    /* Get protection mutex.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e694:	f04f 31ff 	mov.w	r1, #4294967295
 800e698:	4618      	mov	r0, r3
 800e69a:	f001 f991 	bl	800f9c0 <_tx_mutex_get>

    /* Pickup created count and created socket pointer.  */
    created_count =   ip_ptr -> nx_ip_udp_created_sockets_count;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e6a4:	623b      	str	r3, [r7, #32]
    created_socket =  ip_ptr -> nx_ip_udp_created_sockets_ptr;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800e6ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Loop to look for socket already created.  */
    while (created_count--)
 800e6ae:	e00e      	b.n	800e6ce <_nxe_udp_socket_create+0xa2>
    {

        /* Compare the new socket with the already created socket.  */
        if (socket_ptr == created_socket)
 800e6b0:	68ba      	ldr	r2, [r7, #8]
 800e6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d107      	bne.n	800e6c8 <_nxe_udp_socket_create+0x9c>
        {

            /* Error, socket already created!  */

            /* Release protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f001 fbf6 	bl	800feb0 <_tx_mutex_put>

            /* Return error.  */
            return(NX_PTR_ERROR);
 800e6c4:	2307      	movs	r3, #7
 800e6c6:	e038      	b.n	800e73a <_nxe_udp_socket_create+0x10e>
        }

        /* Move to next created socket.  */
        created_socket =  created_socket -> nx_udp_socket_created_next;
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e6cc:	627b      	str	r3, [r7, #36]	; 0x24
    while (created_count--)
 800e6ce:	6a3b      	ldr	r3, [r7, #32]
 800e6d0:	1e5a      	subs	r2, r3, #1
 800e6d2:	623a      	str	r2, [r7, #32]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d1eb      	bne.n	800e6b0 <_nxe_udp_socket_create+0x84>
    }

    /* Release protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f001 fbe6 	bl	800feb0 <_tx_mutex_put>

    /* Check to see if UDP is enabled.  */
    if (!ip_ptr -> nx_ip_udp_packet_receive)
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d101      	bne.n	800e6f2 <_nxe_udp_socket_create+0xc6>
    {
        return(NX_NOT_ENABLED);
 800e6ee:	2314      	movs	r3, #20
 800e6f0:	e023      	b.n	800e73a <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid type of service.  */
    if (type_of_service & ~(NX_IP_TOS_MASK))
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d001      	beq.n	800e700 <_nxe_udp_socket_create+0xd4>
    {
        return(NX_OPTION_ERROR);
 800e6fc:	230a      	movs	r3, #10
 800e6fe:	e01c      	b.n	800e73a <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid fragment option.  */
    if ((fragment != NX_FRAGMENT_OKAY) &&
 800e700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e702:	2b00      	cmp	r3, #0
 800e704:	d005      	beq.n	800e712 <_nxe_udp_socket_create+0xe6>
 800e706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e70c:	d001      	beq.n	800e712 <_nxe_udp_socket_create+0xe6>
        (fragment != NX_DONT_FRAGMENT))
    {
        return(NX_OPTION_ERROR);
 800e70e:	230a      	movs	r3, #10
 800e710:	e013      	b.n	800e73a <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid time to live option.  */
    if (((ULONG)time_to_live) > NX_IP_TIME_TO_LIVE_MASK)
 800e712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e714:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800e718:	d901      	bls.n	800e71e <_nxe_udp_socket_create+0xf2>
    {
        return(NX_OPTION_ERROR);
 800e71a:	230a      	movs	r3, #10
 800e71c:	e00d      	b.n	800e73a <_nxe_udp_socket_create+0x10e>
    }

    /* Call actual UDP socket create function.  */
    status =  _nx_udp_socket_create(ip_ptr, socket_ptr, name, type_of_service,
 800e71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e720:	9302      	str	r3, [sp, #8]
 800e722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e724:	9301      	str	r3, [sp, #4]
 800e726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e728:	9300      	str	r3, [sp, #0]
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	68b9      	ldr	r1, [r7, #8]
 800e730:	68f8      	ldr	r0, [r7, #12]
 800e732:	f7fe ffc3 	bl	800d6bc <_nx_udp_socket_create>
 800e736:	61f8      	str	r0, [r7, #28]
                                    fragment, time_to_live, queue_maximum);

    /* Return completion status.  */
    return(status);
 800e738:	69fb      	ldr	r3, [r7, #28]
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3728      	adds	r7, #40	; 0x28
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	49502020 	.word	0x49502020
 800e748:	20000088 	.word	0x20000088
 800e74c:	20008094 	.word	0x20008094
 800e750:	200081dc 	.word	0x200081dc

0800e754 <_nxe_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b086      	sub	sp, #24
 800e758:	af00      	add	r7, sp, #0
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	60b9      	str	r1, [r7, #8]
 800e75e:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID) || (packet_ptr == NX_NULL))
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d007      	beq.n	800e776 <_nxe_udp_socket_receive+0x22>
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4a17      	ldr	r2, [pc, #92]	; (800e7c8 <_nxe_udp_socket_receive+0x74>)
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d102      	bne.n	800e776 <_nxe_udp_socket_receive+0x22>
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d101      	bne.n	800e77a <_nxe_udp_socket_receive+0x26>
    {
        return(NX_PTR_ERROR);
 800e776:	2307      	movs	r3, #7
 800e778:	e022      	b.n	800e7c0 <_nxe_udp_socket_receive+0x6c>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	68db      	ldr	r3, [r3, #12]
 800e77e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800e782:	2b00      	cmp	r3, #0
 800e784:	d101      	bne.n	800e78a <_nxe_udp_socket_receive+0x36>
    {
        return(NX_NOT_ENABLED);
 800e786:	2314      	movs	r3, #20
 800e788:	e01a      	b.n	800e7c0 <_nxe_udp_socket_receive+0x6c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e78a:	f3ef 8305 	mrs	r3, IPSR
 800e78e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e790:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800e792:	4b0e      	ldr	r3, [pc, #56]	; (800e7cc <_nxe_udp_socket_receive+0x78>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4313      	orrs	r3, r2
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d108      	bne.n	800e7ae <_nxe_udp_socket_receive+0x5a>
 800e79c:	4b0c      	ldr	r3, [pc, #48]	; (800e7d0 <_nxe_udp_socket_receive+0x7c>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d004      	beq.n	800e7ae <_nxe_udp_socket_receive+0x5a>
 800e7a4:	4b0a      	ldr	r3, [pc, #40]	; (800e7d0 <_nxe_udp_socket_receive+0x7c>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4a0a      	ldr	r2, [pc, #40]	; (800e7d4 <_nxe_udp_socket_receive+0x80>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d101      	bne.n	800e7b2 <_nxe_udp_socket_receive+0x5e>
 800e7ae:	2311      	movs	r3, #17
 800e7b0:	e006      	b.n	800e7c0 <_nxe_udp_socket_receive+0x6c>

    /* Call actual UDP socket receive function.  */
    status =  _nx_udp_socket_receive(socket_ptr, packet_ptr, wait_option);
 800e7b2:	687a      	ldr	r2, [r7, #4]
 800e7b4:	68b9      	ldr	r1, [r7, #8]
 800e7b6:	68f8      	ldr	r0, [r7, #12]
 800e7b8:	f7ff f810 	bl	800d7dc <_nx_udp_socket_receive>
 800e7bc:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800e7be:	697b      	ldr	r3, [r7, #20]
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3718      	adds	r7, #24
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}
 800e7c8:	55445020 	.word	0x55445020
 800e7cc:	20000088 	.word	0x20000088
 800e7d0:	20008094 	.word	0x20008094
 800e7d4:	200081dc 	.word	0x200081dc

0800e7d8 <_nxe_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr_ptr,
                           ULONG ip_address, UINT port)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b088      	sub	sp, #32
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	607a      	str	r2, [r7, #4]
 800e7e4:	603b      	str	r3, [r7, #0]
NX_PACKET *packet_ptr;
UINT       status;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	61fb      	str	r3, [r7, #28]

    /* Check for invalid input pointers.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID) ||
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d00c      	beq.n	800e80c <_nxe_udp_socket_send+0x34>
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4a37      	ldr	r2, [pc, #220]	; (800e8d4 <_nxe_udp_socket_send+0xfc>)
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	d107      	bne.n	800e80c <_nxe_udp_socket_send+0x34>
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d004      	beq.n	800e80c <_nxe_udp_socket_send+0x34>
        (packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)))
 800e802:	69fb      	ldr	r3, [r7, #28]
 800e804:	6a1b      	ldr	r3, [r3, #32]
 800e806:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800e80a:	d001      	beq.n	800e810 <_nxe_udp_socket_send+0x38>
    {

        return(NX_PTR_ERROR);
 800e80c:	2307      	movs	r3, #7
 800e80e:	e05d      	b.n	800e8cc <_nxe_udp_socket_send+0xf4>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	68db      	ldr	r3, [r3, #12]
 800e814:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d101      	bne.n	800e820 <_nxe_udp_socket_send+0x48>
    {
        return(NX_NOT_ENABLED);
 800e81c:	2314      	movs	r3, #20
 800e81e:	e055      	b.n	800e8cc <_nxe_udp_socket_send+0xf4>
    }

    /* Check for invalid IP address.  */
    if (ip_address == NX_NULL)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d101      	bne.n	800e82a <_nxe_udp_socket_send+0x52>
    {
        return(NX_IP_ADDRESS_ERROR);
 800e826:	2321      	movs	r3, #33	; 0x21
 800e828:	e050      	b.n	800e8cc <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid port.  */
    if (((ULONG)port) > (ULONG)NX_MAX_PORT)
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e830:	d301      	bcc.n	800e836 <_nxe_udp_socket_send+0x5e>
    {
        return(NX_INVALID_PORT);
 800e832:	2346      	movs	r3, #70	; 0x46
 800e834:	e04a      	b.n	800e8cc <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    if ((INT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_data_start) < (INT)(sizeof(NX_IPV4_HEADER) + sizeof(NX_UDP_HEADER)))
 800e836:	69fb      	ldr	r3, [r7, #28]
 800e838:	689a      	ldr	r2, [r3, #8]
 800e83a:	69fb      	ldr	r3, [r7, #28]
 800e83c:	691b      	ldr	r3, [r3, #16]
 800e83e:	1ad3      	subs	r3, r2, r3
 800e840:	2b1b      	cmp	r3, #27
 800e842:	dc0d      	bgt.n	800e860 <_nxe_udp_socket_send+0x88>
    {

#ifndef NX_DISABLE_UDP_INFO
        /* Increment the total UDP invalid packet count.  */
        (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	68db      	ldr	r3, [r3, #12]
 800e848:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e84c:	3201      	adds	r2, #1
 800e84e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Increment the total UDP invalid packet count for this socket.  */
        socket_ptr -> nx_udp_socket_invalid_packets++;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	6a1b      	ldr	r3, [r3, #32]
 800e856:	1c5a      	adds	r2, r3, #1
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	621a      	str	r2, [r3, #32]
#endif

        /* Return error code.  */
        return(NX_UNDERFLOW);
 800e85c:	2302      	movs	r3, #2
 800e85e:	e035      	b.n	800e8cc <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800e860:	69fb      	ldr	r3, [r7, #28]
 800e862:	68da      	ldr	r2, [r3, #12]
 800e864:	69fb      	ldr	r3, [r7, #28]
 800e866:	695b      	ldr	r3, [r3, #20]
 800e868:	429a      	cmp	r2, r3
 800e86a:	d90d      	bls.n	800e888 <_nxe_udp_socket_send+0xb0>
    {

#ifndef NX_DISABLE_UDP_INFO
        /* Increment the total UDP invalid packet count.  */
        (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e874:	3201      	adds	r2, #1
 800e876:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Increment the total UDP invalid packet count for this socket.  */
        socket_ptr -> nx_udp_socket_invalid_packets++;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	6a1b      	ldr	r3, [r3, #32]
 800e87e:	1c5a      	adds	r2, r3, #1
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	621a      	str	r2, [r3, #32]
#endif

        /* Return error code.  */
        return(NX_OVERFLOW);
 800e884:	2303      	movs	r3, #3
 800e886:	e021      	b.n	800e8cc <_nxe_udp_socket_send+0xf4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e888:	f3ef 8305 	mrs	r3, IPSR
 800e88c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e88e:	697a      	ldr	r2, [r7, #20]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800e890:	4b11      	ldr	r3, [pc, #68]	; (800e8d8 <_nxe_udp_socket_send+0x100>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4313      	orrs	r3, r2
 800e896:	2b00      	cmp	r3, #0
 800e898:	d108      	bne.n	800e8ac <_nxe_udp_socket_send+0xd4>
 800e89a:	4b10      	ldr	r3, [pc, #64]	; (800e8dc <_nxe_udp_socket_send+0x104>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d004      	beq.n	800e8ac <_nxe_udp_socket_send+0xd4>
 800e8a2:	4b0e      	ldr	r3, [pc, #56]	; (800e8dc <_nxe_udp_socket_send+0x104>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	4a0e      	ldr	r2, [pc, #56]	; (800e8e0 <_nxe_udp_socket_send+0x108>)
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	d101      	bne.n	800e8b0 <_nxe_udp_socket_send+0xd8>
 800e8ac:	2311      	movs	r3, #17
 800e8ae:	e00d      	b.n	800e8cc <_nxe_udp_socket_send+0xf4>

    /* Call actual UDP socket send function.  */
    status =  _nx_udp_socket_send(socket_ptr, packet_ptr, ip_address, port);
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	69f9      	ldr	r1, [r7, #28]
 800e8b6:	68f8      	ldr	r0, [r7, #12]
 800e8b8:	f7ff f8fe 	bl	800dab8 <_nx_udp_socket_send>
 800e8bc:	61b8      	str	r0, [r7, #24]

    /* Determine if the packet send was successful.  */
    if (status == NX_SUCCESS)
 800e8be:	69bb      	ldr	r3, [r7, #24]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d102      	bne.n	800e8ca <_nxe_udp_socket_send+0xf2>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800e8ca:	69bb      	ldr	r3, [r7, #24]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3720      	adds	r7, #32
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	55445020 	.word	0x55445020
 800e8d8:	20000088 	.word	0x20000088
 800e8dc:	20008094 	.word	0x20008094
 800e8e0:	200081dc 	.word	0x200081dc

0800e8e4 <_nxe_udp_source_extract>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_source_extract(NX_PACKET *packet_ptr, ULONG *ip_address, UINT *port)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b086      	sub	sp, #24
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	60b9      	str	r1, [r7, #8]
 800e8ee:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((packet_ptr == NX_NULL) || (ip_address == NX_NULL) || (port == NX_NULL))
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d005      	beq.n	800e902 <_nxe_udp_source_extract+0x1e>
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d002      	beq.n	800e902 <_nxe_udp_source_extract+0x1e>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d101      	bne.n	800e906 <_nxe_udp_source_extract+0x22>
    {

        return(NX_PTR_ERROR);
 800e902:	2307      	movs	r3, #7
 800e904:	e01c      	b.n	800e940 <_nxe_udp_source_extract+0x5c>
    }

    /* Check for invalid packet pointer.  */
    if (packet_ptr -> nx_packet_ip_header == NX_NULL)
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d101      	bne.n	800e912 <_nxe_udp_source_extract+0x2e>
    {

        return(NX_INVALID_PACKET);
 800e90e:	2312      	movs	r3, #18
 800e910:	e016      	b.n	800e940 <_nxe_udp_source_extract+0x5c>
    }


    if (packet_ptr -> nx_packet_ip_version != NX_IP_VERSION_V4)
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e918:	2b04      	cmp	r3, #4
 800e91a:	d001      	beq.n	800e920 <_nxe_udp_source_extract+0x3c>
    {

        return(NX_INVALID_PACKET);
 800e91c:	2312      	movs	r3, #18
 800e91e:	e00f      	b.n	800e940 <_nxe_udp_source_extract+0x5c>
    }

    /* Check to see if the packet has enough room in front for backing up.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    if ((UINT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_data_start) <
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	689a      	ldr	r2, [r3, #8]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	691b      	ldr	r3, [r3, #16]
 800e928:	1ad3      	subs	r3, r2, r3
 800e92a:	2b1b      	cmp	r3, #27
 800e92c:	d801      	bhi.n	800e932 <_nxe_udp_source_extract+0x4e>
        (sizeof(NX_UDP_HEADER) + sizeof(NX_IPV4_HEADER)))
    {

        return(NX_INVALID_PACKET);
 800e92e:	2312      	movs	r3, #18
 800e930:	e006      	b.n	800e940 <_nxe_udp_source_extract+0x5c>
    }

    /* Call actual UDP source extract function.  */
    status =  _nx_udp_source_extract(packet_ptr, ip_address, port);
 800e932:	687a      	ldr	r2, [r7, #4]
 800e934:	68b9      	ldr	r1, [r7, #8]
 800e936:	68f8      	ldr	r0, [r7, #12]
 800e938:	f7ff f8d6 	bl	800dae8 <_nx_udp_source_extract>
 800e93c:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800e93e:	697b      	ldr	r3, [r7, #20]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800e940:	4618      	mov	r0, r3
 800e942:	3718      	adds	r7, #24
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b096      	sub	sp, #88	; 0x58
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	60f8      	str	r0, [r7, #12]
 800e950:	60b9      	str	r1, [r7, #8]
 800e952:	607a      	str	r2, [r7, #4]
 800e954:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	3303      	adds	r3, #3
 800e95a:	f023 0303 	bic.w	r3, r3, #3
 800e95e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e960:	f3ef 8310 	mrs	r3, PRIMASK
 800e964:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800e966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800e968:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800e96a:	b672      	cpsid	i
    return(int_posture);
 800e96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800e96e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800e970:	4b55      	ldr	r3, [pc, #340]	; (800eac8 <_tx_byte_allocate+0x180>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800e976:	2300      	movs	r3, #0
 800e978:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e97e:	621a      	str	r2, [r3, #32]
 800e980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e982:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e986:	f383 8810 	msr	PRIMASK, r3
}
 800e98a:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800e98c:	6879      	ldr	r1, [r7, #4]
 800e98e:	68f8      	ldr	r0, [r7, #12]
 800e990:	f000 f9b2 	bl	800ecf8 <_tx_byte_pool_search>
 800e994:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e996:	f3ef 8310 	mrs	r3, PRIMASK
 800e99a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e99e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e9a0:	b672      	cpsid	i
    return(int_posture);
 800e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800e9a4:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800e9a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d002      	beq.n	800e9b2 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e9b0:	e006      	b.n	800e9c0 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	6a1b      	ldr	r3, [r3, #32]
 800e9b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d101      	bne.n	800e9c0 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800e9bc:	2301      	movs	r3, #1
 800e9be:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800e9c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d0d9      	beq.n	800e97a <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9ca:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800e9cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d008      	beq.n	800e9e4 <_tx_byte_allocate+0x9c>
 800e9d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9d4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e9d6:	6a3b      	ldr	r3, [r7, #32]
 800e9d8:	f383 8810 	msr	PRIMASK, r3
}
 800e9dc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	653b      	str	r3, [r7, #80]	; 0x50
 800e9e2:	e06c      	b.n	800eabe <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d061      	beq.n	800eaae <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800e9ea:	4b38      	ldr	r3, [pc, #224]	; (800eacc <_tx_byte_allocate+0x184>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d007      	beq.n	800ea02 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800e9f2:	2310      	movs	r3, #16
 800e9f4:	653b      	str	r3, [r7, #80]	; 0x50
 800e9f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9f8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	f383 8810 	msr	PRIMASK, r3
}
 800ea00:	e05d      	b.n	800eabe <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800ea02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea04:	4a32      	ldr	r2, [pc, #200]	; (800ead0 <_tx_byte_allocate+0x188>)
 800ea06:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800ea08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea0a:	68fa      	ldr	r2, [r7, #12]
 800ea0c:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800ea0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea10:	68ba      	ldr	r2, [r7, #8]
 800ea12:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800ea14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea16:	687a      	ldr	r2, [r7, #4]
 800ea18:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800ea1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ea20:	1c5a      	adds	r2, r3, #1
 800ea22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea24:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea2c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea32:	1c5a      	adds	r2, r3, #1
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800ea38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d109      	bne.n	800ea52 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea42:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800ea44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea48:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800ea4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea4e:	675a      	str	r2, [r3, #116]	; 0x74
 800ea50:	e011      	b.n	800ea76 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea56:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800ea58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea5c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800ea5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea62:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800ea64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea68:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800ea6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea6e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800ea70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea74:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800ea76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea78:	2209      	movs	r2, #9
 800ea7a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ea7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea7e:	2201      	movs	r2, #1
 800ea80:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ea82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea84:	683a      	ldr	r2, [r7, #0]
 800ea86:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800ea88:	4b10      	ldr	r3, [pc, #64]	; (800eacc <_tx_byte_allocate+0x184>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	4a0f      	ldr	r2, [pc, #60]	; (800eacc <_tx_byte_allocate+0x184>)
 800ea90:	6013      	str	r3, [r2, #0]
 800ea92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea94:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	f383 8810 	msr	PRIMASK, r3
}
 800ea9c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800ea9e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800eaa0:	f002 f8bc 	bl	8010c1c <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800eaa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eaaa:	653b      	str	r3, [r7, #80]	; 0x50
 800eaac:	e007      	b.n	800eabe <_tx_byte_allocate+0x176>
 800eaae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eab0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	f383 8810 	msr	PRIMASK, r3
}
 800eab8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800eaba:	2310      	movs	r3, #16
 800eabc:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800eabe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3758      	adds	r7, #88	; 0x58
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	20008094 	.word	0x20008094
 800eacc:	2000812c 	.word	0x2000812c
 800ead0:	0800ead5 	.word	0x0800ead5

0800ead4 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b08e      	sub	sp, #56	; 0x38
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eade:	f3ef 8310 	mrs	r3, PRIMASK
 800eae2:	623b      	str	r3, [r7, #32]
    return(posture);
 800eae4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800eae6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eae8:	b672      	cpsid	i
    return(int_posture);
 800eaea:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800eaec:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eaf2:	4a33      	ldr	r2, [pc, #204]	; (800ebc0 <_tx_byte_pool_cleanup+0xec>)
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	d158      	bne.n	800ebaa <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eafe:	683a      	ldr	r2, [r7, #0]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d152      	bne.n	800ebaa <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb08:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800eb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d04c      	beq.n	800ebaa <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800eb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	4a2b      	ldr	r2, [pc, #172]	; (800ebc4 <_tx_byte_pool_cleanup+0xf0>)
 800eb16:	4293      	cmp	r3, r2
 800eb18:	d147      	bne.n	800ebaa <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800eb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d043      	beq.n	800ebaa <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2200      	movs	r2, #0
 800eb26:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800eb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb2c:	1e5a      	subs	r2, r3, #1
 800eb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb30:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800eb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb36:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800eb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d103      	bne.n	800eb46 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb40:	2200      	movs	r2, #0
 800eb42:	625a      	str	r2, [r3, #36]	; 0x24
 800eb44:	e013      	b.n	800eb6e <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb4a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb50:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800eb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb56:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800eb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb5c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800eb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d102      	bne.n	800eb6e <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800eb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb6c:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb72:	2b09      	cmp	r3, #9
 800eb74:	d119      	bne.n	800ebaa <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2210      	movs	r2, #16
 800eb7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800eb7e:	4b12      	ldr	r3, [pc, #72]	; (800ebc8 <_tx_byte_pool_cleanup+0xf4>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	3301      	adds	r3, #1
 800eb84:	4a10      	ldr	r2, [pc, #64]	; (800ebc8 <_tx_byte_pool_cleanup+0xf4>)
 800eb86:	6013      	str	r3, [r2, #0]
 800eb88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb8a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	f383 8810 	msr	PRIMASK, r3
}
 800eb92:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f001 ff41 	bl	8010a1c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eb9a:	f3ef 8310 	mrs	r3, PRIMASK
 800eb9e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800eba0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800eba2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eba4:	b672      	cpsid	i
    return(int_posture);
 800eba6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800eba8:	637b      	str	r3, [r7, #52]	; 0x34
 800ebaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebac:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f383 8810 	msr	PRIMASK, r3
}
 800ebb4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ebb6:	bf00      	nop
 800ebb8:	3738      	adds	r7, #56	; 0x38
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	0800ead5 	.word	0x0800ead5
 800ebc4:	42595445 	.word	0x42595445
 800ebc8:	2000812c 	.word	0x2000812c

0800ebcc <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b08e      	sub	sp, #56	; 0x38
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	60f8      	str	r0, [r7, #12]
 800ebd4:	60b9      	str	r1, [r7, #8]
 800ebd6:	607a      	str	r2, [r7, #4]
 800ebd8:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800ebda:	2234      	movs	r2, #52	; 0x34
 800ebdc:	2100      	movs	r1, #0
 800ebde:	68f8      	ldr	r0, [r7, #12]
 800ebe0:	f003 fb6a 	bl	80122b8 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	f023 0303 	bic.w	r3, r3, #3
 800ebea:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	68ba      	ldr	r2, [r7, #8]
 800ebf0:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	687a      	ldr	r2, [r7, #4]
 800ebf6:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	683a      	ldr	r2, [r7, #0]
 800ebfc:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	687a      	ldr	r2, [r7, #4]
 800ec08:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	f1a3 0208 	sub.w	r2, r3, #8
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2202      	movs	r2, #2
 800ec18:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800ec1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	4413      	add	r3, r2
 800ec24:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800ec26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec28:	3b04      	subs	r3, #4
 800ec2a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800ec30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec32:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800ec34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec38:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800ec3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec3c:	3b04      	subs	r3, #4
 800ec3e:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800ec40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec42:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ec44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800ec4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec50:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800ec52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec56:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800ec5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec5e:	3304      	adds	r3, #4
 800ec60:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800ec62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec64:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800ec66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec68:	4a1f      	ldr	r2, [pc, #124]	; (800ece8 <_tx_byte_pool_create+0x11c>)
 800ec6a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ec72:	f3ef 8310 	mrs	r3, PRIMASK
 800ec76:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ec78:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ec7a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ec7c:	b672      	cpsid	i
    return(int_posture);
 800ec7e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800ec80:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	4a19      	ldr	r2, [pc, #100]	; (800ecec <_tx_byte_pool_create+0x120>)
 800ec86:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800ec88:	4b19      	ldr	r3, [pc, #100]	; (800ecf0 <_tx_byte_pool_create+0x124>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d109      	bne.n	800eca4 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800ec90:	4a18      	ldr	r2, [pc, #96]	; (800ecf4 <_tx_byte_pool_create+0x128>)
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	68fa      	ldr	r2, [r7, #12]
 800ec9a:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	68fa      	ldr	r2, [r7, #12]
 800eca0:	631a      	str	r2, [r3, #48]	; 0x30
 800eca2:	e011      	b.n	800ecc8 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800eca4:	4b13      	ldr	r3, [pc, #76]	; (800ecf4 <_tx_byte_pool_create+0x128>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800ecaa:	6a3b      	ldr	r3, [r7, #32]
 800ecac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecae:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800ecb0:	6a3b      	ldr	r3, [r7, #32]
 800ecb2:	68fa      	ldr	r2, [r7, #12]
 800ecb4:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800ecb6:	69fb      	ldr	r3, [r7, #28]
 800ecb8:	68fa      	ldr	r2, [r7, #12]
 800ecba:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	69fa      	ldr	r2, [r7, #28]
 800ecc0:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	6a3a      	ldr	r2, [r7, #32]
 800ecc6:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800ecc8:	4b09      	ldr	r3, [pc, #36]	; (800ecf0 <_tx_byte_pool_create+0x124>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	3301      	adds	r3, #1
 800ecce:	4a08      	ldr	r2, [pc, #32]	; (800ecf0 <_tx_byte_pool_create+0x124>)
 800ecd0:	6013      	str	r3, [r2, #0]
 800ecd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	f383 8810 	msr	PRIMASK, r3
}
 800ecdc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ecde:	2300      	movs	r3, #0
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3738      	adds	r7, #56	; 0x38
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	ffffeeee 	.word	0xffffeeee
 800ecec:	42595445 	.word	0x42595445
 800ecf0:	20008088 	.word	0x20008088
 800ecf4:	20008084 	.word	0x20008084

0800ecf8 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b097      	sub	sp, #92	; 0x5c
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800ed02:	2300      	movs	r3, #0
 800ed04:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ed06:	f3ef 8310 	mrs	r3, PRIMASK
 800ed0a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800ed0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800ed0e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ed10:	b672      	cpsid	i
    return(int_posture);
 800ed12:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800ed14:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	689a      	ldr	r2, [r3, #8]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	68db      	ldr	r3, [r3, #12]
 800ed1e:	3b02      	subs	r3, #2
 800ed20:	00db      	lsls	r3, r3, #3
 800ed22:	4413      	add	r3, r2
 800ed24:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800ed26:	683a      	ldr	r2, [r7, #0]
 800ed28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d308      	bcc.n	800ed40 <_tx_byte_pool_search+0x48>
 800ed2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed30:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	f383 8810 	msr	PRIMASK, r3
}
 800ed38:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	653b      	str	r3, [r7, #80]	; 0x50
 800ed3e:	e0dd      	b.n	800eefc <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800ed40:	4b72      	ldr	r3, [pc, #456]	; (800ef0c <_tx_byte_pool_search+0x214>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed4a:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	695b      	ldr	r3, [r3, #20]
 800ed50:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	68db      	ldr	r3, [r3, #12]
 800ed56:	3301      	adds	r3, #1
 800ed58:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800ed5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed60:	3304      	adds	r3, #4
 800ed62:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ed64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed66:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800ed68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a68      	ldr	r2, [pc, #416]	; (800ef10 <_tx_byte_pool_search+0x218>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d143      	bne.n	800edfa <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800ed72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d104      	bne.n	800ed82 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed7c:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800ed7e:	2301      	movs	r3, #1
 800ed80:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ed82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed84:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800ed8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed90:	1ad3      	subs	r3, r2, r3
 800ed92:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800ed94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed96:	3b08      	subs	r3, #8
 800ed98:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800ed9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d257      	bcs.n	800ee52 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800eda2:	2300      	movs	r3, #0
 800eda4:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800eda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda8:	3304      	adds	r3, #4
 800edaa:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800edac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edae:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800edb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4a56      	ldr	r2, [pc, #344]	; (800ef10 <_tx_byte_pool_search+0x218>)
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d113      	bne.n	800ede2 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800edba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edbc:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800edbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc4:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	68db      	ldr	r3, [r3, #12]
 800edca:	1e5a      	subs	r2, r3, #1
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	695b      	ldr	r3, [r3, #20]
 800edd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d114      	bne.n	800ee04 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800edde:	615a      	str	r2, [r3, #20]
 800ede0:	e010      	b.n	800ee04 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ede2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede4:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800ede6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800edec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d008      	beq.n	800ee04 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800edf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edf4:	3b01      	subs	r3, #1
 800edf6:	64bb      	str	r3, [r7, #72]	; 0x48
 800edf8:	e004      	b.n	800ee04 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800edfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edfc:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800edfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800ee04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d002      	beq.n	800ee10 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800ee0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee12:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ee14:	693b      	ldr	r3, [r7, #16]
 800ee16:	f383 8810 	msr	PRIMASK, r3
}
 800ee1a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ee1c:	f3ef 8310 	mrs	r3, PRIMASK
 800ee20:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ee22:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ee24:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ee26:	b672      	cpsid	i
    return(int_posture);
 800ee28:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800ee2a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6a1b      	ldr	r3, [r3, #32]
 800ee30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d009      	beq.n	800ee4a <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	695b      	ldr	r3, [r3, #20]
 800ee3a:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	68db      	ldr	r3, [r3, #12]
 800ee40:	3301      	adds	r3, #1
 800ee42:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee48:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800ee4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d186      	bne.n	800ed5e <_tx_byte_pool_search+0x66>
 800ee50:	e000      	b.n	800ee54 <_tx_byte_pool_search+0x15c>
                    break;
 800ee52:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800ee54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d048      	beq.n	800eeec <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800ee5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	1ad3      	subs	r3, r2, r3
 800ee60:	2b13      	cmp	r3, #19
 800ee62:	d91e      	bls.n	800eea2 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	3308      	adds	r3, #8
 800ee68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee6a:	4413      	add	r3, r2
 800ee6c:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ee6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee70:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ee72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee74:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800ee76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee78:	681a      	ldr	r2, [r3, #0]
 800ee7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7c:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800ee7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee80:	3304      	adds	r3, #4
 800ee82:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ee84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee86:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800ee88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee8a:	4a21      	ldr	r2, [pc, #132]	; (800ef10 <_tx_byte_pool_search+0x218>)
 800ee8c:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	68db      	ldr	r3, [r3, #12]
 800ee92:	1c5a      	adds	r2, r3, #1
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800ee98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee9c:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800eea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eea4:	3304      	adds	r3, #4
 800eea6:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800eea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeaa:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800eeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	689a      	ldr	r2, [r3, #8]
 800eeb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeb8:	1ad3      	subs	r3, r2, r3
 800eeba:	f1a3 0208 	sub.w	r2, r3, #8
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	695b      	ldr	r3, [r3, #20]
 800eec6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d105      	bne.n	800eed8 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800eecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eece:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800eed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed2:	681a      	ldr	r2, [r3, #0]
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	615a      	str	r2, [r3, #20]
 800eed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eeda:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f383 8810 	msr	PRIMASK, r3
}
 800eee2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800eee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eee6:	3308      	adds	r3, #8
 800eee8:	653b      	str	r3, [r7, #80]	; 0x50
 800eeea:	e007      	b.n	800eefc <_tx_byte_pool_search+0x204>
 800eeec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eeee:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	f383 8810 	msr	PRIMASK, r3
}
 800eef6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800eef8:	2300      	movs	r3, #0
 800eefa:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800eefc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	375c      	adds	r7, #92	; 0x5c
 800ef02:	46bd      	mov	sp, r7
 800ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef08:	4770      	bx	lr
 800ef0a:	bf00      	nop
 800ef0c:	20008094 	.word	0x20008094
 800ef10:	ffffeeee 	.word	0xffffeeee

0800ef14 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b08e      	sub	sp, #56	; 0x38
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ef1e:	f3ef 8310 	mrs	r3, PRIMASK
 800ef22:	61fb      	str	r3, [r7, #28]
    return(posture);
 800ef24:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800ef26:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ef28:	b672      	cpsid	i
    return(int_posture);
 800ef2a:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 800ef2c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef32:	4a38      	ldr	r2, [pc, #224]	; (800f014 <_tx_event_flags_cleanup+0x100>)
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d162      	bne.n	800effe <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ef3e:	683a      	ldr	r2, [r7, #0]
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d15c      	bne.n	800effe <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef48:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 800ef4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d056      	beq.n	800effe <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 800ef50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4a30      	ldr	r2, [pc, #192]	; (800f018 <_tx_event_flags_cleanup+0x104>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d151      	bne.n	800effe <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800ef5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5c:	695b      	ldr	r3, [r3, #20]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d04d      	beq.n	800effe <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2200      	movs	r2, #0
 800ef66:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800ef68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6a:	695b      	ldr	r3, [r3, #20]
 800ef6c:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 800ef6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef70:	691b      	ldr	r3, [r3, #16]
 800ef72:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 800ef74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d020      	beq.n	800efbc <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 800ef7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef7c:	3b01      	subs	r3, #1
 800ef7e:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 800ef80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef84:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800ef86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d103      	bne.n	800ef94 <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800ef8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8e:	2200      	movs	r2, #0
 800ef90:	611a      	str	r2, [r3, #16]
 800ef92:	e016      	b.n	800efc2 <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef98:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef9e:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800efa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa2:	6a3a      	ldr	r2, [r7, #32]
 800efa4:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800efa6:	6a3b      	ldr	r3, [r7, #32]
 800efa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efaa:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 800efac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d106      	bne.n	800efc2 <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 800efb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efb8:	611a      	str	r2, [r3, #16]
 800efba:	e002      	b.n	800efc2 <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800efbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efbe:	2201      	movs	r2, #1
 800efc0:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efc6:	2b07      	cmp	r3, #7
 800efc8:	d119      	bne.n	800effe <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2207      	movs	r2, #7
 800efce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800efd2:	4b12      	ldr	r3, [pc, #72]	; (800f01c <_tx_event_flags_cleanup+0x108>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	3301      	adds	r3, #1
 800efd8:	4a10      	ldr	r2, [pc, #64]	; (800f01c <_tx_event_flags_cleanup+0x108>)
 800efda:	6013      	str	r3, [r2, #0]
 800efdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efde:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	f383 8810 	msr	PRIMASK, r3
}
 800efe6:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f001 fd17 	bl	8010a1c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800efee:	f3ef 8310 	mrs	r3, PRIMASK
 800eff2:	617b      	str	r3, [r7, #20]
    return(posture);
 800eff4:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800eff6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eff8:	b672      	cpsid	i
    return(int_posture);
 800effa:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800effc:	637b      	str	r3, [r7, #52]	; 0x34
 800effe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f000:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	f383 8810 	msr	PRIMASK, r3
}
 800f008:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800f00a:	bf00      	nop
 800f00c:	3738      	adds	r7, #56	; 0x38
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	0800ef15 	.word	0x0800ef15
 800f018:	4456444e 	.word	0x4456444e
 800f01c:	2000812c 	.word	0x2000812c

0800f020 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b088      	sub	sp, #32
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800f02a:	2224      	movs	r2, #36	; 0x24
 800f02c:	2100      	movs	r1, #0
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f003 f942 	bl	80122b8 <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	683a      	ldr	r2, [r7, #0]
 800f038:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f03a:	f3ef 8310 	mrs	r3, PRIMASK
 800f03e:	613b      	str	r3, [r7, #16]
    return(posture);
 800f040:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800f042:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f044:	b672      	cpsid	i
    return(int_posture);
 800f046:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800f048:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	4a18      	ldr	r2, [pc, #96]	; (800f0b0 <_tx_event_flags_create+0x90>)
 800f04e:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800f050:	4b18      	ldr	r3, [pc, #96]	; (800f0b4 <_tx_event_flags_create+0x94>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d109      	bne.n	800f06c <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800f058:	4a17      	ldr	r2, [pc, #92]	; (800f0b8 <_tx_event_flags_create+0x98>)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	687a      	ldr	r2, [r7, #4]
 800f062:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	687a      	ldr	r2, [r7, #4]
 800f068:	61da      	str	r2, [r3, #28]
 800f06a:	e011      	b.n	800f090 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800f06c:	4b12      	ldr	r3, [pc, #72]	; (800f0b8 <_tx_event_flags_create+0x98>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	69db      	ldr	r3, [r3, #28]
 800f076:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	687a      	ldr	r2, [r7, #4]
 800f082:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	697a      	ldr	r2, [r7, #20]
 800f088:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	69ba      	ldr	r2, [r7, #24]
 800f08e:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800f090:	4b08      	ldr	r3, [pc, #32]	; (800f0b4 <_tx_event_flags_create+0x94>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	3301      	adds	r3, #1
 800f096:	4a07      	ldr	r2, [pc, #28]	; (800f0b4 <_tx_event_flags_create+0x94>)
 800f098:	6013      	str	r3, [r2, #0]
 800f09a:	69fb      	ldr	r3, [r7, #28]
 800f09c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	f383 8810 	msr	PRIMASK, r3
}
 800f0a4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800f0a6:	2300      	movs	r3, #0
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3720      	adds	r7, #32
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}
 800f0b0:	4456444e 	.word	0x4456444e
 800f0b4:	20008070 	.word	0x20008070
 800f0b8:	2000806c 	.word	0x2000806c

0800f0bc <_tx_event_flags_get>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b096      	sub	sp, #88	; 0x58
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	60b9      	str	r1, [r7, #8]
 800f0c6:	607a      	str	r2, [r7, #4]
 800f0c8:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f0ca:	f3ef 8310 	mrs	r3, PRIMASK
 800f0ce:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800f0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800f0d2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f0d4:	b672      	cpsid	i
    return(int_posture);
 800f0d6:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 800f0d8:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	689b      	ldr	r3, [r3, #8]
 800f0de:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return the actual event flags and apply delayed clearing.  */
    *actual_flags_ptr =  current_flags & ~group_ptr -> tx_event_flags_group_delayed_clear;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	6a1b      	ldr	r3, [r3, #32]
 800f0e4:	43da      	mvns	r2, r3
 800f0e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0e8:	401a      	ands	r2, r3
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	601a      	str	r2, [r3, #0]

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f003 0302 	and.w	r3, r3, #2
 800f0f4:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	6a1b      	ldr	r3, [r3, #32]
 800f0fa:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 800f0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d004      	beq.n	800f10c <_tx_event_flags_get+0x50>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 800f102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f104:	43db      	mvns	r3, r3
 800f106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f108:	4013      	ands	r3, r2
 800f10a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 800f10c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f10e:	2b02      	cmp	r3, #2
 800f110:	d10a      	bne.n	800f128 <_tx_event_flags_get+0x6c>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800f112:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	4013      	ands	r3, r2
 800f118:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 800f11a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	429a      	cmp	r2, r3
 800f120:	d006      	beq.n	800f130 <_tx_event_flags_get+0x74>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 800f122:	2300      	movs	r3, #0
 800f124:	64bb      	str	r3, [r7, #72]	; 0x48
 800f126:	e003      	b.n	800f130 <_tx_event_flags_get+0x74>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800f128:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	4013      	ands	r3, r2
 800f12e:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 800f130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f132:	2b00      	cmp	r3, #0
 800f134:	d026      	beq.n	800f184 <_tx_event_flags_get+0xc8>
    {

        /* Yes, this request can be handled immediately.  */

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f003 0301 	and.w	r3, r3, #1
 800f13c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 800f13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f140:	2b01      	cmp	r3, #1
 800f142:	d11c      	bne.n	800f17e <_tx_event_flags_get+0xc2>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 800f144:	2300      	movs	r3, #0
 800f146:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	695b      	ldr	r3, [r3, #20]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d005      	beq.n	800f15c <_tx_event_flags_get+0xa0>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	691b      	ldr	r3, [r3, #16]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d101      	bne.n	800f15c <_tx_event_flags_get+0xa0>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 800f158:	2301      	movs	r3, #1
 800f15a:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 800f15c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d106      	bne.n	800f170 <_tx_event_flags_get+0xb4>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	6a1a      	ldr	r2, [r3, #32]
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	621a      	str	r2, [r3, #32]
 800f16e:	e006      	b.n	800f17e <_tx_event_flags_get+0xc2>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	689a      	ldr	r2, [r3, #8]
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	43db      	mvns	r3, r3
 800f178:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 800f17e:	2300      	movs	r3, #0
 800f180:	653b      	str	r3, [r7, #80]	; 0x50
 800f182:	e073      	b.n	800f26c <_tx_event_flags_get+0x1b0>
#endif
    else
    {
        /* flags_satisfied is 0.  */
        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800f184:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f186:	2b00      	cmp	r3, #0
 800f188:	d06e      	beq.n	800f268 <_tx_event_flags_get+0x1ac>
        {

            /* Determine if the preempt disable flag is non-zero OR the requested events is 0.  */
            if ((_tx_thread_preempt_disable != ((UINT) 0)) || (requested_flags == (UINT) 0))
 800f18a:	4b3e      	ldr	r3, [pc, #248]	; (800f284 <_tx_event_flags_get+0x1c8>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d102      	bne.n	800f198 <_tx_event_flags_get+0xdc>
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d102      	bne.n	800f19e <_tx_event_flags_get+0xe2>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point,
                   or if requested_flags is 0, return error completion.  */
                status =  TX_NO_EVENTS;
 800f198:	2307      	movs	r3, #7
 800f19a:	653b      	str	r3, [r7, #80]	; 0x50
 800f19c:	e066      	b.n	800f26c <_tx_event_flags_get+0x1b0>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 800f19e:	4b3a      	ldr	r3, [pc, #232]	; (800f288 <_tx_event_flags_get+0x1cc>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 800f1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a6:	4a39      	ldr	r2, [pc, #228]	; (800f28c <_tx_event_flags_get+0x1d0>)
 800f1a8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 800f1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ac:	68ba      	ldr	r2, [r7, #8]
 800f1ae:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 800f1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b2:	687a      	ldr	r2, [r7, #4]
 800f1b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 800f1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ba:	683a      	ldr	r2, [r7, #0]
 800f1bc:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 800f1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c0:	68fa      	ldr	r2, [r7, #12]
 800f1c2:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800f1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f1ca:	1c5a      	adds	r2, r3, #1
 800f1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ce:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	695b      	ldr	r3, [r3, #20]
 800f1d6:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800f1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d109      	bne.n	800f1f2 <_tx_event_flags_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1e2:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 800f1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1e8:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 800f1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1ee:	675a      	str	r2, [r3, #116]	; 0x74
 800f1f0:	e011      	b.n	800f216 <_tx_event_flags_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	691b      	ldr	r3, [r3, #16]
 800f1f6:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800f1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1fc:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800f1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f202:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800f204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f208:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800f20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f20e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800f210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f214:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	695b      	ldr	r3, [r3, #20]
 800f21a:	1c5a      	adds	r2, r3, #1
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 800f220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f222:	2207      	movs	r2, #7
 800f224:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800f226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f228:	2201      	movs	r2, #1
 800f22a:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800f22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f230:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800f232:	4b14      	ldr	r3, [pc, #80]	; (800f284 <_tx_event_flags_get+0x1c8>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	3301      	adds	r3, #1
 800f238:	4a12      	ldr	r2, [pc, #72]	; (800f284 <_tx_event_flags_get+0x1c8>)
 800f23a:	6013      	str	r3, [r2, #0]
 800f23c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f23e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	f383 8810 	msr	PRIMASK, r3
}
 800f246:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800f248:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f24a:	f001 fce7 	bl	8010c1c <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f24e:	f3ef 8310 	mrs	r3, PRIMASK
 800f252:	61fb      	str	r3, [r7, #28]
    return(posture);
 800f254:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800f256:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f258:	b672      	cpsid	i
    return(int_posture);
 800f25a:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 800f25c:	657b      	str	r3, [r7, #84]	; 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800f25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f264:	653b      	str	r3, [r7, #80]	; 0x50
 800f266:	e001      	b.n	800f26c <_tx_event_flags_get+0x1b0>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 800f268:	2307      	movs	r3, #7
 800f26a:	653b      	str	r3, [r7, #80]	; 0x50
 800f26c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f26e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	f383 8810 	msr	PRIMASK, r3
}
 800f276:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800f278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3758      	adds	r7, #88	; 0x58
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	2000812c 	.word	0x2000812c
 800f288:	20008094 	.word	0x20008094
 800f28c:	0800ef15 	.word	0x0800ef15

0800f290 <_tx_event_flags_set>:
/*                                            check logic, resulting in   */
/*                                            version 6.1.11              */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b0a6      	sub	sp, #152	; 0x98
 800f294:	af00      	add	r7, sp, #0
 800f296:	60f8      	str	r0, [r7, #12]
 800f298:	60b9      	str	r1, [r7, #8]
 800f29a:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f29c:	f3ef 8310 	mrs	r3, PRIMASK
 800f2a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800f2a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800f2a4:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800f2a6:	b672      	cpsid	i
    return(int_posture);
 800f2a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800f2aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f003 0302 	and.w	r3, r3, #2
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d023      	beq.n	800f300 <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	695b      	ldr	r3, [r3, #20]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d005      	beq.n	800f2d0 <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	691b      	ldr	r3, [r3, #16]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d101      	bne.n	800f2d0 <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 800f2d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d107      	bne.n	800f2e6 <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	6a1a      	ldr	r2, [r3, #32]
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	43db      	mvns	r3, r3
 800f2de:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	621a      	str	r2, [r3, #32]
 800f2e4:	e005      	b.n	800f2f2 <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	689a      	ldr	r2, [r3, #8]
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	609a      	str	r2, [r3, #8]
 800f2f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f2f6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f2f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2fa:	f383 8810 	msr	PRIMASK, r3
}
 800f2fe:	e1d2      	b.n	800f6a6 <_tx_event_flags_set+0x416>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	689a      	ldr	r2, [r3, #8]
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	6a1b      	ldr	r3, [r3, #32]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d006      	beq.n	800f322 <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	6a1a      	ldr	r2, [r3, #32]
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	43db      	mvns	r3, r3
 800f31c:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 800f322:	2300      	movs	r3, #0
 800f324:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	695b      	ldr	r3, [r3, #20]
 800f32a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	691b      	ldr	r3, [r3, #16]
 800f332:	2b00      	cmp	r3, #0
 800f334:	f000 81a4 	beq.w	800f680 <_tx_event_flags_set+0x3f0>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 800f338:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d167      	bne.n	800f410 <_tx_event_flags_set+0x180>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	691b      	ldr	r3, [r3, #16]
 800f344:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800f34e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f354:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800f356:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f35a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f35e:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 800f360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f362:	f003 0302 	and.w	r3, r3, #2
 800f366:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 800f368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f36a:	2b02      	cmp	r3, #2
 800f36c:	d10a      	bne.n	800f384 <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800f36e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f372:	4013      	ands	r3, r2
 800f374:	67bb      	str	r3, [r7, #120]	; 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 800f376:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d006      	beq.n	800f38c <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 800f37e:	2300      	movs	r3, #0
 800f380:	67bb      	str	r3, [r7, #120]	; 0x78
 800f382:	e003      	b.n	800f38c <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800f384:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f386:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f388:	4013      	ands	r3, r2
 800f38a:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 800f38c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f000 817d 	beq.w	800f68e <_tx_event_flags_set+0x3fe>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800f394:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f39a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 800f39c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f39e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f3a0:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800f3a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f3a4:	f003 0301 	and.w	r3, r3, #1
 800f3a8:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 800f3aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3ac:	2b01      	cmp	r3, #1
 800f3ae:	d106      	bne.n	800f3be <_tx_event_flags_set+0x12e>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	689a      	ldr	r2, [r3, #8]
 800f3b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f3b6:	43db      	mvns	r3, r3
 800f3b8:	401a      	ands	r2, r3
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f3ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800f3d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 800f3dc:	4ba7      	ldr	r3, [pc, #668]	; (800f67c <_tx_event_flags_set+0x3ec>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	4aa6      	ldr	r2, [pc, #664]	; (800f67c <_tx_event_flags_set+0x3ec>)
 800f3e4:	6013      	str	r3, [r2, #0]
 800f3e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f3ea:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ee:	f383 8810 	msr	PRIMASK, r3
}
 800f3f2:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800f3f4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800f3f8:	f001 fb10 	bl	8010a1c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f3fc:	f3ef 8310 	mrs	r3, PRIMASK
 800f400:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800f402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800f404:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800f406:	b672      	cpsid	i
    return(int_posture);
 800f408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 800f40a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f40e:	e13e      	b.n	800f68e <_tx_event_flags_set+0x3fe>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	691b      	ldr	r3, [r3, #16]
 800f414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 800f418:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f41c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2200      	movs	r2, #0
 800f424:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 800f426:	2300      	movs	r3, #0
 800f428:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 800f42c:	2300      	movs	r3, #0
 800f42e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	689b      	ldr	r3, [r3, #8]
 800f436:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 800f438:	4b90      	ldr	r3, [pc, #576]	; (800f67c <_tx_event_flags_set+0x3ec>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	3301      	adds	r3, #1
 800f43e:	4a8f      	ldr	r2, [pc, #572]	; (800f67c <_tx_event_flags_set+0x3ec>)
 800f440:	6013      	str	r3, [r2, #0]

                /* Since we have temporarily disabled preemption globally, set the preempt 
                   check flag to check for any preemption condition - including from 
                   unrelated ISR processing.  */
                preempt_check =  TX_TRUE;
 800f442:	2301      	movs	r3, #1
 800f444:	677b      	str	r3, [r7, #116]	; 0x74
 800f446:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f44a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f44e:	f383 8810 	msr	PRIMASK, r3
}
 800f452:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f454:	f3ef 8310 	mrs	r3, PRIMASK
 800f458:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800f45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800f45c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800f45e:	b672      	cpsid	i
    return(int_posture);
 800f460:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 800f462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	68db      	ldr	r3, [r3, #12]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d00f      	beq.n	800f48e <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2200      	movs	r2, #0
 800f472:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 800f474:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f478:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	695b      	ldr	r3, [r3, #20]
 800f480:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	689b      	ldr	r3, [r3, #8]
 800f488:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f48a:	4313      	orrs	r3, r2
 800f48c:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800f48e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f494:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800f496:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f49a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f49c:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 800f49e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f4a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4a6:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 800f4a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4aa:	f003 0302 	and.w	r3, r3, #2
 800f4ae:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 800f4b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4b2:	2b02      	cmp	r3, #2
 800f4b4:	d10a      	bne.n	800f4cc <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800f4b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f4b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f4ba:	4013      	ands	r3, r2
 800f4bc:	67bb      	str	r3, [r7, #120]	; 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 800f4be:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f4c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d006      	beq.n	800f4d4 <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	67bb      	str	r3, [r7, #120]	; 0x78
 800f4ca:	e003      	b.n	800f4d4 <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800f4cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f4ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f4d0:	4013      	ands	r3, r2
 800f4d2:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 800f4d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4da:	2b07      	cmp	r3, #7
 800f4dc:	d001      	beq.n	800f4e2 <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800f4de:	2301      	movs	r3, #1
 800f4e0:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 800f4e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d069      	beq.n	800f5bc <_tx_event_flags_set+0x32c>

                        /* Yes, this request can be handled now.  */

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800f4e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4ee:	2b07      	cmp	r3, #7
 800f4f0:	d11d      	bne.n	800f52e <_tx_event_flags_set+0x29e>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800f4f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f4f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4f8:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 800f4fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f4fe:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800f500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f502:	f003 0301 	and.w	r3, r3, #1
 800f506:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 800f508:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f50a:	2b01      	cmp	r3, #1
 800f50c:	d106      	bne.n	800f51c <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	689a      	ldr	r2, [r3, #8]
 800f512:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f514:	43db      	mvns	r3, r3
 800f516:	401a      	ands	r2, r3
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f51c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f520:	2200      	movs	r2, #0
 800f522:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800f524:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f528:	2200      	movs	r2, #0
 800f52a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800f52e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f534:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f538:	429a      	cmp	r2, r3
 800f53a:	d103      	bne.n	800f544 <_tx_event_flags_set+0x2b4>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 800f53c:	2300      	movs	r3, #0
 800f53e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f542:	e018      	b.n	800f576 <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800f544:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f54a:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800f54c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f552:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800f554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f556:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f558:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 800f55a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f55c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f55e:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 800f560:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f564:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f568:	429a      	cmp	r2, r3
 800f56a:	d104      	bne.n	800f576 <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 800f56c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f572:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	695b      	ldr	r3, [r3, #20]
 800f57a:	1e5a      	subs	r2, r3, #1
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 800f580:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f584:	2b00      	cmp	r3, #0
 800f586:	d10c      	bne.n	800f5a2 <_tx_event_flags_set+0x312>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 800f588:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f58c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 800f590:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 800f598:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f59c:	2200      	movs	r2, #0
 800f59e:	671a      	str	r2, [r3, #112]	; 0x70
 800f5a0:	e00c      	b.n	800f5bc <_tx_event_flags_set+0x32c>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800f5a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f5a6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f5aa:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 800f5ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 800f5b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f5b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 800f5bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 800f5c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f5c6:	3b01      	subs	r3, #1
 800f5c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 800f5cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	f47f af38 	bne.w	800f446 <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f5dc:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	6a1b      	ldr	r3, [r3, #32]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d00a      	beq.n	800f5fc <_tx_event_flags_set+0x36c>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	689a      	ldr	r2, [r3, #8]
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	6a1b      	ldr	r3, [r3, #32]
 800f5ee:	43db      	mvns	r3, r3
 800f5f0:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	621a      	str	r2, [r3, #32]
 800f5fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f600:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f604:	f383 8810 	msr	PRIMASK, r3
}
 800f608:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 800f60a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f60e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800f612:	e01f      	b.n	800f654 <_tx_event_flags_set+0x3c4>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800f614:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f61a:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f61c:	f3ef 8310 	mrs	r3, PRIMASK
 800f620:	623b      	str	r3, [r7, #32]
    return(posture);
 800f622:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800f624:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f626:	b672      	cpsid	i
    return(int_posture);
 800f628:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800f62a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 800f62e:	4b13      	ldr	r3, [pc, #76]	; (800f67c <_tx_event_flags_set+0x3ec>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	3301      	adds	r3, #1
 800f634:	4a11      	ldr	r2, [pc, #68]	; (800f67c <_tx_event_flags_set+0x3ec>)
 800f636:	6013      	str	r3, [r2, #0]
 800f638:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f63c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f640:	f383 8810 	msr	PRIMASK, r3
}
 800f644:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800f646:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800f64a:	f001 f9e7 	bl	8010a1c <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 800f64e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f650:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800f654:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d1db      	bne.n	800f614 <_tx_event_flags_set+0x384>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f65c:	f3ef 8310 	mrs	r3, PRIMASK
 800f660:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f662:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f664:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f666:	b672      	cpsid	i
    return(int_posture);
 800f668:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 800f66a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 800f66e:	4b03      	ldr	r3, [pc, #12]	; (800f67c <_tx_event_flags_set+0x3ec>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	3b01      	subs	r3, #1
 800f674:	4a01      	ldr	r2, [pc, #4]	; (800f67c <_tx_event_flags_set+0x3ec>)
 800f676:	6013      	str	r3, [r2, #0]
 800f678:	e009      	b.n	800f68e <_tx_event_flags_set+0x3fe>
 800f67a:	bf00      	nop
 800f67c:	2000812c 	.word	0x2000812c
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	695b      	ldr	r3, [r3, #20]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d002      	beq.n	800f68e <_tx_event_flags_set+0x3fe>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	2201      	movs	r2, #1
 800f68c:	60da      	str	r2, [r3, #12]
 800f68e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f692:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	f383 8810 	msr	PRIMASK, r3
}
 800f69a:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 800f69c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d101      	bne.n	800f6a6 <_tx_event_flags_set+0x416>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 800f6a2:	f001 f981 	bl	80109a8 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 800f6a6:	2300      	movs	r3, #0
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3798      	adds	r7, #152	; 0x98
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}

0800f6b0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800f6b4:	f000 ff36 	bl	8010524 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800f6b8:	f001 fcdc 	bl	8011074 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800f6bc:	4b12      	ldr	r3, [pc, #72]	; (800f708 <_tx_initialize_high_level+0x58>)
 800f6be:	2200      	movs	r2, #0
 800f6c0:	601a      	str	r2, [r3, #0]
 800f6c2:	4b12      	ldr	r3, [pc, #72]	; (800f70c <_tx_initialize_high_level+0x5c>)
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800f6c8:	4b11      	ldr	r3, [pc, #68]	; (800f710 <_tx_initialize_high_level+0x60>)
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	601a      	str	r2, [r3, #0]
 800f6ce:	4b11      	ldr	r3, [pc, #68]	; (800f714 <_tx_initialize_high_level+0x64>)
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800f6d4:	4b10      	ldr	r3, [pc, #64]	; (800f718 <_tx_initialize_high_level+0x68>)
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	601a      	str	r2, [r3, #0]
 800f6da:	4b10      	ldr	r3, [pc, #64]	; (800f71c <_tx_initialize_high_level+0x6c>)
 800f6dc:	2200      	movs	r2, #0
 800f6de:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800f6e0:	4b0f      	ldr	r3, [pc, #60]	; (800f720 <_tx_initialize_high_level+0x70>)
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	601a      	str	r2, [r3, #0]
 800f6e6:	4b0f      	ldr	r3, [pc, #60]	; (800f724 <_tx_initialize_high_level+0x74>)
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800f6ec:	4b0e      	ldr	r3, [pc, #56]	; (800f728 <_tx_initialize_high_level+0x78>)
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	601a      	str	r2, [r3, #0]
 800f6f2:	4b0e      	ldr	r3, [pc, #56]	; (800f72c <_tx_initialize_high_level+0x7c>)
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800f6f8:	4b0d      	ldr	r3, [pc, #52]	; (800f730 <_tx_initialize_high_level+0x80>)
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	601a      	str	r2, [r3, #0]
 800f6fe:	4b0d      	ldr	r3, [pc, #52]	; (800f734 <_tx_initialize_high_level+0x84>)
 800f700:	2200      	movs	r2, #0
 800f702:	601a      	str	r2, [r3, #0]
#endif
}
 800f704:	bf00      	nop
 800f706:	bd80      	pop	{r7, pc}
 800f708:	2000805c 	.word	0x2000805c
 800f70c:	20008060 	.word	0x20008060
 800f710:	20008064 	.word	0x20008064
 800f714:	20008068 	.word	0x20008068
 800f718:	2000806c 	.word	0x2000806c
 800f71c:	20008070 	.word	0x20008070
 800f720:	2000807c 	.word	0x2000807c
 800f724:	20008080 	.word	0x20008080
 800f728:	20008084 	.word	0x20008084
 800f72c:	20008088 	.word	0x20008088
 800f730:	20008074 	.word	0x20008074
 800f734:	20008078 	.word	0x20008078

0800f738 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800f73c:	4b10      	ldr	r3, [pc, #64]	; (800f780 <_tx_initialize_kernel_enter+0x48>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800f744:	d00c      	beq.n	800f760 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800f746:	4b0e      	ldr	r3, [pc, #56]	; (800f780 <_tx_initialize_kernel_enter+0x48>)
 800f748:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800f74c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800f74e:	f7f0 fd9d 	bl	800028c <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800f752:	f7ff ffad 	bl	800f6b0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800f756:	4b0b      	ldr	r3, [pc, #44]	; (800f784 <_tx_initialize_kernel_enter+0x4c>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	3301      	adds	r3, #1
 800f75c:	4a09      	ldr	r2, [pc, #36]	; (800f784 <_tx_initialize_kernel_enter+0x4c>)
 800f75e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800f760:	4b07      	ldr	r3, [pc, #28]	; (800f780 <_tx_initialize_kernel_enter+0x48>)
 800f762:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800f766:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800f768:	4b07      	ldr	r3, [pc, #28]	; (800f788 <_tx_initialize_kernel_enter+0x50>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7f0 feab 	bl	80004c8 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800f772:	4b03      	ldr	r3, [pc, #12]	; (800f780 <_tx_initialize_kernel_enter+0x48>)
 800f774:	2200      	movs	r2, #0
 800f776:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800f778:	f7f0 fdc4 	bl	8000304 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800f77c:	bf00      	nop
 800f77e:	bd80      	pop	{r7, pc}
 800f780:	20000088 	.word	0x20000088
 800f784:	2000812c 	.word	0x2000812c
 800f788:	2000808c 	.word	0x2000808c

0800f78c <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b08e      	sub	sp, #56	; 0x38
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f796:	f3ef 8310 	mrs	r3, PRIMASK
 800f79a:	623b      	str	r3, [r7, #32]
    return(posture);
 800f79c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800f79e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f7a0:	b672      	cpsid	i
    return(int_posture);
 800f7a2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 800f7a4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f7aa:	4a33      	ldr	r2, [pc, #204]	; (800f878 <_tx_mutex_cleanup+0xec>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d158      	bne.n	800f862 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f7b6:	683a      	ldr	r2, [r7, #0]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d152      	bne.n	800f862 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7c0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 800f7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d04c      	beq.n	800f862 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 800f7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4a2b      	ldr	r2, [pc, #172]	; (800f87c <_tx_mutex_cleanup+0xf0>)
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	d147      	bne.n	800f862 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800f7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d4:	69db      	ldr	r3, [r3, #28]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d043      	beq.n	800f862 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 800f7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e2:	69db      	ldr	r3, [r3, #28]
 800f7e4:	1e5a      	subs	r2, r3, #1
 800f7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e8:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800f7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ec:	69db      	ldr	r3, [r3, #28]
 800f7ee:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800f7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d103      	bne.n	800f7fe <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800f7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	619a      	str	r2, [r3, #24]
 800f7fc:	e013      	b.n	800f826 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f802:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f808:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800f80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f80e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800f810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f814:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800f816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f818:	699b      	ldr	r3, [r3, #24]
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d102      	bne.n	800f826 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 800f820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f824:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f82a:	2b0d      	cmp	r3, #13
 800f82c:	d119      	bne.n	800f862 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	221d      	movs	r2, #29
 800f832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800f836:	4b12      	ldr	r3, [pc, #72]	; (800f880 <_tx_mutex_cleanup+0xf4>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	3301      	adds	r3, #1
 800f83c:	4a10      	ldr	r2, [pc, #64]	; (800f880 <_tx_mutex_cleanup+0xf4>)
 800f83e:	6013      	str	r3, [r2, #0]
 800f840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f842:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	f383 8810 	msr	PRIMASK, r3
}
 800f84a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f001 f8e5 	bl	8010a1c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f852:	f3ef 8310 	mrs	r3, PRIMASK
 800f856:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f858:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f85a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f85c:	b672      	cpsid	i
    return(int_posture);
 800f85e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800f860:	637b      	str	r3, [r7, #52]	; 0x34
 800f862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f864:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f383 8810 	msr	PRIMASK, r3
}
 800f86c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800f86e:	bf00      	nop
 800f870:	3738      	adds	r7, #56	; 0x38
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}
 800f876:	bf00      	nop
 800f878:	0800f78d 	.word	0x0800f78d
 800f87c:	4d555445 	.word	0x4d555445
 800f880:	2000812c 	.word	0x2000812c

0800f884 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b08a      	sub	sp, #40	; 0x28
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f88c:	f3ef 8310 	mrs	r3, PRIMASK
 800f890:	61fb      	str	r3, [r7, #28]
    return(posture);
 800f892:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800f894:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f896:	b672      	cpsid	i
    return(int_posture);
 800f898:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800f89a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800f89c:	4b1a      	ldr	r3, [pc, #104]	; (800f908 <_tx_mutex_thread_release+0x84>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	4a19      	ldr	r2, [pc, #100]	; (800f908 <_tx_mutex_thread_release+0x84>)
 800f8a4:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f8ac:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 800f8ae:	6a3b      	ldr	r3, [r7, #32]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d017      	beq.n	800f8e4 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800f8b4:	6a3b      	ldr	r3, [r7, #32]
 800f8b6:	2201      	movs	r2, #1
 800f8b8:	609a      	str	r2, [r3, #8]
 800f8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8bc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	f383 8810 	msr	PRIMASK, r3
}
 800f8c4:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 800f8c6:	6a38      	ldr	r0, [r7, #32]
 800f8c8:	f000 faf2 	bl	800feb0 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f8cc:	f3ef 8310 	mrs	r3, PRIMASK
 800f8d0:	617b      	str	r3, [r7, #20]
    return(posture);
 800f8d2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800f8d4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f8d6:	b672      	cpsid	i
    return(int_posture);
 800f8d8:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 800f8da:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f8e2:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 800f8e4:	6a3b      	ldr	r3, [r7, #32]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d1dd      	bne.n	800f8a6 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800f8ea:	4b07      	ldr	r3, [pc, #28]	; (800f908 <_tx_mutex_thread_release+0x84>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	3b01      	subs	r3, #1
 800f8f0:	4a05      	ldr	r2, [pc, #20]	; (800f908 <_tx_mutex_thread_release+0x84>)
 800f8f2:	6013      	str	r3, [r2, #0]
 800f8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	f383 8810 	msr	PRIMASK, r3
}
 800f8fe:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 800f900:	bf00      	nop
 800f902:	3728      	adds	r7, #40	; 0x28
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	2000812c 	.word	0x2000812c

0800f90c <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b08a      	sub	sp, #40	; 0x28
 800f910:	af00      	add	r7, sp, #0
 800f912:	60f8      	str	r0, [r7, #12]
 800f914:	60b9      	str	r1, [r7, #8]
 800f916:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800f918:	2234      	movs	r2, #52	; 0x34
 800f91a:	2100      	movs	r1, #0
 800f91c:	68f8      	ldr	r0, [r7, #12]
 800f91e:	f002 fccb 	bl	80122b8 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	68ba      	ldr	r2, [r7, #8]
 800f926:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	687a      	ldr	r2, [r7, #4]
 800f92c:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f92e:	f3ef 8310 	mrs	r3, PRIMASK
 800f932:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f934:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f936:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f938:	b672      	cpsid	i
    return(int_posture);
 800f93a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 800f93c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	4a1a      	ldr	r2, [pc, #104]	; (800f9ac <_tx_mutex_create+0xa0>)
 800f942:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800f944:	4b1a      	ldr	r3, [pc, #104]	; (800f9b0 <_tx_mutex_create+0xa4>)
 800f946:	4a1b      	ldr	r2, [pc, #108]	; (800f9b4 <_tx_mutex_create+0xa8>)
 800f948:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800f94a:	4b1b      	ldr	r3, [pc, #108]	; (800f9b8 <_tx_mutex_create+0xac>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d109      	bne.n	800f966 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800f952:	4a1a      	ldr	r2, [pc, #104]	; (800f9bc <_tx_mutex_create+0xb0>)
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	68fa      	ldr	r2, [r7, #12]
 800f95c:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	68fa      	ldr	r2, [r7, #12]
 800f962:	625a      	str	r2, [r3, #36]	; 0x24
 800f964:	e011      	b.n	800f98a <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800f966:	4b15      	ldr	r3, [pc, #84]	; (800f9bc <_tx_mutex_create+0xb0>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 800f96c:	6a3b      	ldr	r3, [r7, #32]
 800f96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f970:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800f972:	6a3b      	ldr	r3, [r7, #32]
 800f974:	68fa      	ldr	r2, [r7, #12]
 800f976:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	68fa      	ldr	r2, [r7, #12]
 800f97c:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	69fa      	ldr	r2, [r7, #28]
 800f982:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	6a3a      	ldr	r2, [r7, #32]
 800f988:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800f98a:	4b0b      	ldr	r3, [pc, #44]	; (800f9b8 <_tx_mutex_create+0xac>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	3301      	adds	r3, #1
 800f990:	4a09      	ldr	r2, [pc, #36]	; (800f9b8 <_tx_mutex_create+0xac>)
 800f992:	6013      	str	r3, [r2, #0]
 800f994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f996:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	f383 8810 	msr	PRIMASK, r3
}
 800f99e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800f9a0:	2300      	movs	r3, #0
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3728      	adds	r7, #40	; 0x28
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	4d555445 	.word	0x4d555445
 800f9b0:	20008130 	.word	0x20008130
 800f9b4:	0800f885 	.word	0x0800f885
 800f9b8:	20008078 	.word	0x20008078
 800f9bc:	20008074 	.word	0x20008074

0800f9c0 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b092      	sub	sp, #72	; 0x48
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
 800f9c8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f9ca:	f3ef 8310 	mrs	r3, PRIMASK
 800f9ce:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800f9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800f9d2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f9d4:	b672      	cpsid	i
    return(int_posture);
 800f9d6:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 800f9d8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800f9da:	4b7a      	ldr	r3, [pc, #488]	; (800fbc4 <_tx_mutex_get+0x204>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	689b      	ldr	r3, [r3, #8]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d144      	bne.n	800fa72 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f9f2:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800f9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d032      	beq.n	800fa60 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	691b      	ldr	r3, [r3, #16]
 800f9fe:	2b01      	cmp	r3, #1
 800fa00:	d106      	bne.n	800fa10 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800fa02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2220      	movs	r2, #32
 800fa0e:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800fa10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fa16:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800fa18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d00f      	beq.n	800fa3e <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 800fa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa22:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800fa24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa26:	687a      	ldr	r2, [r7, #4]
 800fa28:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800fa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa34:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa3a:	62da      	str	r2, [r3, #44]	; 0x2c
 800fa3c:	e009      	b.n	800fa52 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800fa3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa40:	687a      	ldr	r2, [r7, #4]
 800fa42:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	687a      	ldr	r2, [r7, #4]
 800fa50:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800fa52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fa58:	1c5a      	adds	r2, r3, #1
 800fa5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa5c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800fa60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa62:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fa64:	69fb      	ldr	r3, [r7, #28]
 800fa66:	f383 8810 	msr	PRIMASK, r3
}
 800fa6a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	647b      	str	r3, [r7, #68]	; 0x44
 800fa70:	e0a2      	b.n	800fbb8 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	68db      	ldr	r3, [r3, #12]
 800fa76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d10d      	bne.n	800fa98 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	689b      	ldr	r3, [r3, #8]
 800fa80:	1c5a      	adds	r2, r3, #1
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	609a      	str	r2, [r3, #8]
 800fa86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa88:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fa8a:	69bb      	ldr	r3, [r7, #24]
 800fa8c:	f383 8810 	msr	PRIMASK, r3
}
 800fa90:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800fa92:	2300      	movs	r3, #0
 800fa94:	647b      	str	r3, [r7, #68]	; 0x44
 800fa96:	e08f      	b.n	800fbb8 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	f000 8084 	beq.w	800fba8 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800faa0:	4b49      	ldr	r3, [pc, #292]	; (800fbc8 <_tx_mutex_get+0x208>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d008      	beq.n	800faba <_tx_mutex_get+0xfa>
 800faa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faaa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	f383 8810 	msr	PRIMASK, r3
}
 800fab2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 800fab4:	231d      	movs	r3, #29
 800fab6:	647b      	str	r3, [r7, #68]	; 0x44
 800fab8:	e07e      	b.n	800fbb8 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800fac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fac2:	4a42      	ldr	r2, [pc, #264]	; (800fbcc <_tx_mutex_get+0x20c>)
 800fac4:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800fac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fac8:	687a      	ldr	r2, [r7, #4]
 800faca:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800facc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800face:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fad2:	1c5a      	adds	r2, r3, #1
 800fad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fad6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	69db      	ldr	r3, [r3, #28]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d109      	bne.n	800faf6 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fae6:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800fae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800faec:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800faee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800faf2:	675a      	str	r2, [r3, #116]	; 0x74
 800faf4:	e011      	b.n	800fb1a <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	699b      	ldr	r3, [r3, #24]
 800fafa:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800fafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fafe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb00:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800fb02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb06:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800fb08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb0c:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800fb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb12:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800fb14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb18:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	69db      	ldr	r3, [r3, #28]
 800fb1e:	1c5a      	adds	r2, r3, #1
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800fb24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb26:	220d      	movs	r2, #13
 800fb28:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800fb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb2c:	2201      	movs	r2, #1
 800fb2e:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800fb30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb32:	683a      	ldr	r2, [r7, #0]
 800fb34:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800fb36:	4b24      	ldr	r3, [pc, #144]	; (800fbc8 <_tx_mutex_get+0x208>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	4a22      	ldr	r2, [pc, #136]	; (800fbc8 <_tx_mutex_get+0x208>)
 800fb3e:	6013      	str	r3, [r2, #0]
 800fb40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb42:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	f383 8810 	msr	PRIMASK, r3
}
 800fb4a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	691b      	ldr	r3, [r3, #16]
 800fb50:	2b01      	cmp	r3, #1
 800fb52:	d121      	bne.n	800fb98 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fb58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d903      	bls.n	800fb68 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800fb60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800fb68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fb72:	429a      	cmp	r2, r3
 800fb74:	d204      	bcs.n	800fb80 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800fb76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800fb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d905      	bls.n	800fb98 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800fb8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb90:	4619      	mov	r1, r3
 800fb92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb94:	f000 f8ce 	bl	800fd34 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800fb98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fb9a:	f001 f83f 	bl	8010c1c <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800fb9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fba4:	647b      	str	r3, [r7, #68]	; 0x44
 800fba6:	e007      	b.n	800fbb8 <_tx_mutex_get+0x1f8>
 800fba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbaa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	f383 8810 	msr	PRIMASK, r3
}
 800fbb2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 800fbb4:	231d      	movs	r3, #29
 800fbb6:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 800fbb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3748      	adds	r7, #72	; 0x48
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
 800fbc2:	bf00      	nop
 800fbc4:	20008094 	.word	0x20008094
 800fbc8:	2000812c 	.word	0x2000812c
 800fbcc:	0800f78d 	.word	0x0800f78d

0800fbd0 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b092      	sub	sp, #72	; 0x48
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fbd8:	f3ef 8310 	mrs	r3, PRIMASK
 800fbdc:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800fbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800fbe0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fbe2:	b672      	cpsid	i
    return(int_posture);
 800fbe4:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800fbe6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	69db      	ldr	r3, [r3, #28]
 800fbec:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800fbee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	d805      	bhi.n	800fc00 <_tx_mutex_prioritize+0x30>
 800fbf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbf6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fbf8:	69fb      	ldr	r3, [r7, #28]
 800fbfa:	f383 8810 	msr	PRIMASK, r3
}
 800fbfe:	e092      	b.n	800fd26 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800fc00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc02:	2b02      	cmp	r3, #2
 800fc04:	d114      	bne.n	800fc30 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	699b      	ldr	r3, [r3, #24]
 800fc0a:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 800fc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc10:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800fc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d202      	bcs.n	800fc24 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc22:	619a      	str	r2, [r3, #24]
 800fc24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc26:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc28:	69bb      	ldr	r3, [r7, #24]
 800fc2a:	f383 8810 	msr	PRIMASK, r3
}
 800fc2e:	e07a      	b.n	800fd26 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	699b      	ldr	r3, [r3, #24]
 800fc34:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800fc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc38:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800fc3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc3e:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800fc40:	4b3b      	ldr	r3, [pc, #236]	; (800fd30 <_tx_mutex_prioritize+0x160>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	3301      	adds	r3, #1
 800fc46:	4a3a      	ldr	r2, [pc, #232]	; (800fd30 <_tx_mutex_prioritize+0x160>)
 800fc48:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800fc4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d201      	bcs.n	800fc5e <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800fc5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fc5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc60:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	f383 8810 	msr	PRIMASK, r3
}
 800fc68:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fc6a:	f3ef 8310 	mrs	r3, PRIMASK
 800fc6e:	617b      	str	r3, [r7, #20]
    return(posture);
 800fc70:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800fc72:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fc74:	b672      	cpsid	i
    return(int_posture);
 800fc76:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800fc78:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	699b      	ldr	r3, [r3, #24]
 800fc7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d002      	beq.n	800fc8a <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 800fc84:	2301      	movs	r3, #1
 800fc86:	633b      	str	r3, [r7, #48]	; 0x30
 800fc88:	e006      	b.n	800fc98 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	69db      	ldr	r3, [r3, #28]
 800fc8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d001      	beq.n	800fc98 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 800fc94:	2301      	movs	r3, #1
 800fc96:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800fc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d103      	bne.n	800fca6 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800fc9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fca2:	643b      	str	r3, [r7, #64]	; 0x40
 800fca4:	e00c      	b.n	800fcc0 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	699b      	ldr	r3, [r3, #24]
 800fcaa:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	69db      	ldr	r3, [r3, #28]
 800fcb0:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 800fcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800fcb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcba:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 800fcc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d1c2      	bne.n	800fc4e <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800fcc8:	4b19      	ldr	r3, [pc, #100]	; (800fd30 <_tx_mutex_prioritize+0x160>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	3b01      	subs	r3, #1
 800fcce:	4a18      	ldr	r2, [pc, #96]	; (800fd30 <_tx_mutex_prioritize+0x160>)
 800fcd0:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800fcd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d01d      	beq.n	800fd16 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800fcda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcde:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800fce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fce4:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800fce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcea:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800fcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcf0:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800fcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcf6:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800fcf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fcfc:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800fcfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd02:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800fd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fd08:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800fd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fd0e:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fd14:	619a      	str	r2, [r3, #24]
 800fd16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd18:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	f383 8810 	msr	PRIMASK, r3
}
 800fd20:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800fd22:	f000 fe41 	bl	80109a8 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800fd26:	2300      	movs	r3, #0
#endif
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3748      	adds	r7, #72	; 0x48
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	2000812c 	.word	0x2000812c

0800fd34 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b090      	sub	sp, #64	; 0x40
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fd3e:	f3ef 8310 	mrs	r3, PRIMASK
 800fd42:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800fd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800fd46:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800fd48:	b672      	cpsid	i
    return(int_posture);
 800fd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800fd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d017      	beq.n	800fd86 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	683a      	ldr	r2, [r7, #0]
 800fd5a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fd62:	683a      	ldr	r2, [r7, #0]
 800fd64:	429a      	cmp	r2, r3
 800fd66:	d905      	bls.n	800fd74 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	63da      	str	r2, [r3, #60]	; 0x3c
 800fd72:	e002      	b.n	800fd7a <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	683a      	ldr	r2, [r7, #0]
 800fd78:	63da      	str	r2, [r3, #60]	; 0x3c
 800fd7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd7c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd80:	f383 8810 	msr	PRIMASK, r3
}
 800fd84:	e089      	b.n	800fe9a <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800fd86:	4b47      	ldr	r3, [pc, #284]	; (800fea4 <_tx_mutex_priority_change+0x170>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd90:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800fd92:	4b45      	ldr	r3, [pc, #276]	; (800fea8 <_tx_mutex_priority_change+0x174>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	3302      	adds	r3, #2
 800fd98:	4a43      	ldr	r2, [pc, #268]	; (800fea8 <_tx_mutex_priority_change+0x174>)
 800fd9a:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	220e      	movs	r2, #14
 800fda0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2201      	movs	r2, #1
 800fda6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	64da      	str	r2, [r3, #76]	; 0x4c
 800fdae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdb0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fdb2:	69bb      	ldr	r3, [r7, #24]
 800fdb4:	f383 8810 	msr	PRIMASK, r3
}
 800fdb8:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 ff2e 	bl	8010c1c <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fdc0:	f3ef 8310 	mrs	r3, PRIMASK
 800fdc4:	623b      	str	r3, [r7, #32]
    return(posture);
 800fdc6:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800fdc8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fdca:	b672      	cpsid	i
    return(int_posture);
 800fdcc:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 800fdce:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	683a      	ldr	r2, [r7, #0]
 800fdd4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fddc:	683a      	ldr	r2, [r7, #0]
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d905      	bls.n	800fdee <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	63da      	str	r2, [r3, #60]	; 0x3c
 800fdec:	e002      	b.n	800fdf4 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	683a      	ldr	r2, [r7, #0]
 800fdf2:	63da      	str	r2, [r3, #60]	; 0x3c
 800fdf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdf6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f383 8810 	msr	PRIMASK, r3
}
 800fdfe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 fe0b 	bl	8010a1c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fe06:	f3ef 8310 	mrs	r3, PRIMASK
 800fe0a:	617b      	str	r3, [r7, #20]
    return(posture);
 800fe0c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800fe0e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fe10:	b672      	cpsid	i
    return(int_posture);
 800fe12:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800fe14:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800fe16:	4b23      	ldr	r3, [pc, #140]	; (800fea4 <_tx_mutex_priority_change+0x170>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800fe1c:	687a      	ldr	r2, [r7, #4]
 800fe1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d034      	beq.n	800fe8e <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d130      	bne.n	800fe8e <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d811      	bhi.n	800fe5c <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d126      	bne.n	800fe8e <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800fe40:	4a18      	ldr	r2, [pc, #96]	; (800fea4 <_tx_mutex_priority_change+0x170>)
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800fe46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d21f      	bcs.n	800fe8e <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe52:	4916      	ldr	r1, [pc, #88]	; (800feac <_tx_mutex_priority_change+0x178>)
 800fe54:	687a      	ldr	r2, [r7, #4]
 800fe56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fe5a:	e018      	b.n	800fe8e <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d212      	bcs.n	800fe8e <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d80c      	bhi.n	800fe8e <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800fe74:	4a0b      	ldr	r2, [pc, #44]	; (800fea4 <_tx_mutex_priority_change+0x170>)
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800fe7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d205      	bcs.n	800fe8e <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe86:	4909      	ldr	r1, [pc, #36]	; (800feac <_tx_mutex_priority_change+0x178>)
 800fe88:	687a      	ldr	r2, [r7, #4]
 800fe8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fe8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe90:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	f383 8810 	msr	PRIMASK, r3
}
 800fe98:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800fe9a:	bf00      	nop
 800fe9c:	3740      	adds	r7, #64	; 0x40
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}
 800fea2:	bf00      	nop
 800fea4:	20008098 	.word	0x20008098
 800fea8:	2000812c 	.word	0x2000812c
 800feac:	200080ac 	.word	0x200080ac

0800feb0 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b0a6      	sub	sp, #152	; 0x98
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800feb8:	2320      	movs	r3, #32
 800feba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800febe:	f3ef 8310 	mrs	r3, PRIMASK
 800fec2:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 800fec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 800fec6:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 800fec8:	b672      	cpsid	i
    return(int_posture);
 800feca:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800fecc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	689b      	ldr	r3, [r3, #8]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	f000 81ff 	beq.w	80102d8 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	68db      	ldr	r3, [r3, #12]
 800fede:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800fee0:	4ba3      	ldr	r3, [pc, #652]	; (8010170 <_tx_mutex_put+0x2c0>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	68db      	ldr	r3, [r3, #12]
 800feea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800feec:	429a      	cmp	r2, r3
 800feee:	d00d      	beq.n	800ff0c <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800fef0:	4ba0      	ldr	r3, [pc, #640]	; (8010174 <_tx_mutex_put+0x2c4>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d109      	bne.n	800ff0c <_tx_mutex_put+0x5c>
 800fef8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fefc:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fefe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff00:	f383 8810 	msr	PRIMASK, r3
}
 800ff04:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800ff06:	231e      	movs	r3, #30
 800ff08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 800ff0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff10:	2b20      	cmp	r3, #32
 800ff12:	f040 81eb 	bne.w	80102ec <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	689b      	ldr	r3, [r3, #8]
 800ff1a:	1e5a      	subs	r2, r3, #1
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	689b      	ldr	r3, [r3, #8]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d00a      	beq.n	800ff3e <_tx_mutex_put+0x8e>
 800ff28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff2c:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ff2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff30:	f383 8810 	msr	PRIMASK, r3
}
 800ff34:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 800ff36:	2300      	movs	r3, #0
 800ff38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ff3c:	e1d6      	b.n	80102ec <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800ff3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d10a      	bne.n	800ff5a <_tx_mutex_put+0xaa>
 800ff44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff48:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ff4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff4c:	f383 8810 	msr	PRIMASK, r3
}
 800ff50:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800ff52:	2300      	movs	r3, #0
 800ff54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ff58:	e1c8      	b.n	80102ec <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800ff5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ff60:	1e5a      	subs	r2, r3, #1
 800ff62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800ff68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d104      	bne.n	800ff7c <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800ff72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff74:	2200      	movs	r2, #0
 800ff76:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800ff7a:	e019      	b.n	800ffb0 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff88:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800ff8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff8e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ff90:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800ff92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ff94:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ff98:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800ff9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ffa0:	687a      	ldr	r2, [r7, #4]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d104      	bne.n	800ffb0 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800ffa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ffa8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ffac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	699b      	ldr	r3, [r3, #24]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d110      	bne.n	800ffda <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	691b      	ldr	r3, [r3, #16]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d10c      	bne.n	800ffda <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	60da      	str	r2, [r3, #12]
 800ffc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ffca:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ffcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffce:	f383 8810 	msr	PRIMASK, r3
}
 800ffd2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800ffda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ffde:	2b20      	cmp	r3, #32
 800ffe0:	f040 8184 	bne.w	80102ec <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800ffea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ffec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fff0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	691b      	ldr	r3, [r3, #16]
 800fff8:	2b01      	cmp	r3, #1
 800fffa:	d155      	bne.n	80100a8 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800fffc:	4b5d      	ldr	r3, [pc, #372]	; (8010174 <_tx_mutex_put+0x2c4>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	3301      	adds	r3, #1
 8010002:	4a5c      	ldr	r2, [pc, #368]	; (8010174 <_tx_mutex_put+0x2c4>)
 8010004:	6013      	str	r3, [r2, #0]
 8010006:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801000a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801000c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801000e:	f383 8810 	msr	PRIMASK, r3
}
 8010012:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8010014:	2320      	movs	r3, #32
 8010016:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 801001a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801001c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8010024:	e01f      	b.n	8010066 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8010026:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801002a:	691b      	ldr	r3, [r3, #16]
 801002c:	2b01      	cmp	r3, #1
 801002e:	d10b      	bne.n	8010048 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8010030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010036:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801003a:	429a      	cmp	r2, r3
 801003c:	d904      	bls.n	8010048 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 801003e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8010048:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801004c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801004e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8010052:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010054:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010058:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801005c:	429a      	cmp	r2, r3
 801005e:	d102      	bne.n	8010066 <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8010060:	2300      	movs	r3, #0
 8010062:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8010066:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801006a:	2b00      	cmp	r3, #0
 801006c:	d1db      	bne.n	8010026 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801006e:	f3ef 8310 	mrs	r3, PRIMASK
 8010072:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8010074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8010076:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8010078:	b672      	cpsid	i
    return(int_posture);
 801007a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 801007c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8010080:	4b3c      	ldr	r3, [pc, #240]	; (8010174 <_tx_mutex_put+0x2c4>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	3b01      	subs	r3, #1
 8010086:	4a3b      	ldr	r2, [pc, #236]	; (8010174 <_tx_mutex_put+0x2c4>)
 8010088:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 801008a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801008c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010090:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8010094:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010098:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801009c:	429a      	cmp	r2, r3
 801009e:	d203      	bcs.n	80100a8 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 80100a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80100a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	69db      	ldr	r3, [r3, #28]
 80100ac:	2b01      	cmp	r3, #1
 80100ae:	d920      	bls.n	80100f2 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	691b      	ldr	r3, [r3, #16]
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	d11c      	bne.n	80100f2 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 80100b8:	4b2e      	ldr	r3, [pc, #184]	; (8010174 <_tx_mutex_put+0x2c4>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	3301      	adds	r3, #1
 80100be:	4a2d      	ldr	r2, [pc, #180]	; (8010174 <_tx_mutex_put+0x2c4>)
 80100c0:	6013      	str	r3, [r2, #0]
 80100c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80100c6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80100c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ca:	f383 8810 	msr	PRIMASK, r3
}
 80100ce:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f7ff fd7d 	bl	800fbd0 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80100d6:	f3ef 8310 	mrs	r3, PRIMASK
 80100da:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80100dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80100de:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80100e0:	b672      	cpsid	i
    return(int_posture);
 80100e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 80100e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 80100e8:	4b22      	ldr	r3, [pc, #136]	; (8010174 <_tx_mutex_put+0x2c4>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	3b01      	subs	r3, #1
 80100ee:	4a21      	ldr	r2, [pc, #132]	; (8010174 <_tx_mutex_put+0x2c4>)
 80100f0:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	699b      	ldr	r3, [r3, #24]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d13e      	bne.n	8010178 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80100fa:	4b1e      	ldr	r3, [pc, #120]	; (8010174 <_tx_mutex_put+0x2c4>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	3301      	adds	r3, #1
 8010100:	4a1c      	ldr	r2, [pc, #112]	; (8010174 <_tx_mutex_put+0x2c4>)
 8010102:	6013      	str	r3, [r2, #0]
 8010104:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010108:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801010a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010c:	f383 8810 	msr	PRIMASK, r3
}
 8010110:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2220      	movs	r2, #32
 8010116:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	68db      	ldr	r3, [r3, #12]
 801011c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801011e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010122:	429a      	cmp	r2, r3
 8010124:	d006      	beq.n	8010134 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	68db      	ldr	r3, [r3, #12]
 801012a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801012e:	4618      	mov	r0, r3
 8010130:	f7ff fe00 	bl	800fd34 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010134:	f3ef 8310 	mrs	r3, PRIMASK
 8010138:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801013a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801013c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801013e:	b672      	cpsid	i
    return(int_posture);
 8010140:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8010142:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8010146:	4b0b      	ldr	r3, [pc, #44]	; (8010174 <_tx_mutex_put+0x2c4>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	3b01      	subs	r3, #1
 801014c:	4a09      	ldr	r2, [pc, #36]	; (8010174 <_tx_mutex_put+0x2c4>)
 801014e:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2200      	movs	r2, #0
 8010154:	60da      	str	r2, [r3, #12]
 8010156:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801015a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801015c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801015e:	f383 8810 	msr	PRIMASK, r3
}
 8010162:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8010164:	f000 fc20 	bl	80109a8 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8010168:	2300      	movs	r3, #0
 801016a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801016e:	e0bd      	b.n	80102ec <_tx_mutex_put+0x43c>
 8010170:	20008094 	.word	0x20008094
 8010174:	2000812c 	.word	0x2000812c
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	699b      	ldr	r3, [r3, #24]
 801017c:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	691b      	ldr	r3, [r3, #16]
 8010182:	2b01      	cmp	r3, #1
 8010184:	d10a      	bne.n	801019c <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	68db      	ldr	r3, [r3, #12]
 801018a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801018e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2220      	movs	r2, #32
 801019a:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 801019c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801019e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80101a2:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 80101a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d10a      	bne.n	80101c0 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80101aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80101ac:	687a      	ldr	r2, [r7, #4]
 80101ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	687a      	ldr	r2, [r7, #4]
 80101b6:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	687a      	ldr	r2, [r7, #4]
 80101bc:	631a      	str	r2, [r3, #48]	; 0x30
 80101be:	e016      	b.n	80101ee <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 80101c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80101c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80101c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 80101ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80101ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101d0:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80101d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80101da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80101dc:	687a      	ldr	r2, [r7, #4]
 80101de:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80101e4:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80101ec:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 80101ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80101f0:	1c5a      	adds	r2, r3, #1
 80101f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80101f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2201      	movs	r2, #1
 80101fc:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010202:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	69db      	ldr	r3, [r3, #28]
 8010208:	1e5a      	subs	r2, r3, #1
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	69db      	ldr	r3, [r3, #28]
 8010212:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8010214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010216:	2b00      	cmp	r3, #0
 8010218:	d103      	bne.n	8010222 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2200      	movs	r2, #0
 801021e:	619a      	str	r2, [r3, #24]
 8010220:	e00e      	b.n	8010240 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8010222:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010226:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801022c:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 801022e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010232:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8010234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010236:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010238:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 801023a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801023c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801023e:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010240:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010242:	2200      	movs	r2, #0
 8010244:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010248:	2200      	movs	r2, #0
 801024a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801024e:	4b2a      	ldr	r3, [pc, #168]	; (80102f8 <_tx_mutex_put+0x448>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	3301      	adds	r3, #1
 8010254:	4a28      	ldr	r2, [pc, #160]	; (80102f8 <_tx_mutex_put+0x448>)
 8010256:	6013      	str	r3, [r2, #0]
 8010258:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801025c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801025e:	69fb      	ldr	r3, [r7, #28]
 8010260:	f383 8810 	msr	PRIMASK, r3
}
 8010264:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	691b      	ldr	r3, [r3, #16]
 801026a:	2b01      	cmp	r3, #1
 801026c:	d12d      	bne.n	80102ca <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	69db      	ldr	r3, [r3, #28]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d01c      	beq.n	80102b0 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f7ff fcaa 	bl	800fbd0 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801027c:	f3ef 8310 	mrs	r3, PRIMASK
 8010280:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010282:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010284:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010286:	b672      	cpsid	i
    return(int_posture);
 8010288:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 801028a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	699b      	ldr	r3, [r3, #24]
 8010292:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8010294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010296:	2b00      	cmp	r3, #0
 8010298:	d003      	beq.n	80102a2 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 801029a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801029c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	629a      	str	r2, [r3, #40]	; 0x28
 80102a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102a6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	f383 8810 	msr	PRIMASK, r3
}
 80102ae:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 80102b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80102b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102b6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d005      	beq.n	80102ca <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 80102be:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80102c2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80102c6:	f7ff fd35 	bl	800fd34 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 80102ca:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80102cc:	f000 fba6 	bl	8010a1c <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 80102d0:	2300      	movs	r3, #0
 80102d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80102d6:	e009      	b.n	80102ec <_tx_mutex_put+0x43c>
 80102d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102dc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	f383 8810 	msr	PRIMASK, r3
}
 80102e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 80102e6:	231e      	movs	r3, #30
 80102e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 80102ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	3798      	adds	r7, #152	; 0x98
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}
 80102f8:	2000812c 	.word	0x2000812c

080102fc <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b092      	sub	sp, #72	; 0x48
 8010300:	af00      	add	r7, sp, #0
 8010302:	60f8      	str	r0, [r7, #12]
 8010304:	60b9      	str	r1, [r7, #8]
 8010306:	607a      	str	r2, [r7, #4]
 8010308:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 801030a:	2300      	movs	r3, #0
 801030c:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 801030e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010310:	21ef      	movs	r1, #239	; 0xef
 8010312:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010314:	f001 ffd0 	bl	80122b8 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8010318:	22b0      	movs	r2, #176	; 0xb0
 801031a:	2100      	movs	r1, #0
 801031c:	68f8      	ldr	r0, [r7, #12]
 801031e:	f001 ffcb 	bl	80122b8 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	68ba      	ldr	r2, [r7, #8]
 8010326:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	687a      	ldr	r2, [r7, #4]
 801032c:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	683a      	ldr	r2, [r7, #0]
 8010332:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010338:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801033e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010344:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801034a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010352:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010358:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	2220      	movs	r2, #32
 801035e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8010362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010364:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8010366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010368:	3b01      	subs	r3, #1
 801036a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801036c:	4413      	add	r3, r2
 801036e:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010374:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8010376:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801037a:	429a      	cmp	r2, r3
 801037c:	d007      	beq.n	801038e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	2200      	movs	r2, #0
 8010382:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	2200      	movs	r2, #0
 8010388:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801038c:	e006      	b.n	801039c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010392:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010398:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	2203      	movs	r2, #3
 80103a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	4a48      	ldr	r2, [pc, #288]	; (80104c8 <_tx_thread_create+0x1cc>)
 80103a6:	655a      	str	r2, [r3, #84]	; 0x54
 80103a8:	68fa      	ldr	r2, [r7, #12]
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80103ae:	4947      	ldr	r1, [pc, #284]	; (80104cc <_tx_thread_create+0x1d0>)
 80103b0:	68f8      	ldr	r0, [r7, #12]
 80103b2:	f7f0 f80d 	bl	80003d0 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80103b6:	f3ef 8310 	mrs	r3, PRIMASK
 80103ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80103bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80103be:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80103c0:	b672      	cpsid	i
    return(int_posture);
 80103c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80103c4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	4a41      	ldr	r2, [pc, #260]	; (80104d0 <_tx_thread_create+0x1d4>)
 80103ca:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80103cc:	4b41      	ldr	r3, [pc, #260]	; (80104d4 <_tx_thread_create+0x1d8>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d10b      	bne.n	80103ec <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80103d4:	4a40      	ldr	r2, [pc, #256]	; (80104d8 <_tx_thread_create+0x1dc>)
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	68fa      	ldr	r2, [r7, #12]
 80103de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	68fa      	ldr	r2, [r7, #12]
 80103e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80103ea:	e016      	b.n	801041a <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80103ec:	4b3a      	ldr	r3, [pc, #232]	; (80104d8 <_tx_thread_create+0x1dc>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80103f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103f8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80103fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103fc:	68fa      	ldr	r2, [r7, #12]
 80103fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8010402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010404:	68fa      	ldr	r2, [r7, #12]
 8010406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801040e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 801041a:	4b2e      	ldr	r3, [pc, #184]	; (80104d4 <_tx_thread_create+0x1d8>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	3301      	adds	r3, #1
 8010420:	4a2c      	ldr	r2, [pc, #176]	; (80104d4 <_tx_thread_create+0x1d8>)
 8010422:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010424:	4b2d      	ldr	r3, [pc, #180]	; (80104dc <_tx_thread_create+0x1e0>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	3301      	adds	r3, #1
 801042a:	4a2c      	ldr	r2, [pc, #176]	; (80104dc <_tx_thread_create+0x1e0>)
 801042c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 801042e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010430:	2b01      	cmp	r3, #1
 8010432:	d129      	bne.n	8010488 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010434:	f3ef 8305 	mrs	r3, IPSR
 8010438:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 801043a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 801043c:	4b28      	ldr	r3, [pc, #160]	; (80104e0 <_tx_thread_create+0x1e4>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	4313      	orrs	r3, r2
 8010442:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8010446:	d30d      	bcc.n	8010464 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8010448:	4b26      	ldr	r3, [pc, #152]	; (80104e4 <_tx_thread_create+0x1e8>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801044e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010450:	2b00      	cmp	r3, #0
 8010452:	d009      	beq.n	8010468 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8010454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010458:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 801045a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801045c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801045e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010460:	63da      	str	r2, [r3, #60]	; 0x3c
 8010462:	e001      	b.n	8010468 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8010464:	2300      	movs	r3, #0
 8010466:	647b      	str	r3, [r7, #68]	; 0x44
 8010468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801046a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801046c:	6a3b      	ldr	r3, [r7, #32]
 801046e:	f383 8810 	msr	PRIMASK, r3
}
 8010472:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8010474:	68f8      	ldr	r0, [r7, #12]
 8010476:	f000 fad1 	bl	8010a1c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 801047a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801047c:	2b00      	cmp	r3, #0
 801047e:	d01e      	beq.n	80104be <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8010480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010482:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010484:	63da      	str	r2, [r3, #60]	; 0x3c
 8010486:	e01a      	b.n	80104be <_tx_thread_create+0x1c2>
 8010488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801048a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	f383 8810 	msr	PRIMASK, r3
}
 8010492:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010494:	f3ef 8310 	mrs	r3, PRIMASK
 8010498:	61bb      	str	r3, [r7, #24]
    return(posture);
 801049a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801049c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801049e:	b672      	cpsid	i
    return(int_posture);
 80104a0:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80104a2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80104a4:	4b0d      	ldr	r3, [pc, #52]	; (80104dc <_tx_thread_create+0x1e0>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	3b01      	subs	r3, #1
 80104aa:	4a0c      	ldr	r2, [pc, #48]	; (80104dc <_tx_thread_create+0x1e0>)
 80104ac:	6013      	str	r3, [r2, #0]
 80104ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80104b2:	69fb      	ldr	r3, [r7, #28]
 80104b4:	f383 8810 	msr	PRIMASK, r3
}
 80104b8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80104ba:	f000 fa75 	bl	80109a8 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80104be:	2300      	movs	r3, #0
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	3748      	adds	r7, #72	; 0x48
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}
 80104c8:	08010ef1 	.word	0x08010ef1
 80104cc:	08010811 	.word	0x08010811
 80104d0:	54485244 	.word	0x54485244
 80104d4:	200080a0 	.word	0x200080a0
 80104d8:	2000809c 	.word	0x2000809c
 80104dc:	2000812c 	.word	0x2000812c
 80104e0:	20000088 	.word	0x20000088
 80104e4:	20008098 	.word	0x20008098

080104e8 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 80104e8:	b480      	push	{r7}
 80104ea:	b087      	sub	sp, #28
 80104ec:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80104ee:	f3ef 8310 	mrs	r3, PRIMASK
 80104f2:	60bb      	str	r3, [r7, #8]
    return(posture);
 80104f4:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 80104f6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 80104f8:	b672      	cpsid	i
    return(int_posture);
 80104fa:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 80104fc:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80104fe:	4b08      	ldr	r3, [pc, #32]	; (8010520 <_tx_thread_identify+0x38>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	613b      	str	r3, [r7, #16]
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	f383 8810 	msr	PRIMASK, r3
}
 801050e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8010510:	693b      	ldr	r3, [r7, #16]
}
 8010512:	4618      	mov	r0, r3
 8010514:	371c      	adds	r7, #28
 8010516:	46bd      	mov	sp, r7
 8010518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051c:	4770      	bx	lr
 801051e:	bf00      	nop
 8010520:	20008094 	.word	0x20008094

08010524 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8010528:	4b12      	ldr	r3, [pc, #72]	; (8010574 <_tx_thread_initialize+0x50>)
 801052a:	2200      	movs	r2, #0
 801052c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 801052e:	4b12      	ldr	r3, [pc, #72]	; (8010578 <_tx_thread_initialize+0x54>)
 8010530:	2200      	movs	r2, #0
 8010532:	601a      	str	r2, [r3, #0]
 8010534:	4b11      	ldr	r3, [pc, #68]	; (801057c <_tx_thread_initialize+0x58>)
 8010536:	2200      	movs	r2, #0
 8010538:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801053a:	4b11      	ldr	r3, [pc, #68]	; (8010580 <_tx_thread_initialize+0x5c>)
 801053c:	2220      	movs	r2, #32
 801053e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8010540:	2280      	movs	r2, #128	; 0x80
 8010542:	2100      	movs	r1, #0
 8010544:	480f      	ldr	r0, [pc, #60]	; (8010584 <_tx_thread_initialize+0x60>)
 8010546:	f001 feb7 	bl	80122b8 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 801054a:	4b0f      	ldr	r3, [pc, #60]	; (8010588 <_tx_thread_initialize+0x64>)
 801054c:	2200      	movs	r2, #0
 801054e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8010550:	4b0e      	ldr	r3, [pc, #56]	; (801058c <_tx_thread_initialize+0x68>)
 8010552:	2200      	movs	r2, #0
 8010554:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8010556:	4b0e      	ldr	r3, [pc, #56]	; (8010590 <_tx_thread_initialize+0x6c>)
 8010558:	2200      	movs	r2, #0
 801055a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 801055c:	4b0d      	ldr	r3, [pc, #52]	; (8010594 <_tx_thread_initialize+0x70>)
 801055e:	2200      	movs	r2, #0
 8010560:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8010562:	4b0d      	ldr	r3, [pc, #52]	; (8010598 <_tx_thread_initialize+0x74>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 801056a:	4a0b      	ldr	r2, [pc, #44]	; (8010598 <_tx_thread_initialize+0x74>)
 801056c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 801056e:	bf00      	nop
 8010570:	bd80      	pop	{r7, pc}
 8010572:	bf00      	nop
 8010574:	20008094 	.word	0x20008094
 8010578:	20008098 	.word	0x20008098
 801057c:	200080a4 	.word	0x200080a4
 8010580:	200080a8 	.word	0x200080a8
 8010584:	200080ac 	.word	0x200080ac
 8010588:	2000809c 	.word	0x2000809c
 801058c:	200080a0 	.word	0x200080a0
 8010590:	2000812c 	.word	0x2000812c
 8010594:	20008130 	.word	0x20008130
 8010598:	20008134 	.word	0x20008134

0801059c <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b08c      	sub	sp, #48	; 0x30
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	60b9      	str	r1, [r7, #8]
 80105a6:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80105a8:	2300      	movs	r3, #0
 80105aa:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80105b2:	68ba      	ldr	r2, [r7, #8]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d004      	beq.n	80105c2 <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d001      	beq.n	80105c2 <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 80105be:	2300      	movs	r3, #0
 80105c0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80105c2:	f3ef 8310 	mrs	r3, PRIMASK
 80105c6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80105c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80105ca:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80105cc:	b672      	cpsid	i
    return(int_posture);
 80105ce:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80105d0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80105d8:	68ba      	ldr	r2, [r7, #8]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d902      	bls.n	80105e4 <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 80105de:	2318      	movs	r3, #24
 80105e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80105e2:	e03e      	b.n	8010662 <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	68ba      	ldr	r2, [r7, #8]
 80105f2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80105fc:	68ba      	ldr	r2, [r7, #8]
 80105fe:	429a      	cmp	r2, r3
 8010600:	d203      	bcs.n	801060a <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	68ba      	ldr	r2, [r7, #8]
 8010606:	63da      	str	r2, [r3, #60]	; 0x3c
 8010608:	e004      	b.n	8010614 <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010618:	4b17      	ldr	r3, [pc, #92]	; (8010678 <_tx_thread_preemption_change+0xdc>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	429a      	cmp	r2, r3
 801061e:	d920      	bls.n	8010662 <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 8010620:	4b15      	ldr	r3, [pc, #84]	; (8010678 <_tx_thread_preemption_change+0xdc>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	68ba      	ldr	r2, [r7, #8]
 8010626:	429a      	cmp	r2, r3
 8010628:	d91b      	bls.n	8010662 <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 801062a:	4b14      	ldr	r3, [pc, #80]	; (801067c <_tx_thread_preemption_change+0xe0>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	68fa      	ldr	r2, [r7, #12]
 8010630:	429a      	cmp	r2, r3
 8010632:	d116      	bne.n	8010662 <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8010634:	4b10      	ldr	r3, [pc, #64]	; (8010678 <_tx_thread_preemption_change+0xdc>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4a11      	ldr	r2, [pc, #68]	; (8010680 <_tx_thread_preemption_change+0xe4>)
 801063a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801063e:	4a0f      	ldr	r2, [pc, #60]	; (801067c <_tx_thread_preemption_change+0xe0>)
 8010640:	6013      	str	r3, [r2, #0]
 8010642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010644:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	f383 8810 	msr	PRIMASK, r3
}
 801064c:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 801064e:	f000 f9ab 	bl	80109a8 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010652:	f3ef 8310 	mrs	r3, PRIMASK
 8010656:	61fb      	str	r3, [r7, #28]
    return(posture);
 8010658:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801065a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801065c:	b672      	cpsid	i
    return(int_posture);
 801065e:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8010660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010664:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	f383 8810 	msr	PRIMASK, r3
}
 801066c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 801066e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8010670:	4618      	mov	r0, r3
 8010672:	3730      	adds	r7, #48	; 0x30
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}
 8010678:	200080a8 	.word	0x200080a8
 801067c:	20008098 	.word	0x20008098
 8010680:	200080ac 	.word	0x200080ac

08010684 <_tx_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_relinquish(VOID)
{
 8010684:	b480      	push	{r7}
 8010686:	b08b      	sub	sp, #44	; 0x2c
 8010688:	af00      	add	r7, sp, #0
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801068a:	4b2b      	ldr	r3, [pc, #172]	; (8010738 <_tx_thread_relinquish+0xb4>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010690:	f3ef 8310 	mrs	r3, PRIMASK
 8010694:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010696:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010698:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801069a:	b672      	cpsid	i
    return(int_posture);
 801069c:	697b      	ldr	r3, [r7, #20]
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Disable interrupts.  */
    TX_DISABLE
 801069e:	623b      	str	r3, [r7, #32]

#ifndef TX_NO_TIMER

    /* Reset time slice for current thread.  */
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80106a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a2:	69db      	ldr	r3, [r3, #28]
 80106a4:	4a25      	ldr	r2, [pc, #148]	; (801073c <_tx_thread_relinquish+0xb8>)
 80106a6:	6013      	str	r3, [r2, #0]
#endif

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;
 80106a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ac:	61fb      	str	r3, [r7, #28]

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80106ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b0:	6a1b      	ldr	r3, [r3, #32]
 80106b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d009      	beq.n	80106cc <_tx_thread_relinquish+0x48>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 80106b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ba:	6a1a      	ldr	r2, [r3, #32]
 80106bc:	4920      	ldr	r1, [pc, #128]	; (8010740 <_tx_thread_relinquish+0xbc>)
 80106be:	69fb      	ldr	r3, [r7, #28]
 80106c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 80106c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c6:	6a1b      	ldr	r3, [r3, #32]
 80106c8:	4a1e      	ldr	r2, [pc, #120]	; (8010744 <_tx_thread_relinquish+0xc0>)
 80106ca:	6013      	str	r3, [r2, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 80106cc:	4b1e      	ldr	r3, [pc, #120]	; (8010748 <_tx_thread_relinquish+0xc4>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	69fa      	ldr	r2, [r7, #28]
 80106d2:	429a      	cmp	r2, r3
 80106d4:	d906      	bls.n	80106e4 <_tx_thread_relinquish+0x60>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80106d6:	4b1c      	ldr	r3, [pc, #112]	; (8010748 <_tx_thread_relinquish+0xc4>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	4a19      	ldr	r2, [pc, #100]	; (8010740 <_tx_thread_relinquish+0xbc>)
 80106dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106e0:	4a18      	ldr	r2, [pc, #96]	; (8010744 <_tx_thread_relinquish+0xc0>)
 80106e2:	6013      	str	r3, [r2, #0]
 80106e4:	6a3b      	ldr	r3, [r7, #32]
 80106e6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	f383 8810 	msr	PRIMASK, r3
}
 80106ee:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 80106f0:	4b14      	ldr	r3, [pc, #80]	; (8010744 <_tx_thread_relinquish+0xc0>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d017      	beq.n	801072a <_tx_thread_relinquish+0xa6>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80106fa:	4b14      	ldr	r3, [pc, #80]	; (801074c <_tx_thread_relinquish+0xc8>)
 80106fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010700:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010702:	f3ef 8305 	mrs	r3, IPSR
 8010706:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8010708:	68fb      	ldr	r3, [r7, #12]
    if (_tx_ipsr_get() == 0)
 801070a:	2b00      	cmp	r3, #0
 801070c:	d10c      	bne.n	8010728 <_tx_thread_relinquish+0xa4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801070e:	f3ef 8310 	mrs	r3, PRIMASK
 8010712:	60bb      	str	r3, [r7, #8]
    return(posture);
 8010714:	68bb      	ldr	r3, [r7, #8]
    {
        interrupt_save = __get_interrupt_posture();
 8010716:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010718:	b662      	cpsie	i
}
 801071a:	bf00      	nop
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	f383 8810 	msr	PRIMASK, r3
}
 8010726:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8010728:	bf00      	nop

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 801072a:	bf00      	nop
 801072c:	372c      	adds	r7, #44	; 0x2c
 801072e:	46bd      	mov	sp, r7
 8010730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010734:	4770      	bx	lr
 8010736:	bf00      	nop
 8010738:	20008094 	.word	0x20008094
 801073c:	20008698 	.word	0x20008698
 8010740:	200080ac 	.word	0x200080ac
 8010744:	20008098 	.word	0x20008098
 8010748:	200080a8 	.word	0x200080a8
 801074c:	e000ed04 	.word	0xe000ed04

08010750 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b08c      	sub	sp, #48	; 0x30
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 8010758:	2300      	movs	r3, #0
 801075a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801075c:	f3ef 8310 	mrs	r3, PRIMASK
 8010760:	61fb      	str	r3, [r7, #28]
    return(posture);
 8010762:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8010764:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010766:	b672      	cpsid	i
    return(int_posture);
 8010768:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801076a:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010770:	2b03      	cmp	r3, #3
 8010772:	d12f      	bne.n	80107d4 <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010774:	f3ef 8305 	mrs	r3, IPSR
 8010778:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801077a:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 801077c:	4b21      	ldr	r3, [pc, #132]	; (8010804 <_tx_thread_resume+0xb4>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	4313      	orrs	r3, r2
 8010782:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8010786:	d30d      	bcc.n	80107a4 <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8010788:	4b1f      	ldr	r3, [pc, #124]	; (8010808 <_tx_thread_resume+0xb8>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801078e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010790:	2b00      	cmp	r3, #0
 8010792:	d009      	beq.n	80107a8 <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8010794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010798:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 801079a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801079c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801079e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80107a2:	e001      	b.n	80107a8 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80107a4:	2300      	movs	r3, #0
 80107a6:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80107a8:	4b18      	ldr	r3, [pc, #96]	; (801080c <_tx_thread_resume+0xbc>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	3301      	adds	r3, #1
 80107ae:	4a17      	ldr	r2, [pc, #92]	; (801080c <_tx_thread_resume+0xbc>)
 80107b0:	6013      	str	r3, [r2, #0]
 80107b2:	6a3b      	ldr	r3, [r7, #32]
 80107b4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80107b6:	693b      	ldr	r3, [r7, #16]
 80107b8:	f383 8810 	msr	PRIMASK, r3
}
 80107bc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f000 f92c 	bl	8010a1c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80107c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d002      	beq.n	80107d0 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80107ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107ce:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 80107d0:	2300      	movs	r3, #0
 80107d2:	e012      	b.n	80107fa <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107d8:	2b01      	cmp	r3, #1
 80107da:	d105      	bne.n	80107e8 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2200      	movs	r2, #0
 80107e0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 80107e2:	2319      	movs	r3, #25
 80107e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107e6:	e001      	b.n	80107ec <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 80107e8:	2312      	movs	r3, #18
 80107ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107ec:	6a3b      	ldr	r3, [r7, #32]
 80107ee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	f383 8810 	msr	PRIMASK, r3
}
 80107f6:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 80107f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3730      	adds	r7, #48	; 0x30
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	20000088 	.word	0x20000088
 8010808:	20008098 	.word	0x20008098
 801080c:	2000812c 	.word	0x2000812c

08010810 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b088      	sub	sp, #32
 8010814:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010816:	4b21      	ldr	r3, [pc, #132]	; (801089c <_tx_thread_shell_entry+0x8c>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010820:	69fa      	ldr	r2, [r7, #28]
 8010822:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010824:	4610      	mov	r0, r2
 8010826:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8010828:	4b1d      	ldr	r3, [pc, #116]	; (80108a0 <_tx_thread_shell_entry+0x90>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d003      	beq.n	8010838 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8010830:	4b1b      	ldr	r3, [pc, #108]	; (80108a0 <_tx_thread_shell_entry+0x90>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	69f8      	ldr	r0, [r7, #28]
 8010836:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010838:	f3ef 8310 	mrs	r3, PRIMASK
 801083c:	607b      	str	r3, [r7, #4]
    return(posture);
 801083e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8010840:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010842:	b672      	cpsid	i
    return(int_posture);
 8010844:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8010846:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8010848:	69fb      	ldr	r3, [r7, #28]
 801084a:	2201      	movs	r2, #1
 801084c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801084e:	69fb      	ldr	r3, [r7, #28]
 8010850:	2201      	movs	r2, #1
 8010852:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8010854:	69fb      	ldr	r3, [r7, #28]
 8010856:	2200      	movs	r2, #0
 8010858:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801085a:	4b12      	ldr	r3, [pc, #72]	; (80108a4 <_tx_thread_shell_entry+0x94>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	3301      	adds	r3, #1
 8010860:	4a10      	ldr	r2, [pc, #64]	; (80108a4 <_tx_thread_shell_entry+0x94>)
 8010862:	6013      	str	r3, [r2, #0]
 8010864:	69bb      	ldr	r3, [r7, #24]
 8010866:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	f383 8810 	msr	PRIMASK, r3
}
 801086e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8010870:	f3ef 8314 	mrs	r3, CONTROL
 8010874:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8010876:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8010878:	617b      	str	r3, [r7, #20]
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	f023 0304 	bic.w	r3, r3, #4
 8010880:	617b      	str	r3, [r7, #20]
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8010886:	693b      	ldr	r3, [r7, #16]
 8010888:	f383 8814 	msr	CONTROL, r3
}
 801088c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 801088e:	69f8      	ldr	r0, [r7, #28]
 8010890:	f000 f9c4 	bl	8010c1c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8010894:	bf00      	nop
 8010896:	3720      	adds	r7, #32
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}
 801089c:	20008094 	.word	0x20008094
 80108a0:	20008130 	.word	0x20008130
 80108a4:	2000812c 	.word	0x2000812c

080108a8 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b08e      	sub	sp, #56	; 0x38
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80108b0:	f3ef 8310 	mrs	r3, PRIMASK
 80108b4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80108b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80108b8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80108ba:	b672      	cpsid	i
    return(int_posture);
 80108bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80108be:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80108c0:	4b35      	ldr	r3, [pc, #212]	; (8010998 <_tx_thread_sleep+0xf0>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80108c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d108      	bne.n	80108de <_tx_thread_sleep+0x36>
 80108cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ce:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80108d0:	6a3b      	ldr	r3, [r7, #32]
 80108d2:	f383 8810 	msr	PRIMASK, r3
}
 80108d6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80108d8:	2313      	movs	r3, #19
 80108da:	637b      	str	r3, [r7, #52]	; 0x34
 80108dc:	e056      	b.n	801098c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80108de:	f3ef 8305 	mrs	r3, IPSR
 80108e2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80108e4:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80108e6:	4b2d      	ldr	r3, [pc, #180]	; (801099c <_tx_thread_sleep+0xf4>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	4313      	orrs	r3, r2
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d008      	beq.n	8010902 <_tx_thread_sleep+0x5a>
 80108f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80108f4:	69bb      	ldr	r3, [r7, #24]
 80108f6:	f383 8810 	msr	PRIMASK, r3
}
 80108fa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80108fc:	2313      	movs	r3, #19
 80108fe:	637b      	str	r3, [r7, #52]	; 0x34
 8010900:	e044      	b.n	801098c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8010902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010904:	4a26      	ldr	r2, [pc, #152]	; (80109a0 <_tx_thread_sleep+0xf8>)
 8010906:	4293      	cmp	r3, r2
 8010908:	d108      	bne.n	801091c <_tx_thread_sleep+0x74>
 801090a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801090c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	f383 8810 	msr	PRIMASK, r3
}
 8010914:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8010916:	2313      	movs	r3, #19
 8010918:	637b      	str	r3, [r7, #52]	; 0x34
 801091a:	e037      	b.n	801098c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d108      	bne.n	8010934 <_tx_thread_sleep+0x8c>
 8010922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010924:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	f383 8810 	msr	PRIMASK, r3
}
 801092c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 801092e:	2300      	movs	r3, #0
 8010930:	637b      	str	r3, [r7, #52]	; 0x34
 8010932:	e02b      	b.n	801098c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8010934:	4b1b      	ldr	r3, [pc, #108]	; (80109a4 <_tx_thread_sleep+0xfc>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d008      	beq.n	801094e <_tx_thread_sleep+0xa6>
 801093c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801093e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	f383 8810 	msr	PRIMASK, r3
}
 8010946:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8010948:	2313      	movs	r3, #19
 801094a:	637b      	str	r3, [r7, #52]	; 0x34
 801094c:	e01e      	b.n	801098c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 801094e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010950:	2204      	movs	r2, #4
 8010952:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010956:	2201      	movs	r2, #1
 8010958:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801095a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801095c:	2200      	movs	r2, #0
 801095e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8010962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010964:	687a      	ldr	r2, [r7, #4]
 8010966:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010968:	4b0e      	ldr	r3, [pc, #56]	; (80109a4 <_tx_thread_sleep+0xfc>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	3301      	adds	r3, #1
 801096e:	4a0d      	ldr	r2, [pc, #52]	; (80109a4 <_tx_thread_sleep+0xfc>)
 8010970:	6013      	str	r3, [r2, #0]
 8010972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010974:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	f383 8810 	msr	PRIMASK, r3
}
 801097c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801097e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010980:	f000 f94c 	bl	8010c1c <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8010984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801098a:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 801098c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801098e:	4618      	mov	r0, r3
 8010990:	3738      	adds	r7, #56	; 0x38
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}
 8010996:	bf00      	nop
 8010998:	20008094 	.word	0x20008094
 801099c:	20000088 	.word	0x20000088
 80109a0:	200081dc 	.word	0x200081dc
 80109a4:	2000812c 	.word	0x2000812c

080109a8 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80109a8:	b480      	push	{r7}
 80109aa:	b089      	sub	sp, #36	; 0x24
 80109ac:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80109ae:	4b17      	ldr	r3, [pc, #92]	; (8010a0c <_tx_thread_system_preempt_check+0x64>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80109b4:	69fb      	ldr	r3, [r7, #28]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d121      	bne.n	80109fe <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80109ba:	4b15      	ldr	r3, [pc, #84]	; (8010a10 <_tx_thread_system_preempt_check+0x68>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80109c0:	4b14      	ldr	r3, [pc, #80]	; (8010a14 <_tx_thread_system_preempt_check+0x6c>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80109c6:	69ba      	ldr	r2, [r7, #24]
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	429a      	cmp	r2, r3
 80109cc:	d017      	beq.n	80109fe <_tx_thread_system_preempt_check+0x56>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80109ce:	4b12      	ldr	r3, [pc, #72]	; (8010a18 <_tx_thread_system_preempt_check+0x70>)
 80109d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109d4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80109d6:	f3ef 8305 	mrs	r3, IPSR
 80109da:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80109dc:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d10c      	bne.n	80109fc <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80109e2:	f3ef 8310 	mrs	r3, PRIMASK
 80109e6:	60fb      	str	r3, [r7, #12]
    return(posture);
 80109e8:	68fb      	ldr	r3, [r7, #12]
        interrupt_save = __get_interrupt_posture();
 80109ea:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80109ec:	b662      	cpsie	i
}
 80109ee:	bf00      	nop
 80109f0:	68bb      	ldr	r3, [r7, #8]
 80109f2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f383 8810 	msr	PRIMASK, r3
}
 80109fa:	bf00      	nop
}
 80109fc:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80109fe:	bf00      	nop
 8010a00:	3724      	adds	r7, #36	; 0x24
 8010a02:	46bd      	mov	sp, r7
 8010a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a08:	4770      	bx	lr
 8010a0a:	bf00      	nop
 8010a0c:	2000812c 	.word	0x2000812c
 8010a10:	20008094 	.word	0x20008094
 8010a14:	20008098 	.word	0x20008098
 8010a18:	e000ed04 	.word	0xe000ed04

08010a1c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b096      	sub	sp, #88	; 0x58
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010a24:	f3ef 8310 	mrs	r3, PRIMASK
 8010a28:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8010a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8010a2c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8010a2e:	b672      	cpsid	i
    return(int_posture);
 8010a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8010a32:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d005      	beq.n	8010a48 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	334c      	adds	r3, #76	; 0x4c
 8010a40:	4618      	mov	r0, r3
 8010a42:	f000 fbf5 	bl	8011230 <_tx_timer_system_deactivate>
 8010a46:	e002      	b.n	8010a4e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8010a4e:	4b6c      	ldr	r3, [pc, #432]	; (8010c00 <_tx_thread_system_resume+0x1e4>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	3b01      	subs	r3, #1
 8010a54:	4a6a      	ldr	r2, [pc, #424]	; (8010c00 <_tx_thread_system_resume+0x1e4>)
 8010a56:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f040 8083 	bne.w	8010b68 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	f000 8097 	beq.w	8010b9a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d172      	bne.n	8010b5a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2200      	movs	r2, #0
 8010a78:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a7e:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8010a80:	4a60      	ldr	r2, [pc, #384]	; (8010c04 <_tx_thread_system_resume+0x1e8>)
 8010a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a88:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8010a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d154      	bne.n	8010b3a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8010a90:	495c      	ldr	r1, [pc, #368]	; (8010c04 <_tx_thread_system_resume+0x1e8>)
 8010a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a94:	687a      	ldr	r2, [r7, #4]
 8010a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	687a      	ldr	r2, [r7, #4]
 8010a9e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	687a      	ldr	r2, [r7, #4]
 8010aa4:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8010aa6:	2201      	movs	r2, #1
 8010aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8010aae:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8010ab0:	4b55      	ldr	r3, [pc, #340]	; (8010c08 <_tx_thread_system_resume+0x1ec>)
 8010ab2:	681a      	ldr	r2, [r3, #0]
 8010ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ab6:	4313      	orrs	r3, r2
 8010ab8:	4a53      	ldr	r2, [pc, #332]	; (8010c08 <_tx_thread_system_resume+0x1ec>)
 8010aba:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8010abc:	4b53      	ldr	r3, [pc, #332]	; (8010c0c <_tx_thread_system_resume+0x1f0>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d269      	bcs.n	8010b9a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8010ac6:	4a51      	ldr	r2, [pc, #324]	; (8010c0c <_tx_thread_system_resume+0x1f0>)
 8010ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010aca:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8010acc:	4b50      	ldr	r3, [pc, #320]	; (8010c10 <_tx_thread_system_resume+0x1f4>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8010ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d103      	bne.n	8010ae0 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8010ad8:	4a4d      	ldr	r2, [pc, #308]	; (8010c10 <_tx_thread_system_resume+0x1f4>)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6013      	str	r3, [r2, #0]
 8010ade:	e05c      	b.n	8010b9a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8010ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ae4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d257      	bcs.n	8010b9a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8010aea:	4a49      	ldr	r2, [pc, #292]	; (8010c10 <_tx_thread_system_resume+0x1f4>)
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	6013      	str	r3, [r2, #0]
 8010af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af6:	f383 8810 	msr	PRIMASK, r3
}
 8010afa:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010afc:	4b40      	ldr	r3, [pc, #256]	; (8010c00 <_tx_thread_system_resume+0x1e4>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8010b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d174      	bne.n	8010bf2 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010b08:	4b42      	ldr	r3, [pc, #264]	; (8010c14 <_tx_thread_system_resume+0x1f8>)
 8010b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b0e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010b10:	f3ef 8305 	mrs	r3, IPSR
 8010b14:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8010b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d10c      	bne.n	8010b36 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8010b20:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8010b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8010b24:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010b26:	b662      	cpsie	i
}
 8010b28:	bf00      	nop
 8010b2a:	6a3b      	ldr	r3, [r7, #32]
 8010b2c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	f383 8810 	msr	PRIMASK, r3
}
 8010b34:	bf00      	nop
}
 8010b36:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8010b38:	e05b      	b.n	8010bf2 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8010b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b3e:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8010b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8010b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b48:	687a      	ldr	r2, [r7, #4]
 8010b4a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b50:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010b56:	621a      	str	r2, [r3, #32]
 8010b58:	e01f      	b.n	8010b9a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2203      	movs	r2, #3
 8010b64:	631a      	str	r2, [r3, #48]	; 0x30
 8010b66:	e018      	b.n	8010b9a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b6c:	2b01      	cmp	r3, #1
 8010b6e:	d014      	beq.n	8010b9a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b74:	2b02      	cmp	r3, #2
 8010b76:	d010      	beq.n	8010b9a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d106      	bne.n	8010b8e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2200      	movs	r2, #0
 8010b84:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	631a      	str	r2, [r3, #48]	; 0x30
 8010b8c:	e005      	b.n	8010b9a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2200      	movs	r2, #0
 8010b92:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2203      	movs	r2, #3
 8010b98:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8010b9a:	4b1f      	ldr	r3, [pc, #124]	; (8010c18 <_tx_thread_system_resume+0x1fc>)
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ba2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ba4:	69bb      	ldr	r3, [r7, #24]
 8010ba6:	f383 8810 	msr	PRIMASK, r3
}
 8010baa:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8010bac:	4b18      	ldr	r3, [pc, #96]	; (8010c10 <_tx_thread_system_resume+0x1f4>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d020      	beq.n	8010bf8 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010bb6:	4b12      	ldr	r3, [pc, #72]	; (8010c00 <_tx_thread_system_resume+0x1e4>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8010bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d11a      	bne.n	8010bf8 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010bc2:	4b14      	ldr	r3, [pc, #80]	; (8010c14 <_tx_thread_system_resume+0x1f8>)
 8010bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bc8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010bca:	f3ef 8305 	mrs	r3, IPSR
 8010bce:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8010bd0:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d10f      	bne.n	8010bf6 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8010bda:	613b      	str	r3, [r7, #16]
    return(posture);
 8010bdc:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8010bde:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010be0:	b662      	cpsie	i
}
 8010be2:	bf00      	nop
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	f383 8810 	msr	PRIMASK, r3
}
 8010bee:	bf00      	nop
}
 8010bf0:	e001      	b.n	8010bf6 <_tx_thread_system_resume+0x1da>
                                return;
 8010bf2:	bf00      	nop
 8010bf4:	e000      	b.n	8010bf8 <_tx_thread_system_resume+0x1dc>
 8010bf6:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8010bf8:	3758      	adds	r7, #88	; 0x58
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}
 8010bfe:	bf00      	nop
 8010c00:	2000812c 	.word	0x2000812c
 8010c04:	200080ac 	.word	0x200080ac
 8010c08:	200080a4 	.word	0x200080a4
 8010c0c:	200080a8 	.word	0x200080a8
 8010c10:	20008098 	.word	0x20008098
 8010c14:	e000ed04 	.word	0xe000ed04
 8010c18:	20008094 	.word	0x20008094

08010c1c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b09e      	sub	sp, #120	; 0x78
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8010c24:	4b81      	ldr	r3, [pc, #516]	; (8010e2c <_tx_thread_system_suspend+0x210>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8010c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8010c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8010c32:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8010c34:	b672      	cpsid	i
    return(int_posture);
 8010c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8010c38:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8010c3a:	687a      	ldr	r2, [r7, #4]
 8010c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d112      	bne.n	8010c68 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c46:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8010c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d008      	beq.n	8010c60 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8010c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c54:	d004      	beq.n	8010c60 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	334c      	adds	r3, #76	; 0x4c
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f000 fa86 	bl	801116c <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	69db      	ldr	r3, [r3, #28]
 8010c64:	4a72      	ldr	r2, [pc, #456]	; (8010e30 <_tx_thread_system_suspend+0x214>)
 8010c66:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8010c68:	4b72      	ldr	r3, [pc, #456]	; (8010e34 <_tx_thread_system_suspend+0x218>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	3b01      	subs	r3, #1
 8010c6e:	4a71      	ldr	r2, [pc, #452]	; (8010e34 <_tx_thread_system_suspend+0x218>)
 8010c70:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c76:	2b01      	cmp	r3, #1
 8010c78:	f040 80a6 	bne.w	8010dc8 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2200      	movs	r2, #0
 8010c80:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c86:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6a1b      	ldr	r3, [r3, #32]
 8010c8c:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8010c8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d015      	beq.n	8010cc2 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c9a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8010c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010c9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010ca0:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8010ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ca4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010ca6:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8010ca8:	4a63      	ldr	r2, [pc, #396]	; (8010e38 <_tx_thread_system_suspend+0x21c>)
 8010caa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cb0:	687a      	ldr	r2, [r7, #4]
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d157      	bne.n	8010d66 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8010cb6:	4960      	ldr	r1, [pc, #384]	; (8010e38 <_tx_thread_system_suspend+0x21c>)
 8010cb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010cc0:	e051      	b.n	8010d66 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8010cc2:	4a5d      	ldr	r2, [pc, #372]	; (8010e38 <_tx_thread_system_suspend+0x21c>)
 8010cc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cc6:	2100      	movs	r1, #0
 8010cc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8010ccc:	2201      	movs	r2, #1
 8010cce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8010cd4:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8010cd6:	4b59      	ldr	r3, [pc, #356]	; (8010e3c <_tx_thread_system_suspend+0x220>)
 8010cd8:	681a      	ldr	r2, [r3, #0]
 8010cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010cdc:	43db      	mvns	r3, r3
 8010cde:	4013      	ands	r3, r2
 8010ce0:	4a56      	ldr	r2, [pc, #344]	; (8010e3c <_tx_thread_system_suspend+0x220>)
 8010ce2:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8010ce8:	4b54      	ldr	r3, [pc, #336]	; (8010e3c <_tx_thread_system_suspend+0x220>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8010cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d12b      	bne.n	8010d4c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8010cf4:	4b52      	ldr	r3, [pc, #328]	; (8010e40 <_tx_thread_system_suspend+0x224>)
 8010cf6:	2220      	movs	r2, #32
 8010cf8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8010cfa:	4b52      	ldr	r3, [pc, #328]	; (8010e44 <_tx_thread_system_suspend+0x228>)
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	601a      	str	r2, [r3, #0]
 8010d00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010d02:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d06:	f383 8810 	msr	PRIMASK, r3
}
 8010d0a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010d0c:	4b49      	ldr	r3, [pc, #292]	; (8010e34 <_tx_thread_system_suspend+0x218>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8010d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	f040 8081 	bne.w	8010e1c <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010d1a:	4b4b      	ldr	r3, [pc, #300]	; (8010e48 <_tx_thread_system_suspend+0x22c>)
 8010d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d20:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010d22:	f3ef 8305 	mrs	r3, IPSR
 8010d26:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8010d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d10c      	bne.n	8010d48 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8010d32:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8010d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8010d36:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010d38:	b662      	cpsie	i
}
 8010d3a:	bf00      	nop
 8010d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d3e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d42:	f383 8810 	msr	PRIMASK, r3
}
 8010d46:	bf00      	nop
}
 8010d48:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8010d4a:	e067      	b.n	8010e1c <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8010d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010d4e:	fa93 f3a3 	rbit	r3, r3
 8010d52:	65bb      	str	r3, [r7, #88]	; 0x58
 8010d54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010d56:	fab3 f383 	clz	r3, r3
 8010d5a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8010d5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d60:	4413      	add	r3, r2
 8010d62:	4a37      	ldr	r2, [pc, #220]	; (8010e40 <_tx_thread_system_suspend+0x224>)
 8010d64:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8010d66:	4b37      	ldr	r3, [pc, #220]	; (8010e44 <_tx_thread_system_suspend+0x228>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	687a      	ldr	r2, [r7, #4]
 8010d6c:	429a      	cmp	r2, r3
 8010d6e:	d12b      	bne.n	8010dc8 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8010d70:	4b33      	ldr	r3, [pc, #204]	; (8010e40 <_tx_thread_system_suspend+0x224>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	4a30      	ldr	r2, [pc, #192]	; (8010e38 <_tx_thread_system_suspend+0x21c>)
 8010d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d7a:	4a32      	ldr	r2, [pc, #200]	; (8010e44 <_tx_thread_system_suspend+0x228>)
 8010d7c:	6013      	str	r3, [r2, #0]
 8010d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010d80:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d84:	f383 8810 	msr	PRIMASK, r3
}
 8010d88:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010d8a:	4b2a      	ldr	r3, [pc, #168]	; (8010e34 <_tx_thread_system_suspend+0x218>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8010d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d144      	bne.n	8010e20 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010d96:	4b2c      	ldr	r3, [pc, #176]	; (8010e48 <_tx_thread_system_suspend+0x22c>)
 8010d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d9c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010d9e:	f3ef 8305 	mrs	r3, IPSR
 8010da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8010da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d10c      	bne.n	8010dc4 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010daa:	f3ef 8310 	mrs	r3, PRIMASK
 8010dae:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8010db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8010db2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010db4:	b662      	cpsie	i
}
 8010db6:	bf00      	nop
 8010db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dba:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010dbc:	6a3b      	ldr	r3, [r7, #32]
 8010dbe:	f383 8810 	msr	PRIMASK, r3
}
 8010dc2:	bf00      	nop
}
 8010dc4:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8010dc6:	e02b      	b.n	8010e20 <_tx_thread_system_suspend+0x204>
 8010dc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010dca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010dcc:	69fb      	ldr	r3, [r7, #28]
 8010dce:	f383 8810 	msr	PRIMASK, r3
}
 8010dd2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8010dd4:	4b1b      	ldr	r3, [pc, #108]	; (8010e44 <_tx_thread_system_suspend+0x228>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d022      	beq.n	8010e24 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010dde:	4b15      	ldr	r3, [pc, #84]	; (8010e34 <_tx_thread_system_suspend+0x218>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8010de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d11c      	bne.n	8010e24 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010dea:	4b17      	ldr	r3, [pc, #92]	; (8010e48 <_tx_thread_system_suspend+0x22c>)
 8010dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010df0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010df2:	f3ef 8305 	mrs	r3, IPSR
 8010df6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8010df8:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d10c      	bne.n	8010e18 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8010e02:	617b      	str	r3, [r7, #20]
    return(posture);
 8010e04:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8010e06:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010e08:	b662      	cpsie	i
}
 8010e0a:	bf00      	nop
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	f383 8810 	msr	PRIMASK, r3
}
 8010e16:	bf00      	nop
}
 8010e18:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8010e1a:	e003      	b.n	8010e24 <_tx_thread_system_suspend+0x208>
                return;
 8010e1c:	bf00      	nop
 8010e1e:	e002      	b.n	8010e26 <_tx_thread_system_suspend+0x20a>
            return;
 8010e20:	bf00      	nop
 8010e22:	e000      	b.n	8010e26 <_tx_thread_system_suspend+0x20a>
    return;
 8010e24:	bf00      	nop
}
 8010e26:	3778      	adds	r7, #120	; 0x78
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	20008094 	.word	0x20008094
 8010e30:	20008698 	.word	0x20008698
 8010e34:	2000812c 	.word	0x2000812c
 8010e38:	200080ac 	.word	0x200080ac
 8010e3c:	200080a4 	.word	0x200080a4
 8010e40:	200080a8 	.word	0x200080a8
 8010e44:	20008098 	.word	0x20008098
 8010e48:	e000ed04 	.word	0xe000ed04

08010e4c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8010e4c:	b480      	push	{r7}
 8010e4e:	b087      	sub	sp, #28
 8010e50:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010e52:	4b21      	ldr	r3, [pc, #132]	; (8010ed8 <_tx_thread_time_slice+0x8c>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010e58:	f3ef 8310 	mrs	r3, PRIMASK
 8010e5c:	60fb      	str	r3, [r7, #12]
    return(posture);
 8010e5e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8010e60:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010e62:	b672      	cpsid	i
    return(int_posture);
 8010e64:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8010e66:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8010e68:	4b1c      	ldr	r3, [pc, #112]	; (8010edc <_tx_thread_time_slice+0x90>)
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d024      	beq.n	8010ebe <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d120      	bne.n	8010ebe <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	69da      	ldr	r2, [r3, #28]
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	699b      	ldr	r3, [r3, #24]
 8010e88:	4a15      	ldr	r2, [pc, #84]	; (8010ee0 <_tx_thread_time_slice+0x94>)
 8010e8a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	6a1b      	ldr	r3, [r3, #32]
 8010e90:	697a      	ldr	r2, [r7, #20]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d013      	beq.n	8010ebe <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	d10d      	bne.n	8010ebe <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ea6:	697a      	ldr	r2, [r7, #20]
 8010ea8:	6a12      	ldr	r2, [r2, #32]
 8010eaa:	490e      	ldr	r1, [pc, #56]	; (8010ee4 <_tx_thread_time_slice+0x98>)
 8010eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8010eb0:	4b0d      	ldr	r3, [pc, #52]	; (8010ee8 <_tx_thread_time_slice+0x9c>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	4a0b      	ldr	r2, [pc, #44]	; (8010ee4 <_tx_thread_time_slice+0x98>)
 8010eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010eba:	4a0c      	ldr	r2, [pc, #48]	; (8010eec <_tx_thread_time_slice+0xa0>)
 8010ebc:	6013      	str	r3, [r2, #0]
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f383 8810 	msr	PRIMASK, r3
}
 8010ec8:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8010eca:	bf00      	nop
 8010ecc:	371c      	adds	r7, #28
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed4:	4770      	bx	lr
 8010ed6:	bf00      	nop
 8010ed8:	20008094 	.word	0x20008094
 8010edc:	2000813c 	.word	0x2000813c
 8010ee0:	20008698 	.word	0x20008698
 8010ee4:	200080ac 	.word	0x200080ac
 8010ee8:	200080a8 	.word	0x200080a8
 8010eec:	20008098 	.word	0x20008098

08010ef0 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b08a      	sub	sp, #40	; 0x28
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010efc:	f3ef 8310 	mrs	r3, PRIMASK
 8010f00:	617b      	str	r3, [r7, #20]
    return(posture);
 8010f02:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010f04:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010f06:	b672      	cpsid	i
    return(int_posture);
 8010f08:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8010f0a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8010f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f10:	2b04      	cmp	r3, #4
 8010f12:	d10e      	bne.n	8010f32 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8010f14:	4b13      	ldr	r3, [pc, #76]	; (8010f64 <_tx_thread_timeout+0x74>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	3301      	adds	r3, #1
 8010f1a:	4a12      	ldr	r2, [pc, #72]	; (8010f64 <_tx_thread_timeout+0x74>)
 8010f1c:	6013      	str	r3, [r2, #0]
 8010f1e:	6a3b      	ldr	r3, [r7, #32]
 8010f20:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	f383 8810 	msr	PRIMASK, r3
}
 8010f28:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8010f2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f2c:	f7ff fd76 	bl	8010a1c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8010f30:	e013      	b.n	8010f5a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8010f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f36:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8010f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010f3e:	61bb      	str	r3, [r7, #24]
 8010f40:	6a3b      	ldr	r3, [r7, #32]
 8010f42:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	f383 8810 	msr	PRIMASK, r3
}
 8010f4a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8010f4c:	69fb      	ldr	r3, [r7, #28]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d003      	beq.n	8010f5a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	69b9      	ldr	r1, [r7, #24]
 8010f56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f58:	4798      	blx	r3
}
 8010f5a:	bf00      	nop
 8010f5c:	3728      	adds	r7, #40	; 0x28
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}
 8010f62:	bf00      	nop
 8010f64:	2000812c 	.word	0x2000812c

08010f68 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b08a      	sub	sp, #40	; 0x28
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	60f8      	str	r0, [r7, #12]
 8010f70:	60b9      	str	r1, [r7, #8]
 8010f72:	607a      	str	r2, [r7, #4]
 8010f74:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8010f76:	222c      	movs	r2, #44	; 0x2c
 8010f78:	2100      	movs	r1, #0
 8010f7a:	68f8      	ldr	r0, [r7, #12]
 8010f7c:	f001 f99c 	bl	80122b8 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	68ba      	ldr	r2, [r7, #8]
 8010f84:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f8a:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f90:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	687a      	ldr	r2, [r7, #4]
 8010f96:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	683a      	ldr	r2, [r7, #0]
 8010f9c:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8010fa2:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010fa4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010fa6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010fa8:	b672      	cpsid	i
    return(int_posture);
 8010faa:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8010fac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	4a1c      	ldr	r2, [pc, #112]	; (8011024 <_tx_timer_create+0xbc>)
 8010fb2:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8010fb4:	4b1c      	ldr	r3, [pc, #112]	; (8011028 <_tx_timer_create+0xc0>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d109      	bne.n	8010fd0 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8010fbc:	4a1b      	ldr	r2, [pc, #108]	; (801102c <_tx_timer_create+0xc4>)
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	68fa      	ldr	r2, [r7, #12]
 8010fc6:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	68fa      	ldr	r2, [r7, #12]
 8010fcc:	629a      	str	r2, [r3, #40]	; 0x28
 8010fce:	e011      	b.n	8010ff4 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8010fd0:	4b16      	ldr	r3, [pc, #88]	; (801102c <_tx_timer_create+0xc4>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 8010fd6:	6a3b      	ldr	r3, [r7, #32]
 8010fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fda:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8010fdc:	6a3b      	ldr	r3, [r7, #32]
 8010fde:	68fa      	ldr	r2, [r7, #12]
 8010fe0:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 8010fe2:	69fb      	ldr	r3, [r7, #28]
 8010fe4:	68fa      	ldr	r2, [r7, #12]
 8010fe6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	69fa      	ldr	r2, [r7, #28]
 8010fec:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	6a3a      	ldr	r2, [r7, #32]
 8010ff2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8010ff4:	4b0c      	ldr	r3, [pc, #48]	; (8011028 <_tx_timer_create+0xc0>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	3301      	adds	r3, #1
 8010ffa:	4a0b      	ldr	r2, [pc, #44]	; (8011028 <_tx_timer_create+0xc0>)
 8010ffc:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 8010ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011000:	2b01      	cmp	r3, #1
 8011002:	d104      	bne.n	801100e <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	3308      	adds	r3, #8
 8011008:	4618      	mov	r0, r3
 801100a:	f000 f8af 	bl	801116c <_tx_timer_system_activate>
 801100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011010:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	f383 8810 	msr	PRIMASK, r3
}
 8011018:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801101a:	2300      	movs	r3, #0
}
 801101c:	4618      	mov	r0, r3
 801101e:	3728      	adds	r7, #40	; 0x28
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	4154494d 	.word	0x4154494d
 8011028:	200081d4 	.word	0x200081d4
 801102c:	200081d0 	.word	0x200081d0

08011030 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b084      	sub	sp, #16
 8011034:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011036:	f3ef 8310 	mrs	r3, PRIMASK
 801103a:	607b      	str	r3, [r7, #4]
    return(posture);
 801103c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801103e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011040:	b672      	cpsid	i
    return(int_posture);
 8011042:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8011044:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8011046:	4b09      	ldr	r3, [pc, #36]	; (801106c <_tx_timer_expiration_process+0x3c>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	3301      	adds	r3, #1
 801104c:	4a07      	ldr	r2, [pc, #28]	; (801106c <_tx_timer_expiration_process+0x3c>)
 801104e:	6013      	str	r3, [r2, #0]
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	f383 8810 	msr	PRIMASK, r3
}
 801105a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 801105c:	4804      	ldr	r0, [pc, #16]	; (8011070 <_tx_timer_expiration_process+0x40>)
 801105e:	f7ff fcdd 	bl	8010a1c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8011062:	bf00      	nop
 8011064:	3710      	adds	r7, #16
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
 801106a:	bf00      	nop
 801106c:	2000812c 	.word	0x2000812c
 8011070:	200081dc 	.word	0x200081dc

08011074 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8011074:	b590      	push	{r4, r7, lr}
 8011076:	b089      	sub	sp, #36	; 0x24
 8011078:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 801107a:	4b28      	ldr	r3, [pc, #160]	; (801111c <_tx_timer_initialize+0xa8>)
 801107c:	2200      	movs	r2, #0
 801107e:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8011080:	4b27      	ldr	r3, [pc, #156]	; (8011120 <_tx_timer_initialize+0xac>)
 8011082:	2200      	movs	r2, #0
 8011084:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8011086:	4b27      	ldr	r3, [pc, #156]	; (8011124 <_tx_timer_initialize+0xb0>)
 8011088:	2200      	movs	r2, #0
 801108a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 801108c:	4b26      	ldr	r3, [pc, #152]	; (8011128 <_tx_timer_initialize+0xb4>)
 801108e:	2200      	movs	r2, #0
 8011090:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8011092:	4b26      	ldr	r3, [pc, #152]	; (801112c <_tx_timer_initialize+0xb8>)
 8011094:	2200      	movs	r2, #0
 8011096:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8011098:	2280      	movs	r2, #128	; 0x80
 801109a:	2100      	movs	r1, #0
 801109c:	4824      	ldr	r0, [pc, #144]	; (8011130 <_tx_timer_initialize+0xbc>)
 801109e:	f001 f90b 	bl	80122b8 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 80110a2:	4b24      	ldr	r3, [pc, #144]	; (8011134 <_tx_timer_initialize+0xc0>)
 80110a4:	4a22      	ldr	r2, [pc, #136]	; (8011130 <_tx_timer_initialize+0xbc>)
 80110a6:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80110a8:	4b23      	ldr	r3, [pc, #140]	; (8011138 <_tx_timer_initialize+0xc4>)
 80110aa:	4a21      	ldr	r2, [pc, #132]	; (8011130 <_tx_timer_initialize+0xbc>)
 80110ac:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80110ae:	4b23      	ldr	r3, [pc, #140]	; (801113c <_tx_timer_initialize+0xc8>)
 80110b0:	4a23      	ldr	r2, [pc, #140]	; (8011140 <_tx_timer_initialize+0xcc>)
 80110b2:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80110b4:	4b21      	ldr	r3, [pc, #132]	; (801113c <_tx_timer_initialize+0xc8>)
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	3304      	adds	r3, #4
 80110ba:	4a20      	ldr	r2, [pc, #128]	; (801113c <_tx_timer_initialize+0xc8>)
 80110bc:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80110be:	4b21      	ldr	r3, [pc, #132]	; (8011144 <_tx_timer_initialize+0xd0>)
 80110c0:	4a21      	ldr	r2, [pc, #132]	; (8011148 <_tx_timer_initialize+0xd4>)
 80110c2:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80110c4:	4b21      	ldr	r3, [pc, #132]	; (801114c <_tx_timer_initialize+0xd8>)
 80110c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80110ca:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80110cc:	4b20      	ldr	r3, [pc, #128]	; (8011150 <_tx_timer_initialize+0xdc>)
 80110ce:	2200      	movs	r2, #0
 80110d0:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 80110d2:	4b1c      	ldr	r3, [pc, #112]	; (8011144 <_tx_timer_initialize+0xd0>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	4a1d      	ldr	r2, [pc, #116]	; (801114c <_tx_timer_initialize+0xd8>)
 80110d8:	6812      	ldr	r2, [r2, #0]
 80110da:	491d      	ldr	r1, [pc, #116]	; (8011150 <_tx_timer_initialize+0xdc>)
 80110dc:	6809      	ldr	r1, [r1, #0]
 80110de:	481c      	ldr	r0, [pc, #112]	; (8011150 <_tx_timer_initialize+0xdc>)
 80110e0:	6800      	ldr	r0, [r0, #0]
 80110e2:	2400      	movs	r4, #0
 80110e4:	9405      	str	r4, [sp, #20]
 80110e6:	2400      	movs	r4, #0
 80110e8:	9404      	str	r4, [sp, #16]
 80110ea:	9003      	str	r0, [sp, #12]
 80110ec:	9102      	str	r1, [sp, #8]
 80110ee:	9201      	str	r2, [sp, #4]
 80110f0:	9300      	str	r3, [sp, #0]
 80110f2:	4b18      	ldr	r3, [pc, #96]	; (8011154 <_tx_timer_initialize+0xe0>)
 80110f4:	4a18      	ldr	r2, [pc, #96]	; (8011158 <_tx_timer_initialize+0xe4>)
 80110f6:	4919      	ldr	r1, [pc, #100]	; (801115c <_tx_timer_initialize+0xe8>)
 80110f8:	4819      	ldr	r0, [pc, #100]	; (8011160 <_tx_timer_initialize+0xec>)
 80110fa:	f7ff f8ff 	bl	80102fc <_tx_thread_create>
 80110fe:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d1e5      	bne.n	80110d2 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8011106:	4b17      	ldr	r3, [pc, #92]	; (8011164 <_tx_timer_initialize+0xf0>)
 8011108:	2200      	movs	r2, #0
 801110a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 801110c:	4b16      	ldr	r3, [pc, #88]	; (8011168 <_tx_timer_initialize+0xf4>)
 801110e:	2200      	movs	r2, #0
 8011110:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8011112:	bf00      	nop
 8011114:	370c      	adds	r7, #12
 8011116:	46bd      	mov	sp, r7
 8011118:	bd90      	pop	{r4, r7, pc}
 801111a:	bf00      	nop
 801111c:	20008138 	.word	0x20008138
 8011120:	20008698 	.word	0x20008698
 8011124:	2000813c 	.word	0x2000813c
 8011128:	200081cc 	.word	0x200081cc
 801112c:	200081d8 	.word	0x200081d8
 8011130:	20008140 	.word	0x20008140
 8011134:	200081c0 	.word	0x200081c0
 8011138:	200081c8 	.word	0x200081c8
 801113c:	200081c4 	.word	0x200081c4
 8011140:	200081bc 	.word	0x200081bc
 8011144:	2000828c 	.word	0x2000828c
 8011148:	20008298 	.word	0x20008298
 801114c:	20008290 	.word	0x20008290
 8011150:	20008294 	.word	0x20008294
 8011154:	4154494d 	.word	0x4154494d
 8011158:	080112a1 	.word	0x080112a1
 801115c:	08012f64 	.word	0x08012f64
 8011160:	200081dc 	.word	0x200081dc
 8011164:	200081d0 	.word	0x200081d0
 8011168:	200081d4 	.word	0x200081d4

0801116c <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 801116c:	b480      	push	{r7}
 801116e:	b089      	sub	sp, #36	; 0x24
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d04a      	beq.n	8011216 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011186:	d046      	beq.n	8011216 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	699b      	ldr	r3, [r3, #24]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d142      	bne.n	8011216 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	2b20      	cmp	r3, #32
 8011194:	d902      	bls.n	801119c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8011196:	231f      	movs	r3, #31
 8011198:	61bb      	str	r3, [r7, #24]
 801119a:	e002      	b.n	80111a2 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	3b01      	subs	r3, #1
 80111a0:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80111a2:	4b20      	ldr	r3, [pc, #128]	; (8011224 <_tx_timer_system_activate+0xb8>)
 80111a4:	681a      	ldr	r2, [r3, #0]
 80111a6:	69bb      	ldr	r3, [r7, #24]
 80111a8:	009b      	lsls	r3, r3, #2
 80111aa:	4413      	add	r3, r2
 80111ac:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80111ae:	4b1e      	ldr	r3, [pc, #120]	; (8011228 <_tx_timer_system_activate+0xbc>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	69fa      	ldr	r2, [r7, #28]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d30b      	bcc.n	80111d0 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80111b8:	4b1b      	ldr	r3, [pc, #108]	; (8011228 <_tx_timer_system_activate+0xbc>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	69fa      	ldr	r2, [r7, #28]
 80111be:	1ad3      	subs	r3, r2, r3
 80111c0:	109b      	asrs	r3, r3, #2
 80111c2:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80111c4:	4b19      	ldr	r3, [pc, #100]	; (801122c <_tx_timer_system_activate+0xc0>)
 80111c6:	681a      	ldr	r2, [r3, #0]
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	009b      	lsls	r3, r3, #2
 80111cc:	4413      	add	r3, r2
 80111ce:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80111d0:	69fb      	ldr	r3, [r7, #28]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d109      	bne.n	80111ec <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	687a      	ldr	r2, [r7, #4]
 80111dc:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	687a      	ldr	r2, [r7, #4]
 80111e2:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80111e4:	69fb      	ldr	r3, [r7, #28]
 80111e6:	687a      	ldr	r2, [r7, #4]
 80111e8:	601a      	str	r2, [r3, #0]
 80111ea:	e011      	b.n	8011210 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80111ec:	69fb      	ldr	r3, [r7, #28]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	695b      	ldr	r3, [r3, #20]
 80111f6:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	687a      	ldr	r2, [r7, #4]
 80111fc:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	687a      	ldr	r2, [r7, #4]
 8011202:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	68fa      	ldr	r2, [r7, #12]
 8011208:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	68ba      	ldr	r2, [r7, #8]
 801120e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	69fa      	ldr	r2, [r7, #28]
 8011214:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8011216:	bf00      	nop
 8011218:	3724      	adds	r7, #36	; 0x24
 801121a:	46bd      	mov	sp, r7
 801121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011220:	4770      	bx	lr
 8011222:	bf00      	nop
 8011224:	200081c8 	.word	0x200081c8
 8011228:	200081c4 	.word	0x200081c4
 801122c:	200081c0 	.word	0x200081c0

08011230 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8011230:	b480      	push	{r7}
 8011232:	b087      	sub	sp, #28
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	699b      	ldr	r3, [r3, #24]
 801123c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d026      	beq.n	8011292 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	691b      	ldr	r3, [r3, #16]
 8011248:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 801124a:	687a      	ldr	r2, [r7, #4]
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	429a      	cmp	r2, r3
 8011250:	d108      	bne.n	8011264 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8011252:	697b      	ldr	r3, [r7, #20]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	687a      	ldr	r2, [r7, #4]
 8011258:	429a      	cmp	r2, r3
 801125a:	d117      	bne.n	801128c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 801125c:	697b      	ldr	r3, [r7, #20]
 801125e:	2200      	movs	r2, #0
 8011260:	601a      	str	r2, [r3, #0]
 8011262:	e013      	b.n	801128c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	695b      	ldr	r3, [r3, #20]
 8011268:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	68fa      	ldr	r2, [r7, #12]
 801126e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	693a      	ldr	r2, [r7, #16]
 8011274:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8011276:	697b      	ldr	r3, [r7, #20]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	687a      	ldr	r2, [r7, #4]
 801127c:	429a      	cmp	r2, r3
 801127e:	d105      	bne.n	801128c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	697a      	ldr	r2, [r7, #20]
 8011284:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8011286:	697b      	ldr	r3, [r7, #20]
 8011288:	693a      	ldr	r2, [r7, #16]
 801128a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2200      	movs	r2, #0
 8011290:	619a      	str	r2, [r3, #24]
    }
}
 8011292:	bf00      	nop
 8011294:	371c      	adds	r7, #28
 8011296:	46bd      	mov	sp, r7
 8011298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129c:	4770      	bx	lr
	...

080112a0 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b098      	sub	sp, #96	; 0x60
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80112a8:	2300      	movs	r3, #0
 80112aa:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	4a73      	ldr	r2, [pc, #460]	; (801147c <_tx_timer_thread_entry+0x1dc>)
 80112b0:	4293      	cmp	r3, r2
 80112b2:	f040 80de 	bne.w	8011472 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80112b6:	f3ef 8310 	mrs	r3, PRIMASK
 80112ba:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80112bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80112be:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80112c0:	b672      	cpsid	i
    return(int_posture);
 80112c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80112c4:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80112c6:	4b6e      	ldr	r3, [pc, #440]	; (8011480 <_tx_timer_thread_entry+0x1e0>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d003      	beq.n	80112dc <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	f107 020c 	add.w	r2, r7, #12
 80112da:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80112dc:	4b68      	ldr	r3, [pc, #416]	; (8011480 <_tx_timer_thread_entry+0x1e0>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	2200      	movs	r2, #0
 80112e2:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80112e4:	4b66      	ldr	r3, [pc, #408]	; (8011480 <_tx_timer_thread_entry+0x1e0>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	3304      	adds	r3, #4
 80112ea:	4a65      	ldr	r2, [pc, #404]	; (8011480 <_tx_timer_thread_entry+0x1e0>)
 80112ec:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80112ee:	4b64      	ldr	r3, [pc, #400]	; (8011480 <_tx_timer_thread_entry+0x1e0>)
 80112f0:	681a      	ldr	r2, [r3, #0]
 80112f2:	4b64      	ldr	r3, [pc, #400]	; (8011484 <_tx_timer_thread_entry+0x1e4>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d103      	bne.n	8011302 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80112fa:	4b63      	ldr	r3, [pc, #396]	; (8011488 <_tx_timer_thread_entry+0x1e8>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	4a60      	ldr	r2, [pc, #384]	; (8011480 <_tx_timer_thread_entry+0x1e0>)
 8011300:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8011302:	4b62      	ldr	r3, [pc, #392]	; (801148c <_tx_timer_thread_entry+0x1ec>)
 8011304:	2200      	movs	r2, #0
 8011306:	601a      	str	r2, [r3, #0]
 8011308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801130a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801130c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801130e:	f383 8810 	msr	PRIMASK, r3
}
 8011312:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011314:	f3ef 8310 	mrs	r3, PRIMASK
 8011318:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 801131a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 801131c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801131e:	b672      	cpsid	i
    return(int_posture);
 8011320:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8011322:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8011324:	e07f      	b.n	8011426 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	691b      	ldr	r3, [r3, #16]
 801132e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8011330:	2300      	movs	r3, #0
 8011332:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8011334:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011338:	429a      	cmp	r2, r3
 801133a:	d102      	bne.n	8011342 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 801133c:	2300      	movs	r3, #0
 801133e:	60fb      	str	r3, [r7, #12]
 8011340:	e00e      	b.n	8011360 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8011342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011344:	695b      	ldr	r3, [r3, #20]
 8011346:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8011348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801134a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801134c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 801134e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011352:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8011354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011356:	f107 020c 	add.w	r2, r7, #12
 801135a:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 801135c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801135e:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8011360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	2b20      	cmp	r3, #32
 8011366:	d911      	bls.n	801138c <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8011368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8011370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011372:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8011374:	2300      	movs	r3, #0
 8011376:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8011378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801137a:	f107 0208 	add.w	r2, r7, #8
 801137e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8011380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011382:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011384:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8011386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011388:	60bb      	str	r3, [r7, #8]
 801138a:	e01a      	b.n	80113c2 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 801138c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801138e:	689b      	ldr	r3, [r3, #8]
 8011390:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8011392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011394:	68db      	ldr	r3, [r3, #12]
 8011396:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8011398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801139a:	685a      	ldr	r2, [r3, #4]
 801139c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801139e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80113a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d009      	beq.n	80113bc <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80113a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113aa:	f107 0208 	add.w	r2, r7, #8
 80113ae:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80113b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80113b4:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80113b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113b8:	60bb      	str	r3, [r7, #8]
 80113ba:	e002      	b.n	80113c2 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80113bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113be:	2200      	movs	r2, #0
 80113c0:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80113c2:	4a33      	ldr	r2, [pc, #204]	; (8011490 <_tx_timer_thread_entry+0x1f0>)
 80113c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113c6:	6013      	str	r3, [r2, #0]
 80113c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80113ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80113cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ce:	f383 8810 	msr	PRIMASK, r3
}
 80113d2:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80113d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d002      	beq.n	80113e0 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 80113da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80113dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80113de:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80113e0:	f3ef 8310 	mrs	r3, PRIMASK
 80113e4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80113e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80113e8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80113ea:	b672      	cpsid	i
    return(int_posture);
 80113ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80113ee:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80113f0:	4b27      	ldr	r3, [pc, #156]	; (8011490 <_tx_timer_thread_entry+0x1f0>)
 80113f2:	2200      	movs	r2, #0
 80113f4:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d105      	bne.n	801140a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80113fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011400:	2200      	movs	r2, #0
 8011402:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8011404:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011406:	f7ff feb1 	bl	801116c <_tx_timer_system_activate>
 801140a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801140c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801140e:	69bb      	ldr	r3, [r7, #24]
 8011410:	f383 8810 	msr	PRIMASK, r3
}
 8011414:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011416:	f3ef 8310 	mrs	r3, PRIMASK
 801141a:	623b      	str	r3, [r7, #32]
    return(posture);
 801141c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801141e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011420:	b672      	cpsid	i
    return(int_posture);
 8011422:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8011424:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	2b00      	cmp	r3, #0
 801142a:	f47f af7c 	bne.w	8011326 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 801142e:	4b17      	ldr	r3, [pc, #92]	; (801148c <_tx_timer_thread_entry+0x1ec>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d116      	bne.n	8011464 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8011436:	4b17      	ldr	r3, [pc, #92]	; (8011494 <_tx_timer_thread_entry+0x1f4>)
 8011438:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801143a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801143c:	2203      	movs	r2, #3
 801143e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011442:	2201      	movs	r2, #1
 8011444:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8011446:	4b14      	ldr	r3, [pc, #80]	; (8011498 <_tx_timer_thread_entry+0x1f8>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	3301      	adds	r3, #1
 801144c:	4a12      	ldr	r2, [pc, #72]	; (8011498 <_tx_timer_thread_entry+0x1f8>)
 801144e:	6013      	str	r3, [r2, #0]
 8011450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011452:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	f383 8810 	msr	PRIMASK, r3
}
 801145a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801145c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801145e:	f7ff fbdd 	bl	8010c1c <_tx_thread_system_suspend>
 8011462:	e728      	b.n	80112b6 <_tx_timer_thread_entry+0x16>
 8011464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011466:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	f383 8810 	msr	PRIMASK, r3
}
 801146e:	bf00      	nop
            TX_DISABLE
 8011470:	e721      	b.n	80112b6 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8011472:	bf00      	nop
 8011474:	3760      	adds	r7, #96	; 0x60
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}
 801147a:	bf00      	nop
 801147c:	4154494d 	.word	0x4154494d
 8011480:	200081c8 	.word	0x200081c8
 8011484:	200081c4 	.word	0x200081c4
 8011488:	200081c0 	.word	0x200081c0
 801148c:	200081cc 	.word	0x200081cc
 8011490:	200081d8 	.word	0x200081d8
 8011494:	200081dc 	.word	0x200081dc
 8011498:	2000812c 	.word	0x2000812c

0801149c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b08a      	sub	sp, #40	; 0x28
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	60f8      	str	r0, [r7, #12]
 80114a4:	60b9      	str	r1, [r7, #8]
 80114a6:	607a      	str	r2, [r7, #4]
 80114a8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80114aa:	2300      	movs	r3, #0
 80114ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d102      	bne.n	80114ba <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80114b4:	2302      	movs	r3, #2
 80114b6:	627b      	str	r3, [r7, #36]	; 0x24
 80114b8:	e029      	b.n	801150e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	4a2d      	ldr	r2, [pc, #180]	; (8011574 <_txe_byte_allocate+0xd8>)
 80114c0:	4293      	cmp	r3, r2
 80114c2:	d002      	beq.n	80114ca <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80114c4:	2302      	movs	r3, #2
 80114c6:	627b      	str	r3, [r7, #36]	; 0x24
 80114c8:	e021      	b.n	801150e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d102      	bne.n	80114d6 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80114d0:	2303      	movs	r3, #3
 80114d2:	627b      	str	r3, [r7, #36]	; 0x24
 80114d4:	e01b      	b.n	801150e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d102      	bne.n	80114e2 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80114dc:	2305      	movs	r3, #5
 80114de:	627b      	str	r3, [r7, #36]	; 0x24
 80114e0:	e015      	b.n	801150e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	69db      	ldr	r3, [r3, #28]
 80114e6:	687a      	ldr	r2, [r7, #4]
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d902      	bls.n	80114f2 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80114ec:	2305      	movs	r3, #5
 80114ee:	627b      	str	r3, [r7, #36]	; 0x24
 80114f0:	e00d      	b.n	801150e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d00a      	beq.n	801150e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80114f8:	f3ef 8305 	mrs	r3, IPSR
 80114fc:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80114fe:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011500:	4b1d      	ldr	r3, [pc, #116]	; (8011578 <_txe_byte_allocate+0xdc>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	4313      	orrs	r3, r2
 8011506:	2b00      	cmp	r3, #0
 8011508:	d001      	beq.n	801150e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801150a:	2304      	movs	r3, #4
 801150c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 801150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011510:	2b00      	cmp	r3, #0
 8011512:	d108      	bne.n	8011526 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8011514:	4b19      	ldr	r3, [pc, #100]	; (801157c <_txe_byte_allocate+0xe0>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801151a:	6a3b      	ldr	r3, [r7, #32]
 801151c:	4a18      	ldr	r2, [pc, #96]	; (8011580 <_txe_byte_allocate+0xe4>)
 801151e:	4293      	cmp	r3, r2
 8011520:	d101      	bne.n	8011526 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8011522:	2313      	movs	r3, #19
 8011524:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8011526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011528:	2b00      	cmp	r3, #0
 801152a:	d114      	bne.n	8011556 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801152c:	f3ef 8305 	mrs	r3, IPSR
 8011530:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011532:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011534:	4b10      	ldr	r3, [pc, #64]	; (8011578 <_txe_byte_allocate+0xdc>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	4313      	orrs	r3, r2
 801153a:	2b00      	cmp	r3, #0
 801153c:	d00b      	beq.n	8011556 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801153e:	f3ef 8305 	mrs	r3, IPSR
 8011542:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011544:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011546:	4b0c      	ldr	r3, [pc, #48]	; (8011578 <_txe_byte_allocate+0xdc>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	4313      	orrs	r3, r2
 801154c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011550:	d201      	bcs.n	8011556 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011552:	2313      	movs	r3, #19
 8011554:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011558:	2b00      	cmp	r3, #0
 801155a:	d106      	bne.n	801156a <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	687a      	ldr	r2, [r7, #4]
 8011560:	68b9      	ldr	r1, [r7, #8]
 8011562:	68f8      	ldr	r0, [r7, #12]
 8011564:	f7fd f9f0 	bl	800e948 <_tx_byte_allocate>
 8011568:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 801156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801156c:	4618      	mov	r0, r3
 801156e:	3728      	adds	r7, #40	; 0x28
 8011570:	46bd      	mov	sp, r7
 8011572:	bd80      	pop	{r7, pc}
 8011574:	42595445 	.word	0x42595445
 8011578:	20000088 	.word	0x20000088
 801157c:	20008094 	.word	0x20008094
 8011580:	200081dc 	.word	0x200081dc

08011584 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b092      	sub	sp, #72	; 0x48
 8011588:	af00      	add	r7, sp, #0
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	60b9      	str	r1, [r7, #8]
 801158e:	607a      	str	r2, [r7, #4]
 8011590:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011592:	2300      	movs	r3, #0
 8011594:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d102      	bne.n	80115a2 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801159c:	2302      	movs	r3, #2
 801159e:	647b      	str	r3, [r7, #68]	; 0x44
 80115a0:	e075      	b.n	801168e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80115a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115a4:	2b34      	cmp	r3, #52	; 0x34
 80115a6:	d002      	beq.n	80115ae <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80115a8:	2302      	movs	r3, #2
 80115aa:	647b      	str	r3, [r7, #68]	; 0x44
 80115ac:	e06f      	b.n	801168e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80115ae:	f3ef 8310 	mrs	r3, PRIMASK
 80115b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80115b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80115b6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80115b8:	b672      	cpsid	i
    return(int_posture);
 80115ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80115bc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80115be:	4b3b      	ldr	r3, [pc, #236]	; (80116ac <_txe_byte_pool_create+0x128>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	3301      	adds	r3, #1
 80115c4:	4a39      	ldr	r2, [pc, #228]	; (80116ac <_txe_byte_pool_create+0x128>)
 80115c6:	6013      	str	r3, [r2, #0]
 80115c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ca:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80115cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ce:	f383 8810 	msr	PRIMASK, r3
}
 80115d2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80115d4:	4b36      	ldr	r3, [pc, #216]	; (80116b0 <_txe_byte_pool_create+0x12c>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80115da:	2300      	movs	r3, #0
 80115dc:	643b      	str	r3, [r7, #64]	; 0x40
 80115de:	e009      	b.n	80115f4 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80115e0:	68fa      	ldr	r2, [r7, #12]
 80115e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d00b      	beq.n	8011600 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80115e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80115ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115f0:	3301      	adds	r3, #1
 80115f2:	643b      	str	r3, [r7, #64]	; 0x40
 80115f4:	4b2f      	ldr	r3, [pc, #188]	; (80116b4 <_txe_byte_pool_create+0x130>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d3f0      	bcc.n	80115e0 <_txe_byte_pool_create+0x5c>
 80115fe:	e000      	b.n	8011602 <_txe_byte_pool_create+0x7e>
                break;
 8011600:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011602:	f3ef 8310 	mrs	r3, PRIMASK
 8011606:	623b      	str	r3, [r7, #32]
    return(posture);
 8011608:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801160a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801160c:	b672      	cpsid	i
    return(int_posture);
 801160e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8011610:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8011612:	4b26      	ldr	r3, [pc, #152]	; (80116ac <_txe_byte_pool_create+0x128>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	3b01      	subs	r3, #1
 8011618:	4a24      	ldr	r2, [pc, #144]	; (80116ac <_txe_byte_pool_create+0x128>)
 801161a:	6013      	str	r3, [r2, #0]
 801161c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801161e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011622:	f383 8810 	msr	PRIMASK, r3
}
 8011626:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011628:	f7ff f9be 	bl	80109a8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 801162c:	68fa      	ldr	r2, [r7, #12]
 801162e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011630:	429a      	cmp	r2, r3
 8011632:	d102      	bne.n	801163a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8011634:	2302      	movs	r3, #2
 8011636:	647b      	str	r3, [r7, #68]	; 0x44
 8011638:	e029      	b.n	801168e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d102      	bne.n	8011646 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8011640:	2303      	movs	r3, #3
 8011642:	647b      	str	r3, [r7, #68]	; 0x44
 8011644:	e023      	b.n	801168e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	2b63      	cmp	r3, #99	; 0x63
 801164a:	d802      	bhi.n	8011652 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 801164c:	2305      	movs	r3, #5
 801164e:	647b      	str	r3, [r7, #68]	; 0x44
 8011650:	e01d      	b.n	801168e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011652:	4b19      	ldr	r3, [pc, #100]	; (80116b8 <_txe_byte_pool_create+0x134>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8011658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801165a:	4a18      	ldr	r2, [pc, #96]	; (80116bc <_txe_byte_pool_create+0x138>)
 801165c:	4293      	cmp	r3, r2
 801165e:	d101      	bne.n	8011664 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011660:	2313      	movs	r3, #19
 8011662:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011664:	f3ef 8305 	mrs	r3, IPSR
 8011668:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801166a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801166c:	4b14      	ldr	r3, [pc, #80]	; (80116c0 <_txe_byte_pool_create+0x13c>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	4313      	orrs	r3, r2
 8011672:	2b00      	cmp	r3, #0
 8011674:	d00b      	beq.n	801168e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011676:	f3ef 8305 	mrs	r3, IPSR
 801167a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801167c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801167e:	4b10      	ldr	r3, [pc, #64]	; (80116c0 <_txe_byte_pool_create+0x13c>)
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	4313      	orrs	r3, r2
 8011684:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011688:	d201      	bcs.n	801168e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801168a:	2313      	movs	r3, #19
 801168c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801168e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011690:	2b00      	cmp	r3, #0
 8011692:	d106      	bne.n	80116a2 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	687a      	ldr	r2, [r7, #4]
 8011698:	68b9      	ldr	r1, [r7, #8]
 801169a:	68f8      	ldr	r0, [r7, #12]
 801169c:	f7fd fa96 	bl	800ebcc <_tx_byte_pool_create>
 80116a0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80116a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3748      	adds	r7, #72	; 0x48
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}
 80116ac:	2000812c 	.word	0x2000812c
 80116b0:	20008084 	.word	0x20008084
 80116b4:	20008088 	.word	0x20008088
 80116b8:	20008094 	.word	0x20008094
 80116bc:	200081dc 	.word	0x200081dc
 80116c0:	20000088 	.word	0x20000088

080116c4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b09a      	sub	sp, #104	; 0x68
 80116c8:	af06      	add	r7, sp, #24
 80116ca:	60f8      	str	r0, [r7, #12]
 80116cc:	60b9      	str	r1, [r7, #8]
 80116ce:	607a      	str	r2, [r7, #4]
 80116d0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80116d2:	2300      	movs	r3, #0
 80116d4:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d102      	bne.n	80116e2 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80116dc:	230e      	movs	r3, #14
 80116de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80116e0:	e0bb      	b.n	801185a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80116e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80116e4:	2bb0      	cmp	r3, #176	; 0xb0
 80116e6:	d002      	beq.n	80116ee <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80116e8:	230e      	movs	r3, #14
 80116ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80116ec:	e0b5      	b.n	801185a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80116ee:	f3ef 8310 	mrs	r3, PRIMASK
 80116f2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80116f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80116f6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80116f8:	b672      	cpsid	i
    return(int_posture);
 80116fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80116fc:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80116fe:	4b64      	ldr	r3, [pc, #400]	; (8011890 <_txe_thread_create+0x1cc>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	3301      	adds	r3, #1
 8011704:	4a62      	ldr	r2, [pc, #392]	; (8011890 <_txe_thread_create+0x1cc>)
 8011706:	6013      	str	r3, [r2, #0]
 8011708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801170a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801170c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801170e:	f383 8810 	msr	PRIMASK, r3
}
 8011712:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8011714:	2300      	movs	r3, #0
 8011716:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8011718:	4b5e      	ldr	r3, [pc, #376]	; (8011894 <_txe_thread_create+0x1d0>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801171e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011720:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8011722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011724:	3b01      	subs	r3, #1
 8011726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011728:	4413      	add	r3, r2
 801172a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 801172c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801172e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8011730:	2300      	movs	r3, #0
 8011732:	647b      	str	r3, [r7, #68]	; 0x44
 8011734:	e02b      	b.n	801178e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8011736:	68fa      	ldr	r2, [r7, #12]
 8011738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801173a:	429a      	cmp	r2, r3
 801173c:	d101      	bne.n	8011742 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 801173e:	2301      	movs	r3, #1
 8011740:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8011742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011744:	2b01      	cmp	r3, #1
 8011746:	d028      	beq.n	801179a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8011748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801174a:	68db      	ldr	r3, [r3, #12]
 801174c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801174e:	429a      	cmp	r2, r3
 8011750:	d308      	bcc.n	8011764 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8011752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011754:	691b      	ldr	r3, [r3, #16]
 8011756:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011758:	429a      	cmp	r2, r3
 801175a:	d203      	bcs.n	8011764 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801175c:	2300      	movs	r3, #0
 801175e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8011760:	2301      	movs	r3, #1
 8011762:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8011764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011766:	68db      	ldr	r3, [r3, #12]
 8011768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801176a:	429a      	cmp	r2, r3
 801176c:	d308      	bcc.n	8011780 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801176e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011770:	691b      	ldr	r3, [r3, #16]
 8011772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011774:	429a      	cmp	r2, r3
 8011776:	d203      	bcs.n	8011780 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8011778:	2300      	movs	r3, #0
 801177a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801177c:	2301      	movs	r3, #1
 801177e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8011780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011786:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8011788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801178a:	3301      	adds	r3, #1
 801178c:	647b      	str	r3, [r7, #68]	; 0x44
 801178e:	4b42      	ldr	r3, [pc, #264]	; (8011898 <_txe_thread_create+0x1d4>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011794:	429a      	cmp	r2, r3
 8011796:	d3ce      	bcc.n	8011736 <_txe_thread_create+0x72>
 8011798:	e000      	b.n	801179c <_txe_thread_create+0xd8>
                break;
 801179a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801179c:	f3ef 8310 	mrs	r3, PRIMASK
 80117a0:	61fb      	str	r3, [r7, #28]
    return(posture);
 80117a2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80117a4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80117a6:	b672      	cpsid	i
    return(int_posture);
 80117a8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80117aa:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80117ac:	4b38      	ldr	r3, [pc, #224]	; (8011890 <_txe_thread_create+0x1cc>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	3b01      	subs	r3, #1
 80117b2:	4a37      	ldr	r2, [pc, #220]	; (8011890 <_txe_thread_create+0x1cc>)
 80117b4:	6013      	str	r3, [r2, #0]
 80117b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117b8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80117ba:	6a3b      	ldr	r3, [r7, #32]
 80117bc:	f383 8810 	msr	PRIMASK, r3
}
 80117c0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80117c2:	f7ff f8f1 	bl	80109a8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80117c6:	68fa      	ldr	r2, [r7, #12]
 80117c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117ca:	429a      	cmp	r2, r3
 80117cc:	d102      	bne.n	80117d4 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80117ce:	230e      	movs	r3, #14
 80117d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117d2:	e042      	b.n	801185a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80117d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d102      	bne.n	80117e0 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80117da:	2303      	movs	r3, #3
 80117dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117de:	e03c      	b.n	801185a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d102      	bne.n	80117ec <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80117e6:	2303      	movs	r3, #3
 80117e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117ea:	e036      	b.n	801185a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80117ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117ee:	2bc7      	cmp	r3, #199	; 0xc7
 80117f0:	d802      	bhi.n	80117f8 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80117f2:	2305      	movs	r3, #5
 80117f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117f6:	e030      	b.n	801185a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80117f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117fa:	2b1f      	cmp	r3, #31
 80117fc:	d902      	bls.n	8011804 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80117fe:	230f      	movs	r3, #15
 8011800:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011802:	e02a      	b.n	801185a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8011804:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011808:	429a      	cmp	r2, r3
 801180a:	d902      	bls.n	8011812 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 801180c:	2318      	movs	r3, #24
 801180e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011810:	e023      	b.n	801185a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8011812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011814:	2b01      	cmp	r3, #1
 8011816:	d902      	bls.n	801181e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8011818:	2310      	movs	r3, #16
 801181a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801181c:	e01d      	b.n	801185a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 801181e:	4b1f      	ldr	r3, [pc, #124]	; (801189c <_txe_thread_create+0x1d8>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8011824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011826:	4a1e      	ldr	r2, [pc, #120]	; (80118a0 <_txe_thread_create+0x1dc>)
 8011828:	4293      	cmp	r3, r2
 801182a:	d101      	bne.n	8011830 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801182c:	2313      	movs	r3, #19
 801182e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011830:	f3ef 8305 	mrs	r3, IPSR
 8011834:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011836:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011838:	4b1a      	ldr	r3, [pc, #104]	; (80118a4 <_txe_thread_create+0x1e0>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	4313      	orrs	r3, r2
 801183e:	2b00      	cmp	r3, #0
 8011840:	d00b      	beq.n	801185a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011842:	f3ef 8305 	mrs	r3, IPSR
 8011846:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011848:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801184a:	4b16      	ldr	r3, [pc, #88]	; (80118a4 <_txe_thread_create+0x1e0>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	4313      	orrs	r3, r2
 8011850:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011854:	d201      	bcs.n	801185a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8011856:	2313      	movs	r3, #19
 8011858:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801185a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801185c:	2b00      	cmp	r3, #0
 801185e:	d112      	bne.n	8011886 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8011860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011862:	9305      	str	r3, [sp, #20]
 8011864:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011866:	9304      	str	r3, [sp, #16]
 8011868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801186a:	9303      	str	r3, [sp, #12]
 801186c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801186e:	9302      	str	r3, [sp, #8]
 8011870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011872:	9301      	str	r3, [sp, #4]
 8011874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011876:	9300      	str	r3, [sp, #0]
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	687a      	ldr	r2, [r7, #4]
 801187c:	68b9      	ldr	r1, [r7, #8]
 801187e:	68f8      	ldr	r0, [r7, #12]
 8011880:	f7fe fd3c 	bl	80102fc <_tx_thread_create>
 8011884:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8011886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8011888:	4618      	mov	r0, r3
 801188a:	3750      	adds	r7, #80	; 0x50
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}
 8011890:	2000812c 	.word	0x2000812c
 8011894:	2000809c 	.word	0x2000809c
 8011898:	200080a0 	.word	0x200080a0
 801189c:	20008094 	.word	0x20008094
 80118a0:	200081dc 	.word	0x200081dc
 80118a4:	20000088 	.word	0x20000088

080118a8 <_txe_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _txe_thread_relinquish(VOID)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b082      	sub	sp, #8
 80118ac:	af00      	add	r7, sp, #0

TX_THREAD   *current_thread;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80118ae:	4b0a      	ldr	r3, [pc, #40]	; (80118d8 <_txe_thread_relinquish+0x30>)
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	607b      	str	r3, [r7, #4]

    /* Make sure a thread is executing.  */
    if (current_thread != TX_NULL)
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d00a      	beq.n	80118d0 <_txe_thread_relinquish+0x28>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80118ba:	f3ef 8305 	mrs	r3, IPSR
 80118be:	603b      	str	r3, [r7, #0]
    return(ipsr_value);
 80118c0:	683a      	ldr	r2, [r7, #0]
    {

        /* Now make sure the call is not from an ISR or Initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 80118c2:	4b06      	ldr	r3, [pc, #24]	; (80118dc <_txe_thread_relinquish+0x34>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	4313      	orrs	r3, r2
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d101      	bne.n	80118d0 <_txe_thread_relinquish+0x28>
        {

            /* Okay to call the real relinquish function.  */
            _tx_thread_relinquish();
 80118cc:	f7fe feda 	bl	8010684 <_tx_thread_relinquish>
        }
    }
}
 80118d0:	bf00      	nop
 80118d2:	3708      	adds	r7, #8
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}
 80118d8:	20008094 	.word	0x20008094
 80118dc:	20000088 	.word	0x20000088

080118e0 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d102      	bne.n	80118f4 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80118ee:	230e      	movs	r3, #14
 80118f0:	60fb      	str	r3, [r7, #12]
 80118f2:	e00b      	b.n	801190c <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	4a07      	ldr	r2, [pc, #28]	; (8011918 <_txe_thread_resume+0x38>)
 80118fa:	4293      	cmp	r3, r2
 80118fc:	d002      	beq.n	8011904 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80118fe:	230e      	movs	r3, #14
 8011900:	60fb      	str	r3, [r7, #12]
 8011902:	e003      	b.n	801190c <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f7fe ff23 	bl	8010750 <_tx_thread_resume>
 801190a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 801190c:	68fb      	ldr	r3, [r7, #12]
}
 801190e:	4618      	mov	r0, r3
 8011910:	3710      	adds	r7, #16
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}
 8011916:	bf00      	nop
 8011918:	54485244 	.word	0x54485244

0801191c <MX_NetXDuo_Init>:
  * @brief  Application NetXDuo Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_NetXDuo_Init(VOID *memory_ptr)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b08e      	sub	sp, #56	; 0x38
 8011920:	af08      	add	r7, sp, #32
 8011922:	6078      	str	r0, [r7, #4]
  UINT ret = NX_SUCCESS;
 8011924:	2300      	movs	r3, #0
 8011926:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	613b      	str	r3, [r7, #16]

   /* USER CODE BEGIN App_NetXDuo_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END App_NetXDuo_MEM_POOL */
  /* USER CODE BEGIN 0 */
  printf("Nx_UDP_Echo_Server application started..\n");
 801192c:	487f      	ldr	r0, [pc, #508]	; (8011b2c <MX_NetXDuo_Init+0x210>)
 801192e:	f000 fbc9 	bl	80120c4 <puts>
  /* USER CODE END 0 */

  /* Initialize the NetXDuo system. */
  CHAR *pointer;
  nx_system_initialize();
 8011932:	f7f7 ff45 	bl	80097c0 <_nx_system_initialize>

    /* Allocate the memory for packet_pool.  */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, NX_APP_PACKET_POOL_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8011936:	f107 010c 	add.w	r1, r7, #12
 801193a:	2300      	movs	r3, #0
 801193c:	f641 722c 	movw	r2, #7980	; 0x1f2c
 8011940:	6938      	ldr	r0, [r7, #16]
 8011942:	f7ff fdab 	bl	801149c <_txe_byte_allocate>
 8011946:	4603      	mov	r3, r0
 8011948:	2b00      	cmp	r3, #0
 801194a:	d001      	beq.n	8011950 <MX_NetXDuo_Init+0x34>
  {
    return TX_POOL_ERROR;
 801194c:	2302      	movs	r3, #2
 801194e:	e0e8      	b.n	8011b22 <MX_NetXDuo_Init+0x206>
  }

  /* Create the Packet pool to be used for packet allocation,
   * If extra NX_PACKET are to be used the NX_APP_PACKET_POOL_SIZE should be increased
   */
  ret = nx_packet_pool_create(&NxAppPool, "NetXDuo App Pool", DEFAULT_PAYLOAD_SIZE, pointer, NX_APP_PACKET_POOL_SIZE);
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	223c      	movs	r2, #60	; 0x3c
 8011954:	9201      	str	r2, [sp, #4]
 8011956:	f641 722c 	movw	r2, #7980	; 0x1f2c
 801195a:	9200      	str	r2, [sp, #0]
 801195c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8011960:	4973      	ldr	r1, [pc, #460]	; (8011b30 <MX_NetXDuo_Init+0x214>)
 8011962:	4874      	ldr	r0, [pc, #464]	; (8011b34 <MX_NetXDuo_Init+0x218>)
 8011964:	f7fc fc72 	bl	800e24c <_nxe_packet_pool_create>
 8011968:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d001      	beq.n	8011974 <MX_NetXDuo_Init+0x58>
  {
    return NX_POOL_ERROR;
 8011970:	2306      	movs	r3, #6
 8011972:	e0d6      	b.n	8011b22 <MX_NetXDuo_Init+0x206>
  }

    /* Allocate the memory for Ip_Instance */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, Nx_IP_INSTANCE_THREAD_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8011974:	f107 010c 	add.w	r1, r7, #12
 8011978:	2300      	movs	r3, #0
 801197a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801197e:	6938      	ldr	r0, [r7, #16]
 8011980:	f7ff fd8c 	bl	801149c <_txe_byte_allocate>
 8011984:	4603      	mov	r3, r0
 8011986:	2b00      	cmp	r3, #0
 8011988:	d001      	beq.n	801198e <MX_NetXDuo_Init+0x72>
  {
    return TX_POOL_ERROR;
 801198a:	2302      	movs	r3, #2
 801198c:	e0c9      	b.n	8011b22 <MX_NetXDuo_Init+0x206>
  }

   /* Create the main NX_IP instance */
  ret = nx_ip_create(&NetXDuoEthIpInstance, "NetX Ip instance", NX_APP_DEFAULT_IP_ADDRESS, NX_APP_DEFAULT_NET_MASK, &NxAppPool, nx_stm32_eth_driver,
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	f44f 62f9 	mov.w	r2, #1992	; 0x7c8
 8011994:	9205      	str	r2, [sp, #20]
 8011996:	220a      	movs	r2, #10
 8011998:	9204      	str	r2, [sp, #16]
 801199a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801199e:	9203      	str	r2, [sp, #12]
 80119a0:	9302      	str	r3, [sp, #8]
 80119a2:	4b65      	ldr	r3, [pc, #404]	; (8011b38 <MX_NetXDuo_Init+0x21c>)
 80119a4:	9301      	str	r3, [sp, #4]
 80119a6:	4b63      	ldr	r3, [pc, #396]	; (8011b34 <MX_NetXDuo_Init+0x218>)
 80119a8:	9300      	str	r3, [sp, #0]
 80119aa:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 80119ae:	4a63      	ldr	r2, [pc, #396]	; (8011b3c <MX_NetXDuo_Init+0x220>)
 80119b0:	4963      	ldr	r1, [pc, #396]	; (8011b40 <MX_NetXDuo_Init+0x224>)
 80119b2:	4864      	ldr	r0, [pc, #400]	; (8011b44 <MX_NetXDuo_Init+0x228>)
 80119b4:	f7fc fa82 	bl	800debc <_nxe_ip_create>
 80119b8:	6178      	str	r0, [r7, #20]
                     pointer, Nx_IP_INSTANCE_THREAD_SIZE, NX_APP_INSTANCE_PRIORITY);

  if (ret != NX_SUCCESS)
 80119ba:	697b      	ldr	r3, [r7, #20]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d001      	beq.n	80119c4 <MX_NetXDuo_Init+0xa8>
  {
    return NX_NOT_SUCCESSFUL;
 80119c0:	2343      	movs	r3, #67	; 0x43
 80119c2:	e0ae      	b.n	8011b22 <MX_NetXDuo_Init+0x206>
  }

    /* Allocate the memory for ARP */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, DEFAULT_ARP_CACHE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80119c4:	f107 010c 	add.w	r1, r7, #12
 80119c8:	2300      	movs	r3, #0
 80119ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80119ce:	6938      	ldr	r0, [r7, #16]
 80119d0:	f7ff fd64 	bl	801149c <_txe_byte_allocate>
 80119d4:	4603      	mov	r3, r0
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d001      	beq.n	80119de <MX_NetXDuo_Init+0xc2>
  {
    return TX_POOL_ERROR;
 80119da:	2302      	movs	r3, #2
 80119dc:	e0a1      	b.n	8011b22 <MX_NetXDuo_Init+0x206>

  /* USER CODE BEGIN ARP_Protocol_Initialization */

  /* USER CODE END ARP_Protocol_Initialization */

  ret = nx_arp_enable(&NetXDuoEthIpInstance, (VOID *)pointer, DEFAULT_ARP_CACHE_SIZE);
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80119e4:	4619      	mov	r1, r3
 80119e6:	4857      	ldr	r0, [pc, #348]	; (8011b44 <MX_NetXDuo_Init+0x228>)
 80119e8:	f7fc f998 	bl	800dd1c <_nxe_arp_enable>
 80119ec:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d001      	beq.n	80119f8 <MX_NetXDuo_Init+0xdc>
  {
    return NX_NOT_SUCCESSFUL;
 80119f4:	2343      	movs	r3, #67	; 0x43
 80119f6:	e094      	b.n	8011b22 <MX_NetXDuo_Init+0x206>

  /* USER CODE BEGIN ICMP_Protocol_Initialization */

  /* USER CODE END ICMP_Protocol_Initialization */

  ret = nx_icmp_enable(&NetXDuoEthIpInstance);
 80119f8:	4852      	ldr	r0, [pc, #328]	; (8011b44 <MX_NetXDuo_Init+0x228>)
 80119fa:	f7fc f9db 	bl	800ddb4 <_nxe_icmp_enable>
 80119fe:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 8011a00:	697b      	ldr	r3, [r7, #20]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d001      	beq.n	8011a0a <MX_NetXDuo_Init+0xee>
  {
    return NX_NOT_SUCCESSFUL;
 8011a06:	2343      	movs	r3, #67	; 0x43
 8011a08:	e08b      	b.n	8011b22 <MX_NetXDuo_Init+0x206>

  /* USER CODE BEGIN TCP_Protocol_Initialization */

  /* USER CODE END TCP_Protocol_Initialization */

  ret = nx_tcp_enable(&NetXDuoEthIpInstance);
 8011a0a:	484e      	ldr	r0, [pc, #312]	; (8011b44 <MX_NetXDuo_Init+0x228>)
 8011a0c:	f7fc fd58 	bl	800e4c0 <_nxe_tcp_enable>
 8011a10:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 8011a12:	697b      	ldr	r3, [r7, #20]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d001      	beq.n	8011a1c <MX_NetXDuo_Init+0x100>
  {
    return NX_NOT_SUCCESSFUL;
 8011a18:	2343      	movs	r3, #67	; 0x43
 8011a1a:	e082      	b.n	8011b22 <MX_NetXDuo_Init+0x206>

  /* USER CODE BEGIN UDP_Protocol_Initialization */

  /* USER CODE END UDP_Protocol_Initialization */

  ret = nx_udp_enable(&NetXDuoEthIpInstance);
 8011a1c:	4849      	ldr	r0, [pc, #292]	; (8011b44 <MX_NetXDuo_Init+0x228>)
 8011a1e:	f7fc fd87 	bl	800e530 <_nxe_udp_enable>
 8011a22:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 8011a24:	697b      	ldr	r3, [r7, #20]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d001      	beq.n	8011a2e <MX_NetXDuo_Init+0x112>
  {
    return NX_NOT_SUCCESSFUL;
 8011a2a:	2343      	movs	r3, #67	; 0x43
 8011a2c:	e079      	b.n	8011b22 <MX_NetXDuo_Init+0x206>
  }

   /* Allocate the memory for main thread   */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, NX_APP_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8011a2e:	f107 010c 	add.w	r1, r7, #12
 8011a32:	2300      	movs	r3, #0
 8011a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a38:	6938      	ldr	r0, [r7, #16]
 8011a3a:	f7ff fd2f 	bl	801149c <_txe_byte_allocate>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d001      	beq.n	8011a48 <MX_NetXDuo_Init+0x12c>
  {
    return TX_POOL_ERROR;
 8011a44:	2302      	movs	r3, #2
 8011a46:	e06c      	b.n	8011b22 <MX_NetXDuo_Init+0x206>
  }

  /* Create the main thread */
  ret = tx_thread_create(&NxAppThread, "NetXDuo App thread", nx_app_thread_entry , 0, pointer, NX_APP_THREAD_STACK_SIZE,
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	22b0      	movs	r2, #176	; 0xb0
 8011a4c:	9206      	str	r2, [sp, #24]
 8011a4e:	2201      	movs	r2, #1
 8011a50:	9205      	str	r2, [sp, #20]
 8011a52:	2200      	movs	r2, #0
 8011a54:	9204      	str	r2, [sp, #16]
 8011a56:	220a      	movs	r2, #10
 8011a58:	9203      	str	r2, [sp, #12]
 8011a5a:	220a      	movs	r2, #10
 8011a5c:	9202      	str	r2, [sp, #8]
 8011a5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a62:	9201      	str	r2, [sp, #4]
 8011a64:	9300      	str	r3, [sp, #0]
 8011a66:	2300      	movs	r3, #0
 8011a68:	4a37      	ldr	r2, [pc, #220]	; (8011b48 <MX_NetXDuo_Init+0x22c>)
 8011a6a:	4938      	ldr	r1, [pc, #224]	; (8011b4c <MX_NetXDuo_Init+0x230>)
 8011a6c:	4838      	ldr	r0, [pc, #224]	; (8011b50 <MX_NetXDuo_Init+0x234>)
 8011a6e:	f7ff fe29 	bl	80116c4 <_txe_thread_create>
 8011a72:	6178      	str	r0, [r7, #20]
                         NX_APP_THREAD_PRIORITY, NX_APP_THREAD_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);

  if (ret != TX_SUCCESS)
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d001      	beq.n	8011a7e <MX_NetXDuo_Init+0x162>
  {
    return TX_THREAD_ERROR;
 8011a7a:	230e      	movs	r3, #14
 8011a7c:	e051      	b.n	8011b22 <MX_NetXDuo_Init+0x206>
  }

  /* USER CODE BEGIN MX_NetXDuo_Init */
  /* Allocate the app UDP thread entry pool. */
  ret = tx_byte_allocate(byte_pool, (VOID **) &pointer, 2 * DEFAULT_MEMORY_SIZE, TX_NO_WAIT);
 8011a7e:	f107 010c 	add.w	r1, r7, #12
 8011a82:	2300      	movs	r3, #0
 8011a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a88:	6938      	ldr	r0, [r7, #16]
 8011a8a:	f7ff fd07 	bl	801149c <_txe_byte_allocate>
 8011a8e:	6178      	str	r0, [r7, #20]

  if (ret != TX_SUCCESS)
 8011a90:	697b      	ldr	r3, [r7, #20]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d001      	beq.n	8011a9a <MX_NetXDuo_Init+0x17e>
  {
    return TX_POOL_ERROR;
 8011a96:	2302      	movs	r3, #2
 8011a98:	e043      	b.n	8011b22 <MX_NetXDuo_Init+0x206>
  }
  /* create the UDP server thread */
  ret = tx_thread_create(&AppUDPThread, "App UDP Thread", app_UDP_thread_entry, 0, pointer, 2 * DEFAULT_MEMORY_SIZE,
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	22b0      	movs	r2, #176	; 0xb0
 8011a9e:	9206      	str	r2, [sp, #24]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	9205      	str	r2, [sp, #20]
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	9204      	str	r2, [sp, #16]
 8011aa8:	220a      	movs	r2, #10
 8011aaa:	9203      	str	r2, [sp, #12]
 8011aac:	220a      	movs	r2, #10
 8011aae:	9202      	str	r2, [sp, #8]
 8011ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011ab4:	9201      	str	r2, [sp, #4]
 8011ab6:	9300      	str	r3, [sp, #0]
 8011ab8:	2300      	movs	r3, #0
 8011aba:	4a26      	ldr	r2, [pc, #152]	; (8011b54 <MX_NetXDuo_Init+0x238>)
 8011abc:	4926      	ldr	r1, [pc, #152]	; (8011b58 <MX_NetXDuo_Init+0x23c>)
 8011abe:	4827      	ldr	r0, [pc, #156]	; (8011b5c <MX_NetXDuo_Init+0x240>)
 8011ac0:	f7ff fe00 	bl	80116c4 <_txe_thread_create>
 8011ac4:	6178      	str	r0, [r7, #20]
	  				     DEFAULT_PRIORITY, DEFAULT_PRIORITY, TX_NO_TIME_SLICE, TX_DONT_START);

  if (ret != TX_SUCCESS)
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d001      	beq.n	8011ad0 <MX_NetXDuo_Init+0x1b4>
  {
	return TX_THREAD_ERROR;
 8011acc:	230e      	movs	r3, #14
 8011ace:	e028      	b.n	8011b22 <MX_NetXDuo_Init+0x206>
  }

  /* Allocate the memory for Link thread   */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,2 *  DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8011ad0:	f107 010c 	add.w	r1, r7, #12
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011ada:	6938      	ldr	r0, [r7, #16]
 8011adc:	f7ff fcde 	bl	801149c <_txe_byte_allocate>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d001      	beq.n	8011aea <MX_NetXDuo_Init+0x1ce>
  {
	return TX_POOL_ERROR;
 8011ae6:	2302      	movs	r3, #2
 8011ae8:	e01b      	b.n	8011b22 <MX_NetXDuo_Init+0x206>
  }

  /* create the Link thread */
  ret = tx_thread_create(&AppLinkThread, "App Link Thread", app_link_thread_entry, 0, pointer, 2 * DEFAULT_MEMORY_SIZE,
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	22b0      	movs	r2, #176	; 0xb0
 8011aee:	9206      	str	r2, [sp, #24]
 8011af0:	2201      	movs	r2, #1
 8011af2:	9205      	str	r2, [sp, #20]
 8011af4:	2200      	movs	r2, #0
 8011af6:	9204      	str	r2, [sp, #16]
 8011af8:	220b      	movs	r2, #11
 8011afa:	9203      	str	r2, [sp, #12]
 8011afc:	220b      	movs	r2, #11
 8011afe:	9202      	str	r2, [sp, #8]
 8011b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011b04:	9201      	str	r2, [sp, #4]
 8011b06:	9300      	str	r3, [sp, #0]
 8011b08:	2300      	movs	r3, #0
 8011b0a:	4a15      	ldr	r2, [pc, #84]	; (8011b60 <MX_NetXDuo_Init+0x244>)
 8011b0c:	4915      	ldr	r1, [pc, #84]	; (8011b64 <MX_NetXDuo_Init+0x248>)
 8011b0e:	4816      	ldr	r0, [pc, #88]	; (8011b68 <MX_NetXDuo_Init+0x24c>)
 8011b10:	f7ff fdd8 	bl	80116c4 <_txe_thread_create>
 8011b14:	6178      	str	r0, [r7, #20]
					     LINK_PRIORITY, LINK_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);

  if (ret != TX_SUCCESS)
 8011b16:	697b      	ldr	r3, [r7, #20]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d001      	beq.n	8011b20 <MX_NetXDuo_Init+0x204>
  {
	return TX_THREAD_ERROR;
 8011b1c:	230e      	movs	r3, #14
 8011b1e:	e000      	b.n	8011b22 <MX_NetXDuo_Init+0x206>
  }

  /* USER CODE END MX_NetXDuo_Init */

  return ret;
 8011b20:	697b      	ldr	r3, [r7, #20]
}
 8011b22:	4618      	mov	r0, r3
 8011b24:	3718      	adds	r7, #24
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}
 8011b2a:	bf00      	nop
 8011b2c:	08012f78 	.word	0x08012f78
 8011b30:	08012fa4 	.word	0x08012fa4
 8011b34:	2000892c 	.word	0x2000892c
 8011b38:	08004ad1 	.word	0x08004ad1
 8011b3c:	c0a80101 	.word	0xc0a80101
 8011b40:	08012fb8 	.word	0x08012fb8
 8011b44:	20008968 	.word	0x20008968
 8011b48:	08011b6d 	.word	0x08011b6d
 8011b4c:	08012fcc 	.word	0x08012fcc
 8011b50:	2000887c 	.word	0x2000887c
 8011b54:	08011be5 	.word	0x08011be5
 8011b58:	08012fe0 	.word	0x08012fe0
 8011b5c:	2000869c 	.word	0x2000869c
 8011b60:	08011d5d 	.word	0x08011d5d
 8011b64:	08012ff0 	.word	0x08012ff0
 8011b68:	2000874c 	.word	0x2000874c

08011b6c <nx_app_thread_entry>:
* @brief  Main thread entry.
* @param thread_input: ULONG user argument used by the thread entry
* @retval none
*/
static VOID nx_app_thread_entry (ULONG thread_input)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b086      	sub	sp, #24
 8011b70:	af02      	add	r7, sp, #8
 8011b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Nx_App_Thread_Entry 0 */
  UINT ret = NX_SUCCESS;
 8011b74:	2300      	movs	r3, #0
 8011b76:	60fb      	str	r3, [r7, #12]

  /* get IP address */
  ret = nx_ip_address_get(&NetXDuoEthIpInstance, &IpAddress, &NetMask);
 8011b78:	4a14      	ldr	r2, [pc, #80]	; (8011bcc <nx_app_thread_entry+0x60>)
 8011b7a:	4915      	ldr	r1, [pc, #84]	; (8011bd0 <nx_app_thread_entry+0x64>)
 8011b7c:	4815      	ldr	r0, [pc, #84]	; (8011bd4 <nx_app_thread_entry+0x68>)
 8011b7e:	f7fc f959 	bl	800de34 <_nxe_ip_address_get>
 8011b82:	60f8      	str	r0, [r7, #12]

  /* print the IP address */
  PRINT_IP_ADDRESS(IpAddress);
 8011b84:	4b12      	ldr	r3, [pc, #72]	; (8011bd0 <nx_app_thread_entry+0x64>)
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	0e19      	lsrs	r1, r3, #24
 8011b8a:	4b11      	ldr	r3, [pc, #68]	; (8011bd0 <nx_app_thread_entry+0x64>)
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	0c1b      	lsrs	r3, r3, #16
 8011b90:	b2d8      	uxtb	r0, r3
 8011b92:	4b0f      	ldr	r3, [pc, #60]	; (8011bd0 <nx_app_thread_entry+0x64>)
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	0a1b      	lsrs	r3, r3, #8
 8011b98:	b2db      	uxtb	r3, r3
 8011b9a:	4a0d      	ldr	r2, [pc, #52]	; (8011bd0 <nx_app_thread_entry+0x64>)
 8011b9c:	6812      	ldr	r2, [r2, #0]
 8011b9e:	b2d2      	uxtb	r2, r2
 8011ba0:	9201      	str	r2, [sp, #4]
 8011ba2:	9300      	str	r3, [sp, #0]
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	460a      	mov	r2, r1
 8011ba8:	490b      	ldr	r1, [pc, #44]	; (8011bd8 <nx_app_thread_entry+0x6c>)
 8011baa:	480c      	ldr	r0, [pc, #48]	; (8011bdc <nx_app_thread_entry+0x70>)
 8011bac:	f000 fa24 	bl	8011ff8 <iprintf>

  if (ret != TX_SUCCESS)
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d001      	beq.n	8011bba <nx_app_thread_entry+0x4e>
  {
    Error_Handler();
 8011bb6:	f7ee fe65 	bl	8000884 <Error_Handler>
  }

  /* Now the network is correctly initialized, start the UDP server thread */
  tx_thread_resume(&AppUDPThread);
 8011bba:	4809      	ldr	r0, [pc, #36]	; (8011be0 <nx_app_thread_entry+0x74>)
 8011bbc:	f7ff fe90 	bl	80118e0 <_txe_thread_resume>

  /* this thread is not needed any more, we relinquish it */
  tx_thread_relinquish();
 8011bc0:	f7ff fe72 	bl	80118a8 <_txe_thread_relinquish>
  /* USER CODE END Nx_App_Thread_Entry 0 */

}
 8011bc4:	bf00      	nop
 8011bc6:	3710      	adds	r7, #16
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}
 8011bcc:	20008878 	.word	0x20008878
 8011bd0:	20008874 	.word	0x20008874
 8011bd4:	20008968 	.word	0x20008968
 8011bd8:	08013000 	.word	0x08013000
 8011bdc:	0801300c 	.word	0x0801300c
 8011be0:	2000869c 	.word	0x2000869c

08011be4 <app_UDP_thread_entry>:
/* USER CODE BEGIN 1 */
static VOID app_UDP_thread_entry(ULONG thread_input)
{
 8011be4:	b5b0      	push	{r4, r5, r7, lr}
 8011be6:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8011bea:	af04      	add	r7, sp, #16
 8011bec:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011bf0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8011bf4:	6018      	str	r0, [r3, #0]
  UCHAR data_buffer[512];
  ULONG source_ip_address;
  NX_PACKET *data_packet;

  /* create the UDP socket */
  ret = nx_udp_socket_create(&NetXDuoEthIpInstance, &UDPSocket, "UDP Server Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, NX_IP_TIME_TO_LIVE, QUEUE_MAX_SIZE);
 8011bf6:	2378      	movs	r3, #120	; 0x78
 8011bf8:	9303      	str	r3, [sp, #12]
 8011bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011bfe:	9302      	str	r3, [sp, #8]
 8011c00:	2380      	movs	r3, #128	; 0x80
 8011c02:	9301      	str	r3, [sp, #4]
 8011c04:	2300      	movs	r3, #0
 8011c06:	9300      	str	r3, [sp, #0]
 8011c08:	2300      	movs	r3, #0
 8011c0a:	4a4d      	ldr	r2, [pc, #308]	; (8011d40 <app_UDP_thread_entry+0x15c>)
 8011c0c:	494d      	ldr	r1, [pc, #308]	; (8011d44 <app_UDP_thread_entry+0x160>)
 8011c0e:	484e      	ldr	r0, [pc, #312]	; (8011d48 <app_UDP_thread_entry+0x164>)
 8011c10:	f7fc fd0c 	bl	800e62c <_nxe_udp_socket_create>
 8011c14:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c

  if (ret != NX_SUCCESS)
 8011c18:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d001      	beq.n	8011c24 <app_UDP_thread_entry+0x40>
  {
     Error_Handler();
 8011c20:	f7ee fe30 	bl	8000884 <Error_Handler>
  }

  /* bind the socket indefinitely on the required port */
  ret = nx_udp_socket_bind(&UDPSocket, DEFAULT_PORT, TX_WAIT_FOREVER);
 8011c24:	f04f 32ff 	mov.w	r2, #4294967295
 8011c28:	f241 7170 	movw	r1, #6000	; 0x1770
 8011c2c:	4845      	ldr	r0, [pc, #276]	; (8011d44 <app_UDP_thread_entry+0x160>)
 8011c2e:	f7fc fcb7 	bl	800e5a0 <_nxe_udp_socket_bind>
 8011c32:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c

  if (ret != NX_SUCCESS)
 8011c36:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d002      	beq.n	8011c44 <app_UDP_thread_entry+0x60>
  {
     Error_Handler();
 8011c3e:	f7ee fe21 	bl	8000884 <Error_Handler>
 8011c42:	e004      	b.n	8011c4e <app_UDP_thread_entry+0x6a>
  }
  else
  {
    printf("UDP Server listening on PORT %d.. \n", DEFAULT_PORT);
 8011c44:	f241 7170 	movw	r1, #6000	; 0x1770
 8011c48:	4840      	ldr	r0, [pc, #256]	; (8011d4c <app_UDP_thread_entry+0x168>)
 8011c4a:	f000 f9d5 	bl	8011ff8 <iprintf>
  }

  while(1)
  {
    TX_MEMSET(data_buffer, '\0', sizeof(data_buffer));
 8011c4e:	f107 0314 	add.w	r3, r7, #20
 8011c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c56:	2100      	movs	r1, #0
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f000 fb2d 	bl	80122b8 <memset>

    /* wait for data for 1 sec */
    ret = nx_udp_socket_receive(&UDPSocket, &data_packet, 100);
 8011c5e:	f107 030c 	add.w	r3, r7, #12
 8011c62:	2264      	movs	r2, #100	; 0x64
 8011c64:	4619      	mov	r1, r3
 8011c66:	4837      	ldr	r0, [pc, #220]	; (8011d44 <app_UDP_thread_entry+0x160>)
 8011c68:	f7fc fd74 	bl	800e754 <_nxe_udp_socket_receive>
 8011c6c:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c

    if (ret == NX_SUCCESS)
 8011c70:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d15d      	bne.n	8011d34 <app_UDP_thread_entry+0x150>
    {
      /* data is available, read it into the data buffer */
      nx_packet_data_retrieve(data_packet, data_buffer, &bytes_read);
 8011c78:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011c7c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8011c86:	f107 0114 	add.w	r1, r7, #20
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7fc fac2 	bl	800e214 <_nxe_packet_data_retrieve>

      /* get info about the client address and port */
      nx_udp_source_extract(data_packet, &source_ip_address, &source_port);
 8011c90:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011c94:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8011c9e:	f107 0110 	add.w	r1, r7, #16
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7fc fe1e 	bl	800e8e4 <_nxe_udp_source_extract>

      /* print the client address, the remote port and the received data */
      PRINT_DATA(source_ip_address, source_port, data_buffer);
 8011ca8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011cac:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	0e18      	lsrs	r0, r3, #24
 8011cb4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011cb8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	0c1b      	lsrs	r3, r3, #16
 8011cc0:	b2dc      	uxtb	r4, r3
 8011cc2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011cc6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	0a1b      	lsrs	r3, r3, #8
 8011cce:	b2dd      	uxtb	r5, r3
 8011cd0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011cd4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	b2db      	uxtb	r3, r3
 8011cdc:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8011ce0:	f107 0114 	add.w	r1, r7, #20
 8011ce4:	9102      	str	r1, [sp, #8]
 8011ce6:	9201      	str	r2, [sp, #4]
 8011ce8:	9300      	str	r3, [sp, #0]
 8011cea:	462b      	mov	r3, r5
 8011cec:	4622      	mov	r2, r4
 8011cee:	4601      	mov	r1, r0
 8011cf0:	4817      	ldr	r0, [pc, #92]	; (8011d50 <app_UDP_thread_entry+0x16c>)
 8011cf2:	f000 f981 	bl	8011ff8 <iprintf>

      /* resend the same packet to the client */
      ret =  nx_udp_socket_send(&UDPSocket, data_packet, source_ip_address, source_port);
 8011cf6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011cfa:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8011cfe:	681a      	ldr	r2, [r3, #0]
 8011d00:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011d04:	f107 010c 	add.w	r1, r7, #12
 8011d08:	480e      	ldr	r0, [pc, #56]	; (8011d44 <app_UDP_thread_entry+0x160>)
 8011d0a:	f7fc fd65 	bl	800e7d8 <_nxe_udp_socket_send>
 8011d0e:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c

      /* toggle the green yellow to monitor visually the traffic */
      HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 8011d12:	2101      	movs	r1, #1
 8011d14:	480f      	ldr	r0, [pc, #60]	; (8011d54 <app_UDP_thread_entry+0x170>)
 8011d16:	f7f1 fa8b 	bl	8003230 <HAL_GPIO_TogglePin>
      HAL_PWR_DisableWakeUpPin(PWR_WKUP4);
 8011d1a:	2008      	movs	r0, #8
 8011d1c:	f7f1 fac8 	bl	80032b0 <HAL_PWR_DisableWakeUpPin>
      HAL_PWR_EnableWakeUpPin(PWR_WKUP4);
 8011d20:	2008      	movs	r0, #8
 8011d22:	f7f1 faaf 	bl	8003284 <HAL_PWR_EnableWakeUpPin>
      HAL_Delay(2000);
 8011d26:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8011d2a:	f7ef fa51 	bl	80011d0 <HAL_Delay>
      HAL_PWR_EnterSTANDBYMode();
 8011d2e:	f7f1 fad3 	bl	80032d8 <HAL_PWR_EnterSTANDBYMode>
 8011d32:	e78c      	b.n	8011c4e <app_UDP_thread_entry+0x6a>

    }
    else
    {
        /* the server is in idle state, toggle the yellow led */
        HAL_GPIO_TogglePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin);
 8011d34:	2110      	movs	r1, #16
 8011d36:	4808      	ldr	r0, [pc, #32]	; (8011d58 <app_UDP_thread_entry+0x174>)
 8011d38:	f7f1 fa7a 	bl	8003230 <HAL_GPIO_TogglePin>
    TX_MEMSET(data_buffer, '\0', sizeof(data_buffer));
 8011d3c:	e787      	b.n	8011c4e <app_UDP_thread_entry+0x6a>
 8011d3e:	bf00      	nop
 8011d40:	08013028 	.word	0x08013028
 8011d44:	200087fc 	.word	0x200087fc
 8011d48:	20008968 	.word	0x20008968
 8011d4c:	0801303c 	.word	0x0801303c
 8011d50:	08013060 	.word	0x08013060
 8011d54:	42020400 	.word	0x42020400
 8011d58:	42021400 	.word	0x42021400

08011d5c <app_link_thread_entry>:
* @brief  Link thread entry
* @param thread_input: ULONG thread parameter
* @retval none
*/
static VOID app_link_thread_entry(ULONG thread_input)
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b088      	sub	sp, #32
 8011d60:	af02      	add	r7, sp, #8
 8011d62:	6078      	str	r0, [r7, #4]
  ULONG actual_status;
  UINT linkdown = 0, status;
 8011d64:	2300      	movs	r3, #0
 8011d66:	617b      	str	r3, [r7, #20]

  while(1)
  {
    /* Get Physical Link status. */
    status = nx_ip_interface_status_check(&NetXDuoEthIpInstance, 0, NX_IP_LINK_ENABLED,
 8011d68:	f107 030c 	add.w	r3, r7, #12
 8011d6c:	220a      	movs	r2, #10
 8011d6e:	9200      	str	r2, [sp, #0]
 8011d70:	2204      	movs	r2, #4
 8011d72:	2100      	movs	r1, #0
 8011d74:	481b      	ldr	r0, [pc, #108]	; (8011de4 <app_link_thread_entry+0x88>)
 8011d76:	f7fc f9af 	bl	800e0d8 <_nxe_ip_interface_status_check>
 8011d7a:	6138      	str	r0, [r7, #16]
                                      &actual_status, 10);

    if(status == NX_SUCCESS)
 8011d7c:	693b      	ldr	r3, [r7, #16]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d123      	bne.n	8011dca <app_link_thread_entry+0x6e>
    {
      if(linkdown == 1)
 8011d82:	697b      	ldr	r3, [r7, #20]
 8011d84:	2b01      	cmp	r3, #1
 8011d86:	d128      	bne.n	8011dda <app_link_thread_entry+0x7e>
      {
        linkdown = 0;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	617b      	str	r3, [r7, #20]
        status = nx_ip_interface_status_check(&NetXDuoEthIpInstance, 0, NX_IP_ADDRESS_RESOLVED,
 8011d8c:	f107 030c 	add.w	r3, r7, #12
 8011d90:	220a      	movs	r2, #10
 8011d92:	9200      	str	r2, [sp, #0]
 8011d94:	2202      	movs	r2, #2
 8011d96:	2100      	movs	r1, #0
 8011d98:	4812      	ldr	r0, [pc, #72]	; (8011de4 <app_link_thread_entry+0x88>)
 8011d9a:	f7fc f99d 	bl	800e0d8 <_nxe_ip_interface_status_check>
 8011d9e:	6138      	str	r0, [r7, #16]
                                      &actual_status, 10);
        if(status == NX_SUCCESS)
 8011da0:	693b      	ldr	r3, [r7, #16]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d106      	bne.n	8011db4 <app_link_thread_entry+0x58>
        {
          /* The network cable is connected again. */
          printf("The network cable is connected again.\n");
 8011da6:	4810      	ldr	r0, [pc, #64]	; (8011de8 <app_link_thread_entry+0x8c>)
 8011da8:	f000 f98c 	bl	80120c4 <puts>
          /* Print UDP Echo Server is available again. */
          printf("UDP Echo Server is available again.\n");
 8011dac:	480f      	ldr	r0, [pc, #60]	; (8011dec <app_link_thread_entry+0x90>)
 8011dae:	f000 f989 	bl	80120c4 <puts>
 8011db2:	e012      	b.n	8011dda <app_link_thread_entry+0x7e>
        }
        else
        {
          /* The network cable is connected. */
          printf("The network cable is connected.\n");
 8011db4:	480e      	ldr	r0, [pc, #56]	; (8011df0 <app_link_thread_entry+0x94>)
 8011db6:	f000 f985 	bl	80120c4 <puts>
          /* Send command to Enable Nx driver. */
          nx_ip_driver_direct_command(&NetXDuoEthIpInstance, NX_LINK_ENABLE,
 8011dba:	f107 030c 	add.w	r3, r7, #12
 8011dbe:	461a      	mov	r2, r3
 8011dc0:	2102      	movs	r1, #2
 8011dc2:	4808      	ldr	r0, [pc, #32]	; (8011de4 <app_link_thread_entry+0x88>)
 8011dc4:	f7fc f948 	bl	800e058 <_nxe_ip_driver_direct_command>
 8011dc8:	e007      	b.n	8011dda <app_link_thread_entry+0x7e>
        }
      }
    }
    else
    {
      if(0 == linkdown)
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d104      	bne.n	8011dda <app_link_thread_entry+0x7e>
      {
        linkdown = 1;
 8011dd0:	2301      	movs	r3, #1
 8011dd2:	617b      	str	r3, [r7, #20]
        /* The network cable is not connected. */
        printf("The network cable is not connected.\n");
 8011dd4:	4807      	ldr	r0, [pc, #28]	; (8011df4 <app_link_thread_entry+0x98>)
 8011dd6:	f000 f975 	bl	80120c4 <puts>
      }
    }

    tx_thread_sleep(NX_ETH_CABLE_CONNECTION_CHECK_PERIOD);
 8011dda:	f44f 7016 	mov.w	r0, #600	; 0x258
 8011dde:	f7fe fd63 	bl	80108a8 <_tx_thread_sleep>
    status = nx_ip_interface_status_check(&NetXDuoEthIpInstance, 0, NX_IP_LINK_ENABLED,
 8011de2:	e7c1      	b.n	8011d68 <app_link_thread_entry+0xc>
 8011de4:	20008968 	.word	0x20008968
 8011de8:	08013080 	.word	0x08013080
 8011dec:	080130a8 	.word	0x080130a8
 8011df0:	080130cc 	.word	0x080130cc
 8011df4:	080130ec 	.word	0x080130ec

08011df8 <rand>:
 8011df8:	4b16      	ldr	r3, [pc, #88]	; (8011e54 <rand+0x5c>)
 8011dfa:	b510      	push	{r4, lr}
 8011dfc:	681c      	ldr	r4, [r3, #0]
 8011dfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011e00:	b9b3      	cbnz	r3, 8011e30 <rand+0x38>
 8011e02:	2018      	movs	r0, #24
 8011e04:	f000 fb4a 	bl	801249c <malloc>
 8011e08:	4602      	mov	r2, r0
 8011e0a:	6320      	str	r0, [r4, #48]	; 0x30
 8011e0c:	b920      	cbnz	r0, 8011e18 <rand+0x20>
 8011e0e:	4b12      	ldr	r3, [pc, #72]	; (8011e58 <rand+0x60>)
 8011e10:	2152      	movs	r1, #82	; 0x52
 8011e12:	4812      	ldr	r0, [pc, #72]	; (8011e5c <rand+0x64>)
 8011e14:	f000 fad8 	bl	80123c8 <__assert_func>
 8011e18:	4911      	ldr	r1, [pc, #68]	; (8011e60 <rand+0x68>)
 8011e1a:	4b12      	ldr	r3, [pc, #72]	; (8011e64 <rand+0x6c>)
 8011e1c:	e9c0 1300 	strd	r1, r3, [r0]
 8011e20:	4b11      	ldr	r3, [pc, #68]	; (8011e68 <rand+0x70>)
 8011e22:	2100      	movs	r1, #0
 8011e24:	6083      	str	r3, [r0, #8]
 8011e26:	230b      	movs	r3, #11
 8011e28:	8183      	strh	r3, [r0, #12]
 8011e2a:	2001      	movs	r0, #1
 8011e2c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011e30:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011e32:	480e      	ldr	r0, [pc, #56]	; (8011e6c <rand+0x74>)
 8011e34:	690b      	ldr	r3, [r1, #16]
 8011e36:	694c      	ldr	r4, [r1, #20]
 8011e38:	4a0d      	ldr	r2, [pc, #52]	; (8011e70 <rand+0x78>)
 8011e3a:	4358      	muls	r0, r3
 8011e3c:	fb02 0004 	mla	r0, r2, r4, r0
 8011e40:	fba3 3202 	umull	r3, r2, r3, r2
 8011e44:	3301      	adds	r3, #1
 8011e46:	eb40 0002 	adc.w	r0, r0, r2
 8011e4a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011e4e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011e52:	bd10      	pop	{r4, pc}
 8011e54:	200000e4 	.word	0x200000e4
 8011e58:	08013128 	.word	0x08013128
 8011e5c:	0801313f 	.word	0x0801313f
 8011e60:	abcd330e 	.word	0xabcd330e
 8011e64:	e66d1234 	.word	0xe66d1234
 8011e68:	0005deec 	.word	0x0005deec
 8011e6c:	5851f42d 	.word	0x5851f42d
 8011e70:	4c957f2d 	.word	0x4c957f2d

08011e74 <std>:
 8011e74:	2300      	movs	r3, #0
 8011e76:	b510      	push	{r4, lr}
 8011e78:	4604      	mov	r4, r0
 8011e7a:	6083      	str	r3, [r0, #8]
 8011e7c:	8181      	strh	r1, [r0, #12]
 8011e7e:	4619      	mov	r1, r3
 8011e80:	6643      	str	r3, [r0, #100]	; 0x64
 8011e82:	81c2      	strh	r2, [r0, #14]
 8011e84:	2208      	movs	r2, #8
 8011e86:	6183      	str	r3, [r0, #24]
 8011e88:	e9c0 3300 	strd	r3, r3, [r0]
 8011e8c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011e90:	305c      	adds	r0, #92	; 0x5c
 8011e92:	f000 fa11 	bl	80122b8 <memset>
 8011e96:	4b0d      	ldr	r3, [pc, #52]	; (8011ecc <std+0x58>)
 8011e98:	6224      	str	r4, [r4, #32]
 8011e9a:	6263      	str	r3, [r4, #36]	; 0x24
 8011e9c:	4b0c      	ldr	r3, [pc, #48]	; (8011ed0 <std+0x5c>)
 8011e9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8011ea0:	4b0c      	ldr	r3, [pc, #48]	; (8011ed4 <std+0x60>)
 8011ea2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011ea4:	4b0c      	ldr	r3, [pc, #48]	; (8011ed8 <std+0x64>)
 8011ea6:	6323      	str	r3, [r4, #48]	; 0x30
 8011ea8:	4b0c      	ldr	r3, [pc, #48]	; (8011edc <std+0x68>)
 8011eaa:	429c      	cmp	r4, r3
 8011eac:	d006      	beq.n	8011ebc <std+0x48>
 8011eae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011eb2:	4294      	cmp	r4, r2
 8011eb4:	d002      	beq.n	8011ebc <std+0x48>
 8011eb6:	33d0      	adds	r3, #208	; 0xd0
 8011eb8:	429c      	cmp	r4, r3
 8011eba:	d105      	bne.n	8011ec8 <std+0x54>
 8011ebc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ec4:	f000 ba70 	b.w	80123a8 <__retarget_lock_init_recursive>
 8011ec8:	bd10      	pop	{r4, pc}
 8011eca:	bf00      	nop
 8011ecc:	080120d5 	.word	0x080120d5
 8011ed0:	080120f7 	.word	0x080120f7
 8011ed4:	0801212f 	.word	0x0801212f
 8011ed8:	08012153 	.word	0x08012153
 8011edc:	20009130 	.word	0x20009130

08011ee0 <stdio_exit_handler>:
 8011ee0:	4a02      	ldr	r2, [pc, #8]	; (8011eec <stdio_exit_handler+0xc>)
 8011ee2:	4903      	ldr	r1, [pc, #12]	; (8011ef0 <stdio_exit_handler+0x10>)
 8011ee4:	4803      	ldr	r0, [pc, #12]	; (8011ef4 <stdio_exit_handler+0x14>)
 8011ee6:	f000 b869 	b.w	8011fbc <_fwalk_sglue>
 8011eea:	bf00      	nop
 8011eec:	2000008c 	.word	0x2000008c
 8011ef0:	08012cb9 	.word	0x08012cb9
 8011ef4:	20000098 	.word	0x20000098

08011ef8 <cleanup_stdio>:
 8011ef8:	6841      	ldr	r1, [r0, #4]
 8011efa:	4b0c      	ldr	r3, [pc, #48]	; (8011f2c <cleanup_stdio+0x34>)
 8011efc:	4299      	cmp	r1, r3
 8011efe:	b510      	push	{r4, lr}
 8011f00:	4604      	mov	r4, r0
 8011f02:	d001      	beq.n	8011f08 <cleanup_stdio+0x10>
 8011f04:	f000 fed8 	bl	8012cb8 <_fflush_r>
 8011f08:	68a1      	ldr	r1, [r4, #8]
 8011f0a:	4b09      	ldr	r3, [pc, #36]	; (8011f30 <cleanup_stdio+0x38>)
 8011f0c:	4299      	cmp	r1, r3
 8011f0e:	d002      	beq.n	8011f16 <cleanup_stdio+0x1e>
 8011f10:	4620      	mov	r0, r4
 8011f12:	f000 fed1 	bl	8012cb8 <_fflush_r>
 8011f16:	68e1      	ldr	r1, [r4, #12]
 8011f18:	4b06      	ldr	r3, [pc, #24]	; (8011f34 <cleanup_stdio+0x3c>)
 8011f1a:	4299      	cmp	r1, r3
 8011f1c:	d004      	beq.n	8011f28 <cleanup_stdio+0x30>
 8011f1e:	4620      	mov	r0, r4
 8011f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f24:	f000 bec8 	b.w	8012cb8 <_fflush_r>
 8011f28:	bd10      	pop	{r4, pc}
 8011f2a:	bf00      	nop
 8011f2c:	20009130 	.word	0x20009130
 8011f30:	20009198 	.word	0x20009198
 8011f34:	20009200 	.word	0x20009200

08011f38 <global_stdio_init.part.0>:
 8011f38:	b510      	push	{r4, lr}
 8011f3a:	4b0b      	ldr	r3, [pc, #44]	; (8011f68 <global_stdio_init.part.0+0x30>)
 8011f3c:	2104      	movs	r1, #4
 8011f3e:	4c0b      	ldr	r4, [pc, #44]	; (8011f6c <global_stdio_init.part.0+0x34>)
 8011f40:	4a0b      	ldr	r2, [pc, #44]	; (8011f70 <global_stdio_init.part.0+0x38>)
 8011f42:	4620      	mov	r0, r4
 8011f44:	601a      	str	r2, [r3, #0]
 8011f46:	2200      	movs	r2, #0
 8011f48:	f7ff ff94 	bl	8011e74 <std>
 8011f4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011f50:	2201      	movs	r2, #1
 8011f52:	2109      	movs	r1, #9
 8011f54:	f7ff ff8e 	bl	8011e74 <std>
 8011f58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011f5c:	2202      	movs	r2, #2
 8011f5e:	2112      	movs	r1, #18
 8011f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f64:	f7ff bf86 	b.w	8011e74 <std>
 8011f68:	20009268 	.word	0x20009268
 8011f6c:	20009130 	.word	0x20009130
 8011f70:	08011ee1 	.word	0x08011ee1

08011f74 <__sfp_lock_acquire>:
 8011f74:	4801      	ldr	r0, [pc, #4]	; (8011f7c <__sfp_lock_acquire+0x8>)
 8011f76:	f000 ba18 	b.w	80123aa <__retarget_lock_acquire_recursive>
 8011f7a:	bf00      	nop
 8011f7c:	20009271 	.word	0x20009271

08011f80 <__sfp_lock_release>:
 8011f80:	4801      	ldr	r0, [pc, #4]	; (8011f88 <__sfp_lock_release+0x8>)
 8011f82:	f000 ba13 	b.w	80123ac <__retarget_lock_release_recursive>
 8011f86:	bf00      	nop
 8011f88:	20009271 	.word	0x20009271

08011f8c <__sinit>:
 8011f8c:	b510      	push	{r4, lr}
 8011f8e:	4604      	mov	r4, r0
 8011f90:	f7ff fff0 	bl	8011f74 <__sfp_lock_acquire>
 8011f94:	6a23      	ldr	r3, [r4, #32]
 8011f96:	b11b      	cbz	r3, 8011fa0 <__sinit+0x14>
 8011f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f9c:	f7ff bff0 	b.w	8011f80 <__sfp_lock_release>
 8011fa0:	4b04      	ldr	r3, [pc, #16]	; (8011fb4 <__sinit+0x28>)
 8011fa2:	6223      	str	r3, [r4, #32]
 8011fa4:	4b04      	ldr	r3, [pc, #16]	; (8011fb8 <__sinit+0x2c>)
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d1f5      	bne.n	8011f98 <__sinit+0xc>
 8011fac:	f7ff ffc4 	bl	8011f38 <global_stdio_init.part.0>
 8011fb0:	e7f2      	b.n	8011f98 <__sinit+0xc>
 8011fb2:	bf00      	nop
 8011fb4:	08011ef9 	.word	0x08011ef9
 8011fb8:	20009268 	.word	0x20009268

08011fbc <_fwalk_sglue>:
 8011fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fc0:	4607      	mov	r7, r0
 8011fc2:	4688      	mov	r8, r1
 8011fc4:	4614      	mov	r4, r2
 8011fc6:	2600      	movs	r6, #0
 8011fc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011fcc:	f1b9 0901 	subs.w	r9, r9, #1
 8011fd0:	d505      	bpl.n	8011fde <_fwalk_sglue+0x22>
 8011fd2:	6824      	ldr	r4, [r4, #0]
 8011fd4:	2c00      	cmp	r4, #0
 8011fd6:	d1f7      	bne.n	8011fc8 <_fwalk_sglue+0xc>
 8011fd8:	4630      	mov	r0, r6
 8011fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fde:	89ab      	ldrh	r3, [r5, #12]
 8011fe0:	2b01      	cmp	r3, #1
 8011fe2:	d907      	bls.n	8011ff4 <_fwalk_sglue+0x38>
 8011fe4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011fe8:	3301      	adds	r3, #1
 8011fea:	d003      	beq.n	8011ff4 <_fwalk_sglue+0x38>
 8011fec:	4629      	mov	r1, r5
 8011fee:	4638      	mov	r0, r7
 8011ff0:	47c0      	blx	r8
 8011ff2:	4306      	orrs	r6, r0
 8011ff4:	3568      	adds	r5, #104	; 0x68
 8011ff6:	e7e9      	b.n	8011fcc <_fwalk_sglue+0x10>

08011ff8 <iprintf>:
 8011ff8:	b40f      	push	{r0, r1, r2, r3}
 8011ffa:	b507      	push	{r0, r1, r2, lr}
 8011ffc:	4906      	ldr	r1, [pc, #24]	; (8012018 <iprintf+0x20>)
 8011ffe:	ab04      	add	r3, sp, #16
 8012000:	6808      	ldr	r0, [r1, #0]
 8012002:	f853 2b04 	ldr.w	r2, [r3], #4
 8012006:	6881      	ldr	r1, [r0, #8]
 8012008:	9301      	str	r3, [sp, #4]
 801200a:	f000 fb25 	bl	8012658 <_vfiprintf_r>
 801200e:	b003      	add	sp, #12
 8012010:	f85d eb04 	ldr.w	lr, [sp], #4
 8012014:	b004      	add	sp, #16
 8012016:	4770      	bx	lr
 8012018:	200000e4 	.word	0x200000e4

0801201c <_puts_r>:
 801201c:	6a03      	ldr	r3, [r0, #32]
 801201e:	b570      	push	{r4, r5, r6, lr}
 8012020:	4605      	mov	r5, r0
 8012022:	460e      	mov	r6, r1
 8012024:	6884      	ldr	r4, [r0, #8]
 8012026:	b90b      	cbnz	r3, 801202c <_puts_r+0x10>
 8012028:	f7ff ffb0 	bl	8011f8c <__sinit>
 801202c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801202e:	07db      	lsls	r3, r3, #31
 8012030:	d405      	bmi.n	801203e <_puts_r+0x22>
 8012032:	89a3      	ldrh	r3, [r4, #12]
 8012034:	0598      	lsls	r0, r3, #22
 8012036:	d402      	bmi.n	801203e <_puts_r+0x22>
 8012038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801203a:	f000 f9b6 	bl	80123aa <__retarget_lock_acquire_recursive>
 801203e:	89a3      	ldrh	r3, [r4, #12]
 8012040:	0719      	lsls	r1, r3, #28
 8012042:	d513      	bpl.n	801206c <_puts_r+0x50>
 8012044:	6923      	ldr	r3, [r4, #16]
 8012046:	b18b      	cbz	r3, 801206c <_puts_r+0x50>
 8012048:	3e01      	subs	r6, #1
 801204a:	68a3      	ldr	r3, [r4, #8]
 801204c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012050:	3b01      	subs	r3, #1
 8012052:	60a3      	str	r3, [r4, #8]
 8012054:	b9e9      	cbnz	r1, 8012092 <_puts_r+0x76>
 8012056:	2b00      	cmp	r3, #0
 8012058:	da2e      	bge.n	80120b8 <_puts_r+0x9c>
 801205a:	4622      	mov	r2, r4
 801205c:	210a      	movs	r1, #10
 801205e:	4628      	mov	r0, r5
 8012060:	f000 f87b 	bl	801215a <__swbuf_r>
 8012064:	3001      	adds	r0, #1
 8012066:	d007      	beq.n	8012078 <_puts_r+0x5c>
 8012068:	250a      	movs	r5, #10
 801206a:	e007      	b.n	801207c <_puts_r+0x60>
 801206c:	4621      	mov	r1, r4
 801206e:	4628      	mov	r0, r5
 8012070:	f000 f8b0 	bl	80121d4 <__swsetup_r>
 8012074:	2800      	cmp	r0, #0
 8012076:	d0e7      	beq.n	8012048 <_puts_r+0x2c>
 8012078:	f04f 35ff 	mov.w	r5, #4294967295
 801207c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801207e:	07da      	lsls	r2, r3, #31
 8012080:	d405      	bmi.n	801208e <_puts_r+0x72>
 8012082:	89a3      	ldrh	r3, [r4, #12]
 8012084:	059b      	lsls	r3, r3, #22
 8012086:	d402      	bmi.n	801208e <_puts_r+0x72>
 8012088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801208a:	f000 f98f 	bl	80123ac <__retarget_lock_release_recursive>
 801208e:	4628      	mov	r0, r5
 8012090:	bd70      	pop	{r4, r5, r6, pc}
 8012092:	2b00      	cmp	r3, #0
 8012094:	da04      	bge.n	80120a0 <_puts_r+0x84>
 8012096:	69a2      	ldr	r2, [r4, #24]
 8012098:	429a      	cmp	r2, r3
 801209a:	dc06      	bgt.n	80120aa <_puts_r+0x8e>
 801209c:	290a      	cmp	r1, #10
 801209e:	d004      	beq.n	80120aa <_puts_r+0x8e>
 80120a0:	6823      	ldr	r3, [r4, #0]
 80120a2:	1c5a      	adds	r2, r3, #1
 80120a4:	6022      	str	r2, [r4, #0]
 80120a6:	7019      	strb	r1, [r3, #0]
 80120a8:	e7cf      	b.n	801204a <_puts_r+0x2e>
 80120aa:	4622      	mov	r2, r4
 80120ac:	4628      	mov	r0, r5
 80120ae:	f000 f854 	bl	801215a <__swbuf_r>
 80120b2:	3001      	adds	r0, #1
 80120b4:	d1c9      	bne.n	801204a <_puts_r+0x2e>
 80120b6:	e7df      	b.n	8012078 <_puts_r+0x5c>
 80120b8:	6823      	ldr	r3, [r4, #0]
 80120ba:	250a      	movs	r5, #10
 80120bc:	1c5a      	adds	r2, r3, #1
 80120be:	6022      	str	r2, [r4, #0]
 80120c0:	701d      	strb	r5, [r3, #0]
 80120c2:	e7db      	b.n	801207c <_puts_r+0x60>

080120c4 <puts>:
 80120c4:	4b02      	ldr	r3, [pc, #8]	; (80120d0 <puts+0xc>)
 80120c6:	4601      	mov	r1, r0
 80120c8:	6818      	ldr	r0, [r3, #0]
 80120ca:	f7ff bfa7 	b.w	801201c <_puts_r>
 80120ce:	bf00      	nop
 80120d0:	200000e4 	.word	0x200000e4

080120d4 <__sread>:
 80120d4:	b510      	push	{r4, lr}
 80120d6:	460c      	mov	r4, r1
 80120d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120dc:	f000 f916 	bl	801230c <_read_r>
 80120e0:	2800      	cmp	r0, #0
 80120e2:	bfab      	itete	ge
 80120e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80120e6:	89a3      	ldrhlt	r3, [r4, #12]
 80120e8:	181b      	addge	r3, r3, r0
 80120ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80120ee:	bfac      	ite	ge
 80120f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80120f2:	81a3      	strhlt	r3, [r4, #12]
 80120f4:	bd10      	pop	{r4, pc}

080120f6 <__swrite>:
 80120f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120fa:	461f      	mov	r7, r3
 80120fc:	898b      	ldrh	r3, [r1, #12]
 80120fe:	4605      	mov	r5, r0
 8012100:	460c      	mov	r4, r1
 8012102:	05db      	lsls	r3, r3, #23
 8012104:	4616      	mov	r6, r2
 8012106:	d505      	bpl.n	8012114 <__swrite+0x1e>
 8012108:	2302      	movs	r3, #2
 801210a:	2200      	movs	r2, #0
 801210c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012110:	f000 f8ea 	bl	80122e8 <_lseek_r>
 8012114:	89a3      	ldrh	r3, [r4, #12]
 8012116:	4632      	mov	r2, r6
 8012118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801211c:	4628      	mov	r0, r5
 801211e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012122:	81a3      	strh	r3, [r4, #12]
 8012124:	463b      	mov	r3, r7
 8012126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801212a:	f000 b901 	b.w	8012330 <_write_r>

0801212e <__sseek>:
 801212e:	b510      	push	{r4, lr}
 8012130:	460c      	mov	r4, r1
 8012132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012136:	f000 f8d7 	bl	80122e8 <_lseek_r>
 801213a:	1c43      	adds	r3, r0, #1
 801213c:	89a3      	ldrh	r3, [r4, #12]
 801213e:	bf15      	itete	ne
 8012140:	6560      	strne	r0, [r4, #84]	; 0x54
 8012142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801214a:	81a3      	strheq	r3, [r4, #12]
 801214c:	bf18      	it	ne
 801214e:	81a3      	strhne	r3, [r4, #12]
 8012150:	bd10      	pop	{r4, pc}

08012152 <__sclose>:
 8012152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012156:	f000 b8b7 	b.w	80122c8 <_close_r>

0801215a <__swbuf_r>:
 801215a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801215c:	460e      	mov	r6, r1
 801215e:	4614      	mov	r4, r2
 8012160:	4605      	mov	r5, r0
 8012162:	b118      	cbz	r0, 801216c <__swbuf_r+0x12>
 8012164:	6a03      	ldr	r3, [r0, #32]
 8012166:	b90b      	cbnz	r3, 801216c <__swbuf_r+0x12>
 8012168:	f7ff ff10 	bl	8011f8c <__sinit>
 801216c:	69a3      	ldr	r3, [r4, #24]
 801216e:	60a3      	str	r3, [r4, #8]
 8012170:	89a3      	ldrh	r3, [r4, #12]
 8012172:	071a      	lsls	r2, r3, #28
 8012174:	d525      	bpl.n	80121c2 <__swbuf_r+0x68>
 8012176:	6923      	ldr	r3, [r4, #16]
 8012178:	b31b      	cbz	r3, 80121c2 <__swbuf_r+0x68>
 801217a:	6823      	ldr	r3, [r4, #0]
 801217c:	b2f6      	uxtb	r6, r6
 801217e:	6922      	ldr	r2, [r4, #16]
 8012180:	4637      	mov	r7, r6
 8012182:	1a98      	subs	r0, r3, r2
 8012184:	6963      	ldr	r3, [r4, #20]
 8012186:	4283      	cmp	r3, r0
 8012188:	dc04      	bgt.n	8012194 <__swbuf_r+0x3a>
 801218a:	4621      	mov	r1, r4
 801218c:	4628      	mov	r0, r5
 801218e:	f000 fd93 	bl	8012cb8 <_fflush_r>
 8012192:	b9e0      	cbnz	r0, 80121ce <__swbuf_r+0x74>
 8012194:	68a3      	ldr	r3, [r4, #8]
 8012196:	3b01      	subs	r3, #1
 8012198:	60a3      	str	r3, [r4, #8]
 801219a:	6823      	ldr	r3, [r4, #0]
 801219c:	1c5a      	adds	r2, r3, #1
 801219e:	6022      	str	r2, [r4, #0]
 80121a0:	701e      	strb	r6, [r3, #0]
 80121a2:	1c43      	adds	r3, r0, #1
 80121a4:	6962      	ldr	r2, [r4, #20]
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d004      	beq.n	80121b4 <__swbuf_r+0x5a>
 80121aa:	89a3      	ldrh	r3, [r4, #12]
 80121ac:	07db      	lsls	r3, r3, #31
 80121ae:	d506      	bpl.n	80121be <__swbuf_r+0x64>
 80121b0:	2e0a      	cmp	r6, #10
 80121b2:	d104      	bne.n	80121be <__swbuf_r+0x64>
 80121b4:	4621      	mov	r1, r4
 80121b6:	4628      	mov	r0, r5
 80121b8:	f000 fd7e 	bl	8012cb8 <_fflush_r>
 80121bc:	b938      	cbnz	r0, 80121ce <__swbuf_r+0x74>
 80121be:	4638      	mov	r0, r7
 80121c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121c2:	4621      	mov	r1, r4
 80121c4:	4628      	mov	r0, r5
 80121c6:	f000 f805 	bl	80121d4 <__swsetup_r>
 80121ca:	2800      	cmp	r0, #0
 80121cc:	d0d5      	beq.n	801217a <__swbuf_r+0x20>
 80121ce:	f04f 37ff 	mov.w	r7, #4294967295
 80121d2:	e7f4      	b.n	80121be <__swbuf_r+0x64>

080121d4 <__swsetup_r>:
 80121d4:	b538      	push	{r3, r4, r5, lr}
 80121d6:	4b2a      	ldr	r3, [pc, #168]	; (8012280 <__swsetup_r+0xac>)
 80121d8:	4605      	mov	r5, r0
 80121da:	460c      	mov	r4, r1
 80121dc:	6818      	ldr	r0, [r3, #0]
 80121de:	b118      	cbz	r0, 80121e8 <__swsetup_r+0x14>
 80121e0:	6a03      	ldr	r3, [r0, #32]
 80121e2:	b90b      	cbnz	r3, 80121e8 <__swsetup_r+0x14>
 80121e4:	f7ff fed2 	bl	8011f8c <__sinit>
 80121e8:	89a3      	ldrh	r3, [r4, #12]
 80121ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80121ee:	0718      	lsls	r0, r3, #28
 80121f0:	d422      	bmi.n	8012238 <__swsetup_r+0x64>
 80121f2:	06d9      	lsls	r1, r3, #27
 80121f4:	d407      	bmi.n	8012206 <__swsetup_r+0x32>
 80121f6:	2309      	movs	r3, #9
 80121f8:	602b      	str	r3, [r5, #0]
 80121fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80121fe:	f04f 30ff 	mov.w	r0, #4294967295
 8012202:	81a3      	strh	r3, [r4, #12]
 8012204:	e034      	b.n	8012270 <__swsetup_r+0x9c>
 8012206:	0758      	lsls	r0, r3, #29
 8012208:	d512      	bpl.n	8012230 <__swsetup_r+0x5c>
 801220a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801220c:	b141      	cbz	r1, 8012220 <__swsetup_r+0x4c>
 801220e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012212:	4299      	cmp	r1, r3
 8012214:	d002      	beq.n	801221c <__swsetup_r+0x48>
 8012216:	4628      	mov	r0, r5
 8012218:	f000 f8f4 	bl	8012404 <_free_r>
 801221c:	2300      	movs	r3, #0
 801221e:	6363      	str	r3, [r4, #52]	; 0x34
 8012220:	89a3      	ldrh	r3, [r4, #12]
 8012222:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012226:	81a3      	strh	r3, [r4, #12]
 8012228:	2300      	movs	r3, #0
 801222a:	6063      	str	r3, [r4, #4]
 801222c:	6923      	ldr	r3, [r4, #16]
 801222e:	6023      	str	r3, [r4, #0]
 8012230:	89a3      	ldrh	r3, [r4, #12]
 8012232:	f043 0308 	orr.w	r3, r3, #8
 8012236:	81a3      	strh	r3, [r4, #12]
 8012238:	6923      	ldr	r3, [r4, #16]
 801223a:	b94b      	cbnz	r3, 8012250 <__swsetup_r+0x7c>
 801223c:	89a3      	ldrh	r3, [r4, #12]
 801223e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012246:	d003      	beq.n	8012250 <__swsetup_r+0x7c>
 8012248:	4621      	mov	r1, r4
 801224a:	4628      	mov	r0, r5
 801224c:	f000 fd93 	bl	8012d76 <__smakebuf_r>
 8012250:	89a0      	ldrh	r0, [r4, #12]
 8012252:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012256:	f010 0301 	ands.w	r3, r0, #1
 801225a:	d00a      	beq.n	8012272 <__swsetup_r+0x9e>
 801225c:	2300      	movs	r3, #0
 801225e:	60a3      	str	r3, [r4, #8]
 8012260:	6963      	ldr	r3, [r4, #20]
 8012262:	425b      	negs	r3, r3
 8012264:	61a3      	str	r3, [r4, #24]
 8012266:	6923      	ldr	r3, [r4, #16]
 8012268:	b943      	cbnz	r3, 801227c <__swsetup_r+0xa8>
 801226a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801226e:	d1c4      	bne.n	80121fa <__swsetup_r+0x26>
 8012270:	bd38      	pop	{r3, r4, r5, pc}
 8012272:	0781      	lsls	r1, r0, #30
 8012274:	bf58      	it	pl
 8012276:	6963      	ldrpl	r3, [r4, #20]
 8012278:	60a3      	str	r3, [r4, #8]
 801227a:	e7f4      	b.n	8012266 <__swsetup_r+0x92>
 801227c:	2000      	movs	r0, #0
 801227e:	e7f7      	b.n	8012270 <__swsetup_r+0x9c>
 8012280:	200000e4 	.word	0x200000e4

08012284 <memmove>:
 8012284:	4288      	cmp	r0, r1
 8012286:	b510      	push	{r4, lr}
 8012288:	eb01 0402 	add.w	r4, r1, r2
 801228c:	d902      	bls.n	8012294 <memmove+0x10>
 801228e:	4284      	cmp	r4, r0
 8012290:	4623      	mov	r3, r4
 8012292:	d807      	bhi.n	80122a4 <memmove+0x20>
 8012294:	1e43      	subs	r3, r0, #1
 8012296:	42a1      	cmp	r1, r4
 8012298:	d008      	beq.n	80122ac <memmove+0x28>
 801229a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801229e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80122a2:	e7f8      	b.n	8012296 <memmove+0x12>
 80122a4:	4402      	add	r2, r0
 80122a6:	4601      	mov	r1, r0
 80122a8:	428a      	cmp	r2, r1
 80122aa:	d100      	bne.n	80122ae <memmove+0x2a>
 80122ac:	bd10      	pop	{r4, pc}
 80122ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80122b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80122b6:	e7f7      	b.n	80122a8 <memmove+0x24>

080122b8 <memset>:
 80122b8:	4402      	add	r2, r0
 80122ba:	4603      	mov	r3, r0
 80122bc:	4293      	cmp	r3, r2
 80122be:	d100      	bne.n	80122c2 <memset+0xa>
 80122c0:	4770      	bx	lr
 80122c2:	f803 1b01 	strb.w	r1, [r3], #1
 80122c6:	e7f9      	b.n	80122bc <memset+0x4>

080122c8 <_close_r>:
 80122c8:	b538      	push	{r3, r4, r5, lr}
 80122ca:	2300      	movs	r3, #0
 80122cc:	4d05      	ldr	r5, [pc, #20]	; (80122e4 <_close_r+0x1c>)
 80122ce:	4604      	mov	r4, r0
 80122d0:	4608      	mov	r0, r1
 80122d2:	602b      	str	r3, [r5, #0]
 80122d4:	f7ee fcc5 	bl	8000c62 <_close>
 80122d8:	1c43      	adds	r3, r0, #1
 80122da:	d102      	bne.n	80122e2 <_close_r+0x1a>
 80122dc:	682b      	ldr	r3, [r5, #0]
 80122de:	b103      	cbz	r3, 80122e2 <_close_r+0x1a>
 80122e0:	6023      	str	r3, [r4, #0]
 80122e2:	bd38      	pop	{r3, r4, r5, pc}
 80122e4:	2000926c 	.word	0x2000926c

080122e8 <_lseek_r>:
 80122e8:	b538      	push	{r3, r4, r5, lr}
 80122ea:	4604      	mov	r4, r0
 80122ec:	4d06      	ldr	r5, [pc, #24]	; (8012308 <_lseek_r+0x20>)
 80122ee:	4608      	mov	r0, r1
 80122f0:	4611      	mov	r1, r2
 80122f2:	2200      	movs	r2, #0
 80122f4:	602a      	str	r2, [r5, #0]
 80122f6:	461a      	mov	r2, r3
 80122f8:	f7ee fcda 	bl	8000cb0 <_lseek>
 80122fc:	1c43      	adds	r3, r0, #1
 80122fe:	d102      	bne.n	8012306 <_lseek_r+0x1e>
 8012300:	682b      	ldr	r3, [r5, #0]
 8012302:	b103      	cbz	r3, 8012306 <_lseek_r+0x1e>
 8012304:	6023      	str	r3, [r4, #0]
 8012306:	bd38      	pop	{r3, r4, r5, pc}
 8012308:	2000926c 	.word	0x2000926c

0801230c <_read_r>:
 801230c:	b538      	push	{r3, r4, r5, lr}
 801230e:	4604      	mov	r4, r0
 8012310:	4d06      	ldr	r5, [pc, #24]	; (801232c <_read_r+0x20>)
 8012312:	4608      	mov	r0, r1
 8012314:	4611      	mov	r1, r2
 8012316:	2200      	movs	r2, #0
 8012318:	602a      	str	r2, [r5, #0]
 801231a:	461a      	mov	r2, r3
 801231c:	f7ee fc68 	bl	8000bf0 <_read>
 8012320:	1c43      	adds	r3, r0, #1
 8012322:	d102      	bne.n	801232a <_read_r+0x1e>
 8012324:	682b      	ldr	r3, [r5, #0]
 8012326:	b103      	cbz	r3, 801232a <_read_r+0x1e>
 8012328:	6023      	str	r3, [r4, #0]
 801232a:	bd38      	pop	{r3, r4, r5, pc}
 801232c:	2000926c 	.word	0x2000926c

08012330 <_write_r>:
 8012330:	b538      	push	{r3, r4, r5, lr}
 8012332:	4604      	mov	r4, r0
 8012334:	4d06      	ldr	r5, [pc, #24]	; (8012350 <_write_r+0x20>)
 8012336:	4608      	mov	r0, r1
 8012338:	4611      	mov	r1, r2
 801233a:	2200      	movs	r2, #0
 801233c:	602a      	str	r2, [r5, #0]
 801233e:	461a      	mov	r2, r3
 8012340:	f7ee fc73 	bl	8000c2a <_write>
 8012344:	1c43      	adds	r3, r0, #1
 8012346:	d102      	bne.n	801234e <_write_r+0x1e>
 8012348:	682b      	ldr	r3, [r5, #0]
 801234a:	b103      	cbz	r3, 801234e <_write_r+0x1e>
 801234c:	6023      	str	r3, [r4, #0]
 801234e:	bd38      	pop	{r3, r4, r5, pc}
 8012350:	2000926c 	.word	0x2000926c

08012354 <__errno>:
 8012354:	4b01      	ldr	r3, [pc, #4]	; (801235c <__errno+0x8>)
 8012356:	6818      	ldr	r0, [r3, #0]
 8012358:	4770      	bx	lr
 801235a:	bf00      	nop
 801235c:	200000e4 	.word	0x200000e4

08012360 <__libc_init_array>:
 8012360:	b570      	push	{r4, r5, r6, lr}
 8012362:	4d0d      	ldr	r5, [pc, #52]	; (8012398 <__libc_init_array+0x38>)
 8012364:	2600      	movs	r6, #0
 8012366:	4c0d      	ldr	r4, [pc, #52]	; (801239c <__libc_init_array+0x3c>)
 8012368:	1b64      	subs	r4, r4, r5
 801236a:	10a4      	asrs	r4, r4, #2
 801236c:	42a6      	cmp	r6, r4
 801236e:	d109      	bne.n	8012384 <__libc_init_array+0x24>
 8012370:	4d0b      	ldr	r5, [pc, #44]	; (80123a0 <__libc_init_array+0x40>)
 8012372:	2600      	movs	r6, #0
 8012374:	4c0b      	ldr	r4, [pc, #44]	; (80123a4 <__libc_init_array+0x44>)
 8012376:	f000 fdc7 	bl	8012f08 <_init>
 801237a:	1b64      	subs	r4, r4, r5
 801237c:	10a4      	asrs	r4, r4, #2
 801237e:	42a6      	cmp	r6, r4
 8012380:	d105      	bne.n	801238e <__libc_init_array+0x2e>
 8012382:	bd70      	pop	{r4, r5, r6, pc}
 8012384:	f855 3b04 	ldr.w	r3, [r5], #4
 8012388:	3601      	adds	r6, #1
 801238a:	4798      	blx	r3
 801238c:	e7ee      	b.n	801236c <__libc_init_array+0xc>
 801238e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012392:	3601      	adds	r6, #1
 8012394:	4798      	blx	r3
 8012396:	e7f2      	b.n	801237e <__libc_init_array+0x1e>
 8012398:	08013208 	.word	0x08013208
 801239c:	08013208 	.word	0x08013208
 80123a0:	08013208 	.word	0x08013208
 80123a4:	0801320c 	.word	0x0801320c

080123a8 <__retarget_lock_init_recursive>:
 80123a8:	4770      	bx	lr

080123aa <__retarget_lock_acquire_recursive>:
 80123aa:	4770      	bx	lr

080123ac <__retarget_lock_release_recursive>:
 80123ac:	4770      	bx	lr

080123ae <memcpy>:
 80123ae:	440a      	add	r2, r1
 80123b0:	1e43      	subs	r3, r0, #1
 80123b2:	4291      	cmp	r1, r2
 80123b4:	d100      	bne.n	80123b8 <memcpy+0xa>
 80123b6:	4770      	bx	lr
 80123b8:	b510      	push	{r4, lr}
 80123ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80123be:	4291      	cmp	r1, r2
 80123c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80123c4:	d1f9      	bne.n	80123ba <memcpy+0xc>
 80123c6:	bd10      	pop	{r4, pc}

080123c8 <__assert_func>:
 80123c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123ca:	4614      	mov	r4, r2
 80123cc:	461a      	mov	r2, r3
 80123ce:	4b09      	ldr	r3, [pc, #36]	; (80123f4 <__assert_func+0x2c>)
 80123d0:	4605      	mov	r5, r0
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	68d8      	ldr	r0, [r3, #12]
 80123d6:	b14c      	cbz	r4, 80123ec <__assert_func+0x24>
 80123d8:	4b07      	ldr	r3, [pc, #28]	; (80123f8 <__assert_func+0x30>)
 80123da:	9100      	str	r1, [sp, #0]
 80123dc:	4907      	ldr	r1, [pc, #28]	; (80123fc <__assert_func+0x34>)
 80123de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80123e2:	462b      	mov	r3, r5
 80123e4:	f000 fc90 	bl	8012d08 <fiprintf>
 80123e8:	f000 fd42 	bl	8012e70 <abort>
 80123ec:	4b04      	ldr	r3, [pc, #16]	; (8012400 <__assert_func+0x38>)
 80123ee:	461c      	mov	r4, r3
 80123f0:	e7f3      	b.n	80123da <__assert_func+0x12>
 80123f2:	bf00      	nop
 80123f4:	200000e4 	.word	0x200000e4
 80123f8:	08013197 	.word	0x08013197
 80123fc:	080131a4 	.word	0x080131a4
 8012400:	080131d2 	.word	0x080131d2

08012404 <_free_r>:
 8012404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012406:	2900      	cmp	r1, #0
 8012408:	d043      	beq.n	8012492 <_free_r+0x8e>
 801240a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801240e:	1f0c      	subs	r4, r1, #4
 8012410:	9001      	str	r0, [sp, #4]
 8012412:	2b00      	cmp	r3, #0
 8012414:	bfb8      	it	lt
 8012416:	18e4      	addlt	r4, r4, r3
 8012418:	f000 f8e8 	bl	80125ec <__malloc_lock>
 801241c:	4a1e      	ldr	r2, [pc, #120]	; (8012498 <_free_r+0x94>)
 801241e:	9801      	ldr	r0, [sp, #4]
 8012420:	6813      	ldr	r3, [r2, #0]
 8012422:	b933      	cbnz	r3, 8012432 <_free_r+0x2e>
 8012424:	6063      	str	r3, [r4, #4]
 8012426:	6014      	str	r4, [r2, #0]
 8012428:	b003      	add	sp, #12
 801242a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801242e:	f000 b8e3 	b.w	80125f8 <__malloc_unlock>
 8012432:	42a3      	cmp	r3, r4
 8012434:	d908      	bls.n	8012448 <_free_r+0x44>
 8012436:	6825      	ldr	r5, [r4, #0]
 8012438:	1961      	adds	r1, r4, r5
 801243a:	428b      	cmp	r3, r1
 801243c:	bf01      	itttt	eq
 801243e:	6819      	ldreq	r1, [r3, #0]
 8012440:	685b      	ldreq	r3, [r3, #4]
 8012442:	1949      	addeq	r1, r1, r5
 8012444:	6021      	streq	r1, [r4, #0]
 8012446:	e7ed      	b.n	8012424 <_free_r+0x20>
 8012448:	461a      	mov	r2, r3
 801244a:	685b      	ldr	r3, [r3, #4]
 801244c:	b10b      	cbz	r3, 8012452 <_free_r+0x4e>
 801244e:	42a3      	cmp	r3, r4
 8012450:	d9fa      	bls.n	8012448 <_free_r+0x44>
 8012452:	6811      	ldr	r1, [r2, #0]
 8012454:	1855      	adds	r5, r2, r1
 8012456:	42a5      	cmp	r5, r4
 8012458:	d10b      	bne.n	8012472 <_free_r+0x6e>
 801245a:	6824      	ldr	r4, [r4, #0]
 801245c:	4421      	add	r1, r4
 801245e:	1854      	adds	r4, r2, r1
 8012460:	6011      	str	r1, [r2, #0]
 8012462:	42a3      	cmp	r3, r4
 8012464:	d1e0      	bne.n	8012428 <_free_r+0x24>
 8012466:	681c      	ldr	r4, [r3, #0]
 8012468:	685b      	ldr	r3, [r3, #4]
 801246a:	440c      	add	r4, r1
 801246c:	6053      	str	r3, [r2, #4]
 801246e:	6014      	str	r4, [r2, #0]
 8012470:	e7da      	b.n	8012428 <_free_r+0x24>
 8012472:	d902      	bls.n	801247a <_free_r+0x76>
 8012474:	230c      	movs	r3, #12
 8012476:	6003      	str	r3, [r0, #0]
 8012478:	e7d6      	b.n	8012428 <_free_r+0x24>
 801247a:	6825      	ldr	r5, [r4, #0]
 801247c:	1961      	adds	r1, r4, r5
 801247e:	428b      	cmp	r3, r1
 8012480:	bf02      	ittt	eq
 8012482:	6819      	ldreq	r1, [r3, #0]
 8012484:	685b      	ldreq	r3, [r3, #4]
 8012486:	1949      	addeq	r1, r1, r5
 8012488:	6063      	str	r3, [r4, #4]
 801248a:	bf08      	it	eq
 801248c:	6021      	streq	r1, [r4, #0]
 801248e:	6054      	str	r4, [r2, #4]
 8012490:	e7ca      	b.n	8012428 <_free_r+0x24>
 8012492:	b003      	add	sp, #12
 8012494:	bd30      	pop	{r4, r5, pc}
 8012496:	bf00      	nop
 8012498:	20009274 	.word	0x20009274

0801249c <malloc>:
 801249c:	4b02      	ldr	r3, [pc, #8]	; (80124a8 <malloc+0xc>)
 801249e:	4601      	mov	r1, r0
 80124a0:	6818      	ldr	r0, [r3, #0]
 80124a2:	f000 b823 	b.w	80124ec <_malloc_r>
 80124a6:	bf00      	nop
 80124a8:	200000e4 	.word	0x200000e4

080124ac <sbrk_aligned>:
 80124ac:	b570      	push	{r4, r5, r6, lr}
 80124ae:	4e0e      	ldr	r6, [pc, #56]	; (80124e8 <sbrk_aligned+0x3c>)
 80124b0:	460c      	mov	r4, r1
 80124b2:	4605      	mov	r5, r0
 80124b4:	6831      	ldr	r1, [r6, #0]
 80124b6:	b911      	cbnz	r1, 80124be <sbrk_aligned+0x12>
 80124b8:	f000 fcbc 	bl	8012e34 <_sbrk_r>
 80124bc:	6030      	str	r0, [r6, #0]
 80124be:	4621      	mov	r1, r4
 80124c0:	4628      	mov	r0, r5
 80124c2:	f000 fcb7 	bl	8012e34 <_sbrk_r>
 80124c6:	1c43      	adds	r3, r0, #1
 80124c8:	d00a      	beq.n	80124e0 <sbrk_aligned+0x34>
 80124ca:	1cc4      	adds	r4, r0, #3
 80124cc:	f024 0403 	bic.w	r4, r4, #3
 80124d0:	42a0      	cmp	r0, r4
 80124d2:	d007      	beq.n	80124e4 <sbrk_aligned+0x38>
 80124d4:	1a21      	subs	r1, r4, r0
 80124d6:	4628      	mov	r0, r5
 80124d8:	f000 fcac 	bl	8012e34 <_sbrk_r>
 80124dc:	3001      	adds	r0, #1
 80124de:	d101      	bne.n	80124e4 <sbrk_aligned+0x38>
 80124e0:	f04f 34ff 	mov.w	r4, #4294967295
 80124e4:	4620      	mov	r0, r4
 80124e6:	bd70      	pop	{r4, r5, r6, pc}
 80124e8:	20009278 	.word	0x20009278

080124ec <_malloc_r>:
 80124ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124f0:	1ccd      	adds	r5, r1, #3
 80124f2:	4607      	mov	r7, r0
 80124f4:	f025 0503 	bic.w	r5, r5, #3
 80124f8:	3508      	adds	r5, #8
 80124fa:	2d0c      	cmp	r5, #12
 80124fc:	bf38      	it	cc
 80124fe:	250c      	movcc	r5, #12
 8012500:	2d00      	cmp	r5, #0
 8012502:	db01      	blt.n	8012508 <_malloc_r+0x1c>
 8012504:	42a9      	cmp	r1, r5
 8012506:	d905      	bls.n	8012514 <_malloc_r+0x28>
 8012508:	230c      	movs	r3, #12
 801250a:	2600      	movs	r6, #0
 801250c:	603b      	str	r3, [r7, #0]
 801250e:	4630      	mov	r0, r6
 8012510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012514:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80125e8 <_malloc_r+0xfc>
 8012518:	f000 f868 	bl	80125ec <__malloc_lock>
 801251c:	f8d8 3000 	ldr.w	r3, [r8]
 8012520:	461c      	mov	r4, r3
 8012522:	bb5c      	cbnz	r4, 801257c <_malloc_r+0x90>
 8012524:	4629      	mov	r1, r5
 8012526:	4638      	mov	r0, r7
 8012528:	f7ff ffc0 	bl	80124ac <sbrk_aligned>
 801252c:	1c43      	adds	r3, r0, #1
 801252e:	4604      	mov	r4, r0
 8012530:	d155      	bne.n	80125de <_malloc_r+0xf2>
 8012532:	f8d8 4000 	ldr.w	r4, [r8]
 8012536:	4626      	mov	r6, r4
 8012538:	2e00      	cmp	r6, #0
 801253a:	d145      	bne.n	80125c8 <_malloc_r+0xdc>
 801253c:	2c00      	cmp	r4, #0
 801253e:	d048      	beq.n	80125d2 <_malloc_r+0xe6>
 8012540:	6823      	ldr	r3, [r4, #0]
 8012542:	4631      	mov	r1, r6
 8012544:	4638      	mov	r0, r7
 8012546:	eb04 0903 	add.w	r9, r4, r3
 801254a:	f000 fc73 	bl	8012e34 <_sbrk_r>
 801254e:	4581      	cmp	r9, r0
 8012550:	d13f      	bne.n	80125d2 <_malloc_r+0xe6>
 8012552:	6821      	ldr	r1, [r4, #0]
 8012554:	4638      	mov	r0, r7
 8012556:	1a6d      	subs	r5, r5, r1
 8012558:	4629      	mov	r1, r5
 801255a:	f7ff ffa7 	bl	80124ac <sbrk_aligned>
 801255e:	3001      	adds	r0, #1
 8012560:	d037      	beq.n	80125d2 <_malloc_r+0xe6>
 8012562:	6823      	ldr	r3, [r4, #0]
 8012564:	442b      	add	r3, r5
 8012566:	6023      	str	r3, [r4, #0]
 8012568:	f8d8 3000 	ldr.w	r3, [r8]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d038      	beq.n	80125e2 <_malloc_r+0xf6>
 8012570:	685a      	ldr	r2, [r3, #4]
 8012572:	42a2      	cmp	r2, r4
 8012574:	d12b      	bne.n	80125ce <_malloc_r+0xe2>
 8012576:	2200      	movs	r2, #0
 8012578:	605a      	str	r2, [r3, #4]
 801257a:	e00f      	b.n	801259c <_malloc_r+0xb0>
 801257c:	6822      	ldr	r2, [r4, #0]
 801257e:	1b52      	subs	r2, r2, r5
 8012580:	d41f      	bmi.n	80125c2 <_malloc_r+0xd6>
 8012582:	2a0b      	cmp	r2, #11
 8012584:	d917      	bls.n	80125b6 <_malloc_r+0xca>
 8012586:	1961      	adds	r1, r4, r5
 8012588:	42a3      	cmp	r3, r4
 801258a:	6025      	str	r5, [r4, #0]
 801258c:	bf18      	it	ne
 801258e:	6059      	strne	r1, [r3, #4]
 8012590:	6863      	ldr	r3, [r4, #4]
 8012592:	bf08      	it	eq
 8012594:	f8c8 1000 	streq.w	r1, [r8]
 8012598:	5162      	str	r2, [r4, r5]
 801259a:	604b      	str	r3, [r1, #4]
 801259c:	f104 060b 	add.w	r6, r4, #11
 80125a0:	4638      	mov	r0, r7
 80125a2:	f000 f829 	bl	80125f8 <__malloc_unlock>
 80125a6:	1d23      	adds	r3, r4, #4
 80125a8:	f026 0607 	bic.w	r6, r6, #7
 80125ac:	1af2      	subs	r2, r6, r3
 80125ae:	d0ae      	beq.n	801250e <_malloc_r+0x22>
 80125b0:	1b9b      	subs	r3, r3, r6
 80125b2:	50a3      	str	r3, [r4, r2]
 80125b4:	e7ab      	b.n	801250e <_malloc_r+0x22>
 80125b6:	42a3      	cmp	r3, r4
 80125b8:	6862      	ldr	r2, [r4, #4]
 80125ba:	d1dd      	bne.n	8012578 <_malloc_r+0x8c>
 80125bc:	f8c8 2000 	str.w	r2, [r8]
 80125c0:	e7ec      	b.n	801259c <_malloc_r+0xb0>
 80125c2:	4623      	mov	r3, r4
 80125c4:	6864      	ldr	r4, [r4, #4]
 80125c6:	e7ac      	b.n	8012522 <_malloc_r+0x36>
 80125c8:	4634      	mov	r4, r6
 80125ca:	6876      	ldr	r6, [r6, #4]
 80125cc:	e7b4      	b.n	8012538 <_malloc_r+0x4c>
 80125ce:	4613      	mov	r3, r2
 80125d0:	e7cc      	b.n	801256c <_malloc_r+0x80>
 80125d2:	230c      	movs	r3, #12
 80125d4:	4638      	mov	r0, r7
 80125d6:	603b      	str	r3, [r7, #0]
 80125d8:	f000 f80e 	bl	80125f8 <__malloc_unlock>
 80125dc:	e797      	b.n	801250e <_malloc_r+0x22>
 80125de:	6025      	str	r5, [r4, #0]
 80125e0:	e7dc      	b.n	801259c <_malloc_r+0xb0>
 80125e2:	605b      	str	r3, [r3, #4]
 80125e4:	deff      	udf	#255	; 0xff
 80125e6:	bf00      	nop
 80125e8:	20009274 	.word	0x20009274

080125ec <__malloc_lock>:
 80125ec:	4801      	ldr	r0, [pc, #4]	; (80125f4 <__malloc_lock+0x8>)
 80125ee:	f7ff bedc 	b.w	80123aa <__retarget_lock_acquire_recursive>
 80125f2:	bf00      	nop
 80125f4:	20009270 	.word	0x20009270

080125f8 <__malloc_unlock>:
 80125f8:	4801      	ldr	r0, [pc, #4]	; (8012600 <__malloc_unlock+0x8>)
 80125fa:	f7ff bed7 	b.w	80123ac <__retarget_lock_release_recursive>
 80125fe:	bf00      	nop
 8012600:	20009270 	.word	0x20009270

08012604 <__sfputc_r>:
 8012604:	6893      	ldr	r3, [r2, #8]
 8012606:	3b01      	subs	r3, #1
 8012608:	2b00      	cmp	r3, #0
 801260a:	6093      	str	r3, [r2, #8]
 801260c:	b410      	push	{r4}
 801260e:	da08      	bge.n	8012622 <__sfputc_r+0x1e>
 8012610:	6994      	ldr	r4, [r2, #24]
 8012612:	42a3      	cmp	r3, r4
 8012614:	db01      	blt.n	801261a <__sfputc_r+0x16>
 8012616:	290a      	cmp	r1, #10
 8012618:	d103      	bne.n	8012622 <__sfputc_r+0x1e>
 801261a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801261e:	f7ff bd9c 	b.w	801215a <__swbuf_r>
 8012622:	6813      	ldr	r3, [r2, #0]
 8012624:	1c58      	adds	r0, r3, #1
 8012626:	6010      	str	r0, [r2, #0]
 8012628:	4608      	mov	r0, r1
 801262a:	7019      	strb	r1, [r3, #0]
 801262c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012630:	4770      	bx	lr

08012632 <__sfputs_r>:
 8012632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012634:	4606      	mov	r6, r0
 8012636:	460f      	mov	r7, r1
 8012638:	4614      	mov	r4, r2
 801263a:	18d5      	adds	r5, r2, r3
 801263c:	42ac      	cmp	r4, r5
 801263e:	d101      	bne.n	8012644 <__sfputs_r+0x12>
 8012640:	2000      	movs	r0, #0
 8012642:	e007      	b.n	8012654 <__sfputs_r+0x22>
 8012644:	463a      	mov	r2, r7
 8012646:	f814 1b01 	ldrb.w	r1, [r4], #1
 801264a:	4630      	mov	r0, r6
 801264c:	f7ff ffda 	bl	8012604 <__sfputc_r>
 8012650:	1c43      	adds	r3, r0, #1
 8012652:	d1f3      	bne.n	801263c <__sfputs_r+0xa>
 8012654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012658 <_vfiprintf_r>:
 8012658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801265c:	460d      	mov	r5, r1
 801265e:	b09d      	sub	sp, #116	; 0x74
 8012660:	4614      	mov	r4, r2
 8012662:	4698      	mov	r8, r3
 8012664:	4606      	mov	r6, r0
 8012666:	b118      	cbz	r0, 8012670 <_vfiprintf_r+0x18>
 8012668:	6a03      	ldr	r3, [r0, #32]
 801266a:	b90b      	cbnz	r3, 8012670 <_vfiprintf_r+0x18>
 801266c:	f7ff fc8e 	bl	8011f8c <__sinit>
 8012670:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012672:	07d9      	lsls	r1, r3, #31
 8012674:	d405      	bmi.n	8012682 <_vfiprintf_r+0x2a>
 8012676:	89ab      	ldrh	r3, [r5, #12]
 8012678:	059a      	lsls	r2, r3, #22
 801267a:	d402      	bmi.n	8012682 <_vfiprintf_r+0x2a>
 801267c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801267e:	f7ff fe94 	bl	80123aa <__retarget_lock_acquire_recursive>
 8012682:	89ab      	ldrh	r3, [r5, #12]
 8012684:	071b      	lsls	r3, r3, #28
 8012686:	d501      	bpl.n	801268c <_vfiprintf_r+0x34>
 8012688:	692b      	ldr	r3, [r5, #16]
 801268a:	b99b      	cbnz	r3, 80126b4 <_vfiprintf_r+0x5c>
 801268c:	4629      	mov	r1, r5
 801268e:	4630      	mov	r0, r6
 8012690:	f7ff fda0 	bl	80121d4 <__swsetup_r>
 8012694:	b170      	cbz	r0, 80126b4 <_vfiprintf_r+0x5c>
 8012696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012698:	07dc      	lsls	r4, r3, #31
 801269a:	d504      	bpl.n	80126a6 <_vfiprintf_r+0x4e>
 801269c:	f04f 30ff 	mov.w	r0, #4294967295
 80126a0:	b01d      	add	sp, #116	; 0x74
 80126a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126a6:	89ab      	ldrh	r3, [r5, #12]
 80126a8:	0598      	lsls	r0, r3, #22
 80126aa:	d4f7      	bmi.n	801269c <_vfiprintf_r+0x44>
 80126ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80126ae:	f7ff fe7d 	bl	80123ac <__retarget_lock_release_recursive>
 80126b2:	e7f3      	b.n	801269c <_vfiprintf_r+0x44>
 80126b4:	2300      	movs	r3, #0
 80126b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80126ba:	f04f 0901 	mov.w	r9, #1
 80126be:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8012878 <_vfiprintf_r+0x220>
 80126c2:	9309      	str	r3, [sp, #36]	; 0x24
 80126c4:	2320      	movs	r3, #32
 80126c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80126ca:	2330      	movs	r3, #48	; 0x30
 80126cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80126d0:	4623      	mov	r3, r4
 80126d2:	469a      	mov	sl, r3
 80126d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126d8:	b10a      	cbz	r2, 80126de <_vfiprintf_r+0x86>
 80126da:	2a25      	cmp	r2, #37	; 0x25
 80126dc:	d1f9      	bne.n	80126d2 <_vfiprintf_r+0x7a>
 80126de:	ebba 0b04 	subs.w	fp, sl, r4
 80126e2:	d00b      	beq.n	80126fc <_vfiprintf_r+0xa4>
 80126e4:	465b      	mov	r3, fp
 80126e6:	4622      	mov	r2, r4
 80126e8:	4629      	mov	r1, r5
 80126ea:	4630      	mov	r0, r6
 80126ec:	f7ff ffa1 	bl	8012632 <__sfputs_r>
 80126f0:	3001      	adds	r0, #1
 80126f2:	f000 80a9 	beq.w	8012848 <_vfiprintf_r+0x1f0>
 80126f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126f8:	445a      	add	r2, fp
 80126fa:	9209      	str	r2, [sp, #36]	; 0x24
 80126fc:	f89a 3000 	ldrb.w	r3, [sl]
 8012700:	2b00      	cmp	r3, #0
 8012702:	f000 80a1 	beq.w	8012848 <_vfiprintf_r+0x1f0>
 8012706:	2300      	movs	r3, #0
 8012708:	f04f 32ff 	mov.w	r2, #4294967295
 801270c:	f10a 0a01 	add.w	sl, sl, #1
 8012710:	9304      	str	r3, [sp, #16]
 8012712:	9307      	str	r3, [sp, #28]
 8012714:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012718:	931a      	str	r3, [sp, #104]	; 0x68
 801271a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801271e:	4654      	mov	r4, sl
 8012720:	2205      	movs	r2, #5
 8012722:	4855      	ldr	r0, [pc, #340]	; (8012878 <_vfiprintf_r+0x220>)
 8012724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012728:	f000 fb94 	bl	8012e54 <memchr>
 801272c:	9a04      	ldr	r2, [sp, #16]
 801272e:	b9d8      	cbnz	r0, 8012768 <_vfiprintf_r+0x110>
 8012730:	06d1      	lsls	r1, r2, #27
 8012732:	bf44      	itt	mi
 8012734:	2320      	movmi	r3, #32
 8012736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801273a:	0713      	lsls	r3, r2, #28
 801273c:	bf44      	itt	mi
 801273e:	232b      	movmi	r3, #43	; 0x2b
 8012740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012744:	f89a 3000 	ldrb.w	r3, [sl]
 8012748:	2b2a      	cmp	r3, #42	; 0x2a
 801274a:	d015      	beq.n	8012778 <_vfiprintf_r+0x120>
 801274c:	9a07      	ldr	r2, [sp, #28]
 801274e:	4654      	mov	r4, sl
 8012750:	2000      	movs	r0, #0
 8012752:	f04f 0c0a 	mov.w	ip, #10
 8012756:	4621      	mov	r1, r4
 8012758:	f811 3b01 	ldrb.w	r3, [r1], #1
 801275c:	3b30      	subs	r3, #48	; 0x30
 801275e:	2b09      	cmp	r3, #9
 8012760:	d94d      	bls.n	80127fe <_vfiprintf_r+0x1a6>
 8012762:	b1b0      	cbz	r0, 8012792 <_vfiprintf_r+0x13a>
 8012764:	9207      	str	r2, [sp, #28]
 8012766:	e014      	b.n	8012792 <_vfiprintf_r+0x13a>
 8012768:	eba0 0308 	sub.w	r3, r0, r8
 801276c:	46a2      	mov	sl, r4
 801276e:	fa09 f303 	lsl.w	r3, r9, r3
 8012772:	4313      	orrs	r3, r2
 8012774:	9304      	str	r3, [sp, #16]
 8012776:	e7d2      	b.n	801271e <_vfiprintf_r+0xc6>
 8012778:	9b03      	ldr	r3, [sp, #12]
 801277a:	1d19      	adds	r1, r3, #4
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	2b00      	cmp	r3, #0
 8012780:	9103      	str	r1, [sp, #12]
 8012782:	bfbb      	ittet	lt
 8012784:	425b      	neglt	r3, r3
 8012786:	f042 0202 	orrlt.w	r2, r2, #2
 801278a:	9307      	strge	r3, [sp, #28]
 801278c:	9307      	strlt	r3, [sp, #28]
 801278e:	bfb8      	it	lt
 8012790:	9204      	strlt	r2, [sp, #16]
 8012792:	7823      	ldrb	r3, [r4, #0]
 8012794:	2b2e      	cmp	r3, #46	; 0x2e
 8012796:	d10c      	bne.n	80127b2 <_vfiprintf_r+0x15a>
 8012798:	7863      	ldrb	r3, [r4, #1]
 801279a:	2b2a      	cmp	r3, #42	; 0x2a
 801279c:	d134      	bne.n	8012808 <_vfiprintf_r+0x1b0>
 801279e:	9b03      	ldr	r3, [sp, #12]
 80127a0:	3402      	adds	r4, #2
 80127a2:	1d1a      	adds	r2, r3, #4
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	9203      	str	r2, [sp, #12]
 80127aa:	bfb8      	it	lt
 80127ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80127b0:	9305      	str	r3, [sp, #20]
 80127b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012888 <_vfiprintf_r+0x230>
 80127b6:	2203      	movs	r2, #3
 80127b8:	7821      	ldrb	r1, [r4, #0]
 80127ba:	4650      	mov	r0, sl
 80127bc:	f000 fb4a 	bl	8012e54 <memchr>
 80127c0:	b138      	cbz	r0, 80127d2 <_vfiprintf_r+0x17a>
 80127c2:	eba0 000a 	sub.w	r0, r0, sl
 80127c6:	2240      	movs	r2, #64	; 0x40
 80127c8:	9b04      	ldr	r3, [sp, #16]
 80127ca:	3401      	adds	r4, #1
 80127cc:	4082      	lsls	r2, r0
 80127ce:	4313      	orrs	r3, r2
 80127d0:	9304      	str	r3, [sp, #16]
 80127d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127d6:	2206      	movs	r2, #6
 80127d8:	4828      	ldr	r0, [pc, #160]	; (801287c <_vfiprintf_r+0x224>)
 80127da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80127de:	f000 fb39 	bl	8012e54 <memchr>
 80127e2:	2800      	cmp	r0, #0
 80127e4:	d03f      	beq.n	8012866 <_vfiprintf_r+0x20e>
 80127e6:	4b26      	ldr	r3, [pc, #152]	; (8012880 <_vfiprintf_r+0x228>)
 80127e8:	bb1b      	cbnz	r3, 8012832 <_vfiprintf_r+0x1da>
 80127ea:	9b03      	ldr	r3, [sp, #12]
 80127ec:	3307      	adds	r3, #7
 80127ee:	f023 0307 	bic.w	r3, r3, #7
 80127f2:	3308      	adds	r3, #8
 80127f4:	9303      	str	r3, [sp, #12]
 80127f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127f8:	443b      	add	r3, r7
 80127fa:	9309      	str	r3, [sp, #36]	; 0x24
 80127fc:	e768      	b.n	80126d0 <_vfiprintf_r+0x78>
 80127fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8012802:	460c      	mov	r4, r1
 8012804:	2001      	movs	r0, #1
 8012806:	e7a6      	b.n	8012756 <_vfiprintf_r+0xfe>
 8012808:	2300      	movs	r3, #0
 801280a:	3401      	adds	r4, #1
 801280c:	f04f 0c0a 	mov.w	ip, #10
 8012810:	4619      	mov	r1, r3
 8012812:	9305      	str	r3, [sp, #20]
 8012814:	4620      	mov	r0, r4
 8012816:	f810 2b01 	ldrb.w	r2, [r0], #1
 801281a:	3a30      	subs	r2, #48	; 0x30
 801281c:	2a09      	cmp	r2, #9
 801281e:	d903      	bls.n	8012828 <_vfiprintf_r+0x1d0>
 8012820:	2b00      	cmp	r3, #0
 8012822:	d0c6      	beq.n	80127b2 <_vfiprintf_r+0x15a>
 8012824:	9105      	str	r1, [sp, #20]
 8012826:	e7c4      	b.n	80127b2 <_vfiprintf_r+0x15a>
 8012828:	fb0c 2101 	mla	r1, ip, r1, r2
 801282c:	4604      	mov	r4, r0
 801282e:	2301      	movs	r3, #1
 8012830:	e7f0      	b.n	8012814 <_vfiprintf_r+0x1bc>
 8012832:	ab03      	add	r3, sp, #12
 8012834:	462a      	mov	r2, r5
 8012836:	a904      	add	r1, sp, #16
 8012838:	4630      	mov	r0, r6
 801283a:	9300      	str	r3, [sp, #0]
 801283c:	4b11      	ldr	r3, [pc, #68]	; (8012884 <_vfiprintf_r+0x22c>)
 801283e:	f3af 8000 	nop.w
 8012842:	4607      	mov	r7, r0
 8012844:	1c78      	adds	r0, r7, #1
 8012846:	d1d6      	bne.n	80127f6 <_vfiprintf_r+0x19e>
 8012848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801284a:	07d9      	lsls	r1, r3, #31
 801284c:	d405      	bmi.n	801285a <_vfiprintf_r+0x202>
 801284e:	89ab      	ldrh	r3, [r5, #12]
 8012850:	059a      	lsls	r2, r3, #22
 8012852:	d402      	bmi.n	801285a <_vfiprintf_r+0x202>
 8012854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012856:	f7ff fda9 	bl	80123ac <__retarget_lock_release_recursive>
 801285a:	89ab      	ldrh	r3, [r5, #12]
 801285c:	065b      	lsls	r3, r3, #25
 801285e:	f53f af1d 	bmi.w	801269c <_vfiprintf_r+0x44>
 8012862:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012864:	e71c      	b.n	80126a0 <_vfiprintf_r+0x48>
 8012866:	ab03      	add	r3, sp, #12
 8012868:	462a      	mov	r2, r5
 801286a:	a904      	add	r1, sp, #16
 801286c:	4630      	mov	r0, r6
 801286e:	9300      	str	r3, [sp, #0]
 8012870:	4b04      	ldr	r3, [pc, #16]	; (8012884 <_vfiprintf_r+0x22c>)
 8012872:	f000 f87d 	bl	8012970 <_printf_i>
 8012876:	e7e4      	b.n	8012842 <_vfiprintf_r+0x1ea>
 8012878:	080131d3 	.word	0x080131d3
 801287c:	080131dd 	.word	0x080131dd
 8012880:	00000000 	.word	0x00000000
 8012884:	08012633 	.word	0x08012633
 8012888:	080131d9 	.word	0x080131d9

0801288c <_printf_common>:
 801288c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012890:	4616      	mov	r6, r2
 8012892:	4699      	mov	r9, r3
 8012894:	688a      	ldr	r2, [r1, #8]
 8012896:	4607      	mov	r7, r0
 8012898:	690b      	ldr	r3, [r1, #16]
 801289a:	460c      	mov	r4, r1
 801289c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80128a0:	4293      	cmp	r3, r2
 80128a2:	bfb8      	it	lt
 80128a4:	4613      	movlt	r3, r2
 80128a6:	6033      	str	r3, [r6, #0]
 80128a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80128ac:	b10a      	cbz	r2, 80128b2 <_printf_common+0x26>
 80128ae:	3301      	adds	r3, #1
 80128b0:	6033      	str	r3, [r6, #0]
 80128b2:	6823      	ldr	r3, [r4, #0]
 80128b4:	0699      	lsls	r1, r3, #26
 80128b6:	bf42      	ittt	mi
 80128b8:	6833      	ldrmi	r3, [r6, #0]
 80128ba:	3302      	addmi	r3, #2
 80128bc:	6033      	strmi	r3, [r6, #0]
 80128be:	6825      	ldr	r5, [r4, #0]
 80128c0:	f015 0506 	ands.w	r5, r5, #6
 80128c4:	d106      	bne.n	80128d4 <_printf_common+0x48>
 80128c6:	f104 0a19 	add.w	sl, r4, #25
 80128ca:	68e3      	ldr	r3, [r4, #12]
 80128cc:	6832      	ldr	r2, [r6, #0]
 80128ce:	1a9b      	subs	r3, r3, r2
 80128d0:	42ab      	cmp	r3, r5
 80128d2:	dc2b      	bgt.n	801292c <_printf_common+0xa0>
 80128d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80128d8:	1e13      	subs	r3, r2, #0
 80128da:	6822      	ldr	r2, [r4, #0]
 80128dc:	bf18      	it	ne
 80128de:	2301      	movne	r3, #1
 80128e0:	0692      	lsls	r2, r2, #26
 80128e2:	d430      	bmi.n	8012946 <_printf_common+0xba>
 80128e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80128e8:	4649      	mov	r1, r9
 80128ea:	4638      	mov	r0, r7
 80128ec:	47c0      	blx	r8
 80128ee:	3001      	adds	r0, #1
 80128f0:	d023      	beq.n	801293a <_printf_common+0xae>
 80128f2:	6823      	ldr	r3, [r4, #0]
 80128f4:	341a      	adds	r4, #26
 80128f6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80128fa:	f003 0306 	and.w	r3, r3, #6
 80128fe:	2b04      	cmp	r3, #4
 8012900:	bf0a      	itet	eq
 8012902:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8012906:	2500      	movne	r5, #0
 8012908:	6833      	ldreq	r3, [r6, #0]
 801290a:	f04f 0600 	mov.w	r6, #0
 801290e:	bf08      	it	eq
 8012910:	1aed      	subeq	r5, r5, r3
 8012912:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8012916:	bf08      	it	eq
 8012918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801291c:	4293      	cmp	r3, r2
 801291e:	bfc4      	itt	gt
 8012920:	1a9b      	subgt	r3, r3, r2
 8012922:	18ed      	addgt	r5, r5, r3
 8012924:	42b5      	cmp	r5, r6
 8012926:	d11a      	bne.n	801295e <_printf_common+0xd2>
 8012928:	2000      	movs	r0, #0
 801292a:	e008      	b.n	801293e <_printf_common+0xb2>
 801292c:	2301      	movs	r3, #1
 801292e:	4652      	mov	r2, sl
 8012930:	4649      	mov	r1, r9
 8012932:	4638      	mov	r0, r7
 8012934:	47c0      	blx	r8
 8012936:	3001      	adds	r0, #1
 8012938:	d103      	bne.n	8012942 <_printf_common+0xb6>
 801293a:	f04f 30ff 	mov.w	r0, #4294967295
 801293e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012942:	3501      	adds	r5, #1
 8012944:	e7c1      	b.n	80128ca <_printf_common+0x3e>
 8012946:	18e1      	adds	r1, r4, r3
 8012948:	1c5a      	adds	r2, r3, #1
 801294a:	2030      	movs	r0, #48	; 0x30
 801294c:	3302      	adds	r3, #2
 801294e:	4422      	add	r2, r4
 8012950:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012954:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012958:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801295c:	e7c2      	b.n	80128e4 <_printf_common+0x58>
 801295e:	2301      	movs	r3, #1
 8012960:	4622      	mov	r2, r4
 8012962:	4649      	mov	r1, r9
 8012964:	4638      	mov	r0, r7
 8012966:	47c0      	blx	r8
 8012968:	3001      	adds	r0, #1
 801296a:	d0e6      	beq.n	801293a <_printf_common+0xae>
 801296c:	3601      	adds	r6, #1
 801296e:	e7d9      	b.n	8012924 <_printf_common+0x98>

08012970 <_printf_i>:
 8012970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012974:	7e0f      	ldrb	r7, [r1, #24]
 8012976:	4691      	mov	r9, r2
 8012978:	4680      	mov	r8, r0
 801297a:	460c      	mov	r4, r1
 801297c:	2f78      	cmp	r7, #120	; 0x78
 801297e:	469a      	mov	sl, r3
 8012980:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012986:	d807      	bhi.n	8012998 <_printf_i+0x28>
 8012988:	2f62      	cmp	r7, #98	; 0x62
 801298a:	d80a      	bhi.n	80129a2 <_printf_i+0x32>
 801298c:	2f00      	cmp	r7, #0
 801298e:	f000 80d3 	beq.w	8012b38 <_printf_i+0x1c8>
 8012992:	2f58      	cmp	r7, #88	; 0x58
 8012994:	f000 80bf 	beq.w	8012b16 <_printf_i+0x1a6>
 8012998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801299c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80129a0:	e03a      	b.n	8012a18 <_printf_i+0xa8>
 80129a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80129a6:	2b15      	cmp	r3, #21
 80129a8:	d8f6      	bhi.n	8012998 <_printf_i+0x28>
 80129aa:	a101      	add	r1, pc, #4	; (adr r1, 80129b0 <_printf_i+0x40>)
 80129ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80129b0:	08012a09 	.word	0x08012a09
 80129b4:	08012a1d 	.word	0x08012a1d
 80129b8:	08012999 	.word	0x08012999
 80129bc:	08012999 	.word	0x08012999
 80129c0:	08012999 	.word	0x08012999
 80129c4:	08012999 	.word	0x08012999
 80129c8:	08012a1d 	.word	0x08012a1d
 80129cc:	08012999 	.word	0x08012999
 80129d0:	08012999 	.word	0x08012999
 80129d4:	08012999 	.word	0x08012999
 80129d8:	08012999 	.word	0x08012999
 80129dc:	08012b1f 	.word	0x08012b1f
 80129e0:	08012a49 	.word	0x08012a49
 80129e4:	08012adb 	.word	0x08012adb
 80129e8:	08012999 	.word	0x08012999
 80129ec:	08012999 	.word	0x08012999
 80129f0:	08012b41 	.word	0x08012b41
 80129f4:	08012999 	.word	0x08012999
 80129f8:	08012a49 	.word	0x08012a49
 80129fc:	08012999 	.word	0x08012999
 8012a00:	08012999 	.word	0x08012999
 8012a04:	08012ae3 	.word	0x08012ae3
 8012a08:	682b      	ldr	r3, [r5, #0]
 8012a0a:	1d1a      	adds	r2, r3, #4
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	602a      	str	r2, [r5, #0]
 8012a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012a18:	2301      	movs	r3, #1
 8012a1a:	e09e      	b.n	8012b5a <_printf_i+0x1ea>
 8012a1c:	6820      	ldr	r0, [r4, #0]
 8012a1e:	682b      	ldr	r3, [r5, #0]
 8012a20:	0607      	lsls	r7, r0, #24
 8012a22:	f103 0104 	add.w	r1, r3, #4
 8012a26:	6029      	str	r1, [r5, #0]
 8012a28:	d501      	bpl.n	8012a2e <_printf_i+0xbe>
 8012a2a:	681e      	ldr	r6, [r3, #0]
 8012a2c:	e003      	b.n	8012a36 <_printf_i+0xc6>
 8012a2e:	0646      	lsls	r6, r0, #25
 8012a30:	d5fb      	bpl.n	8012a2a <_printf_i+0xba>
 8012a32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012a36:	2e00      	cmp	r6, #0
 8012a38:	da03      	bge.n	8012a42 <_printf_i+0xd2>
 8012a3a:	232d      	movs	r3, #45	; 0x2d
 8012a3c:	4276      	negs	r6, r6
 8012a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a42:	4859      	ldr	r0, [pc, #356]	; (8012ba8 <_printf_i+0x238>)
 8012a44:	230a      	movs	r3, #10
 8012a46:	e012      	b.n	8012a6e <_printf_i+0xfe>
 8012a48:	682b      	ldr	r3, [r5, #0]
 8012a4a:	6820      	ldr	r0, [r4, #0]
 8012a4c:	1d19      	adds	r1, r3, #4
 8012a4e:	6029      	str	r1, [r5, #0]
 8012a50:	0605      	lsls	r5, r0, #24
 8012a52:	d501      	bpl.n	8012a58 <_printf_i+0xe8>
 8012a54:	681e      	ldr	r6, [r3, #0]
 8012a56:	e002      	b.n	8012a5e <_printf_i+0xee>
 8012a58:	0641      	lsls	r1, r0, #25
 8012a5a:	d5fb      	bpl.n	8012a54 <_printf_i+0xe4>
 8012a5c:	881e      	ldrh	r6, [r3, #0]
 8012a5e:	2f6f      	cmp	r7, #111	; 0x6f
 8012a60:	4851      	ldr	r0, [pc, #324]	; (8012ba8 <_printf_i+0x238>)
 8012a62:	bf0c      	ite	eq
 8012a64:	2308      	moveq	r3, #8
 8012a66:	230a      	movne	r3, #10
 8012a68:	2100      	movs	r1, #0
 8012a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012a6e:	6865      	ldr	r5, [r4, #4]
 8012a70:	2d00      	cmp	r5, #0
 8012a72:	60a5      	str	r5, [r4, #8]
 8012a74:	bfa2      	ittt	ge
 8012a76:	6821      	ldrge	r1, [r4, #0]
 8012a78:	f021 0104 	bicge.w	r1, r1, #4
 8012a7c:	6021      	strge	r1, [r4, #0]
 8012a7e:	b90e      	cbnz	r6, 8012a84 <_printf_i+0x114>
 8012a80:	2d00      	cmp	r5, #0
 8012a82:	d04a      	beq.n	8012b1a <_printf_i+0x1aa>
 8012a84:	4615      	mov	r5, r2
 8012a86:	fbb6 f1f3 	udiv	r1, r6, r3
 8012a8a:	fb03 6711 	mls	r7, r3, r1, r6
 8012a8e:	5dc7      	ldrb	r7, [r0, r7]
 8012a90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012a94:	4637      	mov	r7, r6
 8012a96:	460e      	mov	r6, r1
 8012a98:	42bb      	cmp	r3, r7
 8012a9a:	d9f4      	bls.n	8012a86 <_printf_i+0x116>
 8012a9c:	2b08      	cmp	r3, #8
 8012a9e:	d10b      	bne.n	8012ab8 <_printf_i+0x148>
 8012aa0:	6823      	ldr	r3, [r4, #0]
 8012aa2:	07de      	lsls	r6, r3, #31
 8012aa4:	d508      	bpl.n	8012ab8 <_printf_i+0x148>
 8012aa6:	6923      	ldr	r3, [r4, #16]
 8012aa8:	6861      	ldr	r1, [r4, #4]
 8012aaa:	4299      	cmp	r1, r3
 8012aac:	bfde      	ittt	le
 8012aae:	2330      	movle	r3, #48	; 0x30
 8012ab0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012ab4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012ab8:	1b52      	subs	r2, r2, r5
 8012aba:	6122      	str	r2, [r4, #16]
 8012abc:	464b      	mov	r3, r9
 8012abe:	aa03      	add	r2, sp, #12
 8012ac0:	4621      	mov	r1, r4
 8012ac2:	4640      	mov	r0, r8
 8012ac4:	f8cd a000 	str.w	sl, [sp]
 8012ac8:	f7ff fee0 	bl	801288c <_printf_common>
 8012acc:	3001      	adds	r0, #1
 8012ace:	d149      	bne.n	8012b64 <_printf_i+0x1f4>
 8012ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ad4:	b004      	add	sp, #16
 8012ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ada:	6823      	ldr	r3, [r4, #0]
 8012adc:	f043 0320 	orr.w	r3, r3, #32
 8012ae0:	6023      	str	r3, [r4, #0]
 8012ae2:	2778      	movs	r7, #120	; 0x78
 8012ae4:	4831      	ldr	r0, [pc, #196]	; (8012bac <_printf_i+0x23c>)
 8012ae6:	6823      	ldr	r3, [r4, #0]
 8012ae8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012aec:	061f      	lsls	r7, r3, #24
 8012aee:	6829      	ldr	r1, [r5, #0]
 8012af0:	f851 6b04 	ldr.w	r6, [r1], #4
 8012af4:	d402      	bmi.n	8012afc <_printf_i+0x18c>
 8012af6:	065f      	lsls	r7, r3, #25
 8012af8:	bf48      	it	mi
 8012afa:	b2b6      	uxthmi	r6, r6
 8012afc:	07df      	lsls	r7, r3, #31
 8012afe:	6029      	str	r1, [r5, #0]
 8012b00:	bf44      	itt	mi
 8012b02:	f043 0320 	orrmi.w	r3, r3, #32
 8012b06:	6023      	strmi	r3, [r4, #0]
 8012b08:	b91e      	cbnz	r6, 8012b12 <_printf_i+0x1a2>
 8012b0a:	6823      	ldr	r3, [r4, #0]
 8012b0c:	f023 0320 	bic.w	r3, r3, #32
 8012b10:	6023      	str	r3, [r4, #0]
 8012b12:	2310      	movs	r3, #16
 8012b14:	e7a8      	b.n	8012a68 <_printf_i+0xf8>
 8012b16:	4824      	ldr	r0, [pc, #144]	; (8012ba8 <_printf_i+0x238>)
 8012b18:	e7e5      	b.n	8012ae6 <_printf_i+0x176>
 8012b1a:	4615      	mov	r5, r2
 8012b1c:	e7be      	b.n	8012a9c <_printf_i+0x12c>
 8012b1e:	682b      	ldr	r3, [r5, #0]
 8012b20:	6826      	ldr	r6, [r4, #0]
 8012b22:	1d18      	adds	r0, r3, #4
 8012b24:	6961      	ldr	r1, [r4, #20]
 8012b26:	6028      	str	r0, [r5, #0]
 8012b28:	0635      	lsls	r5, r6, #24
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	d501      	bpl.n	8012b32 <_printf_i+0x1c2>
 8012b2e:	6019      	str	r1, [r3, #0]
 8012b30:	e002      	b.n	8012b38 <_printf_i+0x1c8>
 8012b32:	0670      	lsls	r0, r6, #25
 8012b34:	d5fb      	bpl.n	8012b2e <_printf_i+0x1be>
 8012b36:	8019      	strh	r1, [r3, #0]
 8012b38:	2300      	movs	r3, #0
 8012b3a:	4615      	mov	r5, r2
 8012b3c:	6123      	str	r3, [r4, #16]
 8012b3e:	e7bd      	b.n	8012abc <_printf_i+0x14c>
 8012b40:	682b      	ldr	r3, [r5, #0]
 8012b42:	2100      	movs	r1, #0
 8012b44:	1d1a      	adds	r2, r3, #4
 8012b46:	602a      	str	r2, [r5, #0]
 8012b48:	681d      	ldr	r5, [r3, #0]
 8012b4a:	6862      	ldr	r2, [r4, #4]
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	f000 f981 	bl	8012e54 <memchr>
 8012b52:	b108      	cbz	r0, 8012b58 <_printf_i+0x1e8>
 8012b54:	1b40      	subs	r0, r0, r5
 8012b56:	6060      	str	r0, [r4, #4]
 8012b58:	6863      	ldr	r3, [r4, #4]
 8012b5a:	6123      	str	r3, [r4, #16]
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b62:	e7ab      	b.n	8012abc <_printf_i+0x14c>
 8012b64:	6923      	ldr	r3, [r4, #16]
 8012b66:	462a      	mov	r2, r5
 8012b68:	4649      	mov	r1, r9
 8012b6a:	4640      	mov	r0, r8
 8012b6c:	47d0      	blx	sl
 8012b6e:	3001      	adds	r0, #1
 8012b70:	d0ae      	beq.n	8012ad0 <_printf_i+0x160>
 8012b72:	6823      	ldr	r3, [r4, #0]
 8012b74:	079b      	lsls	r3, r3, #30
 8012b76:	d413      	bmi.n	8012ba0 <_printf_i+0x230>
 8012b78:	68e0      	ldr	r0, [r4, #12]
 8012b7a:	9b03      	ldr	r3, [sp, #12]
 8012b7c:	4298      	cmp	r0, r3
 8012b7e:	bfb8      	it	lt
 8012b80:	4618      	movlt	r0, r3
 8012b82:	e7a7      	b.n	8012ad4 <_printf_i+0x164>
 8012b84:	2301      	movs	r3, #1
 8012b86:	4632      	mov	r2, r6
 8012b88:	4649      	mov	r1, r9
 8012b8a:	4640      	mov	r0, r8
 8012b8c:	47d0      	blx	sl
 8012b8e:	3001      	adds	r0, #1
 8012b90:	d09e      	beq.n	8012ad0 <_printf_i+0x160>
 8012b92:	3501      	adds	r5, #1
 8012b94:	68e3      	ldr	r3, [r4, #12]
 8012b96:	9903      	ldr	r1, [sp, #12]
 8012b98:	1a5b      	subs	r3, r3, r1
 8012b9a:	42ab      	cmp	r3, r5
 8012b9c:	dcf2      	bgt.n	8012b84 <_printf_i+0x214>
 8012b9e:	e7eb      	b.n	8012b78 <_printf_i+0x208>
 8012ba0:	2500      	movs	r5, #0
 8012ba2:	f104 0619 	add.w	r6, r4, #25
 8012ba6:	e7f5      	b.n	8012b94 <_printf_i+0x224>
 8012ba8:	080131e4 	.word	0x080131e4
 8012bac:	080131f5 	.word	0x080131f5

08012bb0 <__sflush_r>:
 8012bb0:	898a      	ldrh	r2, [r1, #12]
 8012bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bb6:	4605      	mov	r5, r0
 8012bb8:	0710      	lsls	r0, r2, #28
 8012bba:	460c      	mov	r4, r1
 8012bbc:	d458      	bmi.n	8012c70 <__sflush_r+0xc0>
 8012bbe:	684b      	ldr	r3, [r1, #4]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	dc05      	bgt.n	8012bd0 <__sflush_r+0x20>
 8012bc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	dc02      	bgt.n	8012bd0 <__sflush_r+0x20>
 8012bca:	2000      	movs	r0, #0
 8012bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012bd2:	2e00      	cmp	r6, #0
 8012bd4:	d0f9      	beq.n	8012bca <__sflush_r+0x1a>
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012bdc:	682f      	ldr	r7, [r5, #0]
 8012bde:	6a21      	ldr	r1, [r4, #32]
 8012be0:	602b      	str	r3, [r5, #0]
 8012be2:	d032      	beq.n	8012c4a <__sflush_r+0x9a>
 8012be4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012be6:	89a3      	ldrh	r3, [r4, #12]
 8012be8:	075a      	lsls	r2, r3, #29
 8012bea:	d505      	bpl.n	8012bf8 <__sflush_r+0x48>
 8012bec:	6863      	ldr	r3, [r4, #4]
 8012bee:	1ac0      	subs	r0, r0, r3
 8012bf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012bf2:	b10b      	cbz	r3, 8012bf8 <__sflush_r+0x48>
 8012bf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012bf6:	1ac0      	subs	r0, r0, r3
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	4602      	mov	r2, r0
 8012bfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012bfe:	4628      	mov	r0, r5
 8012c00:	6a21      	ldr	r1, [r4, #32]
 8012c02:	47b0      	blx	r6
 8012c04:	1c43      	adds	r3, r0, #1
 8012c06:	89a3      	ldrh	r3, [r4, #12]
 8012c08:	d106      	bne.n	8012c18 <__sflush_r+0x68>
 8012c0a:	6829      	ldr	r1, [r5, #0]
 8012c0c:	291d      	cmp	r1, #29
 8012c0e:	d82b      	bhi.n	8012c68 <__sflush_r+0xb8>
 8012c10:	4a28      	ldr	r2, [pc, #160]	; (8012cb4 <__sflush_r+0x104>)
 8012c12:	410a      	asrs	r2, r1
 8012c14:	07d6      	lsls	r6, r2, #31
 8012c16:	d427      	bmi.n	8012c68 <__sflush_r+0xb8>
 8012c18:	2200      	movs	r2, #0
 8012c1a:	04d9      	lsls	r1, r3, #19
 8012c1c:	6062      	str	r2, [r4, #4]
 8012c1e:	6922      	ldr	r2, [r4, #16]
 8012c20:	6022      	str	r2, [r4, #0]
 8012c22:	d504      	bpl.n	8012c2e <__sflush_r+0x7e>
 8012c24:	1c42      	adds	r2, r0, #1
 8012c26:	d101      	bne.n	8012c2c <__sflush_r+0x7c>
 8012c28:	682b      	ldr	r3, [r5, #0]
 8012c2a:	b903      	cbnz	r3, 8012c2e <__sflush_r+0x7e>
 8012c2c:	6560      	str	r0, [r4, #84]	; 0x54
 8012c2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c30:	602f      	str	r7, [r5, #0]
 8012c32:	2900      	cmp	r1, #0
 8012c34:	d0c9      	beq.n	8012bca <__sflush_r+0x1a>
 8012c36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c3a:	4299      	cmp	r1, r3
 8012c3c:	d002      	beq.n	8012c44 <__sflush_r+0x94>
 8012c3e:	4628      	mov	r0, r5
 8012c40:	f7ff fbe0 	bl	8012404 <_free_r>
 8012c44:	2000      	movs	r0, #0
 8012c46:	6360      	str	r0, [r4, #52]	; 0x34
 8012c48:	e7c0      	b.n	8012bcc <__sflush_r+0x1c>
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	4628      	mov	r0, r5
 8012c4e:	47b0      	blx	r6
 8012c50:	1c41      	adds	r1, r0, #1
 8012c52:	d1c8      	bne.n	8012be6 <__sflush_r+0x36>
 8012c54:	682b      	ldr	r3, [r5, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d0c5      	beq.n	8012be6 <__sflush_r+0x36>
 8012c5a:	2b1d      	cmp	r3, #29
 8012c5c:	d001      	beq.n	8012c62 <__sflush_r+0xb2>
 8012c5e:	2b16      	cmp	r3, #22
 8012c60:	d101      	bne.n	8012c66 <__sflush_r+0xb6>
 8012c62:	602f      	str	r7, [r5, #0]
 8012c64:	e7b1      	b.n	8012bca <__sflush_r+0x1a>
 8012c66:	89a3      	ldrh	r3, [r4, #12]
 8012c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c6c:	81a3      	strh	r3, [r4, #12]
 8012c6e:	e7ad      	b.n	8012bcc <__sflush_r+0x1c>
 8012c70:	690f      	ldr	r7, [r1, #16]
 8012c72:	2f00      	cmp	r7, #0
 8012c74:	d0a9      	beq.n	8012bca <__sflush_r+0x1a>
 8012c76:	0793      	lsls	r3, r2, #30
 8012c78:	680e      	ldr	r6, [r1, #0]
 8012c7a:	600f      	str	r7, [r1, #0]
 8012c7c:	bf0c      	ite	eq
 8012c7e:	694b      	ldreq	r3, [r1, #20]
 8012c80:	2300      	movne	r3, #0
 8012c82:	eba6 0807 	sub.w	r8, r6, r7
 8012c86:	608b      	str	r3, [r1, #8]
 8012c88:	f1b8 0f00 	cmp.w	r8, #0
 8012c8c:	dd9d      	ble.n	8012bca <__sflush_r+0x1a>
 8012c8e:	4643      	mov	r3, r8
 8012c90:	463a      	mov	r2, r7
 8012c92:	6a21      	ldr	r1, [r4, #32]
 8012c94:	4628      	mov	r0, r5
 8012c96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012c98:	47b0      	blx	r6
 8012c9a:	2800      	cmp	r0, #0
 8012c9c:	dc06      	bgt.n	8012cac <__sflush_r+0xfc>
 8012c9e:	89a3      	ldrh	r3, [r4, #12]
 8012ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ca8:	81a3      	strh	r3, [r4, #12]
 8012caa:	e78f      	b.n	8012bcc <__sflush_r+0x1c>
 8012cac:	4407      	add	r7, r0
 8012cae:	eba8 0800 	sub.w	r8, r8, r0
 8012cb2:	e7e9      	b.n	8012c88 <__sflush_r+0xd8>
 8012cb4:	dfbffffe 	.word	0xdfbffffe

08012cb8 <_fflush_r>:
 8012cb8:	b538      	push	{r3, r4, r5, lr}
 8012cba:	690b      	ldr	r3, [r1, #16]
 8012cbc:	4605      	mov	r5, r0
 8012cbe:	460c      	mov	r4, r1
 8012cc0:	b913      	cbnz	r3, 8012cc8 <_fflush_r+0x10>
 8012cc2:	2500      	movs	r5, #0
 8012cc4:	4628      	mov	r0, r5
 8012cc6:	bd38      	pop	{r3, r4, r5, pc}
 8012cc8:	b118      	cbz	r0, 8012cd2 <_fflush_r+0x1a>
 8012cca:	6a03      	ldr	r3, [r0, #32]
 8012ccc:	b90b      	cbnz	r3, 8012cd2 <_fflush_r+0x1a>
 8012cce:	f7ff f95d 	bl	8011f8c <__sinit>
 8012cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d0f3      	beq.n	8012cc2 <_fflush_r+0xa>
 8012cda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012cdc:	07d0      	lsls	r0, r2, #31
 8012cde:	d404      	bmi.n	8012cea <_fflush_r+0x32>
 8012ce0:	0599      	lsls	r1, r3, #22
 8012ce2:	d402      	bmi.n	8012cea <_fflush_r+0x32>
 8012ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ce6:	f7ff fb60 	bl	80123aa <__retarget_lock_acquire_recursive>
 8012cea:	4628      	mov	r0, r5
 8012cec:	4621      	mov	r1, r4
 8012cee:	f7ff ff5f 	bl	8012bb0 <__sflush_r>
 8012cf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012cf4:	4605      	mov	r5, r0
 8012cf6:	07da      	lsls	r2, r3, #31
 8012cf8:	d4e4      	bmi.n	8012cc4 <_fflush_r+0xc>
 8012cfa:	89a3      	ldrh	r3, [r4, #12]
 8012cfc:	059b      	lsls	r3, r3, #22
 8012cfe:	d4e1      	bmi.n	8012cc4 <_fflush_r+0xc>
 8012d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d02:	f7ff fb53 	bl	80123ac <__retarget_lock_release_recursive>
 8012d06:	e7dd      	b.n	8012cc4 <_fflush_r+0xc>

08012d08 <fiprintf>:
 8012d08:	b40e      	push	{r1, r2, r3}
 8012d0a:	b503      	push	{r0, r1, lr}
 8012d0c:	ab03      	add	r3, sp, #12
 8012d0e:	4601      	mov	r1, r0
 8012d10:	4805      	ldr	r0, [pc, #20]	; (8012d28 <fiprintf+0x20>)
 8012d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d16:	6800      	ldr	r0, [r0, #0]
 8012d18:	9301      	str	r3, [sp, #4]
 8012d1a:	f7ff fc9d 	bl	8012658 <_vfiprintf_r>
 8012d1e:	b002      	add	sp, #8
 8012d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d24:	b003      	add	sp, #12
 8012d26:	4770      	bx	lr
 8012d28:	200000e4 	.word	0x200000e4

08012d2c <__swhatbuf_r>:
 8012d2c:	b570      	push	{r4, r5, r6, lr}
 8012d2e:	460c      	mov	r4, r1
 8012d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d34:	b096      	sub	sp, #88	; 0x58
 8012d36:	4615      	mov	r5, r2
 8012d38:	2900      	cmp	r1, #0
 8012d3a:	461e      	mov	r6, r3
 8012d3c:	da0c      	bge.n	8012d58 <__swhatbuf_r+0x2c>
 8012d3e:	89a3      	ldrh	r3, [r4, #12]
 8012d40:	2100      	movs	r1, #0
 8012d42:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012d46:	bf0c      	ite	eq
 8012d48:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012d4c:	2340      	movne	r3, #64	; 0x40
 8012d4e:	2000      	movs	r0, #0
 8012d50:	6031      	str	r1, [r6, #0]
 8012d52:	602b      	str	r3, [r5, #0]
 8012d54:	b016      	add	sp, #88	; 0x58
 8012d56:	bd70      	pop	{r4, r5, r6, pc}
 8012d58:	466a      	mov	r2, sp
 8012d5a:	f000 f849 	bl	8012df0 <_fstat_r>
 8012d5e:	2800      	cmp	r0, #0
 8012d60:	dbed      	blt.n	8012d3e <__swhatbuf_r+0x12>
 8012d62:	9901      	ldr	r1, [sp, #4]
 8012d64:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012d68:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012d6c:	4259      	negs	r1, r3
 8012d6e:	4159      	adcs	r1, r3
 8012d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d74:	e7eb      	b.n	8012d4e <__swhatbuf_r+0x22>

08012d76 <__smakebuf_r>:
 8012d76:	898b      	ldrh	r3, [r1, #12]
 8012d78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012d7a:	079d      	lsls	r5, r3, #30
 8012d7c:	4606      	mov	r6, r0
 8012d7e:	460c      	mov	r4, r1
 8012d80:	d507      	bpl.n	8012d92 <__smakebuf_r+0x1c>
 8012d82:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012d86:	6023      	str	r3, [r4, #0]
 8012d88:	6123      	str	r3, [r4, #16]
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	6163      	str	r3, [r4, #20]
 8012d8e:	b002      	add	sp, #8
 8012d90:	bd70      	pop	{r4, r5, r6, pc}
 8012d92:	ab01      	add	r3, sp, #4
 8012d94:	466a      	mov	r2, sp
 8012d96:	f7ff ffc9 	bl	8012d2c <__swhatbuf_r>
 8012d9a:	9900      	ldr	r1, [sp, #0]
 8012d9c:	4605      	mov	r5, r0
 8012d9e:	4630      	mov	r0, r6
 8012da0:	f7ff fba4 	bl	80124ec <_malloc_r>
 8012da4:	b948      	cbnz	r0, 8012dba <__smakebuf_r+0x44>
 8012da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012daa:	059a      	lsls	r2, r3, #22
 8012dac:	d4ef      	bmi.n	8012d8e <__smakebuf_r+0x18>
 8012dae:	f023 0303 	bic.w	r3, r3, #3
 8012db2:	f043 0302 	orr.w	r3, r3, #2
 8012db6:	81a3      	strh	r3, [r4, #12]
 8012db8:	e7e3      	b.n	8012d82 <__smakebuf_r+0xc>
 8012dba:	89a3      	ldrh	r3, [r4, #12]
 8012dbc:	6020      	str	r0, [r4, #0]
 8012dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012dc2:	6120      	str	r0, [r4, #16]
 8012dc4:	81a3      	strh	r3, [r4, #12]
 8012dc6:	9b00      	ldr	r3, [sp, #0]
 8012dc8:	6163      	str	r3, [r4, #20]
 8012dca:	9b01      	ldr	r3, [sp, #4]
 8012dcc:	b15b      	cbz	r3, 8012de6 <__smakebuf_r+0x70>
 8012dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012dd2:	4630      	mov	r0, r6
 8012dd4:	f000 f81e 	bl	8012e14 <_isatty_r>
 8012dd8:	b128      	cbz	r0, 8012de6 <__smakebuf_r+0x70>
 8012dda:	89a3      	ldrh	r3, [r4, #12]
 8012ddc:	f023 0303 	bic.w	r3, r3, #3
 8012de0:	f043 0301 	orr.w	r3, r3, #1
 8012de4:	81a3      	strh	r3, [r4, #12]
 8012de6:	89a3      	ldrh	r3, [r4, #12]
 8012de8:	431d      	orrs	r5, r3
 8012dea:	81a5      	strh	r5, [r4, #12]
 8012dec:	e7cf      	b.n	8012d8e <__smakebuf_r+0x18>
	...

08012df0 <_fstat_r>:
 8012df0:	b538      	push	{r3, r4, r5, lr}
 8012df2:	2300      	movs	r3, #0
 8012df4:	4d06      	ldr	r5, [pc, #24]	; (8012e10 <_fstat_r+0x20>)
 8012df6:	4604      	mov	r4, r0
 8012df8:	4608      	mov	r0, r1
 8012dfa:	4611      	mov	r1, r2
 8012dfc:	602b      	str	r3, [r5, #0]
 8012dfe:	f7ed ff3c 	bl	8000c7a <_fstat>
 8012e02:	1c43      	adds	r3, r0, #1
 8012e04:	d102      	bne.n	8012e0c <_fstat_r+0x1c>
 8012e06:	682b      	ldr	r3, [r5, #0]
 8012e08:	b103      	cbz	r3, 8012e0c <_fstat_r+0x1c>
 8012e0a:	6023      	str	r3, [r4, #0]
 8012e0c:	bd38      	pop	{r3, r4, r5, pc}
 8012e0e:	bf00      	nop
 8012e10:	2000926c 	.word	0x2000926c

08012e14 <_isatty_r>:
 8012e14:	b538      	push	{r3, r4, r5, lr}
 8012e16:	2300      	movs	r3, #0
 8012e18:	4d05      	ldr	r5, [pc, #20]	; (8012e30 <_isatty_r+0x1c>)
 8012e1a:	4604      	mov	r4, r0
 8012e1c:	4608      	mov	r0, r1
 8012e1e:	602b      	str	r3, [r5, #0]
 8012e20:	f7ed ff3b 	bl	8000c9a <_isatty>
 8012e24:	1c43      	adds	r3, r0, #1
 8012e26:	d102      	bne.n	8012e2e <_isatty_r+0x1a>
 8012e28:	682b      	ldr	r3, [r5, #0]
 8012e2a:	b103      	cbz	r3, 8012e2e <_isatty_r+0x1a>
 8012e2c:	6023      	str	r3, [r4, #0]
 8012e2e:	bd38      	pop	{r3, r4, r5, pc}
 8012e30:	2000926c 	.word	0x2000926c

08012e34 <_sbrk_r>:
 8012e34:	b538      	push	{r3, r4, r5, lr}
 8012e36:	2300      	movs	r3, #0
 8012e38:	4d05      	ldr	r5, [pc, #20]	; (8012e50 <_sbrk_r+0x1c>)
 8012e3a:	4604      	mov	r4, r0
 8012e3c:	4608      	mov	r0, r1
 8012e3e:	602b      	str	r3, [r5, #0]
 8012e40:	f7ed ff44 	bl	8000ccc <_sbrk>
 8012e44:	1c43      	adds	r3, r0, #1
 8012e46:	d102      	bne.n	8012e4e <_sbrk_r+0x1a>
 8012e48:	682b      	ldr	r3, [r5, #0]
 8012e4a:	b103      	cbz	r3, 8012e4e <_sbrk_r+0x1a>
 8012e4c:	6023      	str	r3, [r4, #0]
 8012e4e:	bd38      	pop	{r3, r4, r5, pc}
 8012e50:	2000926c 	.word	0x2000926c

08012e54 <memchr>:
 8012e54:	b2c9      	uxtb	r1, r1
 8012e56:	4402      	add	r2, r0
 8012e58:	b510      	push	{r4, lr}
 8012e5a:	4290      	cmp	r0, r2
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	d101      	bne.n	8012e64 <memchr+0x10>
 8012e60:	2300      	movs	r3, #0
 8012e62:	e003      	b.n	8012e6c <memchr+0x18>
 8012e64:	781c      	ldrb	r4, [r3, #0]
 8012e66:	3001      	adds	r0, #1
 8012e68:	428c      	cmp	r4, r1
 8012e6a:	d1f6      	bne.n	8012e5a <memchr+0x6>
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	bd10      	pop	{r4, pc}

08012e70 <abort>:
 8012e70:	2006      	movs	r0, #6
 8012e72:	b508      	push	{r3, lr}
 8012e74:	f000 f82c 	bl	8012ed0 <raise>
 8012e78:	2001      	movs	r0, #1
 8012e7a:	f7ed feaf 	bl	8000bdc <_exit>

08012e7e <_raise_r>:
 8012e7e:	291f      	cmp	r1, #31
 8012e80:	b538      	push	{r3, r4, r5, lr}
 8012e82:	4604      	mov	r4, r0
 8012e84:	460d      	mov	r5, r1
 8012e86:	d904      	bls.n	8012e92 <_raise_r+0x14>
 8012e88:	2316      	movs	r3, #22
 8012e8a:	6003      	str	r3, [r0, #0]
 8012e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8012e90:	bd38      	pop	{r3, r4, r5, pc}
 8012e92:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012e94:	b112      	cbz	r2, 8012e9c <_raise_r+0x1e>
 8012e96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012e9a:	b94b      	cbnz	r3, 8012eb0 <_raise_r+0x32>
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	f000 f831 	bl	8012f04 <_getpid_r>
 8012ea2:	462a      	mov	r2, r5
 8012ea4:	4601      	mov	r1, r0
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012eac:	f000 b818 	b.w	8012ee0 <_kill_r>
 8012eb0:	2b01      	cmp	r3, #1
 8012eb2:	d00a      	beq.n	8012eca <_raise_r+0x4c>
 8012eb4:	1c59      	adds	r1, r3, #1
 8012eb6:	d103      	bne.n	8012ec0 <_raise_r+0x42>
 8012eb8:	2316      	movs	r3, #22
 8012eba:	6003      	str	r3, [r0, #0]
 8012ebc:	2001      	movs	r0, #1
 8012ebe:	e7e7      	b.n	8012e90 <_raise_r+0x12>
 8012ec0:	2400      	movs	r4, #0
 8012ec2:	4628      	mov	r0, r5
 8012ec4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012ec8:	4798      	blx	r3
 8012eca:	2000      	movs	r0, #0
 8012ecc:	e7e0      	b.n	8012e90 <_raise_r+0x12>
	...

08012ed0 <raise>:
 8012ed0:	4b02      	ldr	r3, [pc, #8]	; (8012edc <raise+0xc>)
 8012ed2:	4601      	mov	r1, r0
 8012ed4:	6818      	ldr	r0, [r3, #0]
 8012ed6:	f7ff bfd2 	b.w	8012e7e <_raise_r>
 8012eda:	bf00      	nop
 8012edc:	200000e4 	.word	0x200000e4

08012ee0 <_kill_r>:
 8012ee0:	b538      	push	{r3, r4, r5, lr}
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	4d06      	ldr	r5, [pc, #24]	; (8012f00 <_kill_r+0x20>)
 8012ee6:	4604      	mov	r4, r0
 8012ee8:	4608      	mov	r0, r1
 8012eea:	4611      	mov	r1, r2
 8012eec:	602b      	str	r3, [r5, #0]
 8012eee:	f7ed fe65 	bl	8000bbc <_kill>
 8012ef2:	1c43      	adds	r3, r0, #1
 8012ef4:	d102      	bne.n	8012efc <_kill_r+0x1c>
 8012ef6:	682b      	ldr	r3, [r5, #0]
 8012ef8:	b103      	cbz	r3, 8012efc <_kill_r+0x1c>
 8012efa:	6023      	str	r3, [r4, #0]
 8012efc:	bd38      	pop	{r3, r4, r5, pc}
 8012efe:	bf00      	nop
 8012f00:	2000926c 	.word	0x2000926c

08012f04 <_getpid_r>:
 8012f04:	f7ed be52 	b.w	8000bac <_getpid>

08012f08 <_init>:
 8012f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f0a:	bf00      	nop
 8012f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f0e:	bc08      	pop	{r3}
 8012f10:	469e      	mov	lr, r3
 8012f12:	4770      	bx	lr

08012f14 <_fini>:
 8012f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f16:	bf00      	nop
 8012f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f1a:	bc08      	pop	{r3}
 8012f1c:	469e      	mov	lr, r3
 8012f1e:	4770      	bx	lr
