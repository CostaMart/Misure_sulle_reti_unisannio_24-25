
nx_wake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd28  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  0800ff74  0800ff74  0001ff74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010318  08010318  000300e8  2**0
                  CONTENTS
  4 .ARM          00000000  08010318  08010318  000300e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010318  08010318  000300e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010318  08010318  00020318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801031c  0801031c  0002031c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08010320  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015984  200000e8  08010408  000300e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015a6c  08010408  00035a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003011e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000c6dc8  00000000  00000000  00030161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ff63  00000000  00000000  000f6f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002240  00000000  00000000  00106e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000179a  00000000  00000000  001090d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004418f  00000000  00000000  0010a86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00050505  00000000  00000000  0014e9f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00155d2f  00000000  00000000  0019eefe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f84  00000000  00000000  002f4c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000103  00000000  00000000  002fbbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	200000e8 	.word	0x200000e8
 8000268:	00000000 	.word	0x00000000
 800026c:	0800ff5c 	.word	0x0800ff5c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	200000ec 	.word	0x200000ec
 8000288:	0800ff5c 	.word	0x0800ff5c

0800028c <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 800028c:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800028e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000292:	4917      	ldr	r1, [pc, #92]	; (80002f0 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000294:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000298:	4816      	ldr	r0, [pc, #88]	; (80002f4 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029a:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 800029c:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a0:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a2:	4815      	ldr	r0, [pc, #84]	; (80002f8 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a4:	4912      	ldr	r1, [pc, #72]	; (80002f0 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002a6:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002a8:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002aa:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ae:	4913      	ldr	r1, [pc, #76]	; (80002fc <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b0:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b2:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002b6:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002b8:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002bc:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c4:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002c8:	490d      	ldr	r1, [pc, #52]	; (8000300 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ca:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_BadHandler>

080002d4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002da:	4770      	bx	lr

080002dc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002dc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002de:	f000 f897 	bl	8000410 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002e6:	4770      	bx	lr

080002e8 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002e8:	f7ff bffe 	b.w	80002e8 <__tx_NMIHandler>

080002ec <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f0:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f4:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002f8:	20014880 	.word	0x20014880
    LDR     r1, =SYSTICK_CYCLES
 80002fc:	0026259f 	.word	0x0026259f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000300:	40ff0000 	.word	0x40ff0000

08000304 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000304:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000308:	4a2d      	ldr	r2, [pc, #180]	; (80003c0 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800030c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000310:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000314:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000318:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800031e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000322:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000326:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032a:	f3bf 8f6f 	isb	sy

0800032e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800032e:	e7fe      	b.n	800032e <__tx_wait_here>

08000330 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000330:	4824      	ldr	r0, [pc, #144]	; (80003c4 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000332:	4a25      	ldr	r2, [pc, #148]	; (80003c8 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000334:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000338:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033a:	b191      	cbz	r1, 8000362 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800033c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800033e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000342:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000346:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034a:	d101      	bne.n	8000350 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 800034c:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000350 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000350:	4c1e      	ldr	r4, [pc, #120]	; (80003cc <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000352:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000356:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035a:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 800035c:	b10d      	cbz	r5, 8000362 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800035e:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000360:	6023      	str	r3, [r4, #0]

08000362 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000362:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000364:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000366:	b1d1      	cbz	r1, 800039e <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000368:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036a:	b662      	cpsie	i

0800036c <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800036c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800036e:	4c17      	ldr	r4, [pc, #92]	; (80003cc <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000370:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000372:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000376:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000378:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800037e:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000382:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000386:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800038e:	d101      	bne.n	8000394 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000390:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000394 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000394:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000398:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 800039c:	4770      	bx	lr

0800039e <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800039e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a0:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a2:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a4:	b909      	cbnz	r1, 80003aa <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a6:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a8:	e7f9      	b.n	800039e <__tx_ts_wait>

080003aa <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003aa:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003ae:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b2:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b6:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b8:	e7d8      	b.n	800036c <__tx_ts_restore>
 80003ba:	bf00      	nop

080003bc <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003bc:	4770      	bx	lr
 80003be:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c0:	2001491c 	.word	0x2001491c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c4:	20014884 	.word	0x20014884
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c8:	20014888 	.word	0x20014888
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003cc:	20014e88 	.word	0x20014e88

080003d0 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d6:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003da:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003de:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ea:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003ec:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ee:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f4:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f6:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003fc:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000402:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000404:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000406:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800040c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040e:	4770      	bx	lr

08000410 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000410:	4922      	ldr	r1, [pc, #136]	; (800049c <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000412:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000414:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000418:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041a:	4b21      	ldr	r3, [pc, #132]	; (80004a0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800041c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041e:	b13a      	cbz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000420:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000424:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000426:	b91a      	cbnz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000428:	4b1e      	ldr	r3, [pc, #120]	; (80004a4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042e:	6018      	str	r0, [r3, #0]

08000430 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000430:	491d      	ldr	r1, [pc, #116]	; (80004a8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000432:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000434:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000436:	b122      	cbz	r2, 8000442 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000438:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000440:	e008      	b.n	8000454 <__tx_timer_done>

08000442 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000442:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000448:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800044c:	d101      	bne.n	8000452 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044e:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000450:	6818      	ldr	r0, [r3, #0]

08000452 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000452:	6008      	str	r0, [r1, #0]

08000454 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000458:	b912      	cbnz	r2, 8000460 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045a:	4914      	ldr	r1, [pc, #80]	; (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800045c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045e:	b1c8      	cbz	r0, 8000494 <__tx_timer_nothing_expired>

08000460 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000460:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000462:	4912      	ldr	r1, [pc, #72]	; (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000464:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000466:	b108      	cbz	r0, 800046c <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000468:	f00d fdbe 	bl	800dfe8 <_tx_timer_expiration_process>

0800046c <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800046c:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046e:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000470:	b172      	cbz	r2, 8000490 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000472:	f00d fcc7 	bl	800de04 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000476:	4810      	ldr	r0, [pc, #64]	; (80004b8 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000478:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047a:	b949      	cbnz	r1, 8000490 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800047c:	480f      	ldr	r0, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047e:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000480:	4a0f      	ldr	r2, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000482:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000484:	480f      	ldr	r0, [pc, #60]	; (80004c4 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048a:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800048c:	d000      	beq.n	8000490 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048e:	6002      	str	r2, [r0, #0]

08000490 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000490:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000494 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000494:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000498:	4770      	bx	lr
 800049a:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800049c:	20014928 	.word	0x20014928
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a0:	20014e88 	.word	0x20014e88
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a4:	2001492c 	.word	0x2001492c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a8:	200149b8 	.word	0x200149b8
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004ac:	200149bc 	.word	0x200149bc
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b0:	200149b4 	.word	0x200149b4
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b4:	200149b0 	.word	0x200149b0
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b8:	2001491c 	.word	0x2001491c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004bc:	20014884 	.word	0x20014884
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c0:	20014888 	.word	0x20014888
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c4:	e000ed04 	.word	0xe000ed04

080004c8 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80004d4:	2334      	movs	r3, #52	; 0x34
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004dc:	4a15      	ldr	r2, [pc, #84]	; (8000534 <tx_application_define+0x6c>)
 80004de:	4916      	ldr	r1, [pc, #88]	; (8000538 <tx_application_define+0x70>)
 80004e0:	4816      	ldr	r0, [pc, #88]	; (800053c <tx_application_define+0x74>)
 80004e2:	f00e f82b 	bl	800e53c <_txe_byte_pool_create>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d109      	bne.n	8000500 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80004ec:	4b13      	ldr	r3, [pc, #76]	; (800053c <tx_application_define+0x74>)
 80004ee:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80004f0:	68b8      	ldr	r0, [r7, #8]
 80004f2:	f000 f82b 	bl	800054c <App_ThreadX_Init>
 80004f6:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d000      	beq.n	8000500 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80004fe:	e7fe      	b.n	80004fe <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&nx_app_byte_pool, "Nx App memory pool", nx_byte_pool_buffer, NX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000500:	2334      	movs	r3, #52	; 0x34
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <tx_application_define+0x78>)
 800050a:	490e      	ldr	r1, [pc, #56]	; (8000544 <tx_application_define+0x7c>)
 800050c:	480e      	ldr	r0, [pc, #56]	; (8000548 <tx_application_define+0x80>)
 800050e:	f00e f815 	bl	800e53c <_txe_byte_pool_create>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d109      	bne.n	800052c <tx_application_define+0x64>
  {
    /* USER CODE BEGIN NX_Byte_Pool_Success */

    /* USER CODE END NX_Byte_Pool_Success */

    memory_ptr = (VOID *)&nx_app_byte_pool;
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <tx_application_define+0x80>)
 800051a:	60bb      	str	r3, [r7, #8]
    status = MX_NetXDuo_Init(memory_ptr);
 800051c:	68b8      	ldr	r0, [r7, #8]
 800051e:	f00e f9d9 	bl	800e8d4 <MX_NetXDuo_Init>
 8000522:	60f8      	str	r0, [r7, #12]
    if (status != NX_SUCCESS)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d000      	beq.n	800052c <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_NetXDuo_Init_Error */
      while(1)
 800052a:	e7fe      	b.n	800052a <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000104 	.word	0x20000104
 8000538:	0800ff74 	.word	0x0800ff74
 800053c:	20000504 	.word	0x20000504
 8000540:	20000538 	.word	0x20000538
 8000544:	0800ff88 	.word	0x0800ff88
 8000548:	20007d38 	.word	0x20007d38

0800054c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000558:	68fb      	ldr	r3, [r7, #12]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 800056a:	f00c f8c1 	bl	800c6f0 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fe73 	bl	8001264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f81b 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8d7 	bl	8000734 <MX_GPIO_Init>
  MX_ETH_Init();
 8000586:	f000 f87d 	bl	8000684 <MX_ETH_Init>
  MX_ICACHE_Init();
 800058a:	f000 f8c7 	bl	800071c <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  // Inizializzazione dell'area di memoria con valori dummy
  for (ULONG i = 0; i < MEMORY_SIZE; i++)
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	e007      	b.n	80005a4 <main+0x30>
  {
    memory_area[i] = 'a';
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <main+0x40>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	2261      	movs	r2, #97	; 0x61
 800059c:	701a      	strb	r2, [r3, #0]
  for (ULONG i = 0; i < MEMORY_SIZE; i++)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3301      	adds	r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 80005aa:	d3f3      	bcc.n	8000594 <main+0x20>
  }
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80005ac:	f7ff ffdb 	bl	8000566 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0x3c>
 80005b2:	bf00      	nop
 80005b4:	20007f14 	.word	0x20007f14

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b09c      	sub	sp, #112	; 0x70
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2250      	movs	r2, #80	; 0x50
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00e fea0 	bl	800f30c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
 80005dc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80005de:	4b28      	ldr	r3, [pc, #160]	; (8000680 <SystemClock_Config+0xc8>)
 80005e0:	691b      	ldr	r3, [r3, #16]
 80005e2:	4a27      	ldr	r2, [pc, #156]	; (8000680 <SystemClock_Config+0xc8>)
 80005e4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80005e8:	6113      	str	r3, [r2, #16]
 80005ea:	4b25      	ldr	r3, [pc, #148]	; (8000680 <SystemClock_Config+0xc8>)
 80005ec:	691b      	ldr	r3, [r3, #16]
 80005ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005f6:	bf00      	nop
 80005f8:	4b21      	ldr	r3, [pc, #132]	; (8000680 <SystemClock_Config+0xc8>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	f003 0308 	and.w	r3, r3, #8
 8000600:	2b08      	cmp	r3, #8
 8000602:	d1f9      	bne.n	80005f8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8000608:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000612:	2303      	movs	r3, #3
 8000614:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000616:	2304      	movs	r3, #4
 8000618:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 800061a:	23fa      	movs	r3, #250	; 0xfa
 800061c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000626:	2302      	movs	r3, #2
 8000628:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 800062a:	2304      	movs	r3, #4
 800062c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800062e:	2300      	movs	r3, #0
 8000630:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fed0 	bl	80033e0 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000646:	f000 f931 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	231f      	movs	r3, #31
 800064c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2303      	movs	r3, #3
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	2105      	movs	r1, #5
 8000668:	4618      	mov	r0, r3
 800066a:	f003 faf1 	bl	8003c50 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000674:	f000 f91a 	bl	80008ac <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3770      	adds	r7, #112	; 0x70
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	44020800 	.word	0x44020800

08000684 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_ETH_Init+0x80>)
 800068a:	4a1f      	ldr	r2, [pc, #124]	; (8000708 <MX_ETH_Init+0x84>)
 800068c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_ETH_Init+0x88>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_ETH_Init+0x88>)
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_ETH_Init+0x88>)
 800069c:	22e1      	movs	r2, #225	; 0xe1
 800069e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_ETH_Init+0x88>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_ETH_Init+0x88>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_ETH_Init+0x88>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_ETH_Init+0x80>)
 80006b4:	4a15      	ldr	r2, [pc, #84]	; (800070c <MX_ETH_Init+0x88>)
 80006b6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_ETH_Init+0x80>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_ETH_Init+0x80>)
 80006c0:	4a13      	ldr	r2, [pc, #76]	; (8000710 <MX_ETH_Init+0x8c>)
 80006c2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_ETH_Init+0x80>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <MX_ETH_Init+0x90>)
 80006c8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_ETH_Init+0x80>)
 80006cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006d2:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_ETH_Init+0x80>)
 80006d4:	f000 ff02 	bl	80014dc <HAL_ETH_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80006de:	f000 f8e5 	bl	80008ac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006e2:	2238      	movs	r2, #56	; 0x38
 80006e4:	2100      	movs	r1, #0
 80006e6:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_ETH_Init+0x94>)
 80006e8:	f00e fe10 	bl	800f30c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_ETH_Init+0x94>)
 80006ee:	2221      	movs	r2, #33	; 0x21
 80006f0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_ETH_Init+0x94>)
 80006f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006f8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_ETH_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20007e64 	.word	0x20007e64
 8000708:	40028000 	.word	0x40028000
 800070c:	20014714 	.word	0x20014714
 8000710:	20007e04 	.word	0x20007e04
 8000714:	20007da4 	.word	0x20007da4
 8000718:	20007d6c 	.word	0x20007d6c

0800071c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000720:	f002 fe0c 	bl	800333c <HAL_ICACHE_Enable>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800072a:	f000 f8bf 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	; 0x30
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b4b      	ldr	r3, [pc, #300]	; (8000878 <MX_GPIO_Init+0x144>)
 800074c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000750:	4a49      	ldr	r2, [pc, #292]	; (8000878 <MX_GPIO_Init+0x144>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800075a:	4b47      	ldr	r3, [pc, #284]	; (8000878 <MX_GPIO_Init+0x144>)
 800075c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	61bb      	str	r3, [r7, #24]
 8000766:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000768:	4b43      	ldr	r3, [pc, #268]	; (8000878 <MX_GPIO_Init+0x144>)
 800076a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800076e:	4a42      	ldr	r2, [pc, #264]	; (8000878 <MX_GPIO_Init+0x144>)
 8000770:	f043 0320 	orr.w	r3, r3, #32
 8000774:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000778:	4b3f      	ldr	r3, [pc, #252]	; (8000878 <MX_GPIO_Init+0x144>)
 800077a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800077e:	f003 0320 	and.w	r3, r3, #32
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b3c      	ldr	r3, [pc, #240]	; (8000878 <MX_GPIO_Init+0x144>)
 8000788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800078c:	4a3a      	ldr	r2, [pc, #232]	; (8000878 <MX_GPIO_Init+0x144>)
 800078e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000792:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000796:	4b38      	ldr	r3, [pc, #224]	; (8000878 <MX_GPIO_Init+0x144>)
 8000798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800079c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b34      	ldr	r3, [pc, #208]	; (8000878 <MX_GPIO_Init+0x144>)
 80007a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007aa:	4a33      	ldr	r2, [pc, #204]	; (8000878 <MX_GPIO_Init+0x144>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007b4:	4b30      	ldr	r3, [pc, #192]	; (8000878 <MX_GPIO_Init+0x144>)
 80007b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <MX_GPIO_Init+0x144>)
 80007c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007c8:	4a2b      	ldr	r2, [pc, #172]	; (8000878 <MX_GPIO_Init+0x144>)
 80007ca:	f043 0302 	orr.w	r3, r3, #2
 80007ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <MX_GPIO_Init+0x144>)
 80007d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <MX_GPIO_Init+0x144>)
 80007e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007e6:	4a24      	ldr	r2, [pc, #144]	; (8000878 <MX_GPIO_Init+0x144>)
 80007e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007f0:	4b21      	ldr	r3, [pc, #132]	; (8000878 <MX_GPIO_Init+0x144>)
 80007f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2110      	movs	r1, #16
 8000802:	481e      	ldr	r0, [pc, #120]	; (800087c <MX_GPIO_Init+0x148>)
 8000804:	f002 fd68 	bl	80032d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2101      	movs	r1, #1
 800080c:	481c      	ldr	r0, [pc, #112]	; (8000880 <MX_GPIO_Init+0x14c>)
 800080e:	f002 fd63 	bl	80032d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2110      	movs	r1, #16
 8000816:	481b      	ldr	r0, [pc, #108]	; (8000884 <MX_GPIO_Init+0x150>)
 8000818:	f002 fd5e 	bl	80032d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_YELLOW_Pin;
 800081c:	2310      	movs	r3, #16
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4812      	ldr	r0, [pc, #72]	; (800087c <MX_GPIO_Init+0x148>)
 8000834:	f002 fbfe 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000838:	2301      	movs	r3, #1
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	480c      	ldr	r0, [pc, #48]	; (8000880 <MX_GPIO_Init+0x14c>)
 8000850:	f002 fbf0 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000854:	2310      	movs	r3, #16
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <MX_GPIO_Init+0x150>)
 800086c:	f002 fbe2 	bl	8003034 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000870:	bf00      	nop
 8000872:	3730      	adds	r7, #48	; 0x30
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	44020c00 	.word	0x44020c00
 800087c:	42021400 	.word	0x42021400
 8000880:	42020400 	.word	0x42020400
 8000884:	42021800 	.word	0x42021800

08000888 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d101      	bne.n	800089e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800089a:	f000 fd09 	bl	80012b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40001000 	.word	0x40001000

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <Error_Handler+0x8>

080008b6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08e      	sub	sp, #56	; 0x38
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a61      	ldr	r2, [pc, #388]	; (8000a68 <HAL_ETH_MspInit+0x1a4>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	f040 80bb 	bne.w	8000a5e <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80008e8:	4b60      	ldr	r3, [pc, #384]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ee:	4a5f      	ldr	r2, [pc, #380]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 80008f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80008f8:	4b5c      	ldr	r3, [pc, #368]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 80008fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000902:	623b      	str	r3, [r7, #32]
 8000904:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8000906:	4b59      	ldr	r3, [pc, #356]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090c:	4a57      	ldr	r2, [pc, #348]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 800090e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000912:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000916:	4b55      	ldr	r3, [pc, #340]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000920:	61fb      	str	r3, [r7, #28]
 8000922:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8000924:	4b51      	ldr	r3, [pc, #324]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092a:	4a50      	ldr	r2, [pc, #320]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 800092c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000934:	4b4d      	ldr	r3, [pc, #308]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800093e:	61bb      	str	r3, [r7, #24]
 8000940:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b4a      	ldr	r3, [pc, #296]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000948:	4a48      	ldr	r2, [pc, #288]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000952:	4b46      	ldr	r3, [pc, #280]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b42      	ldr	r3, [pc, #264]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000966:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000970:	4b3e      	ldr	r3, [pc, #248]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b3b      	ldr	r3, [pc, #236]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000984:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000986:	f043 0302 	orr.w	r3, r3, #2
 800098a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800098e:	4b37      	ldr	r3, [pc, #220]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000994:	f003 0302 	and.w	r3, r3, #2
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800099c:	4b33      	ldr	r3, [pc, #204]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 800099e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009a2:	4a32      	ldr	r2, [pc, #200]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 80009a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009ac:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 80009ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB15     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009ba:	2332      	movs	r3, #50	; 0x32
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c6:	2302      	movs	r3, #2
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ca:	230b      	movs	r3, #11
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4826      	ldr	r0, [pc, #152]	; (8000a70 <HAL_ETH_MspInit+0x1ac>)
 80009d6:	f002 fb2d 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80009da:	2386      	movs	r3, #134	; 0x86
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e6:	2302      	movs	r3, #2
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ea:	230b      	movs	r3, #11
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	481f      	ldr	r0, [pc, #124]	; (8000a74 <HAL_ETH_MspInit+0x1b0>)
 80009f6:	f002 fb1d 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a0c:	230b      	movs	r3, #11
 8000a0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a14:	4619      	mov	r1, r3
 8000a16:	4818      	ldr	r0, [pc, #96]	; (8000a78 <HAL_ETH_MspInit+0x1b4>)
 8000a18:	f002 fb0c 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000a1c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a2e:	230b      	movs	r3, #11
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	4810      	ldr	r0, [pc, #64]	; (8000a7c <HAL_ETH_MspInit+0x1b8>)
 8000a3a:	f002 fafb 	bl	8003034 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2107      	movs	r1, #7
 8000a42:	206a      	movs	r0, #106	; 0x6a
 8000a44:	f000 fd22 	bl	800148c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000a48:	206a      	movs	r0, #106	; 0x6a
 8000a4a:	f000 fd39 	bl	80014c0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	206b      	movs	r0, #107	; 0x6b
 8000a54:	f000 fd1a 	bl	800148c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8000a58:	206b      	movs	r0, #107	; 0x6b
 8000a5a:	f000 fd31 	bl	80014c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3738      	adds	r7, #56	; 0x38
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40028000 	.word	0x40028000
 8000a6c:	44020c00 	.word	0x44020c00
 8000a70:	42020800 	.word	0x42020800
 8000a74:	42020000 	.word	0x42020000
 8000a78:	42020400 	.word	0x42020400
 8000a7c:	42021800 	.word	0x42021800

08000a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	; 0x38
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a88:	4b33      	ldr	r3, [pc, #204]	; (8000b58 <HAL_InitTick+0xd8>)
 8000a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a8e:	4a32      	ldr	r2, [pc, #200]	; (8000b58 <HAL_InitTick+0xd8>)
 8000a90:	f043 0310 	orr.w	r3, r3, #16
 8000a94:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000a98:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <HAL_InitTick+0xd8>)
 8000a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a9e:	f003 0310 	and.w	r3, r3, #16
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa6:	f107 020c 	add.w	r2, r7, #12
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f003 fbe3 	bl	800427c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d103      	bne.n	8000ac8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ac0:	f003 fbc6 	bl	8004250 <HAL_RCC_GetPCLK1Freq>
 8000ac4:	6378      	str	r0, [r7, #52]	; 0x34
 8000ac6:	e004      	b.n	8000ad2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ac8:	f003 fbc2 	bl	8004250 <HAL_RCC_GetPCLK1Freq>
 8000acc:	4603      	mov	r3, r0
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad4:	095b      	lsrs	r3, r3, #5
 8000ad6:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <HAL_InitTick+0xdc>)
 8000ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8000adc:	09db      	lsrs	r3, r3, #7
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <HAL_InitTick+0xe0>)
 8000ae4:	4a1f      	ldr	r2, [pc, #124]	; (8000b64 <HAL_InitTick+0xe4>)
 8000ae6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <HAL_InitTick+0xe0>)
 8000aea:	2263      	movs	r2, #99	; 0x63
 8000aec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aee:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <HAL_InitTick+0xe0>)
 8000af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <HAL_InitTick+0xe0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <HAL_InitTick+0xe0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000b00:	4817      	ldr	r0, [pc, #92]	; (8000b60 <HAL_InitTick+0xe0>)
 8000b02:	f003 fbf3 	bl	80042ec <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d118      	bne.n	8000b46 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b14:	4812      	ldr	r0, [pc, #72]	; (8000b60 <HAL_InitTick+0xe0>)
 8000b16:	f003 fc4b 	bl	80043b0 <HAL_TIM_Base_Start_IT>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10e      	bne.n	8000b46 <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b0f      	cmp	r3, #15
 8000b2c:	d808      	bhi.n	8000b40 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	6879      	ldr	r1, [r7, #4]
 8000b32:	2031      	movs	r0, #49	; 0x31
 8000b34:	f000 fcaa 	bl	800148c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b38:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <HAL_InitTick+0xe8>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	e002      	b.n	8000b46 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000b46:	2031      	movs	r0, #49	; 0x31
 8000b48:	f000 fcba 	bl	80014c0 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8000b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	44020c00 	.word	0x44020c00
 8000b5c:	0a7c5ac5 	.word	0x0a7c5ac5
 8000b60:	2001471c 	.word	0x2001471c
 8000b64:	40001000 	.word	0x40001000
 8000b68:	20000004 	.word	0x20000004

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <TIM6_IRQHandler+0x10>)
 8000b9e:	f003 fcb5 	bl	800450c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2001471c 	.word	0x2001471c

08000bac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <ETH_IRQHandler+0x10>)
 8000bb2:	f001 f831 	bl	8001c18 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20007e64 	.word	0x20007e64

08000bc0 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet Wakeup global interrupt.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <ETH_WKUP_IRQHandler+0x10>)
 8000bc6:	f001 f827 	bl	8001c18 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20007e64 	.word	0x20007e64

08000bd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return 1;
 8000bd8:	2301      	movs	r3, #1
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_kill>:

int _kill(int pid, int sig)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bee:	f00e fbdb 	bl	800f3a8 <__errno>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2216      	movs	r2, #22
 8000bf6:	601a      	str	r2, [r3, #0]
  return -1;
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_exit>:

void _exit (int status)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ffe7 	bl	8000be4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c16:	e7fe      	b.n	8000c16 <_exit+0x12>

08000c18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	e00a      	b.n	8000c40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c2a:	f3af 8000 	nop.w
 8000c2e:	4601      	mov	r1, r0
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	60ba      	str	r2, [r7, #8]
 8000c36:	b2ca      	uxtb	r2, r1
 8000c38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbf0      	blt.n	8000c2a <_read+0x12>
  }

  return len;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e009      	b.n	8000c78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf1      	blt.n	8000c64 <_write+0x12>
  }
  return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_close>:

int _close(int file)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb2:	605a      	str	r2, [r3, #4]
  return 0;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <_isatty>:

int _isatty(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <_sbrk+0x5c>)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <_sbrk+0x60>)
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <_sbrk+0x64>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <_sbrk+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d207      	bcs.n	8000d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d24:	f00e fb40 	bl	800f3a8 <__errno>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	e009      	b.n	8000d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <_sbrk+0x64>)
 8000d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200a0000 	.word	0x200a0000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	20014768 	.word	0x20014768
 8000d5c:	20015a70 	.word	0x20015a70

08000d60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d66:	4b35      	ldr	r3, [pc, #212]	; (8000e3c <SystemInit+0xdc>)
 8000d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6c:	4a33      	ldr	r2, [pc, #204]	; (8000e3c <SystemInit+0xdc>)
 8000d6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000d76:	4b32      	ldr	r3, [pc, #200]	; (8000e40 <SystemInit+0xe0>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000d7c:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <SystemInit+0xe0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000d82:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <SystemInit+0xe0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000d88:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <SystemInit+0xe0>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	492c      	ldr	r1, [pc, #176]	; (8000e40 <SystemInit+0xe0>)
 8000d8e:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <SystemInit+0xe4>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000d94:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <SystemInit+0xe0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000d9a:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <SystemInit+0xe0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000da0:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <SystemInit+0xe0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000da6:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <SystemInit+0xe0>)
 8000da8:	4a27      	ldr	r2, [pc, #156]	; (8000e48 <SystemInit+0xe8>)
 8000daa:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000dac:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <SystemInit+0xe0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000db2:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <SystemInit+0xe0>)
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <SystemInit+0xe8>)
 8000db6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000db8:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <SystemInit+0xe0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <SystemInit+0xe0>)
 8000dc0:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <SystemInit+0xe8>)
 8000dc2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <SystemInit+0xe0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <SystemInit+0xe0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a1c      	ldr	r2, [pc, #112]	; (8000e40 <SystemInit+0xe0>)
 8000dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <SystemInit+0xe0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <SystemInit+0xdc>)
 8000dde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000de2:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <SystemInit+0xec>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000dec:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000df4:	d003      	beq.n	8000dfe <SystemInit+0x9e>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000dfc:	d117      	bne.n	8000e2e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <SystemInit+0xec>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d005      	beq.n	8000e16 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <SystemInit+0xec>)
 8000e0c:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <SystemInit+0xf0>)
 8000e0e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <SystemInit+0xec>)
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <SystemInit+0xf4>)
 8000e14:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <SystemInit+0xec>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	4a0c      	ldr	r2, [pc, #48]	; (8000e4c <SystemInit+0xec>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <SystemInit+0xec>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <SystemInit+0xec>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	61d3      	str	r3, [r2, #28]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00
 8000e40:	44020c00 	.word	0x44020c00
 8000e44:	eae2eae3 	.word	0xeae2eae3
 8000e48:	01010280 	.word	0x01010280
 8000e4c:	40022000 	.word	0x40022000
 8000e50:	08192a3b 	.word	0x08192a3b
 8000e54:	4c5d6e7f 	.word	0x4c5d6e7f

08000e58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e5c:	f7ff ff80 	bl	8000d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e62:	490d      	ldr	r1, [pc, #52]	; (8000e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <LoopForever+0xe>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e78:	4c0a      	ldr	r4, [pc, #40]	; (8000ea4 <LoopForever+0x16>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e86:	f00e fa95 	bl	800f3b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e8a:	f7ff fb73 	bl	8000574 <main>

08000e8e <LoopForever>:

LoopForever:
    b LoopForever
 8000e8e:	e7fe      	b.n	8000e8e <LoopForever>
  ldr   r0, =_estack
 8000e90:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8000e9c:	08010320 	.word	0x08010320
  ldr r2, =_sbss
 8000ea0:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000ea4:	20015a6c 	.word	0x20015a6c

08000ea8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC1_IRQHandler>

08000eaa <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00b      	beq.n	8000ed2 <LAN8742_RegisterBusIO+0x28>
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d007      	beq.n	8000ed2 <LAN8742_RegisterBusIO+0x28>
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <LAN8742_RegisterBusIO+0x28>
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d102      	bne.n	8000ed8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e014      	b.n	8000f02 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d17c      	bne.n	8001028 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2220      	movs	r2, #32
 8000f40:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	e01c      	b.n	8000f82 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	f107 0208 	add.w	r2, r7, #8
 8000f50:	2112      	movs	r1, #18
 8000f52:	6978      	ldr	r0, [r7, #20]
 8000f54:	4798      	blx	r3
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	da03      	bge.n	8000f64 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000f5c:	f06f 0304 	mvn.w	r3, #4
 8000f60:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000f62:	e00b      	b.n	8000f7c <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	f003 031f 	and.w	r3, r3, #31
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d105      	bne.n	8000f7c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
         break;
 8000f7a:	e005      	b.n	8000f88 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2b1f      	cmp	r3, #31
 8000f86:	d9df      	bls.n	8000f48 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b1f      	cmp	r3, #31
 8000f8e:	d902      	bls.n	8000f96 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f90:	f06f 0302 	mvn.w	r3, #2
 8000f94:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d145      	bne.n	8001028 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6810      	ldr	r0, [r2, #0]
 8000fa4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4798      	blx	r3
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db37      	blt.n	8001022 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	6810      	ldr	r0, [r2, #0]
 8000fba:	f107 0208 	add.w	r2, r7, #8
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4798      	blx	r3
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db28      	blt.n	800101a <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4798      	blx	r3
 8000fce:	4603      	mov	r3, r0
 8000fd0:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000fd2:	e01c      	b.n	800100e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4798      	blx	r3
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fe6:	d80e      	bhi.n	8001006 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	6810      	ldr	r0, [r2, #0]
 8000ff0:	f107 0208 	add.w	r2, r7, #8
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4798      	blx	r3
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	da07      	bge.n	800100e <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8000ffe:	f06f 0304 	mvn.w	r3, #4
 8001002:	613b      	str	r3, [r7, #16]
                 break;
 8001004:	e010      	b.n	8001028 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001006:	f06f 0301 	mvn.w	r3, #1
 800100a:	613b      	str	r3, [r7, #16]
               break;
 800100c:	e00c      	b.n	8001028 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1dd      	bne.n	8000fd4 <LAN8742_Init+0xc6>
 8001018:	e006      	b.n	8001028 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800101a:	f06f 0304 	mvn.w	r3, #4
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	e002      	b.n	8001028 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001022:	f06f 0303 	mvn.w	r3, #3
 8001026:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d112      	bne.n	8001054 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	4798      	blx	r3
 8001034:	4603      	mov	r3, r0
 8001036:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001038:	bf00      	nop
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	4798      	blx	r3
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800104c:	d9f5      	bls.n	800103a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	605a      	str	r2, [r3, #4]
   }

   LAN8742_enable_wol(pObj);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 f88c 	bl	8001172 <LAN8742_enable_wol>

   return status;
 800105a:	693b      	ldr	r3, [r7, #16]
 }
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6810      	ldr	r0, [r2, #0]
 8001078:	f107 020c 	add.w	r2, r7, #12
 800107c:	2101      	movs	r1, #1
 800107e:	4798      	blx	r3
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	da02      	bge.n	800108c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001086:	f06f 0304 	mvn.w	r3, #4
 800108a:	e06e      	b.n	800116a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6810      	ldr	r0, [r2, #0]
 8001094:	f107 020c 	add.w	r2, r7, #12
 8001098:	2101      	movs	r1, #1
 800109a:	4798      	blx	r3
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	da02      	bge.n	80010a8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80010a2:	f06f 0304 	mvn.w	r3, #4
 80010a6:	e060      	b.n	800116a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e059      	b.n	800116a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	6810      	ldr	r0, [r2, #0]
 80010be:	f107 020c 	add.w	r2, r7, #12
 80010c2:	2100      	movs	r1, #0
 80010c4:	4798      	blx	r3
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	da02      	bge.n	80010d2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80010cc:	f06f 0304 	mvn.w	r3, #4
 80010d0:	e04b      	b.n	800116a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d11b      	bne.n	8001114 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d006      	beq.n	80010f4 <LAN8742_GetLinkState+0x90>
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010f0:	2302      	movs	r3, #2
 80010f2:	e03a      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010fe:	2303      	movs	r3, #3
 8001100:	e033      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800110c:	2304      	movs	r3, #4
 800110e:	e02c      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001110:	2305      	movs	r3, #5
 8001112:	e02a      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6810      	ldr	r0, [r2, #0]
 800111c:	f107 020c 	add.w	r2, r7, #12
 8001120:	211f      	movs	r1, #31
 8001122:	4798      	blx	r3
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	da02      	bge.n	8001130 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800112a:	f06f 0304 	mvn.w	r3, #4
 800112e:	e01c      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800113a:	2306      	movs	r3, #6
 800113c:	e015      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f003 031c 	and.w	r3, r3, #28
 8001144:	2b18      	cmp	r3, #24
 8001146:	d101      	bne.n	800114c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001148:	2302      	movs	r3, #2
 800114a:	e00e      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 031c 	and.w	r3, r3, #28
 8001152:	2b08      	cmp	r3, #8
 8001154:	d101      	bne.n	800115a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001156:	2303      	movs	r3, #3
 8001158:	e007      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f003 031c 	and.w	r3, r3, #28
 8001160:	2b14      	cmp	r3, #20
 8001162:	d101      	bne.n	8001168 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001164:	2304      	movs	r3, #4
 8001166:	e000      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001168:	2305      	movs	r3, #5
    }
  }
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <LAN8742_enable_wol>:
#define LAN8742_PME_ENABLE	((uint16_t)0x4000U)		/* Bit 14 to 1 to enable PME on Led1 (YELLOW) */
#define LAN8742_SELF_CLEAR	((uint16_t)0x0200U)		/* Bit 9 to 1 to enable self clear */
#define LAN8742_WOL_ENABLE	((uint16_t)0x0002U)		/* Bit 1 to 1 to enable wake on lan with magic packet */
#define LAN8742_MPR_RESET	((uint16_t)0x0020U)		/* The MAC sets this bit upon receiving a valid Magic Packet */

void LAN8742_enable_wol(lan8742_Object_t *pObj){
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 	 uint16_t val;

 	 val = LAN8742_PME_ENABLE;
 800117a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800117e:	81fb      	strh	r3, [r7, #14]
 	 val |= LAN8742_SELF_CLEAR;
 8001180:	89fb      	ldrh	r3, [r7, #14]
 8001182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001186:	81fb      	strh	r3, [r7, #14]
 	 val |= LAN8742_WOL_ENABLE;
 8001188:	89fb      	ldrh	r3, [r7, #14]
 800118a:	f043 0302 	orr.w	r3, r3, #2
 800118e:	81fb      	strh	r3, [r7, #14]
 	 val |= LAN8742_MPR_RESET;
 8001190:	89fb      	ldrh	r3, [r7, #14]
 8001192:	f043 0320 	orr.w	r3, r3, #32
 8001196:	81fb      	strh	r3, [r7, #14]
 	// abilitiamo anche il self clear ponendo il bit 9 a 1
 	// alzo il secondo bit a 1 per abilitare il wake on lan tramite magic packet
 	// alzo il bit Magic Packet Received (MPR) (bit 5)  a 1 per sollecitarne il reset
     // valore binario finale: 0100 0010 0010 0010
 	// hex: 0x4222
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_MMD_WOL_WUCSR, val);
 8001198:	89fb      	ldrh	r3, [r7, #14]
 800119a:	461a      	mov	r2, r3
 800119c:	f248 0110 	movw	r1, #32784	; 0x8010
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f82a 	bl	80011fa <LAN8742_write_mmd>


 	 val = 0x1000;
 80011a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011aa:	81fb      	strh	r3, [r7, #14]
 	// passo 1 impostiamo il tempo di reset per il self clear del bit PME
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_MCFGR, val);
 80011ac:	89fb      	ldrh	r3, [r7, #14]
 80011ae:	461a      	mov	r2, r3
 80011b0:	f248 0164 	movw	r1, #32868	; 0x8064
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f820 	bl	80011fa <LAN8742_write_mmd>

 	 // imposto i registri ADDR per riconoscere il MAC nel magic packet
 	 // assumento che il MAC sia 00:80:E1:00:00:00

 	 // registro A:
 	 uint16_t A = 0x0000;
 80011ba:	2300      	movs	r3, #0
 80011bc:	81bb      	strh	r3, [r7, #12]
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_RX_ADDRA, A);
 80011be:	89bb      	ldrh	r3, [r7, #12]
 80011c0:	461a      	mov	r2, r3
 80011c2:	f248 0161 	movw	r1, #32865	; 0x8061
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f817 	bl	80011fa <LAN8742_write_mmd>
 	 // registro B:
 	 uint16_t B = 0x00E1;
 80011cc:	23e1      	movs	r3, #225	; 0xe1
 80011ce:	817b      	strh	r3, [r7, #10]
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_RX_ADDRB, B);
 80011d0:	897b      	ldrh	r3, [r7, #10]
 80011d2:	461a      	mov	r2, r3
 80011d4:	f248 0162 	movw	r1, #32866	; 0x8062
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f80e 	bl	80011fa <LAN8742_write_mmd>
 	 // registro C:
 	 uint16_t C = 0x8000;
 80011de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011e2:	813b      	strh	r3, [r7, #8]
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_RX_ADDRC, C);
 80011e4:	893b      	ldrh	r3, [r7, #8]
 80011e6:	461a      	mov	r2, r3
 80011e8:	f248 0163 	movw	r1, #32867	; 0x8063
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f804 	bl	80011fa <LAN8742_write_mmd>
  }
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <LAN8742_write_mmd>:
  * @param pObj: device object LAN8742_Object_t.
  * @param target: address to write in.
  * @param content: content to write in target register
  *
  * */
 void LAN8742_write_mmd(lan8742_Object_t *pObj, uint16_t target, uint16_t content){
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b084      	sub	sp, #16
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	807b      	strh	r3, [r7, #2]
 8001206:	4613      	mov	r3, r2
 8001208:	803b      	strh	r3, [r7, #0]

	 // Imposta funzione: bit 14-15 a 00 (MMD_ADDRESS)
	 uint16_t val = 0x00;
 800120a:	2300      	movs	r3, #0
 800120c:	81fb      	strh	r3, [r7, #14]

	 // imposto l'indirizzo del dispositivo (bit 0-4) a 00011 (3)
	 val |= 0x03;
 800120e:	89fb      	ldrh	r3, [r7, #14]
 8001210:	f043 0303 	orr.w	r3, r3, #3
 8001214:	81fb      	strh	r3, [r7, #14]

	 // scrivo nel registro Access control register
	 pObj->IO.WriteReg(pObj->DevAddr, LAN8742_MMDACR, val);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6810      	ldr	r0, [r2, #0]
 800121e:	89fa      	ldrh	r2, [r7, #14]
 8001220:	210d      	movs	r1, #13
 8001222:	4798      	blx	r3

	 // scrivo nel registro MMD ACCESS ADDRESS/DATA REGISTER l'indirizzo del registro target della scrittura
	 pObj->IO.WriteReg(pObj->DevAddr, LAN8742_MMDAADR, target);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6810      	ldr	r0, [r2, #0]
 800122c:	887a      	ldrh	r2, [r7, #2]
 800122e:	210e      	movs	r1, #14
 8001230:	4798      	blx	r3

	 //------------ scrittura inizializzata --------------

	 //imposta funzione: bit 14-15 a 01
	 val = LAN8742_MMDACR_MMD_FUNCTION_DATA; // 0x4000U
 8001232:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001236:	81fb      	strh	r3, [r7, #14]
	 val |= 0x03;
 8001238:	89fb      	ldrh	r3, [r7, #14]
 800123a:	f043 0303 	orr.w	r3, r3, #3
 800123e:	81fb      	strh	r3, [r7, #14]

	 // scrivo nel registro Access control register
	 pObj->IO.WriteReg(pObj->DevAddr, LAN8742_MMDACR, val);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	6810      	ldr	r0, [r2, #0]
 8001248:	89fa      	ldrh	r2, [r7, #14]
 800124a:	210d      	movs	r1, #13
 800124c:	4798      	blx	r3

	 // scrivo nel registro MMD ACCESS ADDRESS/DATA REGISTER i dati da inviare
	 pObj->IO.WriteReg(pObj->DevAddr, LAN8742_MMDAADR, content);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6810      	ldr	r0, [r2, #0]
 8001256:	883a      	ldrh	r2, [r7, #0]
 8001258:	210e      	movs	r1, #14
 800125a:	4798      	blx	r3
 }
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 f904 	bl	8001476 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800126e:	f002 fea7 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 8001272:	4602      	mov	r2, r0
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_Init+0x40>)
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	f003 030f 	and.w	r3, r3, #15
 800127c:	490a      	ldr	r1, [pc, #40]	; (80012a8 <HAL_Init+0x44>)
 800127e:	5ccb      	ldrb	r3, [r1, r3]
 8001280:	fa22 f303 	lsr.w	r3, r2, r3
 8001284:	4a09      	ldr	r2, [pc, #36]	; (80012ac <HAL_Init+0x48>)
 8001286:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001288:	200f      	movs	r0, #15
 800128a:	f7ff fbf9 	bl	8000a80 <HAL_InitTick>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e002      	b.n	800129e <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001298:	f7ff fb0d 	bl	80008b6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	44020c00 	.word	0x44020c00
 80012a8:	08010220 	.word	0x08010220
 80012ac:	20000000 	.word	0x20000000

080012b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_IncTick+0x20>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x24>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_IncTick+0x24>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000008 	.word	0x20000008
 80012d4:	2001476c 	.word	0x2001476c

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	2001476c 	.word	0x2001476c

080012f0 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <HAL_SBS_ETHInterfaceSelect+0x28>)
 80012fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80012fe:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001302:	4905      	ldr	r1, [pc, #20]	; (8001318 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4313      	orrs	r3, r2
 8001308:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	44000400 	.word	0x44000400

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ff4c 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800149a:	f7ff ff63 	bl	8001364 <__NVIC_GetPriorityGrouping>
 800149e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	6978      	ldr	r0, [r7, #20]
 80014a6:	f7ff ffb3 	bl	8001410 <NVIC_EncodePriority>
 80014aa:	4602      	mov	r2, r0
 80014ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff82 	bl	80013bc <__NVIC_SetPriority>
}
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff56 	bl	8001380 <__NVIC_EnableIRQ>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e0d2      	b.n	8001694 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d106      	bne.n	8001506 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2223      	movs	r2, #35	; 0x23
 80014fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff f9df 	bl	80008c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 8001506:	4b65      	ldr	r3, [pc, #404]	; (800169c <HAL_ETH_Init+0x1c0>)
 8001508:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800150c:	4a63      	ldr	r2, [pc, #396]	; (800169c <HAL_ETH_Init+0x1c0>)
 800150e:	f043 0302 	orr.w	r3, r3, #2
 8001512:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001516:	4b61      	ldr	r3, [pc, #388]	; (800169c <HAL_ETH_Init+0x1c0>)
 8001518:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7a1b      	ldrb	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d103      	bne.n	8001534 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff fedf 	bl	80012f0 <HAL_SBS_ETHInterfaceSelect>
 8001532:	e003      	b.n	800153c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 8001534:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001538:	f7ff feda 	bl	80012f0 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 800153c:	4b58      	ldr	r3, [pc, #352]	; (80016a0 <HAL_ETH_Init+0x1c4>)
 800153e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001558:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800155a:	f7ff febd 	bl	80012d8 <HAL_GetTick>
 800155e:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001560:	e011      	b.n	8001586 <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001562:	f7ff feb9 	bl	80012d8 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001570:	d909      	bls.n	8001586 <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2204      	movs	r2, #4
 8001576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	22e0      	movs	r2, #224	; 0xe0
 800157e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e086      	b.n	8001694 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1e4      	bne.n	8001562 <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 ff25 	bl	80023e8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800159e:	f002 fe3b 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4a3f      	ldr	r2, [pc, #252]	; (80016a4 <HAL_ETH_Init+0x1c8>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	0c9a      	lsrs	r2, r3, #18
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3a01      	subs	r2, #1
 80015b2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f001 f96c 	bl	8002894 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80015c8:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015d8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d009      	beq.n	80015fc <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	22e0      	movs	r2, #224	; 0xe0
 80015f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e04b      	b.n	8001694 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001604:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001608:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800160c:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6952      	ldr	r2, [r2, #20]
 8001614:	0051      	lsls	r1, r2, #1
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	430b      	orrs	r3, r1
 800161c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001620:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f001 f9d2 	bl	80029ce <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f001 fa18 	bl	8002a60 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	3305      	adds	r3, #5
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	021a      	lsls	r2, r3, #8
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	3304      	adds	r3, #4
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	4619      	mov	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	3303      	adds	r3, #3
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	061a      	lsls	r2, r3, #24
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	3302      	adds	r3, #2
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	041b      	lsls	r3, r3, #16
 8001662:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	3301      	adds	r3, #1
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800166e:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800167c:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800167e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2210      	movs	r2, #16
 800168e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	44020c00 	.word	0x44020c00
 80016a0:	44000400 	.word	0x44000400
 80016a4:	431bde83 	.word	0x431bde83

080016a8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	d17c      	bne.n	80017b4 <HAL_ETH_Start_IT+0x10c>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2223      	movs	r2, #35	; 0x23
 80016be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <HAL_ETH_Start_IT+0x118>)
 80016d6:	430b      	orrs	r3, r1
 80016d8:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	f043 6342 	orr.w	r3, r3, #203423744	; 0xc200000
 80016ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016f0:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2204      	movs	r2, #4
 80016f8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f9c3 	bl	8001a86 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0202 	orr.w	r2, r2, #2
 800170e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0201 	orr.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f042 0201 	orr.w	r2, r2, #1
 8001730:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800174c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001758:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001768:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001774:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001780:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001784:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001790:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	f443 4350 	orr.w	r3, r3, #53248	; 0xd000
 800179c:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 80017a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017a4:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2223      	movs	r2, #35	; 0x23
 80017ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e000      	b.n	80017b6 <HAL_ETH_Start_IT+0x10e>
  }
  else
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
  }
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	0c020060 	.word	0x0c020060

080017c4 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017d2:	2b23      	cmp	r3, #35	; 0x23
 80017d4:	d13f      	bne.n	8001856 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2223      	movs	r2, #35	; 0x23
 80017da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017f6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001802:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	f023 0301 	bic.w	r3, r3, #1
 800180e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001812:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0201 	bic.w	r2, r2, #1
 8001824:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0202 	bic.w	r2, r2, #2
 8001848:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2210      	movs	r2, #16
 800184e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
  }
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d109      	bne.n	8001888 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800187a:	f043 0201 	orr.w	r2, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e03a      	b.n	80018fe <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800188e:	2b23      	cmp	r3, #35	; 0x23
 8001890:	d134      	bne.n	80018fc <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800189a:	2201      	movs	r2, #1
 800189c:	6839      	ldr	r1, [r7, #0]
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f001 f93b 	bl	8002b1a <ETH_Prepare_Tx_Descriptors>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b0:	f043 0202 	orr.w	r2, r3, #2
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e01f      	b.n	80018fe <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80018be:	f3bf 8f4f 	dsb	sy
}
 80018c2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d904      	bls.n	80018e0 <HAL_ETH_Transmit_IT+0x7c>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	1f1a      	subs	r2, r3, #4
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3106      	adds	r1, #6
 80018ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018f4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	e000      	b.n	80018fe <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
  }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b088      	sub	sp, #32
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001924:	f043 0201 	orr.w	r2, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0a5      	b.n	8001a7e <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001938:	2b23      	cmp	r3, #35	; 0x23
 800193a:	d001      	beq.n	8001940 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e09e      	b.n	8001a7e <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001944:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	3212      	adds	r2, #18
 800194c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001950:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001956:	f1c3 0304 	rsb	r3, r3, #4
 800195a:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800195c:	e067      	b.n	8001a2e <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d007      	beq.n	800197a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d103      	bne.n	800198e <HAL_ETH_ReadData+0x88>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800198a:	2b00      	cmp	r3, #0
 800198c:	d03d      	beq.n	8001a0a <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00d      	beq.n	80019d4 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019e4:	461a      	mov	r2, r3
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f003 fe29 	bl	8005640 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	441a      	add	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d902      	bls.n	8001a1c <HAL_ETH_ReadData+0x116>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b04      	subs	r3, #4
 8001a1a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	3212      	adds	r2, #18
 8001a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a26:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db06      	blt.n	8001a44 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d202      	bcs.n	8001a44 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d08c      	beq.n	800195e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	441a      	add	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f814 	bl	8001a86 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d108      	bne.n	8001a7c <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e000      	b.n	8001a7e <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3720      	adds	r7, #32
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b088      	sub	sp, #32
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001a92:	2301      	movs	r3, #1
 8001a94:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a9a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	3212      	adds	r2, #18
 8001aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa6:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001aac:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001aae:	e03b      	b.n	8001b28 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d112      	bne.n	8001ade <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 fd9d 	bl	80055fc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	74fb      	strb	r3, [r7, #19]
 8001acc:	e007      	b.n	8001ade <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001ade:	7cfb      	ldrb	r3, [r7, #19]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d021      	beq.n	8001b28 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001ae4:	f3bf 8f5f 	dmb	sy
}
 8001ae8:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d004      	beq.n	8001afc <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	e003      	b.n	8001b04 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001b02:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	3301      	adds	r3, #1
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d902      	bls.n	8001b16 <ETH_UpdateDescriptor+0x90>
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	3b04      	subs	r3, #4
 8001b14:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	3212      	adds	r2, #18
 8001b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b20:	617b      	str	r3, [r7, #20]
      desccount--;
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <ETH_UpdateDescriptor+0xae>
 8001b2e:	7cfb      	ldrb	r3, [r7, #19]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1bd      	bne.n	8001ab0 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d00d      	beq.n	8001b5a <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0U);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b46:	461a      	mov	r2, r3
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	3720      	adds	r7, #32
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3318      	adds	r3, #24
 8001b6e:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b80:	e03f      	b.n	8001c02 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001b82:	2301      	movs	r3, #1
 8001b84:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	3304      	adds	r3, #4
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d106      	bne.n	8001baa <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001baa:	7bbb      	ldrb	r3, [r7, #14]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d028      	beq.n	8001c02 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68d9      	ldr	r1, [r3, #12]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db1b      	blt.n	8001bfe <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 fcdc 	bl	8005590 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	2200      	movs	r2, #0
 8001be4:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	3301      	adds	r3, #1
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bfc:	e001      	b.n	8001c02 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HAL_ETH_ReleaseTxPacket+0xac>
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1b9      	bne.n	8001b82 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;

  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c28:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c30:	2b40      	cmp	r3, #64	; 0x40
 8001c32:	d115      	bne.n	8001c60 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c44:	2b40      	cmp	r3, #64	; 0x40
 8001c46:	d10b      	bne.n	8001c60 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c50:	461a      	mov	r2, r3
 8001c52:	f248 0340 	movw	r3, #32832	; 0x8040
 8001c56:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f003 fd32 	bl	80056c4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c68:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d115      	bne.n	8001ca0 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d10b      	bne.n	8001ca0 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c90:	461a      	mov	r2, r3
 8001c92:	f248 0301 	movw	r3, #32769	; 0x8001
 8001c96:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f003 fd2e 	bl	80056fc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cb4:	d153      	bne.n	8001d5e <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cca:	d148      	bne.n	8001d5e <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd2:	f043 0208 	orr.w	r2, r3, #8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf0:	d11e      	bne.n	8001d30 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cfa:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001cfe:	f241 1302 	movw	r3, #4354	; 0x1102
 8001d02:	4013      	ands	r3, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d12:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d22:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	22e0      	movs	r2, #224	; 0xe0
 8001d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001d2e:	e013      	b.n	8001d58 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d38:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001d3c:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001d54:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f86d 	bl	8001e38 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d66:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d104      	bne.n	8001d7c <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d019      	beq.n	8001db0 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	f043 0210 	orr.w	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	22e0      	movs	r2, #224	; 0xe0
 8001d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f848 	bl	8001e38 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d10f      	bne.n	8001de0 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001dc8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f83a 	bl	8001e4c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001de8:	f003 0320 	and.w	r3, r3, #32
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	d10f      	bne.n	8001e10 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001df8:	f003 020f 	and.w	r2, r3, #15
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f82c 	bl	8001e60 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_ETH_IRQHandler+0x21c>)
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_ETH_IRQHandler+0x21c>)
 8001e1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e22:	62da      	str	r2, [r3, #44]	; 0x2c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f825 	bl	8001e74 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	44022000 	.word	0x44022000

08001e38 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e03e      	b.n	8001f28 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eb2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	055b      	lsls	r3, r3, #21
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	041b      	lsls	r3, r3, #16
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f043 030c 	orr.w	r3, r3, #12
 8001ed6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001eea:	f7ff f9f5 	bl	80012d8 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001ef0:	e009      	b.n	8001f06 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001ef2:	f7ff f9f1 	bl	80012d8 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f00:	d901      	bls.n	8001f06 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e010      	b.n	8001f28 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1ed      	bne.n	8001ef2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e03c      	b.n	8001fcc <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f5a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	055b      	lsls	r3, r3, #21
 8001f66:	4313      	orrs	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	041b      	lsls	r3, r3, #16
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f023 030c 	bic.w	r3, r3, #12
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <HAL_ETH_WritePHYRegister+0xa4>)
 8001f92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001f96:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <HAL_ETH_WritePHYRegister+0xa4>)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001f9e:	f7ff f99b 	bl	80012d8 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001fa4:	e009      	b.n	8001fba <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001fa6:	f7ff f997 	bl	80012d8 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fb4:	d901      	bls.n	8001fba <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e008      	b.n	8001fcc <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ed      	bne.n	8001fa6 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40028000 	.word	0x40028000

08001fd8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e1c3      	b.n	8002374 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 020c 	and.w	r2, r3, #12
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf14      	ite	ne
 8002008:	2301      	movne	r3, #1
 800200a:	2300      	moveq	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	bf0c      	ite	eq
 8002032:	2301      	moveq	r3, #1
 8002034:	2300      	movne	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 800204a:	2b00      	cmp	r3, #0
 800204c:	bf14      	ite	ne
 800204e:	2301      	movne	r3, #1
 8002050:	2300      	moveq	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800207a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800207e:	2b00      	cmp	r3, #0
 8002080:	bf14      	ite	ne
 8002082:	2301      	movne	r3, #1
 8002084:	2300      	moveq	r3, #0
 8002086:	b2db      	uxtb	r3, r3
 8002088:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf14      	ite	ne
 800209c:	2301      	movne	r3, #1
 800209e:	2300      	moveq	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf14      	ite	ne
 80020d2:	2301      	movne	r3, #1
 80020d4:	2300      	moveq	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002102:	2b00      	cmp	r3, #0
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf14      	ite	ne
 8002120:	2301      	movne	r3, #1
 8002122:	2300      	moveq	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf14      	ite	ne
 800213a:	2301      	movne	r3, #1
 800213c:	2300      	moveq	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002150:	2b00      	cmp	r3, #0
 8002152:	bf14      	ite	ne
 8002154:	2301      	movne	r3, #1
 8002156:	2300      	moveq	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800216a:	2b00      	cmp	r3, #0
 800216c:	bf14      	ite	ne
 800216e:	2301      	movne	r3, #1
 8002170:	2300      	moveq	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	bf14      	ite	ne
 8002196:	2301      	movne	r3, #1
 8002198:	2300      	moveq	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf14      	ite	ne
 80021e8:	2301      	movne	r3, #1
 80021ea:	2300      	moveq	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80021fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf14      	ite	ne
 8002220:	2301      	movne	r3, #1
 8002222:	2300      	moveq	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	0e5b      	lsrs	r3, r3, #25
 8002236:	f003 021f 	and.w	r2, r3, #31
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	63da      	str	r2, [r3, #60]	; 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 020f 	and.w	r2, r3, #15
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	bf14      	ite	ne
 8002276:	2301      	movne	r3, #1
 8002278:	2300      	moveq	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228e:	2b00      	cmp	r3, #0
 8002290:	bf0c      	ite	eq
 8002292:	2301      	moveq	r3, #1
 8002294:	2300      	movne	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	0c1b      	lsrs	r3, r3, #16
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf14      	ite	ne
 80022cc:	2301      	movne	r3, #1
 80022ce:	2300      	moveq	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf14      	ite	ne
 80022ea:	2301      	movne	r3, #1
 80022ec:	2300      	moveq	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002300:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002310:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf14      	ite	ne
 8002328:	2301      	movne	r3, #1
 800232a:	2300      	moveq	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b00      	cmp	r3, #0
 8002344:	bf14      	ite	ne
 8002346:	2301      	movne	r3, #1
 8002348:	2300      	moveq	r3, #0
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800235c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e00b      	b.n	80023ac <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800239a:	2b10      	cmp	r3, #16
 800239c:	d105      	bne.n	80023aa <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800239e:	6839      	ldr	r1, [r7, #0]
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f8d5 	bl	8002550 <ETH_SetMACConfig>

    return HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e000      	b.n	80023ac <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
  }
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e00b      	b.n	80023e0 <HAL_ETH_SetDMAConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ce:	2b10      	cmp	r3, #16
 80023d0:	d105      	bne.n	80023de <HAL_ETH_SetDMAConfig+0x2a>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 80023d2:	6839      	ldr	r1, [r7, #0]
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f9d7 	bl	8002788 <ETH_SetDMAConfig>

    return HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	e000      	b.n	80023e0 <HAL_ETH_SetDMAConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
  }
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023f8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002400:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002402:	f001 ff09 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 8002406:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4a25      	ldr	r2, [pc, #148]	; (80024a0 <HAL_ETH_SetMDIOClockRange+0xb8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d908      	bls.n	8002422 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4a24      	ldr	r2, [pc, #144]	; (80024a4 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d804      	bhi.n	8002422 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e034      	b.n	800248c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	4a1f      	ldr	r2, [pc, #124]	; (80024a4 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d908      	bls.n	800243c <HAL_ETH_SetMDIOClockRange+0x54>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <HAL_ETH_SetMDIOClockRange+0xc0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d204      	bcs.n	800243c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	e027      	b.n	800248c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4a1a      	ldr	r2, [pc, #104]	; (80024a8 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d303      	bcc.n	800244c <HAL_ETH_SetMDIOClockRange+0x64>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4a19      	ldr	r2, [pc, #100]	; (80024ac <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d91e      	bls.n	800248a <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4a17      	ldr	r2, [pc, #92]	; (80024ac <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d908      	bls.n	8002466 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4a16      	ldr	r2, [pc, #88]	; (80024b0 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d804      	bhi.n	8002466 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	e012      	b.n	800248c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4a11      	ldr	r2, [pc, #68]	; (80024b0 <HAL_ETH_SetMDIOClockRange+0xc8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d908      	bls.n	8002480 <HAL_ETH_SetMDIOClockRange+0x98>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4a10      	ldr	r2, [pc, #64]	; (80024b4 <HAL_ETH_SetMDIOClockRange+0xcc>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d804      	bhi.n	8002480 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	e005      	b.n	800248c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	e000      	b.n	800248c <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800248a:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	01312cff 	.word	0x01312cff
 80024a4:	02160ebf 	.word	0x02160ebf
 80024a8:	03938700 	.word	0x03938700
 80024ac:	05f5e0ff 	.word	0x05f5e0ff
 80024b0:	08f0d17f 	.word	0x08f0d17f
 80024b4:	0ee6b280 	.word	0x0ee6b280

080024b8 <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, const ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;

  if (pFilterConfig == NULL)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e039      	b.n	8002540 <HAL_ETH_SetMACFilterConfig+0x88>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	78db      	ldrb	r3, [r3, #3]
 80024d6:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80024d8:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	791b      	ldrb	r3, [r3, #4]
 80024de:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80024e0:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	7a1b      	ldrb	r3, [r3, #8]
 80024e6:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80024e8:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	795b      	ldrb	r3, [r3, #5]
 80024ee:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 80024f0:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	7a52      	ldrb	r2, [r2, #9]
 80024f6:	2a00      	cmp	r2, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ETH_SetMACFilterConfig+0x46>
 80024fa:	2220      	movs	r2, #32
 80024fc:	e000      	b.n	8002500 <HAL_ETH_SetMACFilterConfig+0x48>
 80024fe:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8002500:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	79db      	ldrb	r3, [r3, #7]
 8002506:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8002508:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	799b      	ldrb	r3, [r3, #6]
 800250e:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8002510:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	789b      	ldrb	r3, [r3, #2]
 8002516:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8002518:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	785b      	ldrb	r3, [r3, #1]
 800251e:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8002520:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_ETH_SetMACFilterConfig+0x94>)
 8002532:	4013      	ands	r3, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	68f9      	ldr	r1, [r7, #12]
 800253a:	430b      	orrs	r3, r1
 800253c:	6093      	str	r3, [r2, #8]

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	7ffff800 	.word	0x7ffff800

08002550 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002562:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	791b      	ldrb	r3, [r3, #4]
 8002568:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800256a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	7b1b      	ldrb	r3, [r3, #12]
 8002570:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002572:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	7b5b      	ldrb	r3, [r3, #13]
 8002578:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800257a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	7b9b      	ldrb	r3, [r3, #14]
 8002580:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002582:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	7bdb      	ldrb	r3, [r3, #15]
 8002588:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800258a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	7c12      	ldrb	r2, [r2, #16]
 8002590:	2a00      	cmp	r2, #0
 8002592:	d102      	bne.n	800259a <ETH_SetMACConfig+0x4a>
 8002594:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002598:	e000      	b.n	800259c <ETH_SetMACConfig+0x4c>
 800259a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800259c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	7c52      	ldrb	r2, [r2, #17]
 80025a2:	2a00      	cmp	r2, #0
 80025a4:	d102      	bne.n	80025ac <ETH_SetMACConfig+0x5c>
 80025a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025aa:	e000      	b.n	80025ae <ETH_SetMACConfig+0x5e>
 80025ac:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80025ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	7c9b      	ldrb	r3, [r3, #18]
 80025b4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025b6:	431a      	orrs	r2, r3
               macconf->Speed |
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80025bc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80025c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	7f1b      	ldrb	r3, [r3, #28]
 80025c8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80025ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	7f5b      	ldrb	r3, [r3, #29]
 80025d0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80025d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	7f92      	ldrb	r2, [r2, #30]
 80025d8:	2a00      	cmp	r2, #0
 80025da:	d102      	bne.n	80025e2 <ETH_SetMACConfig+0x92>
 80025dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025e0:	e000      	b.n	80025e4 <ETH_SetMACConfig+0x94>
 80025e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80025e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	7fdb      	ldrb	r3, [r3, #31]
 80025ea:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80025ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80025f4:	2a00      	cmp	r2, #0
 80025f6:	d102      	bne.n	80025fe <ETH_SetMACConfig+0xae>
 80025f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025fc:	e000      	b.n	8002600 <ETH_SetMACConfig+0xb0>
 80025fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002600:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002606:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800260e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002610:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b57      	ldr	r3, [pc, #348]	; (8002780 <ETH_SetMACConfig+0x230>)
 8002622:	4013      	ands	r3, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	68f9      	ldr	r1, [r7, #12]
 800262a:	430b      	orrs	r3, r1
 800262c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800263a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800263c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002644:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002646:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800264e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002650:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002658:	2a00      	cmp	r2, #0
 800265a:	d102      	bne.n	8002662 <ETH_SetMACConfig+0x112>
 800265c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002660:	e000      	b.n	8002664 <ETH_SetMACConfig+0x114>
 8002662:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002664:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4b43      	ldr	r3, [pc, #268]	; (8002784 <ETH_SetMACConfig+0x234>)
 8002676:	4013      	ands	r3, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	68f9      	ldr	r1, [r7, #12]
 800267e:	430b      	orrs	r3, r1
 8002680:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002688:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	68f9      	ldr	r1, [r7, #12]
 80026a6:	430b      	orrs	r3, r1
 80026a8:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80026b0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026b6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80026be:	2a00      	cmp	r2, #0
 80026c0:	d101      	bne.n	80026c6 <ETH_SetMACConfig+0x176>
 80026c2:	2280      	movs	r2, #128	; 0x80
 80026c4:	e000      	b.n	80026c8 <ETH_SetMACConfig+0x178>
 80026c6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80026c8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ce:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026da:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80026de:	4013      	ands	r3, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	68f9      	ldr	r1, [r7, #12]
 80026e6:	430b      	orrs	r3, r1
 80026e8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80026f0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80026f8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	f023 0103 	bic.w	r1, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	430a      	orrs	r2, r1
 8002712:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800271e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800273a:	2a00      	cmp	r2, #0
 800273c:	d101      	bne.n	8002742 <ETH_SetMACConfig+0x1f2>
 800273e:	2240      	movs	r2, #64	; 0x40
 8002740:	e000      	b.n	8002744 <ETH_SetMACConfig+0x1f4>
 8002742:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002744:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800274c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800274e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002756:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002758:	4313      	orrs	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002764:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	430a      	orrs	r2, r1
 8002770:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	00048083 	.word	0x00048083
 8002784:	c0f88000 	.word	0xc0f88000

08002788 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80027a0:	f023 0302 	bic.w	r3, r3, #2
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	6811      	ldr	r1, [r2, #0]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	430b      	orrs	r3, r1
 80027ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027b2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	791b      	ldrb	r3, [r3, #4]
 80027b8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027be:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	7b1b      	ldrb	r3, [r3, #12]
 80027c4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	68f9      	ldr	r1, [r7, #12]
 80027e2:	430b      	orrs	r3, r1
 80027e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027e8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	7b5b      	ldrb	r3, [r3, #13]
 80027ee:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002800:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002804:	4b21      	ldr	r3, [pc, #132]	; (800288c <ETH_SetDMAConfig+0x104>)
 8002806:	4013      	ands	r3, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	68f9      	ldr	r1, [r7, #12]
 800280e:	430b      	orrs	r3, r1
 8002810:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002814:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	7d1b      	ldrb	r3, [r3, #20]
 8002820:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002822:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	7f5b      	ldrb	r3, [r3, #29]
 8002828:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002836:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <ETH_SetDMAConfig+0x108>)
 800283c:	4013      	ands	r3, r2
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	68f9      	ldr	r1, [r7, #12]
 8002844:	430b      	orrs	r3, r1
 8002846:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800284a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	7f1b      	ldrb	r3, [r3, #28]
 8002852:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002864:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002868:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800286c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	68f9      	ldr	r1, [r7, #12]
 8002876:	430b      	orrs	r3, r1
 8002878:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800287c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	fffec000 	.word	0xfffec000
 8002890:	ffc0efef 	.word	0xffc0efef

08002894 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b0a4      	sub	sp, #144	; 0x90
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800289c:	2301      	movs	r3, #1
 800289e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028a2:	2300      	movs	r3, #0
 80028a4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80028b8:	2301      	movs	r3, #1
 80028ba:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028d4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80028ec:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80028f0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80028f8:	2300      	movs	r3, #0
 80028fa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800290e:	2300      	movs	r3, #0
 8002910:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002912:	2300      	movs	r3, #0
 8002914:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002916:	2300      	movs	r3, #0
 8002918:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800291a:	2300      	movs	r3, #0
 800291c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002920:	2300      	movs	r3, #0
 8002922:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002926:	2301      	movs	r3, #1
 8002928:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800292c:	2320      	movs	r3, #32
 800292e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002932:	2301      	movs	r3, #1
 8002934:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002938:	2300      	movs	r3, #0
 800293a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800293e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002944:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002948:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002950:	2302      	movs	r3, #2
 8002952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002956:	2300      	movs	r3, #0
 8002958:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800295c:	2300      	movs	r3, #0
 800295e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002968:	2301      	movs	r3, #1
 800296a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800296e:	2300      	movs	r3, #0
 8002970:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff fde6 	bl	8002550 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002984:	2301      	movs	r3, #1
 8002986:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002988:	2301      	movs	r3, #1
 800298a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002990:	2300      	movs	r3, #0
 8002992:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800299a:	2300      	movs	r3, #0
 800299c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800299e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029ac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80029b4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80029b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029ba:	f107 0308 	add.w	r3, r7, #8
 80029be:	4619      	mov	r1, r3
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff fee1 	bl	8002788 <ETH_SetDMAConfig>
}
 80029c6:	bf00      	nop
 80029c8:	3790      	adds	r7, #144	; 0x90
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	e01d      	b.n	8002a18 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68d9      	ldr	r1, [r3, #12]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	440b      	add	r3, r1
 80029ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2200      	movs	r2, #0
 80029f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2200      	movs	r2, #0
 8002a04:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	3206      	adds	r2, #6
 8002a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	3301      	adds	r3, #1
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d9de      	bls.n	80029dc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2303      	movs	r3, #3
 8002a30:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a40:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a50:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e023      	b.n	8002ab6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6919      	ldr	r1, [r3, #16]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	440b      	add	r3, r1
 8002a7e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2200      	movs	r2, #0
 8002a96:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	3212      	adds	r2, #18
 8002aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d9d8      	bls.n	8002a6e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b0a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b08d      	sub	sp, #52	; 0x34
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	3318      	adds	r3, #24
 8002b2a:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b44:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b5c:	d007      	beq.n	8002b6e <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b62:	3304      	adds	r3, #4
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e25a      	b.n	8003028 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d044      	beq.n	8002c08 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	0c1b      	lsrs	r3, r3, #16
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002baa:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d027      	beq.n	8002c08 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	431a      	orrs	r2, r3
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bf6:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c06:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d010      	beq.n	8002c36 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	6992      	ldr	r2, [r2, #24]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d105      	bne.n	8002c4e <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d036      	beq.n	8002cbc <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c5a:	f3bf 8f5f 	dmb	sy
}
 8002c5e:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6e:	3301      	adds	r3, #1
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d902      	bls.n	8002c7e <ETH_Prepare_Tx_Descriptors+0x164>
 8002c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7a:	3b04      	subs	r3, #4
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c86:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c9a:	d10f      	bne.n	8002cbc <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ca6:	f3bf 8f5f 	dmb	sy
}
 8002caa:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e1b5      	b.n	8003028 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cd8:	69fa      	ldr	r2, [r7, #28]
 8002cda:	6852      	ldr	r2, [r2, #4]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d014      	beq.n	8002d14 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002d02:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	6852      	ldr	r2, [r2, #4]
 8002d0a:	0412      	lsls	r2, r2, #16
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	609a      	str	r2, [r3, #8]
 8002d12:	e00a      	b.n	8002d2a <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	2200      	movs	r2, #0
 8002d18:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002d22:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002d26:	6a3a      	ldr	r2, [r7, #32]
 8002d28:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d019      	beq.n	8002d6a <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	04db      	lsls	r3, r3, #19
 8002d44:	431a      	orrs	r2, r3
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	0c9b      	lsrs	r3, r3, #18
 8002d50:	049b      	lsls	r3, r3, #18
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	69d2      	ldr	r2, [r2, #28]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	60da      	str	r2, [r3, #12]
 8002d68:	e028      	b.n	8002dbc <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	6852      	ldr	r2, [r2, #4]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d008      	beq.n	8002dbc <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002df2:	f3bf 8f5f 	dmb	sy
}
 8002df6:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80d9 	beq.w	8002fc4 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e24:	e0ce      	b.n	8002fc4 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	3301      	adds	r3, #1
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d902      	bls.n	8002e44 <ETH_Prepare_Tx_Descriptors+0x32a>
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e40:	3b04      	subs	r3, #4
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e4c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e66:	d007      	beq.n	8002e78 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d029      	beq.n	8002ecc <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e84:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8a:	e019      	b.n	8002ec0 <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8002e8c:	f3bf 8f5f 	dmb	sy
}
 8002e90:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d902      	bls.n	8002eb0 <ETH_Prepare_Tx_Descriptors+0x396>
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	3b04      	subs	r3, #4
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d3e1      	bcc.n	8002e8c <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e0ad      	b.n	8003028 <ETH_Prepare_Tx_Descriptors+0x50e>
    }

    descnbr += 1U;
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	3301      	adds	r3, #1
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002eea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	6852      	ldr	r2, [r2, #4]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d014      	beq.n	8002f2a <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002f18:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	6852      	ldr	r2, [r2, #4]
 8002f20:	0412      	lsls	r2, r2, #16
 8002f22:	431a      	orrs	r2, r3
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	e00a      	b.n	8002f40 <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002f38:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002f3c:	6a3a      	ldr	r2, [r7, #32]
 8002f3e:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00f      	beq.n	8002f6c <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	0c9b      	lsrs	r3, r3, #18
 8002f52:	049b      	lsls	r3, r3, #18
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	69d2      	ldr	r2, [r2, #28]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	e019      	b.n	8002fa0 <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	6852      	ldr	r2, [r2, #4]
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002fa6:	f3bf 8f5f 	dmb	sy
}
 8002faa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f47f af2c 	bne.w	8002e26 <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d006      	beq.n	8002fe2 <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	e005      	b.n	8002fee <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ffe:	6979      	ldr	r1, [r7, #20]
 8003000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003002:	3304      	adds	r3, #4
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800300e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003010:	b672      	cpsid	i
}
 8003012:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	4413      	add	r3, r2
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003022:	b662      	cpsie	i
}
 8003024:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3734      	adds	r7, #52	; 0x34
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003042:	e136      	b.n	80032b2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	2101      	movs	r1, #1
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	fa01 f303 	lsl.w	r3, r1, r3
 8003050:	4013      	ands	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 8128 	beq.w	80032ac <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0x38>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b12      	cmp	r3, #18
 800306a:	d125      	bne.n	80030b8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	08da      	lsrs	r2, r3, #3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3208      	adds	r2, #8
 8003074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003078:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	220f      	movs	r2, #15
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4013      	ands	r3, r2
 800308e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	08da      	lsrs	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3208      	adds	r2, #8
 80030b2:	6979      	ldr	r1, [r7, #20]
 80030b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2203      	movs	r2, #3
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4013      	ands	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0203 	and.w	r2, r3, #3
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d00b      	beq.n	800310c <HAL_GPIO_Init+0xd8>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d007      	beq.n	800310c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003100:	2b11      	cmp	r3, #17
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b12      	cmp	r3, #18
 800310a:	d130      	bne.n	800316e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4013      	ands	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003142:	2201      	movs	r2, #1
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4013      	ands	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	f003 0201 	and.w	r2, r3, #1
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b03      	cmp	r3, #3
 8003174:	d017      	beq.n	80031a6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	2203      	movs	r2, #3
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	4013      	ands	r3, r2
 800318c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d07c      	beq.n	80032ac <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80031b2:	4a47      	ldr	r2, [pc, #284]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	3318      	adds	r3, #24
 80031ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031be:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	220f      	movs	r2, #15
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4013      	ands	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	0a9a      	lsrs	r2, r3, #10
 80031da:	4b3e      	ldr	r3, [pc, #248]	; (80032d4 <HAL_GPIO_Init+0x2a0>)
 80031dc:	4013      	ands	r3, r2
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	f002 0203 	and.w	r2, r2, #3
 80031e4:	00d2      	lsls	r2, r2, #3
 80031e6:	4093      	lsls	r3, r2
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80031ee:	4938      	ldr	r1, [pc, #224]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3318      	adds	r3, #24
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80031fc:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	43db      	mvns	r3, r3
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4013      	ands	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003220:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003226:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	43db      	mvns	r3, r3
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4013      	ands	r3, r2
 8003234:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800324a:	4a21      	ldr	r2, [pc, #132]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003250:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 8003252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003256:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	43db      	mvns	r3, r3
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4013      	ands	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003276:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 8003280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003284:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	43db      	mvns	r3, r3
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4013      	ands	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80032a4:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	3301      	adds	r3, #1
 80032b0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f47f aec1 	bne.w	8003044 <HAL_GPIO_Init+0x10>
  }
}
 80032c2:	bf00      	nop
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	44022000 	.word	0x44022000
 80032d4:	002f7f7f 	.word	0x002f7f7f

080032d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	807b      	strh	r3, [r7, #2]
 80032e4:	4613      	mov	r3, r2
 80032e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032e8:	787b      	ldrb	r3, [r7, #1]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032ee:	887a      	ldrh	r2, [r7, #2]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032f4:	e002      	b.n	80032fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032f6:	887a      	ldrh	r2, [r7, #2]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800331a:	887a      	ldrh	r2, [r7, #2]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4013      	ands	r3, r2
 8003320:	041a      	lsls	r2, r3, #16
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	43d9      	mvns	r1, r3
 8003326:	887b      	ldrh	r3, [r7, #2]
 8003328:	400b      	ands	r3, r1
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	619a      	str	r2, [r3, #24]
}
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_ICACHE_Enable+0x1c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a04      	ldr	r2, [pc, #16]	; (8003358 <HAL_ICACHE_Enable+0x1c>)
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40030400 	.word	0x40030400

0800335c <HAL_PWR_EnableWakeUpPin>:
  * @note   The PWR_WAKEUP_PIN6_HIGH, PWR_WAKEUP_PIN6_LOW, PWR_WAKEUP_PIN7_HIGH, PWR_WAKEUP_PIN7_LOW,
  *         PWR_WAKEUP_PIN8_HIGH and PWR_WAKEUP_PIN8_LOW are not available for STM32H503xx devices.
  * @retval None.
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

  /*
     Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge).
  */
  MODIFY_REG(PWR->WUCR, PWR_EWUP_MASK, WakeUpPinPolarity);
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_PWR_EnableWakeUpPin+0x24>)
 8003366:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_PWR_EnableWakeUpPin+0x28>)
 800336a:	4013      	ands	r3, r2
 800336c:	4904      	ldr	r1, [pc, #16]	; (8003380 <HAL_PWR_EnableWakeUpPin+0x24>)
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	4313      	orrs	r3, r2
 8003372:	648b      	str	r3, [r1, #72]	; 0x48
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	44020800 	.word	0x44020800
 8003384:	f000c0c0 	.word	0xf000c0c0

08003388 <HAL_PWR_DisableWakeUpPin>:
  * @note   The PWR_WAKEUP_PIN6_HIGH, PWR_WAKEUP_PIN6_LOW, PWR_WAKEUP_PIN7_HIGH, PWR_WAKEUP_PIN7_LOW,
  *         PWR_WAKEUP_PIN8_HIGH and PWR_WAKEUP_PIN8_LOW are not available for STM32H503xx devices.
  * @retval None.
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Disable the wake up pin selected */
  CLEAR_BIT(PWR->WUCR, (PWR_WUCR_WUPEN & WakeUpPinx));
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_PWR_DisableWakeUpPin+0x24>)
 8003392:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	4904      	ldr	r1, [pc, #16]	; (80033ac <HAL_PWR_DisableWakeUpPin+0x24>)
 800339c:	4013      	ands	r3, r2
 800339e:	648b      	str	r3, [r1, #72]	; 0x48
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	44020800 	.word	0x44020800

080033b0 <HAL_PWR_EnterSTANDBYMode>:
  *         except for registers and backup SRAM in the Backup domain and
  *         STANDBY circuitry.
  * @retval None.
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  SET_BIT(PWR->PMCR, PWR_PMCR_LPMS);
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a07      	ldr	r2, [pc, #28]	; (80033d8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80033c0:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	4a05      	ldr	r2, [pc, #20]	; (80033dc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80033c6:	f043 0304 	orr.w	r3, r3, #4
 80033ca:	6113      	str	r3, [r2, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Wait For Interrupt Request */
  __WFI();
 80033cc:	bf30      	wfi
}
 80033ce:	bf00      	nop
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	44020800 	.word	0x44020800
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f000 bc28 	b.w	8003c44 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f4:	4b94      	ldr	r3, [pc, #592]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	f003 0318 	and.w	r3, r3, #24
 80033fc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80033fe:	4b92      	ldr	r3, [pc, #584]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b00      	cmp	r3, #0
 8003412:	d05b      	beq.n	80034cc <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	2b08      	cmp	r3, #8
 8003418:	d005      	beq.n	8003426 <HAL_RCC_OscConfig+0x46>
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	2b18      	cmp	r3, #24
 800341e:	d114      	bne.n	800344a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d111      	bne.n	800344a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d102      	bne.n	8003434 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	f000 bc08 	b.w	8003c44 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003434:	4b84      	ldr	r3, [pc, #528]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	041b      	lsls	r3, r3, #16
 8003442:	4981      	ldr	r1, [pc, #516]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003444:	4313      	orrs	r3, r2
 8003446:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003448:	e040      	b.n	80034cc <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d023      	beq.n	800349a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003452:	4b7d      	ldr	r3, [pc, #500]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a7c      	ldr	r2, [pc, #496]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fd ff3b 	bl	80012d8 <HAL_GetTick>
 8003462:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003466:	f7fd ff37 	bl	80012d8 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e3e5      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003478:	4b73      	ldr	r3, [pc, #460]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003484:	4b70      	ldr	r3, [pc, #448]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	041b      	lsls	r3, r3, #16
 8003492:	496d      	ldr	r1, [pc, #436]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003494:	4313      	orrs	r3, r2
 8003496:	618b      	str	r3, [r1, #24]
 8003498:	e018      	b.n	80034cc <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800349a:	4b6b      	ldr	r3, [pc, #428]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a6a      	ldr	r2, [pc, #424]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 80034a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a6:	f7fd ff17 	bl	80012d8 <HAL_GetTick>
 80034aa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80034ae:	f7fd ff13 	bl	80012d8 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e3c1      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80034c0:	4b61      	ldr	r3, [pc, #388]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f0      	bne.n	80034ae <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80a0 	beq.w	800361a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d005      	beq.n	80034ec <HAL_RCC_OscConfig+0x10c>
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	2b18      	cmp	r3, #24
 80034e4:	d109      	bne.n	80034fa <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d106      	bne.n	80034fa <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f040 8092 	bne.w	800361a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e3a4      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003502:	d106      	bne.n	8003512 <HAL_RCC_OscConfig+0x132>
 8003504:	4b50      	ldr	r3, [pc, #320]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a4f      	ldr	r2, [pc, #316]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 800350a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	e058      	b.n	80035c4 <HAL_RCC_OscConfig+0x1e4>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d112      	bne.n	8003540 <HAL_RCC_OscConfig+0x160>
 800351a:	4b4b      	ldr	r3, [pc, #300]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a4a      	ldr	r2, [pc, #296]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b48      	ldr	r3, [pc, #288]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a47      	ldr	r2, [pc, #284]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 800352c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	4b45      	ldr	r3, [pc, #276]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a44      	ldr	r2, [pc, #272]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	e041      	b.n	80035c4 <HAL_RCC_OscConfig+0x1e4>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003548:	d112      	bne.n	8003570 <HAL_RCC_OscConfig+0x190>
 800354a:	4b3f      	ldr	r3, [pc, #252]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a3e      	ldr	r2, [pc, #248]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	4b3c      	ldr	r3, [pc, #240]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a3b      	ldr	r2, [pc, #236]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 800355c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b39      	ldr	r3, [pc, #228]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a38      	ldr	r2, [pc, #224]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e029      	b.n	80035c4 <HAL_RCC_OscConfig+0x1e4>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003578:	d112      	bne.n	80035a0 <HAL_RCC_OscConfig+0x1c0>
 800357a:	4b33      	ldr	r3, [pc, #204]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a32      	ldr	r2, [pc, #200]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	4b30      	ldr	r3, [pc, #192]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a2f      	ldr	r2, [pc, #188]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 800358c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	4b2d      	ldr	r3, [pc, #180]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2c      	ldr	r2, [pc, #176]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e011      	b.n	80035c4 <HAL_RCC_OscConfig+0x1e4>
 80035a0:	4b29      	ldr	r3, [pc, #164]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a28      	ldr	r2, [pc, #160]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 80035a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b26      	ldr	r3, [pc, #152]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a25      	ldr	r2, [pc, #148]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 80035b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4b23      	ldr	r3, [pc, #140]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a22      	ldr	r2, [pc, #136]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 80035be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80035c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d013      	beq.n	80035f4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fd fe84 	bl	80012d8 <HAL_GetTick>
 80035d0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80035d4:	f7fd fe80 	bl	80012d8 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	; 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e32e      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e6:	4b18      	ldr	r3, [pc, #96]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x1f4>
 80035f2:	e012      	b.n	800361a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fd fe70 	bl	80012d8 <HAL_GetTick>
 80035f8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80035fc:	f7fd fe6c 	bl	80012d8 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e31a      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <HAL_RCC_OscConfig+0x268>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 809a 	beq.w	800375c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <HAL_RCC_OscConfig+0x25a>
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	2b18      	cmp	r3, #24
 8003632:	d149      	bne.n	80036c8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d146      	bne.n	80036c8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d104      	bne.n	800364c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e2fe      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
 8003646:	bf00      	nop
 8003648:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d11c      	bne.n	800368c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003652:	4b9a      	ldr	r3, [pc, #616]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0218 	and.w	r2, r3, #24
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	429a      	cmp	r2, r3
 8003660:	d014      	beq.n	800368c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003662:	4b96      	ldr	r3, [pc, #600]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 0218 	bic.w	r2, r3, #24
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	4993      	ldr	r1, [pc, #588]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 8003670:	4313      	orrs	r3, r2
 8003672:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003674:	f000 fdd0 	bl	8004218 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003678:	4b91      	ldr	r3, [pc, #580]	; (80038c0 <HAL_RCC_OscConfig+0x4e0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7fd f9ff 	bl	8000a80 <HAL_InitTick>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e2db      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7fd fe24 	bl	80012d8 <HAL_GetTick>
 8003690:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003694:	f7fd fe20 	bl	80012d8 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e2ce      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a6:	4b85      	ldr	r3, [pc, #532]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80036b2:	4b82      	ldr	r3, [pc, #520]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	041b      	lsls	r3, r3, #16
 80036c0:	497e      	ldr	r1, [pc, #504]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80036c6:	e049      	b.n	800375c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d02c      	beq.n	800372a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80036d0:	4b7a      	ldr	r3, [pc, #488]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f023 0218 	bic.w	r2, r3, #24
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	4977      	ldr	r1, [pc, #476]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80036e2:	4b76      	ldr	r3, [pc, #472]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a75      	ldr	r2, [pc, #468]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ee:	f7fd fdf3 	bl	80012d8 <HAL_GetTick>
 80036f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80036f6:	f7fd fdef 	bl	80012d8 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e29d      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003708:	4b6c      	ldr	r3, [pc, #432]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003714:	4b69      	ldr	r3, [pc, #420]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	041b      	lsls	r3, r3, #16
 8003722:	4966      	ldr	r1, [pc, #408]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 8003724:	4313      	orrs	r3, r2
 8003726:	610b      	str	r3, [r1, #16]
 8003728:	e018      	b.n	800375c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372a:	4b64      	ldr	r3, [pc, #400]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a63      	ldr	r2, [pc, #396]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003736:	f7fd fdcf 	bl	80012d8 <HAL_GetTick>
 800373a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800373e:	f7fd fdcb 	bl	80012d8 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e279      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003750:	4b5a      	ldr	r3, [pc, #360]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f0      	bne.n	800373e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b00      	cmp	r3, #0
 8003766:	d03c      	beq.n	80037e2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01c      	beq.n	80037aa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003770:	4b52      	ldr	r3, [pc, #328]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 8003772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003776:	4a51      	ldr	r2, [pc, #324]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 8003778:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800377c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fd fdaa 	bl	80012d8 <HAL_GetTick>
 8003784:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003788:	f7fd fda6 	bl	80012d8 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e254      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800379a:	4b48      	ldr	r3, [pc, #288]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 800379c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ef      	beq.n	8003788 <HAL_RCC_OscConfig+0x3a8>
 80037a8:	e01b      	b.n	80037e2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037aa:	4b44      	ldr	r3, [pc, #272]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 80037ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037b0:	4a42      	ldr	r2, [pc, #264]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 80037b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ba:	f7fd fd8d 	bl	80012d8 <HAL_GetTick>
 80037be:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80037c2:	f7fd fd89 	bl	80012d8 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e237      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80037d4:	4b39      	ldr	r3, [pc, #228]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 80037d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1ef      	bne.n	80037c2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 80d2 	beq.w	8003994 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80037f0:	4b34      	ldr	r3, [pc, #208]	; (80038c4 <HAL_RCC_OscConfig+0x4e4>)
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d118      	bne.n	800382e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80037fc:	4b31      	ldr	r3, [pc, #196]	; (80038c4 <HAL_RCC_OscConfig+0x4e4>)
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	4a30      	ldr	r2, [pc, #192]	; (80038c4 <HAL_RCC_OscConfig+0x4e4>)
 8003802:	f043 0301 	orr.w	r3, r3, #1
 8003806:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003808:	f7fd fd66 	bl	80012d8 <HAL_GetTick>
 800380c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003810:	f7fd fd62 	bl	80012d8 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e210      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003822:	4b28      	ldr	r3, [pc, #160]	; (80038c4 <HAL_RCC_OscConfig+0x4e4>)
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d108      	bne.n	8003848 <HAL_RCC_OscConfig+0x468>
 8003836:	4b21      	ldr	r3, [pc, #132]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 8003838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800383c:	4a1f      	ldr	r2, [pc, #124]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003846:	e074      	b.n	8003932 <HAL_RCC_OscConfig+0x552>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d118      	bne.n	8003882 <HAL_RCC_OscConfig+0x4a2>
 8003850:	4b1a      	ldr	r3, [pc, #104]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 8003852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003856:	4a19      	ldr	r2, [pc, #100]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 8003858:	f023 0301 	bic.w	r3, r3, #1
 800385c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003860:	4b16      	ldr	r3, [pc, #88]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 8003862:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003866:	4a15      	ldr	r2, [pc, #84]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 8003868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800386c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003870:	4b12      	ldr	r3, [pc, #72]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 8003872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003876:	4a11      	ldr	r2, [pc, #68]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 8003878:	f023 0304 	bic.w	r3, r3, #4
 800387c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003880:	e057      	b.n	8003932 <HAL_RCC_OscConfig+0x552>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b05      	cmp	r3, #5
 8003888:	d11e      	bne.n	80038c8 <HAL_RCC_OscConfig+0x4e8>
 800388a:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 800388c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003890:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 8003892:	f043 0304 	orr.w	r3, r3, #4
 8003896:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800389a:	4b08      	ldr	r3, [pc, #32]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 800389c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038a0:	4a06      	ldr	r2, [pc, #24]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 80038a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038aa:	4b04      	ldr	r3, [pc, #16]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 80038ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038b0:	4a02      	ldr	r2, [pc, #8]	; (80038bc <HAL_RCC_OscConfig+0x4dc>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038ba:	e03a      	b.n	8003932 <HAL_RCC_OscConfig+0x552>
 80038bc:	44020c00 	.word	0x44020c00
 80038c0:	20000004 	.word	0x20000004
 80038c4:	44020800 	.word	0x44020800
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b85      	cmp	r3, #133	; 0x85
 80038ce:	d118      	bne.n	8003902 <HAL_RCC_OscConfig+0x522>
 80038d0:	4ba2      	ldr	r3, [pc, #648]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 80038d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038d6:	4aa1      	ldr	r2, [pc, #644]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 80038d8:	f043 0304 	orr.w	r3, r3, #4
 80038dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038e0:	4b9e      	ldr	r3, [pc, #632]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 80038e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038e6:	4a9d      	ldr	r2, [pc, #628]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 80038e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038f0:	4b9a      	ldr	r3, [pc, #616]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 80038f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038f6:	4a99      	ldr	r2, [pc, #612]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003900:	e017      	b.n	8003932 <HAL_RCC_OscConfig+0x552>
 8003902:	4b96      	ldr	r3, [pc, #600]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003908:	4a94      	ldr	r2, [pc, #592]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003912:	4b92      	ldr	r3, [pc, #584]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003918:	4a90      	ldr	r2, [pc, #576]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 800391a:	f023 0304 	bic.w	r3, r3, #4
 800391e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003922:	4b8e      	ldr	r3, [pc, #568]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003928:	4a8c      	ldr	r2, [pc, #560]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 800392a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800392e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d016      	beq.n	8003968 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393a:	f7fd fccd 	bl	80012d8 <HAL_GetTick>
 800393e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003940:	e00a      	b.n	8003958 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003942:	f7fd fcc9 	bl	80012d8 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003950:	4293      	cmp	r3, r2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e175      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003958:	4b80      	ldr	r3, [pc, #512]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 800395a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0ed      	beq.n	8003942 <HAL_RCC_OscConfig+0x562>
 8003966:	e015      	b.n	8003994 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003968:	f7fd fcb6 	bl	80012d8 <HAL_GetTick>
 800396c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800396e:	e00a      	b.n	8003986 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003970:	f7fd fcb2 	bl	80012d8 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e15e      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003986:	4b75      	ldr	r3, [pc, #468]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ed      	bne.n	8003970 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b00      	cmp	r3, #0
 800399e:	d036      	beq.n	8003a0e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d019      	beq.n	80039dc <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039a8:	4b6c      	ldr	r3, [pc, #432]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a6b      	ldr	r2, [pc, #428]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 80039ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fd fc90 	bl	80012d8 <HAL_GetTick>
 80039b8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80039bc:	f7fd fc8c 	bl	80012d8 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e13a      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80039ce:	4b63      	ldr	r3, [pc, #396]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x5dc>
 80039da:	e018      	b.n	8003a0e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039dc:	4b5f      	ldr	r3, [pc, #380]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a5e      	ldr	r2, [pc, #376]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 80039e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e8:	f7fd fc76 	bl	80012d8 <HAL_GetTick>
 80039ec:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80039f0:	f7fd fc72 	bl	80012d8 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e120      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003a02:	4b56      	ldr	r3, [pc, #344]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 8115 	beq.w	8003c42 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	2b18      	cmp	r3, #24
 8003a1c:	f000 80af 	beq.w	8003b7e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	f040 8086 	bne.w	8003b36 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003a2a:	4b4c      	ldr	r3, [pc, #304]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a4b      	ldr	r2, [pc, #300]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003a30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a36:	f7fd fc4f 	bl	80012d8 <HAL_GetTick>
 8003a3a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003a3e:	f7fd fc4b 	bl	80012d8 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e0f9      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a50:	4b42      	ldr	r3, [pc, #264]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f0      	bne.n	8003a3e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003a5c:	4b3f      	ldr	r3, [pc, #252]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a64:	f023 0303 	bic.w	r3, r3, #3
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a70:	0212      	lsls	r2, r2, #8
 8003a72:	430a      	orrs	r2, r1
 8003a74:	4939      	ldr	r1, [pc, #228]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	628b      	str	r3, [r1, #40]	; 0x28
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	025b      	lsls	r3, r3, #9
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a94:	3b01      	subs	r3, #1
 8003a96:	041b      	lsls	r3, r3, #16
 8003a98:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	061b      	lsls	r3, r3, #24
 8003aa6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003aaa:	492c      	ldr	r1, [pc, #176]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003ab0:	4b2a      	ldr	r3, [pc, #168]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	4a29      	ldr	r2, [pc, #164]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003ab6:	f023 0310 	bic.w	r3, r3, #16
 8003aba:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac0:	4a26      	ldr	r2, [pc, #152]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003ac6:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	4a24      	ldr	r2, [pc, #144]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003acc:	f043 0310 	orr.w	r3, r3, #16
 8003ad0:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003ad2:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	f023 020c 	bic.w	r2, r3, #12
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	491f      	ldr	r1, [pc, #124]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	f023 0220 	bic.w	r2, r3, #32
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af0:	491a      	ldr	r1, [pc, #104]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003af6:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	4a18      	ldr	r2, [pc, #96]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b00:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003b02:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a15      	ldr	r2, [pc, #84]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003b08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0e:	f7fd fbe3 	bl	80012d8 <HAL_GetTick>
 8003b12:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003b16:	f7fd fbdf 	bl	80012d8 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e08d      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003b28:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x736>
 8003b34:	e085      	b.n	8003c42 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003b36:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a08      	ldr	r2, [pc, #32]	; (8003b5c <HAL_RCC_OscConfig+0x77c>)
 8003b3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7fd fbc9 	bl	80012d8 <HAL_GetTick>
 8003b46:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003b4a:	f7fd fbc5 	bl	80012d8 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d903      	bls.n	8003b60 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e073      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
 8003b5c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b60:	4b3a      	ldr	r3, [pc, #232]	; (8003c4c <HAL_RCC_OscConfig+0x86c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1ee      	bne.n	8003b4a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003b6c:	4b37      	ldr	r3, [pc, #220]	; (8003c4c <HAL_RCC_OscConfig+0x86c>)
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	4a36      	ldr	r2, [pc, #216]	; (8003c4c <HAL_RCC_OscConfig+0x86c>)
 8003b72:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003b76:	f023 0303 	bic.w	r3, r3, #3
 8003b7a:	6293      	str	r3, [r2, #40]	; 0x28
 8003b7c:	e061      	b.n	8003c42 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003b7e:	4b33      	ldr	r3, [pc, #204]	; (8003c4c <HAL_RCC_OscConfig+0x86c>)
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b84:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <HAL_RCC_OscConfig+0x86c>)
 8003b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b88:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d031      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f003 0203 	and.w	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d12a      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	0a1b      	lsrs	r3, r3, #8
 8003ba4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d122      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bba:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d11a      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	0a5b      	lsrs	r3, r3, #9
 8003bc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d111      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	0c1b      	lsrs	r3, r3, #16
 8003bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d108      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	0e1b      	lsrs	r3, r3, #24
 8003be8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d001      	beq.n	8003bfa <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e024      	b.n	8003c44 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003bfa:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <HAL_RCC_OscConfig+0x86c>)
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	08db      	lsrs	r3, r3, #3
 8003c00:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d01a      	beq.n	8003c42 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <HAL_RCC_OscConfig+0x86c>)
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	4a0e      	ldr	r2, [pc, #56]	; (8003c4c <HAL_RCC_OscConfig+0x86c>)
 8003c12:	f023 0310 	bic.w	r3, r3, #16
 8003c16:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fd fb5e 	bl	80012d8 <HAL_GetTick>
 8003c1c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003c1e:	bf00      	nop
 8003c20:	f7fd fb5a 	bl	80012d8 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d0f9      	beq.n	8003c20 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c30:	4a06      	ldr	r2, [pc, #24]	; (8003c4c <HAL_RCC_OscConfig+0x86c>)
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <HAL_RCC_OscConfig+0x86c>)
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <HAL_RCC_OscConfig+0x86c>)
 8003c3c:	f043 0310 	orr.w	r3, r3, #16
 8003c40:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3720      	adds	r7, #32
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	44020c00 	.word	0x44020c00

08003c50 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e19e      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c64:	4b83      	ldr	r3, [pc, #524]	; (8003e74 <HAL_RCC_ClockConfig+0x224>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d910      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c72:	4b80      	ldr	r3, [pc, #512]	; (8003e74 <HAL_RCC_ClockConfig+0x224>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 020f 	bic.w	r2, r3, #15
 8003c7a:	497e      	ldr	r1, [pc, #504]	; (8003e74 <HAL_RCC_ClockConfig+0x224>)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b7c      	ldr	r3, [pc, #496]	; (8003e74 <HAL_RCC_ClockConfig+0x224>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e186      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d012      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	4b74      	ldr	r3, [pc, #464]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	0a1b      	lsrs	r3, r3, #8
 8003caa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d909      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003cb2:	4b71      	ldr	r3, [pc, #452]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	496d      	ldr	r1, [pc, #436]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d012      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	4b68      	ldr	r3, [pc, #416]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	091b      	lsrs	r3, r3, #4
 8003cdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d909      	bls.n	8003cf8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003ce4:	4b64      	ldr	r3, [pc, #400]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	4961      	ldr	r1, [pc, #388]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	4b5b      	ldr	r3, [pc, #364]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d908      	bls.n	8003d26 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003d14:	4b58      	ldr	r3, [pc, #352]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4955      	ldr	r1, [pc, #340]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d010      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	4b50      	ldr	r3, [pc, #320]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d908      	bls.n	8003d54 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003d42:	4b4d      	ldr	r3, [pc, #308]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f023 020f 	bic.w	r2, r3, #15
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	494a      	ldr	r1, [pc, #296]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8093 	beq.w	8003e88 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d107      	bne.n	8003d7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003d6a:	4b43      	ldr	r3, [pc, #268]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d121      	bne.n	8003dba <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e113      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d107      	bne.n	8003d92 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d82:	4b3d      	ldr	r3, [pc, #244]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d115      	bne.n	8003dba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e107      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d107      	bne.n	8003daa <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003d9a:	4b37      	ldr	r3, [pc, #220]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e0fb      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003daa:	4b33      	ldr	r3, [pc, #204]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e0f3      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003dba:	4b2f      	ldr	r3, [pc, #188]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f023 0203 	bic.w	r2, r3, #3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	492c      	ldr	r1, [pc, #176]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dcc:	f7fd fa84 	bl	80012d8 <HAL_GetTick>
 8003dd0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d112      	bne.n	8003e00 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dda:	e00a      	b.n	8003df2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003ddc:	f7fd fa7c 	bl	80012d8 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e0d7      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003df2:	4b21      	ldr	r3, [pc, #132]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f003 0318 	and.w	r3, r3, #24
 8003dfa:	2b18      	cmp	r3, #24
 8003dfc:	d1ee      	bne.n	8003ddc <HAL_RCC_ClockConfig+0x18c>
 8003dfe:	e043      	b.n	8003e88 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d112      	bne.n	8003e2e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e08:	e00a      	b.n	8003e20 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0a:	f7fd fa65 	bl	80012d8 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e0c0      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e20:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	f003 0318 	and.w	r3, r3, #24
 8003e28:	2b10      	cmp	r3, #16
 8003e2a:	d1ee      	bne.n	8003e0a <HAL_RCC_ClockConfig+0x1ba>
 8003e2c:	e02c      	b.n	8003e88 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d122      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003e36:	e00a      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e38:	f7fd fa4e 	bl	80012d8 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e0a9      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003e4e:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <HAL_RCC_ClockConfig+0x228>)
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f003 0318 	and.w	r3, r3, #24
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d1ee      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x1e8>
 8003e5a:	e015      	b.n	8003e88 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e5c:	f7fd fa3c 	bl	80012d8 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d906      	bls.n	8003e7c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e097      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x352>
 8003e72:	bf00      	nop
 8003e74:	40022000 	.word	0x40022000
 8003e78:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e7c:	4b4b      	ldr	r3, [pc, #300]	; (8003fac <HAL_RCC_ClockConfig+0x35c>)
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	f003 0318 	and.w	r3, r3, #24
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e9      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d010      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	4b44      	ldr	r3, [pc, #272]	; (8003fac <HAL_RCC_ClockConfig+0x35c>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d208      	bcs.n	8003eb6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003ea4:	4b41      	ldr	r3, [pc, #260]	; (8003fac <HAL_RCC_ClockConfig+0x35c>)
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	f023 020f 	bic.w	r2, r3, #15
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	493e      	ldr	r1, [pc, #248]	; (8003fac <HAL_RCC_ClockConfig+0x35c>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb6:	4b3e      	ldr	r3, [pc, #248]	; (8003fb0 <HAL_RCC_ClockConfig+0x360>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d210      	bcs.n	8003ee6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec4:	4b3a      	ldr	r3, [pc, #232]	; (8003fb0 <HAL_RCC_ClockConfig+0x360>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f023 020f 	bic.w	r2, r3, #15
 8003ecc:	4938      	ldr	r1, [pc, #224]	; (8003fb0 <HAL_RCC_ClockConfig+0x360>)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed4:	4b36      	ldr	r3, [pc, #216]	; (8003fb0 <HAL_RCC_ClockConfig+0x360>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e05d      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d010      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	4b2d      	ldr	r3, [pc, #180]	; (8003fac <HAL_RCC_ClockConfig+0x35c>)
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d208      	bcs.n	8003f14 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003f02:	4b2a      	ldr	r3, [pc, #168]	; (8003fac <HAL_RCC_ClockConfig+0x35c>)
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4927      	ldr	r1, [pc, #156]	; (8003fac <HAL_RCC_ClockConfig+0x35c>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d012      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	4b21      	ldr	r3, [pc, #132]	; (8003fac <HAL_RCC_ClockConfig+0x35c>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d209      	bcs.n	8003f46 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003f32:	4b1e      	ldr	r3, [pc, #120]	; (8003fac <HAL_RCC_ClockConfig+0x35c>)
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	491a      	ldr	r1, [pc, #104]	; (8003fac <HAL_RCC_ClockConfig+0x35c>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d012      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	4b15      	ldr	r3, [pc, #84]	; (8003fac <HAL_RCC_ClockConfig+0x35c>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	0a1b      	lsrs	r3, r3, #8
 8003f5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d209      	bcs.n	8003f78 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003f64:	4b11      	ldr	r3, [pc, #68]	; (8003fac <HAL_RCC_ClockConfig+0x35c>)
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	021b      	lsls	r3, r3, #8
 8003f72:	490e      	ldr	r1, [pc, #56]	; (8003fac <HAL_RCC_ClockConfig+0x35c>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003f78:	f000 f822 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <HAL_RCC_ClockConfig+0x35c>)
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	490b      	ldr	r1, [pc, #44]	; (8003fb4 <HAL_RCC_ClockConfig+0x364>)
 8003f88:	5ccb      	ldrb	r3, [r1, r3]
 8003f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8e:	4a0a      	ldr	r2, [pc, #40]	; (8003fb8 <HAL_RCC_ClockConfig+0x368>)
 8003f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003f92:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <HAL_RCC_ClockConfig+0x36c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fc fd72 	bl	8000a80 <HAL_InitTick>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003fa0:	7afb      	ldrb	r3, [r7, #11]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	44020c00 	.word	0x44020c00
 8003fb0:	40022000 	.word	0x40022000
 8003fb4:	08010220 	.word	0x08010220
 8003fb8:	20000000 	.word	0x20000000
 8003fbc:	20000004 	.word	0x20000004

08003fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b089      	sub	sp, #36	; 0x24
 8003fc4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003fc6:	4b8c      	ldr	r3, [pc, #560]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	f003 0318 	and.w	r3, r3, #24
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d102      	bne.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003fd2:	4b8a      	ldr	r3, [pc, #552]	; (80041fc <HAL_RCC_GetSysClockFreq+0x23c>)
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	e107      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fd8:	4b87      	ldr	r3, [pc, #540]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	f003 0318 	and.w	r3, r3, #24
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d112      	bne.n	800400a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003fe4:	4b84      	ldr	r3, [pc, #528]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ff0:	4b81      	ldr	r3, [pc, #516]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	08db      	lsrs	r3, r3, #3
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	4a81      	ldr	r2, [pc, #516]	; (8004200 <HAL_RCC_GetSysClockFreq+0x240>)
 8003ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	e0f1      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004004:	4b7e      	ldr	r3, [pc, #504]	; (8004200 <HAL_RCC_GetSysClockFreq+0x240>)
 8004006:	61fb      	str	r3, [r7, #28]
 8004008:	e0ee      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800400a:	4b7b      	ldr	r3, [pc, #492]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f003 0318 	and.w	r3, r3, #24
 8004012:	2b10      	cmp	r3, #16
 8004014:	d102      	bne.n	800401c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004016:	4b7b      	ldr	r3, [pc, #492]	; (8004204 <HAL_RCC_GetSysClockFreq+0x244>)
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	e0e5      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800401c:	4b76      	ldr	r3, [pc, #472]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	f003 0318 	and.w	r3, r3, #24
 8004024:	2b18      	cmp	r3, #24
 8004026:	f040 80dd 	bne.w	80041e4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800402a:	4b73      	ldr	r3, [pc, #460]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004034:	4b70      	ldr	r3, [pc, #448]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	0a1b      	lsrs	r3, r3, #8
 800403a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800403e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004040:	4b6d      	ldr	r3, [pc, #436]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	091b      	lsrs	r3, r3, #4
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800404c:	4b6a      	ldr	r3, [pc, #424]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004050:	08db      	lsrs	r3, r3, #3
 8004052:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	fb02 f303 	mul.w	r3, r2, r3
 800405c:	ee07 3a90 	vmov	s15, r3
 8004060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004064:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 80b7 	beq.w	80041de <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d003      	beq.n	800407e <HAL_RCC_GetSysClockFreq+0xbe>
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d056      	beq.n	800412a <HAL_RCC_GetSysClockFreq+0x16a>
 800407c:	e077      	b.n	800416e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800407e:	4b5e      	ldr	r3, [pc, #376]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b00      	cmp	r3, #0
 8004088:	d02d      	beq.n	80040e6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800408a:	4b5b      	ldr	r3, [pc, #364]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	08db      	lsrs	r3, r3, #3
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	4a5a      	ldr	r2, [pc, #360]	; (8004200 <HAL_RCC_GetSysClockFreq+0x240>)
 8004096:	fa22 f303 	lsr.w	r3, r2, r3
 800409a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	ee07 3a90 	vmov	s15, r3
 80040ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b4:	4b50      	ldr	r3, [pc, #320]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80040b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040bc:	ee07 3a90 	vmov	s15, r3
 80040c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80040c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80040c8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004208 <HAL_RCC_GetSysClockFreq+0x248>
 80040cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80040d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80040e4:	e065      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	ee07 3a90 	vmov	s15, r3
 80040ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f0:	eddf 6a46 	vldr	s13, [pc, #280]	; 800420c <HAL_RCC_GetSysClockFreq+0x24c>
 80040f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040f8:	4b3f      	ldr	r3, [pc, #252]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80040fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004100:	ee07 3a90 	vmov	s15, r3
 8004104:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004108:	ed97 6a02 	vldr	s12, [r7, #8]
 800410c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004208 <HAL_RCC_GetSysClockFreq+0x248>
 8004110:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004114:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004118:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800411c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004124:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004128:	e043      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	ee07 3a90 	vmov	s15, r3
 8004130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004134:	eddf 6a36 	vldr	s13, [pc, #216]	; 8004210 <HAL_RCC_GetSysClockFreq+0x250>
 8004138:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800413c:	4b2e      	ldr	r3, [pc, #184]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800413e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004144:	ee07 3a90 	vmov	s15, r3
 8004148:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800414c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004150:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004208 <HAL_RCC_GetSysClockFreq+0x248>
 8004154:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004158:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800415c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004160:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004168:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800416c:	e021      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	ee07 3a90 	vmov	s15, r3
 8004174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004178:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004214 <HAL_RCC_GetSysClockFreq+0x254>
 800417c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004180:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004188:	ee07 3a90 	vmov	s15, r3
 800418c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004190:	ed97 6a02 	vldr	s12, [r7, #8]
 8004194:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004208 <HAL_RCC_GetSysClockFreq+0x248>
 8004198:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800419c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80041a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ac:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80041b0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80041b2:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80041b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b6:	0a5b      	lsrs	r3, r3, #9
 80041b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041bc:	3301      	adds	r3, #1
 80041be:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041ca:	edd7 6a06 	vldr	s13, [r7, #24]
 80041ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041d6:	ee17 3a90 	vmov	r3, s15
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	e004      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	e001      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <HAL_RCC_GetSysClockFreq+0x240>)
 80041e6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80041e8:	69fb      	ldr	r3, [r7, #28]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3724      	adds	r7, #36	; 0x24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	44020c00 	.word	0x44020c00
 80041fc:	003d0900 	.word	0x003d0900
 8004200:	03d09000 	.word	0x03d09000
 8004204:	007a1200 	.word	0x007a1200
 8004208:	46000000 	.word	0x46000000
 800420c:	4c742400 	.word	0x4c742400
 8004210:	4af42400 	.word	0x4af42400
 8004214:	4a742400 	.word	0x4a742400

08004218 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800421c:	f7ff fed0 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 8004220:	4602      	mov	r2, r0
 8004222:	4b08      	ldr	r3, [pc, #32]	; (8004244 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004224:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004226:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800422a:	4907      	ldr	r1, [pc, #28]	; (8004248 <HAL_RCC_GetHCLKFreq+0x30>)
 800422c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800422e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004232:	fa22 f303 	lsr.w	r3, r2, r3
 8004236:	4a05      	ldr	r2, [pc, #20]	; (800424c <HAL_RCC_GetHCLKFreq+0x34>)
 8004238:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800423a:	4b04      	ldr	r3, [pc, #16]	; (800424c <HAL_RCC_GetHCLKFreq+0x34>)
 800423c:	681b      	ldr	r3, [r3, #0]
}
 800423e:	4618      	mov	r0, r3
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	44020c00 	.word	0x44020c00
 8004248:	08010220 	.word	0x08010220
 800424c:	20000000 	.word	0x20000000

08004250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004254:	f7ff ffe0 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 8004258:	4602      	mov	r2, r0
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <HAL_RCC_GetPCLK1Freq+0x24>)
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	091b      	lsrs	r3, r3, #4
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	4904      	ldr	r1, [pc, #16]	; (8004278 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004266:	5ccb      	ldrb	r3, [r1, r3]
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}
 8004274:	44020c00 	.word	0x44020c00
 8004278:	08010230 	.word	0x08010230

0800427c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	221f      	movs	r2, #31
 800428a:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800428c:	4b15      	ldr	r3, [pc, #84]	; (80042e4 <HAL_RCC_GetClockConfig+0x68>)
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	f003 0203 	and.w	r2, r3, #3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8004298:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <HAL_RCC_GetClockConfig+0x68>)
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f003 020f 	and.w	r2, r3, #15
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	091b      	lsrs	r3, r3, #4
 80042b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	0a1b      	lsrs	r3, r3, #8
 80042c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042ca:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <HAL_RCC_GetClockConfig+0x6c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 020f 	and.w	r2, r3, #15
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	601a      	str	r2, [r3, #0]
}
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	44020c00 	.word	0x44020c00
 80042e8:	40022000 	.word	0x40022000

080042ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e049      	b.n	8004392 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f841 	bl	800439a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f000 fa60 	bl	80047f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
	...

080043b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d001      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e07c      	b.n	80044c2 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a3a      	ldr	r2, [pc, #232]	; (80044d0 <HAL_TIM_Base_Start_IT+0x120>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d04a      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0xd0>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a39      	ldr	r2, [pc, #228]	; (80044d4 <HAL_TIM_Base_Start_IT+0x124>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d045      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0xd0>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fc:	d040      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0xd0>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004406:	d03b      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0xd0>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a32      	ldr	r2, [pc, #200]	; (80044d8 <HAL_TIM_Base_Start_IT+0x128>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d036      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0xd0>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a31      	ldr	r2, [pc, #196]	; (80044dc <HAL_TIM_Base_Start_IT+0x12c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d031      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0xd0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a2f      	ldr	r2, [pc, #188]	; (80044e0 <HAL_TIM_Base_Start_IT+0x130>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d02c      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0xd0>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a2e      	ldr	r2, [pc, #184]	; (80044e4 <HAL_TIM_Base_Start_IT+0x134>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d027      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0xd0>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a2c      	ldr	r2, [pc, #176]	; (80044e8 <HAL_TIM_Base_Start_IT+0x138>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d022      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0xd0>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a2b      	ldr	r2, [pc, #172]	; (80044ec <HAL_TIM_Base_Start_IT+0x13c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d01d      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0xd0>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a29      	ldr	r2, [pc, #164]	; (80044f0 <HAL_TIM_Base_Start_IT+0x140>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d018      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0xd0>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a28      	ldr	r2, [pc, #160]	; (80044f4 <HAL_TIM_Base_Start_IT+0x144>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d013      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0xd0>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a26      	ldr	r2, [pc, #152]	; (80044f8 <HAL_TIM_Base_Start_IT+0x148>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00e      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0xd0>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a25      	ldr	r2, [pc, #148]	; (80044fc <HAL_TIM_Base_Start_IT+0x14c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d009      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0xd0>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a23      	ldr	r2, [pc, #140]	; (8004500 <HAL_TIM_Base_Start_IT+0x150>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0xd0>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a22      	ldr	r2, [pc, #136]	; (8004504 <HAL_TIM_Base_Start_IT+0x154>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d115      	bne.n	80044ac <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	4b20      	ldr	r3, [pc, #128]	; (8004508 <HAL_TIM_Base_Start_IT+0x158>)
 8004488:	4013      	ands	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b06      	cmp	r3, #6
 8004490:	d015      	beq.n	80044be <HAL_TIM_Base_Start_IT+0x10e>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004498:	d011      	beq.n	80044be <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044aa:	e008      	b.n	80044be <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e000      	b.n	80044c0 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40012c00 	.word	0x40012c00
 80044d4:	50012c00 	.word	0x50012c00
 80044d8:	40000400 	.word	0x40000400
 80044dc:	50000400 	.word	0x50000400
 80044e0:	40000800 	.word	0x40000800
 80044e4:	50000800 	.word	0x50000800
 80044e8:	40000c00 	.word	0x40000c00
 80044ec:	50000c00 	.word	0x50000c00
 80044f0:	40013400 	.word	0x40013400
 80044f4:	50013400 	.word	0x50013400
 80044f8:	40001800 	.word	0x40001800
 80044fc:	50001800 	.word	0x50001800
 8004500:	40014000 	.word	0x40014000
 8004504:	50014000 	.word	0x50014000
 8004508:	00010007 	.word	0x00010007

0800450c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d020      	beq.n	8004570 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01b      	beq.n	8004570 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0202 	mvn.w	r2, #2
 8004540:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f92c 	bl	80047b4 <HAL_TIM_IC_CaptureCallback>
 800455c:	e005      	b.n	800456a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f91e 	bl	80047a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f92f 	bl	80047c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d020      	beq.n	80045bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01b      	beq.n	80045bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0204 	mvn.w	r2, #4
 800458c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2202      	movs	r2, #2
 8004592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f906 	bl	80047b4 <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f8f8 	bl	80047a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f909 	bl	80047c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d020      	beq.n	8004608 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01b      	beq.n	8004608 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0208 	mvn.w	r2, #8
 80045d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2204      	movs	r2, #4
 80045de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f8e0 	bl	80047b4 <HAL_TIM_IC_CaptureCallback>
 80045f4:	e005      	b.n	8004602 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f8d2 	bl	80047a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f8e3 	bl	80047c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 0310 	and.w	r3, r3, #16
 800460e:	2b00      	cmp	r3, #0
 8004610:	d020      	beq.n	8004654 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01b      	beq.n	8004654 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0210 	mvn.w	r2, #16
 8004624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2208      	movs	r2, #8
 800462a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f8ba 	bl	80047b4 <HAL_TIM_IC_CaptureCallback>
 8004640:	e005      	b.n	800464e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f8ac 	bl	80047a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f8bd 	bl	80047c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00c      	beq.n	8004678 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0201 	mvn.w	r2, #1
 8004670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fc f908 	bl	8000888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f9d2 	bl	8004a40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00c      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f9ca 	bl	8004a54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00c      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f87c 	bl	80047dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00c      	beq.n	8004708 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f06f 0220 	mvn.w	r2, #32
 8004700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f992 	bl	8004a2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00c      	beq.n	800472c <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f99e 	bl	8004a68 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00c      	beq.n	8004750 <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d007      	beq.n	8004750 <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f996 	bl	8004a7c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00c      	beq.n	8004774 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800476c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f98e 	bl	8004a90 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00c      	beq.n	8004798 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f986 	bl	8004aa4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004798:	bf00      	nop
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a74      	ldr	r2, [pc, #464]	; (80049d4 <TIM_Base_SetConfig+0x1e4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d02b      	beq.n	8004860 <TIM_Base_SetConfig+0x70>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a73      	ldr	r2, [pc, #460]	; (80049d8 <TIM_Base_SetConfig+0x1e8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d027      	beq.n	8004860 <TIM_Base_SetConfig+0x70>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004816:	d023      	beq.n	8004860 <TIM_Base_SetConfig+0x70>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800481e:	d01f      	beq.n	8004860 <TIM_Base_SetConfig+0x70>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a6e      	ldr	r2, [pc, #440]	; (80049dc <TIM_Base_SetConfig+0x1ec>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d01b      	beq.n	8004860 <TIM_Base_SetConfig+0x70>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a6d      	ldr	r2, [pc, #436]	; (80049e0 <TIM_Base_SetConfig+0x1f0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d017      	beq.n	8004860 <TIM_Base_SetConfig+0x70>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a6c      	ldr	r2, [pc, #432]	; (80049e4 <TIM_Base_SetConfig+0x1f4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d013      	beq.n	8004860 <TIM_Base_SetConfig+0x70>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a6b      	ldr	r2, [pc, #428]	; (80049e8 <TIM_Base_SetConfig+0x1f8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00f      	beq.n	8004860 <TIM_Base_SetConfig+0x70>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a6a      	ldr	r2, [pc, #424]	; (80049ec <TIM_Base_SetConfig+0x1fc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00b      	beq.n	8004860 <TIM_Base_SetConfig+0x70>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a69      	ldr	r2, [pc, #420]	; (80049f0 <TIM_Base_SetConfig+0x200>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d007      	beq.n	8004860 <TIM_Base_SetConfig+0x70>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a68      	ldr	r2, [pc, #416]	; (80049f4 <TIM_Base_SetConfig+0x204>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d003      	beq.n	8004860 <TIM_Base_SetConfig+0x70>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a67      	ldr	r2, [pc, #412]	; (80049f8 <TIM_Base_SetConfig+0x208>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d108      	bne.n	8004872 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a57      	ldr	r2, [pc, #348]	; (80049d4 <TIM_Base_SetConfig+0x1e4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d05b      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a56      	ldr	r2, [pc, #344]	; (80049d8 <TIM_Base_SetConfig+0x1e8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d057      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004888:	d053      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004890:	d04f      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a51      	ldr	r2, [pc, #324]	; (80049dc <TIM_Base_SetConfig+0x1ec>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d04b      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a50      	ldr	r2, [pc, #320]	; (80049e0 <TIM_Base_SetConfig+0x1f0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d047      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a4f      	ldr	r2, [pc, #316]	; (80049e4 <TIM_Base_SetConfig+0x1f4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d043      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a4e      	ldr	r2, [pc, #312]	; (80049e8 <TIM_Base_SetConfig+0x1f8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d03f      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a4d      	ldr	r2, [pc, #308]	; (80049ec <TIM_Base_SetConfig+0x1fc>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d03b      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a4c      	ldr	r2, [pc, #304]	; (80049f0 <TIM_Base_SetConfig+0x200>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d037      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a4b      	ldr	r2, [pc, #300]	; (80049f4 <TIM_Base_SetConfig+0x204>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d033      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a4a      	ldr	r2, [pc, #296]	; (80049f8 <TIM_Base_SetConfig+0x208>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d02f      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a49      	ldr	r2, [pc, #292]	; (80049fc <TIM_Base_SetConfig+0x20c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d02b      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a48      	ldr	r2, [pc, #288]	; (8004a00 <TIM_Base_SetConfig+0x210>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d027      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a47      	ldr	r2, [pc, #284]	; (8004a04 <TIM_Base_SetConfig+0x214>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d023      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a46      	ldr	r2, [pc, #280]	; (8004a08 <TIM_Base_SetConfig+0x218>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01f      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a45      	ldr	r2, [pc, #276]	; (8004a0c <TIM_Base_SetConfig+0x21c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01b      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a44      	ldr	r2, [pc, #272]	; (8004a10 <TIM_Base_SetConfig+0x220>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d017      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a43      	ldr	r2, [pc, #268]	; (8004a14 <TIM_Base_SetConfig+0x224>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a42      	ldr	r2, [pc, #264]	; (8004a18 <TIM_Base_SetConfig+0x228>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00f      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a41      	ldr	r2, [pc, #260]	; (8004a1c <TIM_Base_SetConfig+0x22c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00b      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a40      	ldr	r2, [pc, #256]	; (8004a20 <TIM_Base_SetConfig+0x230>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d007      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a3f      	ldr	r2, [pc, #252]	; (8004a24 <TIM_Base_SetConfig+0x234>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d003      	beq.n	8004932 <TIM_Base_SetConfig+0x142>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a3e      	ldr	r2, [pc, #248]	; (8004a28 <TIM_Base_SetConfig+0x238>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d108      	bne.n	8004944 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a1a      	ldr	r2, [pc, #104]	; (80049d4 <TIM_Base_SetConfig+0x1e4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d023      	beq.n	80049b8 <TIM_Base_SetConfig+0x1c8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a19      	ldr	r2, [pc, #100]	; (80049d8 <TIM_Base_SetConfig+0x1e8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d01f      	beq.n	80049b8 <TIM_Base_SetConfig+0x1c8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a1e      	ldr	r2, [pc, #120]	; (80049f4 <TIM_Base_SetConfig+0x204>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d01b      	beq.n	80049b8 <TIM_Base_SetConfig+0x1c8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a1d      	ldr	r2, [pc, #116]	; (80049f8 <TIM_Base_SetConfig+0x208>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d017      	beq.n	80049b8 <TIM_Base_SetConfig+0x1c8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a22      	ldr	r2, [pc, #136]	; (8004a14 <TIM_Base_SetConfig+0x224>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d013      	beq.n	80049b8 <TIM_Base_SetConfig+0x1c8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a21      	ldr	r2, [pc, #132]	; (8004a18 <TIM_Base_SetConfig+0x228>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00f      	beq.n	80049b8 <TIM_Base_SetConfig+0x1c8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a20      	ldr	r2, [pc, #128]	; (8004a1c <TIM_Base_SetConfig+0x22c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00b      	beq.n	80049b8 <TIM_Base_SetConfig+0x1c8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a1f      	ldr	r2, [pc, #124]	; (8004a20 <TIM_Base_SetConfig+0x230>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d007      	beq.n	80049b8 <TIM_Base_SetConfig+0x1c8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a1e      	ldr	r2, [pc, #120]	; (8004a24 <TIM_Base_SetConfig+0x234>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d003      	beq.n	80049b8 <TIM_Base_SetConfig+0x1c8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a1d      	ldr	r2, [pc, #116]	; (8004a28 <TIM_Base_SetConfig+0x238>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d103      	bne.n	80049c0 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	615a      	str	r2, [r3, #20]
}
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40012c00 	.word	0x40012c00
 80049d8:	50012c00 	.word	0x50012c00
 80049dc:	40000400 	.word	0x40000400
 80049e0:	50000400 	.word	0x50000400
 80049e4:	40000800 	.word	0x40000800
 80049e8:	50000800 	.word	0x50000800
 80049ec:	40000c00 	.word	0x40000c00
 80049f0:	50000c00 	.word	0x50000c00
 80049f4:	40013400 	.word	0x40013400
 80049f8:	50013400 	.word	0x50013400
 80049fc:	40001800 	.word	0x40001800
 8004a00:	50001800 	.word	0x50001800
 8004a04:	40001c00 	.word	0x40001c00
 8004a08:	50001c00 	.word	0x50001c00
 8004a0c:	40002000 	.word	0x40002000
 8004a10:	50002000 	.word	0x50002000
 8004a14:	40014000 	.word	0x40014000
 8004a18:	50014000 	.word	0x50014000
 8004a1c:	40014400 	.word	0x40014400
 8004a20:	50014400 	.word	0x50014400
 8004a24:	40014800 	.word	0x40014800
 8004a28:	50014800 	.word	0x50014800

08004a2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <nx_eth_phy_init>:
  * @param  none
  * @retval ETH_PHY_STATUS_OK on success, ETH_PHY_STATUS_ERROR otherwise
  */

int32_t nx_eth_phy_init(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
    int32_t ret = ETH_PHY_STATUS_ERROR;
 8004abe:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac2:	607b      	str	r3, [r7, #4]
    /* Set PHY IO functions */

    LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004ac4:	4908      	ldr	r1, [pc, #32]	; (8004ae8 <nx_eth_phy_init+0x30>)
 8004ac6:	4809      	ldr	r0, [pc, #36]	; (8004aec <nx_eth_phy_init+0x34>)
 8004ac8:	f7fc f9ef 	bl	8000eaa <LAN8742_RegisterBusIO>
    /* Initialize the LAN8742 ETH PHY */

    if (LAN8742_Init(&LAN8742) == LAN8742_STATUS_OK)
 8004acc:	4807      	ldr	r0, [pc, #28]	; (8004aec <nx_eth_phy_init+0x34>)
 8004ace:	f7fc fa1e 	bl	8000f0e <LAN8742_Init>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <nx_eth_phy_init+0x24>
    {
        ret = ETH_PHY_STATUS_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	607b      	str	r3, [r7, #4]
    }

    return ret;
 8004adc:	687b      	ldr	r3, [r7, #4]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	2000000c 	.word	0x2000000c
 8004aec:	20014770 	.word	0x20014770

08004af0 <nx_eth_phy_get_link_state>:
  * @param  none
  * @retval the link status.
  */

int32_t nx_eth_phy_get_link_state(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
    int32_t  linkstate = LAN8742_GetLinkState(&LAN8742);
 8004af6:	4804      	ldr	r0, [pc, #16]	; (8004b08 <nx_eth_phy_get_link_state+0x18>)
 8004af8:	f7fc fab4 	bl	8001064 <LAN8742_GetLinkState>
 8004afc:	6078      	str	r0, [r7, #4]

    return linkstate;
 8004afe:	687b      	ldr	r3, [r7, #4]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20014770 	.word	0x20014770

08004b0c <lan8742_io_init>:
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */

int32_t lan8742_io_init(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&eth_handle);
 8004b10:	4802      	ldr	r0, [pc, #8]	; (8004b1c <lan8742_io_init+0x10>)
 8004b12:	f7fd fc69 	bl	80023e8 <HAL_ETH_SetMDIOClockRange>

  return ETH_PHY_STATUS_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20007e64 	.word	0x20007e64

08004b20 <lan8742_io_deinit>:
  * @brief  De-Initialize the MDIO interface
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t lan8742_io_deinit (void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
    return ETH_PHY_STATUS_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <lan8742_io_read_reg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t lan8742_io_read_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&eth_handle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	68f9      	ldr	r1, [r7, #12]
 8004b42:	4807      	ldr	r0, [pc, #28]	; (8004b60 <lan8742_io_read_reg+0x30>)
 8004b44:	f7fd f9a0 	bl	8001e88 <HAL_ETH_ReadPHYRegister>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <lan8742_io_read_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8004b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b52:	e000      	b.n	8004b56 <lan8742_io_read_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20007e64 	.word	0x20007e64

08004b64 <lan8742_io_write_reg>:

int32_t lan8742_io_write_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&eth_handle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	68f9      	ldr	r1, [r7, #12]
 8004b76:	4807      	ldr	r0, [pc, #28]	; (8004b94 <lan8742_io_write_reg+0x30>)
 8004b78:	f7fd f9da 	bl	8001f30 <HAL_ETH_WritePHYRegister>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <lan8742_io_write_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8004b82:	f04f 33ff 	mov.w	r3, #4294967295
 8004b86:	e000      	b.n	8004b8a <lan8742_io_write_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20007e64 	.word	0x20007e64

08004b98 <lan8742_io_get_tick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t lan8742_io_get_tick(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004b9c:	f7fc fb9c 	bl	80012d8 <HAL_GetTick>
 8004ba0:	4603      	mov	r3, r0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <nx_stm32_eth_driver>:
/*                                                                        */
/**************************************************************************/
/****** DRIVER SPECIFIC ****** Start of part/vendor specific global driver entry function name.  */
VOID  nx_stm32_eth_driver(NX_IP_DRIVER *driver_req_ptr)
/****** DRIVER SPECIFIC ****** End of part/vendor specific global driver entry function name.  */
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	605a      	str	r2, [r3, #4]

  /* Process according to the driver request type in the IP control
  block.  */
  switch (driver_req_ptr -> nx_ip_driver_command)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b16      	cmp	r3, #22
 8004bbc:	d85c      	bhi.n	8004c78 <nx_stm32_eth_driver+0xd0>
 8004bbe:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <nx_stm32_eth_driver+0x1c>)
 8004bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc4:	08004c41 	.word	0x08004c41
 8004bc8:	08004c29 	.word	0x08004c29
 8004bcc:	08004c31 	.word	0x08004c31
 8004bd0:	08004c39 	.word	0x08004c39
 8004bd4:	08004c41 	.word	0x08004c41
 8004bd8:	08004c41 	.word	0x08004c41
 8004bdc:	08004c41 	.word	0x08004c41
 8004be0:	08004c41 	.word	0x08004c41
 8004be4:	08004c49 	.word	0x08004c49
 8004be8:	08004c51 	.word	0x08004c51
 8004bec:	08004c59 	.word	0x08004c59
 8004bf0:	08004c79 	.word	0x08004c79
 8004bf4:	08004c79 	.word	0x08004c79
 8004bf8:	08004c79 	.word	0x08004c79
 8004bfc:	08004c79 	.word	0x08004c79
 8004c00:	08004c79 	.word	0x08004c79
 8004c04:	08004c79 	.word	0x08004c79
 8004c08:	08004c79 	.word	0x08004c79
 8004c0c:	08004c61 	.word	0x08004c61
 8004c10:	08004c21 	.word	0x08004c21
 8004c14:	08004c79 	.word	0x08004c79
 8004c18:	08004c69 	.word	0x08004c69
 8004c1c:	08004c71 	.word	0x08004c71
  {

  case NX_LINK_INTERFACE_ATTACH:

    /* Process link interface attach requests.  */
    _nx_driver_interface_attach(driver_req_ptr);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f835 	bl	8004c90 <_nx_driver_interface_attach>
    break;
 8004c26:	e02e      	b.n	8004c86 <nx_stm32_eth_driver+0xde>

  case NX_LINK_INITIALIZE:
    {

      /* Process link initialize requests.  */
      _nx_driver_initialize(driver_req_ptr);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f849 	bl	8004cc0 <_nx_driver_initialize>
      break;
 8004c2e:	e02a      	b.n	8004c86 <nx_stm32_eth_driver+0xde>

  case NX_LINK_ENABLE:
    {

      /* Process link enable requests.  */
      _nx_driver_enable(driver_req_ptr);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f8b9 	bl	8004da8 <_nx_driver_enable>
      break;
 8004c36:	e026      	b.n	8004c86 <nx_stm32_eth_driver+0xde>

  case NX_LINK_DISABLE:
    {

      /* Process link disable requests.  */
      _nx_driver_disable(driver_req_ptr);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f93d 	bl	8004eb8 <_nx_driver_disable>
      break;
 8004c3e:	e022      	b.n	8004c86 <nx_stm32_eth_driver+0xde>
  case NX_LINK_RARP_SEND:
  case NX_LINK_PACKET_SEND:
    {

      /* Process packet send requests.  */
      _nx_driver_packet_send(driver_req_ptr);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f963 	bl	8004f0c <_nx_driver_packet_send>
      break;
 8004c46:	e01e      	b.n	8004c86 <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_JOIN:
    {

      /* Process multicast join requests.  */
      _nx_driver_multicast_join(driver_req_ptr);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fa21 	bl	8005090 <_nx_driver_multicast_join>
      break;
 8004c4e:	e01a      	b.n	8004c86 <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_LEAVE:
    {

      /* Process multicast leave requests.  */
      _nx_driver_multicast_leave(driver_req_ptr);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fa33 	bl	80050bc <_nx_driver_multicast_leave>
      break;
 8004c56:	e016      	b.n	8004c86 <nx_stm32_eth_driver+0xde>

  case NX_LINK_GET_STATUS:
    {

      /* Process get status requests.  */
      _nx_driver_get_status(driver_req_ptr);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fa45 	bl	80050e8 <_nx_driver_get_status>
      break;
 8004c5e:	e012      	b.n	8004c86 <nx_stm32_eth_driver+0xde>
    {

      /* Process driver deferred requests.  */

      /* Process a device driver function on behave of the IP thread. */
      _nx_driver_deferred_processing(driver_req_ptr);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fa7f 	bl	8005164 <_nx_driver_deferred_processing>

      break;
 8004c66:	e00e      	b.n	8004c86 <nx_stm32_eth_driver+0xde>
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  case NX_INTERFACE_CAPABILITY_GET:
    {

      /* Process get capability requests.  */
      _nx_driver_capability_get(driver_req_ptr);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fa53 	bl	8005114 <_nx_driver_capability_get>
      break;
 8004c6e:	e00a      	b.n	8004c86 <nx_stm32_eth_driver+0xde>

  case NX_INTERFACE_CAPABILITY_SET:
    {

      /* Process set capability requests.  */
      _nx_driver_capability_set(driver_req_ptr);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fa61 	bl	8005138 <_nx_driver_capability_set>
      break;
 8004c76:	e006      	b.n	8004c86 <nx_stm32_eth_driver+0xde>


    /* Invalid driver request.  */

    /* Return the unhandled command status.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_UNHANDLED_COMMAND;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2244      	movs	r2, #68	; 0x44
 8004c7c:	605a      	str	r2, [r3, #4]

    /* Default to successful return.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	225a      	movs	r2, #90	; 0x5a
 8004c82:	605a      	str	r2, [r3, #4]
  }
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop

08004c90 <_nx_driver_interface_attach>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_interface_attach(NX_IP_DRIVER *driver_req_ptr)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]


  /* Setup the driver's interface.  This example is for a simple one-interface
  Ethernet driver. Additional logic is necessary for multiple port devices.  */
  nx_driver_information.nx_driver_information_interface =  driver_req_ptr -> nx_ip_driver_interface;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	4a07      	ldr	r2, [pc, #28]	; (8004cbc <_nx_driver_interface_attach+0x2c>)
 8004c9e:	60d3      	str	r3, [r2, #12]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  driver_req_ptr -> nx_ip_driver_interface -> nx_interface_capability_flag = NX_DRIVER_CAPABILITY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  /* Return successful status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	605a      	str	r2, [r3, #4]
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	20014790 	.word	0x20014790

08004cc0 <_nx_driver_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UINT            status;
  CHAR           *payload_address;       /* Address of the first payload*/
  VOID           *rounded_pool_start;    /* Rounded stating address     */

  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	61fb      	str	r3, [r7, #28]

  /* Setup interface pointer.  */
  interface_ptr = driver_req_ptr -> nx_ip_driver_interface;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	61bb      	str	r3, [r7, #24]

  /* Initialize the driver's information structure.  */

  /* Default IP pointer to NULL.  */
  nx_driver_information.nx_driver_information_ip_ptr =               NX_NULL;
 8004cd4:	4b31      	ldr	r3, [pc, #196]	; (8004d9c <_nx_driver_initialize+0xdc>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]

  /* Setup the driver state to not initialized.  */
  nx_driver_information.nx_driver_information_state =                NX_DRIVER_STATE_NOT_INITIALIZED;
 8004cda:	4b30      	ldr	r3, [pc, #192]	; (8004d9c <_nx_driver_initialize+0xdc>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	605a      	str	r2, [r3, #4]

  /* Setup the default packet pool for the driver's received packets.  */
  nx_driver_information.nx_driver_information_packet_pool_ptr = ip_ptr -> nx_ip_default_packet_pool;
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004ce6:	4a2d      	ldr	r2, [pc, #180]	; (8004d9c <_nx_driver_initialize+0xdc>)
 8004ce8:	6093      	str	r3, [r2, #8]

  /* Get the rounded start pool start. */
  rounded_pool_start = nx_driver_information.nx_driver_information_packet_pool_ptr->nx_packet_pool_start;
 8004cea:	4b2c      	ldr	r3, [pc, #176]	; (8004d9c <_nx_driver_initialize+0xdc>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	617b      	str	r3, [r7, #20]

  /* Calculate the address of payload. */
  payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	333c      	adds	r3, #60	; 0x3c
 8004cf6:	613b      	str	r3, [r7, #16]

  /* Align the address of payload. */
  payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	3303      	adds	r3, #3
 8004cfc:	f023 0303 	bic.w	r3, r3, #3
 8004d00:	613b      	str	r3, [r7, #16]

  /* Calculate the header size. */
  header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	4a25      	ldr	r2, [pc, #148]	; (8004da0 <_nx_driver_initialize+0xe0>)
 8004d0a:	6013      	str	r3, [r2, #0]

  /* Clear the deferred events for the driver.  */
  nx_driver_information.nx_driver_information_deferred_events =       0;
 8004d0c:	4b23      	ldr	r3, [pc, #140]	; (8004d9c <_nx_driver_initialize+0xdc>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	611a      	str	r2, [r3, #16]

  /* Call the hardware-specific ethernet controller initialization.  */
  status =  _nx_driver_hardware_initialize(driver_req_ptr);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fabc 	bl	8005290 <_nx_driver_hardware_initialize>
 8004d18:	60f8      	str	r0, [r7, #12]

  /* Determine if the request was successful.  */
  if (status == NX_SUCCESS)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d136      	bne.n	8004d8e <_nx_driver_initialize+0xce>
  {

    /* Successful hardware initialization.  */

    /* Setup driver information to point to IP pointer.  */
    nx_driver_information.nx_driver_information_ip_ptr = driver_req_ptr -> nx_ip_driver_ptr;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	4a1d      	ldr	r2, [pc, #116]	; (8004d9c <_nx_driver_initialize+0xdc>)
 8004d26:	6013      	str	r3, [r2, #0]

    /* Setup the link maximum transfer unit. */
    interface_ptr -> nx_interface_ip_mtu_size =  NX_DRIVER_ETHERNET_MTU - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the physical address of this IP instance.  Increment the
    physical address lsw to simulate multiple nodes hanging on the
    ethernet.  */
    interface_ptr -> nx_interface_physical_address_msw =
      (ULONG)(( eth_handle.Init.MACAddr[0] << 8) | ( eth_handle.Init.MACAddr[1]));
 8004d30:	4b1c      	ldr	r3, [pc, #112]	; (8004da4 <_nx_driver_initialize+0xe4>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	4a1a      	ldr	r2, [pc, #104]	; (8004da4 <_nx_driver_initialize+0xe4>)
 8004d3a:	6852      	ldr	r2, [r2, #4]
 8004d3c:	3201      	adds	r2, #1
 8004d3e:	7812      	ldrb	r2, [r2, #0]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_msw =
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	60da      	str	r2, [r3, #12]
    interface_ptr -> nx_interface_physical_address_lsw =
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8004d48:	4b16      	ldr	r3, [pc, #88]	; (8004da4 <_nx_driver_initialize+0xe4>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	061a      	lsls	r2, r3, #24
 8004d52:	4b14      	ldr	r3, [pc, #80]	; (8004da4 <_nx_driver_initialize+0xe4>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	3303      	adds	r3, #3
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	041b      	lsls	r3, r3, #16
 8004d5c:	431a      	orrs	r2, r3
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 8004d5e:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <_nx_driver_initialize+0xe4>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	3304      	adds	r3, #4
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	021b      	lsls	r3, r3, #8
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8004d68:	4313      	orrs	r3, r2
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 8004d6a:	4a0e      	ldr	r2, [pc, #56]	; (8004da4 <_nx_driver_initialize+0xe4>)
 8004d6c:	6852      	ldr	r2, [r2, #4]
 8004d6e:	3205      	adds	r2, #5
 8004d70:	7812      	ldrb	r2, [r2, #0]
 8004d72:	4313      	orrs	r3, r2
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8004d74:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_lsw =
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	611a      	str	r2, [r3, #16]

    /* Indicate to the IP software that IP to physical mapping
    is required.  */
    interface_ptr -> nx_interface_address_mapping_needed =  NX_TRUE;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	715a      	strb	r2, [r3, #5]

    /* Move the driver's state to initialized.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_INITIALIZED;
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <_nx_driver_initialize+0xdc>)
 8004d82:	2203      	movs	r2, #3
 8004d84:	605a      	str	r2, [r3, #4]

    /* Indicate successful initialize.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	605a      	str	r2, [r3, #4]
  {

    /* Initialization failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
  }
}
 8004d8c:	e002      	b.n	8004d94 <_nx_driver_initialize+0xd4>
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	225a      	movs	r2, #90	; 0x5a
 8004d92:	605a      	str	r2, [r3, #4]
}
 8004d94:	bf00      	nop
 8004d96:	3720      	adds	r7, #32
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	20014790 	.word	0x20014790
 8004da0:	200147dc 	.word	0x200147dc
 8004da4:	20007e64 	.word	0x20007e64

08004da8 <_nx_driver_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b0a0      	sub	sp, #128	; 0x80
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]

  NX_IP           *ip_ptr;
  ETH_MACConfigTypeDef MACConf;
  UINT            status, duplex, speed = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	67bb      	str	r3, [r7, #120]	; 0x78
  INT             PHYLinkState;

  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	677b      	str	r3, [r7, #116]	; 0x74

  /* See if we can honor the NX_LINK_ENABLE request.  */
  if (nx_driver_information.nx_driver_information_state < NX_DRIVER_STATE_INITIALIZED)
 8004dba:	4b3d      	ldr	r3, [pc, #244]	; (8004eb0 <_nx_driver_enable+0x108>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d803      	bhi.n	8004dca <_nx_driver_enable+0x22>
  {

    /* Mark the request as not successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	225a      	movs	r2, #90	; 0x5a
 8004dc6:	605a      	str	r2, [r3, #4]
    return;
 8004dc8:	e06e      	b.n	8004ea8 <_nx_driver_enable+0x100>
  }

  /* Check if it is enabled by someone already */
  if (nx_driver_information.nx_driver_information_state >=  NX_DRIVER_STATE_LINK_ENABLED)
 8004dca:	4b39      	ldr	r3, [pc, #228]	; (8004eb0 <_nx_driver_enable+0x108>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d903      	bls.n	8004dda <_nx_driver_enable+0x32>
  {

    /* Yes, the request has already been made.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_ALREADY_ENABLED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2215      	movs	r2, #21
 8004dd6:	605a      	str	r2, [r3, #4]
    return;
 8004dd8:	e066      	b.n	8004ea8 <_nx_driver_enable+0x100>
  }

  if (nx_eth_phy_init() != ETH_PHY_STATUS_OK)
 8004dda:	f7ff fe6d 	bl	8004ab8 <nx_eth_phy_init>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <_nx_driver_enable+0x44>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	225a      	movs	r2, #90	; 0x5a
 8004de8:	605a      	str	r2, [r3, #4]
    return;
 8004dea:	e05d      	b.n	8004ea8 <_nx_driver_enable+0x100>
  }

  PHYLinkState = nx_eth_phy_get_link_state();
 8004dec:	f7ff fe80 	bl	8004af0 <nx_eth_phy_get_link_state>
 8004df0:	6738      	str	r0, [r7, #112]	; 0x70

  /* Get link state */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 8004df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	dc03      	bgt.n	8004e00 <_nx_driver_enable+0x58>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	225a      	movs	r2, #90	; 0x5a
 8004dfc:	605a      	str	r2, [r3, #4]
    return;
 8004dfe:	e053      	b.n	8004ea8 <_nx_driver_enable+0x100>
  }
  else
  {
    switch (PHYLinkState)
 8004e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e02:	3b02      	subs	r3, #2
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d823      	bhi.n	8004e50 <_nx_driver_enable+0xa8>
 8004e08:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <_nx_driver_enable+0x68>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004e21 	.word	0x08004e21
 8004e14:	08004e2f 	.word	0x08004e2f
 8004e18:	08004e3b 	.word	0x08004e3b
 8004e1c:	08004e47 	.word	0x08004e47
      duplex = ETH_HALFDUPLEX_MODE;
      speed = ETH_SPEED_1000M;
      break;
#endif
case ETH_PHY_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e24:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8004e26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e2a:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e2c:	e017      	b.n	8004e5e <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8004e32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e36:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e38:	e011      	b.n	8004e5e <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004e3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_10M;
 8004e40:	2300      	movs	r3, #0
 8004e42:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e44:	e00b      	b.n	8004e5e <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004e46:	2300      	movs	r3, #0
 8004e48:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_10M;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e4e:	e006      	b.n	8004e5e <_nx_driver_enable+0xb6>
    default:
      duplex = ETH_FULLDUPLEX_MODE;
 8004e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e54:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8004e56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e5a:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e5c:	bf00      	nop
    }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&eth_handle, &MACConf);
 8004e5e:	f107 0308 	add.w	r3, r7, #8
 8004e62:	4619      	mov	r1, r3
 8004e64:	4813      	ldr	r0, [pc, #76]	; (8004eb4 <_nx_driver_enable+0x10c>)
 8004e66:	f7fd f8b7 	bl	8001fd8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004e6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e6c:	623b      	str	r3, [r7, #32]
    MACConf.Speed = speed;
 8004e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e70:	61fb      	str	r3, [r7, #28]
    MACConf.PortSelect = 0;
#else
    MACConf.PortSelect = 1;
#endif
#endif
    HAL_ETH_SetMACConfig(&eth_handle, &MACConf);
 8004e72:	f107 0308 	add.w	r3, r7, #8
 8004e76:	4619      	mov	r1, r3
 8004e78:	480e      	ldr	r0, [pc, #56]	; (8004eb4 <_nx_driver_enable+0x10c>)
 8004e7a:	f7fd fa81 	bl	8002380 <HAL_ETH_SetMACConfig>
  }

  /* Call hardware specific enable.  */
  status =  _nx_driver_hardware_enable(driver_req_ptr);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fa7e 	bl	8005380 <_nx_driver_hardware_enable>
 8004e84:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* Was the hardware enable successful?  */
  if (status == NX_SUCCESS)
 8004e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10a      	bne.n	8004ea2 <_nx_driver_enable+0xfa>
  {

    /* Update the driver state to link enabled.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_LINK_ENABLED;
 8004e8c:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <_nx_driver_enable+0x108>)
 8004e8e:	2204      	movs	r2, #4
 8004e90:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	605a      	str	r2, [r3, #4]

    /* Mark the IP instance as link up.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_TRUE;
 8004e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726
 8004ea0:	e002      	b.n	8004ea8 <_nx_driver_enable+0x100>
  }
  else
  {

    /* Enable failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	225a      	movs	r2, #90	; 0x5a
 8004ea6:	605a      	str	r2, [r3, #4]
  }
}
 8004ea8:	3780      	adds	r7, #128	; 0x80
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20014790 	.word	0x20014790
 8004eb4:	20007e64 	.word	0x20007e64

08004eb8 <_nx_driver_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  NX_IP           *ip_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Check if the link is enabled.  */
  if (nx_driver_information.nx_driver_information_state !=  NX_DRIVER_STATE_LINK_ENABLED)
 8004ec6:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <_nx_driver_disable+0x50>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d003      	beq.n	8004ed6 <_nx_driver_disable+0x1e>
  {

    /* The link is not enabled, so just return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	225a      	movs	r2, #90	; 0x5a
 8004ed2:	605a      	str	r2, [r3, #4]
    return;
 8004ed4:	e014      	b.n	8004f00 <_nx_driver_disable+0x48>
  }

  /* Call hardware specific disable.  */
  status =  _nx_driver_hardware_disable(driver_req_ptr);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fa60 	bl	800539c <_nx_driver_hardware_disable>
 8004edc:	60b8      	str	r0, [r7, #8]

  /* Was the hardware disable successful?  */
  if (status == NX_SUCCESS)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10a      	bne.n	8004efa <_nx_driver_disable+0x42>
  {

    /* Mark the IP instance as link down.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_FALSE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726

    /* Update the driver state back to initialized.  */
    nx_driver_information.nx_driver_information_state =  NX_DRIVER_STATE_INITIALIZED;
 8004eec:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <_nx_driver_disable+0x50>)
 8004eee:	2203      	movs	r2, #3
 8004ef0:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	605a      	str	r2, [r3, #4]
 8004ef8:	e002      	b.n	8004f00 <_nx_driver_disable+0x48>
  }
  else
  {

    /* Disable failed, return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	225a      	movs	r2, #90	; 0x5a
 8004efe:	605a      	str	r2, [r3, #4]
  }
}
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20014790 	.word	0x20014790

08004f0c <_nx_driver_packet_send>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_packet_send(NX_IP_DRIVER *driver_req_ptr)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  ULONG           *ethernet_frame_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	617b      	str	r3, [r7, #20]

  /* Check to make sure the link is up.  */
  if (nx_driver_information.nx_driver_information_state != NX_DRIVER_STATE_LINK_ENABLED)
 8004f1a:	4b5c      	ldr	r3, [pc, #368]	; (800508c <_nx_driver_packet_send+0x180>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d008      	beq.n	8004f34 <_nx_driver_packet_send+0x28>
  {

    /* Inidate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	225a      	movs	r2, #90	; 0x5a
 8004f26:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(driver_req_ptr -> nx_ip_driver_packet);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3310      	adds	r3, #16
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f006 fa2b 	bl	800b388 <_nxe_packet_transmit_release>
    return;
 8004f32:	e0a7      	b.n	8005084 <_nx_driver_packet_send+0x178>
  }

  /* Process driver send packet.  */

  /* Place the ethernet frame at the front of the packet.  */
  packet_ptr =  driver_req_ptr -> nx_ip_driver_packet;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	60bb      	str	r3, [r7, #8]

  /* Adjust the prepend pointer.  */
  packet_ptr -> nx_packet_prepend_ptr =
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	689a      	ldr	r2, [r3, #8]
  packet_ptr -> nx_packet_prepend_ptr =
 8004f3e:	68bb      	ldr	r3, [r7, #8]
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004f40:	3a0e      	subs	r2, #14
  packet_ptr -> nx_packet_prepend_ptr =
 8004f42:	609a      	str	r2, [r3, #8]

  /* Adjust the packet length.  */
  packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	320e      	adds	r2, #14
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Setup the ethernet frame pointer to build the ethernet frame.  Backup another 2
  * bytes to get 32-bit word alignment.  */
  ethernet_frame_ptr =  (ULONG *) (packet_ptr -> nx_packet_prepend_ptr - 2);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	3b02      	subs	r3, #2
 8004f54:	613b      	str	r3, [r7, #16]

  /* Set up the hardware addresses in the Ethernet header. */
  *ethernet_frame_ptr       =  driver_req_ptr -> nx_ip_driver_physical_address_msw;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 1) =  driver_req_ptr -> nx_ip_driver_physical_address_lsw;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	3304      	adds	r3, #4
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	68d2      	ldr	r2, [r2, #12]
 8004f66:	601a      	str	r2, [r3, #0]

  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8004f6e:	0419      	lsls	r1, r3, #16
    (ip_ptr -> nx_ip_arp_physical_address_lsw >> 16);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f8d3 3730 	ldr.w	r3, [r3, #1840]	; 0x730
 8004f76:	0c1a      	lsrs	r2, r3, #16
  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 3) =  (ip_ptr -> nx_ip_arp_physical_address_lsw << 16);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f8d3 2730 	ldr.w	r2, [r3, #1840]	; 0x730
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	330c      	adds	r3, #12
 8004f8a:	0412      	lsls	r2, r2, #16
 8004f8c:	601a      	str	r2, [r3, #0]

  /* Set up the frame type field in the Ethernet harder. */
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b05      	cmp	r3, #5
 8004f94:	d003      	beq.n	8004f9e <_nx_driver_packet_send+0x92>
      (driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_RESPONSE_SEND))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 8004f9a:	2b06      	cmp	r3, #6
 8004f9c:	d10a      	bne.n	8004fb4 <_nx_driver_packet_send+0xa8>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_ARP;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	320c      	adds	r2, #12
 8004fa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004fac:	f043 0306 	orr.w	r3, r3, #6
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	e016      	b.n	8004fe2 <_nx_driver_packet_send+0xd6>
  }
  else if(driver_req_ptr -> nx_ip_driver_command == NX_LINK_RARP_SEND)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b07      	cmp	r3, #7
 8004fba:	d10a      	bne.n	8004fd2 <_nx_driver_packet_send+0xc6>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_RARP;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	330c      	adds	r3, #12
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	320c      	adds	r2, #12
 8004fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fca:	f043 0335 	orr.w	r3, r3, #53	; 0x35
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	e007      	b.n	8004fe2 <_nx_driver_packet_send+0xd6>
#endif /* FEATURE_NX_IPV6 */

  else
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IP;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	330c      	adds	r3, #12
 8004fdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fe0:	601a      	str	r2, [r3, #0]
  }

  /* Endian swapping if NX_LITTLE_ENDIAN is defined.  */
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr));
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	ba1a      	rev	r2, r3
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 1));
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	ba12      	rev	r2, r2
 8004ff8:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 2));
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	3308      	adds	r3, #8
 8005004:	ba12      	rev	r2, r2
 8005006:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 3));
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	330c      	adds	r3, #12
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	330c      	adds	r3, #12
 8005012:	ba12      	rev	r2, r2
 8005014:	601a      	str	r2, [r3, #0]

  /* Determine if the packet exceeds the driver's MTU.  */
  if (packet_ptr -> nx_packet_length > NX_DRIVER_ETHERNET_MTU)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800501e:	4293      	cmp	r3, r2
 8005020:	d912      	bls.n	8005048 <_nx_driver_packet_send+0x13c>
  {

    /* This packet exceeds the size of the driver's MTU. Simply throw it away! */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	320e      	adds	r2, #14
 800502a:	609a      	str	r2, [r3, #8]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	3a0e      	subs	r2, #14
 8005034:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	225a      	movs	r2, #90	; 0x5a
 800503a:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 800503c:	f107 0308 	add.w	r3, r7, #8
 8005040:	4618      	mov	r0, r3
 8005042:	f006 f9a1 	bl	800b388 <_nxe_packet_transmit_release>
    return;
 8005046:	e01d      	b.n	8005084 <_nx_driver_packet_send+0x178>
  }

  /* Transmit the packet through the Ethernet controller low level access routine. */
  status = _nx_driver_hardware_packet_send(packet_ptr);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f9b4 	bl	80053b8 <_nx_driver_hardware_packet_send>
 8005050:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d012      	beq.n	800507e <_nx_driver_packet_send+0x172>
  {

    /* Driver's hardware send packet routine failed to send the packet.  */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	320e      	adds	r2, #14
 8005060:	609a      	str	r2, [r3, #8]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	3a0e      	subs	r2, #14
 800506a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	225a      	movs	r2, #90	; 0x5a
 8005070:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 8005072:	f107 0308 	add.w	r3, r7, #8
 8005076:	4618      	mov	r0, r3
 8005078:	f006 f986 	bl	800b388 <_nxe_packet_transmit_release>
 800507c:	e002      	b.n	8005084 <_nx_driver_packet_send+0x178>
  }
  else
  {

    /* Set the status of the request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	605a      	str	r2, [r3, #4]
  }
}
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20014790 	.word	0x20014790

08005090 <_nx_driver_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast join function. */
  status =  _nx_driver_hardware_multicast_join(driver_req_ptr);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fa25 	bl	80054e8 <_nx_driver_hardware_multicast_join>
 800509e:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <_nx_driver_multicast_join+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	225a      	movs	r2, #90	; 0x5a
 80050aa:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 80050ac:	e002      	b.n	80050b4 <_nx_driver_multicast_join+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	605a      	str	r2, [r3, #4]
}
 80050b4:	bf00      	nop
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <_nx_driver_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast leave function. */
  status =  _nx_driver_hardware_multicast_leave(driver_req_ptr);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fa2b 	bl	8005520 <_nx_driver_hardware_multicast_leave>
 80050ca:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <_nx_driver_multicast_leave+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	225a      	movs	r2, #90	; 0x5a
 80050d6:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 80050d8:	e002      	b.n	80050e0 <_nx_driver_multicast_leave+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	605a      	str	r2, [r3, #4]
}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <_nx_driver_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_get_status(driver_req_ptr);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 fa35 	bl	8005560 <_nx_driver_hardware_get_status>
 80050f6:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <_nx_driver_get_status+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	225a      	movs	r2, #90	; 0x5a
 8005102:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8005104:	e002      	b.n	800510c <_nx_driver_get_status+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	605a      	str	r2, [r3, #4]
}
 800510c:	bf00      	nop
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <_nx_driver_capability_get>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_get(NX_IP_DRIVER *driver_req_ptr)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]

  /* Return the capability of the Ethernet controller.  */
  *(driver_req_ptr -> nx_ip_driver_return_ptr) = NX_DRIVER_CAPABILITY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005124:	601a      	str	r2, [r3, #0]

  /* Return the success status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	605a      	str	r2, [r3, #4]
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <_nx_driver_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_capability_set(driver_req_ptr);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fab3 	bl	80056ac <_nx_driver_hardware_capability_set>
 8005146:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <_nx_driver_capability_set+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	225a      	movs	r2, #90	; 0x5a
 8005152:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8005154:	e002      	b.n	800515c <_nx_driver_capability_set+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	605a      	str	r2, [r3, #4]
}
 800515c:	bf00      	nop
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <_nx_driver_deferred_processing>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_deferred_processing(NX_IP_DRIVER *driver_req_ptr)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800516c:	f3ef 8310 	mrs	r3, PRIMASK
 8005170:	613b      	str	r3, [r7, #16]
#endif
    return(posture);
 8005172:	693b      	ldr	r3, [r7, #16]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8005174:	60fb      	str	r3, [r7, #12]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8005176:	b672      	cpsid	i
#endif
    return(int_posture);
 8005178:	68fb      	ldr	r3, [r7, #12]

    ULONG       deferred_events;


  /* Disable interrupts.  */
  TX_DISABLE
 800517a:	61fb      	str	r3, [r7, #28]

    /* Pickup deferred events.  */
    deferred_events =  nx_driver_information.nx_driver_information_deferred_events;
 800517c:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <_nx_driver_deferred_processing+0x5c>)
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	61bb      	str	r3, [r7, #24]
  nx_driver_information.nx_driver_information_deferred_events =  0;
 8005182:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <_nx_driver_deferred_processing+0x5c>)
 8005184:	2200      	movs	r2, #0
 8005186:	611a      	str	r2, [r3, #16]
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f383 8810 	msr	PRIMASK, r3
}
 8005192:	bf00      	nop

  /* Restore interrupts.  */
  TX_RESTORE
    /* Check for a transmit complete event.  */
    if(deferred_events & NX_DRIVER_DEFERRED_PACKET_TRANSMITTED)
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <_nx_driver_deferred_processing+0x40>
    {

      /* Process transmitted packet(s).  */
      HAL_ETH_ReleaseTxPacket(&eth_handle);
 800519e:	4809      	ldr	r0, [pc, #36]	; (80051c4 <_nx_driver_deferred_processing+0x60>)
 80051a0:	f7fc fcdf 	bl	8001b62 <HAL_ETH_ReleaseTxPacket>
    }
  /* Check for received packet.  */
  if(deferred_events & NX_DRIVER_DEFERRED_PACKET_RECEIVED)
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <_nx_driver_deferred_processing+0x4e>
  {

    /* Process received packet(s).  */
    _nx_driver_hardware_packet_received();
 80051ae:	f000 fa09 	bl	80055c4 <_nx_driver_hardware_packet_received>
  }

  /* Mark request as successful.  */
  driver_req_ptr->nx_ip_driver_status =  NX_SUCCESS;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	605a      	str	r2, [r3, #4]
}
 80051b8:	bf00      	nop
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	20014790 	.word	0x20014790
 80051c4:	20007e64 	.word	0x20007e64

080051c8 <_nx_driver_transfer_to_netx>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID _nx_driver_transfer_to_netx(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]

  USHORT    packet_type;


  /* Set the interface for the incoming packet.  */
  packet_ptr -> nx_packet_ip_interface = nx_driver_information.nx_driver_information_interface;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	4a2d      	ldr	r2, [pc, #180]	; (800528c <_nx_driver_transfer_to_netx+0xc4>)
 80051d6:	68d2      	ldr	r2, [r2, #12]
 80051d8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Pickup the packet header to determine where the packet needs to be
  sent.  */
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	330c      	adds	r3, #12
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	021b      	lsls	r3, r3, #8
 80051e6:	b29a      	uxth	r2, r3
    ((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+13)));
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	330d      	adds	r3, #13
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	b29b      	uxth	r3, r3
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 80051f2:	4313      	orrs	r3, r2
 80051f4:	81fb      	strh	r3, [r7, #14]

  /* Route the incoming packet according to its ethernet type.  */
  if (packet_type == NX_DRIVER_ETHERNET_IP || packet_type == NX_DRIVER_ETHERNET_IPV6)
 80051f6:	89fb      	ldrh	r3, [r7, #14]
 80051f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051fc:	d004      	beq.n	8005208 <_nx_driver_transfer_to_netx+0x40>
 80051fe:	89fb      	ldrh	r3, [r7, #14]
 8005200:	f248 62dd 	movw	r2, #34525	; 0x86dd
 8005204:	4293      	cmp	r3, r2
 8005206:	d10f      	bne.n	8005228 <_nx_driver_transfer_to_netx+0x60>
    cases, the actual packet length after the Ethernet header should
    be derived from the length in the IP header (lower 16 bits of
    the first 32-bit word).  */

    /* Clean off the Ethernet header.  */
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	320e      	adds	r2, #14
 8005210:	609a      	str	r2, [r3, #8]

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	3a0e      	subs	r2, #14
 800521a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Route to the ip receive function.  */
    _nx_ip_packet_deferred_receive(ip_ptr, packet_ptr);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	4619      	mov	r1, r3
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f002 fe57 	bl	8007ed4 <_nx_ip_packet_deferred_receive>
  else
  {
    /* Invalid ethernet header... release the packet.  */
    nx_packet_release(packet_ptr);
  }
}
 8005226:	e02d      	b.n	8005284 <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_ARP)
 8005228:	89fb      	ldrh	r3, [r7, #14]
 800522a:	f640 0206 	movw	r2, #2054	; 0x806
 800522e:	4293      	cmp	r3, r2
 8005230:	d10f      	bne.n	8005252 <_nx_driver_transfer_to_netx+0x8a>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	320e      	adds	r2, #14
 800523a:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	3a0e      	subs	r2, #14
 8005244:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_arp_packet_deferred_receive(ip_ptr, packet_ptr);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	4619      	mov	r1, r3
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fc0d 	bl	8005a6a <_nx_arp_packet_deferred_receive>
}
 8005250:	e018      	b.n	8005284 <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_RARP)
 8005252:	89fb      	ldrh	r3, [r7, #14]
 8005254:	f248 0235 	movw	r2, #32821	; 0x8035
 8005258:	4293      	cmp	r3, r2
 800525a:	d10f      	bne.n	800527c <_nx_driver_transfer_to_netx+0xb4>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	320e      	adds	r2, #14
 8005264:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	3a0e      	subs	r2, #14
 800526e:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_rarp_packet_deferred_receive(ip_ptr, packet_ptr);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	4619      	mov	r1, r3
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f004 fa81 	bl	800977c <_nx_rarp_packet_deferred_receive>
}
 800527a:	e003      	b.n	8005284 <_nx_driver_transfer_to_netx+0xbc>
    nx_packet_release(packet_ptr);
 800527c:	463b      	mov	r3, r7
 800527e:	4618      	mov	r0, r3
 8005280:	f006 f84a 	bl	800b318 <_nxe_packet_release>
}
 8005284:	bf00      	nop
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20014790 	.word	0x20014790

08005290 <_nx_driver_hardware_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08c      	sub	sp, #48	; 0x30
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	605a      	str	r2, [r3, #4]

  /* Setup indices.  */
  nx_driver_information.nx_driver_information_receive_current_index = 0;
 800529e:	4b34      	ldr	r3, [pc, #208]	; (8005370 <_nx_driver_hardware_initialize+0xe0>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	615a      	str	r2, [r3, #20]
  nx_driver_information.nx_driver_information_transmit_current_index = 0;
 80052a4:	4b32      	ldr	r3, [pc, #200]	; (8005370 <_nx_driver_hardware_initialize+0xe0>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	619a      	str	r2, [r3, #24]
  nx_driver_information.nx_driver_information_transmit_release_index = 0;
 80052aa:	4b31      	ldr	r3, [pc, #196]	; (8005370 <_nx_driver_hardware_initialize+0xe0>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	61da      	str	r2, [r3, #28]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use = 0;
 80052b0:	4b2f      	ldr	r3, [pc, #188]	; (8005370 <_nx_driver_hardware_initialize+0xe0>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	621a      	str	r2, [r3, #32]

  /* Make sure there are receive packets... otherwise, return an error.  */
  if (nx_driver_information.nx_driver_information_packet_pool_ptr == NULL)
 80052b6:	4b2e      	ldr	r3, [pc, #184]	; (8005370 <_nx_driver_hardware_initialize+0xe0>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <_nx_driver_hardware_initialize+0x32>
  {

    /* There must be receive packets. If not, return an error!  */
    return(NX_DRIVER_ERROR);
 80052be:	235a      	movs	r3, #90	; 0x5a
 80052c0:	e052      	b.n	8005368 <_nx_driver_hardware_initialize+0xd8>
#ifdef NX_DRIVER_ETH_HW_IP_INIT
  nx_eth_init();
#endif /* NX_DRIVER_ETH_HW_IP_INIT */

  ETH_DMAConfigTypeDef dmaDefaultConf;
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80052c6:	2301      	movs	r3, #1
 80052c8:	743b      	strb	r3, [r7, #16]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80052ca:	2301      	movs	r3, #1
 80052cc:	617b      	str	r3, [r7, #20]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80052ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052d2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80052d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80052da:	2300      	movs	r3, #0
 80052dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
#ifndef STM32_ETH_HAL_LEGACY
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80052e0:	2300      	movs	r3, #0
 80052e2:	767b      	strb	r3, [r7, #25]
#if defined(ETH_DMASBMR_BLEN4) /* ETH AXI support*/
  dmaDefaultConf.RxOSRLimit = ETH_RX_OSR_LIMIT_3;
  dmaDefaultConf.TxOSRLimit = ETH_TX_OSR_LIMIT_3;
  dmaDefaultConf.AXIBLENMaxSize = ETH_BLEN_MAX_SIZE_16;
#else
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	763b      	strb	r3, [r7, #24]
#endif
  dmaDefaultConf.SecondPacketOperate = ENABLE;
 80052e8:	2301      	movs	r3, #1
 80052ea:	f887 3020 	strb.w	r3, [r7, #32]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  dmaDefaultConf.MaximumSegmentSize = 536;
 80052f4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.SecondFrameOperate =  DISABLE;
  dmaDefaultConf.EnhancedDescriptorFormat =  DISABLE;
  dmaDefaultConf.DescriptorSkipLength =  DISABLE;
#endif
  /* enable OSF bit to enhance throughput */
  HAL_ETH_SetDMAConfig(&eth_handle, &dmaDefaultConf);
 80052fa:	f107 030c 	add.w	r3, r7, #12
 80052fe:	4619      	mov	r1, r3
 8005300:	481c      	ldr	r0, [pc, #112]	; (8005374 <_nx_driver_hardware_initialize+0xe4>)
 8005302:	f7fd f857 	bl	80023b4 <HAL_ETH_SetDMAConfig>
#ifdef STM32_ETH_PROMISCUOUS_ENABLE
  FilterConfig.PromiscuousMode = ENABLE;
#else
  FilterConfig.PromiscuousMode = DISABLE;
 8005306:	4b1c      	ldr	r3, [pc, #112]	; (8005378 <_nx_driver_hardware_initialize+0xe8>)
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
#endif
  FilterConfig.HashUnicast = DISABLE;
 800530c:	4b1a      	ldr	r3, [pc, #104]	; (8005378 <_nx_driver_hardware_initialize+0xe8>)
 800530e:	2200      	movs	r2, #0
 8005310:	70da      	strb	r2, [r3, #3]
  FilterConfig.HashMulticast = DISABLE;
 8005312:	4b19      	ldr	r3, [pc, #100]	; (8005378 <_nx_driver_hardware_initialize+0xe8>)
 8005314:	2200      	movs	r2, #0
 8005316:	711a      	strb	r2, [r3, #4]
  FilterConfig.DestAddrInverseFiltering = DISABLE;
 8005318:	4b17      	ldr	r3, [pc, #92]	; (8005378 <_nx_driver_hardware_initialize+0xe8>)
 800531a:	2200      	movs	r2, #0
 800531c:	721a      	strb	r2, [r3, #8]
  FilterConfig.PassAllMulticast = DISABLE;
 800531e:	4b16      	ldr	r3, [pc, #88]	; (8005378 <_nx_driver_hardware_initialize+0xe8>)
 8005320:	2200      	movs	r2, #0
 8005322:	715a      	strb	r2, [r3, #5]
  FilterConfig.BroadcastFilter = ENABLE;
 8005324:	4b14      	ldr	r3, [pc, #80]	; (8005378 <_nx_driver_hardware_initialize+0xe8>)
 8005326:	2201      	movs	r2, #1
 8005328:	725a      	strb	r2, [r3, #9]
  FilterConfig.SrcAddrInverseFiltering = DISABLE;
 800532a:	4b13      	ldr	r3, [pc, #76]	; (8005378 <_nx_driver_hardware_initialize+0xe8>)
 800532c:	2200      	movs	r2, #0
 800532e:	71da      	strb	r2, [r3, #7]
  FilterConfig.SrcAddrFiltering = DISABLE;
 8005330:	4b11      	ldr	r3, [pc, #68]	; (8005378 <_nx_driver_hardware_initialize+0xe8>)
 8005332:	2200      	movs	r2, #0
 8005334:	719a      	strb	r2, [r3, #6]
  FilterConfig.HachOrPerfectFilter = DISABLE;
 8005336:	4b10      	ldr	r3, [pc, #64]	; (8005378 <_nx_driver_hardware_initialize+0xe8>)
 8005338:	2200      	movs	r2, #0
 800533a:	709a      	strb	r2, [r3, #2]
  FilterConfig.ReceiveAllMode = DISABLE;
 800533c:	4b0e      	ldr	r3, [pc, #56]	; (8005378 <_nx_driver_hardware_initialize+0xe8>)
 800533e:	2200      	movs	r2, #0
 8005340:	705a      	strb	r2, [r3, #1]
  FilterConfig.ControlPacketsFilter = 0x00;
 8005342:	4b0d      	ldr	r3, [pc, #52]	; (8005378 <_nx_driver_hardware_initialize+0xe8>)
 8005344:	2200      	movs	r2, #0
 8005346:	60da      	str	r2, [r3, #12]

  /* Set Tx packet config common parameters */
  memset(&TxPacketCfg, 0, sizeof(ETH_TxPacketConfig));
 8005348:	2238      	movs	r2, #56	; 0x38
 800534a:	2100      	movs	r1, #0
 800534c:	480b      	ldr	r0, [pc, #44]	; (800537c <_nx_driver_hardware_initialize+0xec>)
 800534e:	f009 ffdd 	bl	800f30c <memset>
  TxPacketCfg.Attributes = ETH_TX_PACKETS_FEATURES_CSUM ;
 8005352:	4b0a      	ldr	r3, [pc, #40]	; (800537c <_nx_driver_hardware_initialize+0xec>)
 8005354:	2201      	movs	r2, #1
 8005356:	601a      	str	r2, [r3, #0]
  TxPacketCfg.CRCPadCtrl = ETH_CRC_PAD_DISABLE;
 8005358:	4b08      	ldr	r3, [pc, #32]	; (800537c <_nx_driver_hardware_initialize+0xec>)
 800535a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800535e:	611a      	str	r2, [r3, #16]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_multicast_count = 0;
 8005360:	4b03      	ldr	r3, [pc, #12]	; (8005370 <_nx_driver_hardware_initialize+0xe0>)
 8005362:	2200      	movs	r2, #0
 8005364:	649a      	str	r2, [r3, #72]	; 0x48

  /* Return success!  */
  return(NX_SUCCESS);
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3730      	adds	r7, #48	; 0x30
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20014790 	.word	0x20014790
 8005374:	20007e64 	.word	0x20007e64
 8005378:	20014818 	.word	0x20014818
 800537c:	200147e0 	.word	0x200147e0

08005380 <_nx_driver_hardware_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]

  /* Call STM32 library to start Ethernet operation.  */
  HAL_ETH_Start_IT(&eth_handle);
 8005388:	4803      	ldr	r0, [pc, #12]	; (8005398 <_nx_driver_hardware_enable+0x18>)
 800538a:	f7fc f98d 	bl	80016a8 <HAL_ETH_Start_IT>

  /* Return success!  */
  return(NX_SUCCESS);
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20007e64 	.word	0x20007e64

0800539c <_nx_driver_hardware_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_disable(NX_IP_DRIVER *driver_req_ptr)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]

  HAL_ETH_Stop(&eth_handle);
 80053a4:	4803      	ldr	r0, [pc, #12]	; (80053b4 <_nx_driver_hardware_disable+0x18>)
 80053a6:	f7fc fa0d 	bl	80017c4 <HAL_ETH_Stop>

  /* Return success!  */
  return(NX_SUCCESS);
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20007e64 	.word	0x20007e64

080053b8 <_nx_driver_hardware_packet_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/

static UINT  _nx_driver_hardware_packet_send(NX_PACKET *packet_ptr)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b092      	sub	sp, #72	; 0x48
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]

  NX_PACKET       *pktIdx;
  UINT            buffLen = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	643b      	str	r3, [r7, #64]	; 0x40

  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80053c4:	f107 030c 	add.w	r3, r7, #12
 80053c8:	2230      	movs	r2, #48	; 0x30
 80053ca:	2100      	movs	r1, #0
 80053cc:	4618      	mov	r0, r3
 80053ce:	f009 ff9d 	bl	800f30c <memset>


  int i = 0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	63fb      	str	r3, [r7, #60]	; 0x3c

  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	647b      	str	r3, [r7, #68]	; 0x44
 80053da:	e050      	b.n	800547e <_nx_driver_hardware_packet_send+0xc6>
  {
    if (i >= ETH_TX_DESC_CNT)
 80053dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d901      	bls.n	80053e6 <_nx_driver_hardware_packet_send+0x2e>
    {
      return NX_DRIVER_ERROR;
 80053e2:	235a      	movs	r3, #90	; 0x5a
 80053e4:	e077      	b.n	80054d6 <_nx_driver_hardware_packet_send+0x11e>
    }

    Txbuffer[i].buffer = pktIdx->nx_packet_prepend_ptr;
 80053e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e8:	6899      	ldr	r1, [r3, #8]
 80053ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053ec:	4613      	mov	r3, r2
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	3348      	adds	r3, #72	; 0x48
 80053f6:	443b      	add	r3, r7
 80053f8:	3b3c      	subs	r3, #60	; 0x3c
 80053fa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 80053fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	4619      	mov	r1, r3
 8005408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800540a:	4613      	mov	r3, r2
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	3348      	adds	r3, #72	; 0x48
 8005414:	443b      	add	r3, r7
 8005416:	3b38      	subs	r3, #56	; 0x38
 8005418:	6019      	str	r1, [r3, #0]
    buffLen += (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 800541a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	461a      	mov	r2, r3
 8005426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005428:	4413      	add	r3, r2
 800542a:	643b      	str	r3, [r7, #64]	; 0x40

    if(i>0)
 800542c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542e:	2b00      	cmp	r3, #0
 8005430:	dd11      	ble.n	8005456 <_nx_driver_hardware_packet_send+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005434:	1e5a      	subs	r2, r3, #1
 8005436:	f107 000c 	add.w	r0, r7, #12
 800543a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800543c:	460b      	mov	r3, r1
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	440b      	add	r3, r1
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	18c1      	adds	r1, r0, r3
 8005446:	4613      	mov	r3, r2
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	3348      	adds	r3, #72	; 0x48
 8005450:	443b      	add	r3, r7
 8005452:	3b34      	subs	r3, #52	; 0x34
 8005454:	6019      	str	r1, [r3, #0]
    }

    if (pktIdx-> nx_packet_next ==NULL)
 8005456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d109      	bne.n	8005472 <_nx_driver_hardware_packet_send+0xba>
    {
      Txbuffer[i].next = NULL;
 800545e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005460:	4613      	mov	r3, r2
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	3348      	adds	r3, #72	; 0x48
 800546a:	443b      	add	r3, r7
 800546c:	3b34      	subs	r3, #52	; 0x34
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005474:	3301      	adds	r3, #1
 8005476:	63fb      	str	r3, [r7, #60]	; 0x3c
  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 8005478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	647b      	str	r3, [r7, #68]	; 0x44
 800547e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1ab      	bne.n	80053dc <_nx_driver_hardware_packet_send+0x24>
    SCB_CleanDCache_by_Addr((uint32_t*)(pktIdx -> nx_packet_data_start), pktIdx -> nx_packet_data_end - pktIdx -> nx_packet_data_start);
#endif
  }

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  if (packet_ptr -> nx_packet_interface_capability_flag & (NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM |
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	f403 7315 	and.w	r3, r3, #596	; 0x254
 800548c:	2b00      	cmp	r3, #0
 800548e:	d004      	beq.n	800549a <_nx_driver_hardware_packet_send+0xe2>
                                                           NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM |
                                                             NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM |
                                                               NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM))
  {
    TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005490:	4b13      	ldr	r3, [pc, #76]	; (80054e0 <_nx_driver_hardware_packet_send+0x128>)
 8005492:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005496:	615a      	str	r2, [r3, #20]
 8005498:	e009      	b.n	80054ae <_nx_driver_hardware_packet_send+0xf6>
  }
  else if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <_nx_driver_hardware_packet_send+0xf6>
  {
    TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_IPHDR_INSERT;
 80054a6:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <_nx_driver_hardware_packet_send+0x128>)
 80054a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054ac:	615a      	str	r2, [r3, #20]
  }
#else
  TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  TxPacketCfg.Length = buffLen;
 80054ae:	4a0c      	ldr	r2, [pc, #48]	; (80054e0 <_nx_driver_hardware_packet_send+0x128>)
 80054b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054b2:	6053      	str	r3, [r2, #4]
  TxPacketCfg.TxBuffer = Txbuffer;
 80054b4:	4a0a      	ldr	r2, [pc, #40]	; (80054e0 <_nx_driver_hardware_packet_send+0x128>)
 80054b6:	f107 030c 	add.w	r3, r7, #12
 80054ba:	6093      	str	r3, [r2, #8]
  TxPacketCfg.pData = (uint32_t *)packet_ptr;
 80054bc:	4a08      	ldr	r2, [pc, #32]	; (80054e0 <_nx_driver_hardware_packet_send+0x128>)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6353      	str	r3, [r2, #52]	; 0x34

  if(HAL_ETH_Transmit_IT(&eth_handle, &TxPacketCfg))
 80054c2:	4907      	ldr	r1, [pc, #28]	; (80054e0 <_nx_driver_hardware_packet_send+0x128>)
 80054c4:	4807      	ldr	r0, [pc, #28]	; (80054e4 <_nx_driver_hardware_packet_send+0x12c>)
 80054c6:	f7fc f9cd 	bl	8001864 <HAL_ETH_Transmit_IT>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <_nx_driver_hardware_packet_send+0x11c>
  {
    return(NX_DRIVER_ERROR);
 80054d0:	235a      	movs	r3, #90	; 0x5a
 80054d2:	e000      	b.n	80054d6 <_nx_driver_hardware_packet_send+0x11e>
  }

  return(NX_SUCCESS);
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3748      	adds	r7, #72	; 0x48
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	200147e0 	.word	0x200147e0
 80054e4:	20007e64 	.word	0x20007e64

080054e8 <_nx_driver_hardware_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]


  /* Increase the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count++;
 80054f0:	4b08      	ldr	r3, [pc, #32]	; (8005514 <_nx_driver_hardware_multicast_join+0x2c>)
 80054f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f4:	3301      	adds	r3, #1
 80054f6:	4a07      	ldr	r2, [pc, #28]	; (8005514 <_nx_driver_hardware_multicast_join+0x2c>)
 80054f8:	6493      	str	r3, [r2, #72]	; 0x48

  /* Enable multicast frame reception.  */
  FilterConfig.PassAllMulticast = ENABLE;
 80054fa:	4b07      	ldr	r3, [pc, #28]	; (8005518 <_nx_driver_hardware_multicast_join+0x30>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	715a      	strb	r2, [r3, #5]
  HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 8005500:	4905      	ldr	r1, [pc, #20]	; (8005518 <_nx_driver_hardware_multicast_join+0x30>)
 8005502:	4806      	ldr	r0, [pc, #24]	; (800551c <_nx_driver_hardware_multicast_join+0x34>)
 8005504:	f7fc ffd8 	bl	80024b8 <HAL_ETH_SetMACFilterConfig>

  /* Return success.  */
  return(NX_SUCCESS);
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20014790 	.word	0x20014790
 8005518:	20014818 	.word	0x20014818
 800551c:	20007e64 	.word	0x20007e64

08005520 <_nx_driver_hardware_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]

  /* Decrease the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count--;
 8005528:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <_nx_driver_hardware_multicast_leave+0x34>)
 800552a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800552c:	3b01      	subs	r3, #1
 800552e:	4a09      	ldr	r2, [pc, #36]	; (8005554 <_nx_driver_hardware_multicast_leave+0x34>)
 8005530:	6493      	str	r3, [r2, #72]	; 0x48

  /* If multicast count reaches zero, disable multicast frame reception.  */
  if (nx_driver_information.nx_driver_information_multicast_count == 0)
 8005532:	4b08      	ldr	r3, [pc, #32]	; (8005554 <_nx_driver_hardware_multicast_leave+0x34>)
 8005534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <_nx_driver_hardware_multicast_leave+0x28>
  {

    /* Disable multicast frame reception.  */
    FilterConfig.PassAllMulticast = DISABLE;
 800553a:	4b07      	ldr	r3, [pc, #28]	; (8005558 <_nx_driver_hardware_multicast_leave+0x38>)
 800553c:	2200      	movs	r2, #0
 800553e:	715a      	strb	r2, [r3, #5]
    HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 8005540:	4905      	ldr	r1, [pc, #20]	; (8005558 <_nx_driver_hardware_multicast_leave+0x38>)
 8005542:	4806      	ldr	r0, [pc, #24]	; (800555c <_nx_driver_hardware_multicast_leave+0x3c>)
 8005544:	f7fc ffb8 	bl	80024b8 <HAL_ETH_SetMACFilterConfig>
  }

  /* Return success.  */
  return(NX_SUCCESS);
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20014790 	.word	0x20014790
 8005558:	20014818 	.word	0x20014818
 800555c:	20007e64 	.word	0x20007e64

08005560 <_nx_driver_hardware_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  INT PHYLinkState;

  /* Get link status. */
  PHYLinkState = nx_eth_phy_get_link_state();
 8005568:	f7ff fac2 	bl	8004af0 <nx_eth_phy_get_link_state>
 800556c:	60f8      	str	r0, [r7, #12]

  /* Check link status. */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b01      	cmp	r3, #1
 8005572:	dc04      	bgt.n	800557e <_nx_driver_hardware_get_status+0x1e>
  {
    /* Update Link status if physical link is down. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_FALSE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	e003      	b.n	8005586 <_nx_driver_hardware_get_status+0x26>
  }
  else
  {
    /* Update Link status if physical link is up. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_TRUE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	2201      	movs	r2, #1
 8005584:	601a      	str	r2, [r3, #0]
  }

  /* Return success. */
  return NX_SUCCESS;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  NX_PACKET * release_packet = (NX_PACKET *) buff;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Remove the Ethernet header and release the packet.  */
  NX_DRIVER_ETHERNET_HEADER_REMOVE(release_packet);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	320e      	adds	r2, #14
 80055a4:	609a      	str	r2, [r3, #8]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3a0e      	subs	r2, #14
 80055ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Release the packet.  */
  nx_packet_transmit_release(release_packet);
 80055b0:	f107 030c 	add.w	r3, r7, #12
 80055b4:	4618      	mov	r0, r3
 80055b6:	f005 fee7 	bl	800b388 <_nxe_packet_transmit_release>
}
 80055ba:	bf00      	nop
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <_nx_driver_hardware_packet_received>:

static VOID  _nx_driver_hardware_packet_received(VOID)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
  NX_PACKET  *received_packet_ptr;

  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 80055ca:	e006      	b.n	80055da <_nx_driver_hardware_packet_received+0x16>
  {
      /* Transfer the packet to NetX.  */
      _nx_driver_transfer_to_netx(nx_driver_information.nx_driver_information_ip_ptr, received_packet_ptr);
 80055cc:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <_nx_driver_hardware_packet_received+0x30>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	4611      	mov	r1, r2
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff fdf7 	bl	80051c8 <_nx_driver_transfer_to_netx>
  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 80055da:	1d3b      	adds	r3, r7, #4
 80055dc:	4619      	mov	r1, r3
 80055de:	4806      	ldr	r0, [pc, #24]	; (80055f8 <_nx_driver_hardware_packet_received+0x34>)
 80055e0:	f7fc f991 	bl	8001906 <HAL_ETH_ReadData>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <_nx_driver_hardware_packet_received+0x8>
  }
}
 80055ea:	bf00      	nop
 80055ec:	bf00      	nop
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20014790 	.word	0x20014790
 80055f8:	20007e64 	.word	0x20007e64

080055fc <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t ** buff)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  NX_PACKET     *packet_ptr;
  if (nx_packet_allocate(nx_driver_information.nx_driver_information_packet_pool_ptr, &packet_ptr,
 8005604:	4b0d      	ldr	r3, [pc, #52]	; (800563c <HAL_ETH_RxAllocateCallback+0x40>)
 8005606:	6898      	ldr	r0, [r3, #8]
 8005608:	f107 010c 	add.w	r1, r7, #12
 800560c:	2300      	movs	r3, #0
 800560e:	2200      	movs	r2, #0
 8005610:	f005 fcfc 	bl	800b00c <_nxe_packet_allocate>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <HAL_ETH_RxAllocateCallback+0x32>
                         NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
  {
    /* Adjust the packet.  */
    packet_ptr -> nx_packet_prepend_ptr += 2;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3202      	adds	r2, #2
 8005622:	609a      	str	r2, [r3, #8]
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    SCB_InvalidateDCache_by_Addr((uint32_t*)packet_ptr -> nx_packet_data_start, packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start);
#endif
    *buff = packet_ptr -> nx_packet_prepend_ptr;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Rx Buffer Pool is exhausted. */
    *buff = NULL;
  }
}
 800562c:	e002      	b.n	8005634 <HAL_ETH_RxAllocateCallback+0x38>
    *buff = NULL;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
}
 8005634:	bf00      	nop
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	20014790 	.word	0x20014790

08005640 <HAL_ETH_RxLinkCallback>:
/*                                                                        */
/*    HAL_ETH_ReadData              Read a received packet                */
/*                                                                        */
/**************************************************************************/
void HAL_ETH_RxLinkCallback(void **first_packet_ptr, void **last_packet_ptr, uint8_t *buff, uint16_t Length)
{
 8005640:	b480      	push	{r7}
 8005642:	b089      	sub	sp, #36	; 0x24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	807b      	strh	r3, [r7, #2]
  NX_PACKET **first_nx_packet_ptr = (NX_PACKET **)first_packet_ptr;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	61fb      	str	r3, [r7, #28]
  NX_PACKET **last_nx_packet_ptr = (NX_PACKET **)last_packet_ptr;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	61bb      	str	r3, [r7, #24]
  NX_PACKET  *received_packet_ptr;

  /* Indicate the offset of the received data.  */
  uint8_t *data_buffer_ptr = buff - 2U - header_size;
 8005656:	4b14      	ldr	r3, [pc, #80]	; (80056a8 <HAL_ETH_RxLinkCallback+0x68>)
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	f06f 0301 	mvn.w	r3, #1
 800565e:	1a9b      	subs	r3, r3, r2
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	4413      	add	r3, r2
 8005664:	617b      	str	r3, [r7, #20]

  received_packet_ptr = (NX_PACKET *)data_buffer_ptr;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	613b      	str	r3, [r7, #16]
  received_packet_ptr->nx_packet_append_ptr = received_packet_ptr->nx_packet_prepend_ptr + Length;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	887b      	ldrh	r3, [r7, #2]
 8005670:	441a      	add	r2, r3
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	60da      	str	r2, [r3, #12]
  received_packet_ptr->nx_packet_length = Length;
 8005676:	887a      	ldrh	r2, [r7, #2]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check whether this is the first packet. */
  if (*first_nx_packet_ptr == NULL)
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d103      	bne.n	800568c <HAL_ETH_RxLinkCallback+0x4c>
  {
    /* Add the first buffer of the packet. */
    *first_nx_packet_ptr = received_packet_ptr;
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	e003      	b.n	8005694 <HAL_ETH_RxLinkCallback+0x54>
  }
  /* This is not the first packet. */
  else
  {
    /* Add the rest of the buffer to the end of the packet. */
    (*last_nx_packet_ptr)->nx_packet_next = received_packet_ptr;
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	605a      	str	r2, [r3, #4]
  }
  /* Save the current packet in order to use it in the next iteration. */
  *last_nx_packet_ptr  = received_packet_ptr;
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	601a      	str	r2, [r3, #0]
}
 800569a:	bf00      	nop
 800569c:	3724      	adds	r7, #36	; 0x24
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	200147dc 	.word	0x200147dc

080056ac <_nx_driver_hardware_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT _nx_driver_hardware_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]

  return NX_SUCCESS;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <HAL_ETH_RxCpltCallback>:
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]

  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <HAL_ETH_RxCpltCallback+0x34>)
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	60fb      	str	r3, [r7, #12]

  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_RECEIVED;
 80056d2:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <HAL_ETH_RxCpltCallback+0x34>)
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	4a07      	ldr	r2, [pc, #28]	; (80056f8 <HAL_ETH_RxCpltCallback+0x34>)
 80056dc:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <HAL_ETH_RxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 80056e4:	4b04      	ldr	r3, [pc, #16]	; (80056f8 <HAL_ETH_RxCpltCallback+0x34>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f001 fdbf 	bl	800726c <_nx_ip_driver_deferred_processing>
  }
}
 80056ee:	bf00      	nop
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20014790 	.word	0x20014790

080056fc <HAL_ETH_TxCpltCallback>:

void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 8005704:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <HAL_ETH_TxCpltCallback+0x34>)
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	60fb      	str	r3, [r7, #12]


  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_TRANSMITTED;
 800570a:	4b09      	ldr	r3, [pc, #36]	; (8005730 <HAL_ETH_TxCpltCallback+0x34>)
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f043 0304 	orr.w	r3, r3, #4
 8005712:	4a07      	ldr	r2, [pc, #28]	; (8005730 <HAL_ETH_TxCpltCallback+0x34>)
 8005714:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d104      	bne.n	8005726 <HAL_ETH_TxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 800571c:	4b04      	ldr	r3, [pc, #16]	; (8005730 <HAL_ETH_TxCpltCallback+0x34>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f001 fda3 	bl	800726c <_nx_ip_driver_deferred_processing>
  }
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20014790 	.word	0x20014790

08005734 <_nx_arp_dynamic_entry_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_dynamic_entry_delete(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_PACKET *packet_ptr, *next_packet_ptr;


    /* Determine if this ARP entry is already active.  */
    if (arp_ptr -> nx_arp_active_list_head)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d050      	beq.n	80057e8 <_nx_arp_dynamic_entry_delete+0xb4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005746:	f3ef 8310 	mrs	r3, PRIMASK
 800574a:	613b      	str	r3, [r7, #16]
    return(posture);
 800574c:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800574e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005750:	b672      	cpsid	i
    return(int_posture);
 8005752:	68fb      	ldr	r3, [r7, #12]
    {

        /* Remove this dynamic ARP entry from the associated list.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8005754:	61bb      	str	r3, [r7, #24]

        /* Determine if this is the only ARP entry on the list.  */
        if (arp_ptr == arp_ptr -> nx_arp_active_next)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d104      	bne.n	800576a <_nx_arp_dynamic_entry_delete+0x36>
        {

            /* Remove the entry from the list.  */
            *(arp_ptr -> nx_arp_active_list_head) =  NX_NULL;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	e014      	b.n	8005794 <_nx_arp_dynamic_entry_delete+0x60>
        {

            /* Remove the entry from a list of more than one entry.  */

            /* Update the list head pointer.  */
            if (*(arp_ptr -> nx_arp_active_list_head) == arp_ptr)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d104      	bne.n	8005780 <_nx_arp_dynamic_entry_delete+0x4c>
            {
                *(arp_ptr -> nx_arp_active_list_head) =  arp_ptr -> nx_arp_active_next;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	6952      	ldr	r2, [r2, #20]
 800577e:	601a      	str	r2, [r3, #0]
            }

            /* Update the links of the adjacent ARP entries.  */
            (arp_ptr -> nx_arp_active_next) -> nx_arp_active_previous = arp_ptr -> nx_arp_active_previous;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	6992      	ldr	r2, [r2, #24]
 8005788:	619a      	str	r2, [r3, #24]
            (arp_ptr -> nx_arp_active_previous) -> nx_arp_active_next =  arp_ptr -> nx_arp_active_next;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	6952      	ldr	r2, [r2, #20]
 8005792:	615a      	str	r2, [r3, #20]
        }

        /* No longer active, clear the active list head.  */
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2200      	movs	r2, #0
 8005798:	61da      	str	r2, [r3, #28]

        /* Decrease the number of active ARP entries.  */
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 80057a0:	1e5a      	subs	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8

        /* Pickup the queued packets head pointer.  */
        next_packet_ptr =  arp_ptr -> nx_arp_packets_waiting;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ac:	61fb      	str	r3, [r7, #28]

        /* Clear the queued packets head pointer.  */
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2200      	movs	r2, #0
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f383 8810 	msr	PRIMASK, r3
}
 80057be:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Loop to remove all queued packets.  */
        while (next_packet_ptr)
 80057c0:	e00f      	b.n	80057e2 <_nx_arp_dynamic_entry_delete+0xae>
        {

            /* Pickup the packet pointer at the head of the queue.  */
            packet_ptr =  next_packet_ptr;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	617b      	str	r3, [r7, #20]

            /* Move to the next packet in the queue.  */
            next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	61fb      	str	r3, [r7, #28]

            /* Clear the next packet queue pointer.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2200      	movs	r2, #0
 80057d0:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	655a      	str	r2, [r3, #84]	; 0x54
#endif

            /* Release the packet that was queued from the previous ARP entry.  */
            _nx_packet_transmit_release(packet_ptr);
 80057dc:	6978      	ldr	r0, [r7, #20]
 80057de:	f003 ff87 	bl	80096f0 <_nx_packet_transmit_release>
        while (next_packet_ptr)
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1ec      	bne.n	80057c2 <_nx_arp_dynamic_entry_delete+0x8e>
        }
    }

    return(NX_SUCCESS);
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3720      	adds	r7, #32
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
	...

080057f4 <_nx_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ARP_ENABLE, ip_ptr, arp_cache_memory, arp_cache_size, 0, NX_TRACE_ARP_EVENTS, 0, 0);

    /* Clear the entire ARP cache.  */
    memset((void *)arp_cache_memory, 0, arp_cache_size);
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	2100      	movs	r1, #0
 8005804:	68b8      	ldr	r0, [r7, #8]
 8005806:	f009 fd81 	bl	800f30c <memset>

    /* Pickup starting address of ARP entry array.  */
    entry_ptr =  (NX_ARP *)arp_cache_memory;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	61bb      	str	r3, [r7, #24]

    /* Determine how many ARP entries will fit in this cache area.  */
    arp_entries =  arp_cache_size / sizeof(NX_ARP);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a2d      	ldr	r2, [pc, #180]	; (80058c8 <_nx_arp_enable+0xd4>)
 8005812:	fba2 2303 	umull	r2, r3, r2, r3
 8005816:	091b      	lsrs	r3, r3, #4
 8005818:	617b      	str	r3, [r7, #20]

    /* Initialize the forward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	e00a      	b.n	8005836 <_nx_arp_enable+0x42>
    {
        /* Setup each entry to point to the next entry.  */
        entry_ptr -> nx_arp_pool_next =  entry_ptr + 1;
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	60da      	str	r2, [r3, #12]
        entry_ptr++;
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	3334      	adds	r3, #52	; 0x34
 800582e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	3301      	adds	r3, #1
 8005834:	61fb      	str	r3, [r7, #28]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	3b01      	subs	r3, #1
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	429a      	cmp	r2, r3
 800583e:	d3ef      	bcc.n	8005820 <_nx_arp_enable+0x2c>
    }

    /* The entry now points to the last entry in the ARP array.  Set its
       next pointer to the first entry.  */
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	60da      	str	r2, [r3, #12]

    /* Initialize the backward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 8005846:	2300      	movs	r3, #0
 8005848:	61fb      	str	r3, [r7, #28]
 800584a:	e00a      	b.n	8005862 <_nx_arp_enable+0x6e>
    {
        /* Setup each entry to point to the previous entry.  */
        entry_ptr -> nx_arp_pool_previous =  entry_ptr - 1;
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	f1a3 0234 	sub.w	r2, r3, #52	; 0x34
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	611a      	str	r2, [r3, #16]
        entry_ptr--;
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	3b34      	subs	r3, #52	; 0x34
 800585a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	3301      	adds	r3, #1
 8005860:	61fb      	str	r3, [r7, #28]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	3b01      	subs	r3, #1
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	429a      	cmp	r2, r3
 800586a:	d3ef      	bcc.n	800584c <_nx_arp_enable+0x58>
    }

    /* The entry now points to the first entry, set the previous pointer
       to the last entry.  */
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2234      	movs	r2, #52	; 0x34
 8005870:	fb02 f303 	mul.w	r3, r2, r3
 8005874:	3b34      	subs	r3, #52	; 0x34
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	441a      	add	r2, r3
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	611a      	str	r2, [r3, #16]
       information in the IP structure.  */

    /* Setup the list head pointers in the IP instance.  At first all ARP
       entries are associated with the dynamic ARP list.  The static ARP list
       is NULL until static ARP entry calls are made.  */
    ip_ptr -> nx_ip_arp_static_list =   NX_NULL;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
    ip_ptr -> nx_ip_arp_dynamic_list =  (NX_ARP *)arp_cache_memory;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4

    /* Store the initial ARP cache information in the IP control block.  */
    ip_ptr -> nx_ip_arp_cache_memory  =  arp_cache_memory;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	f8c3 26f8 	str.w	r2, [r3, #1784]	; 0x6f8
    ip_ptr -> nx_ip_arp_total_entries =  arp_entries;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc

    /* Setup the ARP periodic update routine.  */
    ip_ptr -> nx_ip_arp_periodic_update =  _nx_arp_periodic_update;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4a0a      	ldr	r2, [pc, #40]	; (80058cc <_nx_arp_enable+0xd8>)
 80058a2:	f8c3 26e8 	str.w	r2, [r3, #1768]	; 0x6e8

    /* Setup the ARP queue process routine.  */
    ip_ptr -> nx_ip_arp_queue_process =  _nx_arp_queue_process;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4a09      	ldr	r2, [pc, #36]	; (80058d0 <_nx_arp_enable+0xdc>)
 80058aa:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec

    /* Setup the ARP send packet routine.  */
    ip_ptr -> nx_ip_arp_packet_send =  _nx_arp_packet_send;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4a08      	ldr	r2, [pc, #32]	; (80058d4 <_nx_arp_enable+0xe0>)
 80058b2:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0

    /* Setup the ARP allocate service request pointer.  */
    ip_ptr -> nx_ip_arp_allocate =  _nx_arp_entry_allocate;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4a07      	ldr	r2, [pc, #28]	; (80058d8 <_nx_arp_enable+0xe4>)
 80058ba:	f8c3 26e4 	str.w	r2, [r3, #1764]	; 0x6e4

    /* Return successful completion.  */
    return(NX_SUCCESS);
 80058be:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3720      	adds	r7, #32
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	4ec4ec4f 	.word	0x4ec4ec4f
 80058cc:	080060a9 	.word	0x080060a9
 80058d0:	080062ab 	.word	0x080062ab
 80058d4:	08005f65 	.word	0x08005f65
 80058d8:	080058dd 	.word	0x080058dd

080058dc <_nx_arp_entry_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_entry_allocate(NX_IP *ip_ptr, NX_ARP **arp_list_ptr, UINT is_static)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08a      	sub	sp, #40	; 0x28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
NX_ARP *arp_entry;
UINT    status;


    /* Determine if there is an ARP entry available in the dynamic list.  */
    if (ip_ptr -> nx_ip_arp_dynamic_list)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 80b4 	beq.w	8005a5c <_nx_arp_entry_allocate+0x180>
    {

        /* Yes there are one or more free entries.  */

        /* Pickup pointer to last used dynamic ARP entry.  */
        arp_entry =  (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	623b      	str	r3, [r7, #32]

        /* Remove from the dynamic list. */
        _nx_arp_dynamic_entry_delete(ip_ptr, arp_entry);
 80058fe:	6a39      	ldr	r1, [r7, #32]
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f7ff ff17 	bl	8005734 <_nx_arp_dynamic_entry_delete>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005906:	f3ef 8310 	mrs	r3, PRIMASK
 800590a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800590c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800590e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005910:	b672      	cpsid	i
    return(int_posture);
 8005912:	697b      	ldr	r3, [r7, #20]

        /* Disable interrupts temporarily.  */
        TX_DISABLE
 8005914:	61fb      	str	r3, [r7, #28]

        /* Link the ARP entry at the head of the IP list.  */

        /* Determine if the ARP entry is being added to an empty list.  */
        if (*arp_list_ptr)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d014      	beq.n	8005948 <_nx_arp_entry_allocate+0x6c>
        {

            /* Add the ARP entry to the beginning of the nonempty ARP
               list.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =      *arp_list_ptr;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =  (*arp_list_ptr) -> nx_arp_active_previous;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	619a      	str	r2, [r3, #24]
            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =  arp_entry;
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	6a3a      	ldr	r2, [r7, #32]
 800593c:	615a      	str	r2, [r3, #20]
            (*arp_list_ptr) -> nx_arp_active_previous =  arp_entry;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6a3a      	ldr	r2, [r7, #32]
 8005944:	619a      	str	r2, [r3, #24]
 8005946:	e00b      	b.n	8005960 <_nx_arp_entry_allocate+0x84>
        }
        else
        {
            /* Empty list, just put the ARP entry at the beginning.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =       arp_entry;
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	6a3a      	ldr	r2, [r7, #32]
 8005952:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =   arp_entry;
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	6a3a      	ldr	r2, [r7, #32]
 8005958:	619a      	str	r2, [r3, #24]

            /* Now setup the list head.  */
            *arp_list_ptr =  arp_entry;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6a3a      	ldr	r2, [r7, #32]
 800595e:	601a      	str	r2, [r3, #0]
        }

        /* Determine if this is a static entry. */
        if (is_static == NX_TRUE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d141      	bne.n	80059ea <_nx_arp_entry_allocate+0x10e>
        {

            /* Remove this entry from the ARP dynamic list.  */

            /* Determine if this is the only ARP entry on the dynamic list.  */
            if (arp_entry == arp_entry -> nx_arp_pool_next)
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	6a3a      	ldr	r2, [r7, #32]
 800596c:	429a      	cmp	r2, r3
 800596e:	d104      	bne.n	800597a <_nx_arp_entry_allocate+0x9e>
            {

                /* Remove the sole entry from the dynamic list head.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  NX_NULL;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
 8005978:	e009      	b.n	800598e <_nx_arp_entry_allocate+0xb2>
            {

                /* Remove the entry from a list of more than one entry.  */

                /* Update the links of the adjacent ARP dynamic pool entries.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	6a3a      	ldr	r2, [r7, #32]
 8005980:	6912      	ldr	r2, [r2, #16]
 8005982:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	6a3a      	ldr	r2, [r7, #32]
 800598a:	68d2      	ldr	r2, [r2, #12]
 800598c:	60da      	str	r2, [r3, #12]
            }

            /* Add the entry to the ARP static list.  */

            /* Determine if the ARP static list is empty.  */
            if (ip_ptr -> nx_ip_arp_static_list == NX_NULL)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <_nx_arp_entry_allocate+0xd2>
            {

                /* Just place this single ARP entry on the list.  */
                arp_entry -> nx_arp_pool_next =     arp_entry;
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	6a3a      	ldr	r2, [r7, #32]
 800599c:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = arp_entry;
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	6a3a      	ldr	r2, [r7, #32]
 80059a2:	611a      	str	r2, [r3, #16]
                ip_ptr -> nx_ip_arp_static_list =   arp_entry;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a3a      	ldr	r2, [r7, #32]
 80059a8:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
 80059ac:	e015      	b.n	80059da <_nx_arp_entry_allocate+0xfe>
            }
            else
            {

                /* Add to the end of the ARP static list.  */
                arp_entry -> nx_arp_pool_next = ip_ptr -> nx_ip_arp_static_list;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8d3 26d0 	ldr.w	r2, [r3, #1744]	; 0x6d0
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80059be:	691a      	ldr	r2, [r3, #16]
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	611a      	str	r2, [r3, #16]
                ((ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	6a3a      	ldr	r2, [r7, #32]
 80059ce:	60da      	str	r2, [r3, #12]
                (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous = arp_entry;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80059d6:	6a3a      	ldr	r2, [r7, #32]
 80059d8:	611a      	str	r2, [r3, #16]
            }

#ifndef NX_DISABLE_ARP_INFO
            /* Increment the ARP static entry count.  */
            ip_ptr -> nx_ip_arp_static_entries++;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80059e8:	e02c      	b.n	8005a44 <_nx_arp_entry_allocate+0x168>
        }
        else  /* Allocate entry from dynamic list. */
        {

            /* Move this ARP entry to the front of the general ARP dynamic entry pool.  */
            if (arp_entry != ip_ptr -> nx_ip_arp_dynamic_list)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80059f0:	6a3a      	ldr	r2, [r7, #32]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d01f      	beq.n	8005a36 <_nx_arp_entry_allocate+0x15a>

                /* The current ARP entry is not at the front of the list, so it
                   must be moved.  */

                /* Link up the neighbors first.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	6a3a      	ldr	r2, [r7, #32]
 80059fc:	6912      	ldr	r2, [r2, #16]
 80059fe:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	6a3a      	ldr	r2, [r7, #32]
 8005a06:	68d2      	ldr	r2, [r2, #12]
 8005a08:	60da      	str	r2, [r3, #12]

                /* Now link this ARP entry to the head of the list.  */
                arp_entry -> nx_arp_pool_next =  ip_ptr -> nx_ip_arp_dynamic_list;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8d3 26d4 	ldr.w	r2, [r3, #1748]	; 0x6d4
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous =    (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous;
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	691a      	ldr	r2, [r3, #16]
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =  arp_entry;
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	6a3a      	ldr	r2, [r7, #32]
 8005a24:	60da      	str	r2, [r3, #12]
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =  arp_entry;
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	6a3a      	ldr	r2, [r7, #32]
 8005a2c:	611a      	str	r2, [r3, #16]

                /* Now set the list head to this ARP entry.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a3a      	ldr	r2, [r7, #32]
 8005a32:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
            }

            /* Increment the number of active dynamic entries.  */
            ip_ptr -> nx_ip_arp_dynamic_active_count++;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8
        }

        /* Set the entry type.  */
        arp_entry -> nx_arp_route_static = is_static;
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f383 8810 	msr	PRIMASK, r3
}
 8005a54:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Setup a successful status return.  */
        status =  NX_SUCCESS;
 8005a56:	2300      	movs	r3, #0
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
 8005a5a:	e001      	b.n	8005a60 <_nx_arp_entry_allocate+0x184>
    else
    {

        /* No more ARP entries are available, all the ARP entries must be
           allocated on the static list.  */
        status =  NX_NO_MORE_ENTRIES;
 8005a5c:	2317      	movs	r3, #23
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Return status to the caller.  */
    return(status);
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3728      	adds	r7, #40	; 0x28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <_nx_arp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b088      	sub	sp, #32
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005a74:	f3ef 8310 	mrs	r3, PRIMASK
 8005a78:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005a7a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005a7c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005a7e:	b672      	cpsid	i
    return(int_posture);
 8005a80:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8005a82:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if ARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_arp_queue_process)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d110      	bne.n	8005ab0 <_nx_arp_packet_deferred_receive+0x46>

        /* ARP is not enabled.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count...  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f383 8810 	msr	PRIMASK, r3
}
 8005aa6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since ARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8005aa8:	6838      	ldr	r0, [r7, #0]
 8005aaa:	f003 fd69 	bl	8009580 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8005aae:	e02f      	b.n	8005b10 <_nx_arp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the ARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d011      	beq.n	8005ade <_nx_arp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the ARP deferred queue.  */
        (ip_ptr -> nx_ip_arp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f383 8810 	msr	PRIMASK, r3
}
 8005adc:	e018      	b.n	8005b10 <_nx_arp_packet_deferred_receive+0xa6>
    {

        /* Empty ARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the ARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0
        packet_ptr -> nx_packet_queue_next =                 NX_NULL;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2200      	movs	r2, #0
 8005af2:	61da      	str	r2, [r3, #28]
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f383 8810 	msr	PRIMASK, r3
}
 8005afe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the ARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005b06:	2200      	movs	r2, #0
 8005b08:	2110      	movs	r1, #16
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f006 fb9c 	bl	800c248 <_tx_event_flags_set>
    }
}
 8005b10:	3720      	adds	r7, #32
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <_nx_arp_packet_receive>:
/*                                            fixed compiler errors,      */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8005b16:	b590      	push	{r4, r7, lr}
 8005b18:	b097      	sub	sp, #92	; 0x5c
 8005b1a:	af02      	add	r7, sp, #8
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
ULONG         sender_physical_lsw;
ULONG         sender_ip_address;
ULONG         target_ip_address;
ULONG         message_type;
ULONG         index;
UCHAR         consumed = NX_FALSE;
 8005b20:	2300      	movs	r3, #0
 8005b22:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
NX_INTERFACE *interface_ptr;


#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Determine if the packet length is valid.  */
    if (packet_ptr -> nx_packet_length < NX_ARP_MESSAGE_SIZE)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	2b1b      	cmp	r3, #27
 8005b2c:	d80a      	bhi.n	8005b44 <_nx_arp_packet_receive+0x2e>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 8005b3c:	6838      	ldr	r0, [r7, #0]
 8005b3e:	f003 fd1f 	bl	8009580 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8005b42:	e20b      	b.n	8005f5c <_nx_arp_packet_receive+0x446>
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING  */

    /* Setup a pointer to the ARP message.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	643b      	str	r3, [r7, #64]	; 0x40

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8005b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b52:	3304      	adds	r3, #4
 8005b54:	ba12      	rev	r2, r2
 8005b56:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5a:	3308      	adds	r3, #8
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b60:	3308      	adds	r3, #8
 8005b62:	ba12      	rev	r2, r2
 8005b64:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8005b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b68:	330c      	adds	r3, #12
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b6e:	330c      	adds	r3, #12
 8005b70:	ba12      	rev	r2, r2
 8005b72:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8005b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b76:	3310      	adds	r3, #16
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b7c:	3310      	adds	r3, #16
 8005b7e:	ba12      	rev	r2, r2
 8005b80:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8005b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b84:	3314      	adds	r3, #20
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b8a:	3314      	adds	r3, #20
 8005b8c:	ba12      	rev	r2, r2
 8005b8e:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8005b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b92:	3318      	adds	r3, #24
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b98:	3318      	adds	r3, #24
 8005b9a:	ba12      	rev	r2, r2
 8005b9c:	601a      	str	r2, [r3, #0]

    /* Pickup the ARP message type.  */
    message_type =  (ULONG)(*(message_ptr + 1) & 0xFFFF);
 8005b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the ARP message type is valid.  */
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 8005ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d00d      	beq.n	8005bca <_nx_arp_packet_receive+0xb4>
 8005bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d00a      	beq.n	8005bca <_nx_arp_packet_receive+0xb4>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 8005bc2:	6838      	ldr	r0, [r7, #0]
 8005bc4:	f003 fcdc 	bl	8009580 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8005bc8:	e1c8      	b.n	8005f5c <_nx_arp_packet_receive+0x446>
    }

    /* Pick up the sender's physical address from the message.  */
    sender_physical_msw =  (*(message_ptr + 2) >> 16);
 8005bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bcc:	3308      	adds	r3, #8
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	0c1b      	lsrs	r3, r3, #16
 8005bd2:	63bb      	str	r3, [r7, #56]	; 0x38
    sender_physical_lsw =  (*(message_ptr + 2) << 16) | (*(message_ptr + 3) >> 16);
 8005bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	041a      	lsls	r2, r3, #16
 8005bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bde:	330c      	adds	r3, #12
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	0c1b      	lsrs	r3, r3, #16
 8005be4:	4313      	orrs	r3, r2
 8005be6:	637b      	str	r3, [r7, #52]	; 0x34
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
 8005be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bea:	330c      	adds	r3, #12
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	041a      	lsls	r2, r3, #16
 8005bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf2:	3310      	adds	r3, #16
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	0c1b      	lsrs	r3, r3, #16
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	633b      	str	r3, [r7, #48]	; 0x30
    target_ip_address =    *(message_ptr + 6);
 8005bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Does the packet have an interface assigned? */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d104      	bne.n	8005c14 <_nx_arp_packet_receive+0xfe>
    {

        /* No, so default it to the primary interface. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &ip_ptr -> nx_ip_interface[0];
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f503 62e4 	add.w	r2, r3, #1824	; 0x720
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Pickup the interface information from the incoming packet. */
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c18:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if it is an IP address conflict when IP address probing.  */
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d12e      	bne.n	8005c80 <_nx_arp_packet_receive+0x16a>
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8005c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d02a      	beq.n	8005c80 <_nx_arp_packet_receive+0x16a>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8005c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d007      	beq.n	8005c44 <_nx_arp_packet_receive+0x12e>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d122      	bne.n	8005c80 <_nx_arp_packet_receive+0x16a>
         ((sender_ip_address == 0) && (target_ip_address == interface_ptr -> nx_interface_ip_probe_address))))
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d11d      	bne.n	8005c80 <_nx_arp_packet_receive+0x16a>
    {

        /* Make sure the sender physical address is not ours.  */
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d104      	bne.n	8005c58 <_nx_arp_packet_receive+0x142>
            (sender_physical_lsw != interface_ptr -> nx_interface_physical_address_lsw))
 8005c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c50:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 8005c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d00f      	beq.n	8005c78 <_nx_arp_packet_receive+0x162>
        {

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00b      	beq.n	8005c78 <_nx_arp_packet_receive+0x162>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	79db      	ldrb	r3, [r3, #7]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	47a0      	blx	r4
                                                                           sender_physical_msw, sender_physical_lsw);
            }
        }

        /* Release the packet. */
        _nx_packet_release(packet_ptr);
 8005c78:	6838      	ldr	r0, [r7, #0]
 8005c7a:	f003 fc81 	bl	8009580 <_nx_packet_release>

        return;
 8005c7e:	e16d      	b.n	8005f5c <_nx_arp_packet_receive+0x446>
    }

    /* Determine if it is an address conflict packet after set the IP address.  */
    if ((sender_ip_address != 0) && (sender_ip_address == interface_ptr -> nx_interface_ip_address))
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d040      	beq.n	8005d08 <_nx_arp_packet_receive+0x1f2>
 8005c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d13b      	bne.n	8005d08 <_nx_arp_packet_receive+0x1f2>
    {

        /* Is it sent from other devices. */
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d105      	bne.n	8005ca8 <_nx_arp_packet_receive+0x192>
            (sender_physical_lsw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw))
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca0:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 8005ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d02b      	beq.n	8005d00 <_nx_arp_packet_receive+0x1ea>
        {

            /* Yes it is.  */
            if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout == 0)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10a      	bne.n	8005cc8 <_nx_arp_packet_receive+0x1b2>
            {

                /* Set defend timeout. */
                packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout = NX_ARP_DEFEND_INTERVAL;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb6:	220a      	movs	r2, #10
 8005cb8:	645a      	str	r2, [r3, #68]	; 0x44

                /* Send the announcement. */
                _nx_arp_packet_send(ip_ptr, sender_ip_address, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f94e 	bl	8005f64 <_nx_arp_packet_send>
            }

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 8005cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00b      	beq.n	8005ce8 <_nx_arp_packet_receive+0x1d2>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 8005cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	79db      	ldrb	r3, [r3, #7]
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	47a0      	blx	r4

            /* This is likely in response to our previous gratuitous ARP from another entity on the
               network has the same IP address.  */

            /* Determine if there is a gratuitous ARP response handler.  */
            if (ip_ptr -> nx_ip_arp_gratuitous_response_handler)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d006      	beq.n	8005d00 <_nx_arp_packet_receive+0x1ea>
            {

                /* Yes, call the gratuitous ARP response handler. Note that it is responsible
                   for releasing the packet!  */
                (ip_ptr -> nx_ip_arp_gratuitous_response_handler)(ip_ptr, packet_ptr);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	4798      	blx	r3

                return;
 8005cfe:	e12d      	b.n	8005f5c <_nx_arp_packet_receive+0x446>
            return;
#endif /* NX_ARP_DEFEND_BY_REPLY */
        }

        /* Release the conflict packet. */
        _nx_packet_release(packet_ptr);
 8005d00:	6838      	ldr	r0, [r7, #0]
 8005d02:	f003 fc3d 	bl	8009580 <_nx_packet_release>

        return;
 8005d06:	e129      	b.n	8005f5c <_nx_arp_packet_receive+0x446>
    }

    /* Determine what type of ARP message this is.  Note that ARP requests must
       also specify this IP instance's IP address.  */
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 8005d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	f040 808f 	bne.w	8005e2e <_nx_arp_packet_receive+0x318>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	f040 8088 	bne.w	8005e2e <_nx_arp_packet_receive+0x318>
    {

#ifndef NX_DISABLE_ARP_INFO

        /* Increment the ARP requests received count.  */
        ip_ptr -> nx_ip_arp_requests_received++;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	671a      	str	r2, [r3, #112]	; 0x70

        /* Increment the ARP responses sent count.  */
        ip_ptr -> nx_ip_arp_responses_sent++;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	675a      	str	r2, [r3, #116]	; 0x74

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_RESPONSE_SEND, ip_ptr, sender_ip_address, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the ARP message type to ARP response.  */
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 8005d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d34:	3304      	adds	r3, #4
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	0c1b      	lsrs	r3, r3, #16
 8005d3a:	041b      	lsls	r3, r3, #16
 8005d3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d3e:	3204      	adds	r2, #4
 8005d40:	f043 0302 	orr.w	r3, r3, #2
 8005d44:	6013      	str	r3, [r2, #0]


        /* Now fill in the new source and destination information for the ARP response.  */
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw >> 16);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8005d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d58:	3308      	adds	r3, #8
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	601a      	str	r2, [r3, #0]
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address >> 16);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 8005d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d70:	330c      	adds	r3, #12
 8005d72:	430a      	orrs	r2, r1
 8005d74:	601a      	str	r2, [r3, #0]
        *(message_ptr + 4) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sender_physical_msw;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	0419      	lsls	r1, r3, #16
 8005d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d80:	3310      	adds	r3, #16
 8005d82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d84:	430a      	orrs	r2, r1
 8005d86:	601a      	str	r2, [r3, #0]
        *(message_ptr + 5) =  (ULONG)sender_physical_lsw;
 8005d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d8a:	3314      	adds	r3, #20
 8005d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d8e:	601a      	str	r2, [r3, #0]
        *(message_ptr + 6) =  (ULONG)sender_ip_address;
 8005d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d92:	3318      	adds	r3, #24
 8005d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d96:	601a      	str	r2, [r3, #0]

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the ARP message.  */
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8005d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da0:	3304      	adds	r3, #4
 8005da2:	ba12      	rev	r2, r2
 8005da4:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da8:	3308      	adds	r3, #8
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dae:	3308      	adds	r3, #8
 8005db0:	ba12      	rev	r2, r2
 8005db2:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8005db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db6:	330c      	adds	r3, #12
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dbc:	330c      	adds	r3, #12
 8005dbe:	ba12      	rev	r2, r2
 8005dc0:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8005dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc4:	3310      	adds	r3, #16
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dca:	3310      	adds	r3, #16
 8005dcc:	ba12      	rev	r2, r2
 8005dce:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8005dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd2:	3314      	adds	r3, #20
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd8:	3314      	adds	r3, #20
 8005dda:	ba12      	rev	r2, r2
 8005ddc:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8005dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de0:	3318      	adds	r3, #24
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de6:	3318      	adds	r3, #24
 8005de8:	ba12      	rev	r2, r2
 8005dea:	601a      	str	r2, [r3, #0]

        /* Make sure the packet length is set properly.  */
        packet_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	221c      	movs	r2, #28
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup the append pointer, since the received ARP packet can be padded
           with unnecessary bytes.  */
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f103 021c 	add.w	r2, r3, #28
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	60da      	str	r2, [r3, #12]

        /* Send the ARP request to the driver.  */
        driver_request.nx_ip_driver_ptr =      ip_ptr;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command =  NX_LINK_ARP_RESPONSE_SEND;
 8005e02:	2306      	movs	r3, #6
 8005e04:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet =   packet_ptr;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_physical_address_msw =  sender_physical_msw;
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0c:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  sender_physical_lsw;
 8005e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e10:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_ARP_RESPONSE_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* No need to update interface.  When responding to an ARP request, use the same interface where the request was received. */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1e:	f107 0208 	add.w	r2, r7, #8
 8005e22:	4610      	mov	r0, r2
 8005e24:	4798      	blx	r3

        /* Set the consumed as NX_TRUE, do not need to release the packet.  */
        consumed = NX_TRUE;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8005e2c:	e00d      	b.n	8005e4a <_nx_arp_packet_receive+0x334>
        /* We have a response to a previous ARP request or Gratuitous ARP from another network entity.  */

#ifndef NX_DISABLE_ARP_INFO

        /* Check for the message type to see which counter to increment.  */
        if (message_type == NX_ARP_OPTION_REQUEST)
 8005e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d105      	bne.n	8005e40 <_nx_arp_packet_receive+0x32a>
        {

            /* Increment the ARP requests received count.  */
            ip_ptr -> nx_ip_arp_requests_received++;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e38:	1c5a      	adds	r2, r3, #1
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	671a      	str	r2, [r3, #112]	; 0x70
 8005e3e:	e004      	b.n	8005e4a <_nx_arp_packet_receive+0x334>
        }
        else
        {

            /* Increment the ARP responses received count.  */
            ip_ptr -> nx_ip_arp_responses_received++;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Now we need to search through the active ARP list for the IP address
       to see if there is a matching entry.  */

    /* Calculate the hash index for the sender IP address.  */
    index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	0a1a      	lsrs	r2, r3, #8
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	4413      	add	r3, r2
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup the first ARP entry.  */
    arp_ptr = NX_NULL;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Ignore anything from any ARP packet with a zero sender IP address. */
    if (sender_ip_address != 0)
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d03a      	beq.n	8005ed8 <_nx_arp_packet_receive+0x3c2>
    {
        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ROUTE_TABLE_MASK);
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	0a1a      	lsrs	r2, r3, #8
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	4413      	add	r3, r2
 8005e6a:	f003 031f 	and.w	r3, r3, #31
 8005e6e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the first ARP entry.  */
        arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e74:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7c:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Loop to look for an ARP match.  */
    while (arp_ptr)
 8005e7e:	e02b      	b.n	8005ed8 <_nx_arp_packet_receive+0x3c2>
    {

        /* Check for an IP match.  */
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 8005e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d117      	bne.n	8005eba <_nx_arp_packet_receive+0x3a4>
                }
            }
#endif /* NX_ENABLE_ARP_MAC_CHANGE_NOTIFICATION */

            /* No need to update the static ARP entry. */
            if (arp_ptr -> nx_arp_route_static)
 8005e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d126      	bne.n	8005ee0 <_nx_arp_packet_receive+0x3ca>
            {
                break;
            }

            /* Save the physical address found in this ARP response.  */
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8005e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e96:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8005e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e9c:	629a      	str	r2, [r3, #40]	; 0x28

            /* Set the update rate to the expiration rate since we now have an ARP
               response.  */
            arp_ptr -> nx_arp_entry_next_update =  NX_ARP_EXPIRATION_RATE;
 8005e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	605a      	str	r2, [r3, #4]

            /* Reset the retry counter for this ARP entry.  */
            arp_ptr -> nx_arp_retries =  0;
 8005ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	609a      	str	r2, [r3, #8]

            /* Set the interface attached to this packet. */
            arp_ptr -> nx_arp_ip_interface = interface_ptr;
 8005eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eae:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Call queue send function to send the packet queued up.  */
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 8005eb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fa2c 	bl	8006310 <_nx_arp_queue_send>

            /* Yes, we found a match.  Get out of the loop!  */
            break;
 8005eb8:	e013      	b.n	8005ee2 <_nx_arp_packet_receive+0x3cc>
        }

        /* Move to the next active ARP entry.  */
        arp_ptr =  arp_ptr -> nx_arp_active_next;
 8005eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	647b      	str	r3, [r7, #68]	; 0x44

        /* Determine if we are at the end of the ARP list.  */
        if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ec4:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ecc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d102      	bne.n	8005ed8 <_nx_arp_packet_receive+0x3c2>
        {

            /* Clear the ARP pointer.  */
            arp_ptr =  NX_NULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	647b      	str	r3, [r7, #68]	; 0x44
            break;
 8005ed6:	e004      	b.n	8005ee2 <_nx_arp_packet_receive+0x3cc>
    while (arp_ptr)
 8005ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1d0      	bne.n	8005e80 <_nx_arp_packet_receive+0x36a>
 8005ede:	e000      	b.n	8005ee2 <_nx_arp_packet_receive+0x3cc>
                break;
 8005ee0:	bf00      	nop
        }
    }

    /* Determine if we have a packet to release. */
    if (consumed == NX_FALSE)
 8005ee2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d102      	bne.n	8005ef0 <_nx_arp_packet_receive+0x3da>
    {
        _nx_packet_release(packet_ptr);
 8005eea:	6838      	ldr	r0, [r7, #0]
 8005eec:	f003 fb48 	bl	8009580 <_nx_packet_release>
    }

#ifndef NX_DISABLE_ARP_AUTO_ENTRY

    /* Determine if anything was found.  Ignore ARP messages with a zero IP sender address.   */
    if ((arp_ptr == NX_NULL) && (sender_ip_address != 0))
 8005ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d132      	bne.n	8005f5c <_nx_arp_packet_receive+0x446>
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d02f      	beq.n	8005f5c <_nx_arp_packet_receive+0x446>
    {

        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	0a1a      	lsrs	r2, r3, #8
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	4413      	add	r3, r2
 8005f04:	f003 031f 	and.w	r3, r3, #31
 8005f08:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Allocate a new ARP entry in advance of the need to send to the IP
           address.  */
        if (((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)) == NX_SUCCESS)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 8005f10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f12:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005f16:	0092      	lsls	r2, r2, #2
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	4411      	add	r1, r2
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	4798      	blx	r3
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d119      	bne.n	8005f5c <_nx_arp_packet_receive+0x446>
        {

            /* Setup a pointer to the new ARP entry.  */
            arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f2c:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	647b      	str	r3, [r7, #68]	; 0x44

            /* Setup the IP address and clear the physical mapping.  */
            arp_ptr -> nx_arp_ip_address =            sender_ip_address;
 8005f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f3c:	621a      	str	r2, [r3, #32]
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8005f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f42:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8005f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f48:	629a      	str	r2, [r3, #40]	; 0x28
            arp_ptr -> nx_arp_entry_next_update =     NX_ARP_EXPIRATION_RATE;
 8005f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	605a      	str	r2, [r3, #4]
            arp_ptr -> nx_arp_retries =               0;
 8005f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f52:	2200      	movs	r2, #0
 8005f54:	609a      	str	r2, [r3, #8]
            arp_ptr -> nx_arp_ip_interface         =  interface_ptr;
 8005f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f5a:	62da      	str	r2, [r3, #44]	; 0x2c
        }
    }
#endif /* NX_DISABLE_ARP_AUTO_ENTRY */
}
 8005f5c:	3754      	adds	r7, #84	; 0x54
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd90      	pop	{r4, r7, pc}
	...

08005f64 <_nx_arp_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_send(NX_IP *ip_ptr, ULONG destination_ip, NX_INTERFACE *nx_interface)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b08e      	sub	sp, #56	; 0x38
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
NX_PACKET   *request_ptr;
ULONG       *message_ptr;
NX_IP_DRIVER driver_request;

    /* nx_interface must not be NX_NULL. */
    NX_ASSERT(nx_interface != NX_NULL);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d104      	bne.n	8005f80 <_nx_arp_packet_send+0x1c>
 8005f76:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7a:	f007 fc71 	bl	800d860 <_tx_thread_sleep>
 8005f7e:	e7fa      	b.n	8005f76 <_nx_arp_packet_send+0x12>
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 8005f86:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	222c      	movs	r2, #44	; 0x2c
 8005f8e:	f002 ff5b 	bl	8008e48 <_nx_packet_allocate>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f040 8081 	bne.w	800609c <_nx_arp_packet_send+0x138>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Stamp the packet with the outgoing interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "request_ptr" was initialized in _nx_packet_allocate. */
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = nx_interface;
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	631a      	str	r2, [r3, #48]	; 0x30

#ifndef NX_DISABLE_ARP_INFO
    /* Increment the ARP requests sent count.  */
    ip_ptr -> nx_ip_arp_requests_sent++;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	66da      	str	r2, [r3, #108]	; 0x6c
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_REQUEST_SEND, ip_ptr, destination_ip, request_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Build the ARP request packet.  */

    /* Setup the size of the ARP message.  */
    request_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	221c      	movs	r2, #28
 8005fae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the prepend pointer.  */
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	3a1c      	subs	r2, #28
 8005fb8:	609a      	str	r2, [r3, #8]

    /* Setup the pointer to the message area.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)request_ptr -> nx_packet_prepend_ptr;
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	637b      	str	r3, [r7, #52]	; 0x34

    /* Write the Hardware type into the message.  */
    *message_ptr =      (ULONG)(NX_ARP_HARDWARE_TYPE << 16) | (NX_ARP_PROTOCOL_TYPE);
 8005fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc2:	f44f 3284 	mov.w	r2, #67584	; 0x10800
 8005fc6:	601a      	str	r2, [r3, #0]
    *(message_ptr + 1) =  (ULONG)(NX_ARP_HARDWARE_SIZE << 24) | (NX_ARP_PROTOCOL_SIZE << 16) |
 8005fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4a35      	ldr	r2, [pc, #212]	; (80060a4 <_nx_arp_packet_send+0x140>)
 8005fce:	601a      	str	r2, [r3, #0]
        NX_ARP_OPTION_REQUEST;

    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_physical_address_lsw >> 16);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8005fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fde:	3308      	adds	r3, #8
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	601a      	str	r2, [r3, #0]
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_ip_address >> 16);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff2:	330c      	adds	r3, #12
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	601a      	str	r2, [r3, #0]
    *(message_ptr + 4) =  (ULONG)(nx_interface -> nx_interface_ip_address << 16);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	695a      	ldr	r2, [r3, #20]
 8005ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffe:	3310      	adds	r3, #16
 8006000:	0412      	lsls	r2, r2, #16
 8006002:	601a      	str	r2, [r3, #0]
    *(message_ptr + 5) =  (ULONG)0;
 8006004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006006:	3314      	adds	r3, #20
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]
    *(message_ptr + 6) =  (ULONG)destination_ip;
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	3318      	adds	r3, #24
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	601a      	str	r2, [r3, #0]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr));
 8006014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	ba1a      	rev	r2, r3
 800601a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800601e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006020:	3304      	adds	r3, #4
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006026:	3304      	adds	r3, #4
 8006028:	ba12      	rev	r2, r2
 800602a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800602c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602e:	3308      	adds	r3, #8
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006034:	3308      	adds	r3, #8
 8006036:	ba12      	rev	r2, r2
 8006038:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800603a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603c:	330c      	adds	r3, #12
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006042:	330c      	adds	r3, #12
 8006044:	ba12      	rev	r2, r2
 8006046:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8006048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604a:	3310      	adds	r3, #16
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006050:	3310      	adds	r3, #16
 8006052:	ba12      	rev	r2, r2
 8006054:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8006056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006058:	3314      	adds	r3, #20
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605e:	3314      	adds	r3, #20
 8006060:	ba12      	rev	r2, r2
 8006062:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8006064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006066:	3318      	adds	r3, #24
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606c:	3318      	adds	r3, #24
 800606e:	ba12      	rev	r2, r2
 8006070:	601a      	str	r2, [r3, #0]

    /* Set up the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_command =               NX_LINK_ARP_SEND;
 8006076:	2305      	movs	r3, #5
 8006078:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_packet =                request_ptr;
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 800607e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006082:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8006084:	f04f 33ff 	mov.w	r3, #4294967295
 8006088:	61fb      	str	r3, [r7, #28]
    driver_request.nx_ip_driver_interface            =  nx_interface;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Send the ARP request to the driver.  */
    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006092:	f107 0210 	add.w	r2, r7, #16
 8006096:	4610      	mov	r0, r2
 8006098:	4798      	blx	r3
 800609a:	e000      	b.n	800609e <_nx_arp_packet_send+0x13a>
                return;
 800609c:	bf00      	nop
}
 800609e:	3738      	adds	r7, #56	; 0x38
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	06040001 	.word	0x06040001

080060a8 <_nx_arp_periodic_update>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_periodic_update(NX_IP *ip_ptr)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	; 0x28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Pickup pointer to ARP dynamic list.  */
    arp_entry =  ip_ptr -> nx_ip_arp_dynamic_list;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80060b6:	623b      	str	r3, [r7, #32]

    /* Loop through the active ARP entries to see if they need updating.  */
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 80060b8:	2300      	movs	r3, #0
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
 80060bc:	e0af      	b.n	800621e <_nx_arp_periodic_update+0x176>
    {

        /* Check this ARP entry to see if it need updating.  */
        if (arp_entry -> nx_arp_entry_next_update)
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 80a5 	beq.w	8006212 <_nx_arp_periodic_update+0x16a>
        {

            /* Decrement the next update field.  */
            arp_entry -> nx_arp_entry_next_update--;
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	1e5a      	subs	r2, r3, #1
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	605a      	str	r2, [r3, #4]

            /* Determine if an ARP expiration is present.  */
            if (!arp_entry -> nx_arp_entry_next_update)
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f040 809b 	bne.w	8006212 <_nx_arp_periodic_update+0x16a>
            {

                /* Yes, an ARP expiration is present.   */

                /* Determine if the retry counter has been exceeded.  */
                if (arp_entry -> nx_arp_retries == NX_ARP_MAXIMUM_RETRIES)
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	2b12      	cmp	r3, #18
 80060e2:	f040 8086 	bne.w	80061f2 <_nx_arp_periodic_update+0x14a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80060e6:	f3ef 8310 	mrs	r3, PRIMASK
 80060ea:	613b      	str	r3, [r7, #16]
    return(posture);
 80060ec:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80060ee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80060f0:	b672      	cpsid	i
    return(int_posture);
 80060f2:	68fb      	ldr	r3, [r7, #12]

                    /* The number of retries has been exceeded. The entry is removed
                       from the active list and any queued packet is released.  */

                    /* Disable interrupts.  */
                    TX_DISABLE
 80060f4:	61bb      	str	r3, [r7, #24]

                    /* This ARP entry has expired, remove it from the active ARP list.  Check to make
                       sure it is still active.  */
                    if (arp_entry -> nx_arp_active_list_head)
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d028      	beq.n	8006150 <_nx_arp_periodic_update+0xa8>
                    {

                        /* Determine if this is the only ARP entry on the list.  */
                        if (arp_entry == arp_entry -> nx_arp_active_next)
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	6a3a      	ldr	r2, [r7, #32]
 8006104:	429a      	cmp	r2, r3
 8006106:	d104      	bne.n	8006112 <_nx_arp_periodic_update+0x6a>
                        {

                            /* Remove the entry from the list.  */
                            *(arp_entry -> nx_arp_active_list_head) =  NX_NULL;
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	e014      	b.n	800613c <_nx_arp_periodic_update+0x94>
                        {

                            /* Remove the entry from a list of more than one entry.  */

                            /* Update the list head pointer.  */
                            if (*(arp_entry -> nx_arp_active_list_head) == arp_entry)
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6a3a      	ldr	r2, [r7, #32]
 800611a:	429a      	cmp	r2, r3
 800611c:	d104      	bne.n	8006128 <_nx_arp_periodic_update+0x80>
                            {
                                *(arp_entry -> nx_arp_active_list_head) =  arp_entry -> nx_arp_active_next;
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	6a3a      	ldr	r2, [r7, #32]
 8006124:	6952      	ldr	r2, [r2, #20]
 8006126:	601a      	str	r2, [r3, #0]
                            }

                            /* Update the links of the adjacent ARP entries.  */
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8006128:	6a3b      	ldr	r3, [r7, #32]
 800612a:	695b      	ldr	r3, [r3, #20]
                                arp_entry -> nx_arp_active_previous;
 800612c:	6a3a      	ldr	r2, [r7, #32]
 800612e:	6992      	ldr	r2, [r2, #24]
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8006130:	619a      	str	r2, [r3, #24]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	699b      	ldr	r3, [r3, #24]
                                arp_entry -> nx_arp_active_next;
 8006136:	6a3a      	ldr	r2, [r7, #32]
 8006138:	6952      	ldr	r2, [r2, #20]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 800613a:	615a      	str	r2, [r3, #20]
                        }

                        /* Decrease the number of active ARP entries.  */
                        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8006142:	1e5a      	subs	r2, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8

                        /* Clear the active head pointer.  */
                        arp_entry -> nx_arp_active_list_head =  NX_NULL;
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	2200      	movs	r2, #0
 800614e:	61da      	str	r2, [r3, #28]
                    }

                    /* Determine if this is the only ARP entry on the dynamic list.  */
                    if (arp_entry != arp_entry -> nx_arp_pool_next)
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	6a3a      	ldr	r2, [r7, #32]
 8006156:	429a      	cmp	r2, r3
 8006158:	d02a      	beq.n	80061b0 <_nx_arp_periodic_update+0x108>
                        /* No. Place the ARP entry at the end of the dynamic ARP pool, which is where new
                           ARP requests are allocated from.  */

                        /* Remove the entry from a list of more than one entry.  */
                        /* Update the links of the adjacent ARP dynamic pool entries.  */
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	68db      	ldr	r3, [r3, #12]
                            arp_entry -> nx_arp_pool_previous;
 800615e:	6a3a      	ldr	r2, [r7, #32]
 8006160:	6912      	ldr	r2, [r2, #16]
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 8006162:	611a      	str	r2, [r3, #16]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	691b      	ldr	r3, [r3, #16]
                            arp_entry -> nx_arp_pool_next;
 8006168:	6a3a      	ldr	r2, [r7, #32]
 800616a:	68d2      	ldr	r2, [r2, #12]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 800616c:	60da      	str	r2, [r3, #12]

                        /* Update the list head pointer.  */
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8006174:	6a3a      	ldr	r2, [r7, #32]
 8006176:	429a      	cmp	r2, r3
 8006178:	d104      	bne.n	8006184 <_nx_arp_periodic_update+0xdc>
                        {
                            ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry -> nx_arp_pool_next;
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
                        }


                        /* Add ARP entry to the end of the list.  */
                        arp_entry -> nx_arp_pool_next =
                            ip_ptr -> nx_ip_arp_dynamic_list;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 26d4 	ldr.w	r2, [r3, #1748]	; 0x6d4
                        arp_entry -> nx_arp_pool_next =
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	60da      	str	r2, [r3, #12]
                        arp_entry -> nx_arp_pool_previous =
                            (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8006194:	691a      	ldr	r2, [r3, #16]
                        arp_entry -> nx_arp_pool_previous =
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	611a      	str	r2, [r3, #16]
                        ((ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous) -> nx_arp_pool_next =
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	6a3a      	ldr	r2, [r7, #32]
 80061a4:	60da      	str	r2, [r3, #12]
                            arp_entry;
                        (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous =   arp_entry;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80061ac:	6a3a      	ldr	r2, [r7, #32]
 80061ae:	611a      	str	r2, [r3, #16]
                    }

                    /* Pickup the queued packets head pointer.  */
                    next_packet_ptr =  arp_entry -> nx_arp_packets_waiting;
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	61fb      	str	r3, [r7, #28]

                    /* Clear the queued packets head pointer.  */
                    arp_entry -> nx_arp_packets_waiting =  NX_NULL;
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	2200      	movs	r2, #0
 80061ba:	631a      	str	r2, [r3, #48]	; 0x30
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f383 8810 	msr	PRIMASK, r3
}
 80061c6:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Loop to remove all queued packets.  */
                    while (next_packet_ptr)
 80061c8:	e00f      	b.n	80061ea <_nx_arp_periodic_update+0x142>
                    {

                        /* Pickup the packet pointer at the head of the queue.  */
                        packet_ptr =  next_packet_ptr;
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	617b      	str	r3, [r7, #20]

                        /* Move to the next packet in the queue.  */
                        next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	61fb      	str	r3, [r7, #28]

                        /* Clear the next packet queue pointer.  */
                        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	2200      	movs	r2, #0
 80061d8:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                        /* Release the packet that was queued for the expired ARP entry.  */
                        _nx_packet_transmit_release(packet_ptr);
 80061e4:	6978      	ldr	r0, [r7, #20]
 80061e6:	f003 fa83 	bl	80096f0 <_nx_packet_transmit_release>
                    while (next_packet_ptr)
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1ec      	bne.n	80061ca <_nx_arp_periodic_update+0x122>
 80061f0:	e00f      	b.n	8006212 <_nx_arp_periodic_update+0x16a>
                {

                    /* We haven't yet had a response to this ARP request so send it again!  */

                    /* Increment the ARP retry counter.  */
                    arp_entry -> nx_arp_retries++;
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	609a      	str	r2, [r3, #8]

                    /* Setup the ARP update rate to the maximum value again.  */
                    arp_entry -> nx_arp_entry_next_update =  NX_ARP_UPDATE_RATE;
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	220a      	movs	r2, #10
 8006200:	605a      	str	r2, [r3, #4]

                    /* Send the ARP request out.  */
                    _nx_arp_packet_send(ip_ptr, arp_entry -> nx_arp_ip_address, arp_entry -> nx_arp_ip_interface);
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	6a19      	ldr	r1, [r3, #32]
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	461a      	mov	r2, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff fea9 	bl	8005f64 <_nx_arp_packet_send>
                }
            }
        }

        /* Move to the next ARP entry.  */
        arp_entry =  arp_entry -> nx_arp_pool_next;
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	623b      	str	r3, [r7, #32]
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	3301      	adds	r3, #1
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8006224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006226:	429a      	cmp	r2, r3
 8006228:	f4ff af49 	bcc.w	80060be <_nx_arp_periodic_update+0x16>
    }


    /* Reduce the defend timeout of interfaces.  */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800622c:	2300      	movs	r3, #0
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
 8006230:	e033      	b.n	800629a <_nx_arp_periodic_update+0x1f2>
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_FALSE)
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	440b      	add	r3, r1
 8006240:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d021      	beq.n	800628e <_nx_arp_periodic_update+0x1e6>
        {
            continue;
        }

        if (ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout == 0)
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	440b      	add	r3, r1
 8006258:	f203 7364 	addw	r3, r3, #1892	; 0x764
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d017      	beq.n	8006292 <_nx_arp_periodic_update+0x1ea>
        {
            continue;
        }

        ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout--;
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006266:	4613      	mov	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	440b      	add	r3, r1
 8006270:	f203 7364 	addw	r3, r3, #1892	; 0x764
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	1e59      	subs	r1, r3, #1
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627c:	4613      	mov	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	4403      	add	r3, r0
 8006286:	f203 7364 	addw	r3, r3, #1892	; 0x764
 800628a:	6019      	str	r1, [r3, #0]
 800628c:	e002      	b.n	8006294 <_nx_arp_periodic_update+0x1ec>
            continue;
 800628e:	bf00      	nop
 8006290:	e000      	b.n	8006294 <_nx_arp_periodic_update+0x1ec>
            continue;
 8006292:	bf00      	nop
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	3301      	adds	r3, #1
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0c8      	beq.n	8006232 <_nx_arp_periodic_update+0x18a>
    }
}
 80062a0:	bf00      	nop
 80062a2:	bf00      	nop
 80062a4:	3728      	adds	r7, #40	; 0x28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <_nx_arp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_process(NX_IP *ip_ptr)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b088      	sub	sp, #32
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]

NX_PACKET *packet_ptr;


    /* Loop to process all ARP deferred packet requests.  */
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 80062b2:	e023      	b.n	80062fc <_nx_arp_queue_process+0x52>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80062b4:	f3ef 8310 	mrs	r3, PRIMASK
 80062b8:	617b      	str	r3, [r7, #20]
    return(posture);
 80062ba:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80062bc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80062be:	b672      	cpsid	i
    return(int_posture);
 80062c0:	693b      	ldr	r3, [r7, #16]
    {

        /* Remove the first packet and process it!  */

        /* Disable interrupts.  */
        TX_DISABLE
 80062c2:	61fb      	str	r3, [r7, #28]

        /* Pickup the first packet.  */
        packet_ptr =  ip_ptr -> nx_ip_arp_deferred_received_packet_head;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 80062ca:	61bb      	str	r3, [r7, #24]

        /* Move the head pointer to the next packet.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	69da      	ldr	r2, [r3, #28]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc

        /* Check for end of ARP deferred processing queue.  */
        if (ip_ptr -> nx_ip_arp_deferred_received_packet_head == NX_NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d103      	bne.n	80062e8 <_nx_arp_queue_process+0x3e>
        {

            /* Yes, the ARP deferred queue is empty.  Set the tail pointer to NULL.  */
            ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  NX_NULL;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f383 8810 	msr	PRIMASK, r3
}
 80062f2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual ARP packet receive function.  */
        _nx_arp_packet_receive(ip_ptr, packet_ptr);
 80062f4:	69b9      	ldr	r1, [r7, #24]
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff fc0d 	bl	8005b16 <_nx_arp_packet_receive>
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1d6      	bne.n	80062b4 <_nx_arp_queue_process+0xa>
    }
}
 8006306:	bf00      	nop
 8006308:	bf00      	nop
 800630a:	3720      	adds	r7, #32
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <_nx_arp_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_send(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b090      	sub	sp, #64	; 0x40
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
NX_PACKET   *queued_list_head;
NX_PACKET   *packet_ptr;
NX_IP_DRIVER driver_request;

    /* Initialize the queued list head to NULL.  */
    queued_list_head =  NX_NULL;
 800631a:	2300      	movs	r3, #0
 800631c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800631e:	f3ef 8310 	mrs	r3, PRIMASK
 8006322:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8006326:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8006328:	b672      	cpsid	i
    return(int_posture);
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Determine if this ARP entry has a packet queued up for sending.  */

    /* Disable interrupts before checking.  */
    TX_DISABLE
 800632c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Look at the ARP packet queue pointer.  */
    if (arp_ptr -> nx_arp_packets_waiting)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <_nx_arp_queue_send+0x32>
    {

        /* Pickup the packet pointer and clear the ARP queue pointer.  */
        queued_list_head =  arp_ptr -> nx_arp_packets_waiting;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633a:	63fb      	str	r3, [r7, #60]	; 0x3c
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2200      	movs	r2, #0
 8006340:	631a      	str	r2, [r3, #48]	; 0x30
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	f383 8810 	msr	PRIMASK, r3
}
 800634c:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Are there any packets queued to send?  */
    while (queued_list_head)
 800634e:	e04c      	b.n	80063ea <_nx_arp_queue_send+0xda>
    {

        /* Pickup the first entry on the list.  */
        packet_ptr =  queued_list_head;
 8006350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006352:	637b      	str	r3, [r7, #52]	; 0x34

        /* Move to the next entry on the ARP packet queue.  */
        queued_list_head =  queued_list_head -> nx_packet_queue_next;
 8006354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the packet's queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800635a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635c:	2200      	movs	r2, #0
 800635e:	61da      	str	r2, [r3, #28]

        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = arp_ptr -> nx_arp_ip_interface;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006366:	631a      	str	r2, [r3, #48]	; 0x30

        /* Build the driver request packet.  */
        driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006372:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_ptr                  =  ip_ptr;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command              =  NX_LINK_PACKET_SEND;
 8006378:	2300      	movs	r3, #0
 800637a:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet               =  packet_ptr;
 800637c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637e:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8006380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006384:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8006386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800638a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	429a      	cmp	r2, r3
 8006392:	d915      	bls.n	80063c0 <_nx_arp_queue_send+0xb0>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Fragmentation is needed, call the fragment routine if available. */
            if (ip_ptr -> nx_ip_fragment_processing)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800639a:	2b00      	cmp	r3, #0
 800639c:	d007      	beq.n	80063ae <_nx_arp_queue_send+0x9e>
            {

                /* Call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80063a4:	f107 0208 	add.w	r2, r7, #8
 80063a8:	4610      	mov	r0, r2
 80063aa:	4798      	blx	r3
 80063ac:	e01d      	b.n	80063ea <_nx_arp_queue_send+0xda>
#endif /* NX_DISABLE_FRAGMENTATION */

#ifndef NX_DISABLE_IP_INFO

                /* Increment the IP send packets dropped count.  */
                ip_ptr -> nx_ip_send_packets_dropped++;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
 80063b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80063ba:	f003 f999 	bl	80096f0 <_nx_packet_transmit_release>
 80063be:	e014      	b.n	80063ea <_nx_arp_queue_send+0xda>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	4413      	add	r3, r2
 80063d4:	f1a3 0214 	sub.w	r2, r3, #20
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	619a      	str	r2, [r3, #24]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_PACKET_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Send the queued IP packet out on the network via the attached driver.  */
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 80063dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e2:	f107 0208 	add.w	r2, r7, #8
 80063e6:	4610      	mov	r0, r2
 80063e8:	4798      	blx	r3
    while (queued_list_head)
 80063ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1af      	bne.n	8006350 <_nx_arp_queue_send+0x40>
        }
    }
}
 80063f0:	bf00      	nop
 80063f2:	bf00      	nop
 80063f4:	3740      	adds	r7, #64	; 0x40
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <_nx_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_icmp_enable(NX_IP *ip_ptr)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ICMP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_ICMP_EVENTS, 0, 0);

    /* Setup the ICMP packet queue processing routine.  */
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a09      	ldr	r2, [pc, #36]	; (800642c <_nx_icmp_enable+0x30>)
 8006408:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c

    /* Setup the ICMP packet receiving routine, thereby enabling ICMP traffic.  */
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a08      	ldr	r2, [pc, #32]	; (8006430 <_nx_icmp_enable+0x34>)
 8006410:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368

    /* Setup the ICMPv4 packet process routine */
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a07      	ldr	r2, [pc, #28]	; (8006434 <_nx_icmp_enable+0x38>)
 8006418:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370

    /* Return a successful status!  */
    return(NX_SUCCESS);
 800641c:	2300      	movs	r3, #0
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	08006535 	.word	0x08006535
 8006430:	08006475 	.word	0x08006475
 8006434:	08006593 	.word	0x08006593

08006438 <_nx_icmp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* FEATURE_NX_IPV6 not defined */
    if (ip_ptr -> nx_ip_icmpv4_packet_process)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 8006448:	2b00      	cmp	r3, #0
 800644a:	d006      	beq.n	800645a <_nx_icmp_packet_process+0x22>
    {
        ip_ptr -> nx_ip_icmpv4_packet_process(ip_ptr, packet_ptr);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	4798      	blx	r3
        return;
 8006458:	e009      	b.n	800646e <_nx_icmp_packet_process+0x36>
    }

#ifndef NX_DISABLE_ICMP_INFO
    ip_ptr -> nx_ip_icmp_invalid_packets++;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif /* NX_DISABLE_ICMP_INFO */

    _nx_packet_release(packet_ptr);
 8006468:	6838      	ldr	r0, [r7, #0]
 800646a:	f003 f889 	bl	8009580 <_nx_packet_release>
}
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <_nx_icmp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b088      	sub	sp, #32
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP total messages received counter.  */
    ip_ptr -> nx_ip_icmp_total_messages_received++;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_ICMP_HEADER))
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	2b07      	cmp	r3, #7
 8006492:	d80a      	bhi.n	80064aa <_nx_icmp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error.  */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 80064a2:	6838      	ldr	r0, [r7, #0]
 80064a4:	f003 f86c 	bl	8009580 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 80064a8:	e03c      	b.n	8006524 <_nx_icmp_packet_receive+0xb0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80064aa:	f3ef 8305 	mrs	r3, IPSR
 80064ae:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80064b0:	69ba      	ldr	r2, [r7, #24]
        return;
    }
#endif /* NX_ENABLE_ICMP_ADDRESS_CHECK  */

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 80064b2:	4b1e      	ldr	r3, [pc, #120]	; (800652c <_nx_icmp_packet_receive+0xb8>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d106      	bne.n	80064ca <_nx_icmp_packet_receive+0x56>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 80064c2:	4b1b      	ldr	r3, [pc, #108]	; (8006530 <_nx_icmp_packet_receive+0xbc>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d028      	beq.n	800651c <_nx_icmp_packet_receive+0xa8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80064ca:	f3ef 8310 	mrs	r3, PRIMASK
 80064ce:	617b      	str	r3, [r7, #20]
    return(posture);
 80064d0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80064d2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80064d4:	b672      	cpsid	i
    return(int_posture);
 80064d6:	693b      	ldr	r3, [r7, #16]
        /* If system state is non-zero, we are in an ISR. If the current thread is not the IP thread,
           we need to prevent unnecessary recursion in loopback. Just place the message at the
           end of the ICMP message queue and wakeup the IP helper thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 80064d8:	61fb      	str	r3, [r7, #28]

        /* Add the packet to the ICMP message queue.  */
        if (ip_ptr -> nx_ip_icmp_queue_head)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d005      	beq.n	80064f0 <_nx_icmp_packet_receive+0x7c>
        {

            /* Link the current packet to the list head.  */
            packet_ptr -> nx_packet_queue_next =  ip_ptr -> nx_ip_icmp_queue_head;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 2374 	ldr.w	r2, [r3, #884]	; 0x374
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	61da      	str	r2, [r3, #28]
 80064ee:	e002      	b.n	80064f6 <_nx_icmp_packet_receive+0x82>
        }
        else
        {

            /* Empty queue, add to the head of the ICMP message queue.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2200      	movs	r2, #0
 80064f4:	61da      	str	r2, [r3, #28]
        }

        /* Update the queue head pointer.  */
        ip_ptr -> nx_ip_icmp_queue_head =  packet_ptr;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f383 8810 	msr	PRIMASK, r3
}
 8006508:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the ICMP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ICMP_EVENT, TX_OR);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006510:	2200      	movs	r2, #0
 8006512:	2104      	movs	r1, #4
 8006514:	4618      	mov	r0, r3
 8006516:	f005 fe97 	bl	800c248 <_tx_event_flags_set>
 800651a:	e003      	b.n	8006524 <_nx_icmp_packet_receive+0xb0>
    else
    {

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the ICMP processing directly.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff ff8a 	bl	8006438 <_nx_icmp_packet_process>
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* NX_DISABLE_IPV4 */
}
 8006524:	3720      	adds	r7, #32
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20000088 	.word	0x20000088
 8006530:	20014884 	.word	0x20014884

08006534 <_nx_icmp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_queue_process(NX_IP *ip_ptr)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800653c:	f3ef 8310 	mrs	r3, PRIMASK
 8006540:	60fb      	str	r3, [r7, #12]
    return(posture);
 8006542:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8006544:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006546:	b672      	cpsid	i
    return(int_posture);
 8006548:	68bb      	ldr	r3, [r7, #8]
NX_PACKET *queue_head;
NX_PACKET *packet_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 800654a:	61bb      	str	r3, [r7, #24]

    /* Remove the ICMP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_icmp_queue_head;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8006552:	61fb      	str	r3, [r7, #28]
    ip_ptr -> nx_ip_icmp_queue_head =  NX_NULL;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f383 8810 	msr	PRIMASK, r3
}
 8006566:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire ICMP message queue and process packets
       one by one.  */
    while (queue_head)
 8006568:	e00b      	b.n	8006582 <_nx_icmp_queue_process+0x4e>
    {

        /* Pickup the first queued ICMP message and remove it from the
           ICMP queue.  */
        packet_ptr =  queue_head;
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	617b      	str	r3, [r7, #20]
        queue_head =  queue_head -> nx_packet_queue_next;
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	61fb      	str	r3, [r7, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2200      	movs	r2, #0
 8006578:	61da      	str	r2, [r3, #28]

        /* Process the packet.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 800657a:	6979      	ldr	r1, [r7, #20]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7ff ff5b 	bl	8006438 <_nx_icmp_packet_process>
    while (queue_head)
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1f0      	bne.n	800656a <_nx_icmp_queue_process+0x36>
    }
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	3720      	adds	r7, #32
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <_nx_icmpv4_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b088      	sub	sp, #32
 8006596:	af02      	add	r7, sp, #8
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]

NX_ICMPV4_HEADER *header_ptr;
USHORT            checksum;
#if defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT              compute_checksum = 1;
 800659c:	2301      	movs	r3, #1
 800659e:	617b      	str	r3, [r7, #20]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	613b      	str	r3, [r7, #16]
#ifdef NX_DISABLE_ICMPV4_RX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_RX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_RX_CHECKSUM)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <_nx_icmpv4_packet_process+0x26>
    {
        compute_checksum = 0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	617b      	str	r3, [r7, #20]
    {
        compute_checksum = 1;
    }
#endif
#if defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d023      	beq.n	8006606 <_nx_icmpv4_packet_process+0x74>
#endif /* defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Calculate the ICMP message checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
                                            (UINT)packet_ptr -> nx_packet_length,
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 80065c2:	2300      	movs	r3, #0
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	2300      	movs	r3, #0
 80065c8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80065cc:	6838      	ldr	r0, [r7, #0]
 80065ce:	f000 fb14 	bl	8006bfa <_nx_ip_checksum_compute>
 80065d2:	4603      	mov	r3, r0
 80065d4:	81fb      	strh	r3, [r7, #14]
                                            /* ICMPv4 checksum does not include
                                               src/dest addresses */
                                            NX_NULL, NX_NULL);

        checksum =  ((USHORT) ~checksum) & NX_LOWER_16_MASK;
 80065d6:	89fb      	ldrh	r3, [r7, #14]
 80065d8:	43db      	mvns	r3, r3
 80065da:	81fb      	strh	r3, [r7, #14]

        /* Determine if the checksum is valid.  */
        if (checksum)
 80065dc:	89fb      	ldrh	r3, [r7, #14]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d011      	beq.n	8006606 <_nx_icmpv4_packet_process+0x74>
        {

#ifndef NX_DISABLE_ICMP_INFO

            /* Increment the ICMP invalid packet error.  */
            ip_ptr -> nx_ip_icmp_invalid_packets++;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

            /* Increment the ICMP checksum error count.  */
            ip_ptr -> nx_ip_icmp_checksum_errors++;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
#endif

            /* Nope, the checksum is invalid.  Toss this ICMP packet out.  */
            _nx_packet_release(packet_ptr);
 80065fe:	6838      	ldr	r0, [r7, #0]
 8006600:	f002 ffbe 	bl	8009580 <_nx_packet_release>
            return;
 8006604:	e01b      	b.n	800663e <_nx_icmpv4_packet_process+0xac>
        }
    }

    /* Determine the message type and call the appropriate handler.  */
    if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REPLY_TYPE)
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d104      	bne.n	8006618 <_nx_icmpv4_packet_process+0x86>
    {
        _nx_icmpv4_process_echo_reply(ip_ptr, packet_ptr);
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f817 	bl	8006644 <_nx_icmpv4_process_echo_reply>
 8006616:	e012      	b.n	800663e <_nx_icmpv4_packet_process+0xac>
    }
    else if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REQUEST_TYPE)
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b08      	cmp	r3, #8
 800661e:	d104      	bne.n	800662a <_nx_icmpv4_packet_process+0x98>
    {
        _nx_icmpv4_process_echo_request(ip_ptr, packet_ptr);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f8cc 	bl	80067c0 <_nx_icmpv4_process_echo_request>
 8006628:	e009      	b.n	800663e <_nx_icmpv4_packet_process+0xac>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP unhandled message count.  */
        ip_ptr -> nx_ip_icmp_unhandled_messages++;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);
#endif /* TX_ENABLE_EVENT_TRACE  */

        /* Unhandled ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
 8006638:	6838      	ldr	r0, [r7, #0]
 800663a:	f002 ffa1 	bl	8009580 <_nx_packet_release>
    }
}
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <_nx_icmpv4_process_echo_reply>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_reply(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b090      	sub	sp, #64	; 0x40
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    echo_ptr =  (NX_ICMPV4_ECHO *)packet_ptr -> nx_packet_prepend_ptr;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	637b      	str	r3, [r7, #52]	; 0x34

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP responses received count.  */
    ip_ptr -> nx_ip_ping_responses_received++;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800665a:	1c5a      	adds	r2, r3, #1
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#endif

    /* Pickup sequence number.  */
    sequence_num = echo_ptr -> nx_icmpv4_echo_sequence_num;
 8006662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006664:	88db      	ldrh	r3, [r3, #6]
 8006666:	867b      	strh	r3, [r7, #50]	; 0x32

    /* Convert to host byte order, if little endian taget. */
    NX_CHANGE_USHORT_ENDIAN(sequence_num);
 8006668:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800666a:	ba5b      	rev16	r3, r3
 800666c:	867b      	strh	r3, [r7, #50]	; 0x32
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800666e:	f3ef 8310 	mrs	r3, PRIMASK
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8006676:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006678:	b672      	cpsid	i
    return(int_posture);
 800667a:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts.  */
    TX_DISABLE
 800667c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Pickup the head pointer and the suspended count.  */
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006684:	63fb      	str	r3, [r7, #60]	; 0x3c
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800668c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800668e:	4b4b      	ldr	r3, [pc, #300]	; (80067bc <_nx_icmpv4_process_echo_reply+0x178>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3301      	adds	r3, #1
 8006694:	4a49      	ldr	r2, [pc, #292]	; (80067bc <_nx_icmpv4_process_echo_reply+0x178>)
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669e:	f383 8810 	msr	PRIMASK, r3
}
 80066a2:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Search through the suspended threads waiting for a ECHO (ping) response
       in an attempt to find a matching sequence number.  */
    while (suspended--)
 80066a4:	e05e      	b.n	8006764 <_nx_icmpv4_process_echo_reply+0x120>
    {

        /* Determine if the sequence number matches a suspended thread.  */
        if ((USHORT)(thread_ptr ->  tx_thread_suspend_info) == sequence_num)
 80066a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d155      	bne.n	800675e <_nx_icmpv4_process_echo_reply+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80066b2:	f3ef 8310 	mrs	r3, PRIMASK
 80066b6:	61fb      	str	r3, [r7, #28]
    return(posture);
 80066b8:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80066ba:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80066bc:	b672      	cpsid	i
    return(int_posture);
 80066be:	69bb      	ldr	r3, [r7, #24]
        {

            /* Disable interrupts.  */
            TX_DISABLE
 80066c0:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80066c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d104      	bne.n	80066d6 <_nx_icmpv4_process_echo_reply+0x92>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                ip_ptr -> nx_ip_icmp_ping_suspension_list =  NX_NULL;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
 80066d4:	e014      	b.n	8006700 <_nx_icmpv4_process_echo_reply+0xbc>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                if (ip_ptr -> nx_ip_icmp_ping_suspension_list == thread_ptr)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066de:	429a      	cmp	r2, r3
 80066e0:	d104      	bne.n	80066ec <_nx_icmpv4_process_echo_reply+0xa8>
                {
                    ip_ptr -> nx_ip_icmp_ping_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80066e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
                }

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80066ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 80066f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80066f4:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80066f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 80066fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066fc:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80066fe:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006706:	1e5a      	subs	r2, r3, #1
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800670e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006710:	2200      	movs	r2, #0
 8006712:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8006714:	4b29      	ldr	r3, [pc, #164]	; (80067bc <_nx_icmpv4_process_echo_reply+0x178>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3301      	adds	r3, #1
 800671a:	4a28      	ldr	r2, [pc, #160]	; (80067bc <_nx_icmpv4_process_echo_reply+0x178>)
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006720:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f383 8810 	msr	PRIMASK, r3
}
 8006728:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to remove the ICMP header that is still in front of
               the response message.  */
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV4_ECHO);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	f1a3 0208 	sub.w	r2, r3, #8
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV4_ECHO);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f103 0208 	add.w	r2, r3, #8
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	609a      	str	r2, [r3, #8]

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8006742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	601a      	str	r2, [r3, #0]

            /* Clear packet pointer so we don't try to release it below.  */
            packet_ptr =  NX_NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	603b      	str	r3, [r7, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800674e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006750:	2200      	movs	r2, #0
 8006752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8006756:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006758:	f007 f93c 	bl	800d9d4 <_tx_thread_system_resume>

            /* Get out of the loop.  */
            break;
 800675c:	e007      	b.n	800676e <_nx_icmpv4_process_echo_reply+0x12a>
        }
        else
        {
            /* Just move to the next suspended thread.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800675e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006762:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (suspended--)
 8006764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006766:	1e5a      	subs	r2, r3, #1
 8006768:	63ba      	str	r2, [r7, #56]	; 0x38
 800676a:	2b00      	cmp	r3, #0
 800676c:	d19b      	bne.n	80066a6 <_nx_icmpv4_process_echo_reply+0x62>
        }
    }

    /* Determine if no match was made and we just have to release the packet.  */
    if (packet_ptr)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d009      	beq.n	8006788 <_nx_icmpv4_process_echo_reply+0x144>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif /* NX_DISABLE_ICMP_INFO */

        /* Yes, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8006782:	6838      	ldr	r0, [r7, #0]
 8006784:	f002 fefc 	bl	8009580 <_nx_packet_release>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006788:	f3ef 8310 	mrs	r3, PRIMASK
 800678c:	60fb      	str	r3, [r7, #12]
    return(posture);
 800678e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8006790:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006792:	b672      	cpsid	i
    return(int_posture);
 8006794:	68bb      	ldr	r3, [r7, #8]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8006796:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release preemption disable.  */
    _tx_thread_preempt_disable--;
 8006798:	4b08      	ldr	r3, [pc, #32]	; (80067bc <_nx_icmpv4_process_echo_reply+0x178>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3b01      	subs	r3, #1
 800679e:	4a07      	ldr	r2, [pc, #28]	; (80067bc <_nx_icmpv4_process_echo_reply+0x178>)
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f383 8810 	msr	PRIMASK, r3
}
 80067ac:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80067ae:	f007 f8d7 	bl	800d960 <_tx_thread_system_preempt_check>
}
 80067b2:	bf00      	nop
 80067b4:	3740      	adds	r7, #64	; 0x40
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	2001491c 	.word	0x2001491c

080067c0 <_nx_icmpv4_process_echo_request>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_request(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08c      	sub	sp, #48	; 0x30
 80067c4:	af04      	add	r7, sp, #16
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]

NX_ICMPV4_HEADER *header_ptr;
ULONG             checksum;
ULONG             old_m;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
ULONG             compute_checksum = 1;
 80067ca:	2301      	movs	r3, #1
 80067cc:	61fb      	str	r3, [r7, #28]
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
NX_IPV4_HEADER   *ipv4_header;
ULONG             next_hop_address = NX_NULL;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60bb      	str	r3, [r7, #8]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	61bb      	str	r3, [r7, #24]

    /* Pickup the return IP address.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067dc:	617b      	str	r3, [r7, #20]

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings received count.  */
    ip_ptr -> nx_ip_pings_received++;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#endif

    /* Change the type to Echo Reply and send back the message to the caller.  */
    header_ptr -> nx_icmpv4_header_type = NX_ICMP_ECHO_REPLY_TYPE;
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	2200      	movs	r2, #0
 80067f0:	701a      	strb	r2, [r3, #0]
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <_nx_icmpv4_process_echo_request+0x44>
    {
        compute_checksum = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	61fb      	str	r3, [r7, #28]
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d02c      	beq.n	8006864 <_nx_icmpv4_process_echo_request+0xa4>
           m'  - new value of a 16-bit field
           HC' = ~(C + (-m) + m')
           = ~(~HC + ~m + m') */

        /* Endian swapping logic.  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	885b      	ldrh	r3, [r3, #2]
 800680e:	ba5b      	rev16	r3, r3
 8006810:	b29a      	uxth	r2, r3
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	805a      	strh	r2, [r3, #2]

        /* Get the old checksum (HC) in header. */
        checksum = header_ptr -> nx_icmpv4_header_checksum;
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	885b      	ldrh	r3, [r3, #2]
 800681a:	613b      	str	r3, [r7, #16]

        /* Get the old type(m). */
        old_m = (ULONG)(NX_ICMP_ECHO_REQUEST_TYPE << 8);
 800681c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006820:	60fb      	str	r3, [r7, #12]

        /* Update the checksum, get the new checksum(HC'). */
        /* The m' is value of echo reply type. It is zero so can be ignored. */
        checksum = ((~checksum) & 0xFFFF) + ((~old_m) & 0xFFFF);
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	43db      	mvns	r3, r3
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	43db      	mvns	r3, r3
 800682c:	b29b      	uxth	r3, r3
 800682e:	4413      	add	r3, r2
 8006830:	613b      	str	r3, [r7, #16]

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	0c1a      	lsrs	r2, r3, #16
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	b29b      	uxth	r3, r3
 800683a:	4413      	add	r3, r2
 800683c:	613b      	str	r3, [r7, #16]

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	0c1a      	lsrs	r2, r3, #16
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	b29b      	uxth	r3, r3
 8006846:	4413      	add	r3, r2
 8006848:	613b      	str	r3, [r7, #16]

        /* Store the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = (~checksum & NX_LOWER_16_MASK);
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	b29b      	uxth	r3, r3
 800684e:	43db      	mvns	r3, r3
 8006850:	b29a      	uxth	r2, r3
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	805a      	strh	r2, [r3, #2]

        /* If NX_LITTLE_ENDIAN is defined, the header need to be swapped back
           for output (network byte order).  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	885b      	ldrh	r3, [r3, #2]
 800685a:	ba5b      	rev16	r3, r3
 800685c:	b29a      	uxth	r2, r3
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	805a      	strh	r2, [r3, #2]
 8006862:	e008      	b.n	8006876 <_nx_icmpv4_process_echo_request+0xb6>
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
    else
    {

        /* Clear the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = 0;
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	2200      	movs	r2, #0
 8006868:	805a      	strh	r2, [r3, #2]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
    }
#endif

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	68d9      	ldr	r1, [r3, #12]
                      &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 8006880:	f107 0308 	add.w	r3, r7, #8
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 fc1f 	bl	80080c8 <_nx_ip_route_find>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ipv4_header -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings responded to count.  */
    ip_ptr -> nx_ip_pings_responded_to++;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

    /* Send the ICMP packet to the IP component.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, packet_ptr, ipv4_header -> nx_ip_header_source_ip,
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	68da      	ldr	r2, [r3, #12]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	9303      	str	r3, [sp, #12]
 80068a0:	2300      	movs	r3, #0
 80068a2:	9302      	str	r3, [sp, #8]
 80068a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068a8:	9301      	str	r3, [sp, #4]
 80068aa:	2380      	movs	r3, #128	; 0x80
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	2300      	movs	r3, #0
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 fb92 	bl	8007fdc <_nx_ip_packet_send>
                       NX_IP_NORMAL, NX_IP_TIME_TO_LIVE, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);
}
 80068b8:	bf00      	nop
 80068ba:	3720      	adds	r7, #32
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <_nx_icmpv4_send_error_message>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv4_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b096      	sub	sp, #88	; 0x58
 80068c4:	af04      	add	r7, sp, #16
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	603b      	str	r3, [r7, #0]

NX_PACKET       *pkt_ptr;
USHORT           checksum;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT             compute_checksum = 1;
 80068ce:	2301      	movs	r3, #1
 80068d0:	647b      	str	r3, [r7, #68]	; 0x44
NX_ICMPV4_ERROR *icmpv4_error;
NX_IPV4_HEADER  *ip_header_ptr;
UINT             ip_header_size;
UINT             bytes_to_copy, i;
ULONG            src_ip;
ULONG            next_hop_address = NX_NULL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	617b      	str	r3, [r7, #20]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv4 error message if ICMPv4 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv4_packet_process == NX_NULL)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 8113 	beq.w	8006b08 <_nx_icmpv4_send_error_message+0x248>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(offending_packet -> nx_packet_ip_header);
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e6:	633b      	str	r3, [r7, #48]	; 0x30
    src_ip = ip_header_ptr -> nx_ip_header_source_ip;
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the incoming interface. */
    if_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* An ICMP error message MUST NOT be sent as the result of receiving:
       RFC1122, Section3.2.2, Page39.  */

    /* A datagram destined to an IP broadcast or IP multicast address.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fc:	f000 8106 	beq.w	8006b0c <_nx_icmpv4_send_error_message+0x24c>
        ((ip_header_ptr -> nx_ip_header_destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8006908:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800690c:	f000 80fe 	beq.w	8006b0c <_nx_icmpv4_send_error_message+0x24c>
    {
        return;
    }

    /* A datagram sent as a link-layer broadcast.  */
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	691a      	ldr	r2, [r3, #16]
 8006914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	401a      	ands	r2, r3
         if_ptr -> nx_interface_ip_network) &&
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	69db      	ldr	r3, [r3, #28]
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 800691e:	429a      	cmp	r2, r3
 8006920:	d10b      	bne.n	800693a <_nx_icmpv4_send_error_message+0x7a>
        ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 8006922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006924:	691a      	ldr	r2, [r3, #16]
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	43db      	mvns	r3, r3
 800692c:	401a      	ands	r2, r3
         ~(if_ptr -> nx_interface_ip_network_mask)))
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	43db      	mvns	r3, r3
         if_ptr -> nx_interface_ip_network) &&
 8006934:	429a      	cmp	r2, r3
 8006936:	f000 80eb 	beq.w	8006b10 <_nx_icmpv4_send_error_message+0x250>
    {
        return;
    }

    /* A non-initial fragment.  */
    if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_OFFSET_MASK)
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006942:	2b00      	cmp	r3, #0
 8006944:	f040 80e6 	bne.w	8006b14 <_nx_icmpv4_send_error_message+0x254>
    }

    /* A datagram whose source address does not define a single host,
       e.g., a zero address, a loopback address, a broadcast address,
       a multicast address, or a Class E address.  */
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 8006948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 80e3 	beq.w	8006b18 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 8006952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006954:	68db      	ldr	r3, [r3, #12]
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 8006956:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800695a:	d304      	bcc.n	8006966 <_nx_icmpv4_send_error_message+0xa6>
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 800695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695e:	68db      	ldr	r3, [r3, #12]
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 8006960:	2b00      	cmp	r3, #0
 8006962:	f280 80d9 	bge.w	8006b18 <_nx_icmpv4_send_error_message+0x258>
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	68db      	ldr	r3, [r3, #12]
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696e:	f000 80d3 	beq.w	8006b18 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 800697a:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800697e:	f000 80cb 	beq.w	8006b18 <_nx_icmpv4_send_error_message+0x258>
    {
        return;
    }

    /* Allocate a packet to build the ICMPv4 error message in.  */
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv4_ICMP_PACKET, NX_NO_WAIT))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 8006988:	f107 0118 	add.w	r1, r7, #24
 800698c:	2300      	movs	r3, #0
 800698e:	2224      	movs	r2, #36	; 0x24
 8006990:	f002 fa5a 	bl	8008e48 <_nx_packet_allocate>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	f040 80c0 	bne.w	8006b1c <_nx_icmpv4_send_error_message+0x25c>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv4. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	2204      	movs	r2, #4
 80069a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Size of the message is ICMPv4 */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    icmpv4_error = (NX_ICMPV4_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	627b      	str	r3, [r7, #36]	; 0x24
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	0e1b      	lsrs	r3, r3, #24
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	701a      	strb	r2, [r3, #0]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	0c1b      	lsrs	r3, r3, #16
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	705a      	strb	r2, [r3, #1]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = 0;
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	2200      	movs	r2, #0
 80069c2:	805a      	strh	r2, [r3, #2]
    icmpv4_error -> nx_icmpv4_error_pointer = (error_pointer << 24);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	061a      	lsls	r2, r3, #24
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	605a      	str	r2, [r3, #4]

    /* Change to network byte order. */
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	ba1a      	rev	r2, r3
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	605a      	str	r2, [r3, #4]

    /* IP Header + 64 bits (64 bits = 2 ULONGs) of Data Datagram.  */
    ip_header_size = ((ip_header_ptr -> nx_ip_header_word_0 & 0x0F000000) >> 24);
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	0e1b      	lsrs	r3, r3, #24
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	623b      	str	r3, [r7, #32]
    bytes_to_copy = (UINT)((ip_header_size + 2) * sizeof(ULONG));
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	3302      	adds	r3, #2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the packet length and pointers.  The length will be increased to include
       the IPv4 header in the IP send function.  The Prepend function will be similarly
       updated in the IP send function. */
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV4_ERROR);
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069ee:	3208      	adds	r2, #8
 80069f0:	625a      	str	r2, [r3, #36]	; 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	6899      	ldr	r1, [r3, #8]
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	440a      	add	r2, r1
 80069fe:	60da      	str	r2, [r3, #12]

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a04:	63bb      	str	r3, [r7, #56]	; 0x38

    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    dest_packet = (ULONG *)NX_UCHAR_POINTER_ADD(icmpv4_error, sizeof(NX_ICMPV4_ERROR));
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	3308      	adds	r3, #8
 8006a0a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Endian swap the incoming IPv4 normal header to network byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a10:	e00a      	b.n	8006a28 <_nx_icmpv4_send_error_message+0x168>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	ba1a      	rev	r2, r3
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	601a      	str	r2, [r3, #0]
        src_packet++;
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1e:	3304      	adds	r3, #4
 8006a20:	63bb      	str	r3, [r7, #56]	; 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8006a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a24:	3301      	adds	r3, #1
 8006a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d9f1      	bls.n	8006a12 <_nx_icmpv4_send_error_message+0x152>
    }

    /* Reset the packet pointer to the received packet IP header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a32:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Copy the data from the received packet to the ICMPv4 error packet. */
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 8006a34:	e00a      	b.n	8006a4c <_nx_icmpv4_send_error_message+0x18c>
    {

        *dest_packet++ = *src_packet++;
 8006a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a38:	1d13      	adds	r3, r2, #4
 8006a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3e:	1d19      	adds	r1, r3, #4
 8006a40:	6379      	str	r1, [r7, #52]	; 0x34
 8006a42:	6812      	ldr	r2, [r2, #0]
 8006a44:	601a      	str	r2, [r3, #0]
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 8006a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a48:	3b04      	subs	r3, #4
 8006a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8006a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f1      	bne.n	8006a36 <_nx_icmpv4_send_error_message+0x176>
    }

    /* Get the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a56:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Endian swap the IPv4 normal header back to host byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8006a58:	2300      	movs	r3, #0
 8006a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a5c:	e00a      	b.n	8006a74 <_nx_icmpv4_send_error_message+0x1b4>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	ba1a      	rev	r2, r3
 8006a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a66:	601a      	str	r2, [r3, #0]
        src_packet++;
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	63bb      	str	r3, [r7, #56]	; 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8006a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a70:	3301      	adds	r3, #1
 8006a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d9f1      	bls.n	8006a5e <_nx_icmpv4_send_error_message+0x19e>
    }

    /* Use the corresponding interface address as sender's address. */
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006a80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, src_ip,
                      &pkt_ptr -> nx_packet_address.nx_packet_interface_ptr,
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, src_ip,
 8006a88:	f107 0314 	add.w	r3, r7, #20
 8006a8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f001 fb1a 	bl	80080c8 <_nx_ip_route_find>
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (pkt_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <_nx_icmpv4_send_error_message+0x1e6>
    {
        compute_checksum = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	647b      	str	r3, [r7, #68]	; 0x44
    {
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 8006aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d017      	beq.n	8006adc <_nx_icmpv4_send_error_message+0x21c>
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Compute the checksum of the ICMP packet.  */
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 8006aac:	69b8      	ldr	r0, [r7, #24]
                                           (UINT)pkt_ptr -> nx_packet_length,
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006abc:	f000 f89d 	bl	8006bfa <_nx_ip_checksum_compute>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	83fb      	strh	r3, [r7, #30]
                                           /* ICMPV4 checksum does not include
                                              src/dest addresses */
                                           NX_NULL, NX_NULL);

        icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = (USHORT)(~checksum);
 8006ac4:	8bfb      	ldrh	r3, [r7, #30]
 8006ac6:	43db      	mvns	r3, r3
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	805a      	strh	r2, [r3, #2]

        /* Swap to network byte order. */
        NX_CHANGE_USHORT_ENDIAN(icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum);
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	885b      	ldrh	r3, [r3, #2]
 8006ad2:	ba5b      	rev16	r3, r3
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	805a      	strh	r2, [r3, #2]
 8006ada:	e005      	b.n	8006ae8 <_nx_icmpv4_send_error_message+0x228>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ae6:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Send the ICMP packet to the IP component. The time to live is set to 255.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, pkt_ptr, src_ip,
 8006ae8:	69b9      	ldr	r1, [r7, #24]
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	9303      	str	r3, [sp, #12]
 8006aee:	2300      	movs	r3, #0
 8006af0:	9302      	str	r3, [sp, #8]
 8006af2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006af6:	9301      	str	r3, [sp, #4]
 8006af8:	23ff      	movs	r3, #255	; 0xff
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	2300      	movs	r3, #0
 8006afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f001 fa6b 	bl	8007fdc <_nx_ip_packet_send>
                       NX_IP_NORMAL, 255, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);

    return;
 8006b06:	e00a      	b.n	8006b1e <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006b08:	bf00      	nop
 8006b0a:	e008      	b.n	8006b1e <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006b0c:	bf00      	nop
 8006b0e:	e006      	b.n	8006b1e <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006b10:	bf00      	nop
 8006b12:	e004      	b.n	8006b1e <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006b14:	bf00      	nop
 8006b16:	e002      	b.n	8006b1e <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006b18:	bf00      	nop
 8006b1a:	e000      	b.n	8006b1e <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006b1c:	bf00      	nop
}
 8006b1e:	3748      	adds	r7, #72	; 0x48
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <_nx_igmp_multicast_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_igmp_multicast_check(NX_IP *ip_ptr, ULONG group, NX_INTERFACE *nx_interface)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]

UINT i;

    /* Check for "all hosts" group.  We always assume all hosts membership.  */
    /*lint -e{835} -e{845} suppress operating on zero. */
    if (group ==  NX_ALL_HOSTS_ADDRESS)
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4a18      	ldr	r2, [pc, #96]	; (8006b94 <_nx_igmp_multicast_check+0x70>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d101      	bne.n	8006b3c <_nx_igmp_multicast_check+0x18>
    {
        return(NX_TRUE);
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e025      	b.n	8006b88 <_nx_igmp_multicast_check+0x64>
    }

    /* Loop through the IP multicast join list to find the matching group that is being
       responded to by another host on this same network.  */

    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	e01e      	b.n	8006b80 <_nx_igmp_multicast_check+0x5c>
    {

        /* Check for a match.  */
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8006b42:	68f9      	ldr	r1, [r7, #12]
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	4613      	mov	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	440b      	add	r3, r1
 8006b50:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d10e      	bne.n	8006b7a <_nx_igmp_multicast_check+0x56>
            (nx_interface == ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_interface_list))
 8006b5c:	68f9      	ldr	r1, [r7, #12]
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	4613      	mov	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	440b      	add	r3, r1
 8006b6a:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8006b6e:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d101      	bne.n	8006b7a <_nx_igmp_multicast_check+0x56>
        {
            return(NX_TRUE);
 8006b76:	2301      	movs	r3, #1
 8006b78:	e006      	b.n	8006b88 <_nx_igmp_multicast_check+0x64>
    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2b06      	cmp	r3, #6
 8006b84:	d9dd      	bls.n	8006b42 <_nx_igmp_multicast_check+0x1e>
        }
    }

    /* Otherwise, we have searched the entire list, return false.  */
    return(NX_FALSE);
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	371c      	adds	r7, #28
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	e0000001 	.word	0xe0000001

08006b98 <_nx_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b088      	sub	sp, #32
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]

#ifndef NX_DISABLE_IPV4
TX_INTERRUPT_SAVE_AREA

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006baa:	f04f 31ff 	mov.w	r1, #4294967295
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f005 fee2 	bl	800c978 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8006bb8:	617b      	str	r3, [r7, #20]
    return(posture);
 8006bba:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8006bbc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006bbe:	b672      	cpsid	i
    return(int_posture);
 8006bc0:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8006bc2:	61fb      	str	r3, [r7, #28]

    /* Pickup the IP address and the network mask.  This service assumes
       the operation on the primary interface. */
    *ip_address =    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8d3 2734 	ldr.w	r2, [r3, #1844]	; 0x734
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f8d3 2738 	ldr.w	r2, [r3, #1848]	; 0x738
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	f383 8810 	msr	PRIMASK, r3
}
 8006be2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006bea:	4618      	mov	r0, r3
 8006bec:	f006 f93c 	bl	800ce68 <_tx_mutex_put>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_GET, ip_ptr, ip_ptr -> nx_ip_interface[0].nx_interface_ip_address,
                            ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Return completion status.  */
    return(NX_SUCCESS);
 8006bf0:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3720      	adds	r7, #32
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <_nx_ip_checksum_compute>:
/*                                                                        */
/**************************************************************************/
USHORT  _nx_ip_checksum_compute(NX_PACKET *packet_ptr, ULONG protocol,
                                UINT data_length, ULONG *src_ip_addr,
                                ULONG *dest_ip_addr)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b08e      	sub	sp, #56	; 0x38
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	603b      	str	r3, [r7, #0]

ULONG      checksum = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	637b      	str	r3, [r7, #52]	; 0x34
UINT       i;
#endif

    /* For computing TCP/UDP/ICMPv6, we need to include the pseudo header.
       The ICMPv4 checksum does not cover the pseudo header. */
    if ((protocol == NX_PROTOCOL_UDP) ||
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b11      	cmp	r3, #17
 8006c10:	d002      	beq.n	8006c18 <_nx_ip_checksum_compute+0x1e>
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b06      	cmp	r3, #6
 8006c16:	d141      	bne.n	8006c9c <_nx_ip_checksum_compute+0xa2>
        (protocol == NX_PROTOCOL_TCP))
    {

    USHORT *src_ip_short, *dest_ip_short;

        checksum = protocol;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	637b      	str	r3, [r7, #52]	; 0x34

        /* The addresses must not be null.  */
        NX_ASSERT((src_ip_addr != NX_NULL) && (dest_ip_addr != NX_NULL));
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <_nx_ip_checksum_compute+0x2e>
 8006c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d104      	bne.n	8006c32 <_nx_ip_checksum_compute+0x38>
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2c:	f006 fe18 	bl	800d860 <_tx_thread_sleep>
 8006c30:	e7fa      	b.n	8006c28 <_nx_ip_checksum_compute+0x2e>

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        src_ip_short = (USHORT *)src_ip_addr;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	623b      	str	r3, [r7, #32]

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        dest_ip_short = (USHORT *)dest_ip_addr;
 8006c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c38:	61fb      	str	r3, [r7, #28]


        checksum += src_ip_short[0];
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c42:	4413      	add	r3, r2
 8006c44:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += src_ip_short[1];
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	3302      	adds	r3, #2
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c50:	4413      	add	r3, r2
 8006c52:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[0];
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5c:	4413      	add	r3, r2
 8006c5e:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[1];
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	3302      	adds	r3, #2
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6a:	4413      	add	r3, r2
 8006c6c:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
#endif /* FEATURE_NX_IPV6 */

        /* Take care of data length */
        checksum += data_length;
 8006c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4413      	add	r3, r2
 8006c74:	637b      	str	r3, [r7, #52]	; 0x34

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c78:	0c1a      	lsrs	r2, r3, #16
 8006c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	4413      	add	r3, r2
 8006c80:	637b      	str	r3, [r7, #52]	; 0x34

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c84:	0c1a      	lsrs	r2, r3, #16
 8006c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	4413      	add	r3, r2
 8006c8c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Convert to network byte order. */
        tmp = (USHORT)checksum;
 8006c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c90:	837b      	strh	r3, [r7, #26]
        NX_CHANGE_USHORT_ENDIAN(tmp);
 8006c92:	8b7b      	ldrh	r3, [r7, #26]
 8006c94:	ba5b      	rev16	r3, r3
 8006c96:	837b      	strh	r3, [r7, #26]
        checksum = tmp;
 8006c98:	8b7b      	ldrh	r3, [r7, #26]
 8006c9a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Now we need to go through the payloads */

    /* Setup the pointer to the start of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    long_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize the current packet to the input packet pointer.  */
    current_packet =  packet_ptr;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop the packet. */
    while (current_packet)
 8006ca6:	e058      	b.n	8006d5a <_nx_ip_checksum_compute+0x160>
    {

        /* Calculate current packet size. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr);
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	617b      	str	r3, [r7, #20]

        /* Calculate the end address in this packet. */
        if (data_length > (UINT)packet_size)
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d905      	bls.n	8006cc8 <_nx_ip_checksum_compute+0xce>
        {

            /*lint -e{927} -e{923} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = ((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3);
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f023 0303 	bic.w	r3, r3, #3
 8006cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc6:	e006      	b.n	8006cd6 <_nx_ip_checksum_compute+0xdc>
        }
        else
        {
#endif /* NX_DISABLE_PACKET_CHAIN */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr + data_length - 3;
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	3b03      	subs	r3, #3
 8006cd4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Set the start address in this packet. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        long_ptr = (ULONG *)current_packet -> nx_packet_prepend_ptr;
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ALIGN_TYPE)long_ptr < end_ptr)
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d91c      	bls.n	8006d1e <_nx_ip_checksum_compute+0x124>
        {

            /* Calculate the data_length. */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            data_length -= (UINT)(((end_ptr + 3) & (ALIGN_TYPE)(~3llu)) - (ALIGN_TYPE)long_ptr);
 8006ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	3303      	adds	r3, #3
 8006cea:	f023 0303 	bic.w	r3, r3, #3
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	607b      	str	r3, [r7, #4]

            /* Loop to calculate the packet's checksum.  */
            /*lint -e{946} suppress pointer subtraction, since it is necessary. */
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8006cf6:	e00e      	b.n	8006d16 <_nx_ip_checksum_compute+0x11c>
            {
                checksum += (*long_ptr & NX_LOWER_16_MASK);
 8006cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d00:	4413      	add	r3, r2
 8006d02:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (*long_ptr >> NX_SHIFT_BY_16);
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	0c1b      	lsrs	r3, r3, #16
 8006d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d0c:	4413      	add	r3, r2
 8006d0e:	637b      	str	r3, [r7, #52]	; 0x34
                long_ptr++;
 8006d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d12:	3304      	adds	r3, #4
 8006d14:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8006d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d8ec      	bhi.n	8006cf8 <_nx_ip_checksum_compute+0xfe>
            }
        }
#ifndef NX_DISABLE_PACKET_CHAIN

        /* Determine if we are at the end of the current packet.  */
        if ((data_length > 0) && (current_packet -> nx_packet_next))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d018      	beq.n	8006d56 <_nx_ip_checksum_compute+0x15c>
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d014      	beq.n	8006d56 <_nx_ip_checksum_compute+0x15c>
        {

            /* Is append_ptr two bytes aligned but not four bytes aligned? */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            if ((((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & 3) == 2)
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	f003 0303 	and.w	r3, r3, #3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d10a      	bne.n	8006d4e <_nx_ip_checksum_compute+0x154>
            {

                /* Yes it is. Process the last two bytes in chaining packets. */
                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                short_ptr = (USHORT *)long_ptr;
 8006d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3a:	633b      	str	r3, [r7, #48]	; 0x30

                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                checksum += *short_ptr;
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d44:	4413      	add	r3, r2
 8006d46:	637b      	str	r3, [r7, #52]	; 0x34
                data_length -= 2;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3b02      	subs	r3, #2
 8006d4c:	607b      	str	r3, [r7, #4]
            }

            /* We have crossed the packet boundary.  Move to the next packet
               structure.  */
            current_packet =  current_packet -> nx_packet_next;
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d54:	e001      	b.n	8006d5a <_nx_ip_checksum_compute+0x160>
        }
        else
        {

            /* End the loop.  */
            current_packet = NX_NULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	62bb      	str	r3, [r7, #40]	; 0x28
    while (current_packet)
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1a3      	bne.n	8006ca8 <_nx_ip_checksum_compute+0xae>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if there is only one byte left. */
    if (data_length)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d01f      	beq.n	8006da6 <_nx_ip_checksum_compute+0x1ac>
    {

        /* Set the short_ptr. */
        short_ptr = (USHORT *)(long_ptr);
 8006d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d68:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the data length.  */
        if (data_length == 1)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d104      	bne.n	8006d7a <_nx_ip_checksum_compute+0x180>
        {
            *((UCHAR *)short_ptr + 1) = 0;
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	3301      	adds	r3, #1
 8006d74:	2200      	movs	r2, #0
 8006d76:	701a      	strb	r2, [r3, #0]
 8006d78:	e00f      	b.n	8006d9a <_nx_ip_checksum_compute+0x1a0>
        }
        else if (data_length == 3)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d10c      	bne.n	8006d9a <_nx_ip_checksum_compute+0x1a0>
        {
            checksum += *short_ptr;
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	461a      	mov	r2, r3
 8006d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d88:	4413      	add	r3, r2
 8006d8a:	637b      	str	r3, [r7, #52]	; 0x34
            short_ptr++;
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	3302      	adds	r3, #2
 8006d90:	633b      	str	r3, [r7, #48]	; 0x30

            *((UCHAR *)short_ptr + 1) = 0;
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	3301      	adds	r3, #1
 8006d96:	2200      	movs	r2, #0
 8006d98:	701a      	strb	r2, [r3, #0]
        }

        checksum += *short_ptr;
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da2:	4413      	add	r3, r2
 8006da4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Fold a 4-byte value into a two byte value */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da8:	0c1a      	lsrs	r2, r3, #16
 8006daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	4413      	add	r3, r2
 8006db0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Do it again in case previous operation generates an overflow */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db4:	0c1a      	lsrs	r2, r3, #16
 8006db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	4413      	add	r3, r2
 8006dbc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Convert to host byte order. */
    tmp = (USHORT)checksum;
 8006dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc0:	837b      	strh	r3, [r7, #26]
    NX_CHANGE_USHORT_ENDIAN(tmp);
 8006dc2:	8b7b      	ldrh	r3, [r7, #26]
 8006dc4:	ba5b      	rev16	r3, r3
 8006dc6:	837b      	strh	r3, [r7, #26]

    /* Return the computed checksum.  */
    return(tmp);
 8006dc8:	8b7b      	ldrh	r3, [r7, #26]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3738      	adds	r7, #56	; 0x38
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
	...

08006dd4 <_nx_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                    NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                    VOID *memory_ptr, ULONG memory_size, UINT priority)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b092      	sub	sp, #72	; 0x48
 8006dd8:	af06      	add	r7, sp, #24
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	603b      	str	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA

NX_IP     *tail_ptr;
UINT       i;
UINT       old_threshold = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	613b      	str	r3, [r7, #16]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);
#endif /* NX_DISABLE_IPV4 */

    /* Reference the version ID and option words to ensure they are linked in.  */
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8006de6:	4b8a      	ldr	r3, [pc, #552]	; (8007010 <_nx_ip_create+0x23c>)
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	4b8a      	ldr	r3, [pc, #552]	; (8007014 <_nx_ip_create+0x240>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	431a      	orrs	r2, r3
 8006df0:	4b89      	ldr	r3, [pc, #548]	; (8007018 <_nx_ip_create+0x244>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8006df6:	4b89      	ldr	r3, [pc, #548]	; (800701c <_nx_ip_create+0x248>)
 8006df8:	681b      	ldr	r3, [r3, #0]
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8006dfa:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8006dfc:	4b88      	ldr	r3, [pc, #544]	; (8007020 <_nx_ip_create+0x24c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	4a88      	ldr	r2, [pc, #544]	; (8007024 <_nx_ip_create+0x250>)
 8006e04:	7812      	ldrb	r2, [r2, #0]
 8006e06:	4313      	orrs	r3, r2
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <_nx_ip_create+0x3c>
    {

        /* We should never get here!  */
        return(NX_NOT_IMPLEMENTED);
 8006e0c:	234a      	movs	r3, #74	; 0x4a
 8006e0e:	e0fb      	b.n	8007008 <_nx_ip_create+0x234>
    }

    /* Initialize the IP control block to zero.  */
    memset((void *)ip_ptr, 0, sizeof(NX_IP));
 8006e10:	f44f 62f9 	mov.w	r2, #1992	; 0x7c8
 8006e14:	2100      	movs	r1, #0
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f008 fa78 	bl	800f30c <memset>

    /* Configure the primary interface. */
    ip_ptr -> nx_ip_interface[0].nx_interface_valid = 1;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2724 	strb.w	r2, [r3, #1828]	; 0x724

#ifndef NX_DISABLE_IPV4
    /* Save the IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address =   ip_address;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734

    /* Save the network mask.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask =  network_mask;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	f8c3 2738 	str.w	r2, [r3, #1848]	; 0x738

    /* Derive the network bits of this IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network =  ip_address & network_mask;
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	401a      	ands	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_arp_defend_timeout = 0;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
#endif /* !NX_DISABLE_IPV4  */

    /* Setup the link driver address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_link_driver_entry =  ip_link_driver;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e4c:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c

    /* Set the device interface name to "PRI". */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[0].nx_interface_name = (CHAR *)"PRI";
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4a75      	ldr	r2, [pc, #468]	; (8007028 <_nx_ip_create+0x254>)
 8006e54:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720

    /* Set index of each interface. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8006e58:	2300      	movs	r3, #0
 8006e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e5c:	e00f      	b.n	8006e7e <_nx_ip_create+0xaa>
    {
        ip_ptr -> nx_ip_interface[i].nx_interface_index = (UCHAR)i;
 8006e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e60:	b2d8      	uxtb	r0, r3
 8006e62:	68f9      	ldr	r1, [r7, #12]
 8006e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e66:	4613      	mov	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	011b      	lsls	r3, r3, #4
 8006e6e:	440b      	add	r3, r1
 8006e70:	f203 7327 	addw	r3, r3, #1831	; 0x727
 8006e74:	4602      	mov	r2, r0
 8006e76:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8006e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d9ec      	bls.n	8006e5e <_nx_ip_create+0x8a>

#ifndef NX_DISABLE_LOOPBACK_INTERFACE

    /* Set the Loopback interface name. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_name = (CHAR *)"Internal IP Loopback";
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4a69      	ldr	r2, [pc, #420]	; (800702c <_nx_ip_create+0x258>)
 8006e88:	f8c3 2770 	str.w	r2, [r3, #1904]	; 0x770


    /* Mark the loopback interface as valid. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_valid = 1;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774

#ifndef NX_DISABLE_IPV4
    /* Set the loopback interface address. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4a66      	ldr	r2, [pc, #408]	; (8007030 <_nx_ip_create+0x25c>)
 8006e98:	f8c3 2784 	str.w	r2, [r3, #1924]	; 0x784
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8006ea2:	f8c3 2788 	str.w	r2, [r3, #1928]	; 0x788
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network = 0x7F000000;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f04f 42fe 	mov.w	r2, #2130706432	; 0x7f000000
 8006eac:	f8c3 278c 	str.w	r2, [r3, #1932]	; 0x78c
#endif /* !NX_DISABLE_IPV4  */

    /* Loopback interface is a special case. Therefore no dedicated link driver needed. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_driver_entry = NX_NULL;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c3 27ac 	str.w	r2, [r3, #1964]	; 0x7ac

    /* Loopback interface does not need IP/MAC address mapping. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_address_mapping_needed = 0;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2775 	strb.w	r2, [r3, #1909]	; 0x775

    /* There is actually no MTU limit for the loopback interface. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_mtu_size = 65535;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ec6:	f8c3 2794 	str.w	r2, [r3, #1940]	; 0x794

    /* Mark the loopback interface as LINK UP */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_up = 1;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776

    /* Set all the link capability. */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_capability_flag = (NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM |
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006ed8:	f8c3 27b0 	str.w	r2, [r3, #1968]	; 0x7b0
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#endif /* !NX_DISABLE_LOOPBACK_INTERFACE */

    /* Save the supplied IP name.  */
    ip_ptr -> nx_ip_name =  name;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	605a      	str	r2, [r3, #4]

    /* Set the initial IP packet ID.  */
    ip_ptr -> nx_ip_packet_id =  NX_INIT_PACKET_ID;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    /* Setup the default packet pool for this IP instance.  */
    ip_ptr -> nx_ip_default_packet_pool =  default_pool;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eee:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    /* Setup the auxiliary packet pool for this IP instance. By default it pointers to default pool. */
    ip_ptr -> nx_ip_auxiliary_packet_pool = default_pool;
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Create the internal IP protection mutex.  */
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006ef8:	2200      	movs	r2, #0
 8006efa:	68b9      	ldr	r1, [r7, #8]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f005 fce1 	bl	800c8c4 <_tx_mutex_create>

    /* Create the internal IP event flag object.  */
    tx_event_flags_create(&(ip_ptr -> nx_ip_events), name);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006f08:	68b9      	ldr	r1, [r7, #8]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f005 f864 	bl	800bfd8 <_tx_event_flags_create>

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 8006f10:	f006 fac6 	bl	800d4a0 <_tx_thread_identify>
 8006f14:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Disable preemption temporarily.  */
    if (current_thread)
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d006      	beq.n	8006f2a <_nx_ip_create+0x156>
    {
        tx_thread_preemption_change(current_thread, priority, &old_threshold);
 8006f1c:	f107 0310 	add.w	r3, r7, #16
 8006f20:	461a      	mov	r2, r3
 8006f22:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f26:	f006 fb15 	bl	800d554 <_tx_thread_preemption_change>
    }

    /* Create the internal IP thread for handling more processing intensive
       duties.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_thread_create(&(ip_ptr -> nx_ip_thread), name, _nx_ip_thread_entry, (ULONG)(ALIGN_TYPE)(ip_ptr),
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	2301      	movs	r3, #1
 8006f34:	9305      	str	r3, [sp, #20]
 8006f36:	2301      	movs	r3, #1
 8006f38:	9304      	str	r3, [sp, #16]
 8006f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f3c:	9303      	str	r3, [sp, #12]
 8006f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f40:	9302      	str	r3, [sp, #8]
 8006f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f44:	9301      	str	r3, [sp, #4]
 8006f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	4a39      	ldr	r2, [pc, #228]	; (8007034 <_nx_ip_create+0x260>)
 8006f4e:	68b9      	ldr	r1, [r7, #8]
 8006f50:	f006 f9b0 	bl	800d2b4 <_tx_thread_create>

    NX_THREAD_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_thread), ip_ptr)

    /* Create the periodic timer for this IP instance.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_periodic_timer), name,
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f503 701b 	add.w	r0, r3, #620	; 0x26c
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	9202      	str	r2, [sp, #8]
 8006f60:	2264      	movs	r2, #100	; 0x64
 8006f62:	9201      	str	r2, [sp, #4]
 8006f64:	2264      	movs	r2, #100	; 0x64
 8006f66:	9200      	str	r2, [sp, #0]
 8006f68:	4a33      	ldr	r2, [pc, #204]	; (8007038 <_nx_ip_create+0x264>)
 8006f6a:	68b9      	ldr	r1, [r7, #8]
 8006f6c:	f006 ffd8 	bl	800df20 <_tx_timer_create>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_CREATE, ip_ptr, ip_address, network_mask, default_pool, NX_TRACE_IP_EVENTS, 0, 0);

#ifndef NX_DISABLE_IPV4
    /* Install IPv4 packet receive processing function pointer */
    ip_ptr -> nx_ipv4_packet_receive = _nx_ipv4_packet_receive;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a32      	ldr	r2, [pc, #200]	; (800703c <_nx_ip_create+0x268>)
 8006f74:	f8c3 27c0 	str.w	r2, [r3, #1984]	; 0x7c0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006f78:	f3ef 8310 	mrs	r3, PRIMASK
 8006f7c:	61fb      	str	r3, [r7, #28]
    return(posture);
 8006f7e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8006f80:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006f82:	b672      	cpsid	i
    return(int_posture);
 8006f84:	69bb      	ldr	r3, [r7, #24]
#endif

    /* Otherwise, the IP initialization was successful.  Place the
       IP control block on the list of created IP instances.  */
    TX_DISABLE
 8006f86:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the IP ID field in the IP control block.  */
    ip_ptr -> nx_ip_id =  NX_IP_ID;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4a2d      	ldr	r2, [pc, #180]	; (8007040 <_nx_ip_create+0x26c>)
 8006f8c:	601a      	str	r2, [r3, #0]

    /* Place the new IP control block on the list of created IPs.  First,
       check for an empty list.  */
    if (_nx_ip_created_ptr)
 8006f8e:	4b2d      	ldr	r3, [pc, #180]	; (8007044 <_nx_ip_create+0x270>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d017      	beq.n	8006fc6 <_nx_ip_create+0x1f2>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_ip_created_ptr -> nx_ip_created_previous;
 8006f96:	4b2b      	ldr	r3, [pc, #172]	; (8007044 <_nx_ip_create+0x270>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8006f9e:	623b      	str	r3, [r7, #32]

        /* Place the new IP control block in the list.  */
        _nx_ip_created_ptr -> nx_ip_created_previous =  ip_ptr;
 8006fa0:	4b28      	ldr	r3, [pc, #160]	; (8007044 <_nx_ip_create+0x270>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
        tail_ptr -> nx_ip_created_next =  ip_ptr;
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710

        /* Setup this IP's created links.  */
        ip_ptr -> nx_ip_created_previous =  tail_ptr;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6a3a      	ldr	r2, [r7, #32]
 8006fb6:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
        ip_ptr -> nx_ip_created_next =      _nx_ip_created_ptr;
 8006fba:	4b22      	ldr	r3, [pc, #136]	; (8007044 <_nx_ip_create+0x270>)
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
 8006fc4:	e00a      	b.n	8006fdc <_nx_ip_create+0x208>
    }
    else
    {

        /* The created IP list is empty.  Add IP control block to empty list.  */
        _nx_ip_created_ptr =                ip_ptr;
 8006fc6:	4a1f      	ldr	r2, [pc, #124]	; (8007044 <_nx_ip_create+0x270>)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6013      	str	r3, [r2, #0]
        ip_ptr -> nx_ip_created_next =      ip_ptr;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
        ip_ptr -> nx_ip_created_previous =  ip_ptr;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
    }

    /* Increment the created IP counter.  */
    _nx_ip_created_count++;
 8006fdc:	4b1a      	ldr	r3, [pc, #104]	; (8007048 <_nx_ip_create+0x274>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	4a19      	ldr	r2, [pc, #100]	; (8007048 <_nx_ip_create+0x274>)
 8006fe4:	6013      	str	r3, [r2, #0]
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f383 8810 	msr	PRIMASK, r3
}
 8006ff0:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Restore preemption.  */
    if (current_thread)
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d006      	beq.n	8007006 <_nx_ip_create+0x232>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized in previous tx_thread_preemption_change call. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f107 0210 	add.w	r2, r7, #16
 8006ffe:	4619      	mov	r1, r3
 8007000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007002:	f006 faa7 	bl	800d554 <_tx_thread_preemption_change>
    }

    /* Return success to the caller.  */
    return(NX_SUCCESS);
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3730      	adds	r7, #48	; 0x30
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	20014838 	.word	0x20014838
 8007014:	2001483c 	.word	0x2001483c
 8007018:	20014840 	.word	0x20014840
 800701c:	20014844 	.word	0x20014844
 8007020:	20014848 	.word	0x20014848
 8007024:	20000020 	.word	0x20000020
 8007028:	0800ff9c 	.word	0x0800ff9c
 800702c:	0800ffa0 	.word	0x0800ffa0
 8007030:	7f000001 	.word	0x7f000001
 8007034:	080083c5 	.word	0x080083c5
 8007038:	080080a5 	.word	0x080080a5
 800703c:	08008985 	.word	0x08008985
 8007040:	49502020 	.word	0x49502020
 8007044:	20014828 	.word	0x20014828
 8007048:	2001482c 	.word	0x2001482c

0800704c <_nx_ip_deferred_link_status_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_deferred_link_status_process(NX_IP *ip_ptr)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08c      	sub	sp, #48	; 0x30
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]

UINT         i;
NX_IP_DRIVER driver_request;
ULONG        link_up;

    if (ip_ptr -> nx_ip_link_status_change_callback == NX_NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 800705a:	2b00      	cmp	r3, #0
 800705c:	d052      	beq.n	8007104 <_nx_ip_deferred_link_status_process+0xb8>

        /* Callback function is not set. */
        return;
    }

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800705e:	2300      	movs	r3, #0
 8007060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007062:	e04b      	b.n	80070fc <_nx_ip_deferred_link_status_process+0xb0>
    {
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007068:	4613      	mov	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	440b      	add	r3, r1
 8007072:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d03c      	beq.n	80070f6 <_nx_ip_deferred_link_status_process+0xaa>
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change))
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007080:	4613      	mov	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	440b      	add	r3, r1
 800708a:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 800708e:	781b      	ldrb	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8007090:	2b00      	cmp	r3, #0
 8007092:	d030      	beq.n	80070f6 <_nx_ip_deferred_link_status_process+0xaa>
        {

            /* Reset the flag. */
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007098:	4613      	mov	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	440b      	add	r3, r1
 80070a2:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 80070a6:	2200      	movs	r2, #0
 80070a8:	701a      	strb	r2, [r3, #0]

            driver_request.nx_ip_driver_ptr       = ip_ptr;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
 80070ae:	230a      	movs	r3, #10
 80070b0:	60fb      	str	r3, [r7, #12]
            driver_request.nx_ip_driver_interface = &(ip_ptr -> nx_ip_interface[i]);
 80070b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070b4:	4613      	mov	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	4413      	add	r3, r2
 80070c4:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_return_ptr = &link_up;
 80070c6:	f107 0308 	add.w	r3, r7, #8
 80070ca:	623b      	str	r3, [r7, #32]

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	011b      	lsls	r3, r3, #4
 80070d8:	440b      	add	r3, r1
 80070da:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f107 020c 	add.w	r2, r7, #12
 80070e4:	4610      	mov	r0, r2
 80070e6:	4798      	blx	r3

            /* Invoke the callback function. */
            /*lint -e{644} suppress variable might not be initialized, since "link_up" was initialized in nx_interface_link_driver_entry. */
            ip_ptr -> nx_ip_link_status_change_callback(ip_ptr, i, link_up);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	3301      	adds	r3, #1
 80070fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0b0      	beq.n	8007064 <_nx_ip_deferred_link_status_process+0x18>
 8007102:	e000      	b.n	8007106 <_nx_ip_deferred_link_status_process+0xba>
        return;
 8007104:	bf00      	nop
        }
    }
}
 8007106:	3730      	adds	r7, #48	; 0x30
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <_nx_ip_dispatch_process>:
/*                                            packet,                     */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT _nx_ip_dispatch_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr, UINT protocol)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
#endif /* FEATURE_NX_IPV6 */
#endif /* NX_IPSEC_ENABLE */


    /* Initialize local variables. */
    drop_packet = 0;
 8007118:	2300      	movs	r3, #0
 800711a:	617b      	str	r3, [r7, #20]
    next_option_offset = (UINT)sizeof(NX_IPV6_HEADER);
    incoming_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
#endif /* FEATURE_NX_IPV6 */

    /* Parse all options in the packet till we're done or an error is encountered. */
    while (!drop_packet)
 800711c:	e09a      	b.n	8007254 <_nx_ip_dispatch_process+0x148>

#if defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE)
        /* Set a local variable for convenience. */
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
#endif /* defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE) */
        switch (protocol)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b32      	cmp	r3, #50	; 0x32
 8007122:	d005      	beq.n	8007130 <_nx_ip_dispatch_process+0x24>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b33      	cmp	r3, #51	; 0x33
 8007128:	d104      	bne.n	8007134 <_nx_ip_dispatch_process+0x28>
                /* Continue processing the packet if status = NX_IPSEC_PKT_CONT */
            }
#else /* NX_IPSEC_ENABLE */

            /* Drop this packet if IPsec module is not present. */
            drop_packet = 1;
 800712a:	2301      	movs	r3, #1
 800712c:	617b      	str	r3, [r7, #20]
#endif /* NX_IPSEC_ENABLE */

            break;
 800712e:	e07d      	b.n	800722c <_nx_ip_dispatch_process+0x120>
            }
            break;

#else /* NX_IPSEC_ENABLE */
            /* Drop this packet if IPsec module is not present. */
            return(1);
 8007130:	2301      	movs	r3, #1
 8007132:	e094      	b.n	800725e <_nx_ip_dispatch_process+0x152>
                    return(0);
                }
            }
#endif /* defined(NX_ENABLE_IP_RAW_PACKET_ALL_STACK) && defined(NX_ENABLE_IP_RAW_PACKET_FILTER) */

            if (protocol == NX_PROTOCOL_TCP)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b06      	cmp	r3, #6
 8007138:	d10f      	bne.n	800715a <_nx_ip_dispatch_process+0x4e>
                     (incoming_addr -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)))
                {
#endif /* FEATURE_NX_IPV6 */

                    /* Check that the host is enabled for TCP. */
                    if (ip_ptr -> nx_ip_tcp_packet_receive)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007140:	2b00      	cmp	r3, #0
 8007142:	d007      	beq.n	8007154 <_nx_ip_dispatch_process+0x48>
                    {

                        /* Dispatch the packet to the TCP packet handler. */
                        (ip_ptr -> nx_ip_tcp_packet_receive)(ip_ptr, packet_ptr);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800714a:	68b9      	ldr	r1, [r7, #8]
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	4798      	blx	r3

                        /* No need to free the packet as it is consumed by TCP packet receive.  */
                        return(0);
 8007150:	2300      	movs	r3, #0
 8007152:	e084      	b.n	800725e <_nx_ip_dispatch_process+0x152>
#ifdef FEATURE_NX_IPV6
                }
#endif /* FEATURE_NX_IPV6 */

                /* TCP is not enabled.  Drop the packet. */
                drop_packet = 1;
 8007154:	2301      	movs	r3, #1
 8007156:	617b      	str	r3, [r7, #20]
#endif /* NX_DISABLE_IP_INFO */


                drop_packet = 1;
            }
            break;
 8007158:	e067      	b.n	800722a <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007160:	2b04      	cmp	r3, #4
 8007162:	d112      	bne.n	800718a <_nx_ip_dispatch_process+0x7e>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d10f      	bne.n	800718a <_nx_ip_dispatch_process+0x7e>
                if (ip_ptr -> nx_ip_icmp_packet_receive != NX_NULL)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 8007170:	2b00      	cmp	r3, #0
 8007172:	d007      	beq.n	8007184 <_nx_ip_dispatch_process+0x78>
                    ip_ptr -> nx_ip_icmp_packet_receive(ip_ptr, packet_ptr);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 800717a:	68b9      	ldr	r1, [r7, #8]
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	4798      	blx	r3
                    return(0);
 8007180:	2300      	movs	r3, #0
 8007182:	e06c      	b.n	800725e <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 8007184:	2301      	movs	r3, #1
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	e04f      	b.n	800722a <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007190:	2b04      	cmp	r3, #4
 8007192:	d112      	bne.n	80071ba <_nx_ip_dispatch_process+0xae>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b02      	cmp	r3, #2
 8007198:	d10f      	bne.n	80071ba <_nx_ip_dispatch_process+0xae>
                if (ip_ptr -> nx_ip_igmp_packet_receive != NX_NULL)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d007      	beq.n	80071b4 <_nx_ip_dispatch_process+0xa8>
                    ip_ptr -> nx_ip_igmp_packet_receive(ip_ptr, packet_ptr);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 80071aa:	68b9      	ldr	r1, [r7, #8]
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	4798      	blx	r3
                    return(0);
 80071b0:	2300      	movs	r3, #0
 80071b2:	e054      	b.n	800725e <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 80071b4:	2301      	movs	r3, #1
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	e037      	b.n	800722a <_nx_ip_dispatch_process+0x11e>
            else if (protocol == NX_PROTOCOL_UDP)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b11      	cmp	r3, #17
 80071be:	d10f      	bne.n	80071e0 <_nx_ip_dispatch_process+0xd4>
                    if (ip_ptr -> nx_ip_udp_packet_receive)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d007      	beq.n	80071da <_nx_ip_dispatch_process+0xce>
                        (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80071d0:	68b9      	ldr	r1, [r7, #8]
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	4798      	blx	r3
                        return(0);
 80071d6:	2300      	movs	r3, #0
 80071d8:	e041      	b.n	800725e <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 80071da:	2301      	movs	r3, #1
 80071dc:	617b      	str	r3, [r7, #20]
            break;
 80071de:	e024      	b.n	800722a <_nx_ip_dispatch_process+0x11e>
                if (ip_ptr -> nx_ip_raw_ip_processing)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00c      	beq.n	8007204 <_nx_ip_dispatch_process+0xf8>
                        if ((ip_ptr -> nx_ip_raw_ip_processing)(ip_ptr, protocol << 16, packet_ptr) == NX_SUCCESS)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	0411      	lsls	r1, r2, #16
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	4798      	blx	r3
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <_nx_ip_dispatch_process+0xf8>
                            return(0);
 8007200:	2300      	movs	r3, #0
 8007202:	e02c      	b.n	800725e <_nx_ip_dispatch_process+0x152>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800720a:	2b04      	cmp	r3, #4
 800720c:	d105      	bne.n	800721a <_nx_ip_dispatch_process+0x10e>
                    NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PROTOCOL_UNREACH_CODE);
 800720e:	2300      	movs	r3, #0
 8007210:	4a15      	ldr	r2, [pc, #84]	; (8007268 <_nx_ip_dispatch_process+0x15c>)
 8007212:	68b9      	ldr	r1, [r7, #8]
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f7ff fb53 	bl	80068c0 <_nx_icmpv4_send_error_message>
                ip_ptr -> nx_ip_unknown_protocols_received++;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	1c5a      	adds	r2, r3, #1
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	641a      	str	r2, [r3, #64]	; 0x40
                drop_packet = 1;
 8007224:	2301      	movs	r3, #1
 8007226:	617b      	str	r3, [r7, #20]
            break;
 8007228:	e7ff      	b.n	800722a <_nx_ip_dispatch_process+0x11e>
 800722a:	bf00      	nop
        }


        /* If the previous header is processed without errors, move on to the next optional
           header. */
        if (!drop_packet)
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d010      	beq.n	8007254 <_nx_ip_dispatch_process+0x148>
        else
        {
#ifndef NX_DISABLE_IP_INFO

            /* Decrement the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered--;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	1e5a      	subs	r2, r3, #1
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	621a      	str	r2, [r3, #32]

            /* Decrement the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	1ad2      	subs	r2, r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	625a      	str	r2, [r3, #36]	; 0x24

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	64da      	str	r2, [r3, #76]	; 0x4c
    while (!drop_packet)
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2b00      	cmp	r3, #0
 8007258:	f43f af61 	beq.w	800711e <_nx_ip_dispatch_process+0x12>
#endif /* NX_DISABLE_IP_INFO */
        }
    }

    return(drop_packet);
 800725c:	697b      	ldr	r3, [r7, #20]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	03020000 	.word	0x03020000

0800726c <_nx_ip_driver_deferred_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_deferred_processing(NX_IP *ip_ptr)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]

    /* Set event flags to wake the IP helper thread, which will in turn
       call the driver with the NX_LINK_DEFERRED_PROCESSING command.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_DRIVER_DEFERRED_EVENT, TX_OR);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800727a:	2200      	movs	r2, #0
 800727c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007280:	4618      	mov	r0, r3
 8007282:	f004 ffe1 	bl	800c248 <_tx_event_flags_set>
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <_nx_ip_driver_direct_command>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_driver_direct_command(NX_IP *ip_ptr, UINT command, ULONG *return_value_ptr)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	607a      	str	r2, [r7, #4]

    return(_nx_ip_driver_interface_direct_command(ip_ptr, command, 0, return_value_ptr));
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	68b9      	ldr	r1, [r7, #8]
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f805 	bl	80072b0 <_nx_ip_driver_interface_direct_command>
 80072a6:	4603      	mov	r3, r0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <_nx_ip_driver_interface_direct_command>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_driver_interface_direct_command(NX_IP *ip_ptr, UINT command, UINT interface_index, ULONG *return_value_ptr)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08c      	sub	sp, #48	; 0x30
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_DRIVER_DIRECT_COMMAND, ip_ptr, command, 0, 0, NX_TRACE_IP_EVENTS, &trace_event, &trace_timestamp);

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80072c4:	f04f 31ff 	mov.w	r1, #4294967295
 80072c8:	4618      	mov	r0, r3
 80072ca:	f005 fb55 	bl	800c978 <_tx_mutex_get>

    /* Build the driver request structure.  */
    driver_request.nx_ip_driver_ptr =         ip_ptr;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_command =     command;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_return_ptr =  return_value_ptr;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24
    driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	4613      	mov	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	011b      	lsls	r3, r3, #4
 80072e4:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 80072ee:	68f9      	ldr	r1, [r7, #12]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	4613      	mov	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	011b      	lsls	r3, r3, #4
 80072fa:	440b      	add	r3, r1
 80072fc:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f107 0210 	add.w	r2, r7, #16
 8007306:	4610      	mov	r0, r2
 8007308:	4798      	blx	r3

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007310:	4618      	mov	r0, r3
 8007312:	f005 fda9 	bl	800ce68 <_tx_mutex_put>
    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_IP_DRIVER_DIRECT_COMMAND, 0, 0, driver_request.nx_ip_driver_status, 0);

    /* Return status to the caller.  */
    /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
    return(driver_request.nx_ip_driver_status);
 8007316:	697b      	ldr	r3, [r7, #20]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3730      	adds	r7, #48	; 0x30
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <_nx_ip_driver_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip, ULONG fragment, ULONG next_hop_address)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b09e      	sub	sp, #120	; 0x78
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_IP_DRIVER driver_request;
UINT         index;
ULONG        network_mask;
ULONG        network;
UCHAR        loopback = NX_FALSE;
 800732e:	2300      	movs	r3, #0
 8007330:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Initialize the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	633b      	str	r3, [r7, #48]	; 0x30
    driver_request.nx_ip_driver_packet =                packet_ptr;
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007340:	637b      	str	r3, [r7, #52]	; 0x34
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_SEND;
 8007342:	2300      	movs	r3, #0
 8007344:	61bb      	str	r3, [r7, #24]

    /* Determine if physical mapping is needed by the link driver.  */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_address_mapping_needed)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734a:	795b      	ldrb	r3, [r3, #5]
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 8174 	beq.w	800763a <_nx_ip_driver_packet_send+0x31a>
    {

        /* Get the network and network mask.*/
        network_mask = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network_mask;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	65fb      	str	r3, [r7, #92]	; 0x5c
        network = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735e:	69db      	ldr	r3, [r3, #28]
 8007360:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Determine if an IP limited or directed broadcast is requested.  */
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007368:	d00d      	beq.n	8007386 <_nx_ip_driver_packet_send+0x66>
            (((destination_ip & network_mask) == network) &&
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800736e:	4013      	ands	r3, r2
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8007370:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007372:	429a      	cmp	r2, r3
 8007374:	d110      	bne.n	8007398 <_nx_ip_driver_packet_send+0x78>
             ((destination_ip & ~network_mask) == ~network_mask)))
 8007376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007378:	43da      	mvns	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	401a      	ands	r2, r3
 800737e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007380:	43db      	mvns	r3, r3
            (((destination_ip & network_mask) == network) &&
 8007382:	429a      	cmp	r2, r3
 8007384:	d108      	bne.n	8007398 <_nx_ip_driver_packet_send+0x78>
        {

            /* Build the driver request.  */
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 8007386:	2304      	movs	r3, #4
 8007388:	61bb      	str	r3, [r7, #24]
            driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 800738a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800738e:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8007390:	f04f 33ff 	mov.w	r3, #4294967295
 8007394:	627b      	str	r3, [r7, #36]	; 0x24
 8007396:	e162      	b.n	800765e <_nx_ip_driver_packet_send+0x33e>
        }
        /* Determine if we have a loopback address.  */
        else if (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d105      	bne.n	80073b0 <_nx_ip_driver_packet_send+0x90>
        {
            loopback = NX_TRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 80073aa:	2300      	movs	r3, #0
 80073ac:	637b      	str	r3, [r7, #52]	; 0x34
 80073ae:	e156      	b.n	800765e <_nx_ip_driver_packet_send+0x33e>
        }
        /* Determine if we have a class D multicast address.  */
        else if ((destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80073b6:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80073ba:	d133      	bne.n	8007424 <_nx_ip_driver_packet_send+0x104>

            /* Yes, we have a class D multicast address.  Derive the physical mapping from
               the class D address.  */

            /* Determine if the group address has been joined in this IP instance.  */
            index =  0;
 80073bc:	2300      	movs	r3, #0
 80073be:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 80073c0:	e00f      	b.n	80073e2 <_nx_ip_driver_packet_send+0xc2>
            {

                /* Determine if the destination address matches the requested address.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_join_list == destination_ip)
 80073c2:	68f9      	ldr	r1, [r7, #12]
 80073c4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80073c6:	4613      	mov	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	440b      	add	r3, r1
 80073d0:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d006      	beq.n	80073ea <_nx_ip_driver_packet_send+0xca>
                    /* Yes, break the loop!  */
                    break;
                }

                /* Increment the join list index.  */
                index++;
 80073dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073de:	3301      	adds	r3, #1
 80073e0:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 80073e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073e4:	2b06      	cmp	r3, #6
 80073e6:	d9ec      	bls.n	80073c2 <_nx_ip_driver_packet_send+0xa2>
 80073e8:	e000      	b.n	80073ec <_nx_ip_driver_packet_send+0xcc>
                    break;
 80073ea:	bf00      	nop
            }

            /* Determine if the group was joined by this IP instance.  */
            if (index < NX_MAX_MULTICAST_GROUPS)
 80073ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ee:	2b06      	cmp	r3, #6
 80073f0:	d80e      	bhi.n	8007410 <_nx_ip_driver_packet_send+0xf0>
            {

                /* Determine if the group has loopback enabled.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_loopback_enable)
 80073f2:	68f9      	ldr	r1, [r7, #12]
 80073f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80073f6:	4613      	mov	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	440b      	add	r3, r1
 8007400:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <_nx_ip_driver_packet_send+0xf0>
                {
                    loopback = NX_TRUE;
 800740a:	2301      	movs	r3, #1
 800740c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                }
            }

            /* Build the driver request. Derive the physical mapping from
               the class D address.  */
            driver_request.nx_ip_driver_physical_address_msw =  NX_IP_MULTICAST_UPPER;
 8007410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007414:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  NX_IP_MULTICAST_LOWER | (destination_ip & NX_IP_MULTICAST_MASK);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800741c:	f043 43bc 	orr.w	r3, r3, #1577058304	; 0x5e000000
 8007420:	627b      	str	r3, [r7, #36]	; 0x24
 8007422:	e11c      	b.n	800765e <_nx_ip_driver_packet_send+0x33e>

            NX_PARAMETER_NOT_USED(fragment);
            /* Look into the ARP Routing Table to derive the physical address.  */

            /* If we get here, the packet destination is a unicast address.  */
            destination_ip = next_hop_address;
 8007424:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007428:	607b      	str	r3, [r7, #4]

            /* Calculate the hash index for the destination IP address.  */
            index =  (UINT)((destination_ip + (destination_ip >> 8)) & NX_ARP_TABLE_MASK);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	0a1a      	lsrs	r2, r3, #8
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4413      	add	r3, r2
 8007432:	f003 031f 	and.w	r3, r3, #31
 8007436:	677b      	str	r3, [r7, #116]	; 0x74

            /* Determine if there is an entry for this IP address.  */
            arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800743c:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8007440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007444:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Loop to look for an ARP match.  */
            while (arp_ptr)
 8007446:	e013      	b.n	8007470 <_nx_ip_driver_packet_send+0x150>
            {

                /* Determine if this arp entry matches the destination IP address.  */
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 8007448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	429a      	cmp	r2, r3
 8007450:	d012      	beq.n	8007478 <_nx_ip_driver_packet_send+0x158>
                    /* Yes, we found a match.  Get out of the loop!  */
                    break;
                }

                /* Move to the next active ARP entry.  */
                arp_ptr =  arp_ptr -> nx_arp_active_next;
 8007452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Determine if we are at the end of the ARP list.  */
                if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800745c:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8007460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007464:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007466:	429a      	cmp	r2, r3
 8007468:	d102      	bne.n	8007470 <_nx_ip_driver_packet_send+0x150>
                {
                    /* Clear the ARP pointer.  */
                    arp_ptr =  NX_NULL;
 800746a:	2300      	movs	r3, #0
 800746c:	66fb      	str	r3, [r7, #108]	; 0x6c
                    break;
 800746e:	e004      	b.n	800747a <_nx_ip_driver_packet_send+0x15a>
            while (arp_ptr)
 8007470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e8      	bne.n	8007448 <_nx_ip_driver_packet_send+0x128>
 8007476:	e000      	b.n	800747a <_nx_ip_driver_packet_send+0x15a>
                    break;
 8007478:	bf00      	nop
                }
            }

            /* Determine if we actually found a matching and effective ARP entry.  */
            if ((arp_ptr) && (arp_ptr -> nx_arp_physical_address_msw | arp_ptr -> nx_arp_physical_address_lsw))
 800747a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d022      	beq.n	80074c6 <_nx_ip_driver_packet_send+0x1a6>
 8007480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007488:	4313      	orrs	r3, r2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d01b      	beq.n	80074c6 <_nx_ip_driver_packet_send+0x1a6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800748e:	f3ef 8310 	mrs	r3, PRIMASK
 8007492:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8007494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8007496:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8007498:	b672      	cpsid	i
    return(int_posture);
 800749a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
            {

                /* Disable interrupts temporarily.  */
                TX_DISABLE
 800749c:	657b      	str	r3, [r7, #84]	; 0x54

                /* Yes, we have a physical mapping.  Copy the physical address into the driver
                   request structure.  */
                driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 800749e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a2:	623b      	str	r3, [r7, #32]
                driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 80074a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a8:	627b      	str	r3, [r7, #36]	; 0x24

                /* Move this ARP entry to the head of the list.  */
                ip_ptr -> nx_ip_arp_table[index] =  arp_ptr;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80074ae:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 80074b2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80074b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80074b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074ba:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80074bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074be:	f383 8810 	msr	PRIMASK, r3
}
 80074c2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE
 80074c4:	e0cb      	b.n	800765e <_nx_ip_driver_packet_send+0x33e>
            }
            else
            {

                /* Determine if fragmentation is needed before queue the packet on the ARP waiting queue.  */
                if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d910      	bls.n	80074f6 <_nx_ip_driver_packet_send+0x1d6>
                {

#ifndef NX_DISABLE_FRAGMENTATION
                    /* Check the DF bit flag.  */
                    if ((ip_ptr -> nx_ip_fragment_processing == NX_NULL) || (fragment != NX_FRAGMENT_OKAY))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d002      	beq.n	80074e4 <_nx_ip_driver_packet_send+0x1c4>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d008      	beq.n	80074f6 <_nx_ip_driver_packet_send+0x1d6>
                    {

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	655a      	str	r2, [r3, #84]	; 0x54
#endif
                        /* Just release the packet.  */
                        _nx_packet_transmit_release(packet_ptr);
 80074ee:	68b8      	ldr	r0, [r7, #8]
 80074f0:	f002 f8fe 	bl	80096f0 <_nx_packet_transmit_release>

                        /* Return... nothing more can be done!  */
                        return;
 80074f4:	e132      	b.n	800775c <_nx_ip_driver_packet_send+0x43c>
                    }
                }

                /* Determine if we actually found a matching ARP entry.  */
                if (arp_ptr)
 80074f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d052      	beq.n	80075a2 <_nx_ip_driver_packet_send+0x282>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80074fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007500:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 8007502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    int_posture = __get_interrupt_posture();
 8007504:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSID i" : : : "memory");
 8007506:	b672      	cpsid	i
    return(int_posture);
 8007508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                {

                    /* Yes, we have an existing ARP mapping entry.  */

                    /* Disable interrupts temporarily.  */
                    TX_DISABLE
 800750a:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Ensure the current packet's queue next pointer to NULL.  */
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2200      	movs	r2, #0
 8007510:	61da      	str	r2, [r3, #28]

                    /* Determine if the queue is empty.  */
                    if (arp_ptr -> nx_arp_packets_waiting == NX_NULL)
 8007512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	2b00      	cmp	r3, #0
 8007518:	d109      	bne.n	800752e <_nx_ip_driver_packet_send+0x20e>
                    {

                        /* Yes, we have an empty ARP packet queue.  Simply place the
                           packet at the head of the list.  */
                        arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 800751a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	631a      	str	r2, [r3, #48]	; 0x30
 8007520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007522:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007526:	f383 8810 	msr	PRIMASK, r3
}
 800752a:	bf00      	nop
                    /* Call ARP send to send an ARP request.  */
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
                }

                /* Just return!  */
                return;
 800752c:	e115      	b.n	800775a <_nx_ip_driver_packet_send+0x43a>
                        last_packet =  arp_ptr -> nx_arp_packets_waiting;
 800752e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007532:	66bb      	str	r3, [r7, #104]	; 0x68
                        queued_count = 1;
 8007534:	2301      	movs	r3, #1
 8007536:	663b      	str	r3, [r7, #96]	; 0x60
                        while (last_packet -> nx_packet_queue_next)
 8007538:	e005      	b.n	8007546 <_nx_ip_driver_packet_send+0x226>
                            queued_count++;
 800753a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800753c:	3301      	adds	r3, #1
 800753e:	663b      	str	r3, [r7, #96]	; 0x60
                            last_packet =  last_packet -> nx_packet_queue_next;
 8007540:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007542:	69db      	ldr	r3, [r3, #28]
 8007544:	66bb      	str	r3, [r7, #104]	; 0x68
                        while (last_packet -> nx_packet_queue_next)
 8007546:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1f5      	bne.n	800753a <_nx_ip_driver_packet_send+0x21a>
                        last_packet -> nx_packet_queue_next =  packet_ptr;
 800754e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	61da      	str	r2, [r3, #28]
                        remove_packet =  NX_NULL;
 8007554:	2300      	movs	r3, #0
 8007556:	667b      	str	r3, [r7, #100]	; 0x64
                        if (queued_count >= NX_ARP_MAX_QUEUE_DEPTH)
 8007558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800755a:	2b03      	cmp	r3, #3
 800755c:	d913      	bls.n	8007586 <_nx_ip_driver_packet_send+0x266>
                            remove_packet =  arp_ptr -> nx_arp_packets_waiting;
 800755e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007562:	667b      	str	r3, [r7, #100]	; 0x64
                            arp_ptr -> nx_arp_packets_waiting =  remove_packet -> nx_packet_queue_next;
 8007564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007566:	69da      	ldr	r2, [r3, #28]
 8007568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800756a:	631a      	str	r2, [r3, #48]	; 0x30
                            remove_packet -> nx_packet_queue_next =  NX_NULL;
 800756c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800756e:	2200      	movs	r2, #0
 8007570:	61da      	str	r2, [r3, #28]
                            ip_ptr -> nx_ip_transmit_resource_errors++;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	645a      	str	r2, [r3, #68]	; 0x44
                            ip_ptr -> nx_ip_send_packets_dropped++;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	655a      	str	r2, [r3, #84]	; 0x54
 8007586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007588:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800758a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758c:	f383 8810 	msr	PRIMASK, r3
}
 8007590:	bf00      	nop
                        if (remove_packet)
 8007592:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 80e0 	beq.w	800775a <_nx_ip_driver_packet_send+0x43a>
                            _nx_packet_transmit_release(remove_packet);
 800759a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800759c:	f002 f8a8 	bl	80096f0 <_nx_packet_transmit_release>
                return;
 80075a0:	e0db      	b.n	800775a <_nx_ip_driver_packet_send+0x43a>
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00e      	beq.n	80075ca <_nx_ip_driver_packet_send+0x2aa>
                        ((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)))
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 80075b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80075b4:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 80075b8:	0092      	lsls	r2, r2, #2
 80075ba:	68f9      	ldr	r1, [r7, #12]
 80075bc:	4411      	add	r1, r2
 80075be:	2200      	movs	r2, #0
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	4798      	blx	r3
 80075c4:	4603      	mov	r3, r0
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00d      	beq.n	80075e6 <_nx_ip_driver_packet_send+0x2c6>
                        ip_ptr -> nx_ip_transmit_resource_errors++;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	645a      	str	r2, [r3, #68]	; 0x44
                        ip_ptr -> nx_ip_send_packets_dropped++;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	655a      	str	r2, [r3, #84]	; 0x54
                        _nx_packet_transmit_release(packet_ptr);
 80075de:	68b8      	ldr	r0, [r7, #8]
 80075e0:	f002 f886 	bl	80096f0 <_nx_packet_transmit_release>
                        return;
 80075e4:	e0ba      	b.n	800775c <_nx_ip_driver_packet_send+0x43c>
                    arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80075ea:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 80075ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	66fb      	str	r3, [r7, #108]	; 0x6c
                    arp_ptr -> nx_arp_ip_address =            destination_ip;
 80075f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	621a      	str	r2, [r3, #32]
                    arp_ptr -> nx_arp_physical_address_msw =  0;
 80075fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075fe:	2200      	movs	r2, #0
 8007600:	625a      	str	r2, [r3, #36]	; 0x24
                    arp_ptr -> nx_arp_physical_address_lsw =  0;
 8007602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007604:	2200      	movs	r2, #0
 8007606:	629a      	str	r2, [r3, #40]	; 0x28
                    arp_ptr -> nx_arp_entry_next_update =     NX_ARP_UPDATE_RATE;
 8007608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760a:	220a      	movs	r2, #10
 800760c:	605a      	str	r2, [r3, #4]
                    arp_ptr -> nx_arp_retries =               0;
 800760e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007610:	2200      	movs	r2, #0
 8007612:	609a      	str	r2, [r3, #8]
                    arp_ptr -> nx_arp_ip_interface =          packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800761a:	62da      	str	r2, [r3, #44]	; 0x2c
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2200      	movs	r2, #0
 8007620:	61da      	str	r2, [r3, #28]
                    arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 8007622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	631a      	str	r2, [r3, #48]	; 0x30
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007632:	6879      	ldr	r1, [r7, #4]
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	4798      	blx	r3
                return;
 8007638:	e08f      	b.n	800775a <_nx_ip_driver_packet_send+0x43a>
    {

        /* This IP instance does not require any IP-to-physical mapping.  */

        /* Determine if we have a loopback address.  */
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007640:	d302      	bcc.n	8007648 <_nx_ip_driver_packet_send+0x328>
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 8007642:	687b      	ldr	r3, [r7, #4]
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8007644:	2b00      	cmp	r3, #0
 8007646:	da05      	bge.n	8007654 <_nx_ip_driver_packet_send+0x334>
            (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address))
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764c:	695b      	ldr	r3, [r3, #20]
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	429a      	cmp	r2, r3
 8007652:	d104      	bne.n	800765e <_nx_ip_driver_packet_send+0x33e>
        {

            /* Yes, we have an internal loopback address.  */
            loopback = NX_TRUE;
 8007654:	2301      	movs	r3, #1
 8007656:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 800765a:	2300      	movs	r3, #0
 800765c:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Check whether the packet should be loop back. */
    if (loopback == NX_TRUE)
 800765e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8007662:	2b01      	cmp	r3, #1
 8007664:	d131      	bne.n	80076ca <_nx_ip_driver_packet_send+0x3aa>
    {

        /* Copy the packet so it can be enqueued properly by the receive
           processing.  */
        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800766c:	f107 0114 	add.w	r1, r7, #20
 8007670:	2300      	movs	r3, #0
 8007672:	68b8      	ldr	r0, [r7, #8]
 8007674:	f001 fcb2 	bl	8008fdc <_nx_packet_copy>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d11b      	bne.n	80076b6 <_nx_ip_driver_packet_send+0x396>

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

            /* Compute checksum for upper layer protocol. */
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            if (packet_copy -> nx_packet_interface_capability_flag)
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <_nx_ip_driver_packet_send+0x36e>
            {
                _nx_ip_packet_checksum_compute(packet_copy);
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	4618      	mov	r0, r3
 800768a:	f000 fa97 	bl	8007bbc <_nx_ip_packet_checksum_compute>
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	1c5a      	adds	r2, r3, #1
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	699a      	ldr	r2, [r3, #24]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	4413      	add	r3, r2
 80076a2:	f1a3 0214 	sub.w	r2, r3, #20
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	619a      	str	r2, [r3, #24]
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_copy);

            /* Send the packet to this IP's receive processing like it came in from the
               driver.  */
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	4619      	mov	r1, r3
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 fc10 	bl	8007ed4 <_nx_ip_packet_deferred_receive>
 80076b4:	e009      	b.n	80076ca <_nx_ip_driver_packet_send+0x3aa>
#ifndef NX_DISABLE_IP_INFO
        else
        {

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	655a      	str	r2, [r3, #84]	; 0x54

            /* Increment the IP transmit resource error count.  */
            ip_ptr -> nx_ip_transmit_resource_errors++;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	645a      	str	r2, [r3, #68]	; 0x44
        }
#endif
    }

    /* Check whether the packet should be sent through driver. */
    if (driver_request.nx_ip_driver_interface)
 80076ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d040      	beq.n	8007752 <_nx_ip_driver_packet_send+0x432>
    {

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	429a      	cmp	r2, r3
 80076dc:	d919      	bls.n	8007712 <_nx_ip_driver_packet_send+0x3f2>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Check the DF bit flag.  */
            if ((ip_ptr -> nx_ip_fragment_processing) && (fragment != NX_DONT_FRAGMENT))
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00b      	beq.n	8007700 <_nx_ip_driver_packet_send+0x3e0>
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076ee:	d007      	beq.n	8007700 <_nx_ip_driver_packet_send+0x3e0>
            {

                /* Fragmentation is needed, call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80076f6:	f107 0218 	add.w	r2, r7, #24
 80076fa:	4610      	mov	r0, r2
 80076fc:	4798      	blx	r3
                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
            }

            /* In either case, this packet send is complete, just return.  */
            return;
 80076fe:	e02d      	b.n	800775c <_nx_ip_driver_packet_send+0x43c>
                ip_ptr -> nx_ip_send_packets_dropped++;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	655a      	str	r2, [r3, #84]	; 0x54
                _nx_packet_transmit_release(packet_ptr);
 800770a:	68b8      	ldr	r0, [r7, #8]
 800770c:	f001 fff0 	bl	80096f0 <_nx_packet_transmit_release>
            return;
 8007710:	e024      	b.n	800775c <_nx_ip_driver_packet_send+0x43c>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packet sent count.  */
        ip_ptr -> nx_ip_total_packets_sent++;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	615a      	str	r2, [r3, #20]

        /* Increment the IP bytes sent count.  */
        ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	699a      	ldr	r2, [r3, #24]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	4413      	add	r3, r2
 8007726:	f1a3 0214 	sub.w	r2, r3, #20
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	619a      	str	r2, [r3, #24]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Driver entry must not be NULL. */
        NX_ASSERT(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry != NX_NULL);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007734:	2b00      	cmp	r3, #0
 8007736:	d104      	bne.n	8007742 <_nx_ip_driver_packet_send+0x422>
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	f006 f890 	bl	800d860 <_tx_thread_sleep>
 8007740:	e7fa      	b.n	8007738 <_nx_ip_driver_packet_send+0x418>

        /* Broadcast packet.  */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007748:	f107 0218 	add.w	r2, r7, #24
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
 8007750:	e004      	b.n	800775c <_nx_ip_driver_packet_send+0x43c>
    }
    else
    {

        /* Release the transmit packet.  */
        _nx_packet_transmit_release(packet_ptr);
 8007752:	68b8      	ldr	r0, [r7, #8]
 8007754:	f001 ffcc 	bl	80096f0 <_nx_packet_transmit_release>
 8007758:	e000      	b.n	800775c <_nx_ip_driver_packet_send+0x43c>
                return;
 800775a:	bf00      	nop
    }
}
 800775c:	3778      	adds	r7, #120	; 0x78
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <_nx_ip_header_add>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_header_add(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG source_ip, ULONG destination_ip,
                        ULONG type_of_service, ULONG time_to_live,  ULONG protocol, ULONG fragment)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b08c      	sub	sp, #48	; 0x30
 8007768:	af02      	add	r7, sp, #8
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]
ULONG           router_alert = 0;
 8007772:	2300      	movs	r3, #0
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
NX_IPV4_HEADER *ip_header_ptr;
ULONG           checksum;
#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT            compute_checksum = 1;
 8007776:	2301      	movs	r3, #1
 8007778:	623b      	str	r3, [r7, #32]
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
ULONG           val;

#ifndef NX_DISABLE_IGMPV2
    /* Check IGMPv2 protocol. */
    if ((protocol == NX_IP_IGMP) && (ip_ptr -> nx_ip_igmp_router_version == NX_IGMP_HOST_VERSION_2))
 800777a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007780:	d106      	bne.n	8007790 <_nx_ip_header_add+0x2c>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8007788:	2b02      	cmp	r3, #2
 800778a:	d101      	bne.n	8007790 <_nx_ip_header_add+0x2c>
    {
        router_alert = 4;
 800778c:	2304      	movs	r3, #4
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007796:	f06f 0313 	mvn.w	r3, #19
 800779a:	1a5b      	subs	r3, r3, r1
 800779c:	441a      	add	r2, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	4413      	add	r3, r2
 80077aa:	f103 0214 	add.w	r2, r3, #20
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Assert prepend pointer is no less than data start pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d204      	bcs.n	80077c8 <_nx_ip_header_add+0x64>
 80077be:	f04f 30ff 	mov.w	r0, #4294967295
 80077c2:	f006 f84d 	bl	800d860 <_tx_thread_sleep>
 80077c6:	e7fa      	b.n	80077be <_nx_ip_header_add+0x5a>

    /* Setup the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	61fb      	str	r3, [r7, #28]
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	689a      	ldr	r2, [r3, #8]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	635a      	str	r2, [r3, #52]	; 0x34
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
                                                       sizeof(NX_IPV4_HEADER) + router_alert);
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	4413      	add	r3, r2
 80077e2:	b2db      	uxtb	r3, r3
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 80077e4:	3314      	adds	r3, #20
 80077e6:	b2da      	uxtb	r2, r3
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

    /* Determine if this is an identical copy for TCP retransmission.
       RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <_nx_ip_header_add+0x98>
    {

        /* Yes, this an identical copy for TCP retransmission.
           The IP header has been added, return.  */
        return(NX_SUCCESS);
 80077f8:	2300      	movs	r3, #0
 80077fa:	e089      	b.n	8007910 <_nx_ip_header_add+0x1ac>
    }

    /* Build the IP header.  */

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d009      	beq.n	8007816 <_nx_ip_header_add+0xb2>

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
                                                        (NX_IP_HEADER_LENGTH_ENCODE_6 << 24) |
                                                        type_of_service |
                                                        (0xFFFF & packet_ptr -> nx_packet_length));
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	b29a      	uxth	r2, r3
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	4313      	orrs	r3, r2
 800780c:	f043 428c 	orr.w	r2, r3, #1174405120	; 0x46000000
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	e008      	b.n	8007828 <_nx_ip_header_add+0xc4>
    else
#endif
    {

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	b29a      	uxth	r2, r3
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	4313      	orrs	r3, r2
 8007820:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	601a      	str	r2, [r3, #0]
    }

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800782e:	1c59      	adds	r1, r3, #1
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	f8c2 1134 	str.w	r1, [r2, #308]	; 0x134
 8007836:	041a      	lsls	r2, r3, #16
 8007838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783a:	431a      	orrs	r2, r3
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 8007840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007842:	061a      	lsls	r2, r3, #24
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	431a      	orrs	r2, r3
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  source_ip;
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  destination_ip;
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	2b00      	cmp	r3, #0
 800785c:	d004      	beq.n	8007868 <_nx_ip_header_add+0x104>
    {

        /* Append Router Alert Option. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))) = (NX_IP_OPTION_COPY_FLAG |
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	3314      	adds	r3, #20
 8007864:	4a2c      	ldr	r2, [pc, #176]	; (8007918 <_nx_ip_header_add+0x1b4>)
 8007866:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	ba1a      	rev	r2, r3
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	ba1a      	rev	r2, r3
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	ba1a      	rev	r2, r3
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	ba1a      	rev	r2, r3
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	ba1a      	rev	r2, r3
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	611a      	str	r2, [r3, #16]
#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	2b00      	cmp	r3, #0
 800789e:	d008      	beq.n	80078b2 <_nx_ip_header_add+0x14e>
    {

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_CHANGE_ULONG_ENDIAN(*((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))));
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	3314      	adds	r3, #20
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	3314      	adds	r3, #20
 80078ae:	ba12      	rev	r2, r2
 80078b0:	601a      	str	r2, [r3, #0]

#ifdef NX_DISABLE_IP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_IP_TX_CHECKSUM */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <_nx_ip_header_add+0x160>
    {
        compute_checksum = 0;
 80078c0:	2300      	movs	r3, #0
 80078c2:	623b      	str	r3, [r7, #32]
    }

#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d01b      	beq.n	8007902 <_nx_ip_header_add+0x19e>
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* Length is the size of IP header, including options */
                                           (UINT)(20 + router_alert),
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	f103 0214 	add.w	r2, r3, #20
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 80078d0:	2300      	movs	r3, #0
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	2300      	movs	r3, #0
 80078d6:	2104      	movs	r1, #4
 80078d8:	68b8      	ldr	r0, [r7, #8]
 80078da:	f7ff f98e 	bl	8006bfa <_nx_ip_checksum_compute>
 80078de:	4603      	mov	r3, r0
 80078e0:	61bb      	str	r3, [r7, #24]
                                           /* IPv4 header checksum does not use src/dest addresses */
                                           NULL, NULL);

        val = (ULONG)(~checksum);
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	43db      	mvns	r3, r3
 80078e6:	617b      	str	r3, [r7, #20]
        val = val & NX_LOWER_16_MASK;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	617b      	str	r3, [r7, #20]

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	ba1b      	rev	r3, r3
 80078f2:	617b      	str	r3, [r7, #20]

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	431a      	orrs	r2, r3
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	609a      	str	r2, [r3, #8]
 8007900:	e005      	b.n	800790e <_nx_ip_header_add+0x1aa>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007906:	f043 0201 	orr.w	r2, r3, #1
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Return...  */
    return(NX_SUCCESS);
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3728      	adds	r7, #40	; 0x28
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	94040000 	.word	0x94040000

0800791c <_nx_ip_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_initialize(VOID)
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0

    /* Initialize the created IP instance variables.  */
    _nx_ip_created_ptr =     NX_NULL;
 8007920:	4b05      	ldr	r3, [pc, #20]	; (8007938 <_nx_ip_initialize+0x1c>)
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]
    _nx_ip_created_count =   0;
 8007926:	4b05      	ldr	r3, [pc, #20]	; (800793c <_nx_ip_initialize+0x20>)
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]
}
 800792c:	bf00      	nop
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	20014828 	.word	0x20014828
 800793c:	2001482c 	.word	0x2001482c

08007940 <_nx_ip_interface_status_check>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_status_check(NX_IP *ip_ptr, UINT interface_index, ULONG needed_status,
                                    ULONG *actual_status, ULONG wait_option)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b08e      	sub	sp, #56	; 0x38
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
 800794c:	603b      	str	r3, [r7, #0]
    /* Loop to keep checking for the proper status bits.  */
    for (;;)
    {

        /* Clear the current status.  */
        current_status =  0;
 800794e:	2300      	movs	r3, #0
 8007950:	637b      	str	r3, [r7, #52]	; 0x34

        /*  Process according to the status option specified.  */

        if (needed_status & NX_IP_INITIALIZE_DONE)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b00      	cmp	r3, #0
 800795a:	d008      	beq.n	800796e <_nx_ip_interface_status_check+0x2e>
        {

            /* Check for initialization complete.  */
            if (ip_ptr -> nx_ip_initialize_done)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <_nx_ip_interface_status_check+0x2e>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_INITIALIZE_DONE;
 8007966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007968:	f043 0301 	orr.w	r3, r3, #1
 800796c:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

#ifndef NX_DISABLE_IPV4
        if (needed_status & NX_IP_ADDRESS_RESOLVED)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f003 0302 	and.w	r3, r3, #2
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00f      	beq.n	8007998 <_nx_ip_interface_status_check+0x58>
        {

            /* Check for a non-zero IP address.  */
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 8007978:	68f9      	ldr	r1, [r7, #12]
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	4613      	mov	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	011b      	lsls	r3, r3, #4
 8007984:	440b      	add	r3, r1
 8007986:	f203 7334 	addw	r3, r3, #1844	; 0x734
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <_nx_ip_interface_status_check+0x58>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_ADDRESS_RESOLVED;
 8007990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007992:	f043 0302 	orr.w	r3, r3, #2
 8007996:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_ARP_ENABLED)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f003 0308 	and.w	r3, r3, #8
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d008      	beq.n	80079b4 <_nx_ip_interface_status_check+0x74>
        {

            /* Check for ARP being enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <_nx_ip_interface_status_check+0x74>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_ARP_ENABLED;
 80079ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ae:	f043 0308 	orr.w	r3, r3, #8
 80079b2:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_RARP_COMPLETE)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00f      	beq.n	80079de <_nx_ip_interface_status_check+0x9e>
        {

            /* This is effectively the same as the IP address resolved...  */

            /* Check for a non-zero IP address.  */
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 80079be:	68f9      	ldr	r1, [r7, #12]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	4613      	mov	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	011b      	lsls	r3, r3, #4
 80079ca:	440b      	add	r3, r1
 80079cc:	f203 7334 	addw	r3, r3, #1844	; 0x734
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <_nx_ip_interface_status_check+0x9e>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_RARP_COMPLETE;
 80079d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079dc:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_IGMP_ENABLED)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d008      	beq.n	80079fa <_nx_ip_interface_status_check+0xba>
        {

            /* Check for IGMP being enabled.  */
            if (ip_ptr -> nx_ip_igmp_packet_receive)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d003      	beq.n	80079fa <_nx_ip_interface_status_check+0xba>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_IGMP_ENABLED;
 80079f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        if (needed_status & NX_IP_LINK_ENABLED)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d04a      	beq.n	8007a9a <_nx_ip_interface_status_check+0x15a>
        {

            /* Get mutex protection.  */
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007a0a:	f04f 31ff 	mov.w	r1, #4294967295
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f004 ffb2 	bl	800c978 <_tx_mutex_get>

            /* Build the driver request structure.  */
            driver_request.nx_ip_driver_ptr =         ip_ptr;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	62fb      	str	r3, [r7, #44]	; 0x2c
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 8007a18:	230a      	movs	r3, #10
 8007a1a:	617b      	str	r3, [r7, #20]
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 8007a1c:	f107 0310 	add.w	r3, r7, #16
 8007a20:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	4613      	mov	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	011b      	lsls	r3, r3, #4
 8007a2c:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	4413      	add	r3, r2
 8007a34:	633b      	str	r3, [r7, #48]	; 0x30

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_GET_STATUS, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Call link level driver.  */
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 8007a36:	68f9      	ldr	r1, [r7, #12]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	011b      	lsls	r3, r3, #4
 8007a42:	440b      	add	r3, r1
 8007a44:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f107 0214 	add.w	r2, r7, #20
 8007a4e:	4610      	mov	r0, r2
 8007a50:	4798      	blx	r3

            /* If the driver does not recognize this keyword, we fall back to reading the IP link status.*/
            /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
            if (driver_request.nx_ip_driver_status != NX_SUCCESS)
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d013      	beq.n	8007a80 <_nx_ip_interface_status_check+0x140>
            {
                if (driver_request.nx_ip_driver_status == NX_UNHANDLED_COMMAND)
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	2b44      	cmp	r3, #68	; 0x44
 8007a5c:	d117      	bne.n	8007a8e <_nx_ip_interface_status_check+0x14e>
                {
                    if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_up)
 8007a5e:	68f9      	ldr	r1, [r7, #12]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	4613      	mov	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	011b      	lsls	r3, r3, #4
 8007a6a:	440b      	add	r3, r1
 8007a6c:	f203 7326 	addw	r3, r3, #1830	; 0x726
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00b      	beq.n	8007a8e <_nx_ip_interface_status_check+0x14e>
                    {
                        current_status = current_status | NX_IP_LINK_ENABLED;
 8007a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a78:	f043 0304 	orr.w	r3, r3, #4
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a7e:	e006      	b.n	8007a8e <_nx_ip_interface_status_check+0x14e>
            else
            {

                /* Check for a link up condition.  */
                /*lint -e{644} suppress variable might not be initialized, since "return_value" was initialized in nx_interface_link_driver_entry. */
                if (return_value == NX_TRUE)
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d103      	bne.n	8007a8e <_nx_ip_interface_status_check+0x14e>
                {

                    /* Yes, set the appropriate bit in the current status.  */
                    current_status =  current_status | NX_IP_LINK_ENABLED;
 8007a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a88:	f043 0304 	orr.w	r3, r3, #4
 8007a8c:	637b      	str	r3, [r7, #52]	; 0x34
                }
            }

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007a94:	4618      	mov	r0, r3
 8007a96:	f005 f9e7 	bl	800ce68 <_tx_mutex_put>
        }

        if (needed_status &  NX_IP_UDP_ENABLED)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d008      	beq.n	8007ab6 <_nx_ip_interface_status_check+0x176>
        {

            /* Check for UDP being enabled.  */
            if (ip_ptr -> nx_ip_udp_packet_receive)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <_nx_ip_interface_status_check+0x176>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_UDP_ENABLED;
 8007aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab0:	f043 0310 	orr.w	r3, r3, #16
 8007ab4:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_TCP_ENABLED)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f003 0320 	and.w	r3, r3, #32
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d008      	beq.n	8007ad2 <_nx_ip_interface_status_check+0x192>
        {

            /* Check for TCP being enabled.  */
            if (ip_ptr -> nx_ip_tcp_packet_receive)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <_nx_ip_interface_status_check+0x192>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_TCP_ENABLED;
 8007aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007acc:	f043 0320 	orr.w	r3, r3, #32
 8007ad0:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_INTERFACE_LINK_ENABLED)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d04a      	beq.n	8007b72 <_nx_ip_interface_status_check+0x232>
        {

            /* Get mutex protection.  */
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007ae2:	f04f 31ff 	mov.w	r1, #4294967295
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f004 ff46 	bl	800c978 <_tx_mutex_get>

            /* Build the driver request structure.  */
            driver_request.nx_ip_driver_ptr =         ip_ptr;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	62fb      	str	r3, [r7, #44]	; 0x2c
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 8007af0:	230a      	movs	r3, #10
 8007af2:	617b      	str	r3, [r7, #20]
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 8007af4:	f107 0310 	add.w	r3, r7, #16
 8007af8:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	4613      	mov	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	633b      	str	r3, [r7, #48]	; 0x30

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_GET_STATUS, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Call link level driver.  */
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 8007b0e:	68f9      	ldr	r1, [r7, #12]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	4613      	mov	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	440b      	add	r3, r1
 8007b1c:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f107 0214 	add.w	r2, r7, #20
 8007b26:	4610      	mov	r0, r2
 8007b28:	4798      	blx	r3

            /* If the driver does not recognize this keyword, we fall back to reading the IP link status.*/
            /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
            if (driver_request.nx_ip_driver_status != NX_SUCCESS)
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d013      	beq.n	8007b58 <_nx_ip_interface_status_check+0x218>
            {
                if (driver_request.nx_ip_driver_status == NX_UNHANDLED_COMMAND)
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	2b44      	cmp	r3, #68	; 0x44
 8007b34:	d117      	bne.n	8007b66 <_nx_ip_interface_status_check+0x226>
                {
                    if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_up)
 8007b36:	68f9      	ldr	r1, [r7, #12]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	011b      	lsls	r3, r3, #4
 8007b42:	440b      	add	r3, r1
 8007b44:	f203 7326 	addw	r3, r3, #1830	; 0x726
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00b      	beq.n	8007b66 <_nx_ip_interface_status_check+0x226>
                    {
                        current_status = current_status | NX_IP_INTERFACE_LINK_ENABLED;
 8007b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b54:	637b      	str	r3, [r7, #52]	; 0x34
 8007b56:	e006      	b.n	8007b66 <_nx_ip_interface_status_check+0x226>
            else
            {

                /* Check for a link up condition.  */
                /*lint -e{644} suppress variable might not be initialized, since "return_value" was initialized in nx_interface_link_driver_entry. */
                if (return_value == NX_TRUE)
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d103      	bne.n	8007b66 <_nx_ip_interface_status_check+0x226>
                {

                    /* Yes, set the appropriate bit in the current status.  */
                    current_status =  current_status | NX_IP_INTERFACE_LINK_ENABLED;
 8007b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b64:	637b      	str	r3, [r7, #52]	; 0x34
                }
            }

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f005 f97b 	bl	800ce68 <_tx_mutex_put>
        }

        /* Determine if current status is the same.  If so, break out
           of this polling loop.  */
        if (current_status == needed_status)
 8007b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d00f      	beq.n	8007b9a <_nx_ip_interface_status_check+0x25a>
        {
            break;
        }

        /* Check for suspension request.  */
        if (wait_option)
 8007b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00e      	beq.n	8007b9e <_nx_ip_interface_status_check+0x25e>
        {

            /* Decrease the wait time and sleep.  */
            if (wait_option > NX_IP_STATUS_CHECK_WAIT_TIME)
 8007b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d903      	bls.n	8007b8e <_nx_ip_interface_status_check+0x24e>
            {
                wait_option -= NX_IP_STATUS_CHECK_WAIT_TIME;
 8007b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b8c:	e001      	b.n	8007b92 <_nx_ip_interface_status_check+0x252>
            }
            else
            {
                wait_option = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* Sleep for a tick and check again.  */
            tx_thread_sleep(NX_IP_STATUS_CHECK_WAIT_TIME);
 8007b92:	2001      	movs	r0, #1
 8007b94:	f005 fe64 	bl	800d860 <_tx_thread_sleep>
        current_status =  0;
 8007b98:	e6d9      	b.n	800794e <_nx_ip_interface_status_check+0xe>
            break;
 8007b9a:	bf00      	nop
 8007b9c:	e000      	b.n	8007ba0 <_nx_ip_interface_status_check+0x260>
        }
        else
        {

            /* Get out of the loop.  */
            break;
 8007b9e:	bf00      	nop
        }
    }

    /* Place the current status in the return destination.  */
    *actual_status =  current_status;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ba4:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_IP_STATUS_CHECK, 0, 0, current_status, 0);

    /* Determine what status to return.  */
    if (needed_status == current_status)
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d101      	bne.n	8007bb2 <_nx_ip_interface_status_check+0x272>
    {

        /* Return a success.  */
        return(NX_SUCCESS);
 8007bae:	2300      	movs	r3, #0
 8007bb0:	e000      	b.n	8007bb4 <_nx_ip_interface_status_check+0x274>
    }
    else
    {

        /* Return an error.  */
        return(NX_NOT_SUCCESSFUL);
 8007bb2:	2343      	movs	r3, #67	; 0x43
    }
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3738      	adds	r7, #56	; 0x38
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <_nx_ip_packet_checksum_compute>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_checksum_compute(NX_PACKET *packet_ptr)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b098      	sub	sp, #96	; 0x60
 8007bc0:	af02      	add	r7, sp, #8
 8007bc2:	6078      	str	r0, [r7, #4]
ULONG             next_protocol;
UCHAR            *org_prepend_ptr;
ULONG             checksum;
ULONG             val;
UCHAR             is_done = NX_FALSE;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
ULONG             ip_header_length;
ULONG             ip_src_addr[4];
ULONG             ip_dst_addr[4];
ULONG             data_length = 0;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Get IP version. */
#ifdef FEATURE_NX_IPV6
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
    {
#endif
        next_protocol = NX_PROTOCOL_IPV4;
 8007bce:	2304      	movs	r3, #4
 8007bd0:	657b      	str	r3, [r7, #84]	; 0x54
        next_protocol = NX_PROTOCOL_IPV6;
    }
#endif

    /* Store original prepend_ptr. */
    org_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Loop to process headers. */
    while (!is_done)
 8007bd8:	e170      	b.n	8007ebc <_nx_ip_packet_checksum_compute+0x300>
    {
        switch (next_protocol)
 8007bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	2b10      	cmp	r3, #16
 8007be0:	f200 8168 	bhi.w	8007eb4 <_nx_ip_packet_checksum_compute+0x2f8>
 8007be4:	a201      	add	r2, pc, #4	; (adr r2, 8007bec <_nx_ip_packet_checksum_compute+0x30>)
 8007be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bea:	bf00      	nop
 8007bec:	08007daf 	.word	0x08007daf
 8007bf0:	08007e0f 	.word	0x08007e0f
 8007bf4:	08007eb5 	.word	0x08007eb5
 8007bf8:	08007c31 	.word	0x08007c31
 8007bfc:	08007eb5 	.word	0x08007eb5
 8007c00:	08007ce1 	.word	0x08007ce1
 8007c04:	08007eb5 	.word	0x08007eb5
 8007c08:	08007eb5 	.word	0x08007eb5
 8007c0c:	08007eb5 	.word	0x08007eb5
 8007c10:	08007eb5 	.word	0x08007eb5
 8007c14:	08007eb5 	.word	0x08007eb5
 8007c18:	08007eb5 	.word	0x08007eb5
 8007c1c:	08007eb5 	.word	0x08007eb5
 8007c20:	08007eb5 	.word	0x08007eb5
 8007c24:	08007eb5 	.word	0x08007eb5
 8007c28:	08007eb5 	.word	0x08007eb5
 8007c2c:	08007d4b 	.word	0x08007d4b
        {

            /* It's assumed that the IP link driver has positioned the top pointer in the
               packet to the start of the IP address... so that's where we will start.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Pick up the first word in the IP header. */
            val = ip_header_ptr -> nx_ip_header_word_0;
 8007c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Convert to host byte order. */
            NX_CHANGE_ULONG_ENDIAN(val);
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3e:	ba1b      	rev	r3, r3
 8007c40:	637b      	str	r3, [r7, #52]	; 0x34

            /* Obtain IP header length. */
            ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 8007c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c44:	0e1b      	lsrs	r3, r3, #24
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check if IPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01f      	beq.n	8007c98 <_nx_ip_packet_checksum_compute+0xdc>
            {

                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                                   /* length is the size of IP header, including options */
                                                   ip_header_length << 2,
 8007c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5a:	009a      	lsls	r2, r3, #2
                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	2300      	movs	r3, #0
 8007c62:	2104      	movs	r1, #4
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7fe ffc8 	bl	8006bfa <_nx_ip_checksum_compute>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	647b      	str	r3, [r7, #68]	; 0x44
                                                   /* IPv4 header checksum doesn't care src/dest addresses */
                                                   NULL, NULL);

                val = (ULONG)(~checksum);
 8007c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c70:	43db      	mvns	r3, r3
 8007c72:	637b      	str	r3, [r7, #52]	; 0x34
                val = val & NX_LOWER_16_MASK;
 8007c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	637b      	str	r3, [r7, #52]	; 0x34

                /* Convert to network byte order. */
                NX_CHANGE_ULONG_ENDIAN(val);
 8007c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c7c:	ba1b      	rev	r3, r3
 8007c7e:	637b      	str	r3, [r7, #52]	; 0x34

                /* Now store the checksum in the IP header.  */
                ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 8007c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c86:	431a      	orrs	r2, r3
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	609a      	str	r2, [r3, #8]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c90:	f023 0201 	bic.w	r2, r3, #1
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	639a      	str	r2, [r3, #56]	; 0x38
            }


            /* Get src and dst addresses. */
            ip_src_addr[0] = ip_header_ptr -> nx_ip_header_source_ip;
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	61bb      	str	r3, [r7, #24]
            ip_dst_addr[0] = ip_header_ptr -> nx_ip_header_destination_ip;
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	60bb      	str	r3, [r7, #8]
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	ba1b      	rev	r3, r3
 8007ca8:	61bb      	str	r3, [r7, #24]
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	ba1b      	rev	r3, r3
 8007cae:	60bb      	str	r3, [r7, #8]

            /* Get next protocol. */
            val = ip_header_ptr -> nx_ip_header_word_2;
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	637b      	str	r3, [r7, #52]	; 0x34
            NX_CHANGE_ULONG_ENDIAN(val);
 8007cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb8:	ba1b      	rev	r3, r3
 8007cba:	637b      	str	r3, [r7, #52]	; 0x34
            next_protocol = (val >> 16) & 0xFF;
 8007cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cbe:	0c1b      	lsrs	r3, r3, #16
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	657b      	str	r3, [r7, #84]	; 0x54

            /* Remove IPv4 header. */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + (ip_header_length << 2);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	689a      	ldr	r2, [r3, #8]
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	441a      	add	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	609a      	str	r2, [r3, #8]
            data_length = packet_ptr -> nx_packet_length - (ip_header_length << 2);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
            break;
 8007cde:	e0ed      	b.n	8007ebc <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_TCP:
        {

            /* Check if TCP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce4:	f003 0304 	and.w	r3, r3, #4
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d02a      	beq.n	8007d42 <_nx_ip_packet_checksum_compute+0x186>
            {

                /* Calculate the TCP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 8007cec:	f107 0218 	add.w	r2, r7, #24
 8007cf0:	f107 0308 	add.w	r3, r7, #8
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cfa:	2106      	movs	r1, #6
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7fe ff7c 	bl	8006bfa <_nx_ip_checksum_compute>
 8007d02:	4603      	mov	r3, r0
 8007d04:	647b      	str	r3, [r7, #68]	; 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the TCP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	63fb      	str	r3, [r7, #60]	; 0x3c

                checksum = ~checksum & NX_LOWER_16_MASK;
 8007d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d0e:	43db      	mvns	r3, r3
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	647b      	str	r3, [r7, #68]	; 0x44

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8007d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	ba1a      	rev	r2, r3
 8007d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d1c:	611a      	str	r2, [r3, #16]
                tcp_header_ptr -> nx_tcp_header_word_4 |=  (checksum << NX_SHIFT_BY_16);
 8007d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d20:	691a      	ldr	r2, [r3, #16]
 8007d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d24:	041b      	lsls	r3, r3, #16
 8007d26:	431a      	orrs	r2, r3
 8007d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d2a:	611a      	str	r2, [r3, #16]
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8007d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	ba1a      	rev	r2, r3
 8007d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d34:	611a      	str	r2, [r3, #16]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3a:	f023 0204 	bic.w	r2, r3, #4
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8007d42:	2301      	movs	r3, #1
 8007d44:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007d48:	e0b8      	b.n	8007ebc <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_UDP:
        {

            /* Check if UDP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4e:	f003 0310 	and.w	r3, r3, #16
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d027      	beq.n	8007da6 <_nx_ip_packet_checksum_compute+0x1ea>
            {

                /* Calculate the UDP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_UDP,
 8007d56:	f107 0218 	add.w	r2, r7, #24
 8007d5a:	f107 0308 	add.w	r3, r7, #8
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	4613      	mov	r3, r2
 8007d62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d64:	2111      	movs	r1, #17
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7fe ff47 	bl	8006bfa <_nx_ip_checksum_compute>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	647b      	str	r3, [r7, #68]	; 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the UDP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	643b      	str	r3, [r7, #64]	; 0x40

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8007d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	ba1a      	rev	r2, r3
 8007d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7e:	605a      	str	r2, [r3, #4]
                udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | (~checksum & NX_LOWER_16_MASK);
 8007d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d86:	43db      	mvns	r3, r3
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d8e:	605a      	str	r2, [r3, #4]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8007d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	ba1a      	rev	r2, r3
 8007d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d98:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9e:	f023 0210 	bic.w	r2, r3, #16
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8007da6:	2301      	movs	r3, #1
 8007da8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007dac:	e086      	b.n	8007ebc <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_ICMP:
        {

            /* Check if ICMPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d025      	beq.n	8007e06 <_nx_ip_packet_checksum_compute+0x24a>
            {

                /* Calculate the ICMPv4 checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 8007dba:	2300      	movs	r3, #0
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dc2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7fe ff17 	bl	8006bfa <_nx_ip_checksum_compute>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	647b      	str	r3, [r7, #68]	; 0x44
                                                    /* ICMPV4 header checksum doesn't care src/dest addresses */
                                                    NULL, NULL);

                /* Pickup the pointer to the head of the ICMPv4 packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                icmpv4_header_ptr =  (NX_ICMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 8007dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	ba1a      	rev	r2, r3
 8007ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dde:	601a      	str	r2, [r3, #0]
                icmpv4_header_ptr -> nx_icmp_header_word_0 =  icmpv4_header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007de6:	43db      	mvns	r3, r3
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	431a      	orrs	r2, r3
 8007dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dee:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 8007df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	ba1a      	rev	r2, r3
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	601a      	str	r2, [r3, #0]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8007e06:	2301      	movs	r3, #1
 8007e08:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007e0c:	e056      	b.n	8007ebc <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_IGMP:
        {

            /* Check if IGMP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d048      	beq.n	8007eac <_nx_ip_packet_checksum_compute+0x2f0>
            {

                /* Pickup the pointer to the head of the IGMP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                igmp_header_ptr =  (NX_IGMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 8007e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	ba1a      	rev	r2, r3
 8007e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e28:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	ba1a      	rev	r2, r3
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e32:	605a      	str	r2, [r3, #4]

                /* Calculate the checksum.  */
                val =       igmp_header_ptr -> nx_igmp_header_word_0;
 8007e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	637b      	str	r3, [r7, #52]	; 0x34
                checksum =  (val >> NX_SHIFT_BY_16);
 8007e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e3c:	0c1b      	lsrs	r3, r3, #16
 8007e3e:	647b      	str	r3, [r7, #68]	; 0x44
                checksum += (val & NX_LOWER_16_MASK);
 8007e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e46:	4413      	add	r3, r2
 8007e48:	647b      	str	r3, [r7, #68]	; 0x44
                val =      igmp_header_ptr -> nx_igmp_header_word_1;
 8007e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (val >> NX_SHIFT_BY_16);
 8007e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e52:	0c1b      	lsrs	r3, r3, #16
 8007e54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e56:	4413      	add	r3, r2
 8007e58:	647b      	str	r3, [r7, #68]	; 0x44
                checksum += (val & NX_LOWER_16_MASK);
 8007e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e60:	4413      	add	r3, r2
 8007e62:	647b      	str	r3, [r7, #68]	; 0x44

                /* Add in the carry bits into the checksum.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 8007e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e66:	0c1a      	lsrs	r2, r3, #16
 8007e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	4413      	add	r3, r2
 8007e6e:	647b      	str	r3, [r7, #68]	; 0x44

                /* Do it again in case previous operation generates an overflow.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 8007e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e72:	0c1a      	lsrs	r2, r3, #16
 8007e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	4413      	add	r3, r2
 8007e7a:	647b      	str	r3, [r7, #68]	; 0x44

                /* Place the checksum into the first header word.  */
                igmp_header_ptr -> nx_igmp_header_word_0 =  igmp_header_ptr -> nx_igmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e82:	43db      	mvns	r3, r3
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	431a      	orrs	r2, r3
 8007e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8a:	601a      	str	r2, [r3, #0]

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 8007e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	ba1a      	rev	r2, r3
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 8007e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	ba1a      	rev	r2, r3
 8007e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9e:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8007eac:	2301      	movs	r3, #1
 8007eae:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007eb2:	e003      	b.n	8007ebc <_nx_ip_packet_checksum_compute+0x300>
        }
#endif

        default:
            /* Unsupported protocol. */
            is_done = NX_TRUE;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007eba:	bf00      	nop
    while (!is_done)
 8007ebc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f43f ae8a 	beq.w	8007bda <_nx_ip_packet_checksum_compute+0x1e>
        }
    }


    /* Restore origianl prepend_ptr. */
    packet_ptr -> nx_packet_prepend_ptr = org_prepend_ptr;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eca:	609a      	str	r2, [r3, #8]
    return;
 8007ecc:	bf00      	nop
}
 8007ece:	3758      	adds	r7, #88	; 0x58
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <_nx_ip_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007ede:	f3ef 8310 	mrs	r3, PRIMASK
 8007ee2:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007ee4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007ee6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007ee8:	b672      	cpsid	i
    return(int_posture);
 8007eea:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8007eec:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if the deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_deferred_received_packet_head)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d011      	beq.n	8007f1c <_nx_ip_packet_deferred_receive+0x48>
    {

        /* Not empty, just place the packet at the end of the queue.  */
        (ip_ptr -> nx_ip_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	2200      	movs	r2, #0
 8007f06:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	f383 8810 	msr	PRIMASK, r3
}
 8007f1a:	e019      	b.n	8007f50 <_nx_ip_packet_deferred_receive+0x7c>
    {

        /* Empty deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the deferred processing
           queue.  */
        ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        packet_ptr -> nx_packet_queue_next =             NX_NULL;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	61da      	str	r2, [r3, #28]
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f383 8810 	msr	PRIMASK, r3
}
 8007f3c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the IP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RECEIVE_EVENT, TX_OR);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007f44:	2200      	movs	r2, #0
 8007f46:	2108      	movs	r1, #8
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f004 f97d 	bl	800c248 <_tx_event_flags_set>
    }
}
 8007f4e:	bf00      	nop
 8007f50:	bf00      	nop
 8007f52:	3720      	adds	r7, #32
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <_nx_ip_packet_receive>:
/*                                            added new ip filter,        */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
UCHAR version_byte;


#ifndef NX_DISABLE_IP_INFO
    /* Increment the IP packet count.  */
    ip_ptr -> nx_ip_total_packets_received++;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	61da      	str	r2, [r3, #28]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* If packet_ptr -> nx_packet_interface_ptr is not set, stamp the packet with interface[0].
       Legacy Ethernet drivers do not stamp incoming packets. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d104      	bne.n	8007f7e <_nx_ip_packet_receive+0x26>
    {
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[0]);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f503 62e4 	add.w	r2, r3, #1824	; 0x720
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    version_byte =  *(packet_ptr -> nx_packet_prepend_ptr);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	73fb      	strb	r3, [r7, #15]

    /* Check the version number */
    ip_version = (version_byte >> 4);
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	091b      	lsrs	r3, r3, #4
 8007f8a:	73bb      	strb	r3, [r7, #14]

    packet_ptr -> nx_packet_ip_version = ip_version;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	7bba      	ldrb	r2, [r7, #14]
 8007f90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	689a      	ldr	r2, [r3, #8]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* NX_ENABLE_IP_PACKET_FILTER */

#ifndef NX_DISABLE_IPV4

    /* Process the packet according to IP version. */
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	d10b      	bne.n	8007fba <_nx_ip_packet_receive+0x62>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d006      	beq.n	8007fba <_nx_ip_packet_receive+0x62>
    {

        /* Call the IPv4 packet handler. */
        (ip_ptr -> nx_ipv4_packet_receive)(ip_ptr, packet_ptr);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	4798      	blx	r3
        return;
 8007fb8:	e00d      	b.n	8007fd6 <_nx_ip_packet_receive+0x7e>
        not defined.  In this case, the packet is reclaimed. */

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP invalid packet error.  */
    ip_ptr -> nx_ip_invalid_packets++;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment the IP receive packets dropped count.  */
    ip_ptr -> nx_ip_receive_packets_dropped++;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc8:	1c5a      	adds	r2, r3, #1
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

    _nx_packet_release(packet_ptr);
 8007fce:	6838      	ldr	r0, [r7, #0]
 8007fd0:	f001 fad6 	bl	8009580 <_nx_packet_release>

    return;
 8007fd4:	bf00      	nop
}
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <_nx_ip_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                         ULONG destination_ip, ULONG type_of_service, ULONG time_to_live,
                         ULONG protocol, ULONG fragment, ULONG next_hop_address)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af04      	add	r7, sp, #16
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
 8007fe8:	603b      	str	r3, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_IP_INFO

    /* Increment the total send requests counter.  */
    ip_ptr -> nx_ip_total_packet_send_requests++;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	1c5a      	adds	r2, r3, #1
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	611a      	str	r2, [r3, #16]
#endif

    /* Make sure the packet interface is set. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d114      	bne.n	8008026 <_nx_ip_packet_send+0x4a>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_transmit_packets++;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008000:	1c5a      	adds	r2, r3, #1
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

        /* Prepend the IP header to the packet.  First, make room for the IP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f1a3 0214 	sub.w	r2, r3, #20
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	609a      	str	r2, [r3, #8]

        /* Increase the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008016:	f103 0214 	add.w	r2, r3, #20
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Release the packet.  */
        _nx_packet_transmit_release(packet_ptr);
 800801e:	68b8      	ldr	r0, [r7, #8]
 8008020:	f001 fb66 	bl	80096f0 <_nx_packet_transmit_release>

        /* Return... nothing more can be done!  */
        return;
 8008024:	e03b      	b.n	800809e <_nx_ip_packet_send+0xc2>
    if (!is_hw_processed)
#endif /* NX_IPSEC_ENABLE  */
    {

        /* Add the IP Header to the packet.  */
        _nx_ip_header_add(ip_ptr, packet_ptr, packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_address,
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802a:	695a      	ldr	r2, [r3, #20]
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	9303      	str	r3, [sp, #12]
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	9302      	str	r3, [sp, #8]
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68b9      	ldr	r1, [r7, #8]
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f7ff fb8f 	bl	8007764 <_nx_ip_header_add>
    }

#endif

    /* If the next hop address is null, indicates the specified interface is unreached.  */
    if (next_hop_address == 0)
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	2b00      	cmp	r3, #0
 800804a:	d120      	bne.n	800808e <_nx_ip_packet_send+0xb2>
    {

        /* Check whether the forward feature is enabled.  */
        if (ip_ptr -> nx_ip_forward_packet_process)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00b      	beq.n	800806e <_nx_ip_packet_send+0x92>
        {

            /* Initialize the interface.  */
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	2200      	movs	r2, #0
 800805a:	631a      	str	r2, [r3, #48]	; 0x30

            /* Figure out the best interface to send the packet on. */
            _nx_ip_route_find(ip_ptr, destination_ip, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr, &next_hop_address);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 f82d 	bl	80080c8 <_nx_ip_route_find>
        }

        /* Make sure the packet interface and next hop address are set. */
        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        if ((packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL) || (next_hop_address == 0))
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008072:	2b00      	cmp	r3, #0
 8008074:	d002      	beq.n	800807c <_nx_ip_packet_send+0xa0>
 8008076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008078:	2b00      	cmp	r3, #0
 800807a:	d108      	bne.n	800808e <_nx_ip_packet_send+0xb2>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_transmit_packets++;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

            /* Release the packet.  */
            _nx_packet_transmit_release(packet_ptr);
 8008086:	68b8      	ldr	r0, [r7, #8]
 8008088:	f001 fb32 	bl	80096f0 <_nx_packet_transmit_release>

            /* Return... nothing more can be done!  */
            return;
 800808c:	e007      	b.n	800809e <_nx_ip_packet_send+0xc2>
        }
    }

    /* Directly send the packet.  */
    _nx_ip_driver_packet_send(ip_ptr, packet_ptr, destination_ip, fragment, next_hop_address);
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	68b9      	ldr	r1, [r7, #8]
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f7ff f941 	bl	8007320 <_nx_ip_driver_packet_send>
}
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <_nx_ip_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_periodic_timer_entry(ULONG ip_address)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_PERIODIC_EVENT, TX_OR);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80080b6:	2200      	movs	r2, #0
 80080b8:	2101      	movs	r1, #1
 80080ba:	4618      	mov	r0, r3
 80080bc:	f004 f8c4 	bl	800c248 <_tx_event_flags_set>
}
 80080c0:	bf00      	nop
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <_nx_ip_route_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _nx_ip_route_find(NX_IP *ip_ptr, ULONG destination_address, NX_INTERFACE **ip_interface_ptr, ULONG *next_hop_address)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	603b      	str	r3, [r7, #0]

NX_INTERFACE *interface_ptr;
ULONG         i;

    /* Initialize the next hop address. */
    *next_hop_address = 0;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2200      	movs	r2, #0
 80080da:	601a      	str	r2, [r3, #0]

    /* Determine if the destination_address is multicast or directed broadcast. */
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80080e2:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80080e6:	d003      	beq.n	80080f0 <_nx_ip_route_find+0x28>
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ee:	d132      	bne.n	8008156 <_nx_ip_route_find+0x8e>
        (destination_address  == NX_IP_LIMITED_BROADCAST))
    {

        *next_hop_address = destination_address;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	601a      	str	r2, [r3, #0]

        /* If the caller did not set the ip_interface value, find a link enabled 
           interface, starting with the primary interface, for transmission.  */
        if (*ip_interface_ptr == NX_NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d122      	bne.n	8008144 <_nx_ip_route_find+0x7c>
        {

            /* Find an interface whose link is up. */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80080fe:	2300      	movs	r3, #0
 8008100:	617b      	str	r3, [r7, #20]
 8008102:	e01b      	b.n	800813c <_nx_ip_route_find+0x74>
            {

                if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up)
 8008104:	68f9      	ldr	r1, [r7, #12]
 8008106:	697a      	ldr	r2, [r7, #20]
 8008108:	4613      	mov	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	440b      	add	r3, r1
 8008112:	f203 7326 	addw	r3, r3, #1830	; 0x726
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00c      	beq.n	8008136 <_nx_ip_route_find+0x6e>
                {
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	4613      	mov	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	441a      	add	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	601a      	str	r2, [r3, #0]
                    return(NX_SUCCESS);
 8008132:	2300      	movs	r3, #0
 8008134:	e13d      	b.n	80083b2 <_nx_ip_route_find+0x2ea>
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	3301      	adds	r3, #1
 800813a:	617b      	str	r3, [r7, #20]
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d0e0      	beq.n	8008104 <_nx_ip_route_find+0x3c>
 8008142:	e006      	b.n	8008152 <_nx_ip_route_find+0x8a>
                }
            }
        }
        /* If the specified interface is up, return success. */
        else if ((*ip_interface_ptr) -> nx_interface_link_up)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	799b      	ldrb	r3, [r3, #6]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <_nx_ip_route_find+0x8a>
        {
            return(NX_SUCCESS);
 800814e:	2300      	movs	r3, #0
 8008150:	e12f      	b.n	80083b2 <_nx_ip_route_find+0x2ea>
        }

        /* No available interface. */
        return(NX_IP_ADDRESS_ERROR);
 8008152:	2321      	movs	r3, #33	; 0x21
 8008154:	e12d      	b.n	80083b2 <_nx_ip_route_find+0x2ea>
    }

    /* Search through the interfaces associated with the IP instance,
       check if the the destination address is one of the local interface addresses. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008156:	2300      	movs	r3, #0
 8008158:	617b      	str	r3, [r7, #20]
 800815a:	e02a      	b.n	80081b2 <_nx_ip_route_find+0xea>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	4613      	mov	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	4413      	add	r3, r2
 800816e:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	791b      	ldrb	r3, [r3, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d019      	beq.n	80081ac <_nx_ip_route_find+0xe4>
            (interface_ptr -> nx_interface_link_up) &&
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 800817c:	2b00      	cmp	r3, #0
 800817e:	d015      	beq.n	80081ac <_nx_ip_route_find+0xe4>
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	695b      	ldr	r3, [r3, #20]
            (interface_ptr -> nx_interface_link_up) &&
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	429a      	cmp	r2, r3
 8008188:	d110      	bne.n	80081ac <_nx_ip_route_find+0xe4>
            ((*ip_interface_ptr == NX_NULL) ||
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 800818e:	2b00      	cmp	r3, #0
 8008190:	d004      	beq.n	800819c <_nx_ip_route_find+0xd4>
             (*ip_interface_ptr == interface_ptr)))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
            ((*ip_interface_ptr == NX_NULL) ||
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	429a      	cmp	r2, r3
 800819a:	d107      	bne.n	80081ac <_nx_ip_route_find+0xe4>
        {

            /* Yes, use the entry information for interface and next hop. */
            *ip_interface_ptr = interface_ptr;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	601a      	str	r2, [r3, #0]
            *next_hop_address = destination_address;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 80081a8:	2300      	movs	r3, #0
 80081aa:	e102      	b.n	80083b2 <_nx_ip_route_find+0x2ea>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	3301      	adds	r3, #1
 80081b0:	617b      	str	r3, [r7, #20]
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d0d1      	beq.n	800815c <_nx_ip_route_find+0x94>

#endif /* NX_ENABLE_IP_STATIC_ROUTING */

    /* Search through the interfaces associated with the IP instance,
       check if the entry exists. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 80081b8:	2300      	movs	r3, #0
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	e036      	b.n	800822c <_nx_ip_route_find+0x164>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	4613      	mov	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4413      	add	r3, r2
 80081c6:	011b      	lsls	r3, r3, #4
 80081c8:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	791b      	ldrb	r3, [r3, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d025      	beq.n	8008226 <_nx_ip_route_find+0x15e>
            (interface_ptr -> nx_interface_link_up) &&
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d021      	beq.n	8008226 <_nx_ip_route_find+0x15e>
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	699a      	ldr	r2, [r3, #24]
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	401a      	ands	r2, r3
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	69db      	ldr	r3, [r3, #28]
            (interface_ptr -> nx_interface_link_up) &&
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d119      	bne.n	8008226 <_nx_ip_route_find+0x15e>
        {

            /* Yes, use the entry information for interface and next hop. */
            if (*ip_interface_ptr == NX_NULL)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d103      	bne.n	8008202 <_nx_ip_route_find+0x13a>
            {
                *ip_interface_ptr = interface_ptr;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	e00b      	b.n	800821a <_nx_ip_route_find+0x152>
            }
            /* Match loopback interface.  */
            /* Suppress constant value, since "NX_MAX_IP_INTERFACES" can be redefined. */
#if (NX_MAX_IP_INTERFACES == (NX_MAX_PHYSICAL_INTERFACES + 1))
            else if (i == NX_MAX_PHYSICAL_INTERFACES)
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d103      	bne.n	8008210 <_nx_ip_route_find+0x148>
            {
                *ip_interface_ptr = interface_ptr;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	e004      	b.n	800821a <_nx_ip_route_find+0x152>
            }
#endif
            else if (*ip_interface_ptr != interface_ptr)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	429a      	cmp	r2, r3
 8008218:	d104      	bne.n	8008224 <_nx_ip_route_find+0x15c>
            {
                continue;
            }

            *next_hop_address = destination_address;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 8008220:	2300      	movs	r3, #0
 8008222:	e0c6      	b.n	80083b2 <_nx_ip_route_find+0x2ea>
                continue;
 8008224:	bf00      	nop
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	3301      	adds	r3, #1
 800822a:	617b      	str	r3, [r7, #20]
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d9c5      	bls.n	80081be <_nx_ip_route_find+0xf6>
        }
    }

    /* Search the interfaces for IPv4 Link-Local Address according to RFC3927, section2.6.  */
    /* Determine if destination addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if ((destination_address & 0xFFFF0000) == 0xA9FE0000)
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	0c1b      	lsrs	r3, r3, #16
 8008236:	041b      	lsls	r3, r3, #16
 8008238:	4a61      	ldr	r2, [pc, #388]	; (80083c0 <_nx_ip_route_find+0x2f8>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d143      	bne.n	80082c6 <_nx_ip_route_find+0x1fe>
    {

        /* Yes, check if the interface is set.  */
        if (*ip_interface_ptr)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00e      	beq.n	8008264 <_nx_ip_route_find+0x19c>
        {

            /* Determine if the interface is valid.  */
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	791b      	ldrb	r3, [r3, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d03a      	beq.n	80082c6 <_nx_ip_route_find+0x1fe>
                ((*ip_interface_ptr) -> nx_interface_link_up))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	799b      	ldrb	r3, [r3, #6]
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 8008256:	2b00      	cmp	r3, #0
 8008258:	d035      	beq.n	80082c6 <_nx_ip_route_find+0x1fe>
            {

                /* Set the next hop address.  */
                *next_hop_address = destination_address;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 8008260:	2300      	movs	r3, #0
 8008262:	e0a6      	b.n	80083b2 <_nx_ip_route_find+0x2ea>
        }
        else
        {

            /* Search through the interfaces associated with the IP instance, set the inteface as first valid interface.  */
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8008264:	2300      	movs	r3, #0
 8008266:	617b      	str	r3, [r7, #20]
 8008268:	e02a      	b.n	80082c0 <_nx_ip_route_find+0x1f8>
            {

                /* Check for a valid interface that the address is link-local address.  */
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800826a:	68f9      	ldr	r1, [r7, #12]
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	4613      	mov	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	011b      	lsls	r3, r3, #4
 8008276:	440b      	add	r3, r1
 8008278:	f203 7324 	addw	r3, r3, #1828	; 0x724
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d01b      	beq.n	80082ba <_nx_ip_route_find+0x1f2>
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_up))
 8008282:	68f9      	ldr	r1, [r7, #12]
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	4613      	mov	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	440b      	add	r3, r1
 8008290:	f203 7326 	addw	r3, r3, #1830	; 0x726
 8008294:	781b      	ldrb	r3, [r3, #0]
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00f      	beq.n	80082ba <_nx_ip_route_find+0x1f2>
                {

                    /* Yes, use the entry information for interface and next hop. */
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	4613      	mov	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	011b      	lsls	r3, r3, #4
 80082a4:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	441a      	add	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	601a      	str	r2, [r3, #0]
                    *next_hop_address = destination_address;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	601a      	str	r2, [r3, #0]

                    return(NX_SUCCESS);
 80082b6:	2300      	movs	r3, #0
 80082b8:	e07b      	b.n	80083b2 <_nx_ip_route_find+0x2ea>
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	3301      	adds	r3, #1
 80082be:	617b      	str	r3, [r7, #20]
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d9d1      	bls.n	800826a <_nx_ip_route_find+0x1a2>
            }
        }
    }

    /* Does the IP instance have a gateway? */
    if ((ip_ptr -> nx_ip_gateway_address) &&
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d02b      	beq.n	8008326 <_nx_ip_route_find+0x25e>
        (ip_ptr -> nx_ip_gateway_interface) &&
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	68db      	ldr	r3, [r3, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d027      	beq.n	8008326 <_nx_ip_route_find+0x25e>
        (ip_ptr -> nx_ip_gateway_interface -> nx_interface_link_up))
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	799b      	ldrb	r3, [r3, #6]
        (ip_ptr -> nx_ip_gateway_interface) &&
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d022      	beq.n	8008326 <_nx_ip_route_find+0x25e>
    {

        /* Get the interface. */
        interface_ptr = ip_ptr -> nx_ip_gateway_interface;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	613b      	str	r3, [r7, #16]

        /* Yes, is gateway address still reachable? */
        if (interface_ptr -> nx_interface_ip_network !=
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	69da      	ldr	r2, [r3, #28]
            (ip_ptr -> nx_ip_gateway_address &
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6899      	ldr	r1, [r3, #8]
             interface_ptr -> nx_interface_ip_network_mask))
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	699b      	ldr	r3, [r3, #24]
            (ip_ptr -> nx_ip_gateway_address &
 80082f2:	400b      	ands	r3, r1
        if (interface_ptr -> nx_interface_ip_network !=
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d001      	beq.n	80082fc <_nx_ip_route_find+0x234>
        {
            return(NX_IP_ADDRESS_ERROR);
 80082f8:	2321      	movs	r3, #33	; 0x21
 80082fa:	e05a      	b.n	80083b2 <_nx_ip_route_find+0x2ea>
        }

        /* Use the gateway as default. */
        if (*ip_interface_ptr == NX_NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d103      	bne.n	800830c <_nx_ip_route_find+0x244>
        {
            *ip_interface_ptr = interface_ptr;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	601a      	str	r2, [r3, #0]
 800830a:	e006      	b.n	800831a <_nx_ip_route_find+0x252>
        }
        else if (*ip_interface_ptr != interface_ptr)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	429a      	cmp	r2, r3
 8008314:	d001      	beq.n	800831a <_nx_ip_route_find+0x252>
        {
            return(NX_IP_ADDRESS_ERROR);
 8008316:	2321      	movs	r3, #33	; 0x21
 8008318:	e04b      	b.n	80083b2 <_nx_ip_route_find+0x2ea>
        }

        *next_hop_address = ip_ptr -> nx_ip_gateway_address;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	689a      	ldr	r2, [r3, #8]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	601a      	str	r2, [r3, #0]

        return(NX_SUCCESS);
 8008322:	2300      	movs	r3, #0
 8008324:	e045      	b.n	80083b2 <_nx_ip_route_find+0x2ea>
    }

    /* Determine if source addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if (*ip_interface_ptr)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d016      	beq.n	800835c <_nx_ip_route_find+0x294>
    {

        /* Determine if the interface is valid and the address of interface is link-local address.  */
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	791b      	ldrb	r3, [r3, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d03b      	beq.n	80083b0 <_nx_ip_route_find+0x2e8>
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	799b      	ldrb	r3, [r3, #6]
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800833e:	2b00      	cmp	r3, #0
 8008340:	d036      	beq.n	80083b0 <_nx_ip_route_find+0x2e8>
            (((*ip_interface_ptr) -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	0c1b      	lsrs	r3, r3, #16
 800834a:	041b      	lsls	r3, r3, #16
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 800834c:	4a1c      	ldr	r2, [pc, #112]	; (80083c0 <_nx_ip_route_find+0x2f8>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d12e      	bne.n	80083b0 <_nx_ip_route_find+0x2e8>
        {

            /* Set the next hop address.  */
            *next_hop_address = destination_address;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 8008358:	2300      	movs	r3, #0
 800835a:	e02a      	b.n	80083b2 <_nx_ip_route_find+0x2ea>
    else
    {

        /* Search through the interfaces associated with the IP instance,
           check if interface is valid and the address of interface is link-local address. */
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800835c:	2300      	movs	r3, #0
 800835e:	617b      	str	r3, [r7, #20]
 8008360:	e023      	b.n	80083aa <_nx_ip_route_find+0x2e2>
        {

            /* Use a local variable for convenience. */
            interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	4613      	mov	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	011b      	lsls	r3, r3, #4
 800836c:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	4413      	add	r3, r2
 8008374:	613b      	str	r3, [r7, #16]

            /* Check for a valid interface that the address is link-local address.  */
            if ((interface_ptr -> nx_interface_valid) &&
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	791b      	ldrb	r3, [r3, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d012      	beq.n	80083a4 <_nx_ip_route_find+0x2dc>
                (interface_ptr -> nx_interface_link_up) &&
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	799b      	ldrb	r3, [r3, #6]
            if ((interface_ptr -> nx_interface_valid) &&
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00e      	beq.n	80083a4 <_nx_ip_route_find+0x2dc>
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	0c1b      	lsrs	r3, r3, #16
 800838c:	041b      	lsls	r3, r3, #16
                (interface_ptr -> nx_interface_link_up) &&
 800838e:	4a0c      	ldr	r2, [pc, #48]	; (80083c0 <_nx_ip_route_find+0x2f8>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d107      	bne.n	80083a4 <_nx_ip_route_find+0x2dc>
            {

                /* Yes, use the entry information for interface and next hop. */
                *ip_interface_ptr = interface_ptr;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	601a      	str	r2, [r3, #0]
                *next_hop_address = destination_address;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 80083a0:	2300      	movs	r3, #0
 80083a2:	e006      	b.n	80083b2 <_nx_ip_route_find+0x2ea>
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	3301      	adds	r3, #1
 80083a8:	617b      	str	r3, [r7, #20]
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d9d8      	bls.n	8008362 <_nx_ip_route_find+0x29a>
        }
    }

    /* Cannot find a proper way to transmit this packet.
       Return the error status. */
    return(NX_IP_ADDRESS_ERROR);
 80083b0:	2321      	movs	r3, #33	; 0x21
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	371c      	adds	r7, #28
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	a9fe0000 	.word	0xa9fe0000

080083c4 <_nx_ip_thread_entry>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_thread_entry(ULONG ip_ptr_value)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b096      	sub	sp, #88	; 0x58
 80083c8:	af02      	add	r7, sp, #8
 80083ca:	6078      	str	r0, [r7, #4]
NXD_IPV6_ADDRESS *interface_ipv6_address;
#endif /* FEATURE_NX_IPV6 */


    /* Setup IP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_ptr_value)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain the IP internal mutex before calling the driver.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80083d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083d2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80083d6:	f04f 31ff 	mov.w	r1, #4294967295
 80083da:	4618      	mov	r0, r3
 80083dc:	f004 facc 	bl	800c978 <_tx_mutex_get>

    /* Set the IP initialization done flag to true.  */
    ip_ptr -> nx_ip_initialize_done =  NX_TRUE;
 80083e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083e2:	2201      	movs	r2, #1
 80083e4:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    /* Loop through all physical interfaces to initialize and enable the hardware. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80083e8:	2300      	movs	r3, #0
 80083ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083ec:	e070      	b.n	80084d0 <_nx_ip_thread_entry+0x10c>
    {

        /* Is this a valid interface with a link driver associated with it? */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) && (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry))
 80083ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083f2:	4613      	mov	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	011b      	lsls	r3, r3, #4
 80083fa:	440b      	add	r3, r1
 80083fc:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d061      	beq.n	80084ca <_nx_ip_thread_entry+0x106>
 8008406:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008408:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800840a:	4613      	mov	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	011b      	lsls	r3, r3, #4
 8008412:	440b      	add	r3, r1
 8008414:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d055      	beq.n	80084ca <_nx_ip_thread_entry+0x106>
        {

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            /* Clear capability flag first.  */
            ip_ptr -> nx_ip_interface[i].nx_interface_capability_flag = 0;
 800841e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008420:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008422:	4613      	mov	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	011b      	lsls	r3, r3, #4
 800842a:	440b      	add	r3, r1
 800842c:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8008430:	2200      	movs	r2, #0
 8008432:	601a      	str	r2, [r3, #0]
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


            ip_ptr -> nx_ip_interface[i].nx_interface_link_up = NX_TRUE;
 8008434:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008438:	4613      	mov	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	011b      	lsls	r3, r3, #4
 8008440:	440b      	add	r3, r1
 8008442:	f203 7326 	addw	r3, r3, #1830	; 0x726
 8008446:	2201      	movs	r2, #1
 8008448:	701a      	strb	r2, [r3, #0]

            /* Yes; attach the interface to the device. */
            driver_request.nx_ip_driver_ptr        =  ip_ptr;
 800844a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800844c:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command    =  NX_LINK_INTERFACE_ATTACH;
 800844e:	2313      	movs	r3, #19
 8008450:	613b      	str	r3, [r7, #16]
            driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[i]);
 8008452:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008454:	4613      	mov	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8008460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008462:	4413      	add	r3, r2
 8008464:	62fb      	str	r3, [r7, #44]	; 0x2c
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8008466:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008468:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800846a:	4613      	mov	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	011b      	lsls	r3, r3, #4
 8008472:	440b      	add	r3, r1
 8008474:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f107 0210 	add.w	r2, r7, #16
 800847e:	4610      	mov	r0, r2
 8008480:	4798      	blx	r3
            /* Call the link driver to initialize the hardware. Among other
               responsibilities, the driver is required to provide the
               Maximum Transfer Unit (MTU) for the physical layer. The MTU
               should represent the actual physical layer transfer size
               less the physical layer headers and trailers.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 8008482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008484:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_INITIALIZE;
 8008486:	2301      	movs	r3, #1
 8008488:	613b      	str	r3, [r7, #16]
               When an IP instance is created, the first interface (nx_ip_interface[0]) is configured using parameters
               provided in the IP create call.

               When IP thread runs, it invokes the first interface link driver for link initialization.
             */
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800848a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800848c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800848e:	4613      	mov	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	011b      	lsls	r3, r3, #4
 8008496:	440b      	add	r3, r1
 8008498:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f107 0210 	add.w	r2, r7, #16
 80084a2:	4610      	mov	r0, r2
 80084a4:	4798      	blx	r3

            /* Call the link driver again to enable the interface.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 80084a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084a8:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_ENABLE;
 80084aa:	2302      	movs	r3, #2
 80084ac:	613b      	str	r3, [r7, #16]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_LINK_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80084ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084b2:	4613      	mov	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	011b      	lsls	r3, r3, #4
 80084ba:	440b      	add	r3, r1
 80084bc:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f107 0210 	add.w	r2, r7, #16
 80084c6:	4610      	mov	r0, r2
 80084c8:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80084ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084cc:	3301      	adds	r3, #1
 80084ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d08b      	beq.n	80083ee <_nx_ip_thread_entry+0x2a>
    /* Loop to process events for this IP instance.  */
    for (;;)
    {

        /* Release the IP internal mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80084d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80084dc:	4618      	mov	r0, r3
 80084de:	f004 fcc3 	bl	800ce68 <_tx_mutex_put>

        /* Pickup IP event flags.  */
        tx_event_flags_get(&(ip_ptr -> nx_ip_events), NX_IP_ALL_EVENTS, TX_OR_CLEAR, &ip_events, TX_WAIT_FOREVER);
 80084e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084e4:	f503 7012 	add.w	r0, r3, #584	; 0x248
 80084e8:	f107 030c 	add.w	r3, r7, #12
 80084ec:	f04f 32ff 	mov.w	r2, #4294967295
 80084f0:	9200      	str	r2, [sp, #0]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f04f 31ff 	mov.w	r1, #4294967295
 80084f8:	f003 fdbc 	bl	800c074 <_tx_event_flags_get>

        /* Obtain the IP internal mutex before processing the IP event.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80084fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084fe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008502:	f04f 31ff 	mov.w	r1, #4294967295
 8008506:	4618      	mov	r0, r3
 8008508:	f004 fa36 	bl	800c978 <_tx_mutex_get>
        }
#endif

        /* Check for an IP receive packet event.  */
        /*lint -e{644} suppress variable might not be initialized, since "ip_events" was initialized by tx_event_flags_get. */
        if (ip_events & NX_IP_RECEIVE_EVENT)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	2b00      	cmp	r3, #0
 8008514:	d031      	beq.n	800857a <_nx_ip_thread_entry+0x1b6>
        {

            /* Loop to process all deferred packet requests.  */
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 8008516:	e023      	b.n	8008560 <_nx_ip_thread_entry+0x19c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008518:	f3ef 8310 	mrs	r3, PRIMASK
 800851c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8008520:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8008522:	b672      	cpsid	i
    return(int_posture);
 8008524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
            {

                /* Remove the first packet and process it!  */

                /* Disable interrupts.  */
                TX_DISABLE
 8008526:	643b      	str	r3, [r7, #64]	; 0x40

                /* Pickup the first packet.  */
                packet_ptr =  ip_ptr -> nx_ip_deferred_received_packet_head;
 8008528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800852a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800852e:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Move the head pointer to the next packet.  */
                ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 8008530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008532:	69da      	ldr	r2, [r3, #28]
 8008534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008536:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

                /* Check for end of deferred processing queue.  */
                if (ip_ptr -> nx_ip_deferred_received_packet_head == NX_NULL)
 800853a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800853c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008540:	2b00      	cmp	r3, #0
 8008542:	d103      	bne.n	800854c <_nx_ip_thread_entry+0x188>
                {

                    /* Yes, the queue is empty.  Set the tail pointer to NULL.  */
                    ip_ptr -> nx_ip_deferred_received_packet_tail =  NX_NULL;
 8008544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008546:	2200      	movs	r2, #0
 8008548:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 800854c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800854e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008552:	f383 8810 	msr	PRIMASK, r3
}
 8008556:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call the actual IP packet receive function.  */
                _nx_ip_packet_receive(ip_ptr, packet_ptr);
 8008558:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800855a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800855c:	f7ff fcfc 	bl	8007f58 <_nx_ip_packet_receive>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 8008560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008562:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1d6      	bne.n	8008518 <_nx_ip_thread_entry+0x154>
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_RECEIVE_EVENT);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f023 0308 	bic.w	r3, r3, #8
 8008570:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 8131 	beq.w	80087dc <_nx_ip_thread_entry+0x418>
                continue;
            }
        }

        /* Check for a TCP message event.  */
        if (ip_events & NX_IP_TCP_EVENT)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00c      	beq.n	800859e <_nx_ip_thread_entry+0x1da>
        {

            /* Process the TCP packet queue.  */
            (ip_ptr -> nx_ip_tcp_queue_process)(ip_ptr);
 8008584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008586:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800858a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800858c:	4798      	blx	r3

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_TCP_EVENT);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008594:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 8121 	beq.w	80087e0 <_nx_ip_thread_entry+0x41c>
                continue;
            }
        }

        /* Check for a fast TCP event.  */
        if (ip_events & NX_IP_FAST_EVENT)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d011      	beq.n	80085cc <_nx_ip_thread_entry+0x208>
            }

#endif /* FEATURE_NX_IPV6 */

            /* Process the fast TCP processing.  */
            if (ip_ptr -> nx_ip_tcp_fast_periodic_processing)
 80085a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085aa:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d004      	beq.n	80085bc <_nx_ip_thread_entry+0x1f8>
            {
                (ip_ptr -> nx_ip_tcp_fast_periodic_processing)(ip_ptr);
 80085b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085b4:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 80085b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80085ba:	4798      	blx	r3
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_FAST_EVENT);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085c2:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 810c 	beq.w	80087e4 <_nx_ip_thread_entry+0x420>
                continue;
            }
        }

        /* Check for a periodic events.  */
        if (ip_events & NX_IP_PERIODIC_EVENT)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d039      	beq.n	800864a <_nx_ip_thread_entry+0x286>
        {

#ifndef NX_DISABLE_IPV4
            /* Process the ARP periodic update, if ARP has been enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 80085d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085d8:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d004      	beq.n	80085ea <_nx_ip_thread_entry+0x226>
            {
                (ip_ptr -> nx_ip_arp_periodic_update)(ip_ptr);
 80085e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085e2:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 80085e6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80085e8:	4798      	blx	r3
            }

            /* Process the RARP periodic update, if RARP has been enabled.  */
            if (ip_ptr -> nx_ip_rarp_periodic_update)
 80085ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ec:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d004      	beq.n	80085fe <_nx_ip_thread_entry+0x23a>
            {
                (ip_ptr -> nx_ip_rarp_periodic_update)(ip_ptr);
 80085f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085f6:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 80085fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80085fc:	4798      	blx	r3
            }

            /* Process IGMP periodic events, if IGMP has been enabled.  */
            if (ip_ptr -> nx_ip_igmp_periodic_processing)
 80085fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008600:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8008604:	2b00      	cmp	r3, #0
 8008606:	d004      	beq.n	8008612 <_nx_ip_thread_entry+0x24e>
            {
                (ip_ptr -> nx_ip_igmp_periodic_processing)(ip_ptr);
 8008608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800860a:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 800860e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008610:	4798      	blx	r3
            }
#endif /* !NX_DISABLE_IPV4  */

            /* Process IP fragmentation timeouts, if IP fragmenting has been
               enabled.  */
            if (ip_ptr -> nx_ip_fragment_timeout_check)
 8008612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008614:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d004      	beq.n	8008626 <_nx_ip_thread_entry+0x262>
            {
                (ip_ptr -> nx_ip_fragment_timeout_check)(ip_ptr);
 800861c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800861e:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 8008622:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008624:	4798      	blx	r3
            }

            /* Process TCP periodic events, if TCP has been enabled.  */
            if (ip_ptr -> nx_ip_tcp_periodic_processing)
 8008626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008628:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800862c:	2b00      	cmp	r3, #0
 800862e:	d004      	beq.n	800863a <_nx_ip_thread_entry+0x276>
            {
                (ip_ptr -> nx_ip_tcp_periodic_processing)(ip_ptr);
 8008630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008632:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8008636:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008638:	4798      	blx	r3
            }
#endif /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

#endif /* FEATURE_NX_IPV6 */
            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_PERIODIC_EVENT);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f023 0301 	bic.w	r3, r3, #1
 8008640:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 80cf 	beq.w	80087e8 <_nx_ip_thread_entry+0x424>
        }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Check for an ARP receive packet event.  */
        if ((ip_events & NX_IP_ARP_REC_EVENT) && (ip_ptr -> nx_ip_arp_queue_process))
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f003 0310 	and.w	r3, r3, #16
 8008650:	2b00      	cmp	r3, #0
 8008652:	d009      	beq.n	8008668 <_nx_ip_thread_entry+0x2a4>
 8008654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008656:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 800865a:	2b00      	cmp	r3, #0
 800865c:	d004      	beq.n	8008668 <_nx_ip_thread_entry+0x2a4>
        {

            /* Process the ARP queue.  */
            (ip_ptr -> nx_ip_arp_queue_process)(ip_ptr);
 800865e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008660:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8008664:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008666:	4798      	blx	r3
        }

        /* Check for an RARP receive packet event.  */
        if ((ip_events & NX_IP_RARP_REC_EVENT) && (ip_ptr -> nx_ip_rarp_queue_process))
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f003 0320 	and.w	r3, r3, #32
 800866e:	2b00      	cmp	r3, #0
 8008670:	d009      	beq.n	8008686 <_nx_ip_thread_entry+0x2c2>
 8008672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008674:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 8008678:	2b00      	cmp	r3, #0
 800867a:	d004      	beq.n	8008686 <_nx_ip_thread_entry+0x2c2>
        {

            /* Process the RARP queue.  */
            (ip_ptr -> nx_ip_rarp_queue_process)(ip_ptr);
 800867c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800867e:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 8008682:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008684:	4798      	blx	r3
        }

        /* Check for an IGMP message event.  */
        if (ip_events & NX_IP_IGMP_EVENT)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868c:	2b00      	cmp	r3, #0
 800868e:	d004      	beq.n	800869a <_nx_ip_thread_entry+0x2d6>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_igmp_queue_process)(ip_ptr);
 8008690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008692:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 8008696:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008698:	4798      	blx	r3
        }

        /* Check for an IGMP enable event.  */
        if (ip_events & NX_IP_IGMP_ENABLE_EVENT)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d035      	beq.n	8008710 <_nx_ip_thread_entry+0x34c>
        {

            /* Call the associated driver for this IP instance to register the "all hosts"
               multicast address.  */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80086a4:	2300      	movs	r3, #0
 80086a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086a8:	e02f      	b.n	800870a <_nx_ip_thread_entry+0x346>
            {
                /* Enable the hardware for IGMP for all valid interfaces. */
                if (ip_ptr -> nx_ip_interface[i].nx_interface_valid)
 80086aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086ae:	4613      	mov	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	011b      	lsls	r3, r3, #4
 80086b6:	440b      	add	r3, r1
 80086b8:	f203 7324 	addw	r3, r3, #1828	; 0x724
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d020      	beq.n	8008704 <_nx_ip_thread_entry+0x340>
                {
                    driver_request.nx_ip_driver_ptr =                    ip_ptr;
 80086c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c4:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
 80086c6:	2308      	movs	r3, #8
 80086c8:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
 80086ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086ce:	61bb      	str	r3, [r7, #24]
                    /*lint -e{835} -e{845} suppress operating on zero. */
                    driver_request.nx_ip_driver_physical_address_lsw =   NX_IP_MULTICAST_LOWER | (NX_ALL_HOSTS_ADDRESS & NX_IP_MULTICAST_MASK);
 80086d0:	4b46      	ldr	r3, [pc, #280]	; (80087ec <_nx_ip_thread_entry+0x428>)
 80086d2:	61fb      	str	r3, [r7, #28]
                    driver_request.nx_ip_driver_interface            =   &(ip_ptr -> nx_ip_interface[i]);
 80086d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086d6:	4613      	mov	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	011b      	lsls	r3, r3, #4
 80086de:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80086e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086e4:	4413      	add	r3, r2
 80086e6:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_MULTICAST_JOIN, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80086e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086ec:	4613      	mov	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4413      	add	r3, r2
 80086f2:	011b      	lsls	r3, r3, #4
 80086f4:	440b      	add	r3, r1
 80086f6:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f107 0210 	add.w	r2, r7, #16
 8008700:	4610      	mov	r0, r2
 8008702:	4798      	blx	r3
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008706:	3301      	adds	r3, #1
 8008708:	64fb      	str	r3, [r7, #76]	; 0x4c
 800870a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0cc      	beq.n	80086aa <_nx_ip_thread_entry+0x2e6>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        /* Check for an IP unfragment event.  */
        if (ip_events & NX_IP_UNFRAG_EVENT)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f003 0302 	and.w	r3, r3, #2
 8008716:	2b00      	cmp	r3, #0
 8008718:	d009      	beq.n	800872e <_nx_ip_thread_entry+0x36a>
        {

            /* Process the IP fragment reassemble, if fragment has been enabled.  */
            if (ip_ptr -> nx_ip_fragment_assembly)
 800871a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800871c:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8008720:	2b00      	cmp	r3, #0
 8008722:	d004      	beq.n	800872e <_nx_ip_thread_entry+0x36a>
            {
                (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
 8008724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008726:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800872a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800872c:	4798      	blx	r3
            }
        }

#ifndef NX_DISABLE_IPV4
        /* Check for an ICMP message event.  */
        if (ip_events & NX_IP_ICMP_EVENT)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b00      	cmp	r3, #0
 8008736:	d004      	beq.n	8008742 <_nx_ip_thread_entry+0x37e>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_icmp_queue_process)(ip_ptr);
 8008738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800873a:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 800873e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008740:	4798      	blx	r3
        }
#endif /* NX_DISABLE_IPV4 */

        /* Check for a deferred processing request from the driver.  */
        if (ip_events & NX_IP_DRIVER_DEFERRED_EVENT)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008748:	2b00      	cmp	r3, #0
 800874a:	d033      	beq.n	80087b4 <_nx_ip_thread_entry+0x3f0>
        {

            /* Go through each valid interface. */
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 800874c:	2300      	movs	r3, #0
 800874e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008750:	e02d      	b.n	80087ae <_nx_ip_thread_entry+0x3ea>
            {
                if (ip_ptr -> nx_ip_interface[index].nx_interface_valid)
 8008752:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008756:	4613      	mov	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	011b      	lsls	r3, r3, #4
 800875e:	440b      	add	r3, r1
 8008760:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d01e      	beq.n	80087a8 <_nx_ip_thread_entry+0x3e4>
                {

                    /* Yes, there is a deferred processing event from the driver. The only valid information
                       fields are the IP pointer and the command.  */
                    driver_request.nx_ip_driver_ptr =        ip_ptr;
 800876a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800876c:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =    NX_LINK_DEFERRED_PROCESSING;
 800876e:	2312      	movs	r3, #18
 8008770:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[index]);
 8008772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008774:	4613      	mov	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	011b      	lsls	r3, r3, #4
 800877c:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8008780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008782:	4413      	add	r3, r2
 8008784:	62fb      	str	r3, [r7, #44]	; 0x2c
                    driver_request.nx_ip_driver_return_ptr = &foo;
 8008786:	f107 0308 	add.w	r3, r7, #8
 800878a:	627b      	str	r3, [r7, #36]	; 0x24

                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 800878c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800878e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008790:	4613      	mov	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	011b      	lsls	r3, r3, #4
 8008798:	440b      	add	r3, r1
 800879a:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f107 0210 	add.w	r2, r7, #16
 80087a4:	4610      	mov	r0, r2
 80087a6:	4798      	blx	r3
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 80087a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087aa:	3301      	adds	r3, #1
 80087ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80087ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d0ce      	beq.n	8008752 <_nx_ip_thread_entry+0x38e>
                }
            }
        }

        /* Check for a deferred TCP cleanup processing request from the driver.  */
        if (ip_events & NX_IP_TCP_CLEANUP_DEFERRED)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d004      	beq.n	80087c8 <_nx_ip_thread_entry+0x404>
        {

            /* Yes, there is a deferred cleanup processing event. Call the TCP deferred cleanup
               processing function.  */
            (ip_ptr -> nx_tcp_deferred_cleanup_check)(ip_ptr);
 80087be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087c0:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 80087c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80087c6:	4798      	blx	r3
        }

        /* Check for a link status change request from the driver.  */
        if (ip_events & NX_IP_LINK_STATUS_EVENT)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f43f ae81 	beq.w	80084d6 <_nx_ip_thread_entry+0x112>
        {

            /* Yes, there is a link status change  event. Call the deferred link status processing function. */
            _nx_ip_deferred_link_status_process(ip_ptr);
 80087d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80087d6:	f7fe fc39 	bl	800704c <_nx_ip_deferred_link_status_process>
 80087da:	e67c      	b.n	80084d6 <_nx_ip_thread_entry+0x112>
                continue;
 80087dc:	bf00      	nop
 80087de:	e67a      	b.n	80084d6 <_nx_ip_thread_entry+0x112>
                continue;
 80087e0:	bf00      	nop
 80087e2:	e678      	b.n	80084d6 <_nx_ip_thread_entry+0x112>
                continue;
 80087e4:	bf00      	nop
 80087e6:	e676      	b.n	80084d6 <_nx_ip_thread_entry+0x112>
                continue;
 80087e8:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80087ea:	e674      	b.n	80084d6 <_nx_ip_thread_entry+0x112>
 80087ec:	5e000001 	.word	0x5e000001

080087f0 <_nx_ipv4_option_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ipv4_option_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08a      	sub	sp, #40	; 0x28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]

NX_IPV4_HEADER *ip_header_ptr;
UCHAR          *option_ptr;
ULONG           ip_option_length;
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
ULONG           ip_normal_length = 20;
 80087fa:	2314      	movs	r3, #20
 80087fc:	61bb      	str	r3, [r7, #24]
#endif /* NX_DISABLE_ICMPV4_ERROR_MESSAGE */
UINT            index = 0;
 80087fe:	2300      	movs	r3, #0
 8008800:	623b      	str	r3, [r7, #32]
UCHAR           op_type;
UCHAR           op_length;
UCHAR           op_timestamp_offset;
UCHAR           op_timestamp_overflow;
UCHAR           op_timestamp_flags;
UINT            op_timestamp_counter = 0;
 8008802:	2300      	movs	r3, #0
 8008804:	61fb      	str	r3, [r7, #28]

    /* Set the IPv4 header and IPv4 option pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	617b      	str	r3, [r7, #20]
    option_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	3314      	adds	r3, #20
 8008812:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate the IPv4 option length.  */
    ip_option_length = ((((ip_header_ptr -> nx_ip_header_word_0 & NX_IP_LENGTH_MASK) >> 24) - NX_IP_NORMAL_LENGTH) & 0xFF) * (ULONG)sizeof(ULONG);
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	0e1b      	lsrs	r3, r3, #24
 800881a:	f003 030f 	and.w	r3, r3, #15
 800881e:	3b05      	subs	r3, #5
 8008820:	b2db      	uxtb	r3, r3
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	613b      	str	r3, [r7, #16]

    /* Loop to process the IPv4 option.  */
    while (index < ip_option_length)
 8008826:	e0a3      	b.n	8008970 <_nx_ipv4_option_process+0x180>
    {

        /* Get the option type.  */
        op_type = *option_ptr;
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	73fb      	strb	r3, [r7, #15]

        /* Process the option type. */
        switch (op_type)
 800882e:	7bfb      	ldrb	r3, [r7, #15]
 8008830:	2b44      	cmp	r3, #68	; 0x44
 8008832:	d010      	beq.n	8008856 <_nx_ipv4_option_process+0x66>
 8008834:	2b44      	cmp	r3, #68	; 0x44
 8008836:	f300 8082 	bgt.w	800893e <_nx_ipv4_option_process+0x14e>
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <_nx_ipv4_option_process+0x54>
 800883e:	2b01      	cmp	r3, #1
 8008840:	d002      	beq.n	8008848 <_nx_ipv4_option_process+0x58>
                return(NX_FALSE);
            }
            break;
        }
        default:
            break;
 8008842:	e07c      	b.n	800893e <_nx_ipv4_option_process+0x14e>
            return(NX_TRUE);
 8008844:	2301      	movs	r3, #1
 8008846:	e099      	b.n	800897c <_nx_ipv4_option_process+0x18c>
            option_ptr++;
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	3301      	adds	r3, #1
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
            index++;
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	3301      	adds	r3, #1
 8008852:	623b      	str	r3, [r7, #32]
            continue;
 8008854:	e08c      	b.n	8008970 <_nx_ipv4_option_process+0x180>
            op_timestamp_counter++;
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	3301      	adds	r3, #1
 800885a:	61fb      	str	r3, [r7, #28]
            if (op_timestamp_counter > 1)
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d90b      	bls.n	800887a <_nx_ipv4_option_process+0x8a>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 8008862:	69ba      	ldr	r2, [r7, #24]
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	4413      	add	r3, r2
 8008868:	3302      	adds	r3, #2
 800886a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7fe f825 	bl	80068c0 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 8008876:	2300      	movs	r3, #0
 8008878:	e080      	b.n	800897c <_nx_ipv4_option_process+0x18c>
            op_length = *(option_ptr + 1);
 800887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887c:	785b      	ldrb	r3, [r3, #1]
 800887e:	73bb      	strb	r3, [r7, #14]
            op_timestamp_offset = *(option_ptr + 2);
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	789b      	ldrb	r3, [r3, #2]
 8008884:	737b      	strb	r3, [r7, #13]
            op_timestamp_overflow = (*(option_ptr + 3)) >> 4;
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008888:	3303      	adds	r3, #3
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	091b      	lsrs	r3, r3, #4
 800888e:	733b      	strb	r3, [r7, #12]
            op_timestamp_flags = (*(option_ptr + 3)) & 0xF;
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	3303      	adds	r3, #3
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	f003 030f 	and.w	r3, r3, #15
 800889a:	72fb      	strb	r3, [r7, #11]
            if ((op_length < 8) || (op_length > 40) || ((op_length % 4) != 0))
 800889c:	7bbb      	ldrb	r3, [r7, #14]
 800889e:	2b07      	cmp	r3, #7
 80088a0:	d908      	bls.n	80088b4 <_nx_ipv4_option_process+0xc4>
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	2b28      	cmp	r3, #40	; 0x28
 80088a6:	d805      	bhi.n	80088b4 <_nx_ipv4_option_process+0xc4>
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	f003 0303 	and.w	r3, r3, #3
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00b      	beq.n	80088cc <_nx_ipv4_option_process+0xdc>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	4413      	add	r3, r2
 80088ba:	3302      	adds	r3, #2
 80088bc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7fd fffc 	bl	80068c0 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 80088c8:	2300      	movs	r3, #0
 80088ca:	e057      	b.n	800897c <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_offset < 5) || ((op_timestamp_offset % 2) == 0))
 80088cc:	7b7b      	ldrb	r3, [r7, #13]
 80088ce:	2b04      	cmp	r3, #4
 80088d0:	d905      	bls.n	80088de <_nx_ipv4_option_process+0xee>
 80088d2:	7b7b      	ldrb	r3, [r7, #13]
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10b      	bne.n	80088f6 <_nx_ipv4_option_process+0x106>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 3));
 80088de:	69ba      	ldr	r2, [r7, #24]
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	4413      	add	r3, r2
 80088e4:	3303      	adds	r3, #3
 80088e6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f7fd ffe7 	bl	80068c0 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 80088f2:	2300      	movs	r3, #0
 80088f4:	e042      	b.n	800897c <_nx_ipv4_option_process+0x18c>
            if (op_timestamp_overflow == 15)
 80088f6:	7b3b      	ldrb	r3, [r7, #12]
 80088f8:	2b0f      	cmp	r3, #15
 80088fa:	d10b      	bne.n	8008914 <_nx_ipv4_option_process+0x124>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	4413      	add	r3, r2
 8008902:	3304      	adds	r3, #4
 8008904:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7fd ffd8 	bl	80068c0 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 8008910:	2300      	movs	r3, #0
 8008912:	e033      	b.n	800897c <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_flags != 0) && (op_timestamp_flags != 1) && (op_timestamp_flags != 3))
 8008914:	7afb      	ldrb	r3, [r7, #11]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d013      	beq.n	8008942 <_nx_ipv4_option_process+0x152>
 800891a:	7afb      	ldrb	r3, [r7, #11]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d010      	beq.n	8008942 <_nx_ipv4_option_process+0x152>
 8008920:	7afb      	ldrb	r3, [r7, #11]
 8008922:	2b03      	cmp	r3, #3
 8008924:	d00d      	beq.n	8008942 <_nx_ipv4_option_process+0x152>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 8008926:	69ba      	ldr	r2, [r7, #24]
 8008928:	6a3b      	ldr	r3, [r7, #32]
 800892a:	4413      	add	r3, r2
 800892c:	3304      	adds	r3, #4
 800892e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7fd ffc3 	bl	80068c0 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800893a:	2300      	movs	r3, #0
 800893c:	e01e      	b.n	800897c <_nx_ipv4_option_process+0x18c>
            break;
 800893e:	bf00      	nop
 8008940:	e000      	b.n	8008944 <_nx_ipv4_option_process+0x154>
            break;
 8008942:	bf00      	nop
        }

        /* Get the option length.  */
        op_length = *(option_ptr + 1);
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	785b      	ldrb	r3, [r3, #1]
 8008948:	73bb      	strb	r3, [r7, #14]

        /* Check for invalid option length.
           RFC 791: The option-length octet counts the option-type octet and the 
           option-length octet as well as the option-data octets.  */
        if ((op_length < 2) || ((index + op_length) > ip_option_length))
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d905      	bls.n	800895c <_nx_ipv4_option_process+0x16c>
 8008950:	7bba      	ldrb	r2, [r7, #14]
 8008952:	6a3b      	ldr	r3, [r7, #32]
 8008954:	4413      	add	r3, r2
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	429a      	cmp	r2, r3
 800895a:	d201      	bcs.n	8008960 <_nx_ipv4_option_process+0x170>
        {
            return(NX_FALSE);
 800895c:	2300      	movs	r3, #0
 800895e:	e00d      	b.n	800897c <_nx_ipv4_option_process+0x18c>
        }

        /* Move to the next top level option. */
        option_ptr += op_length;
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008964:	4413      	add	r3, r2
 8008966:	627b      	str	r3, [r7, #36]	; 0x24

        /* Update the index.  */
        index += op_length;
 8008968:	7bbb      	ldrb	r3, [r7, #14]
 800896a:	6a3a      	ldr	r2, [r7, #32]
 800896c:	4413      	add	r3, r2
 800896e:	623b      	str	r3, [r7, #32]
    while (index < ip_option_length)
 8008970:	6a3a      	ldr	r2, [r7, #32]
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	429a      	cmp	r2, r3
 8008976:	f4ff af57 	bcc.w	8008828 <_nx_ipv4_option_process+0x38>
    }

    /* Return NX_TRUE.  */
    return(NX_TRUE);
 800897a:	2301      	movs	r3, #1
}
 800897c:	4618      	mov	r0, r3
 800897e:	3728      	adds	r7, #40	; 0x28
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <_nx_ipv4_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ipv4_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b098      	sub	sp, #96	; 0x60
 8008988:	af02      	add	r7, sp, #8
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
NX_INTERFACE   *if_ptr;
NX_UDP_HEADER  *udp_header_ptr;
UINT            dest_port;
UINT            option_processed;
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
UINT            compute_checksum = 1;
 800898e:	2301      	movs	r3, #1
 8008990:	64bb      	str	r3, [r7, #72]	; 0x48
#endif /* NX_DISABLE_IP_RX_CHECKSUM */

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	653b      	str	r3, [r7, #80]	; 0x50
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, packet_ptr -> nx_packet_length, NX_TRACE_INTERNAL_EVENTS, 0, 0);


    /* Pick up the first word in the IP header. */
    val = ip_header_ptr -> nx_ip_header_word_0;
 8008998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Convert to host byte order. */
    NX_CHANGE_ULONG_ENDIAN(val);
 800899e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089a0:	ba1b      	rev	r3, r3
 80089a2:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain packet length. */
    pkt_length = val & NX_LOWER_16_MASK;
 80089a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Make sure the IP length matches the packet length.  Some Ethernet devices
       add padding to small packets, which results in a discrepancy between the
       packet length and the IP header length.  */
    if (packet_ptr -> nx_packet_length != pkt_length)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d066      	beq.n	8008a82 <_nx_ipv4_packet_receive+0xfe>
    {

        /* Determine if the packet length is less than the size reported in the IP header.  */
        if (packet_ptr -> nx_packet_length < pkt_length)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d90d      	bls.n	80089da <_nx_ipv4_packet_receive+0x56>
            /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089cc:	1c5a      	adds	r2, r3, #1
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Invalid packet length, just release it.  */
            _nx_packet_release(packet_ptr);
 80089d2:	6838      	ldr	r0, [r7, #0]
 80089d4:	f000 fdd4 	bl	8009580 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 80089d8:	e233      	b.n	8008e42 <_nx_ipv4_packet_receive+0x4be>
        }

        /* Calculate the difference in the length.  */
        delta =  packet_ptr -> nx_packet_length - pkt_length;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Adjust the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - delta;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ea:	1ad2      	subs	r2, r2, r3
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	625a      	str	r2, [r3, #36]	; 0x24

        /* Adjust the append pointer.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Loop to process adjustment that spans multiple packets.  */
        while (delta)
 80089f0:	e044      	b.n	8008a7c <_nx_ipv4_packet_receive+0xf8>
        {

            /* Determine if the packet is chained (or still chained after the adjustment).  */
            if (packet_ptr -> nx_packet_last == NX_NULL)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d107      	bne.n	8008a0a <_nx_ipv4_packet_receive+0x86>
            {

                /* No, packet is not chained, simply adjust the append pointer in the packet.  */
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68da      	ldr	r2, [r3, #12]
 80089fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a00:	425b      	negs	r3, r3
 8008a02:	441a      	add	r2, r3
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	60da      	str	r2, [r3, #12]

                /* Break out of the loop, since the adjustment is complete.  */
                break;
 8008a08:	e03b      	b.n	8008a82 <_nx_ipv4_packet_receive+0xfe>
            }

            /* Pickup the pointer to the last packet.  */
            last_packet =  packet_ptr -> nx_packet_last;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if the amount to adjust is less than the payload in the last packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 8008a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a12:	68da      	ldr	r2, [r3, #12]
 8008a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d207      	bcs.n	8008a32 <_nx_ipv4_packet_receive+0xae>
            {

                /* Yes, simply adjust the append pointer of the last packet in the chain.  */
                /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                last_packet -> nx_packet_append_ptr =  last_packet -> nx_packet_append_ptr - delta;
 8008a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a28:	425b      	negs	r3, r3
 8008a2a:	441a      	add	r2, r3
 8008a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a2e:	60da      	str	r2, [r3, #12]

                /* Get out of the loop, since the adjustment is complete.  */
                break;
 8008a30:	e027      	b.n	8008a82 <_nx_ipv4_packet_receive+0xfe>
            }
            else
            {

                /* Adjust the delta by the amount in the last packet.  */
                delta =  delta - ((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr));
 8008a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a34:	68da      	ldr	r2, [r3, #12]
 8008a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a40:	1a9b      	subs	r3, r3, r2
 8008a42:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Find the packet before the last packet.  */
                before_last_packet =  packet_ptr;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	657b      	str	r3, [r7, #84]	; 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 8008a48:	e002      	b.n	8008a50 <_nx_ipv4_packet_receive+0xcc>
                {

                    /* Move to the next packet in the chain.  */
                    before_last_packet =  before_last_packet -> nx_packet_next;
 8008a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	657b      	str	r3, [r7, #84]	; 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 8008a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d1f7      	bne.n	8008a4a <_nx_ipv4_packet_receive+0xc6>

                /* At this point, we need to release the last packet and adjust the other packet
                   pointers.  */

                /* Ensure the next packet pointer is NULL in what is now the last packet.  */
                before_last_packet -> nx_packet_next =  NX_NULL;
 8008a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	605a      	str	r2, [r3, #4]

                /* Determine if the packet is still chained.  */
                if (packet_ptr != before_last_packet)
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d003      	beq.n	8008a70 <_nx_ipv4_packet_receive+0xec>
                {

                    /* Yes, the packet is still chained, setup the last packet pointer.  */
                    packet_ptr -> nx_packet_last =  before_last_packet;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a6c:	619a      	str	r2, [r3, #24]
 8008a6e:	e002      	b.n	8008a76 <_nx_ipv4_packet_receive+0xf2>
                }
                else
                {

                    /* The packet is no longer chained, set the last packet pointer to NULL.  */
                    packet_ptr -> nx_packet_last =  NX_NULL;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	2200      	movs	r2, #0
 8008a74:	619a      	str	r2, [r3, #24]
                }

                /* Release the last packet.   */
                _nx_packet_release(last_packet);
 8008a76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008a78:	f000 fd82 	bl	8009580 <_nx_packet_release>
        while (delta)
 8008a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1b7      	bne.n	80089f2 <_nx_ipv4_packet_receive+0x6e>
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Get the incoming interface. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a86:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Obtain IP header length. */
    ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 8008a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a8a:	0e1b      	lsrs	r3, r3, #24
 8008a8c:	f003 030f 	and.w	r3, r3, #15
 8008a90:	637b      	str	r3, [r7, #52]	; 0x34
    /* Check for minimal packet length. The check is done after the endian swapping
       since the compiler may possibly be able to optimize the lookup of
       "nx_packet_length" and therefore reduce the amount of work performing these
       size checks. The endian logic is okay since packets must always have
       payloads greater than the IP header in size.  */
    if ((packet_ptr -> nx_packet_length <= (ip_header_length << 2)) ||
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d902      	bls.n	8008aa4 <_nx_ipv4_packet_receive+0x120>
 8008a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	d80d      	bhi.n	8008ac0 <_nx_ipv4_packet_receive+0x13c>
        /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_packets++;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa8:	1c5a      	adds	r2, r3, #1
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 8008ab8:	6838      	ldr	r0, [r7, #0]
 8008aba:	f000 fd61 	bl	8009580 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8008abe:	e1c0      	b.n	8008e42 <_nx_ipv4_packet_receive+0x4be>
    }
#endif

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (if_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_RX_CHECKSUM)
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac4:	f003 0302 	and.w	r3, r3, #2
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <_nx_ipv4_packet_receive+0x14c>
    {
        compute_checksum = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	64bb      	str	r3, [r7, #72]	; 0x48
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
    if (compute_checksum == 1)
 8008ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d124      	bne.n	8008b20 <_nx_ipv4_packet_receive+0x19c>
    {


        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* length is the size of IP header, including options */
                                           (UINT)(ip_header_length << 2),
 8008ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad8:	009a      	lsls	r2, r3, #2
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8008ada:	2300      	movs	r3, #0
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	2104      	movs	r1, #4
 8008ae2:	6838      	ldr	r0, [r7, #0]
 8008ae4:	f7fe f889 	bl	8006bfa <_nx_ip_checksum_compute>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	633b      	str	r3, [r7, #48]	; 0x30
                                           /* IPv4 header checksum doesn't care src/dest addresses */
                                           NULL, NULL);
        checksum =  ~checksum & NX_LOWER_16_MASK;
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	43db      	mvns	r3, r3
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the checksum again.  */
        if (checksum)
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d012      	beq.n	8008b20 <_nx_ipv4_packet_receive+0x19c>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008afe:	1c5a      	adds	r2, r3, #1
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP checksum error.  */
            ip_ptr -> nx_ip_receive_checksum_errors++;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b08:	1c5a      	adds	r2, r3, #1
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b12:	1c5a      	adds	r2, r3, #1
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Checksum error, just release it.  */
            _nx_packet_release(packet_ptr);
 8008b18:	6838      	ldr	r0, [r7, #0]
 8008b1a:	f000 fd31 	bl	8009580 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 8008b1e:	e190      	b.n	8008e42 <_nx_ipv4_packet_receive+0x4be>
    /* IP receive checksum processing is disabled... just check for and remove if
       necessary the IP option words.  */

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8008b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	ba1a      	rev	r2, r3
 8008b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b28:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8008b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	ba1a      	rev	r2, r3
 8008b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b32:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8008b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	ba1a      	rev	r2, r3
 8008b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b3c:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8008b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	ba1a      	rev	r2, r3
 8008b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b46:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8008b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	ba1a      	rev	r2, r3
 8008b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b50:	611a      	str	r2, [r3, #16]
    }
#endif /* NX_ENABLE_SOURCE_ADDRESS_CHECK */

    /* Determine if there are options in the IP header that make the length greater
       than the default length.  */
    if (ip_header_length > NX_IP_NORMAL_LENGTH)
 8008b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b54:	2b05      	cmp	r3, #5
 8008b56:	d949      	bls.n	8008bec <_nx_ipv4_packet_receive+0x268>
    {

        /* Process the IPv4 option.  */
        option_processed = _nx_ipv4_option_process(ip_ptr, packet_ptr);
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7ff fe48 	bl	80087f0 <_nx_ipv4_option_process>
 8008b60:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the status.  */
        if (option_processed == NX_FALSE)
 8008b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d108      	bne.n	8008b7a <_nx_ipv4_packet_receive+0x1f6>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* IPv4 option error, toss the packet!  */
            _nx_packet_release(packet_ptr);
 8008b72:	6838      	ldr	r0, [r7, #0]
 8008b74:	f000 fd04 	bl	8009580 <_nx_packet_release>

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 8008b78:	e163      	b.n	8008e42 <_nx_ipv4_packet_receive+0x4be>
        }

        /* Setup a pointer to the last option word.  */
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 8008b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b80:	3b01      	subs	r3, #1
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b86:	4413      	add	r3, r2
 8008b88:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Remove the option words prior to handling the IP header.  */
        *word_ptr-- = ip_header_ptr -> nx_ip_header_destination_ip;
 8008b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8c:	1f1a      	subs	r2, r3, #4
 8008b8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8008b90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b92:	6912      	ldr	r2, [r2, #16]
 8008b94:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_source_ip;
 8008b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b98:	1f1a      	subs	r2, r3, #4
 8008b9a:	62ba      	str	r2, [r7, #40]	; 0x28
 8008b9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b9e:	68d2      	ldr	r2, [r2, #12]
 8008ba0:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_2;
 8008ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba4:	1f1a      	subs	r2, r3, #4
 8008ba6:	62ba      	str	r2, [r7, #40]	; 0x28
 8008ba8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008baa:	6892      	ldr	r2, [r2, #8]
 8008bac:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_1;
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	1f1a      	subs	r2, r3, #4
 8008bb2:	62ba      	str	r2, [r7, #40]	; 0x28
 8008bb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008bb6:	6852      	ldr	r2, [r2, #4]
 8008bb8:	601a      	str	r2, [r3, #0]
        *word_ptr = (ULONG)(((ip_header_ptr -> nx_ip_header_word_0) & (~NX_IP_LENGTH_MASK)) | NX_IP_VERSION);
 8008bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f023 439e 	bic.w	r3, r3, #1325400064	; 0x4f000000
 8008bc2:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	601a      	str	r2, [r3, #0]

        /* Update the ip_header_ptr and the packet and the packet prepend pointer, ip header pointer and length.  */
        /*lint -e{929} -e{740} -e{826} suppress cast from pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)word_ptr;
 8008bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bcc:	653b      	str	r3, [r7, #80]	; 0x50

        /*lint -e{928} suppress cast from pointer to pointer, since it is necessary  */
        packet_ptr -> nx_packet_prepend_ptr = (UCHAR *)word_ptr;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bd2:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	689a      	ldr	r2, [r3, #8]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	635a      	str	r2, [r3, #52]	; 0x34
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be2:	3b05      	subs	r3, #5
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	1ad2      	subs	r2, r2, r3
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	625a      	str	r2, [r3, #36]	; 0x24
    }
#endif

    /* Determine if the IP datagram is for this IP address or a broadcast IP on this
       network.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 8008bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bee:	691a      	ldr	r2, [r3, #16]
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d02f      	beq.n	8008c58 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for incoming IP address of zero.  Incoming IP address of zero should
           be received regardless of our current IP address.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 8008bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bfa:	691b      	ldr	r3, [r3, #16]
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d02b      	beq.n	8008c58 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for IP broadcast.  */
        (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8008c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c02:	691a      	ldr	r2, [r3, #16]
 8008c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	401a      	ands	r2, r3
          if_ptr -> nx_interface_ip_network) &&
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0c:	69db      	ldr	r3, [r3, #28]
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d10a      	bne.n	8008c28 <_nx_ipv4_packet_receive+0x2a4>
         ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 8008c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c14:	691a      	ldr	r2, [r3, #16]
 8008c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	43db      	mvns	r3, r3
 8008c1c:	401a      	ands	r2, r3
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 8008c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	43db      	mvns	r3, r3
          if_ptr -> nx_interface_ip_network) &&
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d017      	beq.n	8008c58 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for limited broadcast.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8008c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c2a:	691b      	ldr	r3, [r3, #16]
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c30:	d012      	beq.n	8008c58 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for loopback address.  */
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8008c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c34:	691b      	ldr	r3, [r3, #16]
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8008c36:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8008c3a:	d303      	bcc.n	8008c44 <_nx_ipv4_packet_receive+0x2c0>
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 8008c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c3e:	691b      	ldr	r3, [r3, #16]
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	da09      	bge.n	8008c58 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for valid Multicast address.  */
        (_nx_igmp_multicast_check(ip_ptr, ip_header_ptr -> nx_ip_header_destination_ip, if_ptr)))
 8008c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7fd ff69 	bl	8006b24 <_nx_igmp_multicast_check>
 8008c52:	4603      	mov	r3, r0
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d076      	beq.n	8008d46 <_nx_ipv4_packet_receive+0x3c2>
    {

        /* Determine if this packet is fragmented.  If so, place it on the deferred processing
           queue.  The input packet will then be processed by an IP system thread.  */
        if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_FRAGMENT_MASK)
 8008c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d046      	beq.n	8008cf2 <_nx_ipv4_packet_receive+0x36e>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive fragments count.  */
            ip_ptr -> nx_ip_total_fragments_received++;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c68:	1c5a      	adds	r2, r3, #1
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	669a      	str	r2, [r3, #104]	; 0x68
#ifdef NX_ENABLE_LOW_WATERMARK
            if (ip_ptr -> nx_ip_fragment_assembly &&
                (packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_available >=
                 packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_low_watermark))
#else
            if (ip_ptr -> nx_ip_fragment_assembly)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d033      	beq.n	8008ce0 <_nx_ipv4_packet_receive+0x35c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c78:	f3ef 8310 	mrs	r3, PRIMASK
 8008c7c:	617b      	str	r3, [r7, #20]
    return(posture);
 8008c7e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008c80:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c82:	b672      	cpsid	i
    return(int_posture);
 8008c84:	693b      	ldr	r3, [r7, #16]

                /* Yes, fragmenting is available.  Place the packet on the incoming
                   fragment queue.  */

                /* Disable interrupts.  */
                TX_DISABLE
 8008c86:	61bb      	str	r3, [r7, #24]

                /* Determine if the queue is empty.  */
                if (ip_ptr -> nx_ip_received_fragment_head)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00c      	beq.n	8008cac <_nx_ipv4_packet_receive+0x328>
                {

                    /* Reassembly queue is not empty, add this packet to the end of
                       the queue.  */
                    (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 8008c98:	683a      	ldr	r2, [r7, #0]
 8008c9a:	61da      	str	r2, [r3, #28]
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	61da      	str	r2, [r3, #28]
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
 8008caa:	e00a      	b.n	8008cc2 <_nx_ipv4_packet_receive+0x33e>
                else
                {

                    /* Reassembly queue is empty.  Just setup the head and tail pointers
                       to point to this packet.  */
                    ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
                    packet_ptr -> nx_packet_queue_next =      NX_NULL;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	61da      	str	r2, [r3, #28]
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f383 8810 	msr	PRIMASK, r3
}
 8008ccc:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
                /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
                tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2102      	movs	r1, #2
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f003 fab5 	bl	800c248 <_tx_event_flags_set>
                /* Fragmentation has not been enabled, toss the packet!  */
                _nx_packet_release(packet_ptr);
            }

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 8008cde:	e0b0      	b.n	8008e42 <_nx_ipv4_packet_receive+0x4be>
                ip_ptr -> nx_ip_receive_packets_dropped++;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	64da      	str	r2, [r3, #76]	; 0x4c
                _nx_packet_release(packet_ptr);
 8008cea:	6838      	ldr	r0, [r7, #0]
 8008cec:	f000 fc48 	bl	8009580 <_nx_packet_release>
            return;
 8008cf0:	e0a7      	b.n	8008e42 <_nx_ipv4_packet_receive+0x4be>
        }

        /* Determine what protocol the current IP datagram is.  */
        protocol =  (ip_header_ptr -> nx_ip_header_word_2 >> 16) & 0xFF;
 8008cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	0c1b      	lsrs	r3, r3, #16
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the IP header from the packet.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f103 0214 	add.w	r2, r3, #20
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	609a      	str	r2, [r3, #8]

        /* Adjust the length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0c:	f1a3 0214 	sub.w	r2, r3, #20
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

        /* Increment the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered++;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a1b      	ldr	r3, [r3, #32]
 8008d18:	1c5a      	adds	r2, r3, #1
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	621a      	str	r2, [r3, #32]

        /* Increment the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	441a      	add	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	625a      	str	r2, [r3, #36]	; 0x24
#endif
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 8008d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7fe f9eb 	bl	800710c <_nx_ip_dispatch_process>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 8082 	beq.w	8008e42 <_nx_ipv4_packet_receive+0x4be>
        {
            _nx_packet_release(packet_ptr);
 8008d3e:	6838      	ldr	r0, [r7, #0]
 8008d40:	f000 fc1e 	bl	8009580 <_nx_packet_release>
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 8008d44:	e07d      	b.n	8008e42 <_nx_ipv4_packet_receive+0x4be>
    }
    /* Try to receive the DHCP message before release this packet.
       NetX should receive the unicast DHCP message when interface IP address is zero.  */

    /* Check if this IP interface has IP address.  */
    else if (if_ptr -> nx_interface_ip_address == 0)
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d15a      	bne.n	8008e04 <_nx_ipv4_packet_receive+0x480>
    {

        /* Determine what protocol the current IP datagram is.  */
        protocol =  ip_header_ptr -> nx_ip_header_word_2 & NX_IP_PROTOCOL_MASK;
 8008d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check if this packet is UDP message.  */
        if (protocol == NX_IP_UDP)
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8008d5e:	d137      	bne.n	8008dd0 <_nx_ipv4_packet_receive+0x44c>
        {

            /* Remove the IP header from the packet.  */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f103 0214 	add.w	r2, r3, #20
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	609a      	str	r2, [r3, #8]

            /* Adjust the length.  */
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d70:	f1a3 0214 	sub.w	r2, r3, #20
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

            /* Increment the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered++;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a1b      	ldr	r3, [r3, #32]
 8008d7c:	1c5a      	adds	r2, r3, #1
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	621a      	str	r2, [r3, #32]

            /* Increment the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	441a      	add	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	625a      	str	r2, [r3, #36]	; 0x24
#endif

            /* Pickup the pointer to the head of the UDP packet.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	623b      	str	r3, [r7, #32]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008d96:	6a3b      	ldr	r3, [r7, #32]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	ba1a      	rev	r2, r3
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	601a      	str	r2, [r3, #0]

            /* Pickup the destination UDP port.  */
            dest_port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 8008da0:	6a3b      	ldr	r3, [r7, #32]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	61fb      	str	r3, [r7, #28]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008da8:	6a3b      	ldr	r3, [r7, #32]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	ba1a      	rev	r2, r3
 8008dae:	6a3b      	ldr	r3, [r7, #32]
 8008db0:	601a      	str	r2, [r3, #0]

            /* Check if this packet is DHCP message.  */
            if (dest_port == 68)
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	2b44      	cmp	r3, #68	; 0x44
 8008db6:	d10b      	bne.n	8008dd0 <_nx_ipv4_packet_receive+0x44c>
            {
                if (ip_ptr -> nx_ip_udp_packet_receive)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d006      	beq.n	8008dd0 <_nx_ipv4_packet_receive+0x44c>
                {

                    /* Yes, dispatch it to the appropriate UDP handler if present.  */
                    (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	4798      	blx	r3

                    return;
 8008dce:	e038      	b.n	8008e42 <_nx_ipv4_packet_receive+0x4be>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Decrement the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered--;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a1b      	ldr	r3, [r3, #32]
 8008dd4:	1e5a      	subs	r2, r3, #1
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	621a      	str	r2, [r3, #32]

        /* Decrement the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de2:	1ad2      	subs	r2, r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dec:	1c5a      	adds	r2, r3, #1
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 8008dfc:	6838      	ldr	r0, [r7, #0]
 8008dfe:	f000 fbbf 	bl	8009580 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8008e02:	e01e      	b.n	8008e42 <_nx_ipv4_packet_receive+0x4be>
    }
    else if (ip_ptr -> nx_ip_forward_packet_process)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00b      	beq.n	8008e26 <_nx_ipv4_packet_receive+0x4a2>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packets forwarded counter.  */
        ip_ptr -> nx_ip_packets_forwarded++;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e12:	1c5a      	adds	r2, r3, #1
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	629a      	str	r2, [r3, #40]	; 0x28
#endif

        /* The packet is not for this IP instance so call the
           forward IP packet processing routine.  */
        (ip_ptr -> nx_ip_forward_packet_process)(ip_ptr, packet_ptr);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	4798      	blx	r3
 8008e24:	e00d      	b.n	8008e42 <_nx_ipv4_packet_receive+0x4be>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 8008e3a:	6838      	ldr	r0, [r7, #0]
 8008e3c:	f000 fba0 	bl	8009580 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8008e40:	bf00      	nop
    }
}
 8008e42:	3758      	adds	r7, #88	; 0x58
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <_nx_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                          ULONG packet_type, ULONG wait_option)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b08c      	sub	sp, #48	; 0x30
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
 8008e54:	603b      	str	r3, [r7, #0]
TX_TRACE_BUFFER_ENTRY *trace_event;
ULONG                  trace_timestamp;
#endif

    /* Make sure the packet_type does not go beyond nx_packet_data_end. */
    if (pool_ptr -> nx_packet_pool_payload_size < packet_type)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d901      	bls.n	8008e64 <_nx_packet_allocate+0x1c>
    {
        return(NX_INVALID_PARAMETERS);
 8008e60:	234d      	movs	r3, #77	; 0x4d
 8008e62:	e0b1      	b.n	8008fc8 <_nx_packet_allocate+0x180>
    }

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2200      	movs	r2, #0
 8008e68:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8008e6e:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008e70:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8008e72:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e74:	b672      	cpsid	i
    return(int_posture);
 8008e76:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_ALLOCATE, pool_ptr, 0, packet_type, pool_ptr -> nx_packet_pool_available, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Disable interrupts to get a packet from the pool.  */
    TX_DISABLE
 8008e78:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there is an available packet.  */
    if (pool_ptr -> nx_packet_pool_available)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d03d      	beq.n	8008efe <_nx_packet_allocate+0xb6>
    {

        /* Yes, a packet is available.  Decrement the available count.  */
        pool_ptr -> nx_packet_pool_available--;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	1e5a      	subs	r2, r3, #1
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	609a      	str	r2, [r3, #8]

        /* Pickup the current packet pointer.  */
        work_ptr =  pool_ptr -> nx_packet_pool_available_list;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	623b      	str	r3, [r7, #32]

        /* Modify the available list to point at the next packet in the pool. */
        pool_ptr -> nx_packet_pool_available_list =  work_ptr -> nx_packet_queue_next;
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	69da      	ldr	r2, [r3, #28]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	61da      	str	r2, [r3, #28]

        /* Setup various fields for this packet.  */
        work_ptr -> nx_packet_queue_next =   NX_NULL;
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
        work_ptr -> nx_packet_next =         NX_NULL;
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	605a      	str	r2, [r3, #4]
        work_ptr -> nx_packet_last =         NX_NULL;
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr -> nx_packet_length =       0;
 8008eac:	6a3b      	ldr	r3, [r7, #32]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	625a      	str	r2, [r3, #36]	; 0x24
        work_ptr -> nx_packet_prepend_ptr =  work_ptr -> nx_packet_data_start + packet_type;
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	691a      	ldr	r2, [r3, #16]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	441a      	add	r2, r3
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	609a      	str	r2, [r3, #8]
        work_ptr -> nx_packet_append_ptr =   work_ptr -> nx_packet_prepend_ptr;
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	689a      	ldr	r2, [r3, #8]
 8008ec2:	6a3b      	ldr	r3, [r7, #32]
 8008ec4:	60da      	str	r2, [r3, #12]
        work_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8008ec6:	6a3b      	ldr	r3, [r7, #32]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        work_ptr -> nx_packet_interface_capability_flag = 0;
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
        /* Set the TCP queue to the value that indicates it has been allocated.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8008ed8:	621a      	str	r2, [r3, #32]
        work_ptr -> nx_packet_ipsec_sa_ptr = NX_NULL;
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Initialize the IP version field */
        work_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	2204      	movs	r2, #4
 8008ede:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#endif /* !NX_DISABLE_IPV4  */

        /* Initialize the IP identification flag.  */
        work_ptr -> nx_packet_identical_copy = NX_FALSE;
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Initialize the IP header length. */
        work_ptr -> nx_packet_ip_header_length = 0;
 8008eea:	6a3b      	ldr	r3, [r7, #32]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
#ifdef NX_ENABLE_THREAD
        work_ptr -> nx_packet_type = 0;
#endif /* NX_ENABLE_THREAD  */

        /* Place the new packet pointer in the return destination.  */
        *packet_ptr =  work_ptr;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	6a3a      	ldr	r2, [r7, #32]
 8008ef6:	601a      	str	r2, [r3, #0]

        /* Set status to success.  */
        status =  NX_SUCCESS;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008efc:	e05d      	b.n	8008fba <_nx_packet_allocate+0x172>
    else
    {

#ifndef NX_DISABLE_PACKET_INFO
        /* Increment the packet pool empty request count.  */
        pool_ptr -> nx_packet_pool_empty_requests++;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	1c5a      	adds	r2, r3, #1
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	611a      	str	r2, [r3, #16]
#endif

        /* Determine if the request specifies suspension.  */
        if (wait_option)
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d053      	beq.n	8008fb6 <_nx_packet_allocate+0x16e>

            /* Prepare for suspension of this thread.  */

#ifndef NX_DISABLE_PACKET_INFO
            /* Increment the packet pool empty request suspension count.  */
            pool_ptr -> nx_packet_pool_empty_suspensions++;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	615a      	str	r2, [r3, #20]
#endif

            /* Pickup thread pointer.  */
            thread_ptr =  _tx_thread_current_ptr;
 8008f18:	4b2d      	ldr	r3, [pc, #180]	; (8008fd0 <_nx_packet_allocate+0x188>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  _nx_packet_pool_cleanup;
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f20:	4a2c      	ldr	r2, [pc, #176]	; (8008fd4 <_nx_packet_allocate+0x18c>)
 8008f22:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this pool control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (void *)pool_ptr;
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Save the return packet pointer address as well.  */
            thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	67da      	str	r2, [r3, #124]	; 0x7c

            /* Save the packet type (or prepend offset) so this can be added
               after a new packet becomes available.  */
            thread_ptr -> tx_thread_suspend_info =  packet_type;
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	679a      	str	r2, [r3, #120]	; 0x78

            /* Setup suspension list.  */
            if (pool_ptr -> nx_packet_pool_suspension_list)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d012      	beq.n	8008f64 <_nx_packet_allocate+0x11c>
            {

                /* This list is not NULL, add current thread to the end. */
                thread_ptr -> tx_thread_suspended_next =
                    pool_ptr -> nx_packet_pool_suspension_list;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =
                    (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	675a      	str	r2, [r3, #116]	; 0x74
                ((pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f58:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr;
                (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f60:	675a      	str	r2, [r3, #116]	; 0x74
 8008f62:	e008      	b.n	8008f76 <_nx_packet_allocate+0x12e>
            else
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f68:	62da      	str	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =            thread_ptr;
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f6e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =        thread_ptr;
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f74:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            pool_ptr -> nx_packet_pool_suspended_count++;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7a:	1c5a      	adds	r2, r3, #1
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	220c      	movs	r2, #12
 8008f84:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	2201      	movs	r2, #1
 8008f8a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008f8c:	4b12      	ldr	r3, [pc, #72]	; (8008fd8 <_nx_packet_allocate+0x190>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3301      	adds	r3, #1
 8008f92:	4a11      	ldr	r2, [pc, #68]	; (8008fd8 <_nx_packet_allocate+0x190>)
 8008f94:	6013      	str	r3, [r2, #0]

            /* Save the timeout value.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8008f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	64da      	str	r2, [r3, #76]	; 0x4c
 8008f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	f383 8810 	msr	PRIMASK, r3
}
 8008fa6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8008fa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008faa:	f004 fe13 	bl	800dbd4 <_tx_thread_system_suspend>
                NX_PACKET_DEBUG(__FILE__, __LINE__, *packet_ptr);
            }
#endif /* NX_ENABLE_PACKET_DEBUG_INFO */

            /* Return the completion status.  */
            return(thread_ptr -> tx_thread_suspend_status);
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fb4:	e008      	b.n	8008fc8 <_nx_packet_allocate+0x180>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  NX_NO_PACKET;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f383 8810 	msr	PRIMASK, r3
}
 8008fc4:	bf00      	nop

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_ALLOCATE, 0, *packet_ptr, 0, 0);

    /* Return completion status.  */
    return(status);
 8008fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3730      	adds	r7, #48	; 0x30
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	20014884 	.word	0x20014884
 8008fd4:	080092f5 	.word	0x080092f5
 8008fd8:	2001491c 	.word	0x2001491c

08008fdc <_nx_packet_copy>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_copy(NX_PACKET *packet_ptr, NX_PACKET **new_packet_ptr,
                      NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b08e      	sub	sp, #56	; 0x38
 8008fe0:	af02      	add	r7, sp, #8
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	603b      	str	r3, [r7, #0]
ULONG                  trace_timestamp;
#endif


    /* Default the return packet pointer to NULL.  */
    *new_packet_ptr =  NX_NULL;
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	2200      	movs	r2, #0
 8008fee:	601a      	str	r2, [r3, #0]

    /* Default the first packet to TRUE.  */
    first_packet = NX_TRUE;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_COPY, packet_ptr, 0, pool_ptr, wait_option, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Determine if there is anything to copy.  */
    if (packet_ptr -> nx_packet_length == 0)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d101      	bne.n	8009000 <_nx_packet_copy+0x24>
    {

        /* Empty source packet, return an error.  */
        return(NX_INVALID_PACKET);
 8008ffc:	2312      	movs	r3, #18
 8008ffe:	e079      	b.n	80090f4 <_nx_packet_copy+0x118>
    }

    /* Allocate a new packet from the default packet pool supplied.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 8009000:	f107 0114 	add.w	r1, r7, #20
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	2200      	movs	r2, #0
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff ff1d 	bl	8008e48 <_nx_packet_allocate>
 800900e:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the packet was not allocated.  */
    if (status != NX_SUCCESS)
 8009010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <_nx_packet_copy+0x3e>
    {

        /* Return the error code from the packet allocate routine.  */
        return(status);
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009018:	e06c      	b.n	80090f4 <_nx_packet_copy+0x118>
    }

    /* Copy the packet interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized by _nx_packet_allocate. */
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009020:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* FEATURE_NX_IPV6 */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

    /* Copy the packet interface capability. */
    work_ptr -> nx_packet_interface_capability_flag = packet_ptr -> nx_packet_interface_capability_flag;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009028:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef NX_IPSEC_ENABLE
    work_ptr -> nx_packet_ipsec_sa_ptr = packet_ptr -> nx_packet_ipsec_sa_ptr;
#endif /* NX_IPSEC_ENABLE */

    /* Save the source packet pointer.  */
    source_ptr =  packet_ptr;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	627b      	str	r3, [r7, #36]	; 0x24
    do
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check if it is the first packet.  */
        if (first_packet == NX_TRUE)
 800902e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009030:	2b01      	cmp	r3, #1
 8009032:	d110      	bne.n	8009056 <_nx_packet_copy+0x7a>

            /* Yes, it is, copied the data beginning at data starting position.  */

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_data_start);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 8009040:	6978      	ldr	r0, [r7, #20]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6919      	ldr	r1, [r3, #16]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a3a      	ldr	r2, [r7, #32]
 800904e:	f000 f855 	bl	80090fc <_nx_packet_data_append>
 8009052:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009054:	e00f      	b.n	8009076 <_nx_packet_copy+0x9a>
        else
        {

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	68da      	ldr	r2, [r3, #12]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_prepend_ptr, size, pool_ptr, wait_option);
 8009062:	6978      	ldr	r0, [r7, #20]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6899      	ldr	r1, [r3, #8]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a3a      	ldr	r2, [r7, #32]
 8009070:	f000 f844 	bl	80090fc <_nx_packet_data_append>
 8009074:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        /* Determine if there was an error in the data append.  */
        if (status != NX_SUCCESS)
 8009076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009078:	2b00      	cmp	r3, #0
 800907a:	d005      	beq.n	8009088 <_nx_packet_copy+0xac>
        {

            /* An error is present, release the new packet.  */
            _nx_packet_release(work_ptr);
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	4618      	mov	r0, r3
 8009080:	f000 fa7e 	bl	8009580 <_nx_packet_release>

            /* Return the error code from the packet data append service.  */
            return(status);
 8009084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009086:	e035      	b.n	80090f4 <_nx_packet_copy+0x118>
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the packet chain.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	60fb      	str	r3, [r7, #12]

        /* Set the first packet to FALSE.  */
        first_packet = NX_FALSE;
 800908e:	2300      	movs	r3, #0
 8009090:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (packet_ptr);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1ca      	bne.n	800902e <_nx_packet_copy+0x52>
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Adjust the prepend pointer and data length.  */
    /*lint --e{946} --e{947} --e{732} suppress pointer subtraction, since it is necessary. */
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	61fb      	str	r3, [r7, #28]
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	6919      	ldr	r1, [r3, #16]
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	69fa      	ldr	r2, [r7, #28]
 80090ac:	440a      	add	r2, r1
 80090ae:	609a      	str	r2, [r3, #8]
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	69fa      	ldr	r2, [r7, #28]
 80090b8:	1a8a      	subs	r2, r1, r2
 80090ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the ip_header information. */
    ip_header_offset = (UINT)(source_ptr -> nx_packet_ip_header - source_ptr -> nx_packet_data_start);
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	61bb      	str	r3, [r7, #24]
    work_ptr -> nx_packet_ip_header = work_ptr -> nx_packet_data_start + ip_header_offset;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	6919      	ldr	r1, [r3, #16]
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	69ba      	ldr	r2, [r7, #24]
 80090d0:	440a      	add	r2, r1
 80090d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Determine if the packet copy was successful.  */
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	429a      	cmp	r2, r3
 80090de:	d005      	beq.n	80090ec <_nx_packet_copy+0x110>
    {

        /* An error is present, release the new packet.  */
        _nx_packet_release(work_ptr);
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 fa4c 	bl	8009580 <_nx_packet_release>

        /* Return an error code.  */
        return(NX_INVALID_PACKET);
 80090e8:	2312      	movs	r3, #18
 80090ea:	e003      	b.n	80090f4 <_nx_packet_copy+0x118>
    }
    else
    {

        /* Everything is okay, return the new packet pointer.  */
        *new_packet_ptr =  work_ptr;
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	601a      	str	r2, [r3, #0]

        /* Update the trace event with the status.  */
        NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_COPY, 0, work_ptr, 0, 0);

        /* Return success status.  */
        return(NX_SUCCESS);
 80090f2:	2300      	movs	r3, #0
    }
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3730      	adds	r7, #48	; 0x30
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <_nx_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                             NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b08c      	sub	sp, #48	; 0x30
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	603b      	str	r3, [r7, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
UINT       status;                 /* Return status              */
NX_PACKET *new_list_ptr;           /* Head of new list pointer   */
NX_PACKET *last_packet =  NX_NULL; /* Last supplied packet       */
 800910a:	2300      	movs	r3, #0
 800910c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_APPEND, packet_ptr, data_start, data_size, pool_ptr, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Calculate the number of bytes available at the end of the supplied packet.  */
    if (packet_ptr -> nx_packet_last)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	699b      	ldr	r3, [r3, #24]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d016      	beq.n	8009144 <_nx_packet_data_append+0x48>
    {

        /* More than one packet.  Walk the packet chain starting at the last packet
           to calculate the remaining bytes.  */
        available_bytes =  0;
 8009116:	2300      	movs	r3, #0
 8009118:	627b      	str	r3, [r7, #36]	; 0x24
        work_ptr =  packet_ptr -> nx_packet_last;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	617b      	str	r3, [r7, #20]

            /* Calculate the available bytes in this packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	695a      	ldr	r2, [r3, #20]
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	4413      	add	r3, r2
 8009130:	627b      	str	r3, [r7, #36]	; 0x24

            /* Remember the last packet.  */
            last_packet =  work_ptr;
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Move to the next packet.   There typically won't be another packet, but just in
               case the logic is here for it!  */
            work_ptr =  work_ptr -> nx_packet_next;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	617b      	str	r3, [r7, #20]
        } while (work_ptr);
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1ee      	bne.n	8009120 <_nx_packet_data_append+0x24>
 8009142:	e005      	b.n	8009150 <_nx_packet_data_append+0x54>
#endif /* NX_DISABLE_PACKET_CHAIN */
    {

        /* Just calculate the number of bytes available in the first packet.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        available_bytes =  (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_append_ptr);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	695a      	ldr	r2, [r3, #20]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Determine if any new packets are required to satisfy this request. */
    if (available_bytes < data_size)
 8009150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	429a      	cmp	r2, r3
 8009156:	d247      	bcs.n	80091e8 <_nx_packet_data_append+0xec>
    {

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Setup a temporary head pointer.  */
        new_list_ptr =  NX_NULL;
 8009158:	2300      	movs	r3, #0
 800915a:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Loop to pickup enough packets to complete the append request.  */
        while (available_bytes < data_size)
 800915c:	e033      	b.n	80091c6 <_nx_packet_data_append+0xca>
        {

            /* Allocate a new packet.  */
            status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 800915e:	f107 0114 	add.w	r1, r7, #20
 8009162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009164:	2200      	movs	r2, #0
 8009166:	6838      	ldr	r0, [r7, #0]
 8009168:	f7ff fe6e 	bl	8008e48 <_nx_packet_allocate>
 800916c:	61b8      	str	r0, [r7, #24]

            /* Determine if an error is present.  */
            if (status)
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d007      	beq.n	8009184 <_nx_packet_data_append+0x88>
            {

                /* Yes, an error is present.   */

                /* First release any packets that have been allocated so far.  */
                if (new_list_ptr)
 8009174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009176:	2b00      	cmp	r3, #0
 8009178:	d002      	beq.n	8009180 <_nx_packet_data_append+0x84>
                {
                    _nx_packet_release(new_list_ptr);
 800917a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800917c:	f000 fa00 	bl	8009580 <_nx_packet_release>
                }

                /* Return the error status to the caller of this service.  */
                return(status);
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	e078      	b.n	8009276 <_nx_packet_data_append+0x17a>

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, work_ptr);

            /* No error is present.  Link the new packet to the temporary list being built.  */
            if (new_list_ptr)
 8009184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009186:	2b00      	cmp	r3, #0
 8009188:	d012      	beq.n	80091b0 <_nx_packet_data_append+0xb4>
            {

                /* Determine if there is already more than one packet on the list.  */
                if (new_list_ptr -> nx_packet_last)
 800918a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d007      	beq.n	80091a2 <_nx_packet_data_append+0xa6>
                {

                    /* Yes, link up the last packet to the new packet and update the
                       last pointer.  */
                    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized in _nx_packet_allocate. */
                    (new_list_ptr -> nx_packet_last) -> nx_packet_next =  work_ptr;
 8009192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	605a      	str	r2, [r3, #4]
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919e:	619a      	str	r2, [r3, #24]
 80091a0:	e008      	b.n	80091b4 <_nx_packet_data_append+0xb8>
                else
                {

                    /* Second packet allocated.  Just setup the last and next in the
                       head pointer.  */
                    new_list_ptr -> nx_packet_last =  work_ptr;
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a6:	619a      	str	r2, [r3, #24]
                    new_list_ptr -> nx_packet_next =  work_ptr;
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ac:	605a      	str	r2, [r3, #4]
 80091ae:	e001      	b.n	80091b4 <_nx_packet_data_append+0xb8>
            }
            else
            {

                /* Just setup the temporary list head.  */
                new_list_ptr =  work_ptr;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	62fb      	str	r3, [r7, #44]	; 0x2c
               is in the new packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            /*lint -e{613} suppress possible use of null pointer, since "work_ptr" was set in _nx_packet_allocate. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	695a      	ldr	r2, [r3, #20]
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	4413      	add	r3, r2
 80091c4:	627b      	str	r3, [r7, #36]	; 0x24
        while (available_bytes < data_size)
 80091c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d3c7      	bcc.n	800915e <_nx_packet_data_append+0x62>
        }

        /* At this point, all the necessary packets have been allocated and are present
           on the temporary list.  We need to link this new list to the end of the supplied
           packet.  */
        if (last_packet)
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d003      	beq.n	80091dc <_nx_packet_data_append+0xe0>
        {

            /* Already more than one packet.  Add the new packet list to the end.  */
            last_packet -> nx_packet_next =  new_list_ptr;
 80091d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091d8:	605a      	str	r2, [r3, #4]
 80091da:	e002      	b.n	80091e2 <_nx_packet_data_append+0xe6>
        }
        else
        {

            /* Link the new packet list to the head packet.  */
            packet_ptr -> nx_packet_next =  new_list_ptr;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091e0:	605a      	str	r2, [r3, #4]
        }

        /* Clear the last packet that was used to maintain the new list.  */
        /*lint -e{613} suppress possible use of null pointer, since "new_list_ptr" was set in previous loop. */
        new_list_ptr -> nx_packet_last =  NX_NULL;
 80091e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e4:	2200      	movs	r2, #0
 80091e6:	619a      	str	r2, [r3, #24]
        return(NX_SIZE_ERROR);
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Setup the new data length in the packet.  */
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	441a      	add	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Now copy the supplied data buffer at the end of the packet.  */
    source_ptr =  (UCHAR *)data_start;
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	61fb      	str	r3, [r7, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
    if (packet_ptr -> nx_packet_last)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d003      	beq.n	8009208 <_nx_packet_data_append+0x10c>
    {
        work_ptr =    packet_ptr -> nx_packet_last;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	617b      	str	r3, [r7, #20]
 8009206:	e032      	b.n	800926e <_nx_packet_data_append+0x172>
    }
    else
    {
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr =    packet_ptr;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	617b      	str	r3, [r7, #20]
#ifndef NX_DISABLE_PACKET_CHAIN
    }
    while (data_size)
 800920c:	e02f      	b.n	800926e <_nx_packet_data_append+0x172>
    {

        /* Determine the amount of memory to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	695a      	ldr	r2, [r3, #20]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	461a      	mov	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4293      	cmp	r3, r2
 800921e:	d202      	bcs.n	8009226 <_nx_packet_data_append+0x12a>
        {
            copy_size =  data_size;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	623b      	str	r3, [r7, #32]
 8009224:	e005      	b.n	8009232 <_nx_packet_data_append+0x136>
        }
        else
        {

            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            copy_size =  (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	695a      	ldr	r2, [r3, #20]
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	623b      	str	r3, [r7, #32]
#else
        copy_size = data_size;
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Copy the data into the current packet buffer.  */
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size); /* Use case of memcpy is verified.  lgtm[cpp/banned-api-usage-required-any] */
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	6a3a      	ldr	r2, [r7, #32]
 8009238:	69f9      	ldr	r1, [r7, #28]
 800923a:	4618      	mov	r0, r3
 800923c:	f006 f8e1 	bl	800f402 <memcpy>

        /* Adjust the remaining data size.  */
        data_size =  data_size - copy_size;
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	6a3b      	ldr	r3, [r7, #32]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	607b      	str	r3, [r7, #4]

        /* Update this packets append pointer.  */
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	68d9      	ldr	r1, [r3, #12]
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	6a3a      	ldr	r2, [r7, #32]
 8009250:	440a      	add	r2, r1
 8009252:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Any more data left to append?  */
        if (data_size)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d009      	beq.n	800926e <_nx_packet_data_append+0x172>
        {

            /* Yes, there is more to move.  Update the source pointer, move the work pointer
               to the next packet in the chain and update the last packet pointer.  */
            source_ptr =  source_ptr + copy_size;
 800925a:	69fa      	ldr	r2, [r7, #28]
 800925c:	6a3b      	ldr	r3, [r7, #32]
 800925e:	4413      	add	r3, r2
 8009260:	61fb      	str	r3, [r7, #28]
            work_ptr =  work_ptr -> nx_packet_next;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	617b      	str	r3, [r7, #20]
            packet_ptr -> nx_packet_last =  work_ptr;
 8009268:	697a      	ldr	r2, [r7, #20]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	619a      	str	r2, [r3, #24]
    while (data_size)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1cc      	bne.n	800920e <_nx_packet_data_append+0x112>

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Return successful status.  */
    return(NX_SUCCESS);
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3730      	adds	r7, #48	; 0x30
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <_nx_packet_data_retrieve>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_retrieve(NX_PACKET *packet_ptr, VOID *buffer_start, ULONG *bytes_copied)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b088      	sub	sp, #32
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_RETRIEVE, packet_ptr, buffer_start, bytes_copied, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Setup the destination pointer.  */
    destination_ptr =  buffer_start;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	61bb      	str	r3, [r7, #24]

    /* Pickup the amount of bytes to copy.  */
    *bytes_copied =  packet_ptr -> nx_packet_length;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	601a      	str	r2, [r3, #0]

    /* Setup the remaining bytes.  */
    remaining_bytes =  packet_ptr -> nx_packet_length;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929a:	61fb      	str	r3, [r7, #28]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to copy bytes from packet(s).  */
    while (packet_ptr)
 800929c:	e017      	b.n	80092ce <_nx_packet_data_retrieve+0x50>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Calculate the bytes to copy in this packet. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        bytes_to_copy = (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	617b      	str	r3, [r7, #20]

        /* Copy data to destination. */
        /* Note: The buffer size must be not less than packet_ptr -> nx_packet_length.  */
        memcpy(destination_ptr, packet_ptr -> nx_packet_prepend_ptr, bytes_to_copy); /* Use case of memcpy is verified. The buffer is provided by user.  lgtm[cpp/banned-api-usage-required-any] */
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	4619      	mov	r1, r3
 80092b2:	69b8      	ldr	r0, [r7, #24]
 80092b4:	f006 f8a5 	bl	800f402 <memcpy>

        remaining_bytes -= bytes_to_copy;
 80092b8:	69fa      	ldr	r2, [r7, #28]
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	61fb      	str	r3, [r7, #28]
        destination_ptr += bytes_to_copy;
 80092c0:	69ba      	ldr	r2, [r7, #24]
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	4413      	add	r3, r2
 80092c6:	61bb      	str	r3, [r7, #24]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to next packet.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	60fb      	str	r3, [r7, #12]
    while (packet_ptr)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e4      	bne.n	800929e <_nx_packet_data_retrieve+0x20>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if the packet chain was valid.  */
    if (remaining_bytes)
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d007      	beq.n	80092ea <_nx_packet_data_retrieve+0x6c>
    {

        /* Invalid packet chain.  Calculate the actual number of bytes
           copied.  */
        *bytes_copied =  *bytes_copied - remaining_bytes;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	1ad2      	subs	r2, r2, r3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	601a      	str	r2, [r3, #0]

        /* Return an error.  */
        return(NX_INVALID_PACKET);
 80092e6:	2312      	movs	r3, #18
 80092e8:	e000      	b.n	80092ec <_nx_packet_data_retrieve+0x6e>
    }

    /* Return successful completion.  */
    return(NX_SUCCESS);
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3720      	adds	r7, #32
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <_nx_packet_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_packet_pool_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b088      	sub	sp, #32
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
NX_PACKET_POOL *pool_ptr;   /* Working packet pool pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to packet pool control block.  */
    pool_ptr =  (NX_PACKET_POOL *)thread_ptr -> tx_thread_suspend_control_block;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009302:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009304:	f3ef 8310 	mrs	r3, PRIMASK
 8009308:	617b      	str	r3, [r7, #20]
    return(posture);
 800930a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800930c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800930e:	b672      	cpsid	i
    return(int_posture);
 8009310:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the packet pool.  */
    TX_DISABLE
 8009312:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009318:	2b00      	cmp	r3, #0
 800931a:	d042      	beq.n	80093a2 <_nx_packet_pool_cleanup+0xae>
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d03f      	beq.n	80093a2 <_nx_packet_pool_cleanup+0xae>
        (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 8009326:	4a23      	ldr	r2, [pc, #140]	; (80093b4 <_nx_packet_pool_cleanup+0xc0>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d13a      	bne.n	80093a2 <_nx_packet_pool_cleanup+0xae>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	429a      	cmp	r2, r3
 800933a:	d103      	bne.n	8009344 <_nx_packet_pool_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	2200      	movs	r2, #0
 8009340:	62da      	str	r2, [r3, #44]	; 0x2c
 8009342:	e012      	b.n	800936a <_nx_packet_pool_cleanup+0x76>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer if necessary.  */
            if (pool_ptr -> nx_packet_pool_suspension_list == thread_ptr)
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	429a      	cmp	r2, r3
 800934c:	d103      	bne.n	8009356 <_nx_packet_pool_cleanup+0x62>
            {
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	62da      	str	r2, [r3, #44]	; 0x2c
            }

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800935e:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009368:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936e:	1e5a      	subs	r2, r3, #1
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	631a      	str	r2, [r3, #48]	; 0x30

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009378:	2b0c      	cmp	r3, #12
 800937a:	d112      	bne.n	80093a2 <_nx_packet_pool_cleanup+0xae>

            /* Thread still suspended on the packet pool.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009384:	4b0c      	ldr	r3, [pc, #48]	; (80093b8 <_nx_packet_pool_cleanup+0xc4>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3301      	adds	r3, #1
 800938a:	4a0b      	ldr	r2, [pc, #44]	; (80093b8 <_nx_packet_pool_cleanup+0xc4>)
 800938c:	6013      	str	r3, [r2, #0]
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f383 8810 	msr	PRIMASK, r3
}
 8009398:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f004 fb1a 	bl	800d9d4 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 80093a0:	e005      	b.n	80093ae <_nx_packet_pool_cleanup+0xba>
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	f383 8810 	msr	PRIMASK, r3
}
 80093ac:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 80093ae:	3720      	adds	r7, #32
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	5041434b 	.word	0x5041434b
 80093b8:	2001491c 	.word	0x2001491c

080093bc <_nx_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                             VOID *pool_start, ULONG pool_size)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b092      	sub	sp, #72	; 0x48
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	603b      	str	r3, [r7, #0]
CHAR           *payload_address;       /* Address of the first payload*/
VOID           *rounded_pool_start;    /* Rounded stating address     */


    /* Save the original payload size.  */
    original_payload_size =  payload_size;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	3303      	adds	r3, #3
 80093d2:	f023 0303 	bic.w	r3, r3, #3
 80093d6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 80093d8:	683a      	ldr	r2, [r7, #0]
 80093da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093dc:	1ad2      	subs	r2, r2, r3
 80093de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093e0:	4413      	add	r3, r2
 80093e2:	f023 0303 	bic.w	r3, r3, #3
 80093e6:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the pool starting address. */
    pool_start = rounded_pool_start;
 80093e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ea:	603b      	str	r3, [r7, #0]

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 80093ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ee:	333c      	adds	r3, #60	; 0x3c
 80093f0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	3303      	adds	r3, #3
 80093f6:	f023 0303 	bic.w	r3, r3, #3
 80093fa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 80093fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    payload_size = (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 8009404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4413      	add	r3, r2
 800940a:	3303      	adds	r3, #3
 800940c:	f023 0203 	bic.w	r2, r3, #3
 8009410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	607b      	str	r3, [r7, #4]

    /* Clear pool fields. */
    memset(pool_ptr, 0, sizeof(NX_PACKET_POOL));
 8009416:	223c      	movs	r2, #60	; 0x3c
 8009418:	2100      	movs	r1, #0
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f005 ff76 	bl	800f30c <memset>

    /* Setup the basic packet pool fields.  */
    pool_ptr -> nx_packet_pool_name =             name_ptr;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	605a      	str	r2, [r3, #4]
    pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	62da      	str	r2, [r3, #44]	; 0x2c
    pool_ptr -> nx_packet_pool_suspended_count =  0;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	631a      	str	r2, [r3, #48]	; 0x30
    pool_ptr -> nx_packet_pool_start =            (CHAR *)pool_start;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	683a      	ldr	r2, [r7, #0]
 8009436:	621a      	str	r2, [r3, #32]
    pool_ptr -> nx_packet_pool_size =             pool_size;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800943c:	625a      	str	r2, [r3, #36]	; 0x24
    pool_ptr -> nx_packet_pool_payload_size =     original_payload_size;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009442:	629a      	str	r2, [r3, #40]	; 0x28

    /* Calculate the end of the pool's memory area.  */
    end_of_pool =  ((CHAR *)pool_start) + pool_size;
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009448:	4413      	add	r3, r2
 800944a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Walk through the pool area, setting up the available packet list.  */
    packets =            0;
 800944c:	2300      	movs	r3, #0
 800944e:	647b      	str	r3, [r7, #68]	; 0x44
    packet_ptr =         (CHAR *)rounded_pool_start;
 8009450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009452:	643b      	str	r3, [r7, #64]	; 0x40
    next_packet_ptr =    packet_ptr + (payload_size + header_size);
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009458:	4413      	add	r3, r2
 800945a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800945c:	4413      	add	r3, r2
 800945e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    while (next_packet_ptr <= end_of_pool)
 8009460:	e023      	b.n	80094aa <_nx_packet_pool_create+0xee>
    {

        /* Yes, we have another packet.  Increment the packet count.  */
        packets++;
 8009462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009464:	3301      	adds	r3, #1
 8009466:	647b      	str	r3, [r7, #68]	; 0x44

        /* Setup the link to the next packet.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  (NX_PACKET *)next_packet_ptr;
 8009468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800946a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800946c:	61da      	str	r2, [r3, #28]

        /* Remember that this packet pool is the owner.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_pool_owner =  pool_ptr;
 800946e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	601a      	str	r2, [r3, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Clear the next packet pointer.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
 8009474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009476:	2200      	movs	r2, #0
 8009478:	605a      	str	r2, [r3, #4]
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Mark the packet as free.  */
        /*lint -e{929} -e{923} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 800947a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800947c:	f04f 32ff 	mov.w	r2, #4294967295
 8009480:	621a      	str	r2, [r3, #32]

        /* Setup the packet data pointers.  */
        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_start =  (UCHAR *)(packet_ptr + header_size);
 8009482:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009486:	441a      	add	r2, r3
 8009488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800948a:	611a      	str	r2, [r3, #16]

        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 800948c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800948e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009490:	4413      	add	r3, r2
 8009492:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009494:	441a      	add	r2, r3
 8009496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009498:	615a      	str	r2, [r3, #20]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, (NX_PACKET *)packet_ptr);

        /* Advance to the next packet.  */
        packet_ptr =   next_packet_ptr;
 800949a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800949c:	643b      	str	r3, [r7, #64]	; 0x40

        /* Update the next packet pointer.  */
        next_packet_ptr =  packet_ptr + (payload_size + header_size);
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a2:	4413      	add	r3, r2
 80094a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094a6:	4413      	add	r3, r2
 80094a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (next_packet_ptr <= end_of_pool)
 80094aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d9d7      	bls.n	8009462 <_nx_packet_pool_create+0xa6>
    }

    /* Backup to the last packet in the pool.  */
    packet_ptr =  packet_ptr - (payload_size + header_size);
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b6:	4413      	add	r3, r2
 80094b8:	425b      	negs	r3, r3
 80094ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094bc:	4413      	add	r3, r2
 80094be:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the last packet's forward pointer to NULL.  */
    /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  NX_NULL;
 80094c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094c2:	2200      	movs	r2, #0
 80094c4:	61da      	str	r2, [r3, #28]

    /* Save the remaining information in the pool control packet.  */
    pool_ptr -> nx_packet_pool_available =  packets;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094ca:	609a      	str	r2, [r3, #8]
    pool_ptr -> nx_packet_pool_total =      packets;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094d0:	60da      	str	r2, [r3, #12]

    /* Set the packet pool available list.  */
    pool_ptr -> nx_packet_pool_available_list =  (NX_PACKET *)pool_start;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	61da      	str	r2, [r3, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80094d8:	f3ef 8310 	mrs	r3, PRIMASK
 80094dc:	61fb      	str	r3, [r7, #28]
    return(posture);
 80094de:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80094e0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80094e2:	b672      	cpsid	i
    return(int_posture);
 80094e4:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_POOL_CREATE, pool_ptr, payload_size, pool_start, pool_size, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts to place the packet pool on the created list.  */
    TX_DISABLE
 80094e6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the packet pool ID to make it valid.  */
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	4a19      	ldr	r2, [pc, #100]	; (8009550 <_nx_packet_pool_create+0x194>)
 80094ec:	601a      	str	r2, [r3, #0]

    /* Place the packet pool on the list of created packet pools.  First,
       check for an empty list.  */
    if (_nx_packet_pool_created_ptr)
 80094ee:	4b19      	ldr	r3, [pc, #100]	; (8009554 <_nx_packet_pool_create+0x198>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d012      	beq.n	800951c <_nx_packet_pool_create+0x160>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous;
 80094f6:	4b17      	ldr	r3, [pc, #92]	; (8009554 <_nx_packet_pool_create+0x198>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fc:	623b      	str	r3, [r7, #32]

        /* Place the new packet pool in the list.  */
        _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 80094fe:	4b15      	ldr	r3, [pc, #84]	; (8009554 <_nx_packet_pool_create+0x198>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	639a      	str	r2, [r3, #56]	; 0x38
        tail_ptr -> nx_packet_pool_created_next =  pool_ptr;
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup this packet pool's created links.  */
        pool_ptr -> nx_packet_pool_created_previous =  tail_ptr;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6a3a      	ldr	r2, [r7, #32]
 8009510:	639a      	str	r2, [r3, #56]	; 0x38
        pool_ptr -> nx_packet_pool_created_next =      _nx_packet_pool_created_ptr;
 8009512:	4b10      	ldr	r3, [pc, #64]	; (8009554 <_nx_packet_pool_create+0x198>)
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	635a      	str	r2, [r3, #52]	; 0x34
 800951a:	e008      	b.n	800952e <_nx_packet_pool_create+0x172>
    }
    else
    {

        /* The created packet pool list is empty.  Add packet pool to empty list.  */
        _nx_packet_pool_created_ptr =                  pool_ptr;
 800951c:	4a0d      	ldr	r2, [pc, #52]	; (8009554 <_nx_packet_pool_create+0x198>)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6013      	str	r3, [r2, #0]
        pool_ptr -> nx_packet_pool_created_next =      pool_ptr;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	635a      	str	r2, [r3, #52]	; 0x34
        pool_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Increment the number of packet pools created.  */
    _nx_packet_pool_created_count++;
 800952e:	4b0a      	ldr	r3, [pc, #40]	; (8009558 <_nx_packet_pool_create+0x19c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3301      	adds	r3, #1
 8009534:	4a08      	ldr	r2, [pc, #32]	; (8009558 <_nx_packet_pool_create+0x19c>)
 8009536:	6013      	str	r3, [r2, #0]
 8009538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	f383 8810 	msr	PRIMASK, r3
}
 8009542:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3748      	adds	r7, #72	; 0x48
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	5041434b 	.word	0x5041434b
 8009554:	20014830 	.word	0x20014830
 8009558:	20014834 	.word	0x20014834

0800955c <_nx_packet_pool_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _nx_packet_pool_initialize(VOID)
{
 800955c:	b480      	push	{r7}
 800955e:	af00      	add	r7, sp, #0

    /* Initialize the head pointer of the created packet pools list and the
       number of packet pools created.  */
    _nx_packet_pool_created_ptr =        NX_NULL;
 8009560:	4b05      	ldr	r3, [pc, #20]	; (8009578 <_nx_packet_pool_initialize+0x1c>)
 8009562:	2200      	movs	r2, #0
 8009564:	601a      	str	r2, [r3, #0]
    _nx_packet_pool_created_count =      0;
 8009566:	4b05      	ldr	r3, [pc, #20]	; (800957c <_nx_packet_pool_initialize+0x20>)
 8009568:	2200      	movs	r2, #0
 800956a:	601a      	str	r2, [r3, #0]
}
 800956c:	bf00      	nop
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	20014830 	.word	0x20014830
 800957c:	20014834 	.word	0x20014834

08009580 <_nx_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_release(NX_PACKET *packet_ptr)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b08a      	sub	sp, #40	; 0x28
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to free all packets chained together, not assuming they are
       from the same pool.  */
    while (packet_ptr)
 8009588:	e0a5      	b.n	80096d6 <_nx_packet_release+0x156>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check to see if the packet is releasable.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8009592:	d011      	beq.n	80095b8 <_nx_packet_release+0x38>
        {

#ifndef NX_DISABLE_PACKET_INFO
            /* Pickup the pool pointer.  */
            pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	61fb      	str	r3, [r7, #28]

            /* Check for a good pool pointer...  error must be the packet!  */
            if ((pool_ptr) && (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d009      	beq.n	80095b4 <_nx_packet_release+0x34>
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a50      	ldr	r2, [pc, #320]	; (80096e8 <_nx_packet_release+0x168>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d104      	bne.n	80095b4 <_nx_packet_release+0x34>
            {

                /* Increment the packet pool invalid release error count.  */
                pool_ptr -> nx_packet_pool_invalid_releases++;
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	619a      	str	r2, [r3, #24]
            }
#endif

            /* Return an error indicating the packet could not be released.  */
            return(NX_PTR_ERROR);
 80095b4:	2307      	movs	r3, #7
 80095b6:	e093      	b.n	80096e0 <_nx_packet_release+0x160>
        }
        /* End of packet check.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Pickup the next packet. */
        next_packet =  packet_ptr -> nx_packet_next;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80095be:	f3ef 8310 	mrs	r3, PRIMASK
 80095c2:	617b      	str	r3, [r7, #20]
    return(posture);
 80095c4:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80095c6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80095c8:	b672      	cpsid	i
    return(int_posture);
 80095ca:	693b      	ldr	r3, [r7, #16]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Disable interrupts to put this packet back in the packet pool.  */
        TX_DISABLE
 80095cc:	623b      	str	r3, [r7, #32]

        /* Pickup the pool pointer.  */
        pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	61fb      	str	r3, [r7, #28]

        /* Determine if there are any threads suspended on the block pool.  */
        thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d8:	61bb      	str	r3, [r7, #24]
        if (thread_ptr)
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d062      	beq.n	80096a6 <_nx_packet_release+0x126>
        {

            /* Remove the suspended thread from the list.  */

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e4:	69ba      	ldr	r2, [r7, #24]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d103      	bne.n	80095f2 <_nx_packet_release+0x72>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  NX_NULL;
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	2200      	movs	r2, #0
 80095ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80095f0:	e00d      	b.n	800960e <_nx_packet_release+0x8e>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 80095fe:	69ba      	ldr	r2, [r7, #24]
 8009600:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009602:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 8009608:	69ba      	ldr	r2, [r7, #24]
 800960a:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800960c:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            pool_ptr -> nx_packet_pool_suspended_count--;
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009612:	1e5a      	subs	r2, r3, #1
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	631a      	str	r2, [r3, #48]	; 0x30

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	2200      	movs	r2, #0
 800961c:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800961e:	4b33      	ldr	r3, [pc, #204]	; (80096ec <_nx_packet_release+0x16c>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3301      	adds	r3, #1
 8009624:	4a31      	ldr	r2, [pc, #196]	; (80096ec <_nx_packet_release+0x16c>)
 8009626:	6013      	str	r3, [r2, #0]
 8009628:	6a3b      	ldr	r3, [r7, #32]
 800962a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f383 8810 	msr	PRIMASK, r3
}
 8009632:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to look just like a new packet.  */
            packet_ptr -> nx_packet_queue_next  =  NX_NULL;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
            packet_ptr -> nx_packet_next        =  NX_NULL;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	605a      	str	r2, [r3, #4]
            packet_ptr -> nx_packet_last        =  NX_NULL;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
            packet_ptr -> nx_packet_length      =  0;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	691a      	ldr	r2, [r3, #16]
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009654:	441a      	add	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	609a      	str	r2, [r3, #8]
            packet_ptr -> nx_packet_append_ptr  =  packet_ptr -> nx_packet_prepend_ptr;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	689a      	ldr	r2, [r3, #8]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	60da      	str	r2, [r3, #12]
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            packet_ptr -> nx_packet_interface_capability_flag = 0;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
            /* Set the TCP queue to the value that indicates it has been allocated.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8009674:	621a      	str	r2, [r3, #32]
            /* Clear the ipsec state. */
            packet_ptr -> nx_packet_ipsec_state = 0;
#endif /* NX_IPSEC_ENABLE */

            /* Clear the IP version.  */
            packet_ptr -> nx_packet_ip_version  =  0;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            /* Clear the IP identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_FALSE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

            /* Initialize the IP header length. */
            packet_ptr -> nx_packet_ip_header_length = 0;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	601a      	str	r2, [r3, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	2200      	movs	r2, #0
 800969a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800969e:	69b8      	ldr	r0, [r7, #24]
 80096a0:	f004 f998 	bl	800d9d4 <_tx_thread_system_resume>
 80096a4:	e015      	b.n	80096d2 <_nx_packet_release+0x152>

            /* No thread is suspended for a memory block.  */

            /* Mark the packet as free.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f04f 32ff 	mov.w	r2, #4294967295
 80096ac:	621a      	str	r2, [r3, #32]

            /* Put the packet back in the available list.  */
            packet_ptr -> nx_packet_queue_next =  pool_ptr -> nx_packet_pool_available_list;
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	69da      	ldr	r2, [r3, #28]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	61da      	str	r2, [r3, #28]

            /* Adjust the head pointer.  */
            pool_ptr -> nx_packet_pool_available_list =  packet_ptr;
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	61da      	str	r2, [r3, #28]

            /* Increment the count of available blocks.  */
            pool_ptr -> nx_packet_pool_available++;
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	609a      	str	r2, [r3, #8]
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	f383 8810 	msr	PRIMASK, r3
}
 80096d0:	bf00      	nop
            TX_RESTORE
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the list.  */
        packet_ptr =  next_packet;
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	607b      	str	r3, [r7, #4]
    while (packet_ptr)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f47f af56 	bne.w	800958a <_nx_packet_release+0xa>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Return completion status.  */
    return(NX_SUCCESS);
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3728      	adds	r7, #40	; 0x28
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	5041434b 	.word	0x5041434b
 80096ec:	2001491c 	.word	0x2001491c

080096f0 <_nx_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_transmit_release(NX_PACKET *packet_ptr)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80096f8:	f3ef 8310 	mrs	r3, PRIMASK
 80096fc:	617b      	str	r3, [r7, #20]
    return(posture);
 80096fe:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009700:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009702:	b672      	cpsid	i
    return(int_posture);
 8009704:	693b      	ldr	r3, [r7, #16]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_TRANSMIT_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts temporarily.  */
    TX_DISABLE
 8009706:	61bb      	str	r3, [r7, #24]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the packet is a queued TCP data packet.  Such packets cannot be released
       immediately, since they may need to be resent.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a1b      	ldr	r3, [r3, #32]
 800970c:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8009710:	d025      	beq.n	800975e <_nx_packet_transmit_release+0x6e>
        (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_FREE)))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a1b      	ldr	r3, [r3, #32]
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 8009716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800971a:	d020      	beq.n	800975e <_nx_packet_transmit_release+0x6e>
    {

        /* Yes, this is indeed a TCP packet.  Just mark this with the NX_DRIVER_TX_DONE
           value to let the TCP layer know it is no longer queued up.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f04f 32dd 	mov.w	r2, #3722304989	; 0xdddddddd
 8009722:	61da      	str	r2, [r3, #28]

        /* Remove the IP header and adjust the length.  */
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800972e:	441a      	add	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800973e:	1a9a      	subs	r2, r3, r2
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	625a      	str	r2, [r3, #36]	; 0x24

        /* Reset the IP header length. */
        packet_ptr -> nx_packet_ip_header_length = 0;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f383 8810 	msr	PRIMASK, r3
}
 8009756:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  NX_SUCCESS;
 8009758:	2300      	movs	r3, #0
 800975a:	61fb      	str	r3, [r7, #28]
 800975c:	e009      	b.n	8009772 <_nx_packet_transmit_release+0x82>
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	f383 8810 	msr	PRIMASK, r3
}
 8009768:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual packet release function.  */
        status =  _nx_packet_release(packet_ptr);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7ff ff08 	bl	8009580 <_nx_packet_release>
 8009770:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8009772:	69fb      	ldr	r3, [r7, #28]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3720      	adds	r7, #32
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <_nx_rarp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_rarp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b088      	sub	sp, #32
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009786:	f3ef 8310 	mrs	r3, PRIMASK
 800978a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800978c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800978e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009790:	b672      	cpsid	i
    return(int_posture);
 8009792:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8009794:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if RARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_rarp_queue_process)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 800979c:	2b00      	cmp	r3, #0
 800979e:	d110      	bne.n	80097c2 <_nx_rarp_packet_deferred_receive+0x46>

        /* RARP is not enabled.  */

#ifndef NX_DISABLE_RARP_INFO
        /* Increment the RARP invalid messages count...  */
        ip_ptr -> nx_ip_rarp_invalid_messages++;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80097a6:	1c5a      	adds	r2, r3, #1
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f383 8810 	msr	PRIMASK, r3
}
 80097b8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since RARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 80097ba:	6838      	ldr	r0, [r7, #0]
 80097bc:	f7ff fee0 	bl	8009580 <_nx_packet_release>

        /* Return to caller.  */
        return;
 80097c0:	e02f      	b.n	8009822 <_nx_rarp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the RARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_rarp_deferred_received_packet_head)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d011      	beq.n	80097f0 <_nx_rarp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the RARP deferred queue.  */
        (ip_ptr -> nx_ip_rarp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2200      	movs	r2, #0
 80097da:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	683a      	ldr	r2, [r7, #0]
 80097e0:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f383 8810 	msr	PRIMASK, r3
}
 80097ee:	e018      	b.n	8009822 <_nx_rarp_packet_deferred_receive+0xa6>
    {

        /* Empty RARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the RARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_rarp_deferred_received_packet_head =  packet_ptr;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        packet_ptr -> nx_packet_queue_next =                  NX_NULL;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	2200      	movs	r2, #0
 8009804:	61da      	str	r2, [r3, #28]
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	f383 8810 	msr	PRIMASK, r3
}
 8009810:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the RARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8009818:	2200      	movs	r2, #0
 800981a:	2120      	movs	r1, #32
 800981c:	4618      	mov	r0, r3
 800981e:	f002 fd13 	bl	800c248 <_tx_event_flags_set>
    }
}
 8009822:	3720      	adds	r7, #32
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <_nx_system_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_system_initialize(VOID)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	af00      	add	r7, sp, #0

    /* Check whether or not system has been initialized? */
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 800982c:	4b38      	ldr	r3, [pc, #224]	; (8009910 <_nx_system_initialize+0xe8>)
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	4b38      	ldr	r3, [pc, #224]	; (8009914 <_nx_system_initialize+0xec>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	431a      	orrs	r2, r3
 8009836:	4b38      	ldr	r3, [pc, #224]	; (8009918 <_nx_system_initialize+0xf0>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	431a      	orrs	r2, r3
        _nx_system_build_options_3 | _nx_system_build_options_4 | _nx_system_build_options_5)
 800983c:	4b37      	ldr	r3, [pc, #220]	; (800991c <_nx_system_initialize+0xf4>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	431a      	orrs	r2, r3
 8009842:	4b37      	ldr	r3, [pc, #220]	; (8009920 <_nx_system_initialize+0xf8>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4313      	orrs	r3, r2
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 8009848:	2b00      	cmp	r3, #0
 800984a:	d15e      	bne.n	800990a <_nx_system_initialize+0xe2>

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Call the packet pool initialization component for NetX.  */
    _nx_packet_pool_initialize();
 800984c:	f7ff fe86 	bl	800955c <_nx_packet_pool_initialize>

    /* Call the IP component initialization.  */
    _nx_ip_initialize();
 8009850:	f7fe f864 	bl	800791c <_nx_ip_initialize>

    /* Call the TCP component initialization.  */
    /*lint -e{522} suppress lack of side-effects.  */
    _nx_tcp_initialize();
 8009854:	f000 f866 	bl	8009924 <_nx_tcp_initialize>

    /* Setup the build options variables.  */
    _nx_system_build_options_1 = 0
 8009858:	4b2d      	ldr	r3, [pc, #180]	; (8009910 <_nx_system_initialize+0xe8>)
 800985a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800985e:	601a      	str	r2, [r3, #0]

    /* Add the retry shift value to the options.  */
#if (NX_TCP_RETRY_SHIFT > 0xF)
    _nx_system_build_options_1 |=  0xF;
#else
    _nx_system_build_options_1 |=  NX_TCP_RETRY_SHIFT;
 8009860:	4b2b      	ldr	r3, [pc, #172]	; (8009910 <_nx_system_initialize+0xe8>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a2a      	ldr	r2, [pc, #168]	; (8009910 <_nx_system_initialize+0xe8>)
 8009866:	6013      	str	r3, [r2, #0]
#endif

#if (NX_IP_PERIODIC_RATE > 0xFFFFUL)
    _nx_system_build_options_2 =  ((ULONG)0xFFFF0000);
#else
    _nx_system_build_options_2 =  ((ULONG)NX_IP_PERIODIC_RATE) << 16;
 8009868:	4b2a      	ldr	r3, [pc, #168]	; (8009914 <_nx_system_initialize+0xec>)
 800986a:	f44f 02c8 	mov.w	r2, #6553600	; 0x640000
 800986e:	601a      	str	r2, [r3, #0]
#endif

#if (NX_ARP_EXPIRATION_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_EXPIRATION_RATE) << 8;
 8009870:	4b28      	ldr	r3, [pc, #160]	; (8009914 <_nx_system_initialize+0xec>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a27      	ldr	r2, [pc, #156]	; (8009914 <_nx_system_initialize+0xec>)
 8009876:	6013      	str	r3, [r2, #0]
#endif
#if (NX_ARP_UPDATE_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_UPDATE_RATE);
 8009878:	4b26      	ldr	r3, [pc, #152]	; (8009914 <_nx_system_initialize+0xec>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f043 030a 	orr.w	r3, r3, #10
 8009880:	4a24      	ldr	r2, [pc, #144]	; (8009914 <_nx_system_initialize+0xec>)
 8009882:	6013      	str	r3, [r2, #0]

    /* Setup third option word.  */
#if (NX_TCP_ACK_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 =  ((ULONG)0xFF000000);
#else
    _nx_system_build_options_3 =  ((ULONG)NX_TCP_ACK_TIMER_RATE) << 24;
 8009884:	4b24      	ldr	r3, [pc, #144]	; (8009918 <_nx_system_initialize+0xf0>)
 8009886:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
 800988a:	601a      	str	r2, [r3, #0]
#endif
#if (NX_TCP_FAST_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF) << 16;
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_FAST_TIMER_RATE) << 16;
 800988c:	4b22      	ldr	r3, [pc, #136]	; (8009918 <_nx_system_initialize+0xf0>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8009894:	4a20      	ldr	r2, [pc, #128]	; (8009918 <_nx_system_initialize+0xf0>)
 8009896:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_TRANSMIT_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_TRANSMIT_TIMER_RATE) << 8;
 8009898:	4b1f      	ldr	r3, [pc, #124]	; (8009918 <_nx_system_initialize+0xf0>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098a0:	4a1d      	ldr	r2, [pc, #116]	; (8009918 <_nx_system_initialize+0xf0>)
 80098a2:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_KEEPALIVE_RETRY > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRY);
 80098a4:	4b1c      	ldr	r3, [pc, #112]	; (8009918 <_nx_system_initialize+0xf0>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f043 034b 	orr.w	r3, r3, #75	; 0x4b
 80098ac:	4a1a      	ldr	r2, [pc, #104]	; (8009918 <_nx_system_initialize+0xf0>)
 80098ae:	6013      	str	r3, [r2, #0]

    /* Setup the fourth option word.  */
#if (NX_TCP_KEEPALIVE_INITIAL > 0xFFFFUL)
    _nx_system_build_options_4 =  ((ULONG)0xFFFF0000);
#else
    _nx_system_build_options_4 =  ((ULONG)NX_TCP_KEEPALIVE_INITIAL) << 16;
 80098b0:	4b1a      	ldr	r3, [pc, #104]	; (800991c <_nx_system_initialize+0xf4>)
 80098b2:	f04f 52e1 	mov.w	r2, #471859200	; 0x1c200000
 80098b6:	601a      	str	r2, [r3, #0]
#endif
#if (NX_ARP_MAXIMUM_RETRIES > 0xFF)
    _nx_system_build_options_4 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAXIMUM_RETRIES) << 8;
 80098b8:	4b18      	ldr	r3, [pc, #96]	; (800991c <_nx_system_initialize+0xf4>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 80098c0:	4a16      	ldr	r2, [pc, #88]	; (800991c <_nx_system_initialize+0xf4>)
 80098c2:	6013      	str	r3, [r2, #0]
#endif
#if (NX_ARP_MAX_QUEUE_DEPTH > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF) << 4;
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAX_QUEUE_DEPTH) << 4;
 80098c4:	4b15      	ldr	r3, [pc, #84]	; (800991c <_nx_system_initialize+0xf4>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098cc:	4a13      	ldr	r2, [pc, #76]	; (800991c <_nx_system_initialize+0xf4>)
 80098ce:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_KEEPALIVE_RETRIES > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF);
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRIES);
 80098d0:	4b12      	ldr	r3, [pc, #72]	; (800991c <_nx_system_initialize+0xf4>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f043 030a 	orr.w	r3, r3, #10
 80098d8:	4a10      	ldr	r2, [pc, #64]	; (800991c <_nx_system_initialize+0xf4>)
 80098da:	6013      	str	r3, [r2, #0]

    /* Setup the fifth option word.  */
#if (NX_MAX_MULTICAST_GROUPS > 0xFF)
    _nx_system_build_options_5 =  ((ULONG)0xFF000000);
#else
    _nx_system_build_options_5 =  ((ULONG)NX_MAX_MULTICAST_GROUPS) << 24;
 80098dc:	4b10      	ldr	r3, [pc, #64]	; (8009920 <_nx_system_initialize+0xf8>)
 80098de:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80098e2:	601a      	str	r2, [r3, #0]
#endif
#if (NX_MAX_LISTEN_REQUESTS > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF) << 16;
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_MAX_LISTEN_REQUESTS) << 16;
 80098e4:	4b0e      	ldr	r3, [pc, #56]	; (8009920 <_nx_system_initialize+0xf8>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80098ec:	4a0c      	ldr	r2, [pc, #48]	; (8009920 <_nx_system_initialize+0xf8>)
 80098ee:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_MAXIMUM_RETRIES > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_RETRIES) << 8;
 80098f0:	4b0b      	ldr	r3, [pc, #44]	; (8009920 <_nx_system_initialize+0xf8>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 80098f8:	4a09      	ldr	r2, [pc, #36]	; (8009920 <_nx_system_initialize+0xf8>)
 80098fa:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_MAXIMUM_TX_QUEUE > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_TX_QUEUE);
 80098fc:	4b08      	ldr	r3, [pc, #32]	; (8009920 <_nx_system_initialize+0xf8>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f043 0314 	orr.w	r3, r3, #20
 8009904:	4a06      	ldr	r2, [pc, #24]	; (8009920 <_nx_system_initialize+0xf8>)
 8009906:	6013      	str	r3, [r2, #0]
 8009908:	e000      	b.n	800990c <_nx_system_initialize+0xe4>
        return;
 800990a:	bf00      	nop
#endif
}
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20014838 	.word	0x20014838
 8009914:	2001483c 	.word	0x2001483c
 8009918:	20014840 	.word	0x20014840
 800991c:	20014844 	.word	0x20014844
 8009920:	20014848 	.word	0x20014848

08009924 <_nx_tcp_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_initialize(VOID)
{
 8009924:	b480      	push	{r7}
 8009926:	af00      	add	r7, sp, #0
}
 8009928:	bf00      	nop
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
	...

08009934 <_nx_udp_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b08a      	sub	sp, #40	; 0x28
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009942:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009944:	f3ef 8310 	mrs	r3, PRIMASK
 8009948:	61bb      	str	r3, [r7, #24]
    return(posture);
 800994a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800994c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800994e:	b672      	cpsid	i
    return(int_posture);
 8009950:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 8009952:	623b      	str	r3, [r7, #32]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009958:	2b00      	cmp	r3, #0
 800995a:	d043      	beq.n	80099e4 <_nx_udp_bind_cleanup+0xb0>
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	2b00      	cmp	r3, #0
 8009960:	d040      	beq.n	80099e4 <_nx_udp_bind_cleanup+0xb0>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 8009966:	4a24      	ldr	r2, [pc, #144]	; (80099f8 <_nx_udp_bind_cleanup+0xc4>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d13b      	bne.n	80099e4 <_nx_udp_bind_cleanup+0xb0>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996e:	2200      	movs	r2, #0
 8009970:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_udp_socket_bound_previous;
 8009978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800997c:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	429a      	cmp	r2, r3
 8009986:	d103      	bne.n	8009990 <_nx_udp_bind_cleanup+0x5c>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	2200      	movs	r2, #0
 800998c:	661a      	str	r2, [r3, #96]	; 0x60
 800998e:	e00d      	b.n	80099ac <_nx_udp_bind_cleanup+0x78>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80099a0:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80099aa:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099b0:	1e5a      	subs	r2, r3, #1
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	665a      	str	r2, [r3, #100]	; 0x64

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ba:	2b0c      	cmp	r3, #12
 80099bc:	d112      	bne.n	80099e4 <_nx_udp_bind_cleanup+0xb0>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2223      	movs	r2, #35	; 0x23
 80099c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80099c6:	4b0d      	ldr	r3, [pc, #52]	; (80099fc <_nx_udp_bind_cleanup+0xc8>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	3301      	adds	r3, #1
 80099cc:	4a0b      	ldr	r2, [pc, #44]	; (80099fc <_nx_udp_bind_cleanup+0xc8>)
 80099ce:	6013      	str	r3, [r2, #0]
 80099d0:	6a3b      	ldr	r3, [r7, #32]
 80099d2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	f383 8810 	msr	PRIMASK, r3
}
 80099da:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f003 fff9 	bl	800d9d4 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 80099e2:	e005      	b.n	80099f0 <_nx_udp_bind_cleanup+0xbc>
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f383 8810 	msr	PRIMASK, r3
}
 80099ee:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 80099f0:	3728      	adds	r7, #40	; 0x28
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	55445020 	.word	0x55445020
 80099fc:	2001491c 	.word	0x2001491c

08009a00 <_nx_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_enable(NX_IP *ip_ptr)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Set the UDP packet receive function in the IP structure to indicate
       we are ready to receive UDP packets.  */
    ip_ptr -> nx_ip_udp_packet_receive =  _nx_udp_packet_receive;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a05      	ldr	r2, [pc, #20]	; (8009a20 <_nx_udp_enable+0x20>)
 8009a0c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	370c      	adds	r7, #12
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	08009acd 	.word	0x08009acd

08009a24 <_nx_udp_free_port_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_free_port_find(NX_IP *ip_ptr, UINT port, UINT *free_port_ptr)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b08a      	sub	sp, #40	; 0x28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_FREE_PORT_FIND, ip_ptr, port, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Save the original port.  */
    starting_port =  port;
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	61fb      	str	r3, [r7, #28]
    /* Loop through the UDP ports until a free entry is found.  */
    do
    {

        /* Calculate the hash index in the UDP port array of the associated IP instance.  */
        index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	0a1a      	lsrs	r2, r3, #8
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f003 031f 	and.w	r3, r3, #31
 8009a40:	61bb      	str	r3, [r7, #24]

        /* Obtain the IP mutex so we can figure out whether or not the port has already
           been bound to.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009a48:	f04f 31ff 	mov.w	r1, #4294967295
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f002 ff93 	bl	800c978 <_tx_mutex_get>

        /* Pickup the head of the UDP ports bound list.  */
        search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	69ba      	ldr	r2, [r7, #24]
 8009a56:	32e0      	adds	r2, #224	; 0xe0
 8009a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a5c:	623b      	str	r3, [r7, #32]

        /* Set the bound flag to false.  */
        bound =  NX_FALSE;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if we need to perform a list search.  */
        if (search_ptr)
 8009a62:	6a3b      	ldr	r3, [r7, #32]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d010      	beq.n	8009a8a <_nx_udp_free_port_find+0x66>
        {

            /* Walk through the circular list of UDP sockets that are already
               bound.  */
            end_ptr =     search_ptr;
 8009a68:	6a3b      	ldr	r3, [r7, #32]
 8009a6a:	617b      	str	r3, [r7, #20]
            do
            {

                /* Determine if this entry is the same as the requested port.  */
                if (search_ptr -> nx_udp_socket_port == port)
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d102      	bne.n	8009a7c <_nx_udp_free_port_find+0x58>
                {

                    /* Set the bound flag.  */
                    bound =  NX_TRUE;
 8009a76:	2301      	movs	r3, #1
 8009a78:	627b      	str	r3, [r7, #36]	; 0x24

                    /* Get out of the loop.  */
                    break;
 8009a7a:	e006      	b.n	8009a8a <_nx_udp_free_port_find+0x66>
                }

                /* Move to the next entry in the list.  */
                search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a80:	623b      	str	r3, [r7, #32]
            } while (search_ptr != end_ptr);
 8009a82:	6a3a      	ldr	r2, [r7, #32]
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d1f0      	bne.n	8009a6c <_nx_udp_free_port_find+0x48>
            }
        }
#endif

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009a90:	4618      	mov	r0, r3
 8009a92:	f003 f9e9 	bl	800ce68 <_tx_mutex_put>

        /* Determine if the port is available.  */
        if (!bound)
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d104      	bne.n	8009aa6 <_nx_udp_free_port_find+0x82>
        {

            /* Setup the return port number.  */
            *free_port_ptr =  port;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	601a      	str	r2, [r3, #0]

            /* Update the trace event with the status.  */
            NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_FREE_PORT_FIND, 0, 0, port, 0);

            /* Return success.  */
            return(NX_SUCCESS);
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	e00e      	b.n	8009ac4 <_nx_udp_free_port_find+0xa0>
        }

        /* Move to the next port.  */
        port++;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	60bb      	str	r3, [r7, #8]

        /* Determine if we need to wrap.  */
        if (port > NX_MAX_PORT)
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ab2:	d302      	bcc.n	8009aba <_nx_udp_free_port_find+0x96>
        {

            /* Yes, we need to wrap around.  */
            port =  NX_SEARCH_PORT_START;
 8009ab4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009ab8:	60bb      	str	r3, [r7, #8]
        }
    } while (starting_port != port);
 8009aba:	69fa      	ldr	r2, [r7, #28]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d1b8      	bne.n	8009a34 <_nx_udp_free_port_find+0x10>

    /* A free port was not found, return an error.  */
    return(NX_NO_FREE_PORTS);
 8009ac2:	2345      	movs	r3, #69	; 0x45
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3728      	adds	r7, #40	; 0x28
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <_nx_udp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b094      	sub	sp, #80	; 0x50
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_UDP_INFO

    /* Increment the total UDP receive packets count.  */
    ip_ptr -> nx_ip_udp_packets_received++;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009adc:	1c5a      	adds	r2, r3, #1
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_UDP_HEADER))
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	2b07      	cmp	r3, #7
 8009aea:	d80a      	bhi.n	8009b02 <_nx_udp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 8009afa:	6838      	ldr	r0, [r7, #0]
 8009afc:	f7ff fd40 	bl	8009580 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8009b00:	e1d4      	b.n	8009eac <_nx_udp_packet_receive+0x3e0>
    }
#endif

    /* Pickup the pointer to the head of the UDP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8009b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	ba1a      	rev	r2, r3
 8009b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b10:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	ba1a      	rev	r2, r3
 8009b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b1a:	605a      	str	r2, [r3, #4]

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK))
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	0c1b      	lsrs	r3, r3, #16
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d20a      	bcs.n	8009b40 <_nx_udp_packet_receive+0x74>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b30:	1c5a      	adds	r2, r3, #1
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 8009b38:	6838      	ldr	r0, [r7, #0]
 8009b3a:	f7ff fd21 	bl	8009580 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8009b3e:	e1b5      	b.n	8009eac <_nx_udp_packet_receive+0x3e0>
    /* Recompute the packet length in case TFC padding is present. */
    packet_ptr -> nx_packet_length = (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK);
#endif /* NX_IPSEC_ENABLE */

    /* Pickup the destination UDP port.  */
    port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 8009b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	647b      	str	r3, [r7, #68]	; 0x44

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8009b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b4a:	0a1a      	lsrs	r2, r3, #8
 8009b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b4e:	4413      	add	r3, r2
 8009b50:	f003 031f 	and.w	r3, r3, #31
 8009b54:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if the caller is a thread. If so, we should use the protection mutex
       to avoid having the port list examined while we are traversing it. If this routine
       is called from an ISR nothing needs to be done since bind/unbind are not allowed
       from ISRs.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8009b56:	4b8d      	ldr	r3, [pc, #564]	; (8009d8c <_nx_udp_packet_receive+0x2c0>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d010      	beq.n	8009b80 <_nx_udp_packet_receive+0xb4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009b5e:	f3ef 8305 	mrs	r3, IPSR
 8009b62:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 8009b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b66:	4b8a      	ldr	r3, [pc, #552]	; (8009d90 <_nx_udp_packet_receive+0x2c4>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d107      	bne.n	8009b80 <_nx_udp_packet_receive+0xb4>
    {

        /* Get mutex protection.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), NX_WAIT_FOREVER);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009b76:	f04f 31ff 	mov.w	r1, #4294967295
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f002 fefc 	bl	800c978 <_tx_mutex_get>
    }

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b84:	32e0      	adds	r2, #224	; 0xe0
 8009b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b8a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Determine if there are any sockets bound on this port index.  */
    if (!socket_ptr)
 8009b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d13e      	bne.n	8009c10 <_nx_udp_packet_receive+0x144>
    {

#ifndef NX_DISABLE_IPV4
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b98:	2b04      	cmp	r3, #4
 8009b9a:	d114      	bne.n	8009bc6 <_nx_udp_packet_receive+0xfa>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00f      	beq.n	8009bc6 <_nx_udp_packet_receive+0xfa>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8009ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	ba1a      	rev	r2, r3
 8009bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bae:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	ba1a      	rev	r2, r3
 8009bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bb8:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8009bba:	2300      	movs	r3, #0
 8009bbc:	4a75      	ldr	r2, [pc, #468]	; (8009d94 <_nx_udp_packet_receive+0x2c8>)
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7fc fe7d 	bl	80068c0 <_nx_icmpv4_send_error_message>
#endif /* FEATURE_NX_IPV6 */

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009bcc:	1c5a      	adds	r2, r3, #1
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009bda:	1c5a      	adds	r2, r3, #1
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

        /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
        if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8009be2:	4b6a      	ldr	r3, [pc, #424]	; (8009d8c <_nx_udp_packet_receive+0x2c0>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00e      	beq.n	8009c08 <_nx_udp_packet_receive+0x13c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009bea:	f3ef 8305 	mrs	r3, IPSR
 8009bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8009bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bf2:	4b67      	ldr	r3, [pc, #412]	; (8009d90 <_nx_udp_packet_receive+0x2c4>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d105      	bne.n	8009c08 <_nx_udp_packet_receive+0x13c>
        {

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009c02:	4618      	mov	r0, r3
 8009c04:	f003 f930 	bl	800ce68 <_tx_mutex_put>
        }

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 8009c08:	6838      	ldr	r0, [r7, #0]
 8009c0a:	f7ff fcb9 	bl	8009580 <_nx_packet_release>

        /* Just return.  */
        return;
 8009c0e:	e14d      	b.n	8009eac <_nx_udp_packet_receive+0x3e0>
    /*  Loop to examine the list of bound ports on this index.  */
    do
    {

        /* Determine if the port has been found.  */
        if (socket_ptr -> nx_udp_socket_port == port)
 8009c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d119      	bne.n	8009c4e <_nx_udp_packet_receive+0x182>
            /* Yes, we have a match.  */

#ifndef NX_DISABLE_UDP_INFO

            /* Increment the total number of packets received for this socket.  */
            socket_ptr -> nx_udp_socket_packets_received++;
 8009c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c22:	619a      	str	r2, [r3, #24]

            /* Increment the total UDP receive bytes.  */
            ip_ptr -> nx_ip_udp_bytes_received +=          packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2e:	4413      	add	r3, r2
 8009c30:	f1a3 0208 	sub.w	r2, r3, #8
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            socket_ptr -> nx_udp_socket_bytes_received +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8009c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c3c:	69da      	ldr	r2, [r3, #28]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	4413      	add	r3, r2
 8009c44:	f1a3 0208 	sub.w	r2, r3, #8
 8009c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c4a:	61da      	str	r2, [r3, #28]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_RECEIVE, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Get out of the search loop.  */
            break;
 8009c4c:	e00a      	b.n	8009c64 <_nx_udp_packet_receive+0x198>
        }
        else
        {

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_udp_socket_bound_next;
 8009c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c52:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
    } while (socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c58:	32e0      	adds	r2, #224	; 0xe0
 8009c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d1d5      	bne.n	8009c10 <_nx_udp_packet_receive+0x144>

    /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8009c64:	4b49      	ldr	r3, [pc, #292]	; (8009d8c <_nx_udp_packet_receive+0x2c0>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00e      	beq.n	8009c8a <_nx_udp_packet_receive+0x1be>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009c6c:	f3ef 8305 	mrs	r3, IPSR
 8009c70:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8009c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c74:	4b46      	ldr	r3, [pc, #280]	; (8009d90 <_nx_udp_packet_receive+0x2c4>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d105      	bne.n	8009c8a <_nx_udp_packet_receive+0x1be>
    {

        /* Release mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009c84:	4618      	mov	r0, r3
 8009c86:	f003 f8ef 	bl	800ce68 <_tx_mutex_put>
    }

    /* Determine if a match was found.  */
    if (socket_ptr -> nx_udp_socket_port != port)
 8009c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d02b      	beq.n	8009cec <_nx_udp_packet_receive+0x220>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ca8:	1c5a      	adds	r2, r3, #1
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

#if !defined(NX_DISABLE_IPV4) && !defined(NX_DISABLE_ICMPV4_ERROR_MESSAGE)
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009cb6:	2b04      	cmp	r3, #4
 8009cb8:	d114      	bne.n	8009ce4 <_nx_udp_packet_receive+0x218>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00f      	beq.n	8009ce4 <_nx_udp_packet_receive+0x218>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8009cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	ba1a      	rev	r2, r3
 8009cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ccc:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	ba1a      	rev	r2, r3
 8009cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cd6:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8009cd8:	2300      	movs	r3, #0
 8009cda:	4a2e      	ldr	r2, [pc, #184]	; (8009d94 <_nx_udp_packet_receive+0x2c8>)
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7fc fdee 	bl	80068c0 <_nx_icmpv4_send_error_message>
            }
        }
#endif /* FEATURE_NX_IPV6 && !NX_DISABLE_ICMPV6_ERROR_MESSAGE  */

        /* No socket structure bound to this port, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8009ce4:	6838      	ldr	r0, [r7, #0]
 8009ce6:	f7ff fc4b 	bl	8009580 <_nx_packet_release>
        return;
 8009cea:	e0df      	b.n	8009eac <_nx_udp_packet_receive+0x3e0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009cec:	f3ef 8310 	mrs	r3, PRIMASK
 8009cf0:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8009cf4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009cf6:	b672      	cpsid	i
    return(int_posture);
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8009cfa:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the socket is still valid.  */
    if (socket_ptr -> nx_udp_socket_id != NX_UDP_ID)
 8009cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a25      	ldr	r2, [pc, #148]	; (8009d98 <_nx_udp_packet_receive+0x2cc>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d01c      	beq.n	8009d40 <_nx_udp_packet_receive+0x274>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d0c:	1c5a      	adds	r2, r3, #1
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d1a:	1c5a      	adds	r2, r3, #1
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Increment the total UDP receive packets dropped count for this socket.  */
        socket_ptr -> nx_udp_socket_packets_dropped++;
 8009d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d26:	1c5a      	adds	r2, r3, #1
 8009d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d2a:	625a      	str	r2, [r3, #36]	; 0x24
 8009d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d2e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	f383 8810 	msr	PRIMASK, r3
}
 8009d36:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 8009d38:	6838      	ldr	r0, [r7, #0]
 8009d3a:	f7ff fc21 	bl	8009580 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8009d3e:	e0b5      	b.n	8009eac <_nx_udp_packet_receive+0x3e0>
    }

    /* Pickup the receive notify function.  */
    receive_callback =  socket_ptr -> nx_udp_receive_callback;
 8009d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d44:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if we need to update the UDP port head pointer.  This should
       only be done if the found socket pointer is not the head pointer and
       the mutex for this IP instance is available.  */
    if ((socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]) && (!ip_ptr -> nx_ip_protection.tx_mutex_ownership_count))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d4a:	32e0      	adds	r2, #224	; 0xe0
 8009d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d00a      	beq.n	8009d6c <_nx_udp_packet_receive+0x2a0>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d105      	bne.n	8009d6c <_nx_udp_packet_receive+0x2a0>
    {

        /* Move the port head pointer to this socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d64:	32e0      	adds	r2, #224	; 0xe0
 8009d66:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    /* Determine if there is thread waiting for a packet from this port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 8009d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d70:	637b      	str	r3, [r7, #52]	; 0x34
    if (thread_ptr)
 8009d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d03e      	beq.n	8009df6 <_nx_udp_packet_receive+0x32a>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8009d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d10c      	bne.n	8009d9c <_nx_udp_packet_receive+0x2d0>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 8009d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d84:	2200      	movs	r2, #0
 8009d86:	659a      	str	r2, [r3, #88]	; 0x58
 8009d88:	e016      	b.n	8009db8 <_nx_udp_packet_receive+0x2ec>
 8009d8a:	bf00      	nop
 8009d8c:	20014884 	.word	0x20014884
 8009d90:	20000088 	.word	0x20000088
 8009d94:	03030000 	.word	0x03030000
 8009d98:	55445020 	.word	0x55445020
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8009d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009da2:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8009da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009daa:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009dac:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8009db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009db4:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009db6:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 8009db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dbc:	1e5a      	subs	r2, r3, #1
 8009dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dc0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8009dc8:	4b3a      	ldr	r3, [pc, #232]	; (8009eb4 <_nx_udp_packet_receive+0x3e8>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	4a39      	ldr	r2, [pc, #228]	; (8009eb4 <_nx_udp_packet_receive+0x3e8>)
 8009dd0:	6013      	str	r3, [r2, #0]

        /* Return this block pointer to the suspended thread waiting for
           a block.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8009dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dd6:	683a      	ldr	r2, [r7, #0]
 8009dd8:	601a      	str	r2, [r3, #0]
 8009dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ddc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	f383 8810 	msr	PRIMASK, r3
}
 8009de4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8009de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de8:	2200      	movs	r2, #0
 8009dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009dee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009df0:	f003 fdf0 	bl	800d9d4 <_tx_thread_system_resume>
 8009df4:	e054      	b.n	8009ea0 <_nx_udp_packet_receive+0x3d4>
            return;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Place the packet at the end of the socket's receive queue.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 8009df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d03c      	beq.n	8009e78 <_nx_udp_packet_receive+0x3ac>
        {

            /* Add the new packet to a nonempty list.  */
            (socket_ptr -> nx_udp_socket_receive_tail) -> nx_packet_queue_next =  packet_ptr;
 8009dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	61da      	str	r2, [r3, #28]
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 8009e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 8009e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e16:	1c5a      	adds	r2, r3, #1
 8009e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e1a:	63da      	str	r2, [r3, #60]	; 0x3c

            /* Determine if the maximum queue depth has been reached.  */
            if (socket_ptr -> nx_udp_socket_receive_count >
 8009e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                socket_ptr -> nx_udp_socket_queue_maximum)
 8009e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            if (socket_ptr -> nx_udp_socket_receive_count >
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d921      	bls.n	8009e6c <_nx_udp_packet_receive+0x3a0>
            {

                /* We have exceeded the queue depth, so remove the first item
                   in the queue (which is the oldest).  */
                packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 8009e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e2c:	603b      	str	r3, [r7, #0]
                socket_ptr -> nx_udp_socket_receive_head =  packet_ptr -> nx_packet_queue_next;
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	69da      	ldr	r2, [r3, #28]
 8009e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e34:	645a      	str	r2, [r3, #68]	; 0x44

                /* Decrement the number of packets queued.  */
                socket_ptr -> nx_udp_socket_receive_count--;
 8009e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e3a:	1e5a      	subs	r2, r3, #1
 8009e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e3e:	63da      	str	r2, [r3, #60]	; 0x3c

#ifndef NX_DISABLE_UDP_INFO

                /* Increment the total UDP receive packets dropped count.  */
                ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e46:	1c5a      	adds	r2, r3, #1
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                /* Increment the total UDP receive packets dropped count for this socket.  */
                socket_ptr -> nx_udp_socket_packets_dropped++;
 8009e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e52:	1c5a      	adds	r2, r3, #1
 8009e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e56:	625a      	str	r2, [r3, #36]	; 0x24
 8009e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e5a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	f383 8810 	msr	PRIMASK, r3
}
 8009e62:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 8009e64:	6838      	ldr	r0, [r7, #0]
 8009e66:	f7ff fb8b 	bl	8009580 <_nx_packet_release>
 8009e6a:	e019      	b.n	8009ea0 <_nx_udp_packet_receive+0x3d4>
 8009e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e6e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	f383 8810 	msr	PRIMASK, r3
}
 8009e76:	e013      	b.n	8009ea0 <_nx_udp_packet_receive+0x3d4>
        }
        else
        {

            /* Add the new packet to an empty list.  */
            socket_ptr -> nx_udp_socket_receive_head =  packet_ptr;
 8009e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	645a      	str	r2, [r3, #68]	; 0x44
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 8009e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	2200      	movs	r2, #0
 8009e88:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 8009e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e8e:	1c5a      	adds	r2, r3, #1
 8009e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e92:	63da      	str	r2, [r3, #60]	; 0x3c
 8009e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e96:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f383 8810 	msr	PRIMASK, r3
}
 8009e9e:	bf00      	nop
        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_UDP_RECEIVE_QUEUE, __LINE__, packet_ptr);
    }

    /* Determine if there is a socket receive notification function specified.  */
    if (receive_callback)
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d002      	beq.n	8009eac <_nx_udp_packet_receive+0x3e0>
    {

        /* Yes, notification is requested.  Call the application's receive notification
           function for this socket.  */
        (receive_callback)(socket_ptr);
 8009ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009eaa:	4798      	blx	r3
    }
}
 8009eac:	3750      	adds	r7, #80	; 0x50
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	2001491c 	.word	0x2001491c

08009eb8 <_nx_udp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b088      	sub	sp, #32
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ec6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8009ecc:	617b      	str	r3, [r7, #20]
    return(posture);
 8009ece:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009ed0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009ed2:	b672      	cpsid	i
    return(int_posture);
 8009ed4:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 8009ed6:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d03d      	beq.n	8009f5c <_nx_udp_receive_cleanup+0xa4>
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d03a      	beq.n	8009f5c <_nx_udp_receive_cleanup+0xa4>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 8009eea:	4a21      	ldr	r2, [pc, #132]	; (8009f70 <_nx_udp_receive_cleanup+0xb8>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d135      	bne.n	8009f5c <_nx_udp_receive_cleanup+0xa4>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d103      	bne.n	8009f08 <_nx_udp_receive_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	2200      	movs	r2, #0
 8009f04:	659a      	str	r2, [r3, #88]	; 0x58
 8009f06:	e00d      	b.n	8009f24 <_nx_udp_receive_cleanup+0x6c>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009f18:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009f22:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f28:	1e5a      	subs	r2, r3, #1
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f32:	2b0c      	cmp	r3, #12
 8009f34:	d112      	bne.n	8009f5c <_nx_udp_receive_cleanup+0xa4>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009f3e:	4b0d      	ldr	r3, [pc, #52]	; (8009f74 <_nx_udp_receive_cleanup+0xbc>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3301      	adds	r3, #1
 8009f44:	4a0b      	ldr	r2, [pc, #44]	; (8009f74 <_nx_udp_receive_cleanup+0xbc>)
 8009f46:	6013      	str	r3, [r2, #0]
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f383 8810 	msr	PRIMASK, r3
}
 8009f52:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f003 fd3d 	bl	800d9d4 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8009f5a:	e005      	b.n	8009f68 <_nx_udp_receive_cleanup+0xb0>
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	f383 8810 	msr	PRIMASK, r3
}
 8009f66:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8009f68:	3720      	adds	r7, #32
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	55445020 	.word	0x55445020
 8009f74:	2001491c 	.word	0x2001491c

08009f78 <_nx_udp_socket_bind>:
/*                                            corrected the random value, */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b092      	sub	sp, #72	; 0x48
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
#endif /* NX_NAT_ENABLE */
NX_IP         *ip_ptr;
TX_THREAD     *thread_ptr;
NX_UDP_SOCKET *search_ptr;
NX_UDP_SOCKET *end_ptr;
UINT           status = NX_SUCCESS;
 8009f84:	2300      	movs	r3, #0
 8009f86:	643b      	str	r3, [r7, #64]	; 0x40


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_BIND, ip_ptr, socket_ptr, port, wait_option, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f90:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009f94:	f04f 31ff 	mov.w	r1, #4294967295
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f002 fced 	bl	800c978 <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d103      	bne.n	8009fae <_nx_udp_socket_bind+0x36>
        (socket_ptr -> nx_udp_socket_bind_in_progress))
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d007      	beq.n	8009fbe <_nx_udp_socket_bind+0x46>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fb0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f002 ff57 	bl	800ce68 <_tx_mutex_put>

        /* Return an already bound error code.  */
        return(NX_ALREADY_BOUND);
 8009fba:	2322      	movs	r3, #34	; 0x22
 8009fbc:	e0f4      	b.n	800a1a8 <_nx_udp_socket_bind+0x230>
    }

    /* Determine if the port needs to be allocated.  */
    if (port == NX_ANY_PORT)
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d119      	bne.n	8009ff8 <_nx_udp_socket_bind+0x80>
    {

        /* Call the find routine to allocate a UDP port.  */
        port = NX_SEARCH_PORT_START + (UINT)(((ULONG)NX_RAND()) % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 8009fc4:	f004 ff5c 	bl	800ee80 <rand>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009fce:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8009fd2:	60bb      	str	r3, [r7, #8]
        if (_nx_udp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	f107 0208 	add.w	r2, r7, #8
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009fde:	f7ff fd21 	bl	8009a24 <_nx_udp_free_port_find>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d007      	beq.n	8009ff8 <_nx_udp_socket_bind+0x80>
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fea:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f002 ff3a 	bl	800ce68 <_tx_mutex_put>

            /* There was no free port, return an error code.  */
            return(NX_NO_FREE_PORTS);
 8009ff4:	2345      	movs	r3, #69	; 0x45
 8009ff6:	e0d7      	b.n	800a1a8 <_nx_udp_socket_bind+0x230>
        }
    }
#endif

    /* Save the port number in the UDP socket structure.  */
    socket_ptr -> nx_udp_socket_port =  port;
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	609a      	str	r2, [r3, #8]

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	0a1a      	lsrs	r2, r3, #8
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	4413      	add	r3, r2
 800a006:	f003 031f 	and.w	r3, r3, #31
 800a00a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Pickup the head of the UDP ports bound list.  */
    search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800a00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a00e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a010:	32e0      	adds	r2, #224	; 0xe0
 800a012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a016:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if we need to perform a list search.  */
    if (search_ptr)
 800a018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00f      	beq.n	800a03e <_nx_udp_socket_bind+0xc6>
    {

        /* Walk through the circular list of UDP sockets that are already
           bound.  */
        end_ptr = search_ptr;
 800a01e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a020:	637b      	str	r3, [r7, #52]	; 0x34
        do
        {

            /* Determine if this entry is the same as the requested port.  */
            if (search_ptr -> nx_udp_socket_port == port)
 800a022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a024:	689a      	ldr	r2, [r3, #8]
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d007      	beq.n	800a03c <_nx_udp_socket_bind+0xc4>
                /* Yes, the port has already been allocated.  */
                break;
            }

            /* Move to the next entry in the list.  */
            search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 800a02c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a02e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a030:	647b      	str	r3, [r7, #68]	; 0x44
        } while (search_ptr != end_ptr);
 800a032:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a036:	429a      	cmp	r2, r3
 800a038:	d1f3      	bne.n	800a022 <_nx_udp_socket_bind+0xaa>
 800a03a:	e000      	b.n	800a03e <_nx_udp_socket_bind+0xc6>
                break;
 800a03c:	bf00      	nop
    }

    /* Now determine if the port is available.  */
    if ((search_ptr == NX_NULL) || (search_ptr -> nx_udp_socket_port != port))
 800a03e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a040:	2b00      	cmp	r3, #0
 800a042:	d004      	beq.n	800a04e <_nx_udp_socket_bind+0xd6>
 800a044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a046:	689a      	ldr	r2, [r3, #8]
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d042      	beq.n	800a0d4 <_nx_udp_socket_bind+0x15c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a04e:	f3ef 8310 	mrs	r3, PRIMASK
 800a052:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800a054:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800a056:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800a058:	b672      	cpsid	i
    return(int_posture);
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {

        /* Place this UDP socket structure on the list of bound ports.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800a05c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if the list is NULL.  */
        if (search_ptr)
 800a05e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a060:	2b00      	cmp	r3, #0
 800a062:	d01e      	beq.n	800a0a2 <_nx_udp_socket_bind+0x12a>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            socket_ptr -> nx_udp_socket_bound_next =       ip_ptr -> nx_ip_udp_port_table[index];
 800a064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a068:	32e0      	adds	r2, #224	; 0xe0
 800a06a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =   (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 800a072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a076:	32e0      	adds	r2, #224	; 0xe0
 800a078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a07c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next = socket_ptr;
 800a082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a086:	32e0      	adds	r2, #224	; 0xe0
 800a088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a08c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	64da      	str	r2, [r3, #76]	; 0x4c
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   socket_ptr;
 800a092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a096:	32e0      	adds	r2, #224	; 0xe0
 800a098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	651a      	str	r2, [r3, #80]	; 0x50
 800a0a0:	e00b      	b.n	800a0ba <_nx_udp_socket_bind+0x142>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            socket_ptr -> nx_udp_socket_bound_next =      socket_ptr;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =  socket_ptr;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =       socket_ptr;
 800a0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0b2:	32e0      	adds	r2, #224	; 0xe0
 800a0b4:	68f9      	ldr	r1, [r7, #12]
 800a0b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	f383 8810 	msr	PRIMASK, r3
}
 800a0c4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0c8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f002 fecb 	bl	800ce68 <_tx_mutex_put>
 800a0d2:	e068      	b.n	800a1a6 <_nx_udp_socket_bind+0x22e>
    }
    else if (wait_option)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d05d      	beq.n	800a196 <_nx_udp_socket_bind+0x21e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a0da:	f3ef 8310 	mrs	r3, PRIMASK
 800a0de:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a0e0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a0e2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a0e4:	b672      	cpsid	i
    return(int_posture);
 800a0e6:	69bb      	ldr	r3, [r7, #24]
    {

        /* Prepare for suspension of this thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800a0e8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Pickup thread pointer.  */
        thread_ptr =  _tx_thread_current_ptr;
 800a0ea:	4b31      	ldr	r3, [pc, #196]	; (800a1b0 <_nx_udp_socket_bind+0x238>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Setup cleanup routine pointer.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_bind_cleanup;
 800a0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f2:	4a30      	ldr	r2, [pc, #192]	; (800a1b4 <_nx_udp_socket_bind+0x23c>)
 800a0f4:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup cleanup information, i.e. this socket control
           block.  */
        thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 800a0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Also remember the socket that has bound to the port, since the thread
           is going to be suspended on that socket.  */
        socket_ptr -> nx_udp_socket_bound_previous =  search_ptr;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a100:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the socket bind in progress flag (thread pointer).  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  thread_ptr;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a106:	655a      	str	r2, [r3, #84]	; 0x54

        /* Setup suspension list.  */
        if (search_ptr -> nx_udp_socket_bind_suspension_list)
 800a108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a10a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d012      	beq.n	800a136 <_nx_udp_socket_bind+0x1be>
        {

            /* This list is not NULL, add current thread to the end. */
            thread_ptr -> tx_thread_suspended_next =       search_ptr -> nx_udp_socket_bind_suspension_list;
 800a110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a112:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a116:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =  (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous;
 800a118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a11a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a11c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800a11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a120:	675a      	str	r2, [r3, #116]	; 0x74
            ((search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =  thread_ptr;
 800a122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a12a:	671a      	str	r2, [r3, #112]	; 0x70
            (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800a12c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a12e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a132:	675a      	str	r2, [r3, #116]	; 0x74
 800a134:	e008      	b.n	800a148 <_nx_udp_socket_bind+0x1d0>
        else
        {

            /* No other threads are suspended.  Setup the head pointer and
               just setup this threads pointers to itself.  */
            search_ptr -> nx_udp_socket_bind_suspension_list =         thread_ptr;
 800a136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a13a:	661a      	str	r2, [r3, #96]	; 0x60
            thread_ptr -> tx_thread_suspended_next =                   thread_ptr;
 800a13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a140:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =               thread_ptr;
 800a142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a146:	675a      	str	r2, [r3, #116]	; 0x74
        }

        /* Increment the suspended thread count.  */
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 800a148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a14a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a14c:	1c5a      	adds	r2, r3, #1
 800a14e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a150:	665a      	str	r2, [r3, #100]	; 0x64

        /* Set the state to suspended.  */
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800a152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a154:	220c      	movs	r2, #12
 800a156:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15a:	2201      	movs	r2, #1
 800a15c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800a15e:	4b16      	ldr	r3, [pc, #88]	; (800a1b8 <_nx_udp_socket_bind+0x240>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3301      	adds	r3, #1
 800a164:	4a14      	ldr	r2, [pc, #80]	; (800a1b8 <_nx_udp_socket_bind+0x240>)
 800a166:	6013      	str	r3, [r2, #0]

        /* Save the timeout value.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800a168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	64da      	str	r2, [r3, #76]	; 0x4c
 800a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a170:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	f383 8810 	msr	PRIMASK, r3
}
 800a178:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a17a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a17c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a180:	4618      	mov	r0, r3
 800a182:	f002 fe71 	bl	800ce68 <_tx_mutex_put>

        /* Call actual thread suspension routine.  */
        _tx_thread_system_suspend(thread_ptr);
 800a186:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a188:	f003 fd24 	bl	800dbd4 <_tx_thread_system_suspend>

        /* Return the completion status.  */
        status = thread_ptr -> tx_thread_suspend_status;
 800a18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a192:	643b      	str	r3, [r7, #64]	; 0x40
 800a194:	e007      	b.n	800a1a6 <_nx_udp_socket_bind+0x22e>
    }
    else
    {

        /* Release the IP protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a198:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a19c:	4618      	mov	r0, r3
 800a19e:	f002 fe63 	bl	800ce68 <_tx_mutex_put>

        /* Return the port unavailable error.  */
        status = NX_PORT_UNAVAILABLE;
 800a1a2:	2323      	movs	r3, #35	; 0x23
 800a1a4:	643b      	str	r3, [r7, #64]	; 0x40
        status = _nx_udp_socket_driver_bind(socket_ptr, port, wait_option);
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Return success to the caller.  */
    return(status);
 800a1a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3748      	adds	r7, #72	; 0x48
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	20014884 	.word	0x20014884
 800a1b4:	08009935 	.word	0x08009935
 800a1b8:	2001491c 	.word	0x2001491c

0800a1bc <_nx_udp_socket_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                            ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG queue_maximum)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08a      	sub	sp, #40	; 0x28
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	603b      	str	r3, [r7, #0]

NX_UDP_SOCKET *tail_ptr;


    /* Initialize the TCP control block to zero.  */
    memset((void *)socket_ptr, 0, sizeof(NX_UDP_SOCKET));
 800a1ca:	2278      	movs	r2, #120	; 0x78
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	68b8      	ldr	r0, [r7, #8]
 800a1d0:	f005 f89c 	bl	800f30c <memset>

    /* Fill in the basic information in the new UDP socket structure.  */

    /* Remember the associated IP structure.  */
    socket_ptr -> nx_udp_socket_ip_ptr =  ip_ptr;
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	60da      	str	r2, [r3, #12]

    /* Save the UDP socket's name.  */
    socket_ptr -> nx_udp_socket_name =  name;
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	605a      	str	r2, [r3, #4]

    /* Save the type of service input parameter.  */
    socket_ptr -> nx_udp_socket_type_of_service =  type_of_service;
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Save the fragment input parameter.  */
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Save the time-to-live input parameter.  */
    socket_ptr -> nx_udp_socket_time_to_live =  time_to_live;
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* By default, have UDP checksum logic enabled.  To disable checksum logic, the
       application must call the nx_udp_checksum disable function for this UDP socket.  */
    socket_ptr -> nx_udp_socket_disable_checksum =  NX_FALSE;
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Clear the socket bind in progress flag.  */
    socket_ptr -> nx_udp_socket_bind_in_progress =  NX_FALSE;
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2200      	movs	r2, #0
 800a200:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set various list pointers to NULL.  */
    socket_ptr -> nx_udp_socket_bound_next =            NX_NULL;
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	2200      	movs	r2, #0
 800a206:	64da      	str	r2, [r3, #76]	; 0x4c
    socket_ptr -> nx_udp_socket_bound_previous =        NX_NULL;
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	2200      	movs	r2, #0
 800a20c:	651a      	str	r2, [r3, #80]	; 0x50
    socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	2200      	movs	r2, #0
 800a212:	661a      	str	r2, [r3, #96]	; 0x60
    socket_ptr -> nx_udp_socket_bind_suspended_count =  0;
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2200      	movs	r2, #0
 800a218:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize the receive queue parameters.  */
    socket_ptr -> nx_udp_socket_receive_count =         0;
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2200      	movs	r2, #0
 800a21e:	63da      	str	r2, [r3, #60]	; 0x3c
    socket_ptr -> nx_udp_socket_queue_maximum =         queue_maximum;
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a224:	641a      	str	r2, [r3, #64]	; 0x40
    socket_ptr -> nx_udp_socket_receive_head =          NX_NULL;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	2200      	movs	r2, #0
 800a22a:	645a      	str	r2, [r3, #68]	; 0x44
    socket_ptr -> nx_udp_socket_receive_tail =          NX_NULL;
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	2200      	movs	r2, #0
 800a230:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =             NX_NULL;
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2200      	movs	r2, #0
 800a236:	671a      	str	r2, [r3, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_CREATE, ip_ptr, socket_ptr, type_of_service, queue_maximum, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can add socket to IP structure.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a23e:	f04f 31ff 	mov.w	r1, #4294967295
 800a242:	4618      	mov	r0, r3
 800a244:	f002 fb98 	bl	800c978 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a248:	f3ef 8310 	mrs	r3, PRIMASK
 800a24c:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a24e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a250:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a252:	b672      	cpsid	i
    return(int_posture);
 800a254:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts while we link the new UDP socket to the IP structure.  */
    TX_DISABLE
 800a256:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the UDP ID field in the UDP control block.  */
    socket_ptr -> nx_udp_socket_id =  NX_UDP_ID;
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	4a1f      	ldr	r2, [pc, #124]	; (800a2d8 <_nx_udp_socket_create+0x11c>)
 800a25c:	601a      	str	r2, [r3, #0]

    /* Place the new UDP control block on the list of created UDP sockets for this IP.  First,
       check for an empty list.  */
    if (ip_ptr -> nx_ip_udp_created_sockets_ptr)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a264:	2b00      	cmp	r3, #0
 800a266:	d015      	beq.n	800a294 <_nx_udp_socket_create+0xd8>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a26e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a270:	623b      	str	r3, [r7, #32]

        /* Place the new UDP socket control block in the list.  */
        (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous =  socket_ptr;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	66da      	str	r2, [r3, #108]	; 0x6c
        tail_ptr ->  nx_udp_socket_created_next =  socket_ptr;
 800a27c:	6a3b      	ldr	r3, [r7, #32]
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup this UDP socket's created links.  */
        socket_ptr -> nx_udp_socket_created_previous =  tail_ptr;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	6a3a      	ldr	r2, [r7, #32]
 800a286:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      ip_ptr -> nx_ip_udp_created_sockets_ptr;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	669a      	str	r2, [r3, #104]	; 0x68
 800a292:	e009      	b.n	800a2a8 <_nx_udp_socket_create+0xec>
    }
    else
    {

        /* The created UDP socket list is empty.  Add UDP socket control block to empty list.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =       socket_ptr;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        socket_ptr -> nx_udp_socket_created_previous =  socket_ptr;
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	68ba      	ldr	r2, [r7, #8]
 800a2a0:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      socket_ptr;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	669a      	str	r2, [r3, #104]	; 0x68
    }

    /* Increment the created UDP socket counter.  */
    ip_ptr -> nx_ip_udp_created_sockets_count++;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a2ae:	1c5a      	adds	r2, r3, #1
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f383 8810 	msr	PRIMASK, r3
}
 800a2c0:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f002 fdcd 	bl	800ce68 <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3728      	adds	r7, #40	; 0x28
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	55445020 	.word	0x55445020

0800a2dc <_nx_udp_socket_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_delete(NX_UDP_SOCKET *socket_ptr)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b088      	sub	sp, #32
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	61fb      	str	r3, [r7, #28]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_DELETE, ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can process the socket delete request.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a2f0:	f04f 31ff 	mov.w	r1, #4294967295
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f002 fb3f 	bl	800c978 <_tx_mutex_get>

    /* Determine if the socket is still bound to port.  */
    if (socket_ptr -> nx_udp_socket_bound_next)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d007      	beq.n	800a312 <_nx_udp_socket_delete+0x36>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a308:	4618      	mov	r0, r3
 800a30a:	f002 fdad 	bl	800ce68 <_tx_mutex_put>

        /* Return a still bound error code.  */
        return(NX_STILL_BOUND);
 800a30e:	2342      	movs	r3, #66	; 0x42
 800a310:	e03f      	b.n	800a392 <_nx_udp_socket_delete+0xb6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a312:	f3ef 8310 	mrs	r3, PRIMASK
 800a316:	617b      	str	r3, [r7, #20]
    return(posture);
 800a318:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a31a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a31c:	b672      	cpsid	i
    return(int_posture);
 800a31e:	693b      	ldr	r3, [r7, #16]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800a320:	61bb      	str	r3, [r7, #24]

    /* Now, remove the UDP socket from the created socket list.  */

    /* Clear the socket ID to make it invalid.  */
    socket_ptr -> nx_udp_socket_id =  0;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	601a      	str	r2, [r3, #0]

    /* See if the socket is the only one on the list.  */
    if (socket_ptr == socket_ptr -> nx_udp_socket_created_next)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d104      	bne.n	800a33c <_nx_udp_socket_delete+0x60>
    {

        /* Only created socket, just set the created list to NULL.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =  NX_NULL;
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	2200      	movs	r2, #0
 800a336:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800a33a:	e014      	b.n	800a366 <_nx_udp_socket_delete+0x8a>
    }
    else
    {

        /* Link-up the neighbors.  */
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            socket_ptr -> nx_udp_socket_created_previous;
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 800a344:	66da      	str	r2, [r3, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
            socket_ptr -> nx_udp_socket_created_next;
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	6e92      	ldr	r2, [r2, #104]	; 0x68
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 800a34e:	669a      	str	r2, [r3, #104]	; 0x68

        /* See if we have to update the created list head pointer.  */
        if (ip_ptr -> nx_ip_udp_created_sockets_ptr == socket_ptr)
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d104      	bne.n	800a366 <_nx_udp_socket_delete+0x8a>
        {

            /* Yes, move the head pointer to the next link. */
            ip_ptr -> nx_ip_udp_created_sockets_ptr =  socket_ptr -> nx_udp_socket_created_next;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        }
    }

    /* Decrease the created sockets count.  */
    ip_ptr -> nx_ip_udp_created_sockets_count--;
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a36c:	1e5a      	subs	r2, r3, #1
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f383 8810 	msr	PRIMASK, r3
}
 800a37e:	bf00      	nop

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(socket_ptr);

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a386:	4618      	mov	r0, r3
 800a388:	f002 fd6e 	bl	800ce68 <_tx_mutex_put>

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800a38c:	f003 fae8 	bl	800d960 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3720      	adds	r7, #32
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
	...

0800a39c <_nx_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b09a      	sub	sp, #104	; 0x68
 800a3a0:	af02      	add	r7, sp, #8
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
TX_INTERRUPT_SAVE_AREA

ULONG                 *temp_ptr;
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
NX_INTERFACE          *interface_ptr = NX_NULL;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT                   compute_checksum = 1;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	65bb      	str	r3, [r7, #88]	; 0x58

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a3b6:	f3ef 8310 	mrs	r3, PRIMASK
 800a3ba:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800a3be:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800a3c0:	b672      	cpsid	i
    return(int_posture);
 800a3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /* Loop to retrieve a packet from the interface.  */
    for (;;)
    {

        /* Lockout interrupts.  */
        TX_DISABLE
 800a3c4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the socket is currently bound.  */
        if (!socket_ptr ->  nx_udp_socket_bound_next)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d107      	bne.n	800a3de <_nx_udp_socket_receive+0x42>
 800a3ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3d0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d4:	f383 8810 	msr	PRIMASK, r3
}
 800a3d8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Socket is not bound, return an error message.  */
            return(NX_NOT_BOUND);
 800a3da:	2324      	movs	r3, #36	; 0x24
 800a3dc:	e142      	b.n	800a664 <_nx_udp_socket_receive+0x2c8>
        }

        /* Determine if there is a packet already queued up for this socket.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d01a      	beq.n	800a41c <_nx_udp_socket_receive+0x80>
        {

            /* Yes, there is a packet waiting.  */

            /* Remove it and place it in the thread's destination.  */
            *packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	601a      	str	r2, [r3, #0]
            socket_ptr -> nx_udp_socket_receive_head =  (*packet_ptr) -> nx_packet_queue_next;
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	69da      	ldr	r2, [r3, #28]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	645a      	str	r2, [r3, #68]	; 0x44

            /* If this was the last packet, set the tail pointer to NULL.  */
            if (socket_ptr -> nx_udp_socket_receive_head == NX_NULL)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d102      	bne.n	800a406 <_nx_udp_socket_receive+0x6a>
            {
                socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	649a      	str	r2, [r3, #72]	; 0x48
            }

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a40a:	1e5a      	subs	r2, r3, #1
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	63da      	str	r2, [r3, #60]	; 0x3c
 800a410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a412:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a416:	f383 8810 	msr	PRIMASK, r3
}
 800a41a:	e05e      	b.n	800a4da <_nx_udp_socket_receive+0x13e>
        }
        else
        {

            /* Determine if the request specifies suspension.  */
            if (wait_option)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d050      	beq.n	800a4c4 <_nx_udp_socket_receive+0x128>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup thread pointer.  */
                thread_ptr =  _tx_thread_current_ptr;
 800a422:	4b92      	ldr	r3, [pc, #584]	; (800a66c <_nx_udp_socket_receive+0x2d0>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_receive_cleanup;
 800a428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a42a:	4a91      	ldr	r2, [pc, #580]	; (800a670 <_nx_udp_socket_receive+0x2d4>)
 800a42c:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 800a42e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return packet pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 800a434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup suspension list.  */
                if (socket_ptr -> nx_udp_socket_receive_suspension_list)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d012      	beq.n	800a468 <_nx_udp_socket_receive+0xcc>
                {

                    /* This list is not NULL, add current thread to the end. */
                    thread_ptr -> tx_thread_suspended_next =
                        socket_ptr -> nx_udp_socket_receive_suspension_list;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next =
 800a446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a448:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =
                        (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a44e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =
 800a450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a452:	675a      	str	r2, [r3, #116]	; 0x74
                    ((socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a45a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a45c:	671a      	str	r2, [r3, #112]	; 0x70
                        thread_ptr;
                    (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a464:	675a      	str	r2, [r3, #116]	; 0x74
 800a466:	e008      	b.n	800a47a <_nx_udp_socket_receive+0xde>
                else
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    socket_ptr -> nx_udp_socket_receive_suspension_list =   thread_ptr;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a46c:	659a      	str	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next              =   thread_ptr;
 800a46e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a470:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a472:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous          =   thread_ptr;
 800a474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a478:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspended thread count.  */
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a47e:	1c5a      	adds	r2, r3, #1
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	65da      	str	r2, [r3, #92]	; 0x5c

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800a484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a486:	220c      	movs	r2, #12
 800a488:	631a      	str	r2, [r3, #48]	; 0x30

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a48a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a48c:	2201      	movs	r2, #1
 800a48e:	639a      	str	r2, [r3, #56]	; 0x38

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800a490:	4b78      	ldr	r3, [pc, #480]	; (800a674 <_nx_udp_socket_receive+0x2d8>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3301      	adds	r3, #1
 800a496:	4a77      	ldr	r2, [pc, #476]	; (800a674 <_nx_udp_socket_receive+0x2d8>)
 800a498:	6013      	str	r3, [r2, #0]

                /* Save the timeout value.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800a49a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	64da      	str	r2, [r3, #76]	; 0x4c
 800a4a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4a2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a4a4:	6a3b      	ldr	r3, [r7, #32]
 800a4a6:	f383 8810 	msr	PRIMASK, r3
}
 800a4aa:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800a4ac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a4ae:	f003 fb91 	bl	800dbd4 <_tx_thread_system_suspend>

                /* Determine if a packet was received successfully.  */
                if (thread_ptr -> tx_thread_suspend_status != NX_SUCCESS)
 800a4b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00e      	beq.n	800a4da <_nx_udp_socket_receive+0x13e>
                {

                    /* If not, just return the error code.  */
                    return(thread_ptr -> tx_thread_suspend_status);
 800a4bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4c2:	e0cf      	b.n	800a664 <_nx_udp_socket_receive+0x2c8>
 800a4c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4c6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	f383 8810 	msr	PRIMASK, r3
}
 800a4ce:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Set the return pointer to NULL in case it was set but released due to checksum error.  */
                *packet_ptr =   NX_NULL;
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]

                /* Immediate return, return error completion.  */
                return(NX_NO_PACKET);
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e0c4      	b.n	800a664 <_nx_udp_socket_receive+0x2c8>
            }
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        /* Get the packet interface. */
#ifndef NX_DISABLE_IPV4
        if ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a4e2:	2b04      	cmp	r3, #4
 800a4e4:	d103      	bne.n	800a4ee <_nx_udp_socket_receive+0x152>
        {
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_interface_ptr;
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ec:	65fb      	str	r3, [r7, #92]	; 0x5c
        {
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
        }
#endif /* FEATURE_NX_IPV6 */

        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_RX_CHECKSUM)
 800a4ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4f2:	f003 0320 	and.w	r3, r3, #32
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <_nx_udp_socket_receive+0x162>
        {
            compute_checksum = 0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	65bb      	str	r3, [r7, #88]	; 0x58
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 800a4fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a500:	2b00      	cmp	r3, #0
 800a502:	f000 809d 	beq.w	800a640 <_nx_udp_socket_receive+0x2a4>

            /* Determine if we need to compute the UDP checksum.  If it is disabled for this socket
               or if the UDP packet has a zero in the checksum field (indicating it was not computed
               by the sender, skip the checksum processing.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            temp_ptr =  (ULONG *)(*packet_ptr) -> nx_packet_prepend_ptr;
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	647b      	str	r3, [r7, #68]	; 0x44
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a512:	2b00      	cmp	r3, #0
 800a514:	d105      	bne.n	800a522 <_nx_udp_socket_receive+0x186>
 800a516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a518:	3304      	adds	r3, #4
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d106      	bne.n	800a530 <_nx_udp_socket_receive+0x194>
                ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V6))                               /* It is IPv6 packet */
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 800a52a:	2b06      	cmp	r3, #6
 800a52c:	f040 808b 	bne.w	800a646 <_nx_udp_socket_receive+0x2aa>
            {
            ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 800a530:	2300      	movs	r3, #0
 800a532:	657b      	str	r3, [r7, #84]	; 0x54
 800a534:	2300      	movs	r3, #0
 800a536:	653b      	str	r3, [r7, #80]	; 0x50
            ULONG          checksum;
            NX_PACKET     *current_ptr = *packet_ptr;
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	643b      	str	r3, [r7, #64]	; 0x40
#ifdef NX_LITTLE_ENDIAN
            NX_UDP_HEADER *udp_header_ptr;

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(current_ptr -> nx_packet_prepend_ptr);
 800a53e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* NX_LITTLE_ENDIAN */

#ifndef NX_DISABLE_IPV4
                if (current_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800a544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a546:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a54a:	2b04      	cmp	r3, #4
 800a54c:	d108      	bne.n	800a560 <_nx_udp_socket_receive+0x1c4>
                {
                NX_IPV4_HEADER *ipv4_header;

                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    ipv4_header = (NX_IPV4_HEADER *)(current_ptr -> nx_packet_ip_header);
 800a54e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a552:	63bb      	str	r3, [r7, #56]	; 0x38
                    ip_src_addr = &(ipv4_header -> nx_ip_header_source_ip);
 800a554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a556:	330c      	adds	r3, #12
 800a558:	657b      	str	r3, [r7, #84]	; 0x54
                    ip_dest_addr = &(ipv4_header -> nx_ip_header_destination_ip);
 800a55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55c:	3310      	adds	r3, #16
 800a55e:	653b      	str	r3, [r7, #80]	; 0x50

#endif /* FEATURE_NX_IPV6 */

#ifdef NX_LITTLE_ENDIAN
                /* Restore UDP header to network byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800a560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	ba1a      	rev	r2, r3
 800a566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a568:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800a56a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	ba1a      	rev	r2, r3
 800a570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a572:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* nx_ip_checksum_compute takes care of both even number length and odd number length */
                /* Compute the checksum of the first packet */
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
                                                   (UINT)current_ptr -> nx_packet_length,
 800a574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
 800a578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a57e:	2111      	movs	r1, #17
 800a580:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a582:	f7fc fb3a 	bl	8006bfa <_nx_ip_checksum_compute>
 800a586:	4603      	mov	r3, r0
 800a588:	637b      	str	r3, [r7, #52]	; 0x34
                                                   ip_src_addr,
                                                   ip_dest_addr);

#ifdef NX_LITTLE_ENDIAN
                /* Convert UDP header to host byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800a58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	ba1a      	rev	r2, r3
 800a590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a592:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800a594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	ba1a      	rev	r2, r3
 800a59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a59c:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* Perform the one's complement processing on the checksum.  */
                checksum =  NX_LOWER_16_MASK & ~checksum;
 800a59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a0:	43db      	mvns	r3, r3
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	637b      	str	r3, [r7, #52]	; 0x34

                /* Determine if it is valid.  */
                if (checksum == 0)
 800a5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d04b      	beq.n	800a644 <_nx_udp_socket_receive+0x2a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a5ac:	f3ef 8310 	mrs	r3, PRIMASK
 800a5b0:	617b      	str	r3, [r7, #20]
    return(posture);
 800a5b2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a5b4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a5b6:	b672      	cpsid	i
    return(int_posture);
 800a5b8:	693b      	ldr	r3, [r7, #16]
                {

#ifndef NX_DISABLE_UDP_INFO

                    /* Disable interrupts.  */
                    TX_DISABLE
 800a5ba:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Increment the UDP checksum error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_checksum_errors++;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800a5c4:	3201      	adds	r2, #1
 800a5c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

                    /* Increment the UDP invalid packets error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a5d2:	3201      	adds	r2, #1
 800a5d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                    /* Increment the UDP checksum error count for this socket.  */
                    socket_ptr -> nx_udp_socket_checksum_errors++;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5dc:	1c5a      	adds	r2, r3, #1
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Decrement the total UDP receive packets count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packets_received--;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a5ea:	3a01      	subs	r2, #1
 800a5ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

                    /* Decrement the total UDP receive bytes.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fe:	1ad2      	subs	r2, r2, r3
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	3208      	adds	r2, #8
 800a606:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

                    /* Decrement the total UDP receive packets count.  */
                    socket_ptr -> nx_udp_socket_packets_received--;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	699b      	ldr	r3, [r3, #24]
 800a60e:	1e5a      	subs	r2, r3, #1
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	619a      	str	r2, [r3, #24]

                    /* Decrement the total UDP receive bytes.  */
                    socket_ptr -> nx_udp_socket_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	69da      	ldr	r2, [r3, #28]
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61e:	1ad3      	subs	r3, r2, r3
 800a620:	f103 0208 	add.w	r2, r3, #8
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	61da      	str	r2, [r3, #28]
 800a628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a62a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	f383 8810 	msr	PRIMASK, r3
}
 800a632:	bf00      	nop
                    /* Restore interrupts.  */
                    TX_RESTORE
#endif

                    /* Bad UDP checksum.  Release the packet. */
                    _nx_packet_release(*packet_ptr);
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fe ffa1 	bl	8009580 <_nx_packet_release>
        TX_DISABLE
 800a63e:	e6ba      	b.n	800a3b6 <_nx_udp_socket_receive+0x1a>
#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        else
        {

            /* Simply break - checksum logic is conditionally disabled.  */
            break;
 800a640:	bf00      	nop
 800a642:	e000      	b.n	800a646 <_nx_udp_socket_receive+0x2aa>
                    break;
 800a644:	bf00      	nop
    /* At this point, we have a valid UDP packet for the caller.  */

    /* Remove the UDP header.  */

    /* Decrease the packet length.  */
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	3a08      	subs	r2, #8
 800a652:	625a      	str	r2, [r3, #36]	; 0x24

    /* Position past the UDP header pointer.  */
    (*packet_ptr) -> nx_packet_prepend_ptr =   (*packet_ptr) -> nx_packet_prepend_ptr + sizeof(NX_UDP_HEADER);
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	689a      	ldr	r2, [r3, #8]
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	3208      	adds	r2, #8
 800a660:	609a      	str	r2, [r3, #8]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_SOCKET_RECEIVE, 0, 0, *packet_ptr, (*packet_ptr) -> nx_packet_length);

    /* Return a successful status to the caller.  */
    return(NX_SUCCESS);
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3760      	adds	r7, #96	; 0x60
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	20014884 	.word	0x20014884
 800a670:	08009eb9 	.word	0x08009eb9
 800a674:	2001491c 	.word	0x2001491c

0800a678 <_nx_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                          ULONG ip_address, UINT port)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b088      	sub	sp, #32
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	603b      	str	r3, [r7, #0]
UINT        status;

NXD_ADDRESS dual_ip_address;

    /* build up the IP Address structure. */
    dual_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
 800a686:	2304      	movs	r3, #4
 800a688:	617b      	str	r3, [r7, #20]
    dual_ip_address.nxd_ip_address.v4 = ip_address;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	61bb      	str	r3, [r7, #24]

    /* Call the actual udp socket send routine. */
    status = _nxd_udp_socket_send(socket_ptr, packet_ptr, &dual_ip_address, port);
 800a68e:	f107 0214 	add.w	r2, r7, #20
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	68b9      	ldr	r1, [r7, #8]
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f000 f985 	bl	800a9a6 <_nxd_udp_socket_send>
 800a69c:	61f8      	str	r0, [r7, #28]

    return(status);
 800a69e:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3720      	adds	r7, #32
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <_nx_udp_socket_unbind>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_unbind(NX_UDP_SOCKET *socket_ptr)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b094      	sub	sp, #80	; 0x50
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
NX_PACKET     *packet_ptr;
NX_PACKET     *next_packet_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	647b      	str	r3, [r7, #68]	; 0x44
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_UNBIND, ip_ptr, socket_ptr, socket_ptr -> nx_udp_socket_port, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a6b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6b8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a6bc:	f04f 31ff 	mov.w	r1, #4294967295
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f002 f959 	bl	800c978 <_tx_mutex_get>

    /* Determine if the socket is bound to port.  */
    if (!socket_ptr -> nx_udp_socket_bound_next)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d119      	bne.n	800a702 <_nx_udp_socket_unbind+0x5a>
    {

        /* Determine if there is a special condition for the socket not being in
           a bound condition...  i.e. the socket is in a pending-to-be-bound condition
           in a call from a different thread.  */
        if (socket_ptr -> nx_udp_socket_bind_in_progress)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00d      	beq.n	800a6f2 <_nx_udp_socket_unbind+0x4a>
        {

            /* Execute the bind suspension cleanup routine.  */
            _nx_udp_bind_cleanup(socket_ptr -> nx_udp_socket_bind_in_progress NX_CLEANUP_ARGUMENT);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6da:	2100      	movs	r1, #0
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7ff f929 	bl	8009934 <_nx_udp_bind_cleanup>

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a6e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6e4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f002 fbbd 	bl	800ce68 <_tx_mutex_put>

            /* Return success.  */
            return(NX_SUCCESS);
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	e135      	b.n	800a95e <_nx_udp_socket_unbind+0x2b6>
        }
        else
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a6f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6f4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f002 fbb5 	bl	800ce68 <_tx_mutex_put>

            /* Return a not bound error code.  */
            return(NX_NOT_BOUND);
 800a6fe:	2324      	movs	r3, #36	; 0x24
 800a700:	e12d      	b.n	800a95e <_nx_udp_socket_unbind+0x2b6>

    /* Otherwise, the socket is bound.  We need to remove this socket from the
       port and check for any other UDP socket bind requests that are queued.  */

    /* Pickup the port number in the UDP socket structure.  */
    port =  socket_ptr -> nx_udp_socket_port;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	643b      	str	r3, [r7, #64]	; 0x40

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800a708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a70a:	0a1a      	lsrs	r2, r3, #8
 800a70c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a70e:	4413      	add	r3, r2
 800a710:	f003 031f 	and.w	r3, r3, #31
 800a714:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a716:	f3ef 8310 	mrs	r3, PRIMASK
 800a71a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a71e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a720:	b672      	cpsid	i
    return(int_posture);
 800a722:	6abb      	ldr	r3, [r7, #40]	; 0x28
#ifdef NX_ENABLE_TCPIP_OFFLOAD
    _nx_udp_socket_driver_unbind(socket_ptr);
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Disable interrupts while we unlink the current socket.  */
    TX_DISABLE
 800a724:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if this is the only socket bound on this port list.  */
    if (socket_ptr -> nx_udp_socket_bound_next == socket_ptr)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d109      	bne.n	800a744 <_nx_udp_socket_unbind+0x9c>
    {

        /* Yes, this is the only socket on the port list.  */

        /* Clear the list head pointer and the next pointer in the socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =   NX_NULL;
 800a730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a732:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a734:	32e0      	adds	r2, #224	; 0xe0
 800a736:	2100      	movs	r1, #0
 800a738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	64da      	str	r2, [r3, #76]	; 0x4c
 800a742:	e01b      	b.n	800a77c <_nx_udp_socket_unbind+0xd4>
    {

        /* Relink the neighbors of this UDP socket.  */

        /* Update the links of the adjacent sockets.  */
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous;
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	6d12      	ldr	r2, [r2, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 800a74c:	651a      	str	r2, [r3, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            socket_ptr -> nx_udp_socket_bound_next;
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800a756:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Determine if the head of the port list points to the socket being removed.
           If so, we need to move the head pointer.  */
        if (ip_ptr -> nx_ip_udp_port_table[index] == socket_ptr)
 800a758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a75a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a75c:	32e0      	adds	r2, #224	; 0xe0
 800a75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	429a      	cmp	r2, r3
 800a766:	d106      	bne.n	800a776 <_nx_udp_socket_unbind+0xce>
        {

            /* Yes, we need to move the port list head pointer.  */
            ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr -> nx_udp_socket_bound_next;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a76c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a76e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a770:	32e0      	adds	r2, #224	; 0xe0
 800a772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }

        /* Clear the next pointer in the socket to indicate it is no longer bound.  */
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	64da      	str	r2, [r3, #76]	; 0x4c
 800a77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a782:	f383 8810 	msr	PRIMASK, r3
}
 800a786:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* The socket is off the bound list...  we need to check for queued packets and possible
       receive suspension.  We need to clean up either of these conditions.  */
    if (socket_ptr -> nx_udp_socket_receive_count)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d01b      	beq.n	800a7c8 <_nx_udp_socket_unbind+0x120>
    {

        /* Setup packet pointer.  */
        packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a794:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Clear the head and the tail pointers.  */
        socket_ptr -> nx_udp_socket_receive_head =  NX_NULL;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	645a      	str	r2, [r3, #68]	; 0x44
        socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	649a      	str	r2, [r3, #72]	; 0x48

        /* Loop to clear all the packets out.  */
        while (socket_ptr -> nx_udp_socket_receive_count)
 800a7a2:	e00c      	b.n	800a7be <_nx_udp_socket_unbind+0x116>
        {

            /* Pickup the next queued packet.  */
            next_packet_ptr =  packet_ptr -> nx_packet_queue_next;
 800a7a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7a6:	69db      	ldr	r3, [r3, #28]
 800a7a8:	637b      	str	r3, [r7, #52]	; 0x34

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800a7aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a7ac:	f7fe fee8 	bl	8009580 <_nx_packet_release>

            /* Move to the next packet.  */
            packet_ptr =  next_packet_ptr;
 800a7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b2:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b8:	1e5a      	subs	r2, r3, #1
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	63da      	str	r2, [r3, #60]	; 0x3c
        while (socket_ptr -> nx_udp_socket_receive_count)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1ee      	bne.n	800a7a4 <_nx_udp_socket_unbind+0xfc>
 800a7c6:	e035      	b.n	800a834 <_nx_udp_socket_unbind+0x18c>
        }
    }
    else if (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d031      	beq.n	800a834 <_nx_udp_socket_unbind+0x18c>
    {

        /* Clear out all threads suspended on this socket.  */

        /* Pickup the first suspended thread.  */
        thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7d4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Clear the thread receive suspension list.  */
        socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	659a      	str	r2, [r3, #88]	; 0x58

        /* Walk through the queue list to resume any and all threads suspended
           on this queue.  */
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800a7dc:	e026      	b.n	800a82c <_nx_udp_socket_unbind+0x184>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a7de:	f3ef 8310 	mrs	r3, PRIMASK
 800a7e2:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a7e4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a7e6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a7e8:	b672      	cpsid	i
    return(int_posture);
 800a7ea:	69bb      	ldr	r3, [r7, #24]
        {

            /* Lockout interrupts.  */
            TX_DISABLE
 800a7ec:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a7ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 800a7f4:	4b5c      	ldr	r3, [pc, #368]	; (800a968 <_nx_udp_socket_unbind+0x2c0>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	4a5b      	ldr	r2, [pc, #364]	; (800a968 <_nx_udp_socket_unbind+0x2c0>)
 800a7fc:	6013      	str	r3, [r2, #0]
 800a7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a800:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	f383 8810 	msr	PRIMASK, r3
}
 800a808:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set the return status in the thread to NX_SOCKET_UNBOUND.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SOCKET_UNBOUND;
 800a80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a80c:	2226      	movs	r2, #38	; 0x26
 800a80e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800a812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a816:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800a818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a81a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a81c:	4618      	mov	r0, r3
 800a81e:	f003 f8d9 	bl	800d9d4 <_tx_thread_system_resume>

            /* Decrease the suspended count.  */
            socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a826:	1e5a      	subs	r2, r3, #1
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	65da      	str	r2, [r3, #92]	; 0x5c
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1d4      	bne.n	800a7de <_nx_udp_socket_unbind+0x136>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a834:	f3ef 8310 	mrs	r3, PRIMASK
 800a838:	617b      	str	r3, [r7, #20]
    return(posture);
 800a83a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a83c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a83e:	b672      	cpsid	i
    return(int_posture);
 800a840:	693b      	ldr	r3, [r7, #16]
        }
    }

    /* Disable interrupts again.  */
    TX_DISABLE
 800a842:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there are any threads suspended on trying to bind to the
       same port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_bind_suspension_list;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a848:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (thread_ptr)
 800a84a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d079      	beq.n	800a944 <_nx_udp_socket_unbind+0x29c>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800a850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a856:	429a      	cmp	r2, r3
 800a858:	d103      	bne.n	800a862 <_nx_udp_socket_unbind+0x1ba>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	661a      	str	r2, [r3, #96]	; 0x60
 800a860:	e00d      	b.n	800a87e <_nx_udp_socket_unbind+0x1d6>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800a862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a864:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800a86a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800a86e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a870:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800a872:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800a878:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a87a:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a87c:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_bind_suspended_count--;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a882:	1e5a      	subs	r2, r3, #1
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	665a      	str	r2, [r3, #100]	; 0x64

        /* Pickup the new socket structure to link to the port list.  */
        new_socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800a888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a88a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a88c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Clear the new socket's bind in progress flag.  */
        new_socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 800a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a890:	2200      	movs	r2, #0
 800a892:	655a      	str	r2, [r3, #84]	; 0x54

        /* Inherit the suspension list from the previously bound socket.  */
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
            socket_ptr -> nx_udp_socket_bind_suspension_list;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6e1a      	ldr	r2, [r3, #96]	; 0x60
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
 800a898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89a:	661a      	str	r2, [r3, #96]	; 0x60
        socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Link the new socket to the bound list.  */
        if (ip_ptr -> nx_ip_udp_port_table[index])
 800a8a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8a6:	32e0      	adds	r2, #224	; 0xe0
 800a8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d01e      	beq.n	800a8ee <_nx_udp_socket_unbind+0x246>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            new_socket_ptr -> nx_udp_socket_bound_next =
                ip_ptr -> nx_ip_udp_port_table[index];
 800a8b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8b4:	32e0      	adds	r2, #224	; 0xe0
 800a8b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            new_socket_ptr -> nx_udp_socket_bound_next =
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8bc:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =
                (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 800a8be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8c2:	32e0      	adds	r2, #224	; 0xe0
 800a8c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            new_socket_ptr -> nx_udp_socket_bound_previous =
 800a8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8cc:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800a8ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8d2:	32e0      	adds	r2, #224	; 0xe0
 800a8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8dc:	64da      	str	r2, [r3, #76]	; 0x4c
                new_socket_ptr;
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   new_socket_ptr;
 800a8de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8e2:	32e0      	adds	r2, #224	; 0xe0
 800a8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8ea:	651a      	str	r2, [r3, #80]	; 0x50
 800a8ec:	e00b      	b.n	800a906 <_nx_udp_socket_unbind+0x25e>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            new_socket_ptr -> nx_udp_socket_bound_next =      new_socket_ptr;
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8f2:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =  new_socket_ptr;
 800a8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8f8:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =           new_socket_ptr;
 800a8fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8fe:	32e0      	adds	r2, #224	; 0xe0
 800a900:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a908:	2200      	movs	r2, #0
 800a90a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800a90c:	4b16      	ldr	r3, [pc, #88]	; (800a968 <_nx_udp_socket_unbind+0x2c0>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	3301      	adds	r3, #1
 800a912:	4a15      	ldr	r2, [pc, #84]	; (800a968 <_nx_udp_socket_unbind+0x2c0>)
 800a914:	6013      	str	r3, [r2, #0]
 800a916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a918:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f383 8810 	msr	PRIMASK, r3
}
 800a920:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800a922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a924:	2200      	movs	r2, #0
 800a926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a92a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a92c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a930:	4618      	mov	r0, r3
 800a932:	f002 fa99 	bl	800ce68 <_tx_mutex_put>

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800a936:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a938:	f003 f84c 	bl	800d9d4 <_tx_thread_system_resume>
        /* Return success to the caller.  */
        return(NX_SUCCESS);
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800a93c:	f003 f810 	bl	800d960 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 800a940:	2300      	movs	r3, #0
 800a942:	e00c      	b.n	800a95e <_nx_udp_socket_unbind+0x2b6>
 800a944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a946:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	f383 8810 	msr	PRIMASK, r3
}
 800a94e:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a952:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a956:	4618      	mov	r0, r3
 800a958:	f002 fa86 	bl	800ce68 <_tx_mutex_put>
        return(NX_SUCCESS);
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3750      	adds	r7, #80	; 0x50
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	2001491c 	.word	0x2001491c

0800a96c <_nx_udp_source_extract>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_source_extract(NX_PACKET *packet_ptr, ULONG *ip_address, UINT *port)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b087      	sub	sp, #28
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
ULONG          *temp_ptr;
NX_IPV4_HEADER *ipv4_header;

    /* Build an address to the current top of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    temp_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	617b      	str	r3, [r7, #20]

    /* Pickup the source port.  */
    *port =  (UINT)(*(temp_ptr - 2) >> NX_SHIFT_BY_16);
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	3b08      	subs	r3, #8
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	0c1a      	lsrs	r2, r3, #16
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	601a      	str	r2, [r3, #0]

    /* Obtain the IPv4 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a98e:	613b      	str	r3, [r7, #16]

    /* Pickup the source IP address.  */
    *ip_address =  ipv4_header -> nx_ip_header_source_ip;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	68da      	ldr	r2, [r3, #12]
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	601a      	str	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOURCE_EXTRACT, packet_ptr, *ip_address, *port, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    return(NX_SUCCESS);
 800a998:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	371c      	adds	r7, #28
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <_nxd_udp_socket_send>:
/**************************************************************************/
UINT  _nxd_udp_socket_send(NX_UDP_SOCKET *socket_ptr,
                           NX_PACKET     *packet_ptr,
                           NXD_ADDRESS   *ip_address,
                           UINT           port)
{
 800a9a6:	b590      	push	{r4, r7, lr}
 800a9a8:	b097      	sub	sp, #92	; 0x5c
 800a9aa:	af04      	add	r7, sp, #16
 800a9ac:	60f8      	str	r0, [r7, #12]
 800a9ae:	60b9      	str	r1, [r7, #8]
 800a9b0:	607a      	str	r2, [r7, #4]
 800a9b2:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

NX_IP         *ip_ptr;
NX_UDP_HEADER *udp_header_ptr;
ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	647b      	str	r3, [r7, #68]	; 0x44
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef NX_DISABLE_IPV4
ULONG          next_hop_address = 0;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	617b      	str	r3, [r7, #20]
#endif /* !NX_DISABLE_IPV4  */
#if !defined(NX_DISABLE_IPV4) || (defined(FEATURE_NX_IPV6) && defined(NX_ENABLE_INTERFACE_CAPABILITY))
NX_INTERFACE  *interface_ptr = NX_NULL;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
#ifdef TX_ENABLE_EVENT_TRACE
UINT           ip_address_log = 0;
#endif /* TX_ENABLE_EVENT_TRACE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT           compute_checksum = 1;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a9c8:	f3ef 8310 	mrs	r3, PRIMASK
 800a9cc:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800a9d0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a9d2:	b672      	cpsid	i
    return(int_posture);
 800a9d4:	6a3b      	ldr	r3, [r7, #32]
    /* Disable UDP TX checksum. */
    compute_checksum = 0;
#endif /* NX_DISABLE_UDP_TX_CHECKSUM */

    /* Lockout interrupts.  */
    TX_DISABLE
 800a9d6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the socket is currently bound to a UDP port.  */
    if (!socket_ptr ->  nx_udp_socket_bound_next)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d107      	bne.n	800a9f0 <_nxd_udp_socket_send+0x4a>
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	f383 8810 	msr	PRIMASK, r3
}
 800a9ea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Socket is not bound, return an error message.  */
        return(NX_NOT_BOUND);
 800a9ec:	2324      	movs	r3, #36	; 0x24
 800a9ee:	e0d3      	b.n	800ab98 <_nxd_udp_socket_send+0x1f2>
    }

    /* Pickup the important information from the socket.  */

    /* Set up the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	f383 8810 	msr	PRIMASK, r3
}
 800aa00:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

#ifndef NX_DISABLE_IPV4
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2b04      	cmp	r3, #4
 800aa08:	d118      	bne.n	800aa3c <_nxd_udp_socket_send+0x96>
    {

        /* Look for a suitable interface. */
        _nx_ip_route_find(ip_ptr, ip_address -> nxd_ip_address.v4, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6859      	ldr	r1, [r3, #4]
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa14:	f107 0314 	add.w	r3, r7, #20
 800aa18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa1a:	f7fd fb55 	bl	80080c8 <_nx_ip_route_find>
                          &next_hop_address);

        /* Check the packet interface.  */
        if (!packet_ptr -> nx_packet_address.nx_packet_interface_ptr)
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <_nxd_udp_socket_send+0x84>
        {

            /* None found; return the error status. */
            return(NX_IP_ADDRESS_ERROR);
 800aa26:	2321      	movs	r3, #33	; 0x21
 800aa28:	e0b6      	b.n	800ab98 <_nxd_udp_socket_send+0x1f2>
        }

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa2e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Fill in the IP src/dest address */
        ip_dest_addr = &ip_address -> nxd_ip_address.v4;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	3304      	adds	r3, #4
 800aa34:	643b      	str	r3, [r7, #64]	; 0x40
        ip_src_addr = &interface_ptr -> nx_interface_ip_address;
 800aa36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa38:	3314      	adds	r3, #20
 800aa3a:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }
#endif /* NX_IPSEC_ENABLE */
        
    /* Prepend the UDP header to the packet.  First, make room for the UDP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	f1a3 0208 	sub.w	r2, r3, #8
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	609a      	str	r2, [r3, #8]

    /* Set the correct IP version. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(ip_address -> nxd_ip_version);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

#ifndef NX_DISABLE_UDP_INFO
    /* Increment the total UDP packets sent count.  */
    ip_ptr -> nx_ip_udp_packets_sent++;
 800aa54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa5a:	1c5a      	adds	r2, r3, #1
 800aa5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Increment the total UDP bytes sent.  */
    ip_ptr -> nx_ip_udp_bytes_sent +=  packet_ptr -> nx_packet_length;
 800aa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6c:	441a      	add	r2, r3
 800aa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Increment the total UDP packets sent count for this socket.  */
    socket_ptr -> nx_udp_socket_packets_sent++;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	1c5a      	adds	r2, r3, #1
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	611a      	str	r2, [r3, #16]

    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	695a      	ldr	r2, [r3, #20]
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa86:	441a      	add	r2, r3
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	615a      	str	r2, [r3, #20]
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa90:	f103 0208 	add.w	r2, r3, #8
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the UDP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 =
        (((ULONG)socket_ptr -> nx_udp_socket_port) << NX_SHIFT_BY_16) | (ULONG)port;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	041a      	lsls	r2, r3, #16
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	431a      	orrs	r2, r3
    udp_header_ptr -> nx_udp_header_word_0 =
 800aaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaaa:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab0:	041a      	lsls	r2, r3, #16
 800aab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab4:	605a      	str	r2, [r3, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_SEND, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
    swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800aab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	ba1a      	rev	r2, r3
 800aabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aabe:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	ba1a      	rev	r2, r3
 800aac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac8:	605a      	str	r2, [r3, #4]
    Note that with IPv6, UDP packet checksum is mandatory. However if the underly device
    driver is able to compute UDP checksum in hardware, let the driver handle the checksum
    computation.
    */

    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d003      	beq.n	800aada <_nxd_udp_socket_send+0x134>
        (ip_address -> nxd_ip_version == NX_IP_VERSION_V6))
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800aad6:	2b06      	cmp	r3, #6
 800aad8:	d136      	bne.n	800ab48 <_nxd_udp_socket_send+0x1a2>
    {
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 800aada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aade:	f003 0310 	and.w	r3, r3, #16
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d001      	beq.n	800aaea <_nxd_udp_socket_send+0x144>
        {
            compute_checksum = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	63bb      	str	r3, [r7, #56]	; 0x38
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d025      	beq.n	800ab3c <_nxd_udp_socket_send+0x196>
        ULONG checksum;

            /* Yes, we need to compute the UDP checksum.  */
            checksum = _nx_ip_checksum_compute(packet_ptr,
                                               NX_PROTOCOL_UDP,
                                               (UINT)packet_ptr -> nx_packet_length,
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            checksum = _nx_ip_checksum_compute(packet_ptr,
 800aaf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aafa:	2111      	movs	r1, #17
 800aafc:	68b8      	ldr	r0, [r7, #8]
 800aafe:	f7fc f87c 	bl	8006bfa <_nx_ip_checksum_compute>
 800ab02:	4603      	mov	r3, r0
 800ab04:	637b      	str	r3, [r7, #52]	; 0x34
                                               ip_src_addr,
                                               ip_dest_addr);
            checksum = ~checksum & NX_LOWER_16_MASK;
 800ab06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab08:	43db      	mvns	r3, r3
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	637b      	str	r3, [r7, #52]	; 0x34

            /* If the computed checksum is zero, it will be transmitted as all ones. */
            /* RFC 768, page 2. */
            if (checksum == 0)
 800ab0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d102      	bne.n	800ab1a <_nxd_udp_socket_send+0x174>
            {
                checksum = 0xFFFF;
 800ab14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab18:	637b      	str	r3, [r7, #52]	; 0x34
            }

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	ba1a      	rev	r2, r3
 800ab20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab22:	605a      	str	r2, [r3, #4]

            udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 800ab24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab26:	685a      	ldr	r2, [r3, #4]
 800ab28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab2a:	431a      	orrs	r2, r3
 800ab2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2e:	605a      	str	r2, [r3, #4]

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ab30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	ba1a      	rev	r2, r3
 800ab36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab38:	605a      	str	r2, [r3, #4]
 800ab3a:	e005      	b.n	800ab48 <_nxd_udp_socket_send+0x1a2>
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        else
        {
            /* Set CHECKSUM flag so the driver would invoke the HW checksum. */
            packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab40:	f043 0210 	orr.w	r2, r3, #16
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	639a      	str	r2, [r3, #56]	; 0x38
        }
#endif
    }

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800ab48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ab4e:	f04f 31ff 	mov.w	r1, #4294967295
 800ab52:	4618      	mov	r0, r3
 800ab54:	f001 ff10 	bl	800c978 <_tx_mutex_get>
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

#ifndef NX_DISABLE_IPV4
    /* Send the UDP packet to the IPv4 component.  */
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b04      	cmp	r3, #4
 800ab5e:	d114      	bne.n	800ab8a <_nxd_udp_socket_send+0x1e4>
    {

        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6858      	ldr	r0, [r3, #4]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6adc      	ldr	r4, [r3, #44]	; 0x2c
                           socket_ptr -> nx_udp_socket_type_of_service,
                           socket_ptr -> nx_udp_socket_time_to_live,
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ab70:	6979      	ldr	r1, [r7, #20]
 800ab72:	9103      	str	r1, [sp, #12]
 800ab74:	9202      	str	r2, [sp, #8]
 800ab76:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800ab7a:	9201      	str	r2, [sp, #4]
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	4623      	mov	r3, r4
 800ab80:	4602      	mov	r2, r0
 800ab82:	68b9      	ldr	r1, [r7, #8]
 800ab84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab86:	f7fd fa29 	bl	8007fdc <_nx_ip_packet_send>
                             ip_dest_addr);
    }
#endif /* FEATURE_NX_IPV6 */

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ab8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ab90:	4618      	mov	r0, r3
 800ab92:	f002 f969 	bl	800ce68 <_tx_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	374c      	adds	r7, #76	; 0x4c
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd90      	pop	{r4, r7, pc}

0800aba0 <_nxe_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b088      	sub	sp, #32
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (arp_cache_memory == NX_NULL))
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d007      	beq.n	800abc2 <_nxe_arp_enable+0x22>
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a1c      	ldr	r2, [pc, #112]	; (800ac28 <_nxe_arp_enable+0x88>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d102      	bne.n	800abc2 <_nxe_arp_enable+0x22>
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d101      	bne.n	800abc6 <_nxe_arp_enable+0x26>
    {
        return(NX_PTR_ERROR);
 800abc2:	2307      	movs	r3, #7
 800abc4:	e02c      	b.n	800ac20 <_nxe_arp_enable+0x80>
    }

    /* Check to see if ARP is already enabled.  */
    if (ip_ptr -> nx_ip_arp_allocate)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d001      	beq.n	800abd4 <_nxe_arp_enable+0x34>
    {
        return(NX_ALREADY_ENABLED);
 800abd0:	2315      	movs	r3, #21
 800abd2:	e025      	b.n	800ac20 <_nxe_arp_enable+0x80>
    }

    /* Check for invalid ARP cache size.  */
    if (arp_cache_size < sizeof(NX_ARP))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2b33      	cmp	r3, #51	; 0x33
 800abd8:	d801      	bhi.n	800abde <_nxe_arp_enable+0x3e>
    {
        return(NX_SIZE_ERROR);
 800abda:	2309      	movs	r3, #9
 800abdc:	e020      	b.n	800ac20 <_nxe_arp_enable+0x80>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800abde:	f3ef 8305 	mrs	r3, IPSR
 800abe2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800abe4:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800abe6:	4b11      	ldr	r3, [pc, #68]	; (800ac2c <_nxe_arp_enable+0x8c>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4313      	orrs	r3, r2
 800abec:	2b00      	cmp	r3, #0
 800abee:	d009      	beq.n	800ac04 <_nxe_arp_enable+0x64>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800abf0:	f3ef 8305 	mrs	r3, IPSR
 800abf4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	4b0c      	ldr	r3, [pc, #48]	; (800ac2c <_nxe_arp_enable+0x8c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4313      	orrs	r3, r2
 800abfe:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ac02:	d304      	bcc.n	800ac0e <_nxe_arp_enable+0x6e>
 800ac04:	4b0a      	ldr	r3, [pc, #40]	; (800ac30 <_nxe_arp_enable+0x90>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a0a      	ldr	r2, [pc, #40]	; (800ac34 <_nxe_arp_enable+0x94>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d101      	bne.n	800ac12 <_nxe_arp_enable+0x72>
 800ac0e:	2311      	movs	r3, #17
 800ac10:	e006      	b.n	800ac20 <_nxe_arp_enable+0x80>

    /* Call actual ARP enable function.  */
    status =  _nx_arp_enable(ip_ptr, arp_cache_memory, arp_cache_size);
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	68b9      	ldr	r1, [r7, #8]
 800ac16:	68f8      	ldr	r0, [r7, #12]
 800ac18:	f7fa fdec 	bl	80057f4 <_nx_arp_enable>
 800ac1c:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800ac1e:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3720      	adds	r7, #32
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	49502020 	.word	0x49502020
 800ac2c:	20000088 	.word	0x20000088
 800ac30:	20014884 	.word	0x20014884
 800ac34:	200149cc 	.word	0x200149cc

0800ac38 <_nxe_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_icmp_enable(NX_IP *ip_ptr)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d004      	beq.n	800ac50 <_nxe_icmp_enable+0x18>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a17      	ldr	r2, [pc, #92]	; (800aca8 <_nxe_icmp_enable+0x70>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d001      	beq.n	800ac54 <_nxe_icmp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 800ac50:	2307      	movs	r3, #7
 800ac52:	e025      	b.n	800aca0 <_nxe_icmp_enable+0x68>
    }

    /* Check to see if ICMP is enabled.  */
    if (ip_ptr -> nx_ip_icmp_packet_receive)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d001      	beq.n	800ac62 <_nxe_icmp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 800ac5e:	2315      	movs	r3, #21
 800ac60:	e01e      	b.n	800aca0 <_nxe_icmp_enable+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ac62:	f3ef 8305 	mrs	r3, IPSR
 800ac66:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800ac68:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800ac6a:	4b10      	ldr	r3, [pc, #64]	; (800acac <_nxe_icmp_enable+0x74>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d009      	beq.n	800ac88 <_nxe_icmp_enable+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ac74:	f3ef 8305 	mrs	r3, IPSR
 800ac78:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	4b0b      	ldr	r3, [pc, #44]	; (800acac <_nxe_icmp_enable+0x74>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4313      	orrs	r3, r2
 800ac82:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ac86:	d304      	bcc.n	800ac92 <_nxe_icmp_enable+0x5a>
 800ac88:	4b09      	ldr	r3, [pc, #36]	; (800acb0 <_nxe_icmp_enable+0x78>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a09      	ldr	r2, [pc, #36]	; (800acb4 <_nxe_icmp_enable+0x7c>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d101      	bne.n	800ac96 <_nxe_icmp_enable+0x5e>
 800ac92:	2311      	movs	r3, #17
 800ac94:	e004      	b.n	800aca0 <_nxe_icmp_enable+0x68>

    /* Call actual ICMP enable function.  */
    status =  _nx_icmp_enable(ip_ptr);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7fb fbb0 	bl	80063fc <_nx_icmp_enable>
 800ac9c:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800ac9e:	697b      	ldr	r3, [r7, #20]
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3718      	adds	r7, #24
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	49502020 	.word	0x49502020
 800acac:	20000088 	.word	0x20000088
 800acb0:	20014884 	.word	0x20014884
 800acb4:	200149cc 	.word	0x200149cc

0800acb8 <_nxe_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b088      	sub	sp, #32
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (ip_address == NX_NULL) || (network_mask == NX_NULL))
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00a      	beq.n	800ace0 <_nxe_ip_address_get+0x28>
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a18      	ldr	r2, [pc, #96]	; (800ad30 <_nxe_ip_address_get+0x78>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d105      	bne.n	800ace0 <_nxe_ip_address_get+0x28>
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d002      	beq.n	800ace0 <_nxe_ip_address_get+0x28>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d101      	bne.n	800ace4 <_nxe_ip_address_get+0x2c>
    {
        return(NX_PTR_ERROR);
 800ace0:	2307      	movs	r3, #7
 800ace2:	e020      	b.n	800ad26 <_nxe_ip_address_get+0x6e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ace4:	f3ef 8305 	mrs	r3, IPSR
 800ace8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800acea:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800acec:	4b11      	ldr	r3, [pc, #68]	; (800ad34 <_nxe_ip_address_get+0x7c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d009      	beq.n	800ad0a <_nxe_ip_address_get+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800acf6:	f3ef 8305 	mrs	r3, IPSR
 800acfa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800acfc:	697a      	ldr	r2, [r7, #20]
 800acfe:	4b0d      	ldr	r3, [pc, #52]	; (800ad34 <_nxe_ip_address_get+0x7c>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ad08:	d304      	bcc.n	800ad14 <_nxe_ip_address_get+0x5c>
 800ad0a:	4b0b      	ldr	r3, [pc, #44]	; (800ad38 <_nxe_ip_address_get+0x80>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a0b      	ldr	r2, [pc, #44]	; (800ad3c <_nxe_ip_address_get+0x84>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d101      	bne.n	800ad18 <_nxe_ip_address_get+0x60>
 800ad14:	2311      	movs	r3, #17
 800ad16:	e006      	b.n	800ad26 <_nxe_ip_address_get+0x6e>

    /* Call actual IP address get function.  */
    status =  _nx_ip_address_get(ip_ptr, ip_address, network_mask);
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	68b9      	ldr	r1, [r7, #8]
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f7fb ff3b 	bl	8006b98 <_nx_ip_address_get>
 800ad22:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800ad24:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3720      	adds	r7, #32
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	49502020 	.word	0x49502020
 800ad34:	20000088 	.word	0x20000088
 800ad38:	20014884 	.word	0x20014884
 800ad3c:	200149cc 	.word	0x200149cc

0800ad40 <_nxe_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                     NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                     VOID *memory_ptr, ULONG memory_size, UINT priority, UINT ip_control_block_size)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b092      	sub	sp, #72	; 0x48
 800ad44:	af06      	add	r7, sp, #24
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]
 800ad4c:	603b      	str	r3, [r7, #0]

UINT       status;
UINT       old_threshold = 0;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	613b      	str	r3, [r7, #16]
UCHAR     *end_stack;
TX_THREAD *current_thread;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d011      	beq.n	800ad7c <_nxe_ip_create+0x3c>
 800ad58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00e      	beq.n	800ad7c <_nxe_ip_create+0x3c>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 800ad5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad60:	681b      	ldr	r3, [r3, #0]
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 800ad62:	4a58      	ldr	r2, [pc, #352]	; (800aec4 <_nxe_ip_create+0x184>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d109      	bne.n	800ad7c <_nxe_ip_create+0x3c>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 800ad68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d006      	beq.n	800ad7c <_nxe_ip_create+0x3c>
 800ad6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d003      	beq.n	800ad7c <_nxe_ip_create+0x3c>
        (memory_ptr == NX_NULL) || (ip_control_block_size != (UINT)sizeof(NX_IP)))
 800ad74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad76:	f5b3 6ff9 	cmp.w	r3, #1992	; 0x7c8
 800ad7a:	d001      	beq.n	800ad80 <_nxe_ip_create+0x40>
    {
        return(NX_PTR_ERROR);
 800ad7c:	2307      	movs	r3, #7
 800ad7e:	e09d      	b.n	800aebc <_nxe_ip_create+0x17c>
    }

    /* Check for a memory size error.  */
    if (memory_size < TX_MINIMUM_STACK)
 800ad80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad82:	2bc7      	cmp	r3, #199	; 0xc7
 800ad84:	d801      	bhi.n	800ad8a <_nxe_ip_create+0x4a>
    {
        return(NX_SIZE_ERROR);
 800ad86:	2309      	movs	r3, #9
 800ad88:	e098      	b.n	800aebc <_nxe_ip_create+0x17c>
    }

    /* Check the priority specified.  */
    if (priority >= TX_MAX_PRIORITIES)
 800ad8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad8c:	2b1f      	cmp	r3, #31
 800ad8e:	d901      	bls.n	800ad94 <_nxe_ip_create+0x54>
    {
        return(NX_OPTION_ERROR);
 800ad90:	230a      	movs	r3, #10
 800ad92:	e093      	b.n	800aebc <_nxe_ip_create+0x17c>
    }

    /* Calculate the end of the stack area.  */
    end_stack =  ((UCHAR *)memory_ptr) + (memory_size - 1);
 800ad94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad96:	3b01      	subs	r3, #1
 800ad98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad9a:	4413      	add	r3, r2
 800ad9c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800ad9e:	f002 fb7f 	bl	800d4a0 <_tx_thread_identify>
 800ada2:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    if (current_thread)
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d006      	beq.n	800adb8 <_nxe_ip_create+0x78>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800adaa:	f107 0310 	add.w	r3, r7, #16
 800adae:	461a      	mov	r2, r3
 800adb0:	2100      	movs	r1, #0
 800adb2:	6a38      	ldr	r0, [r7, #32]
 800adb4:	f002 fbce 	bl	800d554 <_tx_thread_preemption_change>
    }

    /* Loop to check for the IP instance already created.  */
    created_ip =     _nx_ip_created_ptr;
 800adb8:	4b43      	ldr	r3, [pc, #268]	; (800aec8 <_nxe_ip_create+0x188>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    created_count =  _nx_ip_created_count;
 800adbe:	4b43      	ldr	r3, [pc, #268]	; (800aecc <_nxe_ip_create+0x18c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	62bb      	str	r3, [r7, #40]	; 0x28
    while (created_count--)
 800adc4:	e02b      	b.n	800ae1e <_nxe_ip_create+0xde>
    {

        /* Is the new ip already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ip_ptr == created_ip) ||
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adca:	429a      	cmp	r2, r3
 800adcc:	d017      	beq.n	800adfe <_nxe_ip_create+0xbe>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800adce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
        if ((ip_ptr == created_ip) ||
 800add4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800add6:	429a      	cmp	r2, r3
 800add8:	d305      	bcc.n	800ade6 <_nxe_ip_create+0xa6>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800adda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800addc:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800ade0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d30b      	bcc.n	800adfe <_nxe_ip_create+0xbe>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 800ade6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800adec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adee:	429a      	cmp	r2, r3
 800adf0:	d311      	bcc.n	800ae16 <_nxe_ip_create+0xd6>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 800adf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800adf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d20b      	bcs.n	800ae16 <_nxe_ip_create+0xd6>
        {

            /* Restore preemption.  */
            if (current_thread)
 800adfe:	6a3b      	ldr	r3, [r7, #32]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d006      	beq.n	800ae12 <_nxe_ip_create+0xd2>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	f107 0210 	add.w	r2, r7, #16
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	6a38      	ldr	r0, [r7, #32]
 800ae0e:	f002 fba1 	bl	800d554 <_tx_thread_preemption_change>
            }

            /* Duplicate ip created, return an error!  */
            return(NX_PTR_ERROR);
 800ae12:	2307      	movs	r3, #7
 800ae14:	e052      	b.n	800aebc <_nxe_ip_create+0x17c>
        }

        /* Move to next entry.  */
        created_ip =  created_ip -> nx_ip_created_next;
 800ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae18:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 800ae1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (created_count--)
 800ae1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae20:	1e5a      	subs	r2, r3, #1
 800ae22:	62ba      	str	r2, [r7, #40]	; 0x28
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1ce      	bne.n	800adc6 <_nxe_ip_create+0x86>
    }

    /* Restore preemption.  */
    if (current_thread)
 800ae28:	6a3b      	ldr	r3, [r7, #32]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d006      	beq.n	800ae3c <_nxe_ip_create+0xfc>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	f107 0210 	add.w	r2, r7, #16
 800ae34:	4619      	mov	r1, r3
 800ae36:	6a38      	ldr	r0, [r7, #32]
 800ae38:	f002 fb8c 	bl	800d554 <_tx_thread_preemption_change>
    }

    /* Check for invalid IP address.  Note that Interface with DHCP enabled
       would start with 0.0.0.0.  Therefore the 0 IP address is allowed. */
    if ((ip_address != 0) &&
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d010      	beq.n	800ae64 <_nxe_ip_create+0x124>
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 800ae42:	687b      	ldr	r3, [r7, #4]
    if ((ip_address != 0) &&
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	da0d      	bge.n	800ae64 <_nxe_ip_create+0x124>
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 800ae4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae52:	d007      	beq.n	800ae64 <_nxe_ip_create+0x124>
        ((ip_address & NX_IP_CLASS_C_MASK) != NX_IP_CLASS_C_TYPE))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 800ae5a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800ae5e:	d001      	beq.n	800ae64 <_nxe_ip_create+0x124>
    {
        return(NX_IP_ADDRESS_ERROR);
 800ae60:	2321      	movs	r3, #33	; 0x21
 800ae62:	e02b      	b.n	800aebc <_nxe_ip_create+0x17c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ae64:	f3ef 8305 	mrs	r3, IPSR
 800ae68:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ae6a:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800ae6c:	4b18      	ldr	r3, [pc, #96]	; (800aed0 <_nxe_ip_create+0x190>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d009      	beq.n	800ae8a <_nxe_ip_create+0x14a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ae76:	f3ef 8305 	mrs	r3, IPSR
 800ae7a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ae7c:	697a      	ldr	r2, [r7, #20]
 800ae7e:	4b14      	ldr	r3, [pc, #80]	; (800aed0 <_nxe_ip_create+0x190>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ae88:	d304      	bcc.n	800ae94 <_nxe_ip_create+0x154>
 800ae8a:	4b12      	ldr	r3, [pc, #72]	; (800aed4 <_nxe_ip_create+0x194>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a12      	ldr	r2, [pc, #72]	; (800aed8 <_nxe_ip_create+0x198>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d101      	bne.n	800ae98 <_nxe_ip_create+0x158>
 800ae94:	2311      	movs	r3, #17
 800ae96:	e011      	b.n	800aebc <_nxe_ip_create+0x17c>

    /* Call actual IP instance create function.  */
    status =  _nx_ip_create(ip_ptr, name, ip_address, network_mask, default_pool, ip_link_driver,
 800ae98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae9a:	9304      	str	r3, [sp, #16]
 800ae9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae9e:	9303      	str	r3, [sp, #12]
 800aea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aea2:	9302      	str	r3, [sp, #8]
 800aea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aea6:	9301      	str	r3, [sp, #4]
 800aea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	68b9      	ldr	r1, [r7, #8]
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f7fb ff8e 	bl	8006dd4 <_nx_ip_create>
 800aeb8:	61f8      	str	r0, [r7, #28]
                            memory_ptr, memory_size, priority);

    /* Return completion status.  */
    return(status);
 800aeba:	69fb      	ldr	r3, [r7, #28]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3730      	adds	r7, #48	; 0x30
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	5041434b 	.word	0x5041434b
 800aec8:	20014828 	.word	0x20014828
 800aecc:	2001482c 	.word	0x2001482c
 800aed0:	20000088 	.word	0x20000088
 800aed4:	20014884 	.word	0x20014884
 800aed8:	200149cc 	.word	0x200149cc

0800aedc <_nxe_ip_driver_direct_command>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_driver_direct_command(NX_IP *ip_ptr, UINT command, ULONG *return_value_ptr)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b088      	sub	sp, #32
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]

UINT status;

    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (return_value_ptr == NX_NULL))
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d007      	beq.n	800aefe <_nxe_ip_driver_direct_command+0x22>
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a16      	ldr	r2, [pc, #88]	; (800af4c <_nxe_ip_driver_direct_command+0x70>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d102      	bne.n	800aefe <_nxe_ip_driver_direct_command+0x22>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d101      	bne.n	800af02 <_nxe_ip_driver_direct_command+0x26>
    {
        return(NX_PTR_ERROR);
 800aefe:	2307      	movs	r3, #7
 800af00:	e020      	b.n	800af44 <_nxe_ip_driver_direct_command+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800af02:	f3ef 8305 	mrs	r3, IPSR
 800af06:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800af08:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800af0a:	4b11      	ldr	r3, [pc, #68]	; (800af50 <_nxe_ip_driver_direct_command+0x74>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4313      	orrs	r3, r2
 800af10:	2b00      	cmp	r3, #0
 800af12:	d009      	beq.n	800af28 <_nxe_ip_driver_direct_command+0x4c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800af14:	f3ef 8305 	mrs	r3, IPSR
 800af18:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	4b0c      	ldr	r3, [pc, #48]	; (800af50 <_nxe_ip_driver_direct_command+0x74>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4313      	orrs	r3, r2
 800af22:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800af26:	d304      	bcc.n	800af32 <_nxe_ip_driver_direct_command+0x56>
 800af28:	4b0a      	ldr	r3, [pc, #40]	; (800af54 <_nxe_ip_driver_direct_command+0x78>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a0a      	ldr	r2, [pc, #40]	; (800af58 <_nxe_ip_driver_direct_command+0x7c>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d101      	bne.n	800af36 <_nxe_ip_driver_direct_command+0x5a>
 800af32:	2311      	movs	r3, #17
 800af34:	e006      	b.n	800af44 <_nxe_ip_driver_direct_command+0x68>

    /* Call actual IP direct driver command function.  */
    status =  _nx_ip_driver_direct_command(ip_ptr, command, return_value_ptr);
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	68b9      	ldr	r1, [r7, #8]
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	f7fc f9a7 	bl	800728e <_nx_ip_driver_direct_command>
 800af40:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800af42:	69fb      	ldr	r3, [r7, #28]
}
 800af44:	4618      	mov	r0, r3
 800af46:	3720      	adds	r7, #32
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	49502020 	.word	0x49502020
 800af50:	20000088 	.word	0x20000088
 800af54:	20014884 	.word	0x20014884
 800af58:	200149cc 	.word	0x200149cc

0800af5c <_nxe_ip_interface_status_check>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_interface_status_check(NX_IP *ip_ptr, UINT interface_index, ULONG needed_status,
                                     ULONG *actual_status, ULONG wait_option)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b088      	sub	sp, #32
 800af60:	af02      	add	r7, sp, #8
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
 800af68:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (actual_status == NX_NULL))
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d007      	beq.n	800af80 <_nxe_ip_interface_status_check+0x24>
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a21      	ldr	r2, [pc, #132]	; (800affc <_nxe_ip_interface_status_check+0xa0>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d102      	bne.n	800af80 <_nxe_ip_interface_status_check+0x24>
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d101      	bne.n	800af84 <_nxe_ip_interface_status_check+0x28>
    {
        return(NX_PTR_ERROR);
 800af80:	2307      	movs	r3, #7
 800af82:	e037      	b.n	800aff4 <_nxe_ip_interface_status_check+0x98>
    }

    /* Check for invalid interface index. */
    if ((interface_index >= NX_MAX_PHYSICAL_INTERFACES) ||
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10b      	bne.n	800afa2 <_nxe_ip_interface_status_check+0x46>
        (ip_ptr -> nx_ip_interface[interface_index].nx_interface_valid) == 0)
 800af8a:	68f9      	ldr	r1, [r7, #12]
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	4613      	mov	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4413      	add	r3, r2
 800af94:	011b      	lsls	r3, r3, #4
 800af96:	440b      	add	r3, r1
 800af98:	f203 7324 	addw	r3, r3, #1828	; 0x724
 800af9c:	781b      	ldrb	r3, [r3, #0]
    if ((interface_index >= NX_MAX_PHYSICAL_INTERFACES) ||
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d101      	bne.n	800afa6 <_nxe_ip_interface_status_check+0x4a>
    {
        return(NX_INVALID_INTERFACE);
 800afa2:	234c      	movs	r3, #76	; 0x4c
 800afa4:	e026      	b.n	800aff4 <_nxe_ip_interface_status_check+0x98>
    }

    /* Check for valid options.  */
    if (needed_status &
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800afac:	f023 0301 	bic.w	r3, r3, #1
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d001      	beq.n	800afb8 <_nxe_ip_interface_status_check+0x5c>
#ifndef NX_DISABLE_IPV4
          | (NX_IP_ADDRESS_RESOLVED | NX_IP_ARP_ENABLED | NX_IP_RARP_COMPLETE | NX_IP_IGMP_ENABLED)
#endif /* !NX_DISABLE_IPV4  */
         ))
    {
        return(NX_OPTION_ERROR);
 800afb4:	230a      	movs	r3, #10
 800afb6:	e01d      	b.n	800aff4 <_nxe_ip_interface_status_check+0x98>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800afb8:	f3ef 8305 	mrs	r3, IPSR
 800afbc:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800afbe:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800afc0:	4b0f      	ldr	r3, [pc, #60]	; (800b000 <_nxe_ip_interface_status_check+0xa4>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d108      	bne.n	800afdc <_nxe_ip_interface_status_check+0x80>
 800afca:	4b0e      	ldr	r3, [pc, #56]	; (800b004 <_nxe_ip_interface_status_check+0xa8>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d004      	beq.n	800afdc <_nxe_ip_interface_status_check+0x80>
 800afd2:	4b0c      	ldr	r3, [pc, #48]	; (800b004 <_nxe_ip_interface_status_check+0xa8>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a0c      	ldr	r2, [pc, #48]	; (800b008 <_nxe_ip_interface_status_check+0xac>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d101      	bne.n	800afe0 <_nxe_ip_interface_status_check+0x84>
 800afdc:	2311      	movs	r3, #17
 800afde:	e009      	b.n	800aff4 <_nxe_ip_interface_status_check+0x98>

    /* Call actual IP interface status check function.  */
    status =  _nx_ip_interface_status_check(ip_ptr, interface_index, needed_status, actual_status, wait_option);
 800afe0:	6a3b      	ldr	r3, [r7, #32]
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	68b9      	ldr	r1, [r7, #8]
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f7fc fca8 	bl	8007940 <_nx_ip_interface_status_check>
 800aff0:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800aff2:	697b      	ldr	r3, [r7, #20]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3718      	adds	r7, #24
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	49502020 	.word	0x49502020
 800b000:	20000088 	.word	0x20000088
 800b004:	20014884 	.word	0x20014884
 800b008:	200149cc 	.word	0x200149cc

0800b00c <_nxe_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                           ULONG packet_type, ULONG wait_option)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b086      	sub	sp, #24
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	607a      	str	r2, [r7, #4]
 800b018:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (packet_ptr == NX_NULL))
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d007      	beq.n	800b030 <_nxe_packet_allocate+0x24>
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a18      	ldr	r2, [pc, #96]	; (800b088 <_nxe_packet_allocate+0x7c>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d102      	bne.n	800b030 <_nxe_packet_allocate+0x24>
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d101      	bne.n	800b034 <_nxe_packet_allocate+0x28>
    {
        return(NX_PTR_ERROR);
 800b030:	2307      	movs	r3, #7
 800b032:	e025      	b.n	800b080 <_nxe_packet_allocate+0x74>
    }

    /* Check for an invalid packet type - for alignment purposes, it must be evenly divisible by the size
       of a ULONG.  */
    if (packet_type % sizeof(ULONG))
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f003 0303 	and.w	r3, r3, #3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d001      	beq.n	800b042 <_nxe_packet_allocate+0x36>
    {
        return(NX_OPTION_ERROR);
 800b03e:	230a      	movs	r3, #10
 800b040:	e01e      	b.n	800b080 <_nxe_packet_allocate+0x74>
    }

    /* Check for a thread caller if the wait option specifies suspension.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d013      	beq.n	800b070 <_nxe_packet_allocate+0x64>
 800b048:	4b10      	ldr	r3, [pc, #64]	; (800b08c <_nxe_packet_allocate+0x80>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00d      	beq.n	800b06c <_nxe_packet_allocate+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b050:	f3ef 8305 	mrs	r3, IPSR
 800b054:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800b056:	693a      	ldr	r2, [r7, #16]
 800b058:	4b0d      	ldr	r3, [pc, #52]	; (800b090 <_nxe_packet_allocate+0x84>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d104      	bne.n	800b06c <_nxe_packet_allocate+0x60>
 800b062:	4b0a      	ldr	r3, [pc, #40]	; (800b08c <_nxe_packet_allocate+0x80>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a0b      	ldr	r2, [pc, #44]	; (800b094 <_nxe_packet_allocate+0x88>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d101      	bne.n	800b070 <_nxe_packet_allocate+0x64>
 800b06c:	2311      	movs	r3, #17
 800b06e:	e007      	b.n	800b080 <_nxe_packet_allocate+0x74>

    /* Call actual packet allocate function.  */
    status =  _nx_packet_allocate(pool_ptr,  packet_ptr, packet_type, wait_option);
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	68b9      	ldr	r1, [r7, #8]
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f7fd fee6 	bl	8008e48 <_nx_packet_allocate>
 800b07c:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800b07e:	697b      	ldr	r3, [r7, #20]
}
 800b080:	4618      	mov	r0, r3
 800b082:	3718      	adds	r7, #24
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	5041434b 	.word	0x5041434b
 800b08c:	20014884 	.word	0x20014884
 800b090:	20000088 	.word	0x20000088
 800b094:	200149cc 	.word	0x200149cc

0800b098 <_nxe_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                              NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b088      	sub	sp, #32
 800b09c:	af02      	add	r7, sp, #8
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
 800b0a4:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) ||
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00a      	beq.n	800b0c2 <_nxe_packet_data_append+0x2a>
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a22      	ldr	r2, [pc, #136]	; (800b13c <_nxe_packet_data_append+0xa4>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d105      	bne.n	800b0c2 <_nxe_packet_data_append+0x2a>
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d002      	beq.n	800b0c2 <_nxe_packet_data_append+0x2a>
        (packet_ptr == NX_NULL) || (data_start == NX_NULL))
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <_nxe_packet_data_append+0x2e>
    {
        return(NX_PTR_ERROR);
 800b0c2:	2307      	movs	r3, #7
 800b0c4:	e035      	b.n	800b132 <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid size of data to append.  */
    if (!data_size)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d101      	bne.n	800b0d0 <_nxe_packet_data_append+0x38>
    {
        return(NX_SIZE_ERROR);
 800b0cc:	2309      	movs	r3, #9
 800b0ce:	e030      	b.n	800b132 <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	689a      	ldr	r2, [r3, #8]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d201      	bcs.n	800b0e0 <_nxe_packet_data_append+0x48>
    {
        return(NX_UNDERFLOW);
 800b0dc:	2302      	movs	r3, #2
 800b0de:	e028      	b.n	800b132 <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	68da      	ldr	r2, [r3, #12]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	695b      	ldr	r3, [r3, #20]
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d901      	bls.n	800b0f0 <_nxe_packet_data_append+0x58>
    {
        return(NX_OVERFLOW);
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	e020      	b.n	800b132 <_nxe_packet_data_append+0x9a>
    }

    /* Check for appropriate caller.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 800b0f0:	6a3b      	ldr	r3, [r7, #32]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d013      	beq.n	800b11e <_nxe_packet_data_append+0x86>
 800b0f6:	4b12      	ldr	r3, [pc, #72]	; (800b140 <_nxe_packet_data_append+0xa8>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00d      	beq.n	800b11a <_nxe_packet_data_append+0x82>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b0fe:	f3ef 8305 	mrs	r3, IPSR
 800b102:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800b104:	693a      	ldr	r2, [r7, #16]
 800b106:	4b0f      	ldr	r3, [pc, #60]	; (800b144 <_nxe_packet_data_append+0xac>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d104      	bne.n	800b11a <_nxe_packet_data_append+0x82>
 800b110:	4b0b      	ldr	r3, [pc, #44]	; (800b140 <_nxe_packet_data_append+0xa8>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a0c      	ldr	r2, [pc, #48]	; (800b148 <_nxe_packet_data_append+0xb0>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d101      	bne.n	800b11e <_nxe_packet_data_append+0x86>
 800b11a:	2311      	movs	r3, #17
 800b11c:	e009      	b.n	800b132 <_nxe_packet_data_append+0x9a>

    /* Call actual packet data append function.  */
    status =  _nx_packet_data_append(packet_ptr, data_start, data_size, pool_ptr, wait_option);
 800b11e:	6a3b      	ldr	r3, [r7, #32]
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	68b9      	ldr	r1, [r7, #8]
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	f7fd ffe7 	bl	80090fc <_nx_packet_data_append>
 800b12e:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800b130:	697b      	ldr	r3, [r7, #20]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3718      	adds	r7, #24
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	5041434b 	.word	0x5041434b
 800b140:	20014884 	.word	0x20014884
 800b144:	20000088 	.word	0x20000088
 800b148:	200149cc 	.word	0x200149cc

0800b14c <_nxe_packet_data_retrieve>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_data_retrieve(NX_PACKET *packet_ptr, VOID *buffer_start, ULONG *bytes_copied)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b086      	sub	sp, #24
 800b150:	af00      	add	r7, sp, #0
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((packet_ptr == NX_NULL) || (buffer_start == NX_NULL) || (bytes_copied == NX_NULL))
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d005      	beq.n	800b16a <_nxe_packet_data_retrieve+0x1e>
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d002      	beq.n	800b16a <_nxe_packet_data_retrieve+0x1e>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d101      	bne.n	800b16e <_nxe_packet_data_retrieve+0x22>
    {
        return(NX_PTR_ERROR);
 800b16a:	2307      	movs	r3, #7
 800b16c:	e006      	b.n	800b17c <_nxe_packet_data_retrieve+0x30>
    }

    /* Call actual packet data retrieve function.  */
    status =  _nx_packet_data_retrieve(packet_ptr, buffer_start, bytes_copied);
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	68b9      	ldr	r1, [r7, #8]
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	f7fe f883 	bl	800927e <_nx_packet_data_retrieve>
 800b178:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800b17a:	697b      	ldr	r3, [r7, #20]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3718      	adds	r7, #24
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <_nxe_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                              VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b094      	sub	sp, #80	; 0x50
 800b188:	af02      	add	r7, sp, #8
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	607a      	str	r2, [r7, #4]
 800b190:	603b      	str	r3, [r7, #0]

UINT            status;
ULONG           rounded_payload_size;
ULONG           rounded_pool_size;
ULONG           header_size;
UINT            old_threshold = 0;
 800b192:	2300      	movs	r3, #0
 800b194:	613b      	str	r3, [r7, #16]
VOID           *rounded_pool_start;
TX_THREAD      *current_thread;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_start == NX_NULL) || (pool_control_block_size != (UINT)sizeof(NX_PACKET_POOL)))
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d005      	beq.n	800b1a8 <_nxe_packet_pool_create+0x24>
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d002      	beq.n	800b1a8 <_nxe_packet_pool_create+0x24>
 800b1a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1a4:	2b3c      	cmp	r3, #60	; 0x3c
 800b1a6:	d001      	beq.n	800b1ac <_nxe_packet_pool_create+0x28>
    {
        return(NX_PTR_ERROR);
 800b1a8:	2307      	movs	r3, #7
 800b1aa:	e0a7      	b.n	800b2fc <_nxe_packet_pool_create+0x178>
    }

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	3303      	adds	r3, #3
 800b1b0:	f023 0303 	bic.w	r3, r3, #3
 800b1b4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800b1b6:	683a      	ldr	r2, [r7, #0]
 800b1b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ba:	1ad2      	subs	r2, r2, r3
 800b1bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1be:	4413      	add	r3, r2
 800b1c0:	f023 0303 	bic.w	r3, r3, #3
 800b1c4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 800b1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1c8:	333c      	adds	r3, #60	; 0x3c
 800b1ca:	637b      	str	r3, [r7, #52]	; 0x34

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800b1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ce:	3303      	adds	r3, #3
 800b1d0:	f023 0303 	bic.w	r3, r3, #3
 800b1d4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 800b1d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1da:	1ad3      	subs	r3, r2, r3
 800b1dc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    rounded_payload_size =  (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 800b1de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	3303      	adds	r3, #3
 800b1e6:	f023 0203 	bic.w	r2, r3, #3
 800b1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check for an invalid pool and payload size.  */
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 800b1f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1f2:	2b04      	cmp	r3, #4
 800b1f4:	d908      	bls.n	800b208 <_nxe_packet_pool_create+0x84>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d005      	beq.n	800b208 <_nxe_packet_pool_create+0x84>
        ((rounded_payload_size + header_size) > rounded_pool_size))
 800b1fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b200:	4413      	add	r3, r2
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 800b202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b204:	429a      	cmp	r2, r3
 800b206:	d201      	bcs.n	800b20c <_nxe_packet_pool_create+0x88>
    {
        return(NX_SIZE_ERROR);
 800b208:	2309      	movs	r3, #9
 800b20a:	e077      	b.n	800b2fc <_nxe_packet_pool_create+0x178>
    }

    /* Calculate the end of the pool memory area.  */
    end_memory =  ((CHAR *)pool_start) + (pool_size - 1);
 800b20c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b20e:	3b01      	subs	r3, #1
 800b210:	683a      	ldr	r2, [r7, #0]
 800b212:	4413      	add	r3, r2
 800b214:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800b216:	f002 f943 	bl	800d4a0 <_tx_thread_identify>
 800b21a:	6278      	str	r0, [r7, #36]	; 0x24

    /* Disable preemption temporarily.  */
    if (current_thread)
 800b21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d006      	beq.n	800b230 <_nxe_packet_pool_create+0xac>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800b222:	f107 0310 	add.w	r3, r7, #16
 800b226:	461a      	mov	r2, r3
 800b228:	2100      	movs	r1, #0
 800b22a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b22c:	f002 f992 	bl	800d554 <_tx_thread_preemption_change>
    }

    /* Loop to check for the pool instance already created.  */
    created_pool =   _nx_packet_pool_created_ptr;
 800b230:	4b34      	ldr	r3, [pc, #208]	; (800b304 <_nxe_packet_pool_create+0x180>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	647b      	str	r3, [r7, #68]	; 0x44
    created_count =  _nx_packet_pool_created_count;
 800b236:	4b34      	ldr	r3, [pc, #208]	; (800b308 <_nxe_packet_pool_create+0x184>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	643b      	str	r3, [r7, #64]	; 0x40
    while (created_count--)
 800b23c:	e02b      	b.n	800b296 <_nxe_packet_pool_create+0x112>
    {

        /* Calculate the created pool's end of memory.  */
        created_end =  created_pool -> nx_packet_pool_start + (created_pool -> nx_packet_pool_size - 1);
 800b23e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b240:	6a1a      	ldr	r2, [r3, #32]
 800b242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b246:	3b01      	subs	r3, #1
 800b248:	4413      	add	r3, r2
 800b24a:	61fb      	str	r3, [r7, #28]

        /* Is the new pool already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((pool_ptr == created_pool) ||
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b250:	429a      	cmp	r2, r3
 800b252:	d011      	beq.n	800b278 <_nxe_packet_pool_create+0xf4>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800b254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b256:	6a1b      	ldr	r3, [r3, #32]
        if ((pool_ptr == created_pool) ||
 800b258:	683a      	ldr	r2, [r7, #0]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d303      	bcc.n	800b266 <_nxe_packet_pool_create+0xe2>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800b25e:	683a      	ldr	r2, [r7, #0]
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	429a      	cmp	r2, r3
 800b264:	d308      	bcc.n	800b278 <_nxe_packet_pool_create+0xf4>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 800b266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b268:	6a1b      	ldr	r3, [r3, #32]
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800b26a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d30f      	bcc.n	800b290 <_nxe_packet_pool_create+0x10c>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 800b270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	429a      	cmp	r2, r3
 800b276:	d20b      	bcs.n	800b290 <_nxe_packet_pool_create+0x10c>
        {

            /* Restore preemption.  */
            if (current_thread)
 800b278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d006      	beq.n	800b28c <_nxe_packet_pool_create+0x108>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	f107 0210 	add.w	r2, r7, #16
 800b284:	4619      	mov	r1, r3
 800b286:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b288:	f002 f964 	bl	800d554 <_tx_thread_preemption_change>
            }

            /* Duplicate packet pool created, return an error!  */
            return(NX_PTR_ERROR);
 800b28c:	2307      	movs	r3, #7
 800b28e:	e035      	b.n	800b2fc <_nxe_packet_pool_create+0x178>
        }

        /* Move to next entry.  */
        created_pool =  created_pool -> nx_packet_pool_created_next;
 800b290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b294:	647b      	str	r3, [r7, #68]	; 0x44
    while (created_count--)
 800b296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b298:	1e5a      	subs	r2, r3, #1
 800b29a:	643a      	str	r2, [r7, #64]	; 0x40
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d1ce      	bne.n	800b23e <_nxe_packet_pool_create+0xba>
    }

    /* Restore preemption.  */
    if (current_thread)
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d006      	beq.n	800b2b4 <_nxe_packet_pool_create+0x130>
    {
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	f107 0210 	add.w	r2, r7, #16
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2b0:	f002 f950 	bl	800d554 <_tx_thread_preemption_change>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b2b4:	f3ef 8305 	mrs	r3, IPSR
 800b2b8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b2ba:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800b2bc:	4b13      	ldr	r3, [pc, #76]	; (800b30c <_nxe_packet_pool_create+0x188>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d009      	beq.n	800b2da <_nxe_packet_pool_create+0x156>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b2c6:	f3ef 8305 	mrs	r3, IPSR
 800b2ca:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b2cc:	697a      	ldr	r2, [r7, #20]
 800b2ce:	4b0f      	ldr	r3, [pc, #60]	; (800b30c <_nxe_packet_pool_create+0x188>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b2d8:	d304      	bcc.n	800b2e4 <_nxe_packet_pool_create+0x160>
 800b2da:	4b0d      	ldr	r3, [pc, #52]	; (800b310 <_nxe_packet_pool_create+0x18c>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a0d      	ldr	r2, [pc, #52]	; (800b314 <_nxe_packet_pool_create+0x190>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d101      	bne.n	800b2e8 <_nxe_packet_pool_create+0x164>
 800b2e4:	2311      	movs	r3, #17
 800b2e6:	e009      	b.n	800b2fc <_nxe_packet_pool_create+0x178>

    /* Call actual packet pool create function.  */
    status =  _nx_packet_pool_create(pool_ptr, name_ptr, payload_size, pool_start, pool_size);
 800b2e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	68b9      	ldr	r1, [r7, #8]
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f7fe f862 	bl	80093bc <_nx_packet_pool_create>
 800b2f8:	6238      	str	r0, [r7, #32]

    /* Return completion status.  */
    return(status);
 800b2fa:	6a3b      	ldr	r3, [r7, #32]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3748      	adds	r7, #72	; 0x48
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	20014830 	.word	0x20014830
 800b308:	20014834 	.word	0x20014834
 800b30c:	20000088 	.word	0x20000088
 800b310:	20014884 	.word	0x20014884
 800b314:	200149cc 	.word	0x200149cc

0800b318 <_nxe_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_release(NX_PACKET **packet_ptr_ptr)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d009      	beq.n	800b340 <_nxe_packet_release+0x28>
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d005      	beq.n	800b340 <_nxe_packet_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800b33a:	4a12      	ldr	r2, [pc, #72]	; (800b384 <_nxe_packet_release+0x6c>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d001      	beq.n	800b344 <_nxe_packet_release+0x2c>
    {

        return(NX_PTR_ERROR);
 800b340:	2307      	movs	r3, #7
 800b342:	e01a      	b.n	800b37a <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	689a      	ldr	r2, [r3, #8]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	691b      	ldr	r3, [r3, #16]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d201      	bcs.n	800b354 <_nxe_packet_release+0x3c>
    {
        return(NX_UNDERFLOW);
 800b350:	2302      	movs	r3, #2
 800b352:	e012      	b.n	800b37a <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	68da      	ldr	r2, [r3, #12]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	695b      	ldr	r3, [r3, #20]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d901      	bls.n	800b364 <_nxe_packet_release+0x4c>
    {
        return(NX_OVERFLOW);
 800b360:	2303      	movs	r3, #3
 800b362:	e00a      	b.n	800b37a <_nxe_packet_release+0x62>
    }

    /* Call actual packet release function.  */
    status =  _nx_packet_release(packet_ptr);
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f7fe f90b 	bl	8009580 <_nx_packet_release>
 800b36a:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d102      	bne.n	800b378 <_nxe_packet_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800b378:	68bb      	ldr	r3, [r7, #8]
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	5041434b 	.word	0x5041434b

0800b388 <_nxe_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_transmit_release(NX_PACKET **packet_ptr_ptr)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d009      	beq.n	800b3b0 <_nxe_packet_transmit_release+0x28>
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d005      	beq.n	800b3b0 <_nxe_packet_transmit_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800b3aa:	4a12      	ldr	r2, [pc, #72]	; (800b3f4 <_nxe_packet_transmit_release+0x6c>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d001      	beq.n	800b3b4 <_nxe_packet_transmit_release+0x2c>
    {

        return(NX_PTR_ERROR);
 800b3b0:	2307      	movs	r3, #7
 800b3b2:	e01a      	b.n	800b3ea <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	689a      	ldr	r2, [r3, #8]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	691b      	ldr	r3, [r3, #16]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d201      	bcs.n	800b3c4 <_nxe_packet_transmit_release+0x3c>
    {
        return(NX_UNDERFLOW);
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	e012      	b.n	800b3ea <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	68da      	ldr	r2, [r3, #12]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	695b      	ldr	r3, [r3, #20]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d901      	bls.n	800b3d4 <_nxe_packet_transmit_release+0x4c>
    {
        return(NX_OVERFLOW);
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	e00a      	b.n	800b3ea <_nxe_packet_transmit_release+0x62>
    }

    /* Call actual packet transmit release function.  */
    status =  _nx_packet_transmit_release(packet_ptr);
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	f7fe f98b 	bl	80096f0 <_nx_packet_transmit_release>
 800b3da:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d102      	bne.n	800b3e8 <_nxe_packet_transmit_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800b3e8:	68bb      	ldr	r3, [r7, #8]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	5041434b 	.word	0x5041434b

0800b3f8 <_nxe_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_enable(NX_IP *ip_ptr)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b086      	sub	sp, #24
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d004      	beq.n	800b410 <_nxe_udp_enable+0x18>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a15      	ldr	r2, [pc, #84]	; (800b460 <_nxe_udp_enable+0x68>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d001      	beq.n	800b414 <_nxe_udp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 800b410:	2307      	movs	r3, #7
 800b412:	e020      	b.n	800b456 <_nxe_udp_enable+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (ip_ptr -> nx_ip_udp_packet_receive)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d001      	beq.n	800b422 <_nxe_udp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 800b41e:	2315      	movs	r3, #21
 800b420:	e019      	b.n	800b456 <_nxe_udp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b422:	f3ef 8305 	mrs	r3, IPSR
 800b426:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800b428:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 800b42a:	4b0e      	ldr	r3, [pc, #56]	; (800b464 <_nxe_udp_enable+0x6c>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4313      	orrs	r3, r2
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00b      	beq.n	800b44c <_nxe_udp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b434:	f3ef 8305 	mrs	r3, IPSR
 800b438:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800b43a:	68fa      	ldr	r2, [r7, #12]
 800b43c:	4b09      	ldr	r3, [pc, #36]	; (800b464 <_nxe_udp_enable+0x6c>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4313      	orrs	r3, r2
 800b442:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b446:	d201      	bcs.n	800b44c <_nxe_udp_enable+0x54>
 800b448:	2311      	movs	r3, #17
 800b44a:	e004      	b.n	800b456 <_nxe_udp_enable+0x5e>

    /* Call actual UDP enable function.  */
    status =  _nx_udp_enable(ip_ptr);
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f7fe fad7 	bl	8009a00 <_nx_udp_enable>
 800b452:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800b454:	697b      	ldr	r3, [r7, #20]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3718      	adds	r7, #24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	49502020 	.word	0x49502020
 800b464:	20000088 	.word	0x20000088

0800b468 <_nxe_udp_socket_bind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d004      	beq.n	800b484 <_nxe_udp_socket_bind+0x1c>
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a19      	ldr	r2, [pc, #100]	; (800b4e4 <_nxe_udp_socket_bind+0x7c>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d001      	beq.n	800b488 <_nxe_udp_socket_bind+0x20>
    {
        return(NX_PTR_ERROR);
 800b484:	2307      	movs	r3, #7
 800b486:	e028      	b.n	800b4da <_nxe_udp_socket_bind+0x72>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b490:	2b00      	cmp	r3, #0
 800b492:	d101      	bne.n	800b498 <_nxe_udp_socket_bind+0x30>
    {
        return(NX_NOT_ENABLED);
 800b494:	2314      	movs	r3, #20
 800b496:	e020      	b.n	800b4da <_nxe_udp_socket_bind+0x72>
    }

    /* Check for an invalid port.  */
    if (((ULONG)port) > (ULONG)NX_MAX_PORT)
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b49e:	d301      	bcc.n	800b4a4 <_nxe_udp_socket_bind+0x3c>
    {
        return(NX_INVALID_PORT);
 800b4a0:	2346      	movs	r3, #70	; 0x46
 800b4a2:	e01a      	b.n	800b4da <_nxe_udp_socket_bind+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b4a4:	f3ef 8305 	mrs	r3, IPSR
 800b4a8:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800b4aa:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800b4ac:	4b0e      	ldr	r3, [pc, #56]	; (800b4e8 <_nxe_udp_socket_bind+0x80>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d108      	bne.n	800b4c8 <_nxe_udp_socket_bind+0x60>
 800b4b6:	4b0d      	ldr	r3, [pc, #52]	; (800b4ec <_nxe_udp_socket_bind+0x84>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d004      	beq.n	800b4c8 <_nxe_udp_socket_bind+0x60>
 800b4be:	4b0b      	ldr	r3, [pc, #44]	; (800b4ec <_nxe_udp_socket_bind+0x84>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a0b      	ldr	r2, [pc, #44]	; (800b4f0 <_nxe_udp_socket_bind+0x88>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d101      	bne.n	800b4cc <_nxe_udp_socket_bind+0x64>
 800b4c8:	2311      	movs	r3, #17
 800b4ca:	e006      	b.n	800b4da <_nxe_udp_socket_bind+0x72>

    /* Call actual UDP socket bind function.  */
    status =  _nx_udp_socket_bind(socket_ptr, port, wait_option);
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	68b9      	ldr	r1, [r7, #8]
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f7fe fd51 	bl	8009f78 <_nx_udp_socket_bind>
 800b4d6:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800b4d8:	697b      	ldr	r3, [r7, #20]
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3718      	adds	r7, #24
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	55445020 	.word	0x55445020
 800b4e8:	20000088 	.word	0x20000088
 800b4ec:	20014884 	.word	0x20014884
 800b4f0:	200149cc 	.word	0x200149cc

0800b4f4 <_nxe_udp_socket_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                             ULONG type_of_service, ULONG fragment, UINT time_to_live,
                             ULONG queue_maximum, UINT udp_socket_size)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b08e      	sub	sp, #56	; 0x38
 800b4f8:	af04      	add	r7, sp, #16
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	603b      	str	r3, [r7, #0]
NX_UDP_SOCKET *created_socket;
ULONG          created_count;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) ||
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d00a      	beq.n	800b51e <_nxe_udp_socket_create+0x2a>
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a3f      	ldr	r2, [pc, #252]	; (800b60c <_nxe_udp_socket_create+0x118>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d105      	bne.n	800b51e <_nxe_udp_socket_create+0x2a>
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d002      	beq.n	800b51e <_nxe_udp_socket_create+0x2a>
        (socket_ptr == NX_NULL) || (udp_socket_size != (UINT)sizeof(NX_UDP_SOCKET)))
 800b518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b51a:	2b78      	cmp	r3, #120	; 0x78
 800b51c:	d001      	beq.n	800b522 <_nxe_udp_socket_create+0x2e>
    {
        return(NX_PTR_ERROR);
 800b51e:	2307      	movs	r3, #7
 800b520:	e06f      	b.n	800b602 <_nxe_udp_socket_create+0x10e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b522:	f3ef 8305 	mrs	r3, IPSR
 800b526:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b528:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800b52a:	4b39      	ldr	r3, [pc, #228]	; (800b610 <_nxe_udp_socket_create+0x11c>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4313      	orrs	r3, r2
 800b530:	2b00      	cmp	r3, #0
 800b532:	d009      	beq.n	800b548 <_nxe_udp_socket_create+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b534:	f3ef 8305 	mrs	r3, IPSR
 800b538:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b53a:	697a      	ldr	r2, [r7, #20]
 800b53c:	4b34      	ldr	r3, [pc, #208]	; (800b610 <_nxe_udp_socket_create+0x11c>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4313      	orrs	r3, r2
 800b542:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b546:	d304      	bcc.n	800b552 <_nxe_udp_socket_create+0x5e>
 800b548:	4b32      	ldr	r3, [pc, #200]	; (800b614 <_nxe_udp_socket_create+0x120>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a32      	ldr	r2, [pc, #200]	; (800b618 <_nxe_udp_socket_create+0x124>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d101      	bne.n	800b556 <_nxe_udp_socket_create+0x62>
 800b552:	2311      	movs	r3, #17
 800b554:	e055      	b.n	800b602 <_nxe_udp_socket_create+0x10e>

    /* Get protection mutex.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b55c:	f04f 31ff 	mov.w	r1, #4294967295
 800b560:	4618      	mov	r0, r3
 800b562:	f001 fa09 	bl	800c978 <_tx_mutex_get>

    /* Pickup created count and created socket pointer.  */
    created_count =   ip_ptr -> nx_ip_udp_created_sockets_count;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b56c:	623b      	str	r3, [r7, #32]
    created_socket =  ip_ptr -> nx_ip_udp_created_sockets_ptr;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b574:	627b      	str	r3, [r7, #36]	; 0x24

    /* Loop to look for socket already created.  */
    while (created_count--)
 800b576:	e00e      	b.n	800b596 <_nxe_udp_socket_create+0xa2>
    {

        /* Compare the new socket with the already created socket.  */
        if (socket_ptr == created_socket)
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d107      	bne.n	800b590 <_nxe_udp_socket_create+0x9c>
        {

            /* Error, socket already created!  */

            /* Release protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b586:	4618      	mov	r0, r3
 800b588:	f001 fc6e 	bl	800ce68 <_tx_mutex_put>

            /* Return error.  */
            return(NX_PTR_ERROR);
 800b58c:	2307      	movs	r3, #7
 800b58e:	e038      	b.n	800b602 <_nxe_udp_socket_create+0x10e>
        }

        /* Move to next created socket.  */
        created_socket =  created_socket -> nx_udp_socket_created_next;
 800b590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b594:	627b      	str	r3, [r7, #36]	; 0x24
    while (created_count--)
 800b596:	6a3b      	ldr	r3, [r7, #32]
 800b598:	1e5a      	subs	r2, r3, #1
 800b59a:	623a      	str	r2, [r7, #32]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1eb      	bne.n	800b578 <_nxe_udp_socket_create+0x84>
    }

    /* Release protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f001 fc5e 	bl	800ce68 <_tx_mutex_put>

    /* Check to see if UDP is enabled.  */
    if (!ip_ptr -> nx_ip_udp_packet_receive)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d101      	bne.n	800b5ba <_nxe_udp_socket_create+0xc6>
    {
        return(NX_NOT_ENABLED);
 800b5b6:	2314      	movs	r3, #20
 800b5b8:	e023      	b.n	800b602 <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid type of service.  */
    if (type_of_service & ~(NX_IP_TOS_MASK))
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d001      	beq.n	800b5c8 <_nxe_udp_socket_create+0xd4>
    {
        return(NX_OPTION_ERROR);
 800b5c4:	230a      	movs	r3, #10
 800b5c6:	e01c      	b.n	800b602 <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid fragment option.  */
    if ((fragment != NX_FRAGMENT_OKAY) &&
 800b5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d005      	beq.n	800b5da <_nxe_udp_socket_create+0xe6>
 800b5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5d4:	d001      	beq.n	800b5da <_nxe_udp_socket_create+0xe6>
        (fragment != NX_DONT_FRAGMENT))
    {
        return(NX_OPTION_ERROR);
 800b5d6:	230a      	movs	r3, #10
 800b5d8:	e013      	b.n	800b602 <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid time to live option.  */
    if (((ULONG)time_to_live) > NX_IP_TIME_TO_LIVE_MASK)
 800b5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5dc:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800b5e0:	d901      	bls.n	800b5e6 <_nxe_udp_socket_create+0xf2>
    {
        return(NX_OPTION_ERROR);
 800b5e2:	230a      	movs	r3, #10
 800b5e4:	e00d      	b.n	800b602 <_nxe_udp_socket_create+0x10e>
    }

    /* Call actual UDP socket create function.  */
    status =  _nx_udp_socket_create(ip_ptr, socket_ptr, name, type_of_service,
 800b5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e8:	9302      	str	r3, [sp, #8]
 800b5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ec:	9301      	str	r3, [sp, #4]
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	68b9      	ldr	r1, [r7, #8]
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f7fe fddf 	bl	800a1bc <_nx_udp_socket_create>
 800b5fe:	61f8      	str	r0, [r7, #28]
                                    fragment, time_to_live, queue_maximum);

    /* Return completion status.  */
    return(status);
 800b600:	69fb      	ldr	r3, [r7, #28]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3728      	adds	r7, #40	; 0x28
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	49502020 	.word	0x49502020
 800b610:	20000088 	.word	0x20000088
 800b614:	20014884 	.word	0x20014884
 800b618:	200149cc 	.word	0x200149cc

0800b61c <_nxe_udp_socket_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_delete(NX_UDP_SOCKET *socket_ptr)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d004      	beq.n	800b634 <_nxe_udp_socket_delete+0x18>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a15      	ldr	r2, [pc, #84]	; (800b684 <_nxe_udp_socket_delete+0x68>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d001      	beq.n	800b638 <_nxe_udp_socket_delete+0x1c>
    {
        return(NX_PTR_ERROR);
 800b634:	2307      	movs	r3, #7
 800b636:	e020      	b.n	800b67a <_nxe_udp_socket_delete+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b640:	2b00      	cmp	r3, #0
 800b642:	d101      	bne.n	800b648 <_nxe_udp_socket_delete+0x2c>
    {
        return(NX_NOT_ENABLED);
 800b644:	2314      	movs	r3, #20
 800b646:	e018      	b.n	800b67a <_nxe_udp_socket_delete+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b648:	f3ef 8305 	mrs	r3, IPSR
 800b64c:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800b64e:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800b650:	4b0d      	ldr	r3, [pc, #52]	; (800b688 <_nxe_udp_socket_delete+0x6c>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4313      	orrs	r3, r2
 800b656:	2b00      	cmp	r3, #0
 800b658:	d108      	bne.n	800b66c <_nxe_udp_socket_delete+0x50>
 800b65a:	4b0c      	ldr	r3, [pc, #48]	; (800b68c <_nxe_udp_socket_delete+0x70>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d004      	beq.n	800b66c <_nxe_udp_socket_delete+0x50>
 800b662:	4b0a      	ldr	r3, [pc, #40]	; (800b68c <_nxe_udp_socket_delete+0x70>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a0a      	ldr	r2, [pc, #40]	; (800b690 <_nxe_udp_socket_delete+0x74>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d101      	bne.n	800b670 <_nxe_udp_socket_delete+0x54>
 800b66c:	2311      	movs	r3, #17
 800b66e:	e004      	b.n	800b67a <_nxe_udp_socket_delete+0x5e>

    /* Call actual UDP socket delete function.  */
    status =  _nx_udp_socket_delete(socket_ptr);
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7fe fe33 	bl	800a2dc <_nx_udp_socket_delete>
 800b676:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800b678:	68fb      	ldr	r3, [r7, #12]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	55445020 	.word	0x55445020
 800b688:	20000088 	.word	0x20000088
 800b68c:	20014884 	.word	0x20014884
 800b690:	200149cc 	.word	0x200149cc

0800b694 <_nxe_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b086      	sub	sp, #24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID) || (packet_ptr == NX_NULL))
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d007      	beq.n	800b6b6 <_nxe_udp_socket_receive+0x22>
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a17      	ldr	r2, [pc, #92]	; (800b708 <_nxe_udp_socket_receive+0x74>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d102      	bne.n	800b6b6 <_nxe_udp_socket_receive+0x22>
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <_nxe_udp_socket_receive+0x26>
    {
        return(NX_PTR_ERROR);
 800b6b6:	2307      	movs	r3, #7
 800b6b8:	e022      	b.n	800b700 <_nxe_udp_socket_receive+0x6c>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d101      	bne.n	800b6ca <_nxe_udp_socket_receive+0x36>
    {
        return(NX_NOT_ENABLED);
 800b6c6:	2314      	movs	r3, #20
 800b6c8:	e01a      	b.n	800b700 <_nxe_udp_socket_receive+0x6c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b6ca:	f3ef 8305 	mrs	r3, IPSR
 800b6ce:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800b6d0:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800b6d2:	4b0e      	ldr	r3, [pc, #56]	; (800b70c <_nxe_udp_socket_receive+0x78>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d108      	bne.n	800b6ee <_nxe_udp_socket_receive+0x5a>
 800b6dc:	4b0c      	ldr	r3, [pc, #48]	; (800b710 <_nxe_udp_socket_receive+0x7c>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d004      	beq.n	800b6ee <_nxe_udp_socket_receive+0x5a>
 800b6e4:	4b0a      	ldr	r3, [pc, #40]	; (800b710 <_nxe_udp_socket_receive+0x7c>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a0a      	ldr	r2, [pc, #40]	; (800b714 <_nxe_udp_socket_receive+0x80>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d101      	bne.n	800b6f2 <_nxe_udp_socket_receive+0x5e>
 800b6ee:	2311      	movs	r3, #17
 800b6f0:	e006      	b.n	800b700 <_nxe_udp_socket_receive+0x6c>

    /* Call actual UDP socket receive function.  */
    status =  _nx_udp_socket_receive(socket_ptr, packet_ptr, wait_option);
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	68b9      	ldr	r1, [r7, #8]
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f7fe fe50 	bl	800a39c <_nx_udp_socket_receive>
 800b6fc:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800b6fe:	697b      	ldr	r3, [r7, #20]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3718      	adds	r7, #24
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	55445020 	.word	0x55445020
 800b70c:	20000088 	.word	0x20000088
 800b710:	20014884 	.word	0x20014884
 800b714:	200149cc 	.word	0x200149cc

0800b718 <_nxe_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr_ptr,
                           ULONG ip_address, UINT port)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b088      	sub	sp, #32
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]
 800b724:	603b      	str	r3, [r7, #0]
NX_PACKET *packet_ptr;
UINT       status;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	61fb      	str	r3, [r7, #28]

    /* Check for invalid input pointers.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID) ||
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00c      	beq.n	800b74c <_nxe_udp_socket_send+0x34>
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a37      	ldr	r2, [pc, #220]	; (800b814 <_nxe_udp_socket_send+0xfc>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d107      	bne.n	800b74c <_nxe_udp_socket_send+0x34>
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d004      	beq.n	800b74c <_nxe_udp_socket_send+0x34>
        (packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)))
 800b742:	69fb      	ldr	r3, [r7, #28]
 800b744:	6a1b      	ldr	r3, [r3, #32]
 800b746:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800b74a:	d001      	beq.n	800b750 <_nxe_udp_socket_send+0x38>
    {

        return(NX_PTR_ERROR);
 800b74c:	2307      	movs	r3, #7
 800b74e:	e05d      	b.n	800b80c <_nxe_udp_socket_send+0xf4>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d101      	bne.n	800b760 <_nxe_udp_socket_send+0x48>
    {
        return(NX_NOT_ENABLED);
 800b75c:	2314      	movs	r3, #20
 800b75e:	e055      	b.n	800b80c <_nxe_udp_socket_send+0xf4>
    }

    /* Check for invalid IP address.  */
    if (ip_address == NX_NULL)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d101      	bne.n	800b76a <_nxe_udp_socket_send+0x52>
    {
        return(NX_IP_ADDRESS_ERROR);
 800b766:	2321      	movs	r3, #33	; 0x21
 800b768:	e050      	b.n	800b80c <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid port.  */
    if (((ULONG)port) > (ULONG)NX_MAX_PORT)
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b770:	d301      	bcc.n	800b776 <_nxe_udp_socket_send+0x5e>
    {
        return(NX_INVALID_PORT);
 800b772:	2346      	movs	r3, #70	; 0x46
 800b774:	e04a      	b.n	800b80c <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    if ((INT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_data_start) < (INT)(sizeof(NX_IPV4_HEADER) + sizeof(NX_UDP_HEADER)))
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	689a      	ldr	r2, [r3, #8]
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	691b      	ldr	r3, [r3, #16]
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	2b1b      	cmp	r3, #27
 800b782:	dc0d      	bgt.n	800b7a0 <_nxe_udp_socket_send+0x88>
    {

#ifndef NX_DISABLE_UDP_INFO
        /* Increment the total UDP invalid packet count.  */
        (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b78c:	3201      	adds	r2, #1
 800b78e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Increment the total UDP invalid packet count for this socket.  */
        socket_ptr -> nx_udp_socket_invalid_packets++;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	6a1b      	ldr	r3, [r3, #32]
 800b796:	1c5a      	adds	r2, r3, #1
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	621a      	str	r2, [r3, #32]
#endif

        /* Return error code.  */
        return(NX_UNDERFLOW);
 800b79c:	2302      	movs	r3, #2
 800b79e:	e035      	b.n	800b80c <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	68da      	ldr	r2, [r3, #12]
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	695b      	ldr	r3, [r3, #20]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d90d      	bls.n	800b7c8 <_nxe_udp_socket_send+0xb0>
    {

#ifndef NX_DISABLE_UDP_INFO
        /* Increment the total UDP invalid packet count.  */
        (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b7b4:	3201      	adds	r2, #1
 800b7b6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Increment the total UDP invalid packet count for this socket.  */
        socket_ptr -> nx_udp_socket_invalid_packets++;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6a1b      	ldr	r3, [r3, #32]
 800b7be:	1c5a      	adds	r2, r3, #1
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	621a      	str	r2, [r3, #32]
#endif

        /* Return error code.  */
        return(NX_OVERFLOW);
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	e021      	b.n	800b80c <_nxe_udp_socket_send+0xf4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b7c8:	f3ef 8305 	mrs	r3, IPSR
 800b7cc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b7ce:	697a      	ldr	r2, [r7, #20]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800b7d0:	4b11      	ldr	r3, [pc, #68]	; (800b818 <_nxe_udp_socket_send+0x100>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d108      	bne.n	800b7ec <_nxe_udp_socket_send+0xd4>
 800b7da:	4b10      	ldr	r3, [pc, #64]	; (800b81c <_nxe_udp_socket_send+0x104>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d004      	beq.n	800b7ec <_nxe_udp_socket_send+0xd4>
 800b7e2:	4b0e      	ldr	r3, [pc, #56]	; (800b81c <_nxe_udp_socket_send+0x104>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a0e      	ldr	r2, [pc, #56]	; (800b820 <_nxe_udp_socket_send+0x108>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d101      	bne.n	800b7f0 <_nxe_udp_socket_send+0xd8>
 800b7ec:	2311      	movs	r3, #17
 800b7ee:	e00d      	b.n	800b80c <_nxe_udp_socket_send+0xf4>

    /* Call actual UDP socket send function.  */
    status =  _nx_udp_socket_send(socket_ptr, packet_ptr, ip_address, port);
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	69f9      	ldr	r1, [r7, #28]
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	f7fe ff3e 	bl	800a678 <_nx_udp_socket_send>
 800b7fc:	61b8      	str	r0, [r7, #24]

    /* Determine if the packet send was successful.  */
    if (status == NX_SUCCESS)
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d102      	bne.n	800b80a <_nxe_udp_socket_send+0xf2>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	2200      	movs	r2, #0
 800b808:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800b80a:	69bb      	ldr	r3, [r7, #24]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3720      	adds	r7, #32
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	55445020 	.word	0x55445020
 800b818:	20000088 	.word	0x20000088
 800b81c:	20014884 	.word	0x20014884
 800b820:	200149cc 	.word	0x200149cc

0800b824 <_nxe_udp_socket_unbind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_unbind(NX_UDP_SOCKET *socket_ptr)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d004      	beq.n	800b83c <_nxe_udp_socket_unbind+0x18>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a15      	ldr	r2, [pc, #84]	; (800b88c <_nxe_udp_socket_unbind+0x68>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d001      	beq.n	800b840 <_nxe_udp_socket_unbind+0x1c>
    {
        return(NX_PTR_ERROR);
 800b83c:	2307      	movs	r3, #7
 800b83e:	e020      	b.n	800b882 <_nxe_udp_socket_unbind+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d101      	bne.n	800b850 <_nxe_udp_socket_unbind+0x2c>
    {
        return(NX_NOT_ENABLED);
 800b84c:	2314      	movs	r3, #20
 800b84e:	e018      	b.n	800b882 <_nxe_udp_socket_unbind+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b850:	f3ef 8305 	mrs	r3, IPSR
 800b854:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800b856:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800b858:	4b0d      	ldr	r3, [pc, #52]	; (800b890 <_nxe_udp_socket_unbind+0x6c>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d108      	bne.n	800b874 <_nxe_udp_socket_unbind+0x50>
 800b862:	4b0c      	ldr	r3, [pc, #48]	; (800b894 <_nxe_udp_socket_unbind+0x70>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d004      	beq.n	800b874 <_nxe_udp_socket_unbind+0x50>
 800b86a:	4b0a      	ldr	r3, [pc, #40]	; (800b894 <_nxe_udp_socket_unbind+0x70>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a0a      	ldr	r2, [pc, #40]	; (800b898 <_nxe_udp_socket_unbind+0x74>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d101      	bne.n	800b878 <_nxe_udp_socket_unbind+0x54>
 800b874:	2311      	movs	r3, #17
 800b876:	e004      	b.n	800b882 <_nxe_udp_socket_unbind+0x5e>

    /* Call actual UDP socket unbind function.  */
    status =  _nx_udp_socket_unbind(socket_ptr);
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7fe ff15 	bl	800a6a8 <_nx_udp_socket_unbind>
 800b87e:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800b880:	68fb      	ldr	r3, [r7, #12]
}
 800b882:	4618      	mov	r0, r3
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	55445020 	.word	0x55445020
 800b890:	20000088 	.word	0x20000088
 800b894:	20014884 	.word	0x20014884
 800b898:	200149cc 	.word	0x200149cc

0800b89c <_nxe_udp_source_extract>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_source_extract(NX_PACKET *packet_ptr, ULONG *ip_address, UINT *port)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((packet_ptr == NX_NULL) || (ip_address == NX_NULL) || (port == NX_NULL))
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d005      	beq.n	800b8ba <_nxe_udp_source_extract+0x1e>
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d002      	beq.n	800b8ba <_nxe_udp_source_extract+0x1e>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <_nxe_udp_source_extract+0x22>
    {

        return(NX_PTR_ERROR);
 800b8ba:	2307      	movs	r3, #7
 800b8bc:	e01c      	b.n	800b8f8 <_nxe_udp_source_extract+0x5c>
    }

    /* Check for invalid packet pointer.  */
    if (packet_ptr -> nx_packet_ip_header == NX_NULL)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d101      	bne.n	800b8ca <_nxe_udp_source_extract+0x2e>
    {

        return(NX_INVALID_PACKET);
 800b8c6:	2312      	movs	r3, #18
 800b8c8:	e016      	b.n	800b8f8 <_nxe_udp_source_extract+0x5c>
    }


    if (packet_ptr -> nx_packet_ip_version != NX_IP_VERSION_V4)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b8d0:	2b04      	cmp	r3, #4
 800b8d2:	d001      	beq.n	800b8d8 <_nxe_udp_source_extract+0x3c>
    {

        return(NX_INVALID_PACKET);
 800b8d4:	2312      	movs	r3, #18
 800b8d6:	e00f      	b.n	800b8f8 <_nxe_udp_source_extract+0x5c>
    }

    /* Check to see if the packet has enough room in front for backing up.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    if ((UINT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_data_start) <
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	689a      	ldr	r2, [r3, #8]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	691b      	ldr	r3, [r3, #16]
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	2b1b      	cmp	r3, #27
 800b8e4:	d801      	bhi.n	800b8ea <_nxe_udp_source_extract+0x4e>
        (sizeof(NX_UDP_HEADER) + sizeof(NX_IPV4_HEADER)))
    {

        return(NX_INVALID_PACKET);
 800b8e6:	2312      	movs	r3, #18
 800b8e8:	e006      	b.n	800b8f8 <_nxe_udp_source_extract+0x5c>
    }

    /* Call actual UDP source extract function.  */
    status =  _nx_udp_source_extract(packet_ptr, ip_address, port);
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	68b9      	ldr	r1, [r7, #8]
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f7ff f83c 	bl	800a96c <_nx_udp_source_extract>
 800b8f4:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800b8f6:	697b      	ldr	r3, [r7, #20]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3718      	adds	r7, #24
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b096      	sub	sp, #88	; 0x58
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
 800b90c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	3303      	adds	r3, #3
 800b912:	f023 0303 	bic.w	r3, r3, #3
 800b916:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b918:	f3ef 8310 	mrs	r3, PRIMASK
 800b91c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800b91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800b920:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800b922:	b672      	cpsid	i
    return(int_posture);
 800b924:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800b926:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b928:	4b55      	ldr	r3, [pc, #340]	; (800ba80 <_tx_byte_allocate+0x180>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800b92e:	2300      	movs	r3, #0
 800b930:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b936:	621a      	str	r2, [r3, #32]
 800b938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b93a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93e:	f383 8810 	msr	PRIMASK, r3
}
 800b942:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800b944:	6879      	ldr	r1, [r7, #4]
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f000 f9b2 	bl	800bcb0 <_tx_byte_pool_search>
 800b94c:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b94e:	f3ef 8310 	mrs	r3, PRIMASK
 800b952:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800b954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800b956:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b958:	b672      	cpsid	i
    return(int_posture);
 800b95a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800b95c:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800b95e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800b964:	2301      	movs	r3, #1
 800b966:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b968:	e006      	b.n	800b978 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6a1b      	ldr	r3, [r3, #32]
 800b96e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b970:	429a      	cmp	r2, r3
 800b972:	d101      	bne.n	800b978 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800b974:	2301      	movs	r3, #1
 800b976:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800b978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d0d9      	beq.n	800b932 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b982:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800b984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b986:	2b00      	cmp	r3, #0
 800b988:	d008      	beq.n	800b99c <_tx_byte_allocate+0x9c>
 800b98a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b98c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b98e:	6a3b      	ldr	r3, [r7, #32]
 800b990:	f383 8810 	msr	PRIMASK, r3
}
 800b994:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800b996:	2300      	movs	r3, #0
 800b998:	653b      	str	r3, [r7, #80]	; 0x50
 800b99a:	e06c      	b.n	800ba76 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d061      	beq.n	800ba66 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800b9a2:	4b38      	ldr	r3, [pc, #224]	; (800ba84 <_tx_byte_allocate+0x184>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d007      	beq.n	800b9ba <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800b9aa:	2310      	movs	r3, #16
 800b9ac:	653b      	str	r3, [r7, #80]	; 0x50
 800b9ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9b0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9b2:	69fb      	ldr	r3, [r7, #28]
 800b9b4:	f383 8810 	msr	PRIMASK, r3
}
 800b9b8:	e05d      	b.n	800ba76 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800b9ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9bc:	4a32      	ldr	r2, [pc, #200]	; (800ba88 <_tx_byte_allocate+0x188>)
 800b9be:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800b9c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800b9c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9c8:	68ba      	ldr	r2, [r7, #8]
 800b9ca:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800b9cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800b9d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b9d8:	1c5a      	adds	r2, r3, #1
 800b9da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e4:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ea:	1c5a      	adds	r2, r3, #1
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800b9f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d109      	bne.n	800ba0a <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9fa:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800b9fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba00:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800ba02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba06:	675a      	str	r2, [r3, #116]	; 0x74
 800ba08:	e011      	b.n	800ba2e <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800ba10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba14:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800ba16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba1a:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800ba1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba20:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800ba22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba26:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800ba28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba2c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800ba2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba30:	2209      	movs	r2, #9
 800ba32:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ba34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba36:	2201      	movs	r2, #1
 800ba38:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ba3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba3c:	683a      	ldr	r2, [r7, #0]
 800ba3e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800ba40:	4b10      	ldr	r3, [pc, #64]	; (800ba84 <_tx_byte_allocate+0x184>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	3301      	adds	r3, #1
 800ba46:	4a0f      	ldr	r2, [pc, #60]	; (800ba84 <_tx_byte_allocate+0x184>)
 800ba48:	6013      	str	r3, [r2, #0]
 800ba4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba4c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	f383 8810 	msr	PRIMASK, r3
}
 800ba54:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800ba56:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ba58:	f002 f8bc 	bl	800dbd4 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800ba5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba62:	653b      	str	r3, [r7, #80]	; 0x50
 800ba64:	e007      	b.n	800ba76 <_tx_byte_allocate+0x176>
 800ba66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba68:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	f383 8810 	msr	PRIMASK, r3
}
 800ba70:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800ba72:	2310      	movs	r3, #16
 800ba74:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800ba76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3758      	adds	r7, #88	; 0x58
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	20014884 	.word	0x20014884
 800ba84:	2001491c 	.word	0x2001491c
 800ba88:	0800ba8d 	.word	0x0800ba8d

0800ba8c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b08e      	sub	sp, #56	; 0x38
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba96:	f3ef 8310 	mrs	r3, PRIMASK
 800ba9a:	623b      	str	r3, [r7, #32]
    return(posture);
 800ba9c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800ba9e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800baa0:	b672      	cpsid	i
    return(int_posture);
 800baa2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800baa4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800baaa:	4a33      	ldr	r2, [pc, #204]	; (800bb78 <_tx_byte_pool_cleanup+0xec>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d158      	bne.n	800bb62 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d152      	bne.n	800bb62 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bac0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d04c      	beq.n	800bb62 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800bac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a2b      	ldr	r2, [pc, #172]	; (800bb7c <_tx_byte_pool_cleanup+0xf0>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d147      	bne.n	800bb62 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800bad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d043      	beq.n	800bb62 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800bae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bae4:	1e5a      	subs	r2, r3, #1
 800bae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae8:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800baea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baee:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800baf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d103      	bne.n	800bafe <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800baf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf8:	2200      	movs	r2, #0
 800bafa:	625a      	str	r2, [r3, #36]	; 0x24
 800bafc:	e013      	b.n	800bb26 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb02:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb08:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb0e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb14:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800bb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d102      	bne.n	800bb26 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800bb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb24:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb2a:	2b09      	cmp	r3, #9
 800bb2c:	d119      	bne.n	800bb62 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2210      	movs	r2, #16
 800bb32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800bb36:	4b12      	ldr	r3, [pc, #72]	; (800bb80 <_tx_byte_pool_cleanup+0xf4>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	4a10      	ldr	r2, [pc, #64]	; (800bb80 <_tx_byte_pool_cleanup+0xf4>)
 800bb3e:	6013      	str	r3, [r2, #0]
 800bb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb42:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	f383 8810 	msr	PRIMASK, r3
}
 800bb4a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f001 ff41 	bl	800d9d4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb52:	f3ef 8310 	mrs	r3, PRIMASK
 800bb56:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bb58:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bb5a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb5c:	b672      	cpsid	i
    return(int_posture);
 800bb5e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800bb60:	637b      	str	r3, [r7, #52]	; 0x34
 800bb62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb64:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f383 8810 	msr	PRIMASK, r3
}
 800bb6c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800bb6e:	bf00      	nop
 800bb70:	3738      	adds	r7, #56	; 0x38
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	0800ba8d 	.word	0x0800ba8d
 800bb7c:	42595445 	.word	0x42595445
 800bb80:	2001491c 	.word	0x2001491c

0800bb84 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b08e      	sub	sp, #56	; 0x38
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	607a      	str	r2, [r7, #4]
 800bb90:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800bb92:	2234      	movs	r2, #52	; 0x34
 800bb94:	2100      	movs	r1, #0
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	f003 fbb8 	bl	800f30c <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	f023 0303 	bic.w	r3, r3, #3
 800bba2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	68ba      	ldr	r2, [r7, #8]
 800bba8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	683a      	ldr	r2, [r7, #0]
 800bbb4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	f1a3 0208 	sub.w	r2, r3, #8
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2202      	movs	r2, #2
 800bbd0:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800bbd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	4413      	add	r3, r2
 800bbdc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800bbde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe0:	3b04      	subs	r3, #4
 800bbe2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800bbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbea:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800bbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbf0:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800bbf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf4:	3b04      	subs	r3, #4
 800bbf6:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800bbf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800bbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800bc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc08:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800bc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc0e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800bc14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc16:	3304      	adds	r3, #4
 800bc18:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800bc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc1c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800bc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc20:	4a1f      	ldr	r2, [pc, #124]	; (800bca0 <_tx_byte_pool_create+0x11c>)
 800bc22:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2200      	movs	r2, #0
 800bc28:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc2a:	f3ef 8310 	mrs	r3, PRIMASK
 800bc2e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bc30:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bc32:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc34:	b672      	cpsid	i
    return(int_posture);
 800bc36:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800bc38:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	4a19      	ldr	r2, [pc, #100]	; (800bca4 <_tx_byte_pool_create+0x120>)
 800bc3e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800bc40:	4b19      	ldr	r3, [pc, #100]	; (800bca8 <_tx_byte_pool_create+0x124>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d109      	bne.n	800bc5c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800bc48:	4a18      	ldr	r2, [pc, #96]	; (800bcac <_tx_byte_pool_create+0x128>)
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	68fa      	ldr	r2, [r7, #12]
 800bc58:	631a      	str	r2, [r3, #48]	; 0x30
 800bc5a:	e011      	b.n	800bc80 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800bc5c:	4b13      	ldr	r3, [pc, #76]	; (800bcac <_tx_byte_pool_create+0x128>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800bc62:	6a3b      	ldr	r3, [r7, #32]
 800bc64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc66:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800bc68:	6a3b      	ldr	r3, [r7, #32]
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	68fa      	ldr	r2, [r7, #12]
 800bc72:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	69fa      	ldr	r2, [r7, #28]
 800bc78:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6a3a      	ldr	r2, [r7, #32]
 800bc7e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800bc80:	4b09      	ldr	r3, [pc, #36]	; (800bca8 <_tx_byte_pool_create+0x124>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	3301      	adds	r3, #1
 800bc86:	4a08      	ldr	r2, [pc, #32]	; (800bca8 <_tx_byte_pool_create+0x124>)
 800bc88:	6013      	str	r3, [r2, #0]
 800bc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	f383 8810 	msr	PRIMASK, r3
}
 800bc94:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bc96:	2300      	movs	r3, #0
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3738      	adds	r7, #56	; 0x38
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	ffffeeee 	.word	0xffffeeee
 800bca4:	42595445 	.word	0x42595445
 800bca8:	20014878 	.word	0x20014878
 800bcac:	20014874 	.word	0x20014874

0800bcb0 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b097      	sub	sp, #92	; 0x5c
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcbe:	f3ef 8310 	mrs	r3, PRIMASK
 800bcc2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800bcc6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bcc8:	b672      	cpsid	i
    return(int_posture);
 800bcca:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800bccc:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	689a      	ldr	r2, [r3, #8]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	3b02      	subs	r3, #2
 800bcd8:	00db      	lsls	r3, r3, #3
 800bcda:	4413      	add	r3, r2
 800bcdc:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800bcde:	683a      	ldr	r2, [r7, #0]
 800bce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d308      	bcc.n	800bcf8 <_tx_byte_pool_search+0x48>
 800bce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bce8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	f383 8810 	msr	PRIMASK, r3
}
 800bcf0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	653b      	str	r3, [r7, #80]	; 0x50
 800bcf6:	e0dd      	b.n	800beb4 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800bcf8:	4b72      	ldr	r3, [pc, #456]	; (800bec4 <_tx_byte_pool_search+0x214>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd02:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	68db      	ldr	r3, [r3, #12]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800bd12:	2300      	movs	r3, #0
 800bd14:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800bd16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd18:	3304      	adds	r3, #4
 800bd1a:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800bd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1e:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800bd20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a68      	ldr	r2, [pc, #416]	; (800bec8 <_tx_byte_pool_search+0x218>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d143      	bne.n	800bdb2 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800bd2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d104      	bne.n	800bd3a <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd34:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800bd36:	2301      	movs	r3, #1
 800bd38:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800bd3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd3c:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800bd44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800bd4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd4e:	3b08      	subs	r3, #8
 800bd50:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800bd52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d257      	bcs.n	800be0a <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800bd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd60:	3304      	adds	r3, #4
 800bd62:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800bd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd66:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800bd68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a56      	ldr	r2, [pc, #344]	; (800bec8 <_tx_byte_pool_search+0x218>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d113      	bne.n	800bd9a <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800bd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd74:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	1e5a      	subs	r2, r3, #1
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	695b      	ldr	r3, [r3, #20]
 800bd8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d114      	bne.n	800bdbc <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd96:	615a      	str	r2, [r3, #20]
 800bd98:	e010      	b.n	800bdbc <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800bd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9c:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800bd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800bda4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d008      	beq.n	800bdbc <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800bdaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdac:	3b01      	subs	r3, #1
 800bdae:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdb0:	e004      	b.n	800bdbc <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800bdb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdb4:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800bdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800bdbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d002      	beq.n	800bdc8 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800bdc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdca:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	f383 8810 	msr	PRIMASK, r3
}
 800bdd2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bdd4:	f3ef 8310 	mrs	r3, PRIMASK
 800bdd8:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bdda:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bddc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bdde:	b672      	cpsid	i
    return(int_posture);
 800bde0:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800bde2:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a1b      	ldr	r3, [r3, #32]
 800bde8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d009      	beq.n	800be02 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	695b      	ldr	r3, [r3, #20]
 800bdf2:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be00:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800be02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be04:	2b00      	cmp	r3, #0
 800be06:	d186      	bne.n	800bd16 <_tx_byte_pool_search+0x66>
 800be08:	e000      	b.n	800be0c <_tx_byte_pool_search+0x15c>
                    break;
 800be0a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800be0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d048      	beq.n	800bea4 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800be12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	1ad3      	subs	r3, r2, r3
 800be18:	2b13      	cmp	r3, #19
 800be1a:	d91e      	bls.n	800be5a <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	3308      	adds	r3, #8
 800be20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be22:	4413      	add	r3, r2
 800be24:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800be26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be28:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800be2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be2c:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800be2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be34:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800be36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be38:	3304      	adds	r3, #4
 800be3a:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800be3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3e:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800be40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be42:	4a21      	ldr	r2, [pc, #132]	; (800bec8 <_tx_byte_pool_search+0x218>)
 800be44:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	68db      	ldr	r3, [r3, #12]
 800be4a:	1c5a      	adds	r2, r3, #1
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800be50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be54:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800be5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be5c:	3304      	adds	r3, #4
 800be5e:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800be60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be62:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800be64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	689a      	ldr	r2, [r3, #8]
 800be6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	f1a3 0208 	sub.w	r2, r3, #8
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	695b      	ldr	r3, [r3, #20]
 800be7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be80:	429a      	cmp	r2, r3
 800be82:	d105      	bne.n	800be90 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800be84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be86:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800be88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	615a      	str	r2, [r3, #20]
 800be90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be92:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f383 8810 	msr	PRIMASK, r3
}
 800be9a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800be9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be9e:	3308      	adds	r3, #8
 800bea0:	653b      	str	r3, [r7, #80]	; 0x50
 800bea2:	e007      	b.n	800beb4 <_tx_byte_pool_search+0x204>
 800bea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bea6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	f383 8810 	msr	PRIMASK, r3
}
 800beae:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800beb0:	2300      	movs	r3, #0
 800beb2:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800beb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	375c      	adds	r7, #92	; 0x5c
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	20014884 	.word	0x20014884
 800bec8:	ffffeeee 	.word	0xffffeeee

0800becc <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b08e      	sub	sp, #56	; 0x38
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bed6:	f3ef 8310 	mrs	r3, PRIMASK
 800beda:	61fb      	str	r3, [r7, #28]
    return(posture);
 800bedc:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bede:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bee0:	b672      	cpsid	i
    return(int_posture);
 800bee2:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 800bee4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800beea:	4a38      	ldr	r2, [pc, #224]	; (800bfcc <_tx_event_flags_cleanup+0x100>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d162      	bne.n	800bfb6 <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d15c      	bne.n	800bfb6 <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf00:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 800bf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d056      	beq.n	800bfb6 <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 800bf08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a30      	ldr	r2, [pc, #192]	; (800bfd0 <_tx_event_flags_cleanup+0x104>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d151      	bne.n	800bfb6 <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800bf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf14:	695b      	ldr	r3, [r3, #20]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d04d      	beq.n	800bfb6 <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800bf20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf22:	695b      	ldr	r3, [r3, #20]
 800bf24:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 800bf26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 800bf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d020      	beq.n	800bf74 <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 800bf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf34:	3b01      	subs	r3, #1
 800bf36:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 800bf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf3c:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800bf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d103      	bne.n	800bf4c <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800bf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf46:	2200      	movs	r2, #0
 800bf48:	611a      	str	r2, [r3, #16]
 800bf4a:	e016      	b.n	800bf7a <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf50:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf56:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800bf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5a:	6a3a      	ldr	r2, [r7, #32]
 800bf5c:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800bf5e:	6a3b      	ldr	r3, [r7, #32]
 800bf60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf62:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 800bf64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d106      	bne.n	800bf7a <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf70:	611a      	str	r2, [r3, #16]
 800bf72:	e002      	b.n	800bf7a <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800bf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf76:	2201      	movs	r2, #1
 800bf78:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf7e:	2b07      	cmp	r3, #7
 800bf80:	d119      	bne.n	800bfb6 <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2207      	movs	r2, #7
 800bf86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800bf8a:	4b12      	ldr	r3, [pc, #72]	; (800bfd4 <_tx_event_flags_cleanup+0x108>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	4a10      	ldr	r2, [pc, #64]	; (800bfd4 <_tx_event_flags_cleanup+0x108>)
 800bf92:	6013      	str	r3, [r2, #0]
 800bf94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf96:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f383 8810 	msr	PRIMASK, r3
}
 800bf9e:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f001 fd17 	bl	800d9d4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bfa6:	f3ef 8310 	mrs	r3, PRIMASK
 800bfaa:	617b      	str	r3, [r7, #20]
    return(posture);
 800bfac:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800bfae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bfb0:	b672      	cpsid	i
    return(int_posture);
 800bfb2:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800bfb4:	637b      	str	r3, [r7, #52]	; 0x34
 800bfb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	f383 8810 	msr	PRIMASK, r3
}
 800bfc0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800bfc2:	bf00      	nop
 800bfc4:	3738      	adds	r7, #56	; 0x38
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	0800becd 	.word	0x0800becd
 800bfd0:	4456444e 	.word	0x4456444e
 800bfd4:	2001491c 	.word	0x2001491c

0800bfd8 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b088      	sub	sp, #32
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800bfe2:	2224      	movs	r2, #36	; 0x24
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f003 f990 	bl	800f30c <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bff2:	f3ef 8310 	mrs	r3, PRIMASK
 800bff6:	613b      	str	r3, [r7, #16]
    return(posture);
 800bff8:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800bffa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bffc:	b672      	cpsid	i
    return(int_posture);
 800bffe:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800c000:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	4a18      	ldr	r2, [pc, #96]	; (800c068 <_tx_event_flags_create+0x90>)
 800c006:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800c008:	4b18      	ldr	r3, [pc, #96]	; (800c06c <_tx_event_flags_create+0x94>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d109      	bne.n	800c024 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800c010:	4a17      	ldr	r2, [pc, #92]	; (800c070 <_tx_event_flags_create+0x98>)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	61da      	str	r2, [r3, #28]
 800c022:	e011      	b.n	800c048 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800c024:	4b12      	ldr	r3, [pc, #72]	; (800c070 <_tx_event_flags_create+0x98>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	69db      	ldr	r3, [r3, #28]
 800c02e:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	697a      	ldr	r2, [r7, #20]
 800c040:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	69ba      	ldr	r2, [r7, #24]
 800c046:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800c048:	4b08      	ldr	r3, [pc, #32]	; (800c06c <_tx_event_flags_create+0x94>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	3301      	adds	r3, #1
 800c04e:	4a07      	ldr	r2, [pc, #28]	; (800c06c <_tx_event_flags_create+0x94>)
 800c050:	6013      	str	r3, [r2, #0]
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	f383 8810 	msr	PRIMASK, r3
}
 800c05c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c05e:	2300      	movs	r3, #0
}
 800c060:	4618      	mov	r0, r3
 800c062:	3720      	adds	r7, #32
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	4456444e 	.word	0x4456444e
 800c06c:	20014860 	.word	0x20014860
 800c070:	2001485c 	.word	0x2001485c

0800c074 <_tx_event_flags_get>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b096      	sub	sp, #88	; 0x58
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
 800c080:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c082:	f3ef 8310 	mrs	r3, PRIMASK
 800c086:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c08a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c08c:	b672      	cpsid	i
    return(int_posture);
 800c08e:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 800c090:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return the actual event flags and apply delayed clearing.  */
    *actual_flags_ptr =  current_flags & ~group_ptr -> tx_event_flags_group_delayed_clear;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6a1b      	ldr	r3, [r3, #32]
 800c09c:	43da      	mvns	r2, r3
 800c09e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0a0:	401a      	ands	r2, r3
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	601a      	str	r2, [r3, #0]

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f003 0302 	and.w	r3, r3, #2
 800c0ac:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	6a1b      	ldr	r3, [r3, #32]
 800c0b2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 800c0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d004      	beq.n	800c0c4 <_tx_event_flags_get+0x50>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 800c0ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0bc:	43db      	mvns	r3, r3
 800c0be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0c0:	4013      	ands	r3, r2
 800c0c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 800c0c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d10a      	bne.n	800c0e0 <_tx_event_flags_get+0x6c>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800c0ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	4013      	ands	r3, r2
 800c0d0:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 800c0d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d006      	beq.n	800c0e8 <_tx_event_flags_get+0x74>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 800c0da:	2300      	movs	r3, #0
 800c0dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0de:	e003      	b.n	800c0e8 <_tx_event_flags_get+0x74>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800c0e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	4013      	ands	r3, r2
 800c0e6:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 800c0e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d026      	beq.n	800c13c <_tx_event_flags_get+0xc8>
    {

        /* Yes, this request can be handled immediately.  */

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f003 0301 	and.w	r3, r3, #1
 800c0f4:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 800c0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d11c      	bne.n	800c136 <_tx_event_flags_get+0xc2>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	695b      	ldr	r3, [r3, #20]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d005      	beq.n	800c114 <_tx_event_flags_get+0xa0>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d101      	bne.n	800c114 <_tx_event_flags_get+0xa0>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 800c110:	2301      	movs	r3, #1
 800c112:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 800c114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c116:	2b01      	cmp	r3, #1
 800c118:	d106      	bne.n	800c128 <_tx_event_flags_get+0xb4>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6a1a      	ldr	r2, [r3, #32]
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	621a      	str	r2, [r3, #32]
 800c126:	e006      	b.n	800c136 <_tx_event_flags_get+0xc2>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	689a      	ldr	r2, [r3, #8]
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	43db      	mvns	r3, r3
 800c130:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 800c136:	2300      	movs	r3, #0
 800c138:	653b      	str	r3, [r7, #80]	; 0x50
 800c13a:	e073      	b.n	800c224 <_tx_event_flags_get+0x1b0>
#endif
    else
    {
        /* flags_satisfied is 0.  */
        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c13c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d06e      	beq.n	800c220 <_tx_event_flags_get+0x1ac>
        {

            /* Determine if the preempt disable flag is non-zero OR the requested events is 0.  */
            if ((_tx_thread_preempt_disable != ((UINT) 0)) || (requested_flags == (UINT) 0))
 800c142:	4b3e      	ldr	r3, [pc, #248]	; (800c23c <_tx_event_flags_get+0x1c8>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d102      	bne.n	800c150 <_tx_event_flags_get+0xdc>
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d102      	bne.n	800c156 <_tx_event_flags_get+0xe2>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point,
                   or if requested_flags is 0, return error completion.  */
                status =  TX_NO_EVENTS;
 800c150:	2307      	movs	r3, #7
 800c152:	653b      	str	r3, [r7, #80]	; 0x50
 800c154:	e066      	b.n	800c224 <_tx_event_flags_get+0x1b0>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 800c156:	4b3a      	ldr	r3, [pc, #232]	; (800c240 <_tx_event_flags_get+0x1cc>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 800c15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15e:	4a39      	ldr	r2, [pc, #228]	; (800c244 <_tx_event_flags_get+0x1d0>)
 800c160:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 800c162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c164:	68ba      	ldr	r2, [r7, #8]
 800c166:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 800c168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 800c170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c172:	683a      	ldr	r2, [r7, #0]
 800c174:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 800c176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800c17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c182:	1c5a      	adds	r2, r3, #1
 800c184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c186:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	695b      	ldr	r3, [r3, #20]
 800c18e:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800c190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c192:	2b00      	cmp	r3, #0
 800c194:	d109      	bne.n	800c1aa <_tx_event_flags_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c19a:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 800c19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c19e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1a0:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 800c1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1a6:	675a      	str	r2, [r3, #116]	; 0x74
 800c1a8:	e011      	b.n	800c1ce <_tx_event_flags_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1b4:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1c0:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1c6:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1cc:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	695b      	ldr	r3, [r3, #20]
 800c1d2:	1c5a      	adds	r2, r3, #1
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1da:	2207      	movs	r2, #7
 800c1dc:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c1e8:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800c1ea:	4b14      	ldr	r3, [pc, #80]	; (800c23c <_tx_event_flags_get+0x1c8>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	4a12      	ldr	r2, [pc, #72]	; (800c23c <_tx_event_flags_get+0x1c8>)
 800c1f2:	6013      	str	r3, [r2, #0]
 800c1f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1f6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	f383 8810 	msr	PRIMASK, r3
}
 800c1fe:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800c200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c202:	f001 fce7 	bl	800dbd4 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c206:	f3ef 8310 	mrs	r3, PRIMASK
 800c20a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c20c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c20e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c210:	b672      	cpsid	i
    return(int_posture);
 800c212:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 800c214:	657b      	str	r3, [r7, #84]	; 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800c216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c21c:	653b      	str	r3, [r7, #80]	; 0x50
 800c21e:	e001      	b.n	800c224 <_tx_event_flags_get+0x1b0>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 800c220:	2307      	movs	r3, #7
 800c222:	653b      	str	r3, [r7, #80]	; 0x50
 800c224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c226:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	f383 8810 	msr	PRIMASK, r3
}
 800c22e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800c230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800c232:	4618      	mov	r0, r3
 800c234:	3758      	adds	r7, #88	; 0x58
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	2001491c 	.word	0x2001491c
 800c240:	20014884 	.word	0x20014884
 800c244:	0800becd 	.word	0x0800becd

0800c248 <_tx_event_flags_set>:
/*                                            check logic, resulting in   */
/*                                            version 6.1.11              */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b0a6      	sub	sp, #152	; 0x98
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c254:	f3ef 8310 	mrs	r3, PRIMASK
 800c258:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800c25a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800c25c:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800c25e:	b672      	cpsid	i
    return(int_posture);
 800c260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800c262:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f003 0302 	and.w	r3, r3, #2
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d023      	beq.n	800c2b8 <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 800c270:	2300      	movs	r3, #0
 800c272:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	695b      	ldr	r3, [r3, #20]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d005      	beq.n	800c288 <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d101      	bne.n	800c288 <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 800c284:	2301      	movs	r3, #1
 800c286:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 800c288:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d107      	bne.n	800c29e <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	6a1a      	ldr	r2, [r3, #32]
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	43db      	mvns	r3, r3
 800c296:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	621a      	str	r2, [r3, #32]
 800c29c:	e005      	b.n	800c2aa <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	689a      	ldr	r2, [r3, #8]
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	609a      	str	r2, [r3, #8]
 800c2aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c2ae:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2b2:	f383 8810 	msr	PRIMASK, r3
}
 800c2b6:	e1d2      	b.n	800c65e <_tx_event_flags_set+0x416>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	689a      	ldr	r2, [r3, #8]
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6a1b      	ldr	r3, [r3, #32]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d006      	beq.n	800c2da <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6a1a      	ldr	r2, [r3, #32]
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	43db      	mvns	r3, r3
 800c2d4:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	695b      	ldr	r3, [r3, #20]
 800c2e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	691b      	ldr	r3, [r3, #16]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f000 81a4 	beq.w	800c638 <_tx_event_flags_set+0x3f0>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 800c2f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d167      	bne.n	800c3c8 <_tx_event_flags_set+0x180>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	691b      	ldr	r3, [r3, #16]
 800c2fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800c306:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c30a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c30c:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800c30e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c316:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 800c318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c31a:	f003 0302 	and.w	r3, r3, #2
 800c31e:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 800c320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c322:	2b02      	cmp	r3, #2
 800c324:	d10a      	bne.n	800c33c <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800c326:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c32a:	4013      	ands	r3, r2
 800c32c:	67bb      	str	r3, [r7, #120]	; 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 800c32e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c332:	429a      	cmp	r2, r3
 800c334:	d006      	beq.n	800c344 <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 800c336:	2300      	movs	r3, #0
 800c338:	67bb      	str	r3, [r7, #120]	; 0x78
 800c33a:	e003      	b.n	800c344 <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800c33c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c33e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c340:	4013      	ands	r3, r2
 800c342:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 800c344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c346:	2b00      	cmp	r3, #0
 800c348:	f000 817d 	beq.w	800c646 <_tx_event_flags_set+0x3fe>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800c34c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c352:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 800c354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c356:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c358:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800c35a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c35c:	f003 0301 	and.w	r3, r3, #1
 800c360:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 800c362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c364:	2b01      	cmp	r3, #1
 800c366:	d106      	bne.n	800c376 <_tx_event_flags_set+0x12e>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	689a      	ldr	r2, [r3, #8]
 800c36c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c36e:	43db      	mvns	r3, r3
 800c370:	401a      	ands	r2, r3
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2200      	movs	r2, #0
 800c37a:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2200      	movs	r2, #0
 800c380:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c382:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c386:	2200      	movs	r2, #0
 800c388:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c38a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c38e:	2200      	movs	r2, #0
 800c390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 800c394:	4ba7      	ldr	r3, [pc, #668]	; (800c634 <_tx_event_flags_set+0x3ec>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	3301      	adds	r3, #1
 800c39a:	4aa6      	ldr	r2, [pc, #664]	; (800c634 <_tx_event_flags_set+0x3ec>)
 800c39c:	6013      	str	r3, [r2, #0]
 800c39e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3a2:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a6:	f383 8810 	msr	PRIMASK, r3
}
 800c3aa:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800c3ac:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c3b0:	f001 fb10 	bl	800d9d4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c3b4:	f3ef 8310 	mrs	r3, PRIMASK
 800c3b8:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800c3ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800c3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800c3be:	b672      	cpsid	i
    return(int_posture);
 800c3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 800c3c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c3c6:	e13e      	b.n	800c646 <_tx_event_flags_set+0x3fe>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	691b      	ldr	r3, [r3, #16]
 800c3cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 800c3d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	689b      	ldr	r3, [r3, #8]
 800c3ee:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 800c3f0:	4b90      	ldr	r3, [pc, #576]	; (800c634 <_tx_event_flags_set+0x3ec>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	4a8f      	ldr	r2, [pc, #572]	; (800c634 <_tx_event_flags_set+0x3ec>)
 800c3f8:	6013      	str	r3, [r2, #0]

                /* Since we have temporarily disabled preemption globally, set the preempt 
                   check flag to check for any preemption condition - including from 
                   unrelated ISR processing.  */
                preempt_check =  TX_TRUE;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	677b      	str	r3, [r7, #116]	; 0x74
 800c3fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c402:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c406:	f383 8810 	msr	PRIMASK, r3
}
 800c40a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c40c:	f3ef 8310 	mrs	r3, PRIMASK
 800c410:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800c412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800c414:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800c416:	b672      	cpsid	i
    return(int_posture);
 800c418:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 800c41a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00f      	beq.n	800c446 <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2200      	movs	r2, #0
 800c42a:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 800c42c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c430:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	695b      	ldr	r3, [r3, #20]
 800c438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c442:	4313      	orrs	r3, r2
 800c444:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800c446:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c44a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c44c:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800c44e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c454:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 800c456:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c45a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c45e:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 800c460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c462:	f003 0302 	and.w	r3, r3, #2
 800c466:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 800c468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	d10a      	bne.n	800c484 <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800c46e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c470:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c472:	4013      	ands	r3, r2
 800c474:	67bb      	str	r3, [r7, #120]	; 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 800c476:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d006      	beq.n	800c48c <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 800c47e:	2300      	movs	r3, #0
 800c480:	67bb      	str	r3, [r7, #120]	; 0x78
 800c482:	e003      	b.n	800c48c <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800c484:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c486:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c488:	4013      	ands	r3, r2
 800c48a:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 800c48c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c492:	2b07      	cmp	r3, #7
 800c494:	d001      	beq.n	800c49a <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800c496:	2301      	movs	r3, #1
 800c498:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 800c49a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d069      	beq.n	800c574 <_tx_event_flags_set+0x32c>

                        /* Yes, this request can be handled now.  */

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800c4a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a6:	2b07      	cmp	r3, #7
 800c4a8:	d11d      	bne.n	800c4e6 <_tx_event_flags_set+0x29e>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800c4aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c4ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4b0:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 800c4b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c4b6:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800c4b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c4ba:	f003 0301 	and.w	r3, r3, #1
 800c4be:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 800c4c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d106      	bne.n	800c4d4 <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	689a      	ldr	r2, [r3, #8]
 800c4ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4cc:	43db      	mvns	r3, r3
 800c4ce:	401a      	ands	r2, r3
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c4d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c4d8:	2200      	movs	r2, #0
 800c4da:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c4dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800c4e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c4ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d103      	bne.n	800c4fc <_tx_event_flags_set+0x2b4>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c4fa:	e018      	b.n	800c52e <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800c4fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c502:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800c504:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c50a:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800c50c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c50e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c510:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 800c512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c514:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c516:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 800c518:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c51c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c520:	429a      	cmp	r2, r3
 800c522:	d104      	bne.n	800c52e <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 800c524:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c52a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	695b      	ldr	r3, [r3, #20]
 800c532:	1e5a      	subs	r2, r3, #1
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 800c538:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d10c      	bne.n	800c55a <_tx_event_flags_set+0x312>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 800c540:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c544:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 800c548:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c54c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 800c550:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c554:	2200      	movs	r2, #0
 800c556:	671a      	str	r2, [r3, #112]	; 0x70
 800c558:	e00c      	b.n	800c574 <_tx_event_flags_set+0x32c>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800c55a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c55e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c562:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 800c564:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c568:	2200      	movs	r2, #0
 800c56a:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 800c56c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 800c574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c576:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 800c57a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c57e:	3b01      	subs	r3, #1
 800c580:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 800c584:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f47f af38 	bne.w	800c3fe <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c594:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6a1b      	ldr	r3, [r3, #32]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00a      	beq.n	800c5b4 <_tx_event_flags_set+0x36c>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	689a      	ldr	r2, [r3, #8]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	6a1b      	ldr	r3, [r3, #32]
 800c5a6:	43db      	mvns	r3, r3
 800c5a8:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	621a      	str	r2, [r3, #32]
 800c5b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c5b8:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5bc:	f383 8810 	msr	PRIMASK, r3
}
 800c5c0:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 800c5c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800c5ca:	e01f      	b.n	800c60c <_tx_event_flags_set+0x3c4>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800c5cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c5d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c5d4:	f3ef 8310 	mrs	r3, PRIMASK
 800c5d8:	623b      	str	r3, [r7, #32]
    return(posture);
 800c5da:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c5dc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c5de:	b672      	cpsid	i
    return(int_posture);
 800c5e0:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800c5e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 800c5e6:	4b13      	ldr	r3, [pc, #76]	; (800c634 <_tx_event_flags_set+0x3ec>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	4a11      	ldr	r2, [pc, #68]	; (800c634 <_tx_event_flags_set+0x3ec>)
 800c5ee:	6013      	str	r3, [r2, #0]
 800c5f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c5f4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f8:	f383 8810 	msr	PRIMASK, r3
}
 800c5fc:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800c5fe:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c602:	f001 f9e7 	bl	800d9d4 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 800c606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c608:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800c60c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1db      	bne.n	800c5cc <_tx_event_flags_set+0x384>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c614:	f3ef 8310 	mrs	r3, PRIMASK
 800c618:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c61a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c61c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c61e:	b672      	cpsid	i
    return(int_posture);
 800c620:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 800c622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 800c626:	4b03      	ldr	r3, [pc, #12]	; (800c634 <_tx_event_flags_set+0x3ec>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	4a01      	ldr	r2, [pc, #4]	; (800c634 <_tx_event_flags_set+0x3ec>)
 800c62e:	6013      	str	r3, [r2, #0]
 800c630:	e009      	b.n	800c646 <_tx_event_flags_set+0x3fe>
 800c632:	bf00      	nop
 800c634:	2001491c 	.word	0x2001491c
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	695b      	ldr	r3, [r3, #20]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d002      	beq.n	800c646 <_tx_event_flags_set+0x3fe>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2201      	movs	r2, #1
 800c644:	60da      	str	r2, [r3, #12]
 800c646:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c64a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	f383 8810 	msr	PRIMASK, r3
}
 800c652:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 800c654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c656:	2b01      	cmp	r3, #1
 800c658:	d101      	bne.n	800c65e <_tx_event_flags_set+0x416>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 800c65a:	f001 f981 	bl	800d960 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 800c65e:	2300      	movs	r3, #0
}
 800c660:	4618      	mov	r0, r3
 800c662:	3798      	adds	r7, #152	; 0x98
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800c66c:	f000 ff36 	bl	800d4dc <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800c670:	f001 fcdc 	bl	800e02c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800c674:	4b12      	ldr	r3, [pc, #72]	; (800c6c0 <_tx_initialize_high_level+0x58>)
 800c676:	2200      	movs	r2, #0
 800c678:	601a      	str	r2, [r3, #0]
 800c67a:	4b12      	ldr	r3, [pc, #72]	; (800c6c4 <_tx_initialize_high_level+0x5c>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800c680:	4b11      	ldr	r3, [pc, #68]	; (800c6c8 <_tx_initialize_high_level+0x60>)
 800c682:	2200      	movs	r2, #0
 800c684:	601a      	str	r2, [r3, #0]
 800c686:	4b11      	ldr	r3, [pc, #68]	; (800c6cc <_tx_initialize_high_level+0x64>)
 800c688:	2200      	movs	r2, #0
 800c68a:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800c68c:	4b10      	ldr	r3, [pc, #64]	; (800c6d0 <_tx_initialize_high_level+0x68>)
 800c68e:	2200      	movs	r2, #0
 800c690:	601a      	str	r2, [r3, #0]
 800c692:	4b10      	ldr	r3, [pc, #64]	; (800c6d4 <_tx_initialize_high_level+0x6c>)
 800c694:	2200      	movs	r2, #0
 800c696:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800c698:	4b0f      	ldr	r3, [pc, #60]	; (800c6d8 <_tx_initialize_high_level+0x70>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	601a      	str	r2, [r3, #0]
 800c69e:	4b0f      	ldr	r3, [pc, #60]	; (800c6dc <_tx_initialize_high_level+0x74>)
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800c6a4:	4b0e      	ldr	r3, [pc, #56]	; (800c6e0 <_tx_initialize_high_level+0x78>)
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	601a      	str	r2, [r3, #0]
 800c6aa:	4b0e      	ldr	r3, [pc, #56]	; (800c6e4 <_tx_initialize_high_level+0x7c>)
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800c6b0:	4b0d      	ldr	r3, [pc, #52]	; (800c6e8 <_tx_initialize_high_level+0x80>)
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	601a      	str	r2, [r3, #0]
 800c6b6:	4b0d      	ldr	r3, [pc, #52]	; (800c6ec <_tx_initialize_high_level+0x84>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	601a      	str	r2, [r3, #0]
#endif
}
 800c6bc:	bf00      	nop
 800c6be:	bd80      	pop	{r7, pc}
 800c6c0:	2001484c 	.word	0x2001484c
 800c6c4:	20014850 	.word	0x20014850
 800c6c8:	20014854 	.word	0x20014854
 800c6cc:	20014858 	.word	0x20014858
 800c6d0:	2001485c 	.word	0x2001485c
 800c6d4:	20014860 	.word	0x20014860
 800c6d8:	2001486c 	.word	0x2001486c
 800c6dc:	20014870 	.word	0x20014870
 800c6e0:	20014874 	.word	0x20014874
 800c6e4:	20014878 	.word	0x20014878
 800c6e8:	20014864 	.word	0x20014864
 800c6ec:	20014868 	.word	0x20014868

0800c6f0 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800c6f4:	4b10      	ldr	r3, [pc, #64]	; (800c738 <_tx_initialize_kernel_enter+0x48>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800c6fc:	d00c      	beq.n	800c718 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800c6fe:	4b0e      	ldr	r3, [pc, #56]	; (800c738 <_tx_initialize_kernel_enter+0x48>)
 800c700:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800c704:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800c706:	f7f3 fdc1 	bl	800028c <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800c70a:	f7ff ffad 	bl	800c668 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800c70e:	4b0b      	ldr	r3, [pc, #44]	; (800c73c <_tx_initialize_kernel_enter+0x4c>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	3301      	adds	r3, #1
 800c714:	4a09      	ldr	r2, [pc, #36]	; (800c73c <_tx_initialize_kernel_enter+0x4c>)
 800c716:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800c718:	4b07      	ldr	r3, [pc, #28]	; (800c738 <_tx_initialize_kernel_enter+0x48>)
 800c71a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800c71e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800c720:	4b07      	ldr	r3, [pc, #28]	; (800c740 <_tx_initialize_kernel_enter+0x50>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4618      	mov	r0, r3
 800c726:	f7f3 fecf 	bl	80004c8 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800c72a:	4b03      	ldr	r3, [pc, #12]	; (800c738 <_tx_initialize_kernel_enter+0x48>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800c730:	f7f3 fde8 	bl	8000304 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800c734:	bf00      	nop
 800c736:	bd80      	pop	{r7, pc}
 800c738:	20000088 	.word	0x20000088
 800c73c:	2001491c 	.word	0x2001491c
 800c740:	2001487c 	.word	0x2001487c

0800c744 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b08e      	sub	sp, #56	; 0x38
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c74e:	f3ef 8310 	mrs	r3, PRIMASK
 800c752:	623b      	str	r3, [r7, #32]
    return(posture);
 800c754:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c756:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c758:	b672      	cpsid	i
    return(int_posture);
 800c75a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 800c75c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c762:	4a33      	ldr	r2, [pc, #204]	; (800c830 <_tx_mutex_cleanup+0xec>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d158      	bne.n	800c81a <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c76e:	683a      	ldr	r2, [r7, #0]
 800c770:	429a      	cmp	r2, r3
 800c772:	d152      	bne.n	800c81a <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c778:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 800c77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d04c      	beq.n	800c81a <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 800c780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a2b      	ldr	r2, [pc, #172]	; (800c834 <_tx_mutex_cleanup+0xf0>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d147      	bne.n	800c81a <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	69db      	ldr	r3, [r3, #28]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d043      	beq.n	800c81a <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 800c798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79a:	69db      	ldr	r3, [r3, #28]
 800c79c:	1e5a      	subs	r2, r3, #1
 800c79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a0:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a4:	69db      	ldr	r3, [r3, #28]
 800c7a6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800c7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d103      	bne.n	800c7b6 <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	619a      	str	r2, [r3, #24]
 800c7b4:	e013      	b.n	800c7de <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7ba:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7c0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7c6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7cc:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800c7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d0:	699b      	ldr	r3, [r3, #24]
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d102      	bne.n	800c7de <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 800c7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7dc:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7e2:	2b0d      	cmp	r3, #13
 800c7e4:	d119      	bne.n	800c81a <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	221d      	movs	r2, #29
 800c7ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c7ee:	4b12      	ldr	r3, [pc, #72]	; (800c838 <_tx_mutex_cleanup+0xf4>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	4a10      	ldr	r2, [pc, #64]	; (800c838 <_tx_mutex_cleanup+0xf4>)
 800c7f6:	6013      	str	r3, [r2, #0]
 800c7f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7fa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	f383 8810 	msr	PRIMASK, r3
}
 800c802:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f001 f8e5 	bl	800d9d4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c80a:	f3ef 8310 	mrs	r3, PRIMASK
 800c80e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c810:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c812:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c814:	b672      	cpsid	i
    return(int_posture);
 800c816:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c818:	637b      	str	r3, [r7, #52]	; 0x34
 800c81a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c81c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f383 8810 	msr	PRIMASK, r3
}
 800c824:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c826:	bf00      	nop
 800c828:	3738      	adds	r7, #56	; 0x38
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	0800c745 	.word	0x0800c745
 800c834:	4d555445 	.word	0x4d555445
 800c838:	2001491c 	.word	0x2001491c

0800c83c <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08a      	sub	sp, #40	; 0x28
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c844:	f3ef 8310 	mrs	r3, PRIMASK
 800c848:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c84a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c84c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c84e:	b672      	cpsid	i
    return(int_posture);
 800c850:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800c852:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800c854:	4b1a      	ldr	r3, [pc, #104]	; (800c8c0 <_tx_mutex_thread_release+0x84>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	3301      	adds	r3, #1
 800c85a:	4a19      	ldr	r2, [pc, #100]	; (800c8c0 <_tx_mutex_thread_release+0x84>)
 800c85c:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c864:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 800c866:	6a3b      	ldr	r3, [r7, #32]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d017      	beq.n	800c89c <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800c86c:	6a3b      	ldr	r3, [r7, #32]
 800c86e:	2201      	movs	r2, #1
 800c870:	609a      	str	r2, [r3, #8]
 800c872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c874:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f383 8810 	msr	PRIMASK, r3
}
 800c87c:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 800c87e:	6a38      	ldr	r0, [r7, #32]
 800c880:	f000 faf2 	bl	800ce68 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c884:	f3ef 8310 	mrs	r3, PRIMASK
 800c888:	617b      	str	r3, [r7, #20]
    return(posture);
 800c88a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c88c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c88e:	b672      	cpsid	i
    return(int_posture);
 800c890:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 800c892:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c89a:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 800c89c:	6a3b      	ldr	r3, [r7, #32]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d1dd      	bne.n	800c85e <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800c8a2:	4b07      	ldr	r3, [pc, #28]	; (800c8c0 <_tx_mutex_thread_release+0x84>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	3b01      	subs	r3, #1
 800c8a8:	4a05      	ldr	r2, [pc, #20]	; (800c8c0 <_tx_mutex_thread_release+0x84>)
 800c8aa:	6013      	str	r3, [r2, #0]
 800c8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ae:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	f383 8810 	msr	PRIMASK, r3
}
 800c8b6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 800c8b8:	bf00      	nop
 800c8ba:	3728      	adds	r7, #40	; 0x28
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	2001491c 	.word	0x2001491c

0800c8c4 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b08a      	sub	sp, #40	; 0x28
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800c8d0:	2234      	movs	r2, #52	; 0x34
 800c8d2:	2100      	movs	r1, #0
 800c8d4:	68f8      	ldr	r0, [r7, #12]
 800c8d6:	f002 fd19 	bl	800f30c <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c8e6:	f3ef 8310 	mrs	r3, PRIMASK
 800c8ea:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c8ec:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c8ee:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c8f0:	b672      	cpsid	i
    return(int_posture);
 800c8f2:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 800c8f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	4a1a      	ldr	r2, [pc, #104]	; (800c964 <_tx_mutex_create+0xa0>)
 800c8fa:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800c8fc:	4b1a      	ldr	r3, [pc, #104]	; (800c968 <_tx_mutex_create+0xa4>)
 800c8fe:	4a1b      	ldr	r2, [pc, #108]	; (800c96c <_tx_mutex_create+0xa8>)
 800c900:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800c902:	4b1b      	ldr	r3, [pc, #108]	; (800c970 <_tx_mutex_create+0xac>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d109      	bne.n	800c91e <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800c90a:	4a1a      	ldr	r2, [pc, #104]	; (800c974 <_tx_mutex_create+0xb0>)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	68fa      	ldr	r2, [r7, #12]
 800c914:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	68fa      	ldr	r2, [r7, #12]
 800c91a:	625a      	str	r2, [r3, #36]	; 0x24
 800c91c:	e011      	b.n	800c942 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800c91e:	4b15      	ldr	r3, [pc, #84]	; (800c974 <_tx_mutex_create+0xb0>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 800c924:	6a3b      	ldr	r3, [r7, #32]
 800c926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c928:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800c92a:	6a3b      	ldr	r3, [r7, #32]
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	68fa      	ldr	r2, [r7, #12]
 800c934:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	69fa      	ldr	r2, [r7, #28]
 800c93a:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6a3a      	ldr	r2, [r7, #32]
 800c940:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800c942:	4b0b      	ldr	r3, [pc, #44]	; (800c970 <_tx_mutex_create+0xac>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	3301      	adds	r3, #1
 800c948:	4a09      	ldr	r2, [pc, #36]	; (800c970 <_tx_mutex_create+0xac>)
 800c94a:	6013      	str	r3, [r2, #0]
 800c94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	f383 8810 	msr	PRIMASK, r3
}
 800c956:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c958:	2300      	movs	r3, #0
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3728      	adds	r7, #40	; 0x28
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	4d555445 	.word	0x4d555445
 800c968:	20014920 	.word	0x20014920
 800c96c:	0800c83d 	.word	0x0800c83d
 800c970:	20014868 	.word	0x20014868
 800c974:	20014864 	.word	0x20014864

0800c978 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b092      	sub	sp, #72	; 0x48
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c982:	f3ef 8310 	mrs	r3, PRIMASK
 800c986:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c98a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c98c:	b672      	cpsid	i
    return(int_posture);
 800c98e:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 800c990:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c992:	4b7a      	ldr	r3, [pc, #488]	; (800cb7c <_tx_mutex_get+0x204>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d144      	bne.n	800ca2a <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9aa:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800c9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d032      	beq.n	800ca18 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d106      	bne.n	800c9c8 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800c9ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2220      	movs	r2, #32
 800c9c6:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800c9c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c9ce:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800c9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d00f      	beq.n	800c9f6 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 800c9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9da:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800c9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800c9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9ec:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9f2:	62da      	str	r2, [r3, #44]	; 0x2c
 800c9f4:	e009      	b.n	800ca0a <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800c9f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	687a      	ldr	r2, [r7, #4]
 800ca08:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800ca0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ca10:	1c5a      	adds	r2, r3, #1
 800ca12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca14:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800ca18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca1a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	f383 8810 	msr	PRIMASK, r3
}
 800ca22:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800ca24:	2300      	movs	r3, #0
 800ca26:	647b      	str	r3, [r7, #68]	; 0x44
 800ca28:	e0a2      	b.n	800cb70 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	68db      	ldr	r3, [r3, #12]
 800ca2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d10d      	bne.n	800ca50 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	689b      	ldr	r3, [r3, #8]
 800ca38:	1c5a      	adds	r2, r3, #1
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	609a      	str	r2, [r3, #8]
 800ca3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca40:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca42:	69bb      	ldr	r3, [r7, #24]
 800ca44:	f383 8810 	msr	PRIMASK, r3
}
 800ca48:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	647b      	str	r3, [r7, #68]	; 0x44
 800ca4e:	e08f      	b.n	800cb70 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f000 8084 	beq.w	800cb60 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800ca58:	4b49      	ldr	r3, [pc, #292]	; (800cb80 <_tx_mutex_get+0x208>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d008      	beq.n	800ca72 <_tx_mutex_get+0xfa>
 800ca60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca62:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	f383 8810 	msr	PRIMASK, r3
}
 800ca6a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 800ca6c:	231d      	movs	r3, #29
 800ca6e:	647b      	str	r3, [r7, #68]	; 0x44
 800ca70:	e07e      	b.n	800cb70 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800ca78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca7a:	4a42      	ldr	r2, [pc, #264]	; (800cb84 <_tx_mutex_get+0x20c>)
 800ca7c:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800ca7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800ca84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ca8a:	1c5a      	adds	r2, r3, #1
 800ca8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca8e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	69db      	ldr	r3, [r3, #28]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d109      	bne.n	800caae <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca9e:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800caa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800caa4:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800caa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800caaa:	675a      	str	r2, [r3, #116]	; 0x74
 800caac:	e011      	b.n	800cad2 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	699b      	ldr	r3, [r3, #24]
 800cab2:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800cab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cab8:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800caba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cabc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cabe:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800cac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cac4:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800cac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800caca:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800cacc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cace:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cad0:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	69db      	ldr	r3, [r3, #28]
 800cad6:	1c5a      	adds	r2, r3, #1
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800cadc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cade:	220d      	movs	r2, #13
 800cae0:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cae4:	2201      	movs	r2, #1
 800cae6:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800cae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caea:	683a      	ldr	r2, [r7, #0]
 800caec:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800caee:	4b24      	ldr	r3, [pc, #144]	; (800cb80 <_tx_mutex_get+0x208>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	3301      	adds	r3, #1
 800caf4:	4a22      	ldr	r2, [pc, #136]	; (800cb80 <_tx_mutex_get+0x208>)
 800caf6:	6013      	str	r3, [r2, #0]
 800caf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cafa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	f383 8810 	msr	PRIMASK, r3
}
 800cb02:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	691b      	ldr	r3, [r3, #16]
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d121      	bne.n	800cb50 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d903      	bls.n	800cb20 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800cb18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800cb20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d204      	bcs.n	800cb38 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800cb2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800cb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d905      	bls.n	800cb50 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800cb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb48:	4619      	mov	r1, r3
 800cb4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb4c:	f000 f8ce 	bl	800ccec <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800cb50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cb52:	f001 f83f 	bl	800dbd4 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800cb56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb5c:	647b      	str	r3, [r7, #68]	; 0x44
 800cb5e:	e007      	b.n	800cb70 <_tx_mutex_get+0x1f8>
 800cb60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb62:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f383 8810 	msr	PRIMASK, r3
}
 800cb6a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 800cb6c:	231d      	movs	r3, #29
 800cb6e:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 800cb70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3748      	adds	r7, #72	; 0x48
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	20014884 	.word	0x20014884
 800cb80:	2001491c 	.word	0x2001491c
 800cb84:	0800c745 	.word	0x0800c745

0800cb88 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b092      	sub	sp, #72	; 0x48
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb90:	f3ef 8310 	mrs	r3, PRIMASK
 800cb94:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800cb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800cb98:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb9a:	b672      	cpsid	i
    return(int_posture);
 800cb9c:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800cb9e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	69db      	ldr	r3, [r3, #28]
 800cba4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800cba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d805      	bhi.n	800cbb8 <_tx_mutex_prioritize+0x30>
 800cbac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	f383 8810 	msr	PRIMASK, r3
}
 800cbb6:	e092      	b.n	800ccde <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800cbb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbba:	2b02      	cmp	r3, #2
 800cbbc:	d114      	bne.n	800cbe8 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	699b      	ldr	r3, [r3, #24]
 800cbc2:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 800cbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbc8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800cbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d202      	bcs.n	800cbdc <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbda:	619a      	str	r2, [r3, #24]
 800cbdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbde:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	f383 8810 	msr	PRIMASK, r3
}
 800cbe6:	e07a      	b.n	800ccde <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	699b      	ldr	r3, [r3, #24]
 800cbec:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800cbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800cbf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbf6:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800cbf8:	4b3b      	ldr	r3, [pc, #236]	; (800cce8 <_tx_mutex_prioritize+0x160>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	4a3a      	ldr	r2, [pc, #232]	; (800cce8 <_tx_mutex_prioritize+0x160>)
 800cc00:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800cc02:	2300      	movs	r3, #0
 800cc04:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800cc06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d201      	bcs.n	800cc16 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800cc12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc18:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f383 8810 	msr	PRIMASK, r3
}
 800cc20:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc22:	f3ef 8310 	mrs	r3, PRIMASK
 800cc26:	617b      	str	r3, [r7, #20]
    return(posture);
 800cc28:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800cc2a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cc2c:	b672      	cpsid	i
    return(int_posture);
 800cc2e:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800cc30:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	699b      	ldr	r3, [r3, #24]
 800cc36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d002      	beq.n	800cc42 <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	633b      	str	r3, [r7, #48]	; 0x30
 800cc40:	e006      	b.n	800cc50 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	69db      	ldr	r3, [r3, #28]
 800cc46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d001      	beq.n	800cc50 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800cc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d103      	bne.n	800cc5e <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800cc56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc5a:	643b      	str	r3, [r7, #64]	; 0x40
 800cc5c:	e00c      	b.n	800cc78 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	699b      	ldr	r3, [r3, #24]
 800cc62:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	69db      	ldr	r3, [r3, #28]
 800cc68:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 800cc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800cc6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc72:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 800cc74:	2300      	movs	r3, #0
 800cc76:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 800cc78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d1c2      	bne.n	800cc06 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800cc80:	4b19      	ldr	r3, [pc, #100]	; (800cce8 <_tx_mutex_prioritize+0x160>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	3b01      	subs	r3, #1
 800cc86:	4a18      	ldr	r2, [pc, #96]	; (800cce8 <_tx_mutex_prioritize+0x160>)
 800cc88:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800cc8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d01d      	beq.n	800ccce <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800cc92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc96:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800cc98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc9c:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800cc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cca2:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800cca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cca8:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800ccaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccae:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800ccb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccb4:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800ccb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccba:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800ccbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ccc0:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800ccc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ccc6:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cccc:	619a      	str	r2, [r3, #24]
 800ccce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccd0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	f383 8810 	msr	PRIMASK, r3
}
 800ccd8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ccda:	f000 fe41 	bl	800d960 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800ccde:	2300      	movs	r3, #0
#endif
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3748      	adds	r7, #72	; 0x48
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	2001491c 	.word	0x2001491c

0800ccec <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b090      	sub	sp, #64	; 0x40
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ccf6:	f3ef 8310 	mrs	r3, PRIMASK
 800ccfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800ccfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800ccfe:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800cd00:	b672      	cpsid	i
    return(int_posture);
 800cd02:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800cd04:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d017      	beq.n	800cd3e <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	683a      	ldr	r2, [r7, #0]
 800cd12:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cd1a:	683a      	ldr	r2, [r7, #0]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d905      	bls.n	800cd2c <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	63da      	str	r2, [r3, #60]	; 0x3c
 800cd2a:	e002      	b.n	800cd32 <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	683a      	ldr	r2, [r7, #0]
 800cd30:	63da      	str	r2, [r3, #60]	; 0x3c
 800cd32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd34:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd38:	f383 8810 	msr	PRIMASK, r3
}
 800cd3c:	e089      	b.n	800ce52 <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800cd3e:	4b47      	ldr	r3, [pc, #284]	; (800ce5c <_tx_mutex_priority_change+0x170>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd48:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800cd4a:	4b45      	ldr	r3, [pc, #276]	; (800ce60 <_tx_mutex_priority_change+0x174>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	3302      	adds	r3, #2
 800cd50:	4a43      	ldr	r2, [pc, #268]	; (800ce60 <_tx_mutex_priority_change+0x174>)
 800cd52:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	220e      	movs	r2, #14
 800cd58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	64da      	str	r2, [r3, #76]	; 0x4c
 800cd66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd68:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd6a:	69bb      	ldr	r3, [r7, #24]
 800cd6c:	f383 8810 	msr	PRIMASK, r3
}
 800cd70:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 ff2e 	bl	800dbd4 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cd78:	f3ef 8310 	mrs	r3, PRIMASK
 800cd7c:	623b      	str	r3, [r7, #32]
    return(posture);
 800cd7e:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800cd80:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cd82:	b672      	cpsid	i
    return(int_posture);
 800cd84:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	683a      	ldr	r2, [r7, #0]
 800cd8c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cd94:	683a      	ldr	r2, [r7, #0]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d905      	bls.n	800cda6 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	63da      	str	r2, [r3, #60]	; 0x3c
 800cda4:	e002      	b.n	800cdac <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	683a      	ldr	r2, [r7, #0]
 800cdaa:	63da      	str	r2, [r3, #60]	; 0x3c
 800cdac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f383 8810 	msr	PRIMASK, r3
}
 800cdb6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 fe0b 	bl	800d9d4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cdbe:	f3ef 8310 	mrs	r3, PRIMASK
 800cdc2:	617b      	str	r3, [r7, #20]
    return(posture);
 800cdc4:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800cdc6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cdc8:	b672      	cpsid	i
    return(int_posture);
 800cdca:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800cdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800cdce:	4b23      	ldr	r3, [pc, #140]	; (800ce5c <_tx_mutex_priority_change+0x170>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d034      	beq.n	800ce46 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d130      	bne.n	800ce46 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d811      	bhi.n	800ce14 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d126      	bne.n	800ce46 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800cdf8:	4a18      	ldr	r2, [pc, #96]	; (800ce5c <_tx_mutex_priority_change+0x170>)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800cdfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d21f      	bcs.n	800ce46 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0a:	4916      	ldr	r1, [pc, #88]	; (800ce64 <_tx_mutex_priority_change+0x178>)
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ce12:	e018      	b.n	800ce46 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d212      	bcs.n	800ce46 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d80c      	bhi.n	800ce46 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800ce2c:	4a0b      	ldr	r2, [pc, #44]	; (800ce5c <_tx_mutex_priority_change+0x170>)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800ce32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d205      	bcs.n	800ce46 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce3e:	4909      	ldr	r1, [pc, #36]	; (800ce64 <_tx_mutex_priority_change+0x178>)
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ce46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce48:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	f383 8810 	msr	PRIMASK, r3
}
 800ce50:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800ce52:	bf00      	nop
 800ce54:	3740      	adds	r7, #64	; 0x40
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	20014888 	.word	0x20014888
 800ce60:	2001491c 	.word	0x2001491c
 800ce64:	2001489c 	.word	0x2001489c

0800ce68 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b0a6      	sub	sp, #152	; 0x98
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800ce70:	2320      	movs	r3, #32
 800ce72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce76:	f3ef 8310 	mrs	r3, PRIMASK
 800ce7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 800ce7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 800ce7e:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 800ce80:	b672      	cpsid	i
    return(int_posture);
 800ce82:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800ce84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f000 81ff 	beq.w	800d290 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800ce98:	4ba3      	ldr	r3, [pc, #652]	; (800d128 <_tx_mutex_put+0x2c0>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d00d      	beq.n	800cec4 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800cea8:	4ba0      	ldr	r3, [pc, #640]	; (800d12c <_tx_mutex_put+0x2c4>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d109      	bne.n	800cec4 <_tx_mutex_put+0x5c>
 800ceb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ceb4:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ceb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ceb8:	f383 8810 	msr	PRIMASK, r3
}
 800cebc:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800cebe:	231e      	movs	r3, #30
 800cec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 800cec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cec8:	2b20      	cmp	r3, #32
 800ceca:	f040 81eb 	bne.w	800d2a4 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	1e5a      	subs	r2, r3, #1
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00a      	beq.n	800cef6 <_tx_mutex_put+0x8e>
 800cee0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cee4:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cee8:	f383 8810 	msr	PRIMASK, r3
}
 800ceec:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 800ceee:	2300      	movs	r3, #0
 800cef0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cef4:	e1d6      	b.n	800d2a4 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800cef6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10a      	bne.n	800cf12 <_tx_mutex_put+0xaa>
 800cefc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf00:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf04:	f383 8810 	msr	PRIMASK, r3
}
 800cf08:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cf10:	e1c8      	b.n	800d2a4 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800cf12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cf14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cf18:	1e5a      	subs	r2, r3, #1
 800cf1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cf1c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800cf20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cf22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d104      	bne.n	800cf34 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800cf2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800cf32:	e019      	b.n	800cf68 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf40:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800cf42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cf46:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cf48:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800cf4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cf50:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800cf52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cf54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d104      	bne.n	800cf68 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800cf5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cf60:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cf64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	699b      	ldr	r3, [r3, #24]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d110      	bne.n	800cf92 <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	691b      	ldr	r3, [r3, #16]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10c      	bne.n	800cf92 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	60da      	str	r2, [r3, #12]
 800cf7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf82:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf86:	f383 8810 	msr	PRIMASK, r3
}
 800cf8a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800cf92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cf96:	2b20      	cmp	r3, #32
 800cf98:	f040 8184 	bne.w	800d2a4 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800cfa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cfa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	691b      	ldr	r3, [r3, #16]
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d155      	bne.n	800d060 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800cfb4:	4b5d      	ldr	r3, [pc, #372]	; (800d12c <_tx_mutex_put+0x2c4>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	4a5c      	ldr	r2, [pc, #368]	; (800d12c <_tx_mutex_put+0x2c4>)
 800cfbc:	6013      	str	r3, [r2, #0]
 800cfbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cfc2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cfc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfc6:	f383 8810 	msr	PRIMASK, r3
}
 800cfca:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cfcc:	2320      	movs	r3, #32
 800cfce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800cfd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cfd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cfd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800cfdc:	e01f      	b.n	800d01e <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800cfde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cfe2:	691b      	ldr	r3, [r3, #16]
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d10b      	bne.n	800d000 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 800cfe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cfec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d904      	bls.n	800d000 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800cff6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cffc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 800d000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d006:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800d00a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d00c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d010:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d014:	429a      	cmp	r2, r3
 800d016:	d102      	bne.n	800d01e <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 800d018:	2300      	movs	r3, #0
 800d01a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800d01e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d022:	2b00      	cmp	r3, #0
 800d024:	d1db      	bne.n	800cfde <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d026:	f3ef 8310 	mrs	r3, PRIMASK
 800d02a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800d02c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800d02e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d030:	b672      	cpsid	i
    return(int_posture);
 800d032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 800d034:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 800d038:	4b3c      	ldr	r3, [pc, #240]	; (800d12c <_tx_mutex_put+0x2c4>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	3b01      	subs	r3, #1
 800d03e:	4a3b      	ldr	r2, [pc, #236]	; (800d12c <_tx_mutex_put+0x2c4>)
 800d040:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800d042:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d044:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d048:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 800d04c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d054:	429a      	cmp	r2, r3
 800d056:	d203      	bcs.n	800d060 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 800d058:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d05c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	69db      	ldr	r3, [r3, #28]
 800d064:	2b01      	cmp	r3, #1
 800d066:	d920      	bls.n	800d0aa <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	691b      	ldr	r3, [r3, #16]
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d11c      	bne.n	800d0aa <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 800d070:	4b2e      	ldr	r3, [pc, #184]	; (800d12c <_tx_mutex_put+0x2c4>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	3301      	adds	r3, #1
 800d076:	4a2d      	ldr	r2, [pc, #180]	; (800d12c <_tx_mutex_put+0x2c4>)
 800d078:	6013      	str	r3, [r2, #0]
 800d07a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d07e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d082:	f383 8810 	msr	PRIMASK, r3
}
 800d086:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f7ff fd7d 	bl	800cb88 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d08e:	f3ef 8310 	mrs	r3, PRIMASK
 800d092:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800d094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800d096:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800d098:	b672      	cpsid	i
    return(int_posture);
 800d09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 800d09c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 800d0a0:	4b22      	ldr	r3, [pc, #136]	; (800d12c <_tx_mutex_put+0x2c4>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	3b01      	subs	r3, #1
 800d0a6:	4a21      	ldr	r2, [pc, #132]	; (800d12c <_tx_mutex_put+0x2c4>)
 800d0a8:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	699b      	ldr	r3, [r3, #24]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d13e      	bne.n	800d130 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800d0b2:	4b1e      	ldr	r3, [pc, #120]	; (800d12c <_tx_mutex_put+0x2c4>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	4a1c      	ldr	r2, [pc, #112]	; (800d12c <_tx_mutex_put+0x2c4>)
 800d0ba:	6013      	str	r3, [r2, #0]
 800d0bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c4:	f383 8810 	msr	PRIMASK, r3
}
 800d0c8:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2220      	movs	r2, #32
 800d0ce:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	68db      	ldr	r3, [r3, #12]
 800d0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d006      	beq.n	800d0ec <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	68db      	ldr	r3, [r3, #12]
 800d0e2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7ff fe00 	bl	800ccec <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d0ec:	f3ef 8310 	mrs	r3, PRIMASK
 800d0f0:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800d0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800d0f4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d0f6:	b672      	cpsid	i
    return(int_posture);
 800d0f8:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 800d0fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 800d0fe:	4b0b      	ldr	r3, [pc, #44]	; (800d12c <_tx_mutex_put+0x2c4>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	3b01      	subs	r3, #1
 800d104:	4a09      	ldr	r2, [pc, #36]	; (800d12c <_tx_mutex_put+0x2c4>)
 800d106:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2200      	movs	r2, #0
 800d10c:	60da      	str	r2, [r3, #12]
 800d10e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d112:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d116:	f383 8810 	msr	PRIMASK, r3
}
 800d11a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 800d11c:	f000 fc20 	bl	800d960 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 800d120:	2300      	movs	r3, #0
 800d122:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d126:	e0bd      	b.n	800d2a4 <_tx_mutex_put+0x43c>
 800d128:	20014884 	.word	0x20014884
 800d12c:	2001491c 	.word	0x2001491c
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	699b      	ldr	r3, [r3, #24]
 800d134:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	691b      	ldr	r3, [r3, #16]
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d10a      	bne.n	800d154 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800d146:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2220      	movs	r2, #32
 800d152:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 800d154:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d156:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d15a:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800d15c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d10a      	bne.n	800d178 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800d162:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	631a      	str	r2, [r3, #48]	; 0x30
 800d176:	e016      	b.n	800d1a6 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 800d178:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d17a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d17e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800d182:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d188:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800d18a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800d192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d19c:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d1a4:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800d1a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1a8:	1c5a      	adds	r2, r3, #1
 800d1aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d1ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d1ba:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	69db      	ldr	r3, [r3, #28]
 800d1c0:	1e5a      	subs	r2, r3, #1
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	69db      	ldr	r3, [r3, #28]
 800d1ca:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800d1cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d103      	bne.n	800d1da <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	619a      	str	r2, [r3, #24]
 800d1d8:	e00e      	b.n	800d1f8 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800d1da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1de:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d1e4:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800d1e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d1e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1ea:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800d1ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d1f0:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800d1f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d1f6:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d1f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d1fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d200:	2200      	movs	r2, #0
 800d202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800d206:	4b2a      	ldr	r3, [pc, #168]	; (800d2b0 <_tx_mutex_put+0x448>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	3301      	adds	r3, #1
 800d20c:	4a28      	ldr	r2, [pc, #160]	; (800d2b0 <_tx_mutex_put+0x448>)
 800d20e:	6013      	str	r3, [r2, #0]
 800d210:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d214:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	f383 8810 	msr	PRIMASK, r3
}
 800d21c:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	691b      	ldr	r3, [r3, #16]
 800d222:	2b01      	cmp	r3, #1
 800d224:	d12d      	bne.n	800d282 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	69db      	ldr	r3, [r3, #28]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d01c      	beq.n	800d268 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f7ff fcaa 	bl	800cb88 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d234:	f3ef 8310 	mrs	r3, PRIMASK
 800d238:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d23a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d23c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d23e:	b672      	cpsid	i
    return(int_posture);
 800d240:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 800d242:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	699b      	ldr	r3, [r3, #24]
 800d24a:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 800d24c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d003      	beq.n	800d25a <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800d252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	629a      	str	r2, [r3, #40]	; 0x28
 800d25a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d25e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	f383 8810 	msr	PRIMASK, r3
}
 800d266:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 800d268:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d26e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d272:	429a      	cmp	r2, r3
 800d274:	d005      	beq.n	800d282 <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 800d276:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d27a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d27e:	f7ff fd35 	bl	800ccec <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 800d282:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d284:	f000 fba6 	bl	800d9d4 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 800d288:	2300      	movs	r3, #0
 800d28a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d28e:	e009      	b.n	800d2a4 <_tx_mutex_put+0x43c>
 800d290:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d294:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f383 8810 	msr	PRIMASK, r3
}
 800d29c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 800d29e:	231e      	movs	r3, #30
 800d2a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 800d2a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3798      	adds	r7, #152	; 0x98
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	2001491c 	.word	0x2001491c

0800d2b4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b092      	sub	sp, #72	; 0x48
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	607a      	str	r2, [r7, #4]
 800d2c0:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800d2c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d2c8:	21ef      	movs	r1, #239	; 0xef
 800d2ca:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d2cc:	f002 f81e 	bl	800f30c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800d2d0:	22b0      	movs	r2, #176	; 0xb0
 800d2d2:	2100      	movs	r1, #0
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f002 f819 	bl	800f30c <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	68ba      	ldr	r2, [r7, #8]
 800d2de:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	683a      	ldr	r2, [r7, #0]
 800d2ea:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2f0:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d2f6:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2fc:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d302:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d30a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d310:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2220      	movs	r2, #32
 800d316:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800d31a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d31c:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800d31e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d320:	3b01      	subs	r3, #1
 800d322:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d324:	4413      	add	r3, r2
 800d326:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d32c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800d32e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d332:	429a      	cmp	r2, r3
 800d334:	d007      	beq.n	800d346 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2200      	movs	r2, #0
 800d33a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2200      	movs	r2, #0
 800d340:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800d344:	e006      	b.n	800d354 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d34a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d350:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2203      	movs	r2, #3
 800d358:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	4a48      	ldr	r2, [pc, #288]	; (800d480 <_tx_thread_create+0x1cc>)
 800d35e:	655a      	str	r2, [r3, #84]	; 0x54
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800d366:	4947      	ldr	r1, [pc, #284]	; (800d484 <_tx_thread_create+0x1d0>)
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f7f3 f831 	bl	80003d0 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d36e:	f3ef 8310 	mrs	r3, PRIMASK
 800d372:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800d376:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d378:	b672      	cpsid	i
    return(int_posture);
 800d37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800d37c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	4a41      	ldr	r2, [pc, #260]	; (800d488 <_tx_thread_create+0x1d4>)
 800d382:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800d384:	4b41      	ldr	r3, [pc, #260]	; (800d48c <_tx_thread_create+0x1d8>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d10b      	bne.n	800d3a4 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800d38c:	4a40      	ldr	r2, [pc, #256]	; (800d490 <_tx_thread_create+0x1dc>)
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	68fa      	ldr	r2, [r7, #12]
 800d396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	68fa      	ldr	r2, [r7, #12]
 800d39e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800d3a2:	e016      	b.n	800d3d2 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800d3a4:	4b3a      	ldr	r3, [pc, #232]	; (800d490 <_tx_thread_create+0x1dc>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800d3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3b0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800d3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b4:	68fa      	ldr	r2, [r7, #12]
 800d3b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800d3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3bc:	68fa      	ldr	r2, [r7, #12]
 800d3be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800d3d2:	4b2e      	ldr	r3, [pc, #184]	; (800d48c <_tx_thread_create+0x1d8>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	4a2c      	ldr	r2, [pc, #176]	; (800d48c <_tx_thread_create+0x1d8>)
 800d3da:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800d3dc:	4b2d      	ldr	r3, [pc, #180]	; (800d494 <_tx_thread_create+0x1e0>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	4a2c      	ldr	r2, [pc, #176]	; (800d494 <_tx_thread_create+0x1e0>)
 800d3e4:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800d3e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d129      	bne.n	800d440 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d3ec:	f3ef 8305 	mrs	r3, IPSR
 800d3f0:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800d3f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800d3f4:	4b28      	ldr	r3, [pc, #160]	; (800d498 <_tx_thread_create+0x1e4>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d3fe:	d30d      	bcc.n	800d41c <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800d400:	4b26      	ldr	r3, [pc, #152]	; (800d49c <_tx_thread_create+0x1e8>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800d406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d009      	beq.n	800d420 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800d40c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d40e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d410:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800d412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d418:	63da      	str	r2, [r3, #60]	; 0x3c
 800d41a:	e001      	b.n	800d420 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800d41c:	2300      	movs	r3, #0
 800d41e:	647b      	str	r3, [r7, #68]	; 0x44
 800d420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d422:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d424:	6a3b      	ldr	r3, [r7, #32]
 800d426:	f383 8810 	msr	PRIMASK, r3
}
 800d42a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800d42c:	68f8      	ldr	r0, [r7, #12]
 800d42e:	f000 fad1 	bl	800d9d4 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800d432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d434:	2b00      	cmp	r3, #0
 800d436:	d01e      	beq.n	800d476 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800d438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d43a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d43c:	63da      	str	r2, [r3, #60]	; 0x3c
 800d43e:	e01a      	b.n	800d476 <_tx_thread_create+0x1c2>
 800d440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d442:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	f383 8810 	msr	PRIMASK, r3
}
 800d44a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d44c:	f3ef 8310 	mrs	r3, PRIMASK
 800d450:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d452:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d454:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d456:	b672      	cpsid	i
    return(int_posture);
 800d458:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800d45a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800d45c:	4b0d      	ldr	r3, [pc, #52]	; (800d494 <_tx_thread_create+0x1e0>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	3b01      	subs	r3, #1
 800d462:	4a0c      	ldr	r2, [pc, #48]	; (800d494 <_tx_thread_create+0x1e0>)
 800d464:	6013      	str	r3, [r2, #0]
 800d466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d468:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d46a:	69fb      	ldr	r3, [r7, #28]
 800d46c:	f383 8810 	msr	PRIMASK, r3
}
 800d470:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d472:	f000 fa75 	bl	800d960 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800d476:	2300      	movs	r3, #0
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3748      	adds	r7, #72	; 0x48
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	0800dea9 	.word	0x0800dea9
 800d484:	0800d7c9 	.word	0x0800d7c9
 800d488:	54485244 	.word	0x54485244
 800d48c:	20014890 	.word	0x20014890
 800d490:	2001488c 	.word	0x2001488c
 800d494:	2001491c 	.word	0x2001491c
 800d498:	20000088 	.word	0x20000088
 800d49c:	20014888 	.word	0x20014888

0800d4a0 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b087      	sub	sp, #28
 800d4a4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d4a6:	f3ef 8310 	mrs	r3, PRIMASK
 800d4aa:	60bb      	str	r3, [r7, #8]
    return(posture);
 800d4ac:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 800d4ae:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d4b0:	b672      	cpsid	i
    return(int_posture);
 800d4b2:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800d4b4:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d4b6:	4b08      	ldr	r3, [pc, #32]	; (800d4d8 <_tx_thread_identify+0x38>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	613b      	str	r3, [r7, #16]
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f383 8810 	msr	PRIMASK, r3
}
 800d4c6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 800d4c8:	693b      	ldr	r3, [r7, #16]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	371c      	adds	r7, #28
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop
 800d4d8:	20014884 	.word	0x20014884

0800d4dc <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800d4e0:	4b12      	ldr	r3, [pc, #72]	; (800d52c <_tx_thread_initialize+0x50>)
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800d4e6:	4b12      	ldr	r3, [pc, #72]	; (800d530 <_tx_thread_initialize+0x54>)
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	601a      	str	r2, [r3, #0]
 800d4ec:	4b11      	ldr	r3, [pc, #68]	; (800d534 <_tx_thread_initialize+0x58>)
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d4f2:	4b11      	ldr	r3, [pc, #68]	; (800d538 <_tx_thread_initialize+0x5c>)
 800d4f4:	2220      	movs	r2, #32
 800d4f6:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800d4f8:	2280      	movs	r2, #128	; 0x80
 800d4fa:	2100      	movs	r1, #0
 800d4fc:	480f      	ldr	r0, [pc, #60]	; (800d53c <_tx_thread_initialize+0x60>)
 800d4fe:	f001 ff05 	bl	800f30c <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800d502:	4b0f      	ldr	r3, [pc, #60]	; (800d540 <_tx_thread_initialize+0x64>)
 800d504:	2200      	movs	r2, #0
 800d506:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800d508:	4b0e      	ldr	r3, [pc, #56]	; (800d544 <_tx_thread_initialize+0x68>)
 800d50a:	2200      	movs	r2, #0
 800d50c:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800d50e:	4b0e      	ldr	r3, [pc, #56]	; (800d548 <_tx_thread_initialize+0x6c>)
 800d510:	2200      	movs	r2, #0
 800d512:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800d514:	4b0d      	ldr	r3, [pc, #52]	; (800d54c <_tx_thread_initialize+0x70>)
 800d516:	2200      	movs	r2, #0
 800d518:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800d51a:	4b0d      	ldr	r3, [pc, #52]	; (800d550 <_tx_thread_initialize+0x74>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800d522:	4a0b      	ldr	r2, [pc, #44]	; (800d550 <_tx_thread_initialize+0x74>)
 800d524:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800d526:	bf00      	nop
 800d528:	bd80      	pop	{r7, pc}
 800d52a:	bf00      	nop
 800d52c:	20014884 	.word	0x20014884
 800d530:	20014888 	.word	0x20014888
 800d534:	20014894 	.word	0x20014894
 800d538:	20014898 	.word	0x20014898
 800d53c:	2001489c 	.word	0x2001489c
 800d540:	2001488c 	.word	0x2001488c
 800d544:	20014890 	.word	0x20014890
 800d548:	2001491c 	.word	0x2001491c
 800d54c:	20014920 	.word	0x20014920
 800d550:	20014924 	.word	0x20014924

0800d554 <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b08c      	sub	sp, #48	; 0x30
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	60b9      	str	r1, [r7, #8]
 800d55e:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d560:	2300      	movs	r3, #0
 800d562:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d56a:	68ba      	ldr	r2, [r7, #8]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d004      	beq.n	800d57a <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d001      	beq.n	800d57a <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 800d576:	2300      	movs	r3, #0
 800d578:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d57a:	f3ef 8310 	mrs	r3, PRIMASK
 800d57e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800d580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800d582:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d584:	b672      	cpsid	i
    return(int_posture);
 800d586:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d588:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d590:	68ba      	ldr	r2, [r7, #8]
 800d592:	429a      	cmp	r2, r3
 800d594:	d902      	bls.n	800d59c <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 800d596:	2318      	movs	r3, #24
 800d598:	62bb      	str	r3, [r7, #40]	; 0x28
 800d59a:	e03e      	b.n	800d61a <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	68ba      	ldr	r2, [r7, #8]
 800d5aa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d5b4:	68ba      	ldr	r2, [r7, #8]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d203      	bcs.n	800d5c2 <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	68ba      	ldr	r2, [r7, #8]
 800d5be:	63da      	str	r2, [r3, #60]	; 0x3c
 800d5c0:	e004      	b.n	800d5cc <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d0:	4b17      	ldr	r3, [pc, #92]	; (800d630 <_tx_thread_preemption_change+0xdc>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d920      	bls.n	800d61a <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 800d5d8:	4b15      	ldr	r3, [pc, #84]	; (800d630 <_tx_thread_preemption_change+0xdc>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	68ba      	ldr	r2, [r7, #8]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d91b      	bls.n	800d61a <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 800d5e2:	4b14      	ldr	r3, [pc, #80]	; (800d634 <_tx_thread_preemption_change+0xe0>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	68fa      	ldr	r2, [r7, #12]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d116      	bne.n	800d61a <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d5ec:	4b10      	ldr	r3, [pc, #64]	; (800d630 <_tx_thread_preemption_change+0xdc>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4a11      	ldr	r2, [pc, #68]	; (800d638 <_tx_thread_preemption_change+0xe4>)
 800d5f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5f6:	4a0f      	ldr	r2, [pc, #60]	; (800d634 <_tx_thread_preemption_change+0xe0>)
 800d5f8:	6013      	str	r3, [r2, #0]
 800d5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	f383 8810 	msr	PRIMASK, r3
}
 800d604:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 800d606:	f000 f9ab 	bl	800d960 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d60a:	f3ef 8310 	mrs	r3, PRIMASK
 800d60e:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d610:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d612:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d614:	b672      	cpsid	i
    return(int_posture);
 800d616:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800d618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	f383 8810 	msr	PRIMASK, r3
}
 800d624:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800d626:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3730      	adds	r7, #48	; 0x30
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	20014898 	.word	0x20014898
 800d634:	20014888 	.word	0x20014888
 800d638:	2001489c 	.word	0x2001489c

0800d63c <_tx_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_relinquish(VOID)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b08b      	sub	sp, #44	; 0x2c
 800d640:	af00      	add	r7, sp, #0
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d642:	4b2b      	ldr	r3, [pc, #172]	; (800d6f0 <_tx_thread_relinquish+0xb4>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d648:	f3ef 8310 	mrs	r3, PRIMASK
 800d64c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d64e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d650:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d652:	b672      	cpsid	i
    return(int_posture);
 800d654:	697b      	ldr	r3, [r7, #20]
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Disable interrupts.  */
    TX_DISABLE
 800d656:	623b      	str	r3, [r7, #32]

#ifndef TX_NO_TIMER

    /* Reset time slice for current thread.  */
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65a:	69db      	ldr	r3, [r3, #28]
 800d65c:	4a25      	ldr	r2, [pc, #148]	; (800d6f4 <_tx_thread_relinquish+0xb8>)
 800d65e:	6013      	str	r3, [r2, #0]
#endif

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;
 800d660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d664:	61fb      	str	r3, [r7, #28]

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800d666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d668:	6a1b      	ldr	r3, [r3, #32]
 800d66a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d009      	beq.n	800d684 <_tx_thread_relinquish+0x48>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 800d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d672:	6a1a      	ldr	r2, [r3, #32]
 800d674:	4920      	ldr	r1, [pc, #128]	; (800d6f8 <_tx_thread_relinquish+0xbc>)
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	6a1b      	ldr	r3, [r3, #32]
 800d680:	4a1e      	ldr	r2, [pc, #120]	; (800d6fc <_tx_thread_relinquish+0xc0>)
 800d682:	6013      	str	r3, [r2, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 800d684:	4b1e      	ldr	r3, [pc, #120]	; (800d700 <_tx_thread_relinquish+0xc4>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	69fa      	ldr	r2, [r7, #28]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d906      	bls.n	800d69c <_tx_thread_relinquish+0x60>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d68e:	4b1c      	ldr	r3, [pc, #112]	; (800d700 <_tx_thread_relinquish+0xc4>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4a19      	ldr	r2, [pc, #100]	; (800d6f8 <_tx_thread_relinquish+0xbc>)
 800d694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d698:	4a18      	ldr	r2, [pc, #96]	; (800d6fc <_tx_thread_relinquish+0xc0>)
 800d69a:	6013      	str	r3, [r2, #0]
 800d69c:	6a3b      	ldr	r3, [r7, #32]
 800d69e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	f383 8810 	msr	PRIMASK, r3
}
 800d6a6:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 800d6a8:	4b14      	ldr	r3, [pc, #80]	; (800d6fc <_tx_thread_relinquish+0xc0>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d017      	beq.n	800d6e2 <_tx_thread_relinquish+0xa6>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d6b2:	4b14      	ldr	r3, [pc, #80]	; (800d704 <_tx_thread_relinquish+0xc8>)
 800d6b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6b8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d6ba:	f3ef 8305 	mrs	r3, IPSR
 800d6be:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
    if (_tx_ipsr_get() == 0)
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d10c      	bne.n	800d6e0 <_tx_thread_relinquish+0xa4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d6c6:	f3ef 8310 	mrs	r3, PRIMASK
 800d6ca:	60bb      	str	r3, [r7, #8]
    return(posture);
 800d6cc:	68bb      	ldr	r3, [r7, #8]
    {
        interrupt_save = __get_interrupt_posture();
 800d6ce:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d6d0:	b662      	cpsie	i
}
 800d6d2:	bf00      	nop
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	f383 8810 	msr	PRIMASK, r3
}
 800d6de:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800d6e0:	bf00      	nop

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 800d6e2:	bf00      	nop
 800d6e4:	372c      	adds	r7, #44	; 0x2c
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr
 800d6ee:	bf00      	nop
 800d6f0:	20014884 	.word	0x20014884
 800d6f4:	20014e88 	.word	0x20014e88
 800d6f8:	2001489c 	.word	0x2001489c
 800d6fc:	20014888 	.word	0x20014888
 800d700:	20014898 	.word	0x20014898
 800d704:	e000ed04 	.word	0xe000ed04

0800d708 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b08c      	sub	sp, #48	; 0x30
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 800d710:	2300      	movs	r3, #0
 800d712:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d714:	f3ef 8310 	mrs	r3, PRIMASK
 800d718:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d71a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d71c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d71e:	b672      	cpsid	i
    return(int_posture);
 800d720:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d722:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d728:	2b03      	cmp	r3, #3
 800d72a:	d12f      	bne.n	800d78c <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d72c:	f3ef 8305 	mrs	r3, IPSR
 800d730:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d732:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800d734:	4b21      	ldr	r3, [pc, #132]	; (800d7bc <_tx_thread_resume+0xb4>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4313      	orrs	r3, r2
 800d73a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d73e:	d30d      	bcc.n	800d75c <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800d740:	4b1f      	ldr	r3, [pc, #124]	; (800d7c0 <_tx_thread_resume+0xb8>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800d746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d009      	beq.n	800d760 <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800d74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d750:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800d752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d758:	63da      	str	r2, [r3, #60]	; 0x3c
 800d75a:	e001      	b.n	800d760 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800d75c:	2300      	movs	r3, #0
 800d75e:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800d760:	4b18      	ldr	r3, [pc, #96]	; (800d7c4 <_tx_thread_resume+0xbc>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	3301      	adds	r3, #1
 800d766:	4a17      	ldr	r2, [pc, #92]	; (800d7c4 <_tx_thread_resume+0xbc>)
 800d768:	6013      	str	r3, [r2, #0]
 800d76a:	6a3b      	ldr	r3, [r7, #32]
 800d76c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	f383 8810 	msr	PRIMASK, r3
}
 800d774:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 f92c 	bl	800d9d4 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800d77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d002      	beq.n	800d788 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800d782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d786:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 800d788:	2300      	movs	r3, #0
 800d78a:	e012      	b.n	800d7b2 <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d790:	2b01      	cmp	r3, #1
 800d792:	d105      	bne.n	800d7a0 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 800d79a:	2319      	movs	r3, #25
 800d79c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d79e:	e001      	b.n	800d7a4 <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 800d7a0:	2312      	movs	r3, #18
 800d7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7a4:	6a3b      	ldr	r3, [r7, #32]
 800d7a6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f383 8810 	msr	PRIMASK, r3
}
 800d7ae:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 800d7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3730      	adds	r7, #48	; 0x30
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	20000088 	.word	0x20000088
 800d7c0:	20014888 	.word	0x20014888
 800d7c4:	2001491c 	.word	0x2001491c

0800d7c8 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b088      	sub	sp, #32
 800d7cc:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d7ce:	4b21      	ldr	r3, [pc, #132]	; (800d854 <_tx_thread_shell_entry+0x8c>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7d8:	69fa      	ldr	r2, [r7, #28]
 800d7da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d7dc:	4610      	mov	r0, r2
 800d7de:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800d7e0:	4b1d      	ldr	r3, [pc, #116]	; (800d858 <_tx_thread_shell_entry+0x90>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d003      	beq.n	800d7f0 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800d7e8:	4b1b      	ldr	r3, [pc, #108]	; (800d858 <_tx_thread_shell_entry+0x90>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	69f8      	ldr	r0, [r7, #28]
 800d7ee:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d7f0:	f3ef 8310 	mrs	r3, PRIMASK
 800d7f4:	607b      	str	r3, [r7, #4]
    return(posture);
 800d7f6:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800d7f8:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d7fa:	b672      	cpsid	i
    return(int_posture);
 800d7fc:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800d7fe:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	2201      	movs	r2, #1
 800d804:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	2201      	movs	r2, #1
 800d80a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	2200      	movs	r2, #0
 800d810:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800d812:	4b12      	ldr	r3, [pc, #72]	; (800d85c <_tx_thread_shell_entry+0x94>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	3301      	adds	r3, #1
 800d818:	4a10      	ldr	r2, [pc, #64]	; (800d85c <_tx_thread_shell_entry+0x94>)
 800d81a:	6013      	str	r3, [r2, #0]
 800d81c:	69bb      	ldr	r3, [r7, #24]
 800d81e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	f383 8810 	msr	PRIMASK, r3
}
 800d826:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800d828:	f3ef 8314 	mrs	r3, CONTROL
 800d82c:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800d82e:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800d830:	617b      	str	r3, [r7, #20]
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	f023 0304 	bic.w	r3, r3, #4
 800d838:	617b      	str	r3, [r7, #20]
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	f383 8814 	msr	CONTROL, r3
}
 800d844:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800d846:	69f8      	ldr	r0, [r7, #28]
 800d848:	f000 f9c4 	bl	800dbd4 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800d84c:	bf00      	nop
 800d84e:	3720      	adds	r7, #32
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	20014884 	.word	0x20014884
 800d858:	20014920 	.word	0x20014920
 800d85c:	2001491c 	.word	0x2001491c

0800d860 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b08e      	sub	sp, #56	; 0x38
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d868:	f3ef 8310 	mrs	r3, PRIMASK
 800d86c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800d870:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d872:	b672      	cpsid	i
    return(int_posture);
 800d874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d876:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d878:	4b35      	ldr	r3, [pc, #212]	; (800d950 <_tx_thread_sleep+0xf0>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800d87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d880:	2b00      	cmp	r3, #0
 800d882:	d108      	bne.n	800d896 <_tx_thread_sleep+0x36>
 800d884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d886:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d888:	6a3b      	ldr	r3, [r7, #32]
 800d88a:	f383 8810 	msr	PRIMASK, r3
}
 800d88e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d890:	2313      	movs	r3, #19
 800d892:	637b      	str	r3, [r7, #52]	; 0x34
 800d894:	e056      	b.n	800d944 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d896:	f3ef 8305 	mrs	r3, IPSR
 800d89a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800d89c:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d89e:	4b2d      	ldr	r3, [pc, #180]	; (800d954 <_tx_thread_sleep+0xf4>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d008      	beq.n	800d8ba <_tx_thread_sleep+0x5a>
 800d8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8aa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8ac:	69bb      	ldr	r3, [r7, #24]
 800d8ae:	f383 8810 	msr	PRIMASK, r3
}
 800d8b2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d8b4:	2313      	movs	r3, #19
 800d8b6:	637b      	str	r3, [r7, #52]	; 0x34
 800d8b8:	e044      	b.n	800d944 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800d8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8bc:	4a26      	ldr	r2, [pc, #152]	; (800d958 <_tx_thread_sleep+0xf8>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d108      	bne.n	800d8d4 <_tx_thread_sleep+0x74>
 800d8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	f383 8810 	msr	PRIMASK, r3
}
 800d8cc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d8ce:	2313      	movs	r3, #19
 800d8d0:	637b      	str	r3, [r7, #52]	; 0x34
 800d8d2:	e037      	b.n	800d944 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d108      	bne.n	800d8ec <_tx_thread_sleep+0x8c>
 800d8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8dc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	f383 8810 	msr	PRIMASK, r3
}
 800d8e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	637b      	str	r3, [r7, #52]	; 0x34
 800d8ea:	e02b      	b.n	800d944 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800d8ec:	4b1b      	ldr	r3, [pc, #108]	; (800d95c <_tx_thread_sleep+0xfc>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d008      	beq.n	800d906 <_tx_thread_sleep+0xa6>
 800d8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f383 8810 	msr	PRIMASK, r3
}
 800d8fe:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800d900:	2313      	movs	r3, #19
 800d902:	637b      	str	r3, [r7, #52]	; 0x34
 800d904:	e01e      	b.n	800d944 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800d906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d908:	2204      	movs	r2, #4
 800d90a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90e:	2201      	movs	r2, #1
 800d910:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d914:	2200      	movs	r2, #0
 800d916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800d91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d920:	4b0e      	ldr	r3, [pc, #56]	; (800d95c <_tx_thread_sleep+0xfc>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	3301      	adds	r3, #1
 800d926:	4a0d      	ldr	r2, [pc, #52]	; (800d95c <_tx_thread_sleep+0xfc>)
 800d928:	6013      	str	r3, [r2, #0]
 800d92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	f383 8810 	msr	PRIMASK, r3
}
 800d934:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800d936:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d938:	f000 f94c 	bl	800dbd4 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800d93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d942:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800d944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d946:	4618      	mov	r0, r3
 800d948:	3738      	adds	r7, #56	; 0x38
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	20014884 	.word	0x20014884
 800d954:	20000088 	.word	0x20000088
 800d958:	200149cc 	.word	0x200149cc
 800d95c:	2001491c 	.word	0x2001491c

0800d960 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800d960:	b480      	push	{r7}
 800d962:	b089      	sub	sp, #36	; 0x24
 800d964:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d966:	4b17      	ldr	r3, [pc, #92]	; (800d9c4 <_tx_thread_system_preempt_check+0x64>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800d96c:	69fb      	ldr	r3, [r7, #28]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d121      	bne.n	800d9b6 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800d972:	4b15      	ldr	r3, [pc, #84]	; (800d9c8 <_tx_thread_system_preempt_check+0x68>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800d978:	4b14      	ldr	r3, [pc, #80]	; (800d9cc <_tx_thread_system_preempt_check+0x6c>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800d97e:	69ba      	ldr	r2, [r7, #24]
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	429a      	cmp	r2, r3
 800d984:	d017      	beq.n	800d9b6 <_tx_thread_system_preempt_check+0x56>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d986:	4b12      	ldr	r3, [pc, #72]	; (800d9d0 <_tx_thread_system_preempt_check+0x70>)
 800d988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d98c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d98e:	f3ef 8305 	mrs	r3, IPSR
 800d992:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d994:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800d996:	2b00      	cmp	r3, #0
 800d998:	d10c      	bne.n	800d9b4 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d99a:	f3ef 8310 	mrs	r3, PRIMASK
 800d99e:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
        interrupt_save = __get_interrupt_posture();
 800d9a2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d9a4:	b662      	cpsie	i
}
 800d9a6:	bf00      	nop
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f383 8810 	msr	PRIMASK, r3
}
 800d9b2:	bf00      	nop
}
 800d9b4:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800d9b6:	bf00      	nop
 800d9b8:	3724      	adds	r7, #36	; 0x24
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr
 800d9c2:	bf00      	nop
 800d9c4:	2001491c 	.word	0x2001491c
 800d9c8:	20014884 	.word	0x20014884
 800d9cc:	20014888 	.word	0x20014888
 800d9d0:	e000ed04 	.word	0xe000ed04

0800d9d4 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b096      	sub	sp, #88	; 0x58
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d9dc:	f3ef 8310 	mrs	r3, PRIMASK
 800d9e0:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800d9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800d9e4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800d9e6:	b672      	cpsid	i
    return(int_posture);
 800d9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d9ea:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d005      	beq.n	800da00 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	334c      	adds	r3, #76	; 0x4c
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f000 fbf5 	bl	800e1e8 <_tx_timer_system_deactivate>
 800d9fe:	e002      	b.n	800da06 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2200      	movs	r2, #0
 800da04:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800da06:	4b6c      	ldr	r3, [pc, #432]	; (800dbb8 <_tx_thread_system_resume+0x1e4>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	3b01      	subs	r3, #1
 800da0c:	4a6a      	ldr	r2, [pc, #424]	; (800dbb8 <_tx_thread_system_resume+0x1e4>)
 800da0e:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da14:	2b00      	cmp	r3, #0
 800da16:	f040 8083 	bne.w	800db20 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da1e:	2b00      	cmp	r3, #0
 800da20:	f000 8097 	beq.w	800db52 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d172      	bne.n	800db12 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2200      	movs	r2, #0
 800da30:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da36:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800da38:	4a60      	ldr	r2, [pc, #384]	; (800dbbc <_tx_thread_system_resume+0x1e8>)
 800da3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da40:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800da42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da44:	2b00      	cmp	r3, #0
 800da46:	d154      	bne.n	800daf2 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800da48:	495c      	ldr	r1, [pc, #368]	; (800dbbc <_tx_thread_system_resume+0x1e8>)
 800da4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	687a      	ldr	r2, [r7, #4]
 800da5c:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800da5e:	2201      	movs	r2, #1
 800da60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da62:	fa02 f303 	lsl.w	r3, r2, r3
 800da66:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800da68:	4b55      	ldr	r3, [pc, #340]	; (800dbc0 <_tx_thread_system_resume+0x1ec>)
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da6e:	4313      	orrs	r3, r2
 800da70:	4a53      	ldr	r2, [pc, #332]	; (800dbc0 <_tx_thread_system_resume+0x1ec>)
 800da72:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800da74:	4b53      	ldr	r3, [pc, #332]	; (800dbc4 <_tx_thread_system_resume+0x1f0>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d269      	bcs.n	800db52 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800da7e:	4a51      	ldr	r2, [pc, #324]	; (800dbc4 <_tx_thread_system_resume+0x1f0>)
 800da80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da82:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800da84:	4b50      	ldr	r3, [pc, #320]	; (800dbc8 <_tx_thread_system_resume+0x1f4>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800da8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d103      	bne.n	800da98 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800da90:	4a4d      	ldr	r2, [pc, #308]	; (800dbc8 <_tx_thread_system_resume+0x1f4>)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6013      	str	r3, [r2, #0]
 800da96:	e05c      	b.n	800db52 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800da98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d257      	bcs.n	800db52 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800daa2:	4a49      	ldr	r2, [pc, #292]	; (800dbc8 <_tx_thread_system_resume+0x1f4>)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6013      	str	r3, [r2, #0]
 800daa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800daaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800daac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daae:	f383 8810 	msr	PRIMASK, r3
}
 800dab2:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800dab4:	4b40      	ldr	r3, [pc, #256]	; (800dbb8 <_tx_thread_system_resume+0x1e4>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800daba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d174      	bne.n	800dbaa <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800dac0:	4b42      	ldr	r3, [pc, #264]	; (800dbcc <_tx_thread_system_resume+0x1f8>)
 800dac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dac6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dac8:	f3ef 8305 	mrs	r3, IPSR
 800dacc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800dace:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d10c      	bne.n	800daee <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dad4:	f3ef 8310 	mrs	r3, PRIMASK
 800dad8:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800dada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800dadc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800dade:	b662      	cpsie	i
}
 800dae0:	bf00      	nop
 800dae2:	6a3b      	ldr	r3, [r7, #32]
 800dae4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	f383 8810 	msr	PRIMASK, r3
}
 800daec:	bf00      	nop
}
 800daee:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800daf0:	e05b      	b.n	800dbaa <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800daf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf6:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800daf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800dafe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db08:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db0e:	621a      	str	r2, [r3, #32]
 800db10:	e01f      	b.n	800db52 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2203      	movs	r2, #3
 800db1c:	631a      	str	r2, [r3, #48]	; 0x30
 800db1e:	e018      	b.n	800db52 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db24:	2b01      	cmp	r3, #1
 800db26:	d014      	beq.n	800db52 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db2c:	2b02      	cmp	r3, #2
 800db2e:	d010      	beq.n	800db52 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db34:	2b00      	cmp	r3, #0
 800db36:	d106      	bne.n	800db46 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2200      	movs	r2, #0
 800db3c:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	631a      	str	r2, [r3, #48]	; 0x30
 800db44:	e005      	b.n	800db52 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2200      	movs	r2, #0
 800db4a:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2203      	movs	r2, #3
 800db50:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800db52:	4b1f      	ldr	r3, [pc, #124]	; (800dbd0 <_tx_thread_system_resume+0x1fc>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	63bb      	str	r3, [r7, #56]	; 0x38
 800db58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db5a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	f383 8810 	msr	PRIMASK, r3
}
 800db62:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800db64:	4b18      	ldr	r3, [pc, #96]	; (800dbc8 <_tx_thread_system_resume+0x1f4>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d020      	beq.n	800dbb0 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800db6e:	4b12      	ldr	r3, [pc, #72]	; (800dbb8 <_tx_thread_system_resume+0x1e4>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800db74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db76:	2b00      	cmp	r3, #0
 800db78:	d11a      	bne.n	800dbb0 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800db7a:	4b14      	ldr	r3, [pc, #80]	; (800dbcc <_tx_thread_system_resume+0x1f8>)
 800db7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db80:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800db82:	f3ef 8305 	mrs	r3, IPSR
 800db86:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800db88:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d10f      	bne.n	800dbae <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db8e:	f3ef 8310 	mrs	r3, PRIMASK
 800db92:	613b      	str	r3, [r7, #16]
    return(posture);
 800db94:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800db96:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800db98:	b662      	cpsie	i
}
 800db9a:	bf00      	nop
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	f383 8810 	msr	PRIMASK, r3
}
 800dba6:	bf00      	nop
}
 800dba8:	e001      	b.n	800dbae <_tx_thread_system_resume+0x1da>
                                return;
 800dbaa:	bf00      	nop
 800dbac:	e000      	b.n	800dbb0 <_tx_thread_system_resume+0x1dc>
 800dbae:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800dbb0:	3758      	adds	r7, #88	; 0x58
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	2001491c 	.word	0x2001491c
 800dbbc:	2001489c 	.word	0x2001489c
 800dbc0:	20014894 	.word	0x20014894
 800dbc4:	20014898 	.word	0x20014898
 800dbc8:	20014888 	.word	0x20014888
 800dbcc:	e000ed04 	.word	0xe000ed04
 800dbd0:	20014884 	.word	0x20014884

0800dbd4 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b09e      	sub	sp, #120	; 0x78
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800dbdc:	4b81      	ldr	r3, [pc, #516]	; (800dde4 <_tx_thread_system_suspend+0x210>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dbe2:	f3ef 8310 	mrs	r3, PRIMASK
 800dbe6:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800dbe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800dbea:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800dbec:	b672      	cpsid	i
    return(int_posture);
 800dbee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800dbf0:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d112      	bne.n	800dc20 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbfe:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800dc00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d008      	beq.n	800dc18 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800dc06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc0c:	d004      	beq.n	800dc18 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	334c      	adds	r3, #76	; 0x4c
 800dc12:	4618      	mov	r0, r3
 800dc14:	f000 fa86 	bl	800e124 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	69db      	ldr	r3, [r3, #28]
 800dc1c:	4a72      	ldr	r2, [pc, #456]	; (800dde8 <_tx_thread_system_suspend+0x214>)
 800dc1e:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800dc20:	4b72      	ldr	r3, [pc, #456]	; (800ddec <_tx_thread_system_suspend+0x218>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	3b01      	subs	r3, #1
 800dc26:	4a71      	ldr	r2, [pc, #452]	; (800ddec <_tx_thread_system_suspend+0x218>)
 800dc28:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	f040 80a6 	bne.w	800dd80 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2200      	movs	r2, #0
 800dc38:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc3e:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6a1b      	ldr	r3, [r3, #32]
 800dc44:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800dc46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d015      	beq.n	800dc7a <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc52:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800dc54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc58:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800dc5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dc5e:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800dc60:	4a63      	ldr	r2, [pc, #396]	; (800ddf0 <_tx_thread_system_suspend+0x21c>)
 800dc62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d157      	bne.n	800dd1e <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800dc6e:	4960      	ldr	r1, [pc, #384]	; (800ddf0 <_tx_thread_system_suspend+0x21c>)
 800dc70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dc74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800dc78:	e051      	b.n	800dd1e <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800dc7a:	4a5d      	ldr	r2, [pc, #372]	; (800ddf0 <_tx_thread_system_suspend+0x21c>)
 800dc7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc7e:	2100      	movs	r1, #0
 800dc80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800dc84:	2201      	movs	r2, #1
 800dc86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc88:	fa02 f303 	lsl.w	r3, r2, r3
 800dc8c:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800dc8e:	4b59      	ldr	r3, [pc, #356]	; (800ddf4 <_tx_thread_system_suspend+0x220>)
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc94:	43db      	mvns	r3, r3
 800dc96:	4013      	ands	r3, r2
 800dc98:	4a56      	ldr	r2, [pc, #344]	; (800ddf4 <_tx_thread_system_suspend+0x220>)
 800dc9a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800dca0:	4b54      	ldr	r3, [pc, #336]	; (800ddf4 <_tx_thread_system_suspend+0x220>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800dca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d12b      	bne.n	800dd04 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800dcac:	4b52      	ldr	r3, [pc, #328]	; (800ddf8 <_tx_thread_system_suspend+0x224>)
 800dcae:	2220      	movs	r2, #32
 800dcb0:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800dcb2:	4b52      	ldr	r3, [pc, #328]	; (800ddfc <_tx_thread_system_suspend+0x228>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	601a      	str	r2, [r3, #0]
 800dcb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcba:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dcbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcbe:	f383 8810 	msr	PRIMASK, r3
}
 800dcc2:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800dcc4:	4b49      	ldr	r3, [pc, #292]	; (800ddec <_tx_thread_system_suspend+0x218>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800dcca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	f040 8081 	bne.w	800ddd4 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800dcd2:	4b4b      	ldr	r3, [pc, #300]	; (800de00 <_tx_thread_system_suspend+0x22c>)
 800dcd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcd8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dcda:	f3ef 8305 	mrs	r3, IPSR
 800dcde:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800dce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d10c      	bne.n	800dd00 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dce6:	f3ef 8310 	mrs	r3, PRIMASK
 800dcea:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800dcec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800dcee:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800dcf0:	b662      	cpsie	i
}
 800dcf2:	bf00      	nop
 800dcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf6:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dcf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcfa:	f383 8810 	msr	PRIMASK, r3
}
 800dcfe:	bf00      	nop
}
 800dd00:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800dd02:	e067      	b.n	800ddd4 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800dd04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd06:	fa93 f3a3 	rbit	r3, r3
 800dd0a:	65bb      	str	r3, [r7, #88]	; 0x58
 800dd0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd0e:	fab3 f383 	clz	r3, r3
 800dd12:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800dd14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dd16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd18:	4413      	add	r3, r2
 800dd1a:	4a37      	ldr	r2, [pc, #220]	; (800ddf8 <_tx_thread_system_suspend+0x224>)
 800dd1c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800dd1e:	4b37      	ldr	r3, [pc, #220]	; (800ddfc <_tx_thread_system_suspend+0x228>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d12b      	bne.n	800dd80 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800dd28:	4b33      	ldr	r3, [pc, #204]	; (800ddf8 <_tx_thread_system_suspend+0x224>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a30      	ldr	r2, [pc, #192]	; (800ddf0 <_tx_thread_system_suspend+0x21c>)
 800dd2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd32:	4a32      	ldr	r2, [pc, #200]	; (800ddfc <_tx_thread_system_suspend+0x228>)
 800dd34:	6013      	str	r3, [r2, #0]
 800dd36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd38:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3c:	f383 8810 	msr	PRIMASK, r3
}
 800dd40:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800dd42:	4b2a      	ldr	r3, [pc, #168]	; (800ddec <_tx_thread_system_suspend+0x218>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800dd48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d144      	bne.n	800ddd8 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800dd4e:	4b2c      	ldr	r3, [pc, #176]	; (800de00 <_tx_thread_system_suspend+0x22c>)
 800dd50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd54:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dd56:	f3ef 8305 	mrs	r3, IPSR
 800dd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800dd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d10c      	bne.n	800dd7c <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dd62:	f3ef 8310 	mrs	r3, PRIMASK
 800dd66:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800dd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800dd6a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800dd6c:	b662      	cpsie	i
}
 800dd6e:	bf00      	nop
 800dd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd72:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd74:	6a3b      	ldr	r3, [r7, #32]
 800dd76:	f383 8810 	msr	PRIMASK, r3
}
 800dd7a:	bf00      	nop
}
 800dd7c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800dd7e:	e02b      	b.n	800ddd8 <_tx_thread_system_suspend+0x204>
 800dd80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd82:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	f383 8810 	msr	PRIMASK, r3
}
 800dd8a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800dd8c:	4b1b      	ldr	r3, [pc, #108]	; (800ddfc <_tx_thread_system_suspend+0x228>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d022      	beq.n	800dddc <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800dd96:	4b15      	ldr	r3, [pc, #84]	; (800ddec <_tx_thread_system_suspend+0x218>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800dd9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d11c      	bne.n	800dddc <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800dda2:	4b17      	ldr	r3, [pc, #92]	; (800de00 <_tx_thread_system_suspend+0x22c>)
 800dda4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dda8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ddaa:	f3ef 8305 	mrs	r3, IPSR
 800ddae:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ddb0:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d10c      	bne.n	800ddd0 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ddb6:	f3ef 8310 	mrs	r3, PRIMASK
 800ddba:	617b      	str	r3, [r7, #20]
    return(posture);
 800ddbc:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800ddbe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800ddc0:	b662      	cpsie	i
}
 800ddc2:	bf00      	nop
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f383 8810 	msr	PRIMASK, r3
}
 800ddce:	bf00      	nop
}
 800ddd0:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800ddd2:	e003      	b.n	800dddc <_tx_thread_system_suspend+0x208>
                return;
 800ddd4:	bf00      	nop
 800ddd6:	e002      	b.n	800ddde <_tx_thread_system_suspend+0x20a>
            return;
 800ddd8:	bf00      	nop
 800ddda:	e000      	b.n	800ddde <_tx_thread_system_suspend+0x20a>
    return;
 800dddc:	bf00      	nop
}
 800ddde:	3778      	adds	r7, #120	; 0x78
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	20014884 	.word	0x20014884
 800dde8:	20014e88 	.word	0x20014e88
 800ddec:	2001491c 	.word	0x2001491c
 800ddf0:	2001489c 	.word	0x2001489c
 800ddf4:	20014894 	.word	0x20014894
 800ddf8:	20014898 	.word	0x20014898
 800ddfc:	20014888 	.word	0x20014888
 800de00:	e000ed04 	.word	0xe000ed04

0800de04 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800de04:	b480      	push	{r7}
 800de06:	b087      	sub	sp, #28
 800de08:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800de0a:	4b21      	ldr	r3, [pc, #132]	; (800de90 <_tx_thread_time_slice+0x8c>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800de10:	f3ef 8310 	mrs	r3, PRIMASK
 800de14:	60fb      	str	r3, [r7, #12]
    return(posture);
 800de16:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800de18:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800de1a:	b672      	cpsid	i
    return(int_posture);
 800de1c:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800de1e:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800de20:	4b1c      	ldr	r3, [pc, #112]	; (800de94 <_tx_thread_time_slice+0x90>)
 800de22:	2200      	movs	r2, #0
 800de24:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d024      	beq.n	800de76 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de30:	2b00      	cmp	r3, #0
 800de32:	d120      	bne.n	800de76 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	69da      	ldr	r2, [r3, #28]
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	699b      	ldr	r3, [r3, #24]
 800de40:	4a15      	ldr	r2, [pc, #84]	; (800de98 <_tx_thread_time_slice+0x94>)
 800de42:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	6a1b      	ldr	r3, [r3, #32]
 800de48:	697a      	ldr	r2, [r7, #20]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d013      	beq.n	800de76 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de56:	429a      	cmp	r2, r3
 800de58:	d10d      	bne.n	800de76 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de5e:	697a      	ldr	r2, [r7, #20]
 800de60:	6a12      	ldr	r2, [r2, #32]
 800de62:	490e      	ldr	r1, [pc, #56]	; (800de9c <_tx_thread_time_slice+0x98>)
 800de64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800de68:	4b0d      	ldr	r3, [pc, #52]	; (800dea0 <_tx_thread_time_slice+0x9c>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a0b      	ldr	r2, [pc, #44]	; (800de9c <_tx_thread_time_slice+0x98>)
 800de6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de72:	4a0c      	ldr	r2, [pc, #48]	; (800dea4 <_tx_thread_time_slice+0xa0>)
 800de74:	6013      	str	r3, [r2, #0]
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f383 8810 	msr	PRIMASK, r3
}
 800de80:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800de82:	bf00      	nop
 800de84:	371c      	adds	r7, #28
 800de86:	46bd      	mov	sp, r7
 800de88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop
 800de90:	20014884 	.word	0x20014884
 800de94:	2001492c 	.word	0x2001492c
 800de98:	20014e88 	.word	0x20014e88
 800de9c:	2001489c 	.word	0x2001489c
 800dea0:	20014898 	.word	0x20014898
 800dea4:	20014888 	.word	0x20014888

0800dea8 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b08a      	sub	sp, #40	; 0x28
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800deb4:	f3ef 8310 	mrs	r3, PRIMASK
 800deb8:	617b      	str	r3, [r7, #20]
    return(posture);
 800deba:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800debc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800debe:	b672      	cpsid	i
    return(int_posture);
 800dec0:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800dec2:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800dec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dec8:	2b04      	cmp	r3, #4
 800deca:	d10e      	bne.n	800deea <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800decc:	4b13      	ldr	r3, [pc, #76]	; (800df1c <_tx_thread_timeout+0x74>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	3301      	adds	r3, #1
 800ded2:	4a12      	ldr	r2, [pc, #72]	; (800df1c <_tx_thread_timeout+0x74>)
 800ded4:	6013      	str	r3, [r2, #0]
 800ded6:	6a3b      	ldr	r3, [r7, #32]
 800ded8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	f383 8810 	msr	PRIMASK, r3
}
 800dee0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800dee2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dee4:	f7ff fd76 	bl	800d9d4 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800dee8:	e013      	b.n	800df12 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800deea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800deee:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800def0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800def6:	61bb      	str	r3, [r7, #24]
 800def8:	6a3b      	ldr	r3, [r7, #32]
 800defa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	f383 8810 	msr	PRIMASK, r3
}
 800df02:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d003      	beq.n	800df12 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800df0a:	69fb      	ldr	r3, [r7, #28]
 800df0c:	69b9      	ldr	r1, [r7, #24]
 800df0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df10:	4798      	blx	r3
}
 800df12:	bf00      	nop
 800df14:	3728      	adds	r7, #40	; 0x28
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	2001491c 	.word	0x2001491c

0800df20 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b08a      	sub	sp, #40	; 0x28
 800df24:	af00      	add	r7, sp, #0
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	607a      	str	r2, [r7, #4]
 800df2c:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800df2e:	222c      	movs	r2, #44	; 0x2c
 800df30:	2100      	movs	r1, #0
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f001 f9ea 	bl	800f30c <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	68ba      	ldr	r2, [r7, #8]
 800df3c:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df42:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df48:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	687a      	ldr	r2, [r7, #4]
 800df4e:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	683a      	ldr	r2, [r7, #0]
 800df54:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800df56:	f3ef 8310 	mrs	r3, PRIMASK
 800df5a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800df5c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800df5e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800df60:	b672      	cpsid	i
    return(int_posture);
 800df62:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800df64:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	4a1c      	ldr	r2, [pc, #112]	; (800dfdc <_tx_timer_create+0xbc>)
 800df6a:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800df6c:	4b1c      	ldr	r3, [pc, #112]	; (800dfe0 <_tx_timer_create+0xc0>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d109      	bne.n	800df88 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800df74:	4a1b      	ldr	r2, [pc, #108]	; (800dfe4 <_tx_timer_create+0xc4>)
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	68fa      	ldr	r2, [r7, #12]
 800df7e:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	68fa      	ldr	r2, [r7, #12]
 800df84:	629a      	str	r2, [r3, #40]	; 0x28
 800df86:	e011      	b.n	800dfac <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800df88:	4b16      	ldr	r3, [pc, #88]	; (800dfe4 <_tx_timer_create+0xc4>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800df8e:	6a3b      	ldr	r3, [r7, #32]
 800df90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df92:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800df94:	6a3b      	ldr	r3, [r7, #32]
 800df96:	68fa      	ldr	r2, [r7, #12]
 800df98:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	69fa      	ldr	r2, [r7, #28]
 800dfa4:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6a3a      	ldr	r2, [r7, #32]
 800dfaa:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800dfac:	4b0c      	ldr	r3, [pc, #48]	; (800dfe0 <_tx_timer_create+0xc0>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	4a0b      	ldr	r2, [pc, #44]	; (800dfe0 <_tx_timer_create+0xc0>)
 800dfb4:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800dfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d104      	bne.n	800dfc6 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	3308      	adds	r3, #8
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f000 f8af 	bl	800e124 <_tx_timer_system_activate>
 800dfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	f383 8810 	msr	PRIMASK, r3
}
 800dfd0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800dfd2:	2300      	movs	r3, #0
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3728      	adds	r7, #40	; 0x28
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	4154494d 	.word	0x4154494d
 800dfe0:	200149c4 	.word	0x200149c4
 800dfe4:	200149c0 	.word	0x200149c0

0800dfe8 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dfee:	f3ef 8310 	mrs	r3, PRIMASK
 800dff2:	607b      	str	r3, [r7, #4]
    return(posture);
 800dff4:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800dff6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dff8:	b672      	cpsid	i
    return(int_posture);
 800dffa:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800dffc:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800dffe:	4b09      	ldr	r3, [pc, #36]	; (800e024 <_tx_timer_expiration_process+0x3c>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	3301      	adds	r3, #1
 800e004:	4a07      	ldr	r2, [pc, #28]	; (800e024 <_tx_timer_expiration_process+0x3c>)
 800e006:	6013      	str	r3, [r2, #0]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	f383 8810 	msr	PRIMASK, r3
}
 800e012:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800e014:	4804      	ldr	r0, [pc, #16]	; (800e028 <_tx_timer_expiration_process+0x40>)
 800e016:	f7ff fcdd 	bl	800d9d4 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800e01a:	bf00      	nop
 800e01c:	3710      	adds	r7, #16
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop
 800e024:	2001491c 	.word	0x2001491c
 800e028:	200149cc 	.word	0x200149cc

0800e02c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800e02c:	b590      	push	{r4, r7, lr}
 800e02e:	b089      	sub	sp, #36	; 0x24
 800e030:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800e032:	4b28      	ldr	r3, [pc, #160]	; (800e0d4 <_tx_timer_initialize+0xa8>)
 800e034:	2200      	movs	r2, #0
 800e036:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800e038:	4b27      	ldr	r3, [pc, #156]	; (800e0d8 <_tx_timer_initialize+0xac>)
 800e03a:	2200      	movs	r2, #0
 800e03c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800e03e:	4b27      	ldr	r3, [pc, #156]	; (800e0dc <_tx_timer_initialize+0xb0>)
 800e040:	2200      	movs	r2, #0
 800e042:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800e044:	4b26      	ldr	r3, [pc, #152]	; (800e0e0 <_tx_timer_initialize+0xb4>)
 800e046:	2200      	movs	r2, #0
 800e048:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800e04a:	4b26      	ldr	r3, [pc, #152]	; (800e0e4 <_tx_timer_initialize+0xb8>)
 800e04c:	2200      	movs	r2, #0
 800e04e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800e050:	2280      	movs	r2, #128	; 0x80
 800e052:	2100      	movs	r1, #0
 800e054:	4824      	ldr	r0, [pc, #144]	; (800e0e8 <_tx_timer_initialize+0xbc>)
 800e056:	f001 f959 	bl	800f30c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800e05a:	4b24      	ldr	r3, [pc, #144]	; (800e0ec <_tx_timer_initialize+0xc0>)
 800e05c:	4a22      	ldr	r2, [pc, #136]	; (800e0e8 <_tx_timer_initialize+0xbc>)
 800e05e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800e060:	4b23      	ldr	r3, [pc, #140]	; (800e0f0 <_tx_timer_initialize+0xc4>)
 800e062:	4a21      	ldr	r2, [pc, #132]	; (800e0e8 <_tx_timer_initialize+0xbc>)
 800e064:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800e066:	4b23      	ldr	r3, [pc, #140]	; (800e0f4 <_tx_timer_initialize+0xc8>)
 800e068:	4a23      	ldr	r2, [pc, #140]	; (800e0f8 <_tx_timer_initialize+0xcc>)
 800e06a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800e06c:	4b21      	ldr	r3, [pc, #132]	; (800e0f4 <_tx_timer_initialize+0xc8>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	3304      	adds	r3, #4
 800e072:	4a20      	ldr	r2, [pc, #128]	; (800e0f4 <_tx_timer_initialize+0xc8>)
 800e074:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800e076:	4b21      	ldr	r3, [pc, #132]	; (800e0fc <_tx_timer_initialize+0xd0>)
 800e078:	4a21      	ldr	r2, [pc, #132]	; (800e100 <_tx_timer_initialize+0xd4>)
 800e07a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800e07c:	4b21      	ldr	r3, [pc, #132]	; (800e104 <_tx_timer_initialize+0xd8>)
 800e07e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e082:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800e084:	4b20      	ldr	r3, [pc, #128]	; (800e108 <_tx_timer_initialize+0xdc>)
 800e086:	2200      	movs	r2, #0
 800e088:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800e08a:	4b1c      	ldr	r3, [pc, #112]	; (800e0fc <_tx_timer_initialize+0xd0>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4a1d      	ldr	r2, [pc, #116]	; (800e104 <_tx_timer_initialize+0xd8>)
 800e090:	6812      	ldr	r2, [r2, #0]
 800e092:	491d      	ldr	r1, [pc, #116]	; (800e108 <_tx_timer_initialize+0xdc>)
 800e094:	6809      	ldr	r1, [r1, #0]
 800e096:	481c      	ldr	r0, [pc, #112]	; (800e108 <_tx_timer_initialize+0xdc>)
 800e098:	6800      	ldr	r0, [r0, #0]
 800e09a:	2400      	movs	r4, #0
 800e09c:	9405      	str	r4, [sp, #20]
 800e09e:	2400      	movs	r4, #0
 800e0a0:	9404      	str	r4, [sp, #16]
 800e0a2:	9003      	str	r0, [sp, #12]
 800e0a4:	9102      	str	r1, [sp, #8]
 800e0a6:	9201      	str	r2, [sp, #4]
 800e0a8:	9300      	str	r3, [sp, #0]
 800e0aa:	4b18      	ldr	r3, [pc, #96]	; (800e10c <_tx_timer_initialize+0xe0>)
 800e0ac:	4a18      	ldr	r2, [pc, #96]	; (800e110 <_tx_timer_initialize+0xe4>)
 800e0ae:	4919      	ldr	r1, [pc, #100]	; (800e114 <_tx_timer_initialize+0xe8>)
 800e0b0:	4819      	ldr	r0, [pc, #100]	; (800e118 <_tx_timer_initialize+0xec>)
 800e0b2:	f7ff f8ff 	bl	800d2b4 <_tx_thread_create>
 800e0b6:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d1e5      	bne.n	800e08a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800e0be:	4b17      	ldr	r3, [pc, #92]	; (800e11c <_tx_timer_initialize+0xf0>)
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800e0c4:	4b16      	ldr	r3, [pc, #88]	; (800e120 <_tx_timer_initialize+0xf4>)
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800e0ca:	bf00      	nop
 800e0cc:	370c      	adds	r7, #12
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd90      	pop	{r4, r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	20014928 	.word	0x20014928
 800e0d8:	20014e88 	.word	0x20014e88
 800e0dc:	2001492c 	.word	0x2001492c
 800e0e0:	200149bc 	.word	0x200149bc
 800e0e4:	200149c8 	.word	0x200149c8
 800e0e8:	20014930 	.word	0x20014930
 800e0ec:	200149b0 	.word	0x200149b0
 800e0f0:	200149b8 	.word	0x200149b8
 800e0f4:	200149b4 	.word	0x200149b4
 800e0f8:	200149ac 	.word	0x200149ac
 800e0fc:	20014a7c 	.word	0x20014a7c
 800e100:	20014a88 	.word	0x20014a88
 800e104:	20014a80 	.word	0x20014a80
 800e108:	20014a84 	.word	0x20014a84
 800e10c:	4154494d 	.word	0x4154494d
 800e110:	0800e259 	.word	0x0800e259
 800e114:	0800ffb8 	.word	0x0800ffb8
 800e118:	200149cc 	.word	0x200149cc
 800e11c:	200149c0 	.word	0x200149c0
 800e120:	200149c4 	.word	0x200149c4

0800e124 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800e124:	b480      	push	{r7}
 800e126:	b089      	sub	sp, #36	; 0x24
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d04a      	beq.n	800e1ce <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e13e:	d046      	beq.n	800e1ce <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	699b      	ldr	r3, [r3, #24]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d142      	bne.n	800e1ce <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	2b20      	cmp	r3, #32
 800e14c:	d902      	bls.n	800e154 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800e14e:	231f      	movs	r3, #31
 800e150:	61bb      	str	r3, [r7, #24]
 800e152:	e002      	b.n	800e15a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	3b01      	subs	r3, #1
 800e158:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800e15a:	4b20      	ldr	r3, [pc, #128]	; (800e1dc <_tx_timer_system_activate+0xb8>)
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	69bb      	ldr	r3, [r7, #24]
 800e160:	009b      	lsls	r3, r3, #2
 800e162:	4413      	add	r3, r2
 800e164:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800e166:	4b1e      	ldr	r3, [pc, #120]	; (800e1e0 <_tx_timer_system_activate+0xbc>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	69fa      	ldr	r2, [r7, #28]
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d30b      	bcc.n	800e188 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800e170:	4b1b      	ldr	r3, [pc, #108]	; (800e1e0 <_tx_timer_system_activate+0xbc>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	69fa      	ldr	r2, [r7, #28]
 800e176:	1ad3      	subs	r3, r2, r3
 800e178:	109b      	asrs	r3, r3, #2
 800e17a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800e17c:	4b19      	ldr	r3, [pc, #100]	; (800e1e4 <_tx_timer_system_activate+0xc0>)
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	009b      	lsls	r3, r3, #2
 800e184:	4413      	add	r3, r2
 800e186:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d109      	bne.n	800e1a4 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	687a      	ldr	r2, [r7, #4]
 800e194:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	e011      	b.n	800e1c8 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	695b      	ldr	r3, [r3, #20]
 800e1ae:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	68fa      	ldr	r2, [r7, #12]
 800e1c0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	68ba      	ldr	r2, [r7, #8]
 800e1c6:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	69fa      	ldr	r2, [r7, #28]
 800e1cc:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800e1ce:	bf00      	nop
 800e1d0:	3724      	adds	r7, #36	; 0x24
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr
 800e1da:	bf00      	nop
 800e1dc:	200149b8 	.word	0x200149b8
 800e1e0:	200149b4 	.word	0x200149b4
 800e1e4:	200149b0 	.word	0x200149b0

0800e1e8 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b087      	sub	sp, #28
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	699b      	ldr	r3, [r3, #24]
 800e1f4:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d026      	beq.n	800e24a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	691b      	ldr	r3, [r3, #16]
 800e200:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	429a      	cmp	r2, r3
 800e208:	d108      	bne.n	800e21c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	429a      	cmp	r2, r3
 800e212:	d117      	bne.n	800e244 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	2200      	movs	r2, #0
 800e218:	601a      	str	r2, [r3, #0]
 800e21a:	e013      	b.n	800e244 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	695b      	ldr	r3, [r3, #20]
 800e220:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	68fa      	ldr	r2, [r7, #12]
 800e226:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	693a      	ldr	r2, [r7, #16]
 800e22c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	687a      	ldr	r2, [r7, #4]
 800e234:	429a      	cmp	r2, r3
 800e236:	d105      	bne.n	800e244 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	697a      	ldr	r2, [r7, #20]
 800e23c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	693a      	ldr	r2, [r7, #16]
 800e242:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2200      	movs	r2, #0
 800e248:	619a      	str	r2, [r3, #24]
    }
}
 800e24a:	bf00      	nop
 800e24c:	371c      	adds	r7, #28
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr
	...

0800e258 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b098      	sub	sp, #96	; 0x60
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800e260:	2300      	movs	r3, #0
 800e262:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	4a73      	ldr	r2, [pc, #460]	; (800e434 <_tx_timer_thread_entry+0x1dc>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	f040 80de 	bne.w	800e42a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e26e:	f3ef 8310 	mrs	r3, PRIMASK
 800e272:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800e274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800e276:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800e278:	b672      	cpsid	i
    return(int_posture);
 800e27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800e27c:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800e27e:	4b6e      	ldr	r3, [pc, #440]	; (800e438 <_tx_timer_thread_entry+0x1e0>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d003      	beq.n	800e294 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f107 020c 	add.w	r2, r7, #12
 800e292:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800e294:	4b68      	ldr	r3, [pc, #416]	; (800e438 <_tx_timer_thread_entry+0x1e0>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2200      	movs	r2, #0
 800e29a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800e29c:	4b66      	ldr	r3, [pc, #408]	; (800e438 <_tx_timer_thread_entry+0x1e0>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	3304      	adds	r3, #4
 800e2a2:	4a65      	ldr	r2, [pc, #404]	; (800e438 <_tx_timer_thread_entry+0x1e0>)
 800e2a4:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800e2a6:	4b64      	ldr	r3, [pc, #400]	; (800e438 <_tx_timer_thread_entry+0x1e0>)
 800e2a8:	681a      	ldr	r2, [r3, #0]
 800e2aa:	4b64      	ldr	r3, [pc, #400]	; (800e43c <_tx_timer_thread_entry+0x1e4>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d103      	bne.n	800e2ba <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800e2b2:	4b63      	ldr	r3, [pc, #396]	; (800e440 <_tx_timer_thread_entry+0x1e8>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	4a60      	ldr	r2, [pc, #384]	; (800e438 <_tx_timer_thread_entry+0x1e0>)
 800e2b8:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800e2ba:	4b62      	ldr	r3, [pc, #392]	; (800e444 <_tx_timer_thread_entry+0x1ec>)
 800e2bc:	2200      	movs	r2, #0
 800e2be:	601a      	str	r2, [r3, #0]
 800e2c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2c2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c6:	f383 8810 	msr	PRIMASK, r3
}
 800e2ca:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e2cc:	f3ef 8310 	mrs	r3, PRIMASK
 800e2d0:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800e2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800e2d4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800e2d6:	b672      	cpsid	i
    return(int_posture);
 800e2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800e2da:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800e2dc:	e07f      	b.n	800e3de <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	691b      	ldr	r3, [r3, #16]
 800e2e6:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800e2ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e2ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d102      	bne.n	800e2fa <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	60fb      	str	r3, [r7, #12]
 800e2f8:	e00e      	b.n	800e318 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800e2fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2fc:	695b      	ldr	r3, [r3, #20]
 800e2fe:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800e300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e302:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e304:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800e306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e30a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800e30c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e30e:	f107 020c 	add.w	r2, r7, #12
 800e312:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800e314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e316:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	2b20      	cmp	r3, #32
 800e31e:	d911      	bls.n	800e344 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800e320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800e328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e32a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800e32c:	2300      	movs	r3, #0
 800e32e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800e330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e332:	f107 0208 	add.w	r2, r7, #8
 800e336:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800e338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e33a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e33c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800e33e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e340:	60bb      	str	r3, [r7, #8]
 800e342:	e01a      	b.n	800e37a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800e344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800e34a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e34c:	68db      	ldr	r3, [r3, #12]
 800e34e:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800e350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e352:	685a      	ldr	r2, [r3, #4]
 800e354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e356:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800e358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d009      	beq.n	800e374 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800e360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e362:	f107 0208 	add.w	r2, r7, #8
 800e366:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800e368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e36a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e36c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800e36e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e370:	60bb      	str	r3, [r7, #8]
 800e372:	e002      	b.n	800e37a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800e374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e376:	2200      	movs	r2, #0
 800e378:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800e37a:	4a33      	ldr	r2, [pc, #204]	; (800e448 <_tx_timer_thread_entry+0x1f0>)
 800e37c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e37e:	6013      	str	r3, [r2, #0]
 800e380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e382:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e386:	f383 8810 	msr	PRIMASK, r3
}
 800e38a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800e38c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d002      	beq.n	800e398 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800e392:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e394:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e396:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e398:	f3ef 8310 	mrs	r3, PRIMASK
 800e39c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e3a0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e3a2:	b672      	cpsid	i
    return(int_posture);
 800e3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800e3a6:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800e3a8:	4b27      	ldr	r3, [pc, #156]	; (800e448 <_tx_timer_thread_entry+0x1f0>)
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d105      	bne.n	800e3c2 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800e3b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800e3bc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e3be:	f7ff feb1 	bl	800e124 <_tx_timer_system_activate>
 800e3c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e3c4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e3c6:	69bb      	ldr	r3, [r7, #24]
 800e3c8:	f383 8810 	msr	PRIMASK, r3
}
 800e3cc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e3ce:	f3ef 8310 	mrs	r3, PRIMASK
 800e3d2:	623b      	str	r3, [r7, #32]
    return(posture);
 800e3d4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e3d6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e3d8:	b672      	cpsid	i
    return(int_posture);
 800e3da:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800e3dc:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f47f af7c 	bne.w	800e2de <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800e3e6:	4b17      	ldr	r3, [pc, #92]	; (800e444 <_tx_timer_thread_entry+0x1ec>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d116      	bne.n	800e41c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800e3ee:	4b17      	ldr	r3, [pc, #92]	; (800e44c <_tx_timer_thread_entry+0x1f4>)
 800e3f0:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800e3f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3f4:	2203      	movs	r2, #3
 800e3f6:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e3f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800e3fe:	4b14      	ldr	r3, [pc, #80]	; (800e450 <_tx_timer_thread_entry+0x1f8>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	3301      	adds	r3, #1
 800e404:	4a12      	ldr	r2, [pc, #72]	; (800e450 <_tx_timer_thread_entry+0x1f8>)
 800e406:	6013      	str	r3, [r2, #0]
 800e408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e40a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	f383 8810 	msr	PRIMASK, r3
}
 800e412:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800e414:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e416:	f7ff fbdd 	bl	800dbd4 <_tx_thread_system_suspend>
 800e41a:	e728      	b.n	800e26e <_tx_timer_thread_entry+0x16>
 800e41c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e41e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	f383 8810 	msr	PRIMASK, r3
}
 800e426:	bf00      	nop
            TX_DISABLE
 800e428:	e721      	b.n	800e26e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800e42a:	bf00      	nop
 800e42c:	3760      	adds	r7, #96	; 0x60
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	4154494d 	.word	0x4154494d
 800e438:	200149b8 	.word	0x200149b8
 800e43c:	200149b4 	.word	0x200149b4
 800e440:	200149b0 	.word	0x200149b0
 800e444:	200149bc 	.word	0x200149bc
 800e448:	200149c8 	.word	0x200149c8
 800e44c:	200149cc 	.word	0x200149cc
 800e450:	2001491c 	.word	0x2001491c

0800e454 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b08a      	sub	sp, #40	; 0x28
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	607a      	str	r2, [r7, #4]
 800e460:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e462:	2300      	movs	r3, #0
 800e464:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d102      	bne.n	800e472 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e46c:	2302      	movs	r3, #2
 800e46e:	627b      	str	r3, [r7, #36]	; 0x24
 800e470:	e029      	b.n	800e4c6 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	4a2d      	ldr	r2, [pc, #180]	; (800e52c <_txe_byte_allocate+0xd8>)
 800e478:	4293      	cmp	r3, r2
 800e47a:	d002      	beq.n	800e482 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e47c:	2302      	movs	r3, #2
 800e47e:	627b      	str	r3, [r7, #36]	; 0x24
 800e480:	e021      	b.n	800e4c6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d102      	bne.n	800e48e <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e488:	2303      	movs	r3, #3
 800e48a:	627b      	str	r3, [r7, #36]	; 0x24
 800e48c:	e01b      	b.n	800e4c6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d102      	bne.n	800e49a <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800e494:	2305      	movs	r3, #5
 800e496:	627b      	str	r3, [r7, #36]	; 0x24
 800e498:	e015      	b.n	800e4c6 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	69db      	ldr	r3, [r3, #28]
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d902      	bls.n	800e4aa <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800e4a4:	2305      	movs	r3, #5
 800e4a6:	627b      	str	r3, [r7, #36]	; 0x24
 800e4a8:	e00d      	b.n	800e4c6 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d00a      	beq.n	800e4c6 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e4b0:	f3ef 8305 	mrs	r3, IPSR
 800e4b4:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800e4b6:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e4b8:	4b1d      	ldr	r3, [pc, #116]	; (800e530 <_txe_byte_allocate+0xdc>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4313      	orrs	r3, r2
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d001      	beq.n	800e4c6 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e4c2:	2304      	movs	r3, #4
 800e4c4:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800e4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d108      	bne.n	800e4de <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800e4cc:	4b19      	ldr	r3, [pc, #100]	; (800e534 <_txe_byte_allocate+0xe0>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800e4d2:	6a3b      	ldr	r3, [r7, #32]
 800e4d4:	4a18      	ldr	r2, [pc, #96]	; (800e538 <_txe_byte_allocate+0xe4>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d101      	bne.n	800e4de <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800e4da:	2313      	movs	r3, #19
 800e4dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800e4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d114      	bne.n	800e50e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e4e4:	f3ef 8305 	mrs	r3, IPSR
 800e4e8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e4ea:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e4ec:	4b10      	ldr	r3, [pc, #64]	; (800e530 <_txe_byte_allocate+0xdc>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d00b      	beq.n	800e50e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e4f6:	f3ef 8305 	mrs	r3, IPSR
 800e4fa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e4fc:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e4fe:	4b0c      	ldr	r3, [pc, #48]	; (800e530 <_txe_byte_allocate+0xdc>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4313      	orrs	r3, r2
 800e504:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e508:	d201      	bcs.n	800e50e <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e50a:	2313      	movs	r3, #19
 800e50c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e510:	2b00      	cmp	r3, #0
 800e512:	d106      	bne.n	800e522 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	68b9      	ldr	r1, [r7, #8]
 800e51a:	68f8      	ldr	r0, [r7, #12]
 800e51c:	f7fd f9f0 	bl	800b900 <_tx_byte_allocate>
 800e520:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800e522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e524:	4618      	mov	r0, r3
 800e526:	3728      	adds	r7, #40	; 0x28
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	42595445 	.word	0x42595445
 800e530:	20000088 	.word	0x20000088
 800e534:	20014884 	.word	0x20014884
 800e538:	200149cc 	.word	0x200149cc

0800e53c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b092      	sub	sp, #72	; 0x48
 800e540:	af00      	add	r7, sp, #0
 800e542:	60f8      	str	r0, [r7, #12]
 800e544:	60b9      	str	r1, [r7, #8]
 800e546:	607a      	str	r2, [r7, #4]
 800e548:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e54a:	2300      	movs	r3, #0
 800e54c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d102      	bne.n	800e55a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e554:	2302      	movs	r3, #2
 800e556:	647b      	str	r3, [r7, #68]	; 0x44
 800e558:	e075      	b.n	800e646 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800e55a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e55c:	2b34      	cmp	r3, #52	; 0x34
 800e55e:	d002      	beq.n	800e566 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e560:	2302      	movs	r3, #2
 800e562:	647b      	str	r3, [r7, #68]	; 0x44
 800e564:	e06f      	b.n	800e646 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e566:	f3ef 8310 	mrs	r3, PRIMASK
 800e56a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e56e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e570:	b672      	cpsid	i
    return(int_posture);
 800e572:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e574:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e576:	4b3b      	ldr	r3, [pc, #236]	; (800e664 <_txe_byte_pool_create+0x128>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	3301      	adds	r3, #1
 800e57c:	4a39      	ldr	r2, [pc, #228]	; (800e664 <_txe_byte_pool_create+0x128>)
 800e57e:	6013      	str	r3, [r2, #0]
 800e580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e582:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e586:	f383 8810 	msr	PRIMASK, r3
}
 800e58a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800e58c:	4b36      	ldr	r3, [pc, #216]	; (800e668 <_txe_byte_pool_create+0x12c>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e592:	2300      	movs	r3, #0
 800e594:	643b      	str	r3, [r7, #64]	; 0x40
 800e596:	e009      	b.n	800e5ac <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800e598:	68fa      	ldr	r2, [r7, #12]
 800e59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d00b      	beq.n	800e5b8 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800e5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e5a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5a8:	3301      	adds	r3, #1
 800e5aa:	643b      	str	r3, [r7, #64]	; 0x40
 800e5ac:	4b2f      	ldr	r3, [pc, #188]	; (800e66c <_txe_byte_pool_create+0x130>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d3f0      	bcc.n	800e598 <_txe_byte_pool_create+0x5c>
 800e5b6:	e000      	b.n	800e5ba <_txe_byte_pool_create+0x7e>
                break;
 800e5b8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e5ba:	f3ef 8310 	mrs	r3, PRIMASK
 800e5be:	623b      	str	r3, [r7, #32]
    return(posture);
 800e5c0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e5c2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e5c4:	b672      	cpsid	i
    return(int_posture);
 800e5c6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e5c8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e5ca:	4b26      	ldr	r3, [pc, #152]	; (800e664 <_txe_byte_pool_create+0x128>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	3b01      	subs	r3, #1
 800e5d0:	4a24      	ldr	r2, [pc, #144]	; (800e664 <_txe_byte_pool_create+0x128>)
 800e5d2:	6013      	str	r3, [r2, #0]
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5da:	f383 8810 	msr	PRIMASK, r3
}
 800e5de:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e5e0:	f7ff f9be 	bl	800d960 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800e5e4:	68fa      	ldr	r2, [r7, #12]
 800e5e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d102      	bne.n	800e5f2 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800e5ec:	2302      	movs	r3, #2
 800e5ee:	647b      	str	r3, [r7, #68]	; 0x44
 800e5f0:	e029      	b.n	800e646 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d102      	bne.n	800e5fe <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800e5f8:	2303      	movs	r3, #3
 800e5fa:	647b      	str	r3, [r7, #68]	; 0x44
 800e5fc:	e023      	b.n	800e646 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	2b63      	cmp	r3, #99	; 0x63
 800e602:	d802      	bhi.n	800e60a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800e604:	2305      	movs	r3, #5
 800e606:	647b      	str	r3, [r7, #68]	; 0x44
 800e608:	e01d      	b.n	800e646 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e60a:	4b19      	ldr	r3, [pc, #100]	; (800e670 <_txe_byte_pool_create+0x134>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e612:	4a18      	ldr	r2, [pc, #96]	; (800e674 <_txe_byte_pool_create+0x138>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d101      	bne.n	800e61c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e618:	2313      	movs	r3, #19
 800e61a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e61c:	f3ef 8305 	mrs	r3, IPSR
 800e620:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e622:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e624:	4b14      	ldr	r3, [pc, #80]	; (800e678 <_txe_byte_pool_create+0x13c>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4313      	orrs	r3, r2
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d00b      	beq.n	800e646 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e62e:	f3ef 8305 	mrs	r3, IPSR
 800e632:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e634:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e636:	4b10      	ldr	r3, [pc, #64]	; (800e678 <_txe_byte_pool_create+0x13c>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4313      	orrs	r3, r2
 800e63c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e640:	d201      	bcs.n	800e646 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e642:	2313      	movs	r3, #19
 800e644:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d106      	bne.n	800e65a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	687a      	ldr	r2, [r7, #4]
 800e650:	68b9      	ldr	r1, [r7, #8]
 800e652:	68f8      	ldr	r0, [r7, #12]
 800e654:	f7fd fa96 	bl	800bb84 <_tx_byte_pool_create>
 800e658:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e65a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3748      	adds	r7, #72	; 0x48
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}
 800e664:	2001491c 	.word	0x2001491c
 800e668:	20014874 	.word	0x20014874
 800e66c:	20014878 	.word	0x20014878
 800e670:	20014884 	.word	0x20014884
 800e674:	200149cc 	.word	0x200149cc
 800e678:	20000088 	.word	0x20000088

0800e67c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b09a      	sub	sp, #104	; 0x68
 800e680:	af06      	add	r7, sp, #24
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	607a      	str	r2, [r7, #4]
 800e688:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e68a:	2300      	movs	r3, #0
 800e68c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d102      	bne.n	800e69a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e694:	230e      	movs	r3, #14
 800e696:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e698:	e0bb      	b.n	800e812 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800e69a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e69c:	2bb0      	cmp	r3, #176	; 0xb0
 800e69e:	d002      	beq.n	800e6a6 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e6a0:	230e      	movs	r3, #14
 800e6a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6a4:	e0b5      	b.n	800e812 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e6a6:	f3ef 8310 	mrs	r3, PRIMASK
 800e6aa:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e6ae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e6b0:	b672      	cpsid	i
    return(int_posture);
 800e6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e6b4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e6b6:	4b64      	ldr	r3, [pc, #400]	; (800e848 <_txe_thread_create+0x1cc>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	4a62      	ldr	r2, [pc, #392]	; (800e848 <_txe_thread_create+0x1cc>)
 800e6be:	6013      	str	r3, [r2, #0]
 800e6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c6:	f383 8810 	msr	PRIMASK, r3
}
 800e6ca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800e6d0:	4b5e      	ldr	r3, [pc, #376]	; (800e84c <_txe_thread_create+0x1d0>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800e6d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6d8:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800e6da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6dc:	3b01      	subs	r3, #1
 800e6de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6e0:	4413      	add	r3, r2
 800e6e2:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800e6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e6:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	647b      	str	r3, [r7, #68]	; 0x44
 800e6ec:	e02b      	b.n	800e746 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800e6ee:	68fa      	ldr	r2, [r7, #12]
 800e6f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d101      	bne.n	800e6fa <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800e6fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6fc:	2b01      	cmp	r3, #1
 800e6fe:	d028      	beq.n	800e752 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800e700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e702:	68db      	ldr	r3, [r3, #12]
 800e704:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e706:	429a      	cmp	r2, r3
 800e708:	d308      	bcc.n	800e71c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800e70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e70c:	691b      	ldr	r3, [r3, #16]
 800e70e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e710:	429a      	cmp	r2, r3
 800e712:	d203      	bcs.n	800e71c <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e714:	2300      	movs	r3, #0
 800e716:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e718:	2301      	movs	r3, #1
 800e71a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800e71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e722:	429a      	cmp	r2, r3
 800e724:	d308      	bcc.n	800e738 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800e726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e728:	691b      	ldr	r3, [r3, #16]
 800e72a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d203      	bcs.n	800e738 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e730:	2300      	movs	r3, #0
 800e732:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e734:	2301      	movs	r3, #1
 800e736:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800e738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e73a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e73e:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e742:	3301      	adds	r3, #1
 800e744:	647b      	str	r3, [r7, #68]	; 0x44
 800e746:	4b42      	ldr	r3, [pc, #264]	; (800e850 <_txe_thread_create+0x1d4>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d3ce      	bcc.n	800e6ee <_txe_thread_create+0x72>
 800e750:	e000      	b.n	800e754 <_txe_thread_create+0xd8>
                break;
 800e752:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e754:	f3ef 8310 	mrs	r3, PRIMASK
 800e758:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e75a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e75c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e75e:	b672      	cpsid	i
    return(int_posture);
 800e760:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e762:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e764:	4b38      	ldr	r3, [pc, #224]	; (800e848 <_txe_thread_create+0x1cc>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	3b01      	subs	r3, #1
 800e76a:	4a37      	ldr	r2, [pc, #220]	; (800e848 <_txe_thread_create+0x1cc>)
 800e76c:	6013      	str	r3, [r2, #0]
 800e76e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e770:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e772:	6a3b      	ldr	r3, [r7, #32]
 800e774:	f383 8810 	msr	PRIMASK, r3
}
 800e778:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e77a:	f7ff f8f1 	bl	800d960 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800e77e:	68fa      	ldr	r2, [r7, #12]
 800e780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e782:	429a      	cmp	r2, r3
 800e784:	d102      	bne.n	800e78c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800e786:	230e      	movs	r3, #14
 800e788:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e78a:	e042      	b.n	800e812 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800e78c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d102      	bne.n	800e798 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e792:	2303      	movs	r3, #3
 800e794:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e796:	e03c      	b.n	800e812 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d102      	bne.n	800e7a4 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e79e:	2303      	movs	r3, #3
 800e7a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7a2:	e036      	b.n	800e812 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800e7a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7a6:	2bc7      	cmp	r3, #199	; 0xc7
 800e7a8:	d802      	bhi.n	800e7b0 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800e7aa:	2305      	movs	r3, #5
 800e7ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7ae:	e030      	b.n	800e812 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800e7b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7b2:	2b1f      	cmp	r3, #31
 800e7b4:	d902      	bls.n	800e7bc <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800e7b6:	230f      	movs	r3, #15
 800e7b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7ba:	e02a      	b.n	800e812 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800e7bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e7be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d902      	bls.n	800e7ca <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800e7c4:	2318      	movs	r3, #24
 800e7c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7c8:	e023      	b.n	800e812 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800e7ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d902      	bls.n	800e7d6 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800e7d0:	2310      	movs	r3, #16
 800e7d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7d4:	e01d      	b.n	800e812 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800e7d6:	4b1f      	ldr	r3, [pc, #124]	; (800e854 <_txe_thread_create+0x1d8>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800e7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7de:	4a1e      	ldr	r2, [pc, #120]	; (800e858 <_txe_thread_create+0x1dc>)
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	d101      	bne.n	800e7e8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e7e4:	2313      	movs	r3, #19
 800e7e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e7e8:	f3ef 8305 	mrs	r3, IPSR
 800e7ec:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e7ee:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e7f0:	4b1a      	ldr	r3, [pc, #104]	; (800e85c <_txe_thread_create+0x1e0>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00b      	beq.n	800e812 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e7fa:	f3ef 8305 	mrs	r3, IPSR
 800e7fe:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e800:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e802:	4b16      	ldr	r3, [pc, #88]	; (800e85c <_txe_thread_create+0x1e0>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	4313      	orrs	r3, r2
 800e808:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e80c:	d201      	bcs.n	800e812 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e80e:	2313      	movs	r3, #19
 800e810:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e814:	2b00      	cmp	r3, #0
 800e816:	d112      	bne.n	800e83e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800e818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e81a:	9305      	str	r3, [sp, #20]
 800e81c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e81e:	9304      	str	r3, [sp, #16]
 800e820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e822:	9303      	str	r3, [sp, #12]
 800e824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e826:	9302      	str	r3, [sp, #8]
 800e828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e82a:	9301      	str	r3, [sp, #4]
 800e82c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e82e:	9300      	str	r3, [sp, #0]
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	687a      	ldr	r2, [r7, #4]
 800e834:	68b9      	ldr	r1, [r7, #8]
 800e836:	68f8      	ldr	r0, [r7, #12]
 800e838:	f7fe fd3c 	bl	800d2b4 <_tx_thread_create>
 800e83c:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800e83e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800e840:	4618      	mov	r0, r3
 800e842:	3750      	adds	r7, #80	; 0x50
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}
 800e848:	2001491c 	.word	0x2001491c
 800e84c:	2001488c 	.word	0x2001488c
 800e850:	20014890 	.word	0x20014890
 800e854:	20014884 	.word	0x20014884
 800e858:	200149cc 	.word	0x200149cc
 800e85c:	20000088 	.word	0x20000088

0800e860 <_txe_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _txe_thread_relinquish(VOID)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0

TX_THREAD   *current_thread;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800e866:	4b0a      	ldr	r3, [pc, #40]	; (800e890 <_txe_thread_relinquish+0x30>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	607b      	str	r3, [r7, #4]

    /* Make sure a thread is executing.  */
    if (current_thread != TX_NULL)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d00a      	beq.n	800e888 <_txe_thread_relinquish+0x28>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e872:	f3ef 8305 	mrs	r3, IPSR
 800e876:	603b      	str	r3, [r7, #0]
    return(ipsr_value);
 800e878:	683a      	ldr	r2, [r7, #0]
    {

        /* Now make sure the call is not from an ISR or Initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 800e87a:	4b06      	ldr	r3, [pc, #24]	; (800e894 <_txe_thread_relinquish+0x34>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	4313      	orrs	r3, r2
 800e880:	2b00      	cmp	r3, #0
 800e882:	d101      	bne.n	800e888 <_txe_thread_relinquish+0x28>
        {

            /* Okay to call the real relinquish function.  */
            _tx_thread_relinquish();
 800e884:	f7fe feda 	bl	800d63c <_tx_thread_relinquish>
        }
    }
}
 800e888:	bf00      	nop
 800e88a:	3708      	adds	r7, #8
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	20014884 	.word	0x20014884
 800e894:	20000088 	.word	0x20000088

0800e898 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b084      	sub	sp, #16
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d102      	bne.n	800e8ac <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e8a6:	230e      	movs	r3, #14
 800e8a8:	60fb      	str	r3, [r7, #12]
 800e8aa:	e00b      	b.n	800e8c4 <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4a07      	ldr	r2, [pc, #28]	; (800e8d0 <_txe_thread_resume+0x38>)
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d002      	beq.n	800e8bc <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e8b6:	230e      	movs	r3, #14
 800e8b8:	60fb      	str	r3, [r7, #12]
 800e8ba:	e003      	b.n	800e8c4 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f7fe ff23 	bl	800d708 <_tx_thread_resume>
 800e8c2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3710      	adds	r7, #16
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	54485244 	.word	0x54485244

0800e8d4 <MX_NetXDuo_Init>:
  * @brief  Application NetXDuo Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_NetXDuo_Init(VOID *memory_ptr)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b08e      	sub	sp, #56	; 0x38
 800e8d8:	af08      	add	r7, sp, #32
 800e8da:	6078      	str	r0, [r7, #4]
  UINT ret = NX_SUCCESS;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	613b      	str	r3, [r7, #16]

   /* USER CODE BEGIN App_NetXDuo_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END App_NetXDuo_MEM_POOL */
  /* USER CODE BEGIN 0 */
  printf("Nx_UDP_Echo_Server application started...\n");
 800e8e4:	487a      	ldr	r0, [pc, #488]	; (800ead0 <MX_NetXDuo_Init+0x1fc>)
 800e8e6:	f000 fc31 	bl	800f14c <puts>
  /* USER CODE END 0 */

  /* Initialize the NetXDuo system. */
  CHAR *pointer;
  nx_system_initialize();
 800e8ea:	f7fa ff9d 	bl	8009828 <_nx_system_initialize>

    /* Allocate the memory for packet_pool.  */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, NX_APP_PACKET_POOL_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800e8ee:	f107 010c 	add.w	r1, r7, #12
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	f641 722c 	movw	r2, #7980	; 0x1f2c
 800e8f8:	6938      	ldr	r0, [r7, #16]
 800e8fa:	f7ff fdab 	bl	800e454 <_txe_byte_allocate>
 800e8fe:	4603      	mov	r3, r0
 800e900:	2b00      	cmp	r3, #0
 800e902:	d001      	beq.n	800e908 <MX_NetXDuo_Init+0x34>
  {
    return TX_POOL_ERROR;
 800e904:	2302      	movs	r3, #2
 800e906:	e0df      	b.n	800eac8 <MX_NetXDuo_Init+0x1f4>
  }

  /* Create the Packet pool to be used for packet allocation,
   * If extra NX_PACKET are to be used the NX_APP_PACKET_POOL_SIZE should be increased
   */
  ret = nx_packet_pool_create(&NxAppPool, "NetXDuo App Pool", DEFAULT_PAYLOAD_SIZE, pointer, NX_APP_PACKET_POOL_SIZE);
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	223c      	movs	r2, #60	; 0x3c
 800e90c:	9201      	str	r2, [sp, #4]
 800e90e:	f641 722c 	movw	r2, #7980	; 0x1f2c
 800e912:	9200      	str	r2, [sp, #0]
 800e914:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e918:	496e      	ldr	r1, [pc, #440]	; (800ead4 <MX_NetXDuo_Init+0x200>)
 800e91a:	486f      	ldr	r0, [pc, #444]	; (800ead8 <MX_NetXDuo_Init+0x204>)
 800e91c:	f7fc fc32 	bl	800b184 <_nxe_packet_pool_create>
 800e920:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d001      	beq.n	800e92c <MX_NetXDuo_Init+0x58>
  {
    return NX_POOL_ERROR;
 800e928:	2306      	movs	r3, #6
 800e92a:	e0cd      	b.n	800eac8 <MX_NetXDuo_Init+0x1f4>
  }

    /* Allocate the memory for Ip_Instance */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, Nx_IP_INSTANCE_THREAD_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800e92c:	f107 010c 	add.w	r1, r7, #12
 800e930:	2300      	movs	r3, #0
 800e932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e936:	6938      	ldr	r0, [r7, #16]
 800e938:	f7ff fd8c 	bl	800e454 <_txe_byte_allocate>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d001      	beq.n	800e946 <MX_NetXDuo_Init+0x72>
  {
    return TX_POOL_ERROR;
 800e942:	2302      	movs	r3, #2
 800e944:	e0c0      	b.n	800eac8 <MX_NetXDuo_Init+0x1f4>
  }

   /* Create the main NX_IP instance */
  ret = nx_ip_create(&NetXDuoEthIpInstance, "NetX Ip instance", NX_APP_DEFAULT_IP_ADDRESS, NX_APP_DEFAULT_NET_MASK, &NxAppPool, nx_stm32_eth_driver,
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	f44f 62f9 	mov.w	r2, #1992	; 0x7c8
 800e94c:	9205      	str	r2, [sp, #20]
 800e94e:	220a      	movs	r2, #10
 800e950:	9204      	str	r2, [sp, #16]
 800e952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e956:	9203      	str	r2, [sp, #12]
 800e958:	9302      	str	r3, [sp, #8]
 800e95a:	4b60      	ldr	r3, [pc, #384]	; (800eadc <MX_NetXDuo_Init+0x208>)
 800e95c:	9301      	str	r3, [sp, #4]
 800e95e:	4b5e      	ldr	r3, [pc, #376]	; (800ead8 <MX_NetXDuo_Init+0x204>)
 800e960:	9300      	str	r3, [sp, #0]
 800e962:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 800e966:	4a5e      	ldr	r2, [pc, #376]	; (800eae0 <MX_NetXDuo_Init+0x20c>)
 800e968:	495e      	ldr	r1, [pc, #376]	; (800eae4 <MX_NetXDuo_Init+0x210>)
 800e96a:	485f      	ldr	r0, [pc, #380]	; (800eae8 <MX_NetXDuo_Init+0x214>)
 800e96c:	f7fc f9e8 	bl	800ad40 <_nxe_ip_create>
 800e970:	6178      	str	r0, [r7, #20]
                     pointer, Nx_IP_INSTANCE_THREAD_SIZE, NX_APP_INSTANCE_PRIORITY);

  if (ret != NX_SUCCESS)
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d001      	beq.n	800e97c <MX_NetXDuo_Init+0xa8>
  {
    return NX_NOT_SUCCESSFUL;
 800e978:	2343      	movs	r3, #67	; 0x43
 800e97a:	e0a5      	b.n	800eac8 <MX_NetXDuo_Init+0x1f4>
  }

    /* Allocate the memory for ARP */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, DEFAULT_ARP_CACHE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800e97c:	f107 010c 	add.w	r1, r7, #12
 800e980:	2300      	movs	r3, #0
 800e982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e986:	6938      	ldr	r0, [r7, #16]
 800e988:	f7ff fd64 	bl	800e454 <_txe_byte_allocate>
 800e98c:	4603      	mov	r3, r0
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d001      	beq.n	800e996 <MX_NetXDuo_Init+0xc2>
  {
    return TX_POOL_ERROR;
 800e992:	2302      	movs	r3, #2
 800e994:	e098      	b.n	800eac8 <MX_NetXDuo_Init+0x1f4>

  /* USER CODE BEGIN ARP_Protocol_Initialization */

  /* USER CODE END ARP_Protocol_Initialization */

  ret = nx_arp_enable(&NetXDuoEthIpInstance, (VOID *)pointer, DEFAULT_ARP_CACHE_SIZE);
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e99c:	4619      	mov	r1, r3
 800e99e:	4852      	ldr	r0, [pc, #328]	; (800eae8 <MX_NetXDuo_Init+0x214>)
 800e9a0:	f7fc f8fe 	bl	800aba0 <_nxe_arp_enable>
 800e9a4:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d001      	beq.n	800e9b0 <MX_NetXDuo_Init+0xdc>
  {
    return NX_NOT_SUCCESSFUL;
 800e9ac:	2343      	movs	r3, #67	; 0x43
 800e9ae:	e08b      	b.n	800eac8 <MX_NetXDuo_Init+0x1f4>

  /* USER CODE BEGIN ICMP_Protocol_Initialization */

  /* USER CODE END ICMP_Protocol_Initialization */

  ret = nx_icmp_enable(&NetXDuoEthIpInstance);
 800e9b0:	484d      	ldr	r0, [pc, #308]	; (800eae8 <MX_NetXDuo_Init+0x214>)
 800e9b2:	f7fc f941 	bl	800ac38 <_nxe_icmp_enable>
 800e9b6:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d001      	beq.n	800e9c2 <MX_NetXDuo_Init+0xee>
  {
    return NX_NOT_SUCCESSFUL;
 800e9be:	2343      	movs	r3, #67	; 0x43
 800e9c0:	e082      	b.n	800eac8 <MX_NetXDuo_Init+0x1f4>

  /* USER CODE BEGIN UDP_Protocol_Initialization */

  /* USER CODE END UDP_Protocol_Initialization */

  ret = nx_udp_enable(&NetXDuoEthIpInstance);
 800e9c2:	4849      	ldr	r0, [pc, #292]	; (800eae8 <MX_NetXDuo_Init+0x214>)
 800e9c4:	f7fc fd18 	bl	800b3f8 <_nxe_udp_enable>
 800e9c8:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d001      	beq.n	800e9d4 <MX_NetXDuo_Init+0x100>
  {
    return NX_NOT_SUCCESSFUL;
 800e9d0:	2343      	movs	r3, #67	; 0x43
 800e9d2:	e079      	b.n	800eac8 <MX_NetXDuo_Init+0x1f4>
  }

   /* Allocate the memory for main thread   */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, NX_APP_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800e9d4:	f107 010c 	add.w	r1, r7, #12
 800e9d8:	2300      	movs	r3, #0
 800e9da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e9de:	6938      	ldr	r0, [r7, #16]
 800e9e0:	f7ff fd38 	bl	800e454 <_txe_byte_allocate>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d001      	beq.n	800e9ee <MX_NetXDuo_Init+0x11a>
  {
    return TX_POOL_ERROR;
 800e9ea:	2302      	movs	r3, #2
 800e9ec:	e06c      	b.n	800eac8 <MX_NetXDuo_Init+0x1f4>
  }

  /* Create the main thread */
  ret = tx_thread_create(&NxAppThread, "NetXDuo App thread", nx_app_thread_entry , 0, pointer, NX_APP_THREAD_STACK_SIZE,
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	22b0      	movs	r2, #176	; 0xb0
 800e9f2:	9206      	str	r2, [sp, #24]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	9205      	str	r2, [sp, #20]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	9204      	str	r2, [sp, #16]
 800e9fc:	220a      	movs	r2, #10
 800e9fe:	9203      	str	r2, [sp, #12]
 800ea00:	220a      	movs	r2, #10
 800ea02:	9202      	str	r2, [sp, #8]
 800ea04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea08:	9201      	str	r2, [sp, #4]
 800ea0a:	9300      	str	r3, [sp, #0]
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	4a37      	ldr	r2, [pc, #220]	; (800eaec <MX_NetXDuo_Init+0x218>)
 800ea10:	4937      	ldr	r1, [pc, #220]	; (800eaf0 <MX_NetXDuo_Init+0x21c>)
 800ea12:	4838      	ldr	r0, [pc, #224]	; (800eaf4 <MX_NetXDuo_Init+0x220>)
 800ea14:	f7ff fe32 	bl	800e67c <_txe_thread_create>
 800ea18:	6178      	str	r0, [r7, #20]
                         NX_APP_THREAD_PRIORITY, NX_APP_THREAD_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);

  if (ret != TX_SUCCESS)
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d001      	beq.n	800ea24 <MX_NetXDuo_Init+0x150>
  {
    return TX_THREAD_ERROR;
 800ea20:	230e      	movs	r3, #14
 800ea22:	e051      	b.n	800eac8 <MX_NetXDuo_Init+0x1f4>
  }

  /* USER CODE BEGIN MX_NetXDuo_Init */
  /* Allocate the app UDP thread entry pool. */
  ret = tx_byte_allocate(byte_pool, (VOID **) &pointer, 2 * DEFAULT_MEMORY_SIZE, TX_NO_WAIT);
 800ea24:	f107 010c 	add.w	r1, r7, #12
 800ea28:	2300      	movs	r3, #0
 800ea2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea2e:	6938      	ldr	r0, [r7, #16]
 800ea30:	f7ff fd10 	bl	800e454 <_txe_byte_allocate>
 800ea34:	6178      	str	r0, [r7, #20]

  if (ret != TX_SUCCESS)
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d001      	beq.n	800ea40 <MX_NetXDuo_Init+0x16c>
  {
    return TX_POOL_ERROR;
 800ea3c:	2302      	movs	r3, #2
 800ea3e:	e043      	b.n	800eac8 <MX_NetXDuo_Init+0x1f4>
  }
  /* create the UDP server thread */
  ret = tx_thread_create(&AppUDPThread, "App UDP Thread", app_UDP_thread_entry, 0, pointer, 2 * DEFAULT_MEMORY_SIZE,
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	22b0      	movs	r2, #176	; 0xb0
 800ea44:	9206      	str	r2, [sp, #24]
 800ea46:	2200      	movs	r2, #0
 800ea48:	9205      	str	r2, [sp, #20]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	9204      	str	r2, [sp, #16]
 800ea4e:	220a      	movs	r2, #10
 800ea50:	9203      	str	r2, [sp, #12]
 800ea52:	220a      	movs	r2, #10
 800ea54:	9202      	str	r2, [sp, #8]
 800ea56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea5a:	9201      	str	r2, [sp, #4]
 800ea5c:	9300      	str	r3, [sp, #0]
 800ea5e:	2300      	movs	r3, #0
 800ea60:	4a25      	ldr	r2, [pc, #148]	; (800eaf8 <MX_NetXDuo_Init+0x224>)
 800ea62:	4926      	ldr	r1, [pc, #152]	; (800eafc <MX_NetXDuo_Init+0x228>)
 800ea64:	4826      	ldr	r0, [pc, #152]	; (800eb00 <MX_NetXDuo_Init+0x22c>)
 800ea66:	f7ff fe09 	bl	800e67c <_txe_thread_create>
 800ea6a:	6178      	str	r0, [r7, #20]
	  				     DEFAULT_PRIORITY, DEFAULT_PRIORITY, TX_NO_TIME_SLICE, TX_DONT_START);

  if (ret != TX_SUCCESS)
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d001      	beq.n	800ea76 <MX_NetXDuo_Init+0x1a2>
  {
	return TX_THREAD_ERROR;
 800ea72:	230e      	movs	r3, #14
 800ea74:	e028      	b.n	800eac8 <MX_NetXDuo_Init+0x1f4>
  }

  /* Allocate the memory for Link thread   */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,2 *  DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800ea76:	f107 010c 	add.w	r1, r7, #12
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea80:	6938      	ldr	r0, [r7, #16]
 800ea82:	f7ff fce7 	bl	800e454 <_txe_byte_allocate>
 800ea86:	4603      	mov	r3, r0
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d001      	beq.n	800ea90 <MX_NetXDuo_Init+0x1bc>
  {
	return TX_POOL_ERROR;
 800ea8c:	2302      	movs	r3, #2
 800ea8e:	e01b      	b.n	800eac8 <MX_NetXDuo_Init+0x1f4>
  }

  /* create the Link thread */
  ret = tx_thread_create(&AppLinkThread, "App Link Thread", app_link_thread_entry, 0, pointer, 2 * DEFAULT_MEMORY_SIZE,
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	22b0      	movs	r2, #176	; 0xb0
 800ea94:	9206      	str	r2, [sp, #24]
 800ea96:	2201      	movs	r2, #1
 800ea98:	9205      	str	r2, [sp, #20]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	9204      	str	r2, [sp, #16]
 800ea9e:	220b      	movs	r2, #11
 800eaa0:	9203      	str	r2, [sp, #12]
 800eaa2:	220b      	movs	r2, #11
 800eaa4:	9202      	str	r2, [sp, #8]
 800eaa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eaaa:	9201      	str	r2, [sp, #4]
 800eaac:	9300      	str	r3, [sp, #0]
 800eaae:	2300      	movs	r3, #0
 800eab0:	4a14      	ldr	r2, [pc, #80]	; (800eb04 <MX_NetXDuo_Init+0x230>)
 800eab2:	4915      	ldr	r1, [pc, #84]	; (800eb08 <MX_NetXDuo_Init+0x234>)
 800eab4:	4815      	ldr	r0, [pc, #84]	; (800eb0c <MX_NetXDuo_Init+0x238>)
 800eab6:	f7ff fde1 	bl	800e67c <_txe_thread_create>
 800eaba:	6178      	str	r0, [r7, #20]
					     LINK_PRIORITY, LINK_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);

  if (ret != TX_SUCCESS)
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d001      	beq.n	800eac6 <MX_NetXDuo_Init+0x1f2>
  {
	return TX_THREAD_ERROR;
 800eac2:	230e      	movs	r3, #14
 800eac4:	e000      	b.n	800eac8 <MX_NetXDuo_Init+0x1f4>
  }

  /* USER CODE END MX_NetXDuo_Init */

  return ret;
 800eac6:	697b      	ldr	r3, [r7, #20]
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3718      	adds	r7, #24
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	0800ffcc 	.word	0x0800ffcc
 800ead4:	0800fff8 	.word	0x0800fff8
 800ead8:	2001511c 	.word	0x2001511c
 800eadc:	08004ba9 	.word	0x08004ba9
 800eae0:	c0a80101 	.word	0xc0a80101
 800eae4:	0801000c 	.word	0x0801000c
 800eae8:	20015158 	.word	0x20015158
 800eaec:	0800eb11 	.word	0x0800eb11
 800eaf0:	08010020 	.word	0x08010020
 800eaf4:	2001506c 	.word	0x2001506c
 800eaf8:	0800eb89 	.word	0x0800eb89
 800eafc:	08010034 	.word	0x08010034
 800eb00:	20014e8c 	.word	0x20014e8c
 800eb04:	0800ede5 	.word	0x0800ede5
 800eb08:	08010044 	.word	0x08010044
 800eb0c:	20014f3c 	.word	0x20014f3c

0800eb10 <nx_app_thread_entry>:
* @brief  Main thread entry.
* @param thread_input: ULONG user argument used by the thread entry
* @retval none
*/
static VOID nx_app_thread_entry (ULONG thread_input)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b086      	sub	sp, #24
 800eb14:	af02      	add	r7, sp, #8
 800eb16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Nx_App_Thread_Entry 0 */
  UINT ret = NX_SUCCESS;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	60fb      	str	r3, [r7, #12]

  /* get IP address */
  ret = nx_ip_address_get(&NetXDuoEthIpInstance, &IpAddress, &NetMask);
 800eb1c:	4a14      	ldr	r2, [pc, #80]	; (800eb70 <nx_app_thread_entry+0x60>)
 800eb1e:	4915      	ldr	r1, [pc, #84]	; (800eb74 <nx_app_thread_entry+0x64>)
 800eb20:	4815      	ldr	r0, [pc, #84]	; (800eb78 <nx_app_thread_entry+0x68>)
 800eb22:	f7fc f8c9 	bl	800acb8 <_nxe_ip_address_get>
 800eb26:	60f8      	str	r0, [r7, #12]

  /* print the IP address */
  PRINT_IP_ADDRESS(IpAddress);
 800eb28:	4b12      	ldr	r3, [pc, #72]	; (800eb74 <nx_app_thread_entry+0x64>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	0e19      	lsrs	r1, r3, #24
 800eb2e:	4b11      	ldr	r3, [pc, #68]	; (800eb74 <nx_app_thread_entry+0x64>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	0c1b      	lsrs	r3, r3, #16
 800eb34:	b2d8      	uxtb	r0, r3
 800eb36:	4b0f      	ldr	r3, [pc, #60]	; (800eb74 <nx_app_thread_entry+0x64>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	0a1b      	lsrs	r3, r3, #8
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	4a0d      	ldr	r2, [pc, #52]	; (800eb74 <nx_app_thread_entry+0x64>)
 800eb40:	6812      	ldr	r2, [r2, #0]
 800eb42:	b2d2      	uxtb	r2, r2
 800eb44:	9201      	str	r2, [sp, #4]
 800eb46:	9300      	str	r3, [sp, #0]
 800eb48:	4603      	mov	r3, r0
 800eb4a:	460a      	mov	r2, r1
 800eb4c:	490b      	ldr	r1, [pc, #44]	; (800eb7c <nx_app_thread_entry+0x6c>)
 800eb4e:	480c      	ldr	r0, [pc, #48]	; (800eb80 <nx_app_thread_entry+0x70>)
 800eb50:	f000 fa96 	bl	800f080 <iprintf>

  if (ret != TX_SUCCESS)
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d001      	beq.n	800eb5e <nx_app_thread_entry+0x4e>
  {
    Error_Handler();
 800eb5a:	f7f1 fea7 	bl	80008ac <Error_Handler>
  }

  /* Now the network is correctly initialized, start the UDP server thread */
  tx_thread_resume(&AppUDPThread);
 800eb5e:	4809      	ldr	r0, [pc, #36]	; (800eb84 <nx_app_thread_entry+0x74>)
 800eb60:	f7ff fe9a 	bl	800e898 <_txe_thread_resume>

  /* this thread is not needed any more, we relinquish it */
  tx_thread_relinquish();
 800eb64:	f7ff fe7c 	bl	800e860 <_txe_thread_relinquish>
  /* USER CODE END Nx_App_Thread_Entry 0 */

}
 800eb68:	bf00      	nop
 800eb6a:	3710      	adds	r7, #16
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	20015068 	.word	0x20015068
 800eb74:	20015064 	.word	0x20015064
 800eb78:	20015158 	.word	0x20015158
 800eb7c:	08010054 	.word	0x08010054
 800eb80:	08010060 	.word	0x08010060
 800eb84:	20014e8c 	.word	0x20014e8c

0800eb88 <app_UDP_thread_entry>:
/* USER CODE BEGIN 1 */

static VOID app_UDP_thread_entry(ULONG thread_input)
{
 800eb88:	b5b0      	push	{r4, r5, r7, lr}
 800eb8a:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 800eb8e:	af04      	add	r7, sp, #16
 800eb90:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800eb94:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800eb98:	6018      	str	r0, [r3, #0]
  UCHAR data_buffer[512];
  ULONG bytes_read;
  NX_PACKET *server_packet;
  NX_PACKET *data_packet;

  ULONG offset = 0;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
  ULONG packet_size = 512;  // Maximum packet size
 800eba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eba4:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

  /* create the UDP socket */
  ret = nx_udp_socket_create(&NetXDuoEthIpInstance, &UDPSocket, "UDP Client Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, NX_IP_TIME_TO_LIVE, QUEUE_MAX_SIZE);
 800eba8:	2378      	movs	r3, #120	; 0x78
 800ebaa:	9303      	str	r3, [sp, #12]
 800ebac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ebb0:	9302      	str	r3, [sp, #8]
 800ebb2:	2380      	movs	r3, #128	; 0x80
 800ebb4:	9301      	str	r3, [sp, #4]
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	9300      	str	r3, [sp, #0]
 800ebba:	2300      	movs	r3, #0
 800ebbc:	4a7f      	ldr	r2, [pc, #508]	; (800edbc <app_UDP_thread_entry+0x234>)
 800ebbe:	4980      	ldr	r1, [pc, #512]	; (800edc0 <app_UDP_thread_entry+0x238>)
 800ebc0:	4880      	ldr	r0, [pc, #512]	; (800edc4 <app_UDP_thread_entry+0x23c>)
 800ebc2:	f7fc fc97 	bl	800b4f4 <_nxe_udp_socket_create>
 800ebc6:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
  if (ret != NX_SUCCESS)
 800ebca:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d001      	beq.n	800ebd6 <app_UDP_thread_entry+0x4e>
  {
    Error_Handler();
 800ebd2:	f7f1 fe6b 	bl	80008ac <Error_Handler>
  }

  /* bind UDP socket to the DEFAULT PORT */
  ret = nx_udp_socket_bind(&UDPSocket, DEFAULT_PORT, TX_WAIT_FOREVER);
 800ebd6:	f04f 32ff 	mov.w	r2, #4294967295
 800ebda:	f241 7170 	movw	r1, #6000	; 0x1770
 800ebde:	4878      	ldr	r0, [pc, #480]	; (800edc0 <app_UDP_thread_entry+0x238>)
 800ebe0:	f7fc fc42 	bl	800b468 <_nxe_udp_socket_bind>
 800ebe4:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
  if (ret != NX_SUCCESS)
 800ebe8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	f000 80b3 	beq.w	800ed58 <app_UDP_thread_entry+0x1d0>
  {
    Error_Handler();
 800ebf2:	f7f1 fe5b 	bl	80008ac <Error_Handler>
  }

  while (offset < MEMORY_SIZE)
 800ebf6:	e0af      	b.n	800ed58 <app_UDP_thread_entry+0x1d0>
  {
    TX_MEMSET(data_buffer, '\0', sizeof(data_buffer));
 800ebf8:	f107 0320 	add.w	r3, r7, #32
 800ebfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec00:	2100      	movs	r1, #0
 800ec02:	4618      	mov	r0, r3
 800ec04:	f000 fb82 	bl	800f30c <memset>

    /* create the packet to send over the UDP socket */
    ret = nx_packet_allocate(&NxAppPool, &data_packet, NX_UDP_PACKET, TX_WAIT_FOREVER);
 800ec08:	f107 0114 	add.w	r1, r7, #20
 800ec0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec10:	222c      	movs	r2, #44	; 0x2c
 800ec12:	486d      	ldr	r0, [pc, #436]	; (800edc8 <app_UDP_thread_entry+0x240>)
 800ec14:	f7fc f9fa 	bl	800b00c <_nxe_packet_allocate>
 800ec18:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
    if (ret != NX_SUCCESS)
 800ec1c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d001      	beq.n	800ec28 <app_UDP_thread_entry+0xa0>
    {
      Error_Handler();
 800ec24:	f7f1 fe42 	bl	80008ac <Error_Handler>
    }

    /* Determine the size of the current packet */
    ULONG current_packet_size = (MEMORY_SIZE - offset) > packet_size ? packet_size : (MEMORY_SIZE - offset);
 800ec28:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800ec2c:	f5c3 4348 	rsb	r3, r3, #51200	; 0xc800
 800ec30:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 800ec34:	4293      	cmp	r3, r2
 800ec36:	bf28      	it	cs
 800ec38:	4613      	movcs	r3, r2
 800ec3a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220

    /* Append data from the memory area to the packet */
    ret = nx_packet_data_append(data_packet, (VOID *)(memory_area + offset), current_packet_size, &NxAppPool, TX_WAIT_FOREVER);
 800ec3e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800ec42:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800ec46:	6818      	ldr	r0, [r3, #0]
 800ec48:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800ec4c:	4a5f      	ldr	r2, [pc, #380]	; (800edcc <app_UDP_thread_entry+0x244>)
 800ec4e:	1899      	adds	r1, r3, r2
 800ec50:	f04f 33ff 	mov.w	r3, #4294967295
 800ec54:	9300      	str	r3, [sp, #0]
 800ec56:	4b5c      	ldr	r3, [pc, #368]	; (800edc8 <app_UDP_thread_entry+0x240>)
 800ec58:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800ec5c:	f7fc fa1c 	bl	800b098 <_nxe_packet_data_append>
 800ec60:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
    if (ret != NX_SUCCESS)
 800ec64:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d001      	beq.n	800ec70 <app_UDP_thread_entry+0xe8>
    {
      Error_Handler();
 800ec6c:	f7f1 fe1e 	bl	80008ac <Error_Handler>
    }

    /* Send the packet */
    ret = nx_udp_socket_send(&UDPSocket, data_packet, UDP_SERVER_ADDRESS, UDP_SERVER_PORT);
 800ec70:	f107 0114 	add.w	r1, r7, #20
 800ec74:	f241 7370 	movw	r3, #6000	; 0x1770
 800ec78:	4a55      	ldr	r2, [pc, #340]	; (800edd0 <app_UDP_thread_entry+0x248>)
 800ec7a:	4851      	ldr	r0, [pc, #324]	; (800edc0 <app_UDP_thread_entry+0x238>)
 800ec7c:	f7fc fd4c 	bl	800b718 <_nxe_udp_socket_send>
 800ec80:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
    if (ret != NX_SUCCESS)
 800ec84:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d001      	beq.n	800ec90 <app_UDP_thread_entry+0x108>
    {
      Error_Handler();
 800ec8c:	f7f1 fe0e 	bl	80008ac <Error_Handler>
    }

    HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 800ec90:	2101      	movs	r1, #1
 800ec92:	4850      	ldr	r0, [pc, #320]	; (800edd4 <app_UDP_thread_entry+0x24c>)
 800ec94:	f7f4 fb38 	bl	8003308 <HAL_GPIO_TogglePin>

    /* wait to receive response from the server */
    ret = nx_udp_socket_receive(&UDPSocket, &server_packet, NX_APP_DEFAULT_TIMEOUT);
 800ec98:	f107 0318 	add.w	r3, r7, #24
 800ec9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eca0:	4619      	mov	r1, r3
 800eca2:	4847      	ldr	r0, [pc, #284]	; (800edc0 <app_UDP_thread_entry+0x238>)
 800eca4:	f7fc fcf6 	bl	800b694 <_nxe_udp_socket_receive>
 800eca8:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
    if (ret == NX_SUCCESS)
 800ecac:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d158      	bne.n	800ed66 <app_UDP_thread_entry+0x1de>
    {
      ULONG source_ip_address;
      UINT source_port;

      /* Get the server IP address and port */
      nx_udp_source_extract(server_packet, &source_ip_address, &source_port);
 800ecb4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800ecb8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f107 020c 	add.w	r2, r7, #12
 800ecc2:	f107 0110 	add.w	r1, r7, #16
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7fc fde8 	bl	800b89c <_nxe_udp_source_extract>

      /* Retrieve the data sent by the server */
      nx_packet_data_retrieve(server_packet, data_buffer, &bytes_read);
 800eccc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800ecd0:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f107 021c 	add.w	r2, r7, #28
 800ecda:	f107 0120 	add.w	r1, r7, #32
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fc fa34 	bl	800b14c <_nxe_packet_data_retrieve>

      /* Print the received data */
      PRINT_DATA(source_ip_address, source_port, data_buffer);
 800ece4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800ece8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	0e18      	lsrs	r0, r3, #24
 800ecf0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800ecf4:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	0c1b      	lsrs	r3, r3, #16
 800ecfc:	b2dc      	uxtb	r4, r3
 800ecfe:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800ed02:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	0a1b      	lsrs	r3, r3, #8
 800ed0a:	b2dd      	uxtb	r5, r3
 800ed0c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800ed10:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800ed1c:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 800ed20:	6812      	ldr	r2, [r2, #0]
 800ed22:	f107 0120 	add.w	r1, r7, #32
 800ed26:	9102      	str	r1, [sp, #8]
 800ed28:	9201      	str	r2, [sp, #4]
 800ed2a:	9300      	str	r3, [sp, #0]
 800ed2c:	462b      	mov	r3, r5
 800ed2e:	4622      	mov	r2, r4
 800ed30:	4601      	mov	r1, r0
 800ed32:	4829      	ldr	r0, [pc, #164]	; (800edd8 <app_UDP_thread_entry+0x250>)
 800ed34:	f000 f9a4 	bl	800f080 <iprintf>

      /* Release the server packet */
      nx_packet_release(server_packet);
 800ed38:	f107 0318 	add.w	r3, r7, #24
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7fc faeb 	bl	800b318 <_nxe_packet_release>

      /* Toggle the green LED on success */
      HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 800ed42:	2101      	movs	r1, #1
 800ed44:	4823      	ldr	r0, [pc, #140]	; (800edd4 <app_UDP_thread_entry+0x24c>)
 800ed46:	f7f4 fadf 	bl	8003308 <HAL_GPIO_TogglePin>
      /* Connection lost with the server, exit the loop */
      break;
    }

    /* Move the offset for the next packet */
    offset += current_packet_size;
 800ed4a:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 800ed4e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800ed52:	4413      	add	r3, r2
 800ed54:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
  while (offset < MEMORY_SIZE)
 800ed58:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800ed5c:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 800ed60:	f4ff af4a 	bcc.w	800ebf8 <app_UDP_thread_entry+0x70>
 800ed64:	e000      	b.n	800ed68 <app_UDP_thread_entry+0x1e0>
      break;
 800ed66:	bf00      	nop
    process the just sent packet before sending a new one */
//    tx_thread_sleep(20);
  }

  /* unbind the socket and delete it */
  nx_udp_socket_unbind(&UDPSocket);
 800ed68:	4815      	ldr	r0, [pc, #84]	; (800edc0 <app_UDP_thread_entry+0x238>)
 800ed6a:	f7fc fd5b 	bl	800b824 <_nxe_udp_socket_unbind>
  nx_udp_socket_delete(&UDPSocket);
 800ed6e:	4814      	ldr	r0, [pc, #80]	; (800edc0 <app_UDP_thread_entry+0x238>)
 800ed70:	f7fc fc54 	bl	800b61c <_nxe_udp_socket_delete>

  if (offset >= MEMORY_SIZE)
 800ed74:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800ed78:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 800ed7c:	d30f      	bcc.n	800ed9e <app_UDP_thread_entry+0x216>
  {
    printf("\n-------------------------------------\n\tSUCCESS : %lu / %lu Bytes sent\n-------------------------------------\n", (unsigned long)offset, (unsigned long)MEMORY_SIZE);
 800ed7e:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 800ed82:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 800ed86:	4815      	ldr	r0, [pc, #84]	; (800eddc <app_UDP_thread_entry+0x254>)
 800ed88:	f000 f97a 	bl	800f080 <iprintf>
    HAL_PWR_DisableWakeUpPin(PWR_WKUP4);
 800ed8c:	2008      	movs	r0, #8
 800ed8e:	f7f4 fafb 	bl	8003388 <HAL_PWR_DisableWakeUpPin>
    HAL_PWR_EnableWakeUpPin(PWR_WKUP4);
 800ed92:	2008      	movs	r0, #8
 800ed94:	f7f4 fae2 	bl	800335c <HAL_PWR_EnableWakeUpPin>
    HAL_PWR_EnterSTANDBYMode();
 800ed98:	f7f4 fb0a 	bl	80033b0 <HAL_PWR_EnterSTANDBYMode>
  else
  {
    printf("\n-------------------------------------\n\tFAIL : %lu / %lu packets sent\n-------------------------------------\n", (unsigned long)offset, (unsigned long)MEMORY_SIZE);
    Error_Handler();
  }
}
 800ed9c:	e008      	b.n	800edb0 <app_UDP_thread_entry+0x228>
    printf("\n-------------------------------------\n\tFAIL : %lu / %lu packets sent\n-------------------------------------\n", (unsigned long)offset, (unsigned long)MEMORY_SIZE);
 800ed9e:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 800eda2:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 800eda6:	480e      	ldr	r0, [pc, #56]	; (800ede0 <app_UDP_thread_entry+0x258>)
 800eda8:	f000 f96a 	bl	800f080 <iprintf>
    Error_Handler();
 800edac:	f7f1 fd7e 	bl	80008ac <Error_Handler>
}
 800edb0:	bf00      	nop
 800edb2:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bdb0      	pop	{r4, r5, r7, pc}
 800edba:	bf00      	nop
 800edbc:	0801007c 	.word	0x0801007c
 800edc0:	20014fec 	.word	0x20014fec
 800edc4:	20015158 	.word	0x20015158
 800edc8:	2001511c 	.word	0x2001511c
 800edcc:	20007f14 	.word	0x20007f14
 800edd0:	c0a80165 	.word	0xc0a80165
 800edd4:	42020400 	.word	0x42020400
 800edd8:	08010090 	.word	0x08010090
 800eddc:	080100b0 	.word	0x080100b0
 800ede0:	08010120 	.word	0x08010120

0800ede4 <app_link_thread_entry>:
* @brief  Link thread entry
* @param thread_input: ULONG thread parameter
* @retval none
*/
static VOID app_link_thread_entry(ULONG thread_input)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b088      	sub	sp, #32
 800ede8:	af02      	add	r7, sp, #8
 800edea:	6078      	str	r0, [r7, #4]
  ULONG actual_status;
  UINT linkdown = 0, status;
 800edec:	2300      	movs	r3, #0
 800edee:	617b      	str	r3, [r7, #20]

  while(1)
  {
    /* Get Physical Link status. */
    status = nx_ip_interface_status_check(&NetXDuoEthIpInstance, 0, NX_IP_LINK_ENABLED,
 800edf0:	f107 030c 	add.w	r3, r7, #12
 800edf4:	220a      	movs	r2, #10
 800edf6:	9200      	str	r2, [sp, #0]
 800edf8:	2204      	movs	r2, #4
 800edfa:	2100      	movs	r1, #0
 800edfc:	481b      	ldr	r0, [pc, #108]	; (800ee6c <app_link_thread_entry+0x88>)
 800edfe:	f7fc f8ad 	bl	800af5c <_nxe_ip_interface_status_check>
 800ee02:	6138      	str	r0, [r7, #16]
                                      &actual_status, 10);

    if(status == NX_SUCCESS)
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d123      	bne.n	800ee52 <app_link_thread_entry+0x6e>
    {
      if(linkdown == 1)
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d128      	bne.n	800ee62 <app_link_thread_entry+0x7e>
      {
        linkdown = 0;
 800ee10:	2300      	movs	r3, #0
 800ee12:	617b      	str	r3, [r7, #20]
        status = nx_ip_interface_status_check(&NetXDuoEthIpInstance, 0, NX_IP_ADDRESS_RESOLVED,
 800ee14:	f107 030c 	add.w	r3, r7, #12
 800ee18:	220a      	movs	r2, #10
 800ee1a:	9200      	str	r2, [sp, #0]
 800ee1c:	2202      	movs	r2, #2
 800ee1e:	2100      	movs	r1, #0
 800ee20:	4812      	ldr	r0, [pc, #72]	; (800ee6c <app_link_thread_entry+0x88>)
 800ee22:	f7fc f89b 	bl	800af5c <_nxe_ip_interface_status_check>
 800ee26:	6138      	str	r0, [r7, #16]
                                      &actual_status, 10);
        if(status == NX_SUCCESS)
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d106      	bne.n	800ee3c <app_link_thread_entry+0x58>
        {
          /* The network cable is connected again. */
          printf("The network cable is connected again.\n");
 800ee2e:	4810      	ldr	r0, [pc, #64]	; (800ee70 <app_link_thread_entry+0x8c>)
 800ee30:	f000 f98c 	bl	800f14c <puts>
          /* Print UDP Echo Server is available again. */
          printf("UDP Echo Server is available again.\n");
 800ee34:	480f      	ldr	r0, [pc, #60]	; (800ee74 <app_link_thread_entry+0x90>)
 800ee36:	f000 f989 	bl	800f14c <puts>
 800ee3a:	e012      	b.n	800ee62 <app_link_thread_entry+0x7e>
        }
        else
        {
          /* The network cable is connected. */
          printf("The network cable is connected.\n");
 800ee3c:	480e      	ldr	r0, [pc, #56]	; (800ee78 <app_link_thread_entry+0x94>)
 800ee3e:	f000 f985 	bl	800f14c <puts>
          /* Send command to Enable Nx driver. */
          nx_ip_driver_direct_command(&NetXDuoEthIpInstance, NX_LINK_ENABLE,
 800ee42:	f107 030c 	add.w	r3, r7, #12
 800ee46:	461a      	mov	r2, r3
 800ee48:	2102      	movs	r1, #2
 800ee4a:	4808      	ldr	r0, [pc, #32]	; (800ee6c <app_link_thread_entry+0x88>)
 800ee4c:	f7fc f846 	bl	800aedc <_nxe_ip_driver_direct_command>
 800ee50:	e007      	b.n	800ee62 <app_link_thread_entry+0x7e>
        }
      }
    }
    else
    {
      if(0 == linkdown)
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d104      	bne.n	800ee62 <app_link_thread_entry+0x7e>
      {
        linkdown = 1;
 800ee58:	2301      	movs	r3, #1
 800ee5a:	617b      	str	r3, [r7, #20]
        /* The network cable is not connected. */
        printf("The network cable is not connected.\n");
 800ee5c:	4807      	ldr	r0, [pc, #28]	; (800ee7c <app_link_thread_entry+0x98>)
 800ee5e:	f000 f975 	bl	800f14c <puts>
      }
    }

    tx_thread_sleep(NX_ETH_CABLE_CONNECTION_CHECK_PERIOD);
 800ee62:	f44f 7016 	mov.w	r0, #600	; 0x258
 800ee66:	f7fe fcfb 	bl	800d860 <_tx_thread_sleep>
    status = nx_ip_interface_status_check(&NetXDuoEthIpInstance, 0, NX_IP_LINK_ENABLED,
 800ee6a:	e7c1      	b.n	800edf0 <app_link_thread_entry+0xc>
 800ee6c:	20015158 	.word	0x20015158
 800ee70:	08010190 	.word	0x08010190
 800ee74:	080101b8 	.word	0x080101b8
 800ee78:	080101dc 	.word	0x080101dc
 800ee7c:	080101fc 	.word	0x080101fc

0800ee80 <rand>:
 800ee80:	4b16      	ldr	r3, [pc, #88]	; (800eedc <rand+0x5c>)
 800ee82:	b510      	push	{r4, lr}
 800ee84:	681c      	ldr	r4, [r3, #0]
 800ee86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ee88:	b9b3      	cbnz	r3, 800eeb8 <rand+0x38>
 800ee8a:	2018      	movs	r0, #24
 800ee8c:	f000 fb30 	bl	800f4f0 <malloc>
 800ee90:	4602      	mov	r2, r0
 800ee92:	6320      	str	r0, [r4, #48]	; 0x30
 800ee94:	b920      	cbnz	r0, 800eea0 <rand+0x20>
 800ee96:	4b12      	ldr	r3, [pc, #72]	; (800eee0 <rand+0x60>)
 800ee98:	2152      	movs	r1, #82	; 0x52
 800ee9a:	4812      	ldr	r0, [pc, #72]	; (800eee4 <rand+0x64>)
 800ee9c:	f000 fabe 	bl	800f41c <__assert_func>
 800eea0:	4911      	ldr	r1, [pc, #68]	; (800eee8 <rand+0x68>)
 800eea2:	4b12      	ldr	r3, [pc, #72]	; (800eeec <rand+0x6c>)
 800eea4:	e9c0 1300 	strd	r1, r3, [r0]
 800eea8:	4b11      	ldr	r3, [pc, #68]	; (800eef0 <rand+0x70>)
 800eeaa:	2100      	movs	r1, #0
 800eeac:	6083      	str	r3, [r0, #8]
 800eeae:	230b      	movs	r3, #11
 800eeb0:	8183      	strh	r3, [r0, #12]
 800eeb2:	2001      	movs	r0, #1
 800eeb4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800eeb8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800eeba:	480e      	ldr	r0, [pc, #56]	; (800eef4 <rand+0x74>)
 800eebc:	690b      	ldr	r3, [r1, #16]
 800eebe:	694c      	ldr	r4, [r1, #20]
 800eec0:	4a0d      	ldr	r2, [pc, #52]	; (800eef8 <rand+0x78>)
 800eec2:	4358      	muls	r0, r3
 800eec4:	fb02 0004 	mla	r0, r2, r4, r0
 800eec8:	fba3 3202 	umull	r3, r2, r3, r2
 800eecc:	3301      	adds	r3, #1
 800eece:	eb40 0002 	adc.w	r0, r0, r2
 800eed2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800eed6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800eeda:	bd10      	pop	{r4, pc}
 800eedc:	200000e4 	.word	0x200000e4
 800eee0:	08010238 	.word	0x08010238
 800eee4:	0801024f 	.word	0x0801024f
 800eee8:	abcd330e 	.word	0xabcd330e
 800eeec:	e66d1234 	.word	0xe66d1234
 800eef0:	0005deec 	.word	0x0005deec
 800eef4:	5851f42d 	.word	0x5851f42d
 800eef8:	4c957f2d 	.word	0x4c957f2d

0800eefc <std>:
 800eefc:	2300      	movs	r3, #0
 800eefe:	b510      	push	{r4, lr}
 800ef00:	4604      	mov	r4, r0
 800ef02:	6083      	str	r3, [r0, #8]
 800ef04:	8181      	strh	r1, [r0, #12]
 800ef06:	4619      	mov	r1, r3
 800ef08:	6643      	str	r3, [r0, #100]	; 0x64
 800ef0a:	81c2      	strh	r2, [r0, #14]
 800ef0c:	2208      	movs	r2, #8
 800ef0e:	6183      	str	r3, [r0, #24]
 800ef10:	e9c0 3300 	strd	r3, r3, [r0]
 800ef14:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef18:	305c      	adds	r0, #92	; 0x5c
 800ef1a:	f000 f9f7 	bl	800f30c <memset>
 800ef1e:	4b0d      	ldr	r3, [pc, #52]	; (800ef54 <std+0x58>)
 800ef20:	6224      	str	r4, [r4, #32]
 800ef22:	6263      	str	r3, [r4, #36]	; 0x24
 800ef24:	4b0c      	ldr	r3, [pc, #48]	; (800ef58 <std+0x5c>)
 800ef26:	62a3      	str	r3, [r4, #40]	; 0x28
 800ef28:	4b0c      	ldr	r3, [pc, #48]	; (800ef5c <std+0x60>)
 800ef2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ef2c:	4b0c      	ldr	r3, [pc, #48]	; (800ef60 <std+0x64>)
 800ef2e:	6323      	str	r3, [r4, #48]	; 0x30
 800ef30:	4b0c      	ldr	r3, [pc, #48]	; (800ef64 <std+0x68>)
 800ef32:	429c      	cmp	r4, r3
 800ef34:	d006      	beq.n	800ef44 <std+0x48>
 800ef36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ef3a:	4294      	cmp	r4, r2
 800ef3c:	d002      	beq.n	800ef44 <std+0x48>
 800ef3e:	33d0      	adds	r3, #208	; 0xd0
 800ef40:	429c      	cmp	r4, r3
 800ef42:	d105      	bne.n	800ef50 <std+0x54>
 800ef44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ef48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef4c:	f000 ba56 	b.w	800f3fc <__retarget_lock_init_recursive>
 800ef50:	bd10      	pop	{r4, pc}
 800ef52:	bf00      	nop
 800ef54:	0800f15d 	.word	0x0800f15d
 800ef58:	0800f17f 	.word	0x0800f17f
 800ef5c:	0800f1b7 	.word	0x0800f1b7
 800ef60:	0800f1db 	.word	0x0800f1db
 800ef64:	20015920 	.word	0x20015920

0800ef68 <stdio_exit_handler>:
 800ef68:	4a02      	ldr	r2, [pc, #8]	; (800ef74 <stdio_exit_handler+0xc>)
 800ef6a:	4903      	ldr	r1, [pc, #12]	; (800ef78 <stdio_exit_handler+0x10>)
 800ef6c:	4803      	ldr	r0, [pc, #12]	; (800ef7c <stdio_exit_handler+0x14>)
 800ef6e:	f000 b869 	b.w	800f044 <_fwalk_sglue>
 800ef72:	bf00      	nop
 800ef74:	2000008c 	.word	0x2000008c
 800ef78:	0800fd0d 	.word	0x0800fd0d
 800ef7c:	20000098 	.word	0x20000098

0800ef80 <cleanup_stdio>:
 800ef80:	6841      	ldr	r1, [r0, #4]
 800ef82:	4b0c      	ldr	r3, [pc, #48]	; (800efb4 <cleanup_stdio+0x34>)
 800ef84:	4299      	cmp	r1, r3
 800ef86:	b510      	push	{r4, lr}
 800ef88:	4604      	mov	r4, r0
 800ef8a:	d001      	beq.n	800ef90 <cleanup_stdio+0x10>
 800ef8c:	f000 febe 	bl	800fd0c <_fflush_r>
 800ef90:	68a1      	ldr	r1, [r4, #8]
 800ef92:	4b09      	ldr	r3, [pc, #36]	; (800efb8 <cleanup_stdio+0x38>)
 800ef94:	4299      	cmp	r1, r3
 800ef96:	d002      	beq.n	800ef9e <cleanup_stdio+0x1e>
 800ef98:	4620      	mov	r0, r4
 800ef9a:	f000 feb7 	bl	800fd0c <_fflush_r>
 800ef9e:	68e1      	ldr	r1, [r4, #12]
 800efa0:	4b06      	ldr	r3, [pc, #24]	; (800efbc <cleanup_stdio+0x3c>)
 800efa2:	4299      	cmp	r1, r3
 800efa4:	d004      	beq.n	800efb0 <cleanup_stdio+0x30>
 800efa6:	4620      	mov	r0, r4
 800efa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efac:	f000 beae 	b.w	800fd0c <_fflush_r>
 800efb0:	bd10      	pop	{r4, pc}
 800efb2:	bf00      	nop
 800efb4:	20015920 	.word	0x20015920
 800efb8:	20015988 	.word	0x20015988
 800efbc:	200159f0 	.word	0x200159f0

0800efc0 <global_stdio_init.part.0>:
 800efc0:	b510      	push	{r4, lr}
 800efc2:	4b0b      	ldr	r3, [pc, #44]	; (800eff0 <global_stdio_init.part.0+0x30>)
 800efc4:	2104      	movs	r1, #4
 800efc6:	4c0b      	ldr	r4, [pc, #44]	; (800eff4 <global_stdio_init.part.0+0x34>)
 800efc8:	4a0b      	ldr	r2, [pc, #44]	; (800eff8 <global_stdio_init.part.0+0x38>)
 800efca:	4620      	mov	r0, r4
 800efcc:	601a      	str	r2, [r3, #0]
 800efce:	2200      	movs	r2, #0
 800efd0:	f7ff ff94 	bl	800eefc <std>
 800efd4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800efd8:	2201      	movs	r2, #1
 800efda:	2109      	movs	r1, #9
 800efdc:	f7ff ff8e 	bl	800eefc <std>
 800efe0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800efe4:	2202      	movs	r2, #2
 800efe6:	2112      	movs	r1, #18
 800efe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efec:	f7ff bf86 	b.w	800eefc <std>
 800eff0:	20015a58 	.word	0x20015a58
 800eff4:	20015920 	.word	0x20015920
 800eff8:	0800ef69 	.word	0x0800ef69

0800effc <__sfp_lock_acquire>:
 800effc:	4801      	ldr	r0, [pc, #4]	; (800f004 <__sfp_lock_acquire+0x8>)
 800effe:	f000 b9fe 	b.w	800f3fe <__retarget_lock_acquire_recursive>
 800f002:	bf00      	nop
 800f004:	20015a61 	.word	0x20015a61

0800f008 <__sfp_lock_release>:
 800f008:	4801      	ldr	r0, [pc, #4]	; (800f010 <__sfp_lock_release+0x8>)
 800f00a:	f000 b9f9 	b.w	800f400 <__retarget_lock_release_recursive>
 800f00e:	bf00      	nop
 800f010:	20015a61 	.word	0x20015a61

0800f014 <__sinit>:
 800f014:	b510      	push	{r4, lr}
 800f016:	4604      	mov	r4, r0
 800f018:	f7ff fff0 	bl	800effc <__sfp_lock_acquire>
 800f01c:	6a23      	ldr	r3, [r4, #32]
 800f01e:	b11b      	cbz	r3, 800f028 <__sinit+0x14>
 800f020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f024:	f7ff bff0 	b.w	800f008 <__sfp_lock_release>
 800f028:	4b04      	ldr	r3, [pc, #16]	; (800f03c <__sinit+0x28>)
 800f02a:	6223      	str	r3, [r4, #32]
 800f02c:	4b04      	ldr	r3, [pc, #16]	; (800f040 <__sinit+0x2c>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d1f5      	bne.n	800f020 <__sinit+0xc>
 800f034:	f7ff ffc4 	bl	800efc0 <global_stdio_init.part.0>
 800f038:	e7f2      	b.n	800f020 <__sinit+0xc>
 800f03a:	bf00      	nop
 800f03c:	0800ef81 	.word	0x0800ef81
 800f040:	20015a58 	.word	0x20015a58

0800f044 <_fwalk_sglue>:
 800f044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f048:	4607      	mov	r7, r0
 800f04a:	4688      	mov	r8, r1
 800f04c:	4614      	mov	r4, r2
 800f04e:	2600      	movs	r6, #0
 800f050:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f054:	f1b9 0901 	subs.w	r9, r9, #1
 800f058:	d505      	bpl.n	800f066 <_fwalk_sglue+0x22>
 800f05a:	6824      	ldr	r4, [r4, #0]
 800f05c:	2c00      	cmp	r4, #0
 800f05e:	d1f7      	bne.n	800f050 <_fwalk_sglue+0xc>
 800f060:	4630      	mov	r0, r6
 800f062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f066:	89ab      	ldrh	r3, [r5, #12]
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d907      	bls.n	800f07c <_fwalk_sglue+0x38>
 800f06c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f070:	3301      	adds	r3, #1
 800f072:	d003      	beq.n	800f07c <_fwalk_sglue+0x38>
 800f074:	4629      	mov	r1, r5
 800f076:	4638      	mov	r0, r7
 800f078:	47c0      	blx	r8
 800f07a:	4306      	orrs	r6, r0
 800f07c:	3568      	adds	r5, #104	; 0x68
 800f07e:	e7e9      	b.n	800f054 <_fwalk_sglue+0x10>

0800f080 <iprintf>:
 800f080:	b40f      	push	{r0, r1, r2, r3}
 800f082:	b507      	push	{r0, r1, r2, lr}
 800f084:	4906      	ldr	r1, [pc, #24]	; (800f0a0 <iprintf+0x20>)
 800f086:	ab04      	add	r3, sp, #16
 800f088:	6808      	ldr	r0, [r1, #0]
 800f08a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f08e:	6881      	ldr	r1, [r0, #8]
 800f090:	9301      	str	r3, [sp, #4]
 800f092:	f000 fb0b 	bl	800f6ac <_vfiprintf_r>
 800f096:	b003      	add	sp, #12
 800f098:	f85d eb04 	ldr.w	lr, [sp], #4
 800f09c:	b004      	add	sp, #16
 800f09e:	4770      	bx	lr
 800f0a0:	200000e4 	.word	0x200000e4

0800f0a4 <_puts_r>:
 800f0a4:	6a03      	ldr	r3, [r0, #32]
 800f0a6:	b570      	push	{r4, r5, r6, lr}
 800f0a8:	4605      	mov	r5, r0
 800f0aa:	460e      	mov	r6, r1
 800f0ac:	6884      	ldr	r4, [r0, #8]
 800f0ae:	b90b      	cbnz	r3, 800f0b4 <_puts_r+0x10>
 800f0b0:	f7ff ffb0 	bl	800f014 <__sinit>
 800f0b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0b6:	07db      	lsls	r3, r3, #31
 800f0b8:	d405      	bmi.n	800f0c6 <_puts_r+0x22>
 800f0ba:	89a3      	ldrh	r3, [r4, #12]
 800f0bc:	0598      	lsls	r0, r3, #22
 800f0be:	d402      	bmi.n	800f0c6 <_puts_r+0x22>
 800f0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0c2:	f000 f99c 	bl	800f3fe <__retarget_lock_acquire_recursive>
 800f0c6:	89a3      	ldrh	r3, [r4, #12]
 800f0c8:	0719      	lsls	r1, r3, #28
 800f0ca:	d513      	bpl.n	800f0f4 <_puts_r+0x50>
 800f0cc:	6923      	ldr	r3, [r4, #16]
 800f0ce:	b18b      	cbz	r3, 800f0f4 <_puts_r+0x50>
 800f0d0:	3e01      	subs	r6, #1
 800f0d2:	68a3      	ldr	r3, [r4, #8]
 800f0d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f0d8:	3b01      	subs	r3, #1
 800f0da:	60a3      	str	r3, [r4, #8]
 800f0dc:	b9e9      	cbnz	r1, 800f11a <_puts_r+0x76>
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	da2e      	bge.n	800f140 <_puts_r+0x9c>
 800f0e2:	4622      	mov	r2, r4
 800f0e4:	210a      	movs	r1, #10
 800f0e6:	4628      	mov	r0, r5
 800f0e8:	f000 f87b 	bl	800f1e2 <__swbuf_r>
 800f0ec:	3001      	adds	r0, #1
 800f0ee:	d007      	beq.n	800f100 <_puts_r+0x5c>
 800f0f0:	250a      	movs	r5, #10
 800f0f2:	e007      	b.n	800f104 <_puts_r+0x60>
 800f0f4:	4621      	mov	r1, r4
 800f0f6:	4628      	mov	r0, r5
 800f0f8:	f000 f8b0 	bl	800f25c <__swsetup_r>
 800f0fc:	2800      	cmp	r0, #0
 800f0fe:	d0e7      	beq.n	800f0d0 <_puts_r+0x2c>
 800f100:	f04f 35ff 	mov.w	r5, #4294967295
 800f104:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f106:	07da      	lsls	r2, r3, #31
 800f108:	d405      	bmi.n	800f116 <_puts_r+0x72>
 800f10a:	89a3      	ldrh	r3, [r4, #12]
 800f10c:	059b      	lsls	r3, r3, #22
 800f10e:	d402      	bmi.n	800f116 <_puts_r+0x72>
 800f110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f112:	f000 f975 	bl	800f400 <__retarget_lock_release_recursive>
 800f116:	4628      	mov	r0, r5
 800f118:	bd70      	pop	{r4, r5, r6, pc}
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	da04      	bge.n	800f128 <_puts_r+0x84>
 800f11e:	69a2      	ldr	r2, [r4, #24]
 800f120:	429a      	cmp	r2, r3
 800f122:	dc06      	bgt.n	800f132 <_puts_r+0x8e>
 800f124:	290a      	cmp	r1, #10
 800f126:	d004      	beq.n	800f132 <_puts_r+0x8e>
 800f128:	6823      	ldr	r3, [r4, #0]
 800f12a:	1c5a      	adds	r2, r3, #1
 800f12c:	6022      	str	r2, [r4, #0]
 800f12e:	7019      	strb	r1, [r3, #0]
 800f130:	e7cf      	b.n	800f0d2 <_puts_r+0x2e>
 800f132:	4622      	mov	r2, r4
 800f134:	4628      	mov	r0, r5
 800f136:	f000 f854 	bl	800f1e2 <__swbuf_r>
 800f13a:	3001      	adds	r0, #1
 800f13c:	d1c9      	bne.n	800f0d2 <_puts_r+0x2e>
 800f13e:	e7df      	b.n	800f100 <_puts_r+0x5c>
 800f140:	6823      	ldr	r3, [r4, #0]
 800f142:	250a      	movs	r5, #10
 800f144:	1c5a      	adds	r2, r3, #1
 800f146:	6022      	str	r2, [r4, #0]
 800f148:	701d      	strb	r5, [r3, #0]
 800f14a:	e7db      	b.n	800f104 <_puts_r+0x60>

0800f14c <puts>:
 800f14c:	4b02      	ldr	r3, [pc, #8]	; (800f158 <puts+0xc>)
 800f14e:	4601      	mov	r1, r0
 800f150:	6818      	ldr	r0, [r3, #0]
 800f152:	f7ff bfa7 	b.w	800f0a4 <_puts_r>
 800f156:	bf00      	nop
 800f158:	200000e4 	.word	0x200000e4

0800f15c <__sread>:
 800f15c:	b510      	push	{r4, lr}
 800f15e:	460c      	mov	r4, r1
 800f160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f164:	f000 f8fc 	bl	800f360 <_read_r>
 800f168:	2800      	cmp	r0, #0
 800f16a:	bfab      	itete	ge
 800f16c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f16e:	89a3      	ldrhlt	r3, [r4, #12]
 800f170:	181b      	addge	r3, r3, r0
 800f172:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f176:	bfac      	ite	ge
 800f178:	6563      	strge	r3, [r4, #84]	; 0x54
 800f17a:	81a3      	strhlt	r3, [r4, #12]
 800f17c:	bd10      	pop	{r4, pc}

0800f17e <__swrite>:
 800f17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f182:	461f      	mov	r7, r3
 800f184:	898b      	ldrh	r3, [r1, #12]
 800f186:	4605      	mov	r5, r0
 800f188:	460c      	mov	r4, r1
 800f18a:	05db      	lsls	r3, r3, #23
 800f18c:	4616      	mov	r6, r2
 800f18e:	d505      	bpl.n	800f19c <__swrite+0x1e>
 800f190:	2302      	movs	r3, #2
 800f192:	2200      	movs	r2, #0
 800f194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f198:	f000 f8d0 	bl	800f33c <_lseek_r>
 800f19c:	89a3      	ldrh	r3, [r4, #12]
 800f19e:	4632      	mov	r2, r6
 800f1a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1a4:	4628      	mov	r0, r5
 800f1a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f1aa:	81a3      	strh	r3, [r4, #12]
 800f1ac:	463b      	mov	r3, r7
 800f1ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1b2:	f000 b8e7 	b.w	800f384 <_write_r>

0800f1b6 <__sseek>:
 800f1b6:	b510      	push	{r4, lr}
 800f1b8:	460c      	mov	r4, r1
 800f1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1be:	f000 f8bd 	bl	800f33c <_lseek_r>
 800f1c2:	1c43      	adds	r3, r0, #1
 800f1c4:	89a3      	ldrh	r3, [r4, #12]
 800f1c6:	bf15      	itete	ne
 800f1c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f1ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f1ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f1d2:	81a3      	strheq	r3, [r4, #12]
 800f1d4:	bf18      	it	ne
 800f1d6:	81a3      	strhne	r3, [r4, #12]
 800f1d8:	bd10      	pop	{r4, pc}

0800f1da <__sclose>:
 800f1da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1de:	f000 b89d 	b.w	800f31c <_close_r>

0800f1e2 <__swbuf_r>:
 800f1e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e4:	460e      	mov	r6, r1
 800f1e6:	4614      	mov	r4, r2
 800f1e8:	4605      	mov	r5, r0
 800f1ea:	b118      	cbz	r0, 800f1f4 <__swbuf_r+0x12>
 800f1ec:	6a03      	ldr	r3, [r0, #32]
 800f1ee:	b90b      	cbnz	r3, 800f1f4 <__swbuf_r+0x12>
 800f1f0:	f7ff ff10 	bl	800f014 <__sinit>
 800f1f4:	69a3      	ldr	r3, [r4, #24]
 800f1f6:	60a3      	str	r3, [r4, #8]
 800f1f8:	89a3      	ldrh	r3, [r4, #12]
 800f1fa:	071a      	lsls	r2, r3, #28
 800f1fc:	d525      	bpl.n	800f24a <__swbuf_r+0x68>
 800f1fe:	6923      	ldr	r3, [r4, #16]
 800f200:	b31b      	cbz	r3, 800f24a <__swbuf_r+0x68>
 800f202:	6823      	ldr	r3, [r4, #0]
 800f204:	b2f6      	uxtb	r6, r6
 800f206:	6922      	ldr	r2, [r4, #16]
 800f208:	4637      	mov	r7, r6
 800f20a:	1a98      	subs	r0, r3, r2
 800f20c:	6963      	ldr	r3, [r4, #20]
 800f20e:	4283      	cmp	r3, r0
 800f210:	dc04      	bgt.n	800f21c <__swbuf_r+0x3a>
 800f212:	4621      	mov	r1, r4
 800f214:	4628      	mov	r0, r5
 800f216:	f000 fd79 	bl	800fd0c <_fflush_r>
 800f21a:	b9e0      	cbnz	r0, 800f256 <__swbuf_r+0x74>
 800f21c:	68a3      	ldr	r3, [r4, #8]
 800f21e:	3b01      	subs	r3, #1
 800f220:	60a3      	str	r3, [r4, #8]
 800f222:	6823      	ldr	r3, [r4, #0]
 800f224:	1c5a      	adds	r2, r3, #1
 800f226:	6022      	str	r2, [r4, #0]
 800f228:	701e      	strb	r6, [r3, #0]
 800f22a:	1c43      	adds	r3, r0, #1
 800f22c:	6962      	ldr	r2, [r4, #20]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d004      	beq.n	800f23c <__swbuf_r+0x5a>
 800f232:	89a3      	ldrh	r3, [r4, #12]
 800f234:	07db      	lsls	r3, r3, #31
 800f236:	d506      	bpl.n	800f246 <__swbuf_r+0x64>
 800f238:	2e0a      	cmp	r6, #10
 800f23a:	d104      	bne.n	800f246 <__swbuf_r+0x64>
 800f23c:	4621      	mov	r1, r4
 800f23e:	4628      	mov	r0, r5
 800f240:	f000 fd64 	bl	800fd0c <_fflush_r>
 800f244:	b938      	cbnz	r0, 800f256 <__swbuf_r+0x74>
 800f246:	4638      	mov	r0, r7
 800f248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f24a:	4621      	mov	r1, r4
 800f24c:	4628      	mov	r0, r5
 800f24e:	f000 f805 	bl	800f25c <__swsetup_r>
 800f252:	2800      	cmp	r0, #0
 800f254:	d0d5      	beq.n	800f202 <__swbuf_r+0x20>
 800f256:	f04f 37ff 	mov.w	r7, #4294967295
 800f25a:	e7f4      	b.n	800f246 <__swbuf_r+0x64>

0800f25c <__swsetup_r>:
 800f25c:	b538      	push	{r3, r4, r5, lr}
 800f25e:	4b2a      	ldr	r3, [pc, #168]	; (800f308 <__swsetup_r+0xac>)
 800f260:	4605      	mov	r5, r0
 800f262:	460c      	mov	r4, r1
 800f264:	6818      	ldr	r0, [r3, #0]
 800f266:	b118      	cbz	r0, 800f270 <__swsetup_r+0x14>
 800f268:	6a03      	ldr	r3, [r0, #32]
 800f26a:	b90b      	cbnz	r3, 800f270 <__swsetup_r+0x14>
 800f26c:	f7ff fed2 	bl	800f014 <__sinit>
 800f270:	89a3      	ldrh	r3, [r4, #12]
 800f272:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f276:	0718      	lsls	r0, r3, #28
 800f278:	d422      	bmi.n	800f2c0 <__swsetup_r+0x64>
 800f27a:	06d9      	lsls	r1, r3, #27
 800f27c:	d407      	bmi.n	800f28e <__swsetup_r+0x32>
 800f27e:	2309      	movs	r3, #9
 800f280:	602b      	str	r3, [r5, #0]
 800f282:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f286:	f04f 30ff 	mov.w	r0, #4294967295
 800f28a:	81a3      	strh	r3, [r4, #12]
 800f28c:	e034      	b.n	800f2f8 <__swsetup_r+0x9c>
 800f28e:	0758      	lsls	r0, r3, #29
 800f290:	d512      	bpl.n	800f2b8 <__swsetup_r+0x5c>
 800f292:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f294:	b141      	cbz	r1, 800f2a8 <__swsetup_r+0x4c>
 800f296:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f29a:	4299      	cmp	r1, r3
 800f29c:	d002      	beq.n	800f2a4 <__swsetup_r+0x48>
 800f29e:	4628      	mov	r0, r5
 800f2a0:	f000 f8da 	bl	800f458 <_free_r>
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	6363      	str	r3, [r4, #52]	; 0x34
 800f2a8:	89a3      	ldrh	r3, [r4, #12]
 800f2aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f2ae:	81a3      	strh	r3, [r4, #12]
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	6063      	str	r3, [r4, #4]
 800f2b4:	6923      	ldr	r3, [r4, #16]
 800f2b6:	6023      	str	r3, [r4, #0]
 800f2b8:	89a3      	ldrh	r3, [r4, #12]
 800f2ba:	f043 0308 	orr.w	r3, r3, #8
 800f2be:	81a3      	strh	r3, [r4, #12]
 800f2c0:	6923      	ldr	r3, [r4, #16]
 800f2c2:	b94b      	cbnz	r3, 800f2d8 <__swsetup_r+0x7c>
 800f2c4:	89a3      	ldrh	r3, [r4, #12]
 800f2c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f2ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2ce:	d003      	beq.n	800f2d8 <__swsetup_r+0x7c>
 800f2d0:	4621      	mov	r1, r4
 800f2d2:	4628      	mov	r0, r5
 800f2d4:	f000 fd79 	bl	800fdca <__smakebuf_r>
 800f2d8:	89a0      	ldrh	r0, [r4, #12]
 800f2da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2de:	f010 0301 	ands.w	r3, r0, #1
 800f2e2:	d00a      	beq.n	800f2fa <__swsetup_r+0x9e>
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	60a3      	str	r3, [r4, #8]
 800f2e8:	6963      	ldr	r3, [r4, #20]
 800f2ea:	425b      	negs	r3, r3
 800f2ec:	61a3      	str	r3, [r4, #24]
 800f2ee:	6923      	ldr	r3, [r4, #16]
 800f2f0:	b943      	cbnz	r3, 800f304 <__swsetup_r+0xa8>
 800f2f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f2f6:	d1c4      	bne.n	800f282 <__swsetup_r+0x26>
 800f2f8:	bd38      	pop	{r3, r4, r5, pc}
 800f2fa:	0781      	lsls	r1, r0, #30
 800f2fc:	bf58      	it	pl
 800f2fe:	6963      	ldrpl	r3, [r4, #20]
 800f300:	60a3      	str	r3, [r4, #8]
 800f302:	e7f4      	b.n	800f2ee <__swsetup_r+0x92>
 800f304:	2000      	movs	r0, #0
 800f306:	e7f7      	b.n	800f2f8 <__swsetup_r+0x9c>
 800f308:	200000e4 	.word	0x200000e4

0800f30c <memset>:
 800f30c:	4402      	add	r2, r0
 800f30e:	4603      	mov	r3, r0
 800f310:	4293      	cmp	r3, r2
 800f312:	d100      	bne.n	800f316 <memset+0xa>
 800f314:	4770      	bx	lr
 800f316:	f803 1b01 	strb.w	r1, [r3], #1
 800f31a:	e7f9      	b.n	800f310 <memset+0x4>

0800f31c <_close_r>:
 800f31c:	b538      	push	{r3, r4, r5, lr}
 800f31e:	2300      	movs	r3, #0
 800f320:	4d05      	ldr	r5, [pc, #20]	; (800f338 <_close_r+0x1c>)
 800f322:	4604      	mov	r4, r0
 800f324:	4608      	mov	r0, r1
 800f326:	602b      	str	r3, [r5, #0]
 800f328:	f7f1 fcaf 	bl	8000c8a <_close>
 800f32c:	1c43      	adds	r3, r0, #1
 800f32e:	d102      	bne.n	800f336 <_close_r+0x1a>
 800f330:	682b      	ldr	r3, [r5, #0]
 800f332:	b103      	cbz	r3, 800f336 <_close_r+0x1a>
 800f334:	6023      	str	r3, [r4, #0]
 800f336:	bd38      	pop	{r3, r4, r5, pc}
 800f338:	20015a5c 	.word	0x20015a5c

0800f33c <_lseek_r>:
 800f33c:	b538      	push	{r3, r4, r5, lr}
 800f33e:	4604      	mov	r4, r0
 800f340:	4d06      	ldr	r5, [pc, #24]	; (800f35c <_lseek_r+0x20>)
 800f342:	4608      	mov	r0, r1
 800f344:	4611      	mov	r1, r2
 800f346:	2200      	movs	r2, #0
 800f348:	602a      	str	r2, [r5, #0]
 800f34a:	461a      	mov	r2, r3
 800f34c:	f7f1 fcc4 	bl	8000cd8 <_lseek>
 800f350:	1c43      	adds	r3, r0, #1
 800f352:	d102      	bne.n	800f35a <_lseek_r+0x1e>
 800f354:	682b      	ldr	r3, [r5, #0]
 800f356:	b103      	cbz	r3, 800f35a <_lseek_r+0x1e>
 800f358:	6023      	str	r3, [r4, #0]
 800f35a:	bd38      	pop	{r3, r4, r5, pc}
 800f35c:	20015a5c 	.word	0x20015a5c

0800f360 <_read_r>:
 800f360:	b538      	push	{r3, r4, r5, lr}
 800f362:	4604      	mov	r4, r0
 800f364:	4d06      	ldr	r5, [pc, #24]	; (800f380 <_read_r+0x20>)
 800f366:	4608      	mov	r0, r1
 800f368:	4611      	mov	r1, r2
 800f36a:	2200      	movs	r2, #0
 800f36c:	602a      	str	r2, [r5, #0]
 800f36e:	461a      	mov	r2, r3
 800f370:	f7f1 fc52 	bl	8000c18 <_read>
 800f374:	1c43      	adds	r3, r0, #1
 800f376:	d102      	bne.n	800f37e <_read_r+0x1e>
 800f378:	682b      	ldr	r3, [r5, #0]
 800f37a:	b103      	cbz	r3, 800f37e <_read_r+0x1e>
 800f37c:	6023      	str	r3, [r4, #0]
 800f37e:	bd38      	pop	{r3, r4, r5, pc}
 800f380:	20015a5c 	.word	0x20015a5c

0800f384 <_write_r>:
 800f384:	b538      	push	{r3, r4, r5, lr}
 800f386:	4604      	mov	r4, r0
 800f388:	4d06      	ldr	r5, [pc, #24]	; (800f3a4 <_write_r+0x20>)
 800f38a:	4608      	mov	r0, r1
 800f38c:	4611      	mov	r1, r2
 800f38e:	2200      	movs	r2, #0
 800f390:	602a      	str	r2, [r5, #0]
 800f392:	461a      	mov	r2, r3
 800f394:	f7f1 fc5d 	bl	8000c52 <_write>
 800f398:	1c43      	adds	r3, r0, #1
 800f39a:	d102      	bne.n	800f3a2 <_write_r+0x1e>
 800f39c:	682b      	ldr	r3, [r5, #0]
 800f39e:	b103      	cbz	r3, 800f3a2 <_write_r+0x1e>
 800f3a0:	6023      	str	r3, [r4, #0]
 800f3a2:	bd38      	pop	{r3, r4, r5, pc}
 800f3a4:	20015a5c 	.word	0x20015a5c

0800f3a8 <__errno>:
 800f3a8:	4b01      	ldr	r3, [pc, #4]	; (800f3b0 <__errno+0x8>)
 800f3aa:	6818      	ldr	r0, [r3, #0]
 800f3ac:	4770      	bx	lr
 800f3ae:	bf00      	nop
 800f3b0:	200000e4 	.word	0x200000e4

0800f3b4 <__libc_init_array>:
 800f3b4:	b570      	push	{r4, r5, r6, lr}
 800f3b6:	4d0d      	ldr	r5, [pc, #52]	; (800f3ec <__libc_init_array+0x38>)
 800f3b8:	2600      	movs	r6, #0
 800f3ba:	4c0d      	ldr	r4, [pc, #52]	; (800f3f0 <__libc_init_array+0x3c>)
 800f3bc:	1b64      	subs	r4, r4, r5
 800f3be:	10a4      	asrs	r4, r4, #2
 800f3c0:	42a6      	cmp	r6, r4
 800f3c2:	d109      	bne.n	800f3d8 <__libc_init_array+0x24>
 800f3c4:	4d0b      	ldr	r5, [pc, #44]	; (800f3f4 <__libc_init_array+0x40>)
 800f3c6:	2600      	movs	r6, #0
 800f3c8:	4c0b      	ldr	r4, [pc, #44]	; (800f3f8 <__libc_init_array+0x44>)
 800f3ca:	f000 fdc7 	bl	800ff5c <_init>
 800f3ce:	1b64      	subs	r4, r4, r5
 800f3d0:	10a4      	asrs	r4, r4, #2
 800f3d2:	42a6      	cmp	r6, r4
 800f3d4:	d105      	bne.n	800f3e2 <__libc_init_array+0x2e>
 800f3d6:	bd70      	pop	{r4, r5, r6, pc}
 800f3d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3dc:	3601      	adds	r6, #1
 800f3de:	4798      	blx	r3
 800f3e0:	e7ee      	b.n	800f3c0 <__libc_init_array+0xc>
 800f3e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3e6:	3601      	adds	r6, #1
 800f3e8:	4798      	blx	r3
 800f3ea:	e7f2      	b.n	800f3d2 <__libc_init_array+0x1e>
 800f3ec:	08010318 	.word	0x08010318
 800f3f0:	08010318 	.word	0x08010318
 800f3f4:	08010318 	.word	0x08010318
 800f3f8:	0801031c 	.word	0x0801031c

0800f3fc <__retarget_lock_init_recursive>:
 800f3fc:	4770      	bx	lr

0800f3fe <__retarget_lock_acquire_recursive>:
 800f3fe:	4770      	bx	lr

0800f400 <__retarget_lock_release_recursive>:
 800f400:	4770      	bx	lr

0800f402 <memcpy>:
 800f402:	440a      	add	r2, r1
 800f404:	1e43      	subs	r3, r0, #1
 800f406:	4291      	cmp	r1, r2
 800f408:	d100      	bne.n	800f40c <memcpy+0xa>
 800f40a:	4770      	bx	lr
 800f40c:	b510      	push	{r4, lr}
 800f40e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f412:	4291      	cmp	r1, r2
 800f414:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f418:	d1f9      	bne.n	800f40e <memcpy+0xc>
 800f41a:	bd10      	pop	{r4, pc}

0800f41c <__assert_func>:
 800f41c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f41e:	4614      	mov	r4, r2
 800f420:	461a      	mov	r2, r3
 800f422:	4b09      	ldr	r3, [pc, #36]	; (800f448 <__assert_func+0x2c>)
 800f424:	4605      	mov	r5, r0
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	68d8      	ldr	r0, [r3, #12]
 800f42a:	b14c      	cbz	r4, 800f440 <__assert_func+0x24>
 800f42c:	4b07      	ldr	r3, [pc, #28]	; (800f44c <__assert_func+0x30>)
 800f42e:	9100      	str	r1, [sp, #0]
 800f430:	4907      	ldr	r1, [pc, #28]	; (800f450 <__assert_func+0x34>)
 800f432:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f436:	462b      	mov	r3, r5
 800f438:	f000 fc90 	bl	800fd5c <fiprintf>
 800f43c:	f000 fd42 	bl	800fec4 <abort>
 800f440:	4b04      	ldr	r3, [pc, #16]	; (800f454 <__assert_func+0x38>)
 800f442:	461c      	mov	r4, r3
 800f444:	e7f3      	b.n	800f42e <__assert_func+0x12>
 800f446:	bf00      	nop
 800f448:	200000e4 	.word	0x200000e4
 800f44c:	080102a7 	.word	0x080102a7
 800f450:	080102b4 	.word	0x080102b4
 800f454:	080102e2 	.word	0x080102e2

0800f458 <_free_r>:
 800f458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f45a:	2900      	cmp	r1, #0
 800f45c:	d043      	beq.n	800f4e6 <_free_r+0x8e>
 800f45e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f462:	1f0c      	subs	r4, r1, #4
 800f464:	9001      	str	r0, [sp, #4]
 800f466:	2b00      	cmp	r3, #0
 800f468:	bfb8      	it	lt
 800f46a:	18e4      	addlt	r4, r4, r3
 800f46c:	f000 f8e8 	bl	800f640 <__malloc_lock>
 800f470:	4a1e      	ldr	r2, [pc, #120]	; (800f4ec <_free_r+0x94>)
 800f472:	9801      	ldr	r0, [sp, #4]
 800f474:	6813      	ldr	r3, [r2, #0]
 800f476:	b933      	cbnz	r3, 800f486 <_free_r+0x2e>
 800f478:	6063      	str	r3, [r4, #4]
 800f47a:	6014      	str	r4, [r2, #0]
 800f47c:	b003      	add	sp, #12
 800f47e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f482:	f000 b8e3 	b.w	800f64c <__malloc_unlock>
 800f486:	42a3      	cmp	r3, r4
 800f488:	d908      	bls.n	800f49c <_free_r+0x44>
 800f48a:	6825      	ldr	r5, [r4, #0]
 800f48c:	1961      	adds	r1, r4, r5
 800f48e:	428b      	cmp	r3, r1
 800f490:	bf01      	itttt	eq
 800f492:	6819      	ldreq	r1, [r3, #0]
 800f494:	685b      	ldreq	r3, [r3, #4]
 800f496:	1949      	addeq	r1, r1, r5
 800f498:	6021      	streq	r1, [r4, #0]
 800f49a:	e7ed      	b.n	800f478 <_free_r+0x20>
 800f49c:	461a      	mov	r2, r3
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	b10b      	cbz	r3, 800f4a6 <_free_r+0x4e>
 800f4a2:	42a3      	cmp	r3, r4
 800f4a4:	d9fa      	bls.n	800f49c <_free_r+0x44>
 800f4a6:	6811      	ldr	r1, [r2, #0]
 800f4a8:	1855      	adds	r5, r2, r1
 800f4aa:	42a5      	cmp	r5, r4
 800f4ac:	d10b      	bne.n	800f4c6 <_free_r+0x6e>
 800f4ae:	6824      	ldr	r4, [r4, #0]
 800f4b0:	4421      	add	r1, r4
 800f4b2:	1854      	adds	r4, r2, r1
 800f4b4:	6011      	str	r1, [r2, #0]
 800f4b6:	42a3      	cmp	r3, r4
 800f4b8:	d1e0      	bne.n	800f47c <_free_r+0x24>
 800f4ba:	681c      	ldr	r4, [r3, #0]
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	440c      	add	r4, r1
 800f4c0:	6053      	str	r3, [r2, #4]
 800f4c2:	6014      	str	r4, [r2, #0]
 800f4c4:	e7da      	b.n	800f47c <_free_r+0x24>
 800f4c6:	d902      	bls.n	800f4ce <_free_r+0x76>
 800f4c8:	230c      	movs	r3, #12
 800f4ca:	6003      	str	r3, [r0, #0]
 800f4cc:	e7d6      	b.n	800f47c <_free_r+0x24>
 800f4ce:	6825      	ldr	r5, [r4, #0]
 800f4d0:	1961      	adds	r1, r4, r5
 800f4d2:	428b      	cmp	r3, r1
 800f4d4:	bf02      	ittt	eq
 800f4d6:	6819      	ldreq	r1, [r3, #0]
 800f4d8:	685b      	ldreq	r3, [r3, #4]
 800f4da:	1949      	addeq	r1, r1, r5
 800f4dc:	6063      	str	r3, [r4, #4]
 800f4de:	bf08      	it	eq
 800f4e0:	6021      	streq	r1, [r4, #0]
 800f4e2:	6054      	str	r4, [r2, #4]
 800f4e4:	e7ca      	b.n	800f47c <_free_r+0x24>
 800f4e6:	b003      	add	sp, #12
 800f4e8:	bd30      	pop	{r4, r5, pc}
 800f4ea:	bf00      	nop
 800f4ec:	20015a64 	.word	0x20015a64

0800f4f0 <malloc>:
 800f4f0:	4b02      	ldr	r3, [pc, #8]	; (800f4fc <malloc+0xc>)
 800f4f2:	4601      	mov	r1, r0
 800f4f4:	6818      	ldr	r0, [r3, #0]
 800f4f6:	f000 b823 	b.w	800f540 <_malloc_r>
 800f4fa:	bf00      	nop
 800f4fc:	200000e4 	.word	0x200000e4

0800f500 <sbrk_aligned>:
 800f500:	b570      	push	{r4, r5, r6, lr}
 800f502:	4e0e      	ldr	r6, [pc, #56]	; (800f53c <sbrk_aligned+0x3c>)
 800f504:	460c      	mov	r4, r1
 800f506:	4605      	mov	r5, r0
 800f508:	6831      	ldr	r1, [r6, #0]
 800f50a:	b911      	cbnz	r1, 800f512 <sbrk_aligned+0x12>
 800f50c:	f000 fcbc 	bl	800fe88 <_sbrk_r>
 800f510:	6030      	str	r0, [r6, #0]
 800f512:	4621      	mov	r1, r4
 800f514:	4628      	mov	r0, r5
 800f516:	f000 fcb7 	bl	800fe88 <_sbrk_r>
 800f51a:	1c43      	adds	r3, r0, #1
 800f51c:	d00a      	beq.n	800f534 <sbrk_aligned+0x34>
 800f51e:	1cc4      	adds	r4, r0, #3
 800f520:	f024 0403 	bic.w	r4, r4, #3
 800f524:	42a0      	cmp	r0, r4
 800f526:	d007      	beq.n	800f538 <sbrk_aligned+0x38>
 800f528:	1a21      	subs	r1, r4, r0
 800f52a:	4628      	mov	r0, r5
 800f52c:	f000 fcac 	bl	800fe88 <_sbrk_r>
 800f530:	3001      	adds	r0, #1
 800f532:	d101      	bne.n	800f538 <sbrk_aligned+0x38>
 800f534:	f04f 34ff 	mov.w	r4, #4294967295
 800f538:	4620      	mov	r0, r4
 800f53a:	bd70      	pop	{r4, r5, r6, pc}
 800f53c:	20015a68 	.word	0x20015a68

0800f540 <_malloc_r>:
 800f540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f544:	1ccd      	adds	r5, r1, #3
 800f546:	4607      	mov	r7, r0
 800f548:	f025 0503 	bic.w	r5, r5, #3
 800f54c:	3508      	adds	r5, #8
 800f54e:	2d0c      	cmp	r5, #12
 800f550:	bf38      	it	cc
 800f552:	250c      	movcc	r5, #12
 800f554:	2d00      	cmp	r5, #0
 800f556:	db01      	blt.n	800f55c <_malloc_r+0x1c>
 800f558:	42a9      	cmp	r1, r5
 800f55a:	d905      	bls.n	800f568 <_malloc_r+0x28>
 800f55c:	230c      	movs	r3, #12
 800f55e:	2600      	movs	r6, #0
 800f560:	603b      	str	r3, [r7, #0]
 800f562:	4630      	mov	r0, r6
 800f564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f568:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f63c <_malloc_r+0xfc>
 800f56c:	f000 f868 	bl	800f640 <__malloc_lock>
 800f570:	f8d8 3000 	ldr.w	r3, [r8]
 800f574:	461c      	mov	r4, r3
 800f576:	bb5c      	cbnz	r4, 800f5d0 <_malloc_r+0x90>
 800f578:	4629      	mov	r1, r5
 800f57a:	4638      	mov	r0, r7
 800f57c:	f7ff ffc0 	bl	800f500 <sbrk_aligned>
 800f580:	1c43      	adds	r3, r0, #1
 800f582:	4604      	mov	r4, r0
 800f584:	d155      	bne.n	800f632 <_malloc_r+0xf2>
 800f586:	f8d8 4000 	ldr.w	r4, [r8]
 800f58a:	4626      	mov	r6, r4
 800f58c:	2e00      	cmp	r6, #0
 800f58e:	d145      	bne.n	800f61c <_malloc_r+0xdc>
 800f590:	2c00      	cmp	r4, #0
 800f592:	d048      	beq.n	800f626 <_malloc_r+0xe6>
 800f594:	6823      	ldr	r3, [r4, #0]
 800f596:	4631      	mov	r1, r6
 800f598:	4638      	mov	r0, r7
 800f59a:	eb04 0903 	add.w	r9, r4, r3
 800f59e:	f000 fc73 	bl	800fe88 <_sbrk_r>
 800f5a2:	4581      	cmp	r9, r0
 800f5a4:	d13f      	bne.n	800f626 <_malloc_r+0xe6>
 800f5a6:	6821      	ldr	r1, [r4, #0]
 800f5a8:	4638      	mov	r0, r7
 800f5aa:	1a6d      	subs	r5, r5, r1
 800f5ac:	4629      	mov	r1, r5
 800f5ae:	f7ff ffa7 	bl	800f500 <sbrk_aligned>
 800f5b2:	3001      	adds	r0, #1
 800f5b4:	d037      	beq.n	800f626 <_malloc_r+0xe6>
 800f5b6:	6823      	ldr	r3, [r4, #0]
 800f5b8:	442b      	add	r3, r5
 800f5ba:	6023      	str	r3, [r4, #0]
 800f5bc:	f8d8 3000 	ldr.w	r3, [r8]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d038      	beq.n	800f636 <_malloc_r+0xf6>
 800f5c4:	685a      	ldr	r2, [r3, #4]
 800f5c6:	42a2      	cmp	r2, r4
 800f5c8:	d12b      	bne.n	800f622 <_malloc_r+0xe2>
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	605a      	str	r2, [r3, #4]
 800f5ce:	e00f      	b.n	800f5f0 <_malloc_r+0xb0>
 800f5d0:	6822      	ldr	r2, [r4, #0]
 800f5d2:	1b52      	subs	r2, r2, r5
 800f5d4:	d41f      	bmi.n	800f616 <_malloc_r+0xd6>
 800f5d6:	2a0b      	cmp	r2, #11
 800f5d8:	d917      	bls.n	800f60a <_malloc_r+0xca>
 800f5da:	1961      	adds	r1, r4, r5
 800f5dc:	42a3      	cmp	r3, r4
 800f5de:	6025      	str	r5, [r4, #0]
 800f5e0:	bf18      	it	ne
 800f5e2:	6059      	strne	r1, [r3, #4]
 800f5e4:	6863      	ldr	r3, [r4, #4]
 800f5e6:	bf08      	it	eq
 800f5e8:	f8c8 1000 	streq.w	r1, [r8]
 800f5ec:	5162      	str	r2, [r4, r5]
 800f5ee:	604b      	str	r3, [r1, #4]
 800f5f0:	f104 060b 	add.w	r6, r4, #11
 800f5f4:	4638      	mov	r0, r7
 800f5f6:	f000 f829 	bl	800f64c <__malloc_unlock>
 800f5fa:	1d23      	adds	r3, r4, #4
 800f5fc:	f026 0607 	bic.w	r6, r6, #7
 800f600:	1af2      	subs	r2, r6, r3
 800f602:	d0ae      	beq.n	800f562 <_malloc_r+0x22>
 800f604:	1b9b      	subs	r3, r3, r6
 800f606:	50a3      	str	r3, [r4, r2]
 800f608:	e7ab      	b.n	800f562 <_malloc_r+0x22>
 800f60a:	42a3      	cmp	r3, r4
 800f60c:	6862      	ldr	r2, [r4, #4]
 800f60e:	d1dd      	bne.n	800f5cc <_malloc_r+0x8c>
 800f610:	f8c8 2000 	str.w	r2, [r8]
 800f614:	e7ec      	b.n	800f5f0 <_malloc_r+0xb0>
 800f616:	4623      	mov	r3, r4
 800f618:	6864      	ldr	r4, [r4, #4]
 800f61a:	e7ac      	b.n	800f576 <_malloc_r+0x36>
 800f61c:	4634      	mov	r4, r6
 800f61e:	6876      	ldr	r6, [r6, #4]
 800f620:	e7b4      	b.n	800f58c <_malloc_r+0x4c>
 800f622:	4613      	mov	r3, r2
 800f624:	e7cc      	b.n	800f5c0 <_malloc_r+0x80>
 800f626:	230c      	movs	r3, #12
 800f628:	4638      	mov	r0, r7
 800f62a:	603b      	str	r3, [r7, #0]
 800f62c:	f000 f80e 	bl	800f64c <__malloc_unlock>
 800f630:	e797      	b.n	800f562 <_malloc_r+0x22>
 800f632:	6025      	str	r5, [r4, #0]
 800f634:	e7dc      	b.n	800f5f0 <_malloc_r+0xb0>
 800f636:	605b      	str	r3, [r3, #4]
 800f638:	deff      	udf	#255	; 0xff
 800f63a:	bf00      	nop
 800f63c:	20015a64 	.word	0x20015a64

0800f640 <__malloc_lock>:
 800f640:	4801      	ldr	r0, [pc, #4]	; (800f648 <__malloc_lock+0x8>)
 800f642:	f7ff bedc 	b.w	800f3fe <__retarget_lock_acquire_recursive>
 800f646:	bf00      	nop
 800f648:	20015a60 	.word	0x20015a60

0800f64c <__malloc_unlock>:
 800f64c:	4801      	ldr	r0, [pc, #4]	; (800f654 <__malloc_unlock+0x8>)
 800f64e:	f7ff bed7 	b.w	800f400 <__retarget_lock_release_recursive>
 800f652:	bf00      	nop
 800f654:	20015a60 	.word	0x20015a60

0800f658 <__sfputc_r>:
 800f658:	6893      	ldr	r3, [r2, #8]
 800f65a:	3b01      	subs	r3, #1
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	6093      	str	r3, [r2, #8]
 800f660:	b410      	push	{r4}
 800f662:	da08      	bge.n	800f676 <__sfputc_r+0x1e>
 800f664:	6994      	ldr	r4, [r2, #24]
 800f666:	42a3      	cmp	r3, r4
 800f668:	db01      	blt.n	800f66e <__sfputc_r+0x16>
 800f66a:	290a      	cmp	r1, #10
 800f66c:	d103      	bne.n	800f676 <__sfputc_r+0x1e>
 800f66e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f672:	f7ff bdb6 	b.w	800f1e2 <__swbuf_r>
 800f676:	6813      	ldr	r3, [r2, #0]
 800f678:	1c58      	adds	r0, r3, #1
 800f67a:	6010      	str	r0, [r2, #0]
 800f67c:	4608      	mov	r0, r1
 800f67e:	7019      	strb	r1, [r3, #0]
 800f680:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f684:	4770      	bx	lr

0800f686 <__sfputs_r>:
 800f686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f688:	4606      	mov	r6, r0
 800f68a:	460f      	mov	r7, r1
 800f68c:	4614      	mov	r4, r2
 800f68e:	18d5      	adds	r5, r2, r3
 800f690:	42ac      	cmp	r4, r5
 800f692:	d101      	bne.n	800f698 <__sfputs_r+0x12>
 800f694:	2000      	movs	r0, #0
 800f696:	e007      	b.n	800f6a8 <__sfputs_r+0x22>
 800f698:	463a      	mov	r2, r7
 800f69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f69e:	4630      	mov	r0, r6
 800f6a0:	f7ff ffda 	bl	800f658 <__sfputc_r>
 800f6a4:	1c43      	adds	r3, r0, #1
 800f6a6:	d1f3      	bne.n	800f690 <__sfputs_r+0xa>
 800f6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f6ac <_vfiprintf_r>:
 800f6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b0:	460d      	mov	r5, r1
 800f6b2:	b09d      	sub	sp, #116	; 0x74
 800f6b4:	4614      	mov	r4, r2
 800f6b6:	4698      	mov	r8, r3
 800f6b8:	4606      	mov	r6, r0
 800f6ba:	b118      	cbz	r0, 800f6c4 <_vfiprintf_r+0x18>
 800f6bc:	6a03      	ldr	r3, [r0, #32]
 800f6be:	b90b      	cbnz	r3, 800f6c4 <_vfiprintf_r+0x18>
 800f6c0:	f7ff fca8 	bl	800f014 <__sinit>
 800f6c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6c6:	07d9      	lsls	r1, r3, #31
 800f6c8:	d405      	bmi.n	800f6d6 <_vfiprintf_r+0x2a>
 800f6ca:	89ab      	ldrh	r3, [r5, #12]
 800f6cc:	059a      	lsls	r2, r3, #22
 800f6ce:	d402      	bmi.n	800f6d6 <_vfiprintf_r+0x2a>
 800f6d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6d2:	f7ff fe94 	bl	800f3fe <__retarget_lock_acquire_recursive>
 800f6d6:	89ab      	ldrh	r3, [r5, #12]
 800f6d8:	071b      	lsls	r3, r3, #28
 800f6da:	d501      	bpl.n	800f6e0 <_vfiprintf_r+0x34>
 800f6dc:	692b      	ldr	r3, [r5, #16]
 800f6de:	b99b      	cbnz	r3, 800f708 <_vfiprintf_r+0x5c>
 800f6e0:	4629      	mov	r1, r5
 800f6e2:	4630      	mov	r0, r6
 800f6e4:	f7ff fdba 	bl	800f25c <__swsetup_r>
 800f6e8:	b170      	cbz	r0, 800f708 <_vfiprintf_r+0x5c>
 800f6ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6ec:	07dc      	lsls	r4, r3, #31
 800f6ee:	d504      	bpl.n	800f6fa <_vfiprintf_r+0x4e>
 800f6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6f4:	b01d      	add	sp, #116	; 0x74
 800f6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6fa:	89ab      	ldrh	r3, [r5, #12]
 800f6fc:	0598      	lsls	r0, r3, #22
 800f6fe:	d4f7      	bmi.n	800f6f0 <_vfiprintf_r+0x44>
 800f700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f702:	f7ff fe7d 	bl	800f400 <__retarget_lock_release_recursive>
 800f706:	e7f3      	b.n	800f6f0 <_vfiprintf_r+0x44>
 800f708:	2300      	movs	r3, #0
 800f70a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f70e:	f04f 0901 	mov.w	r9, #1
 800f712:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800f8cc <_vfiprintf_r+0x220>
 800f716:	9309      	str	r3, [sp, #36]	; 0x24
 800f718:	2320      	movs	r3, #32
 800f71a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f71e:	2330      	movs	r3, #48	; 0x30
 800f720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f724:	4623      	mov	r3, r4
 800f726:	469a      	mov	sl, r3
 800f728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f72c:	b10a      	cbz	r2, 800f732 <_vfiprintf_r+0x86>
 800f72e:	2a25      	cmp	r2, #37	; 0x25
 800f730:	d1f9      	bne.n	800f726 <_vfiprintf_r+0x7a>
 800f732:	ebba 0b04 	subs.w	fp, sl, r4
 800f736:	d00b      	beq.n	800f750 <_vfiprintf_r+0xa4>
 800f738:	465b      	mov	r3, fp
 800f73a:	4622      	mov	r2, r4
 800f73c:	4629      	mov	r1, r5
 800f73e:	4630      	mov	r0, r6
 800f740:	f7ff ffa1 	bl	800f686 <__sfputs_r>
 800f744:	3001      	adds	r0, #1
 800f746:	f000 80a9 	beq.w	800f89c <_vfiprintf_r+0x1f0>
 800f74a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f74c:	445a      	add	r2, fp
 800f74e:	9209      	str	r2, [sp, #36]	; 0x24
 800f750:	f89a 3000 	ldrb.w	r3, [sl]
 800f754:	2b00      	cmp	r3, #0
 800f756:	f000 80a1 	beq.w	800f89c <_vfiprintf_r+0x1f0>
 800f75a:	2300      	movs	r3, #0
 800f75c:	f04f 32ff 	mov.w	r2, #4294967295
 800f760:	f10a 0a01 	add.w	sl, sl, #1
 800f764:	9304      	str	r3, [sp, #16]
 800f766:	9307      	str	r3, [sp, #28]
 800f768:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f76c:	931a      	str	r3, [sp, #104]	; 0x68
 800f76e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f772:	4654      	mov	r4, sl
 800f774:	2205      	movs	r2, #5
 800f776:	4855      	ldr	r0, [pc, #340]	; (800f8cc <_vfiprintf_r+0x220>)
 800f778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f77c:	f000 fb94 	bl	800fea8 <memchr>
 800f780:	9a04      	ldr	r2, [sp, #16]
 800f782:	b9d8      	cbnz	r0, 800f7bc <_vfiprintf_r+0x110>
 800f784:	06d1      	lsls	r1, r2, #27
 800f786:	bf44      	itt	mi
 800f788:	2320      	movmi	r3, #32
 800f78a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f78e:	0713      	lsls	r3, r2, #28
 800f790:	bf44      	itt	mi
 800f792:	232b      	movmi	r3, #43	; 0x2b
 800f794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f798:	f89a 3000 	ldrb.w	r3, [sl]
 800f79c:	2b2a      	cmp	r3, #42	; 0x2a
 800f79e:	d015      	beq.n	800f7cc <_vfiprintf_r+0x120>
 800f7a0:	9a07      	ldr	r2, [sp, #28]
 800f7a2:	4654      	mov	r4, sl
 800f7a4:	2000      	movs	r0, #0
 800f7a6:	f04f 0c0a 	mov.w	ip, #10
 800f7aa:	4621      	mov	r1, r4
 800f7ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7b0:	3b30      	subs	r3, #48	; 0x30
 800f7b2:	2b09      	cmp	r3, #9
 800f7b4:	d94d      	bls.n	800f852 <_vfiprintf_r+0x1a6>
 800f7b6:	b1b0      	cbz	r0, 800f7e6 <_vfiprintf_r+0x13a>
 800f7b8:	9207      	str	r2, [sp, #28]
 800f7ba:	e014      	b.n	800f7e6 <_vfiprintf_r+0x13a>
 800f7bc:	eba0 0308 	sub.w	r3, r0, r8
 800f7c0:	46a2      	mov	sl, r4
 800f7c2:	fa09 f303 	lsl.w	r3, r9, r3
 800f7c6:	4313      	orrs	r3, r2
 800f7c8:	9304      	str	r3, [sp, #16]
 800f7ca:	e7d2      	b.n	800f772 <_vfiprintf_r+0xc6>
 800f7cc:	9b03      	ldr	r3, [sp, #12]
 800f7ce:	1d19      	adds	r1, r3, #4
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	9103      	str	r1, [sp, #12]
 800f7d6:	bfbb      	ittet	lt
 800f7d8:	425b      	neglt	r3, r3
 800f7da:	f042 0202 	orrlt.w	r2, r2, #2
 800f7de:	9307      	strge	r3, [sp, #28]
 800f7e0:	9307      	strlt	r3, [sp, #28]
 800f7e2:	bfb8      	it	lt
 800f7e4:	9204      	strlt	r2, [sp, #16]
 800f7e6:	7823      	ldrb	r3, [r4, #0]
 800f7e8:	2b2e      	cmp	r3, #46	; 0x2e
 800f7ea:	d10c      	bne.n	800f806 <_vfiprintf_r+0x15a>
 800f7ec:	7863      	ldrb	r3, [r4, #1]
 800f7ee:	2b2a      	cmp	r3, #42	; 0x2a
 800f7f0:	d134      	bne.n	800f85c <_vfiprintf_r+0x1b0>
 800f7f2:	9b03      	ldr	r3, [sp, #12]
 800f7f4:	3402      	adds	r4, #2
 800f7f6:	1d1a      	adds	r2, r3, #4
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	9203      	str	r2, [sp, #12]
 800f7fe:	bfb8      	it	lt
 800f800:	f04f 33ff 	movlt.w	r3, #4294967295
 800f804:	9305      	str	r3, [sp, #20]
 800f806:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f8dc <_vfiprintf_r+0x230>
 800f80a:	2203      	movs	r2, #3
 800f80c:	7821      	ldrb	r1, [r4, #0]
 800f80e:	4650      	mov	r0, sl
 800f810:	f000 fb4a 	bl	800fea8 <memchr>
 800f814:	b138      	cbz	r0, 800f826 <_vfiprintf_r+0x17a>
 800f816:	eba0 000a 	sub.w	r0, r0, sl
 800f81a:	2240      	movs	r2, #64	; 0x40
 800f81c:	9b04      	ldr	r3, [sp, #16]
 800f81e:	3401      	adds	r4, #1
 800f820:	4082      	lsls	r2, r0
 800f822:	4313      	orrs	r3, r2
 800f824:	9304      	str	r3, [sp, #16]
 800f826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f82a:	2206      	movs	r2, #6
 800f82c:	4828      	ldr	r0, [pc, #160]	; (800f8d0 <_vfiprintf_r+0x224>)
 800f82e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f832:	f000 fb39 	bl	800fea8 <memchr>
 800f836:	2800      	cmp	r0, #0
 800f838:	d03f      	beq.n	800f8ba <_vfiprintf_r+0x20e>
 800f83a:	4b26      	ldr	r3, [pc, #152]	; (800f8d4 <_vfiprintf_r+0x228>)
 800f83c:	bb1b      	cbnz	r3, 800f886 <_vfiprintf_r+0x1da>
 800f83e:	9b03      	ldr	r3, [sp, #12]
 800f840:	3307      	adds	r3, #7
 800f842:	f023 0307 	bic.w	r3, r3, #7
 800f846:	3308      	adds	r3, #8
 800f848:	9303      	str	r3, [sp, #12]
 800f84a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f84c:	443b      	add	r3, r7
 800f84e:	9309      	str	r3, [sp, #36]	; 0x24
 800f850:	e768      	b.n	800f724 <_vfiprintf_r+0x78>
 800f852:	fb0c 3202 	mla	r2, ip, r2, r3
 800f856:	460c      	mov	r4, r1
 800f858:	2001      	movs	r0, #1
 800f85a:	e7a6      	b.n	800f7aa <_vfiprintf_r+0xfe>
 800f85c:	2300      	movs	r3, #0
 800f85e:	3401      	adds	r4, #1
 800f860:	f04f 0c0a 	mov.w	ip, #10
 800f864:	4619      	mov	r1, r3
 800f866:	9305      	str	r3, [sp, #20]
 800f868:	4620      	mov	r0, r4
 800f86a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f86e:	3a30      	subs	r2, #48	; 0x30
 800f870:	2a09      	cmp	r2, #9
 800f872:	d903      	bls.n	800f87c <_vfiprintf_r+0x1d0>
 800f874:	2b00      	cmp	r3, #0
 800f876:	d0c6      	beq.n	800f806 <_vfiprintf_r+0x15a>
 800f878:	9105      	str	r1, [sp, #20]
 800f87a:	e7c4      	b.n	800f806 <_vfiprintf_r+0x15a>
 800f87c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f880:	4604      	mov	r4, r0
 800f882:	2301      	movs	r3, #1
 800f884:	e7f0      	b.n	800f868 <_vfiprintf_r+0x1bc>
 800f886:	ab03      	add	r3, sp, #12
 800f888:	462a      	mov	r2, r5
 800f88a:	a904      	add	r1, sp, #16
 800f88c:	4630      	mov	r0, r6
 800f88e:	9300      	str	r3, [sp, #0]
 800f890:	4b11      	ldr	r3, [pc, #68]	; (800f8d8 <_vfiprintf_r+0x22c>)
 800f892:	f3af 8000 	nop.w
 800f896:	4607      	mov	r7, r0
 800f898:	1c78      	adds	r0, r7, #1
 800f89a:	d1d6      	bne.n	800f84a <_vfiprintf_r+0x19e>
 800f89c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f89e:	07d9      	lsls	r1, r3, #31
 800f8a0:	d405      	bmi.n	800f8ae <_vfiprintf_r+0x202>
 800f8a2:	89ab      	ldrh	r3, [r5, #12]
 800f8a4:	059a      	lsls	r2, r3, #22
 800f8a6:	d402      	bmi.n	800f8ae <_vfiprintf_r+0x202>
 800f8a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8aa:	f7ff fda9 	bl	800f400 <__retarget_lock_release_recursive>
 800f8ae:	89ab      	ldrh	r3, [r5, #12]
 800f8b0:	065b      	lsls	r3, r3, #25
 800f8b2:	f53f af1d 	bmi.w	800f6f0 <_vfiprintf_r+0x44>
 800f8b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8b8:	e71c      	b.n	800f6f4 <_vfiprintf_r+0x48>
 800f8ba:	ab03      	add	r3, sp, #12
 800f8bc:	462a      	mov	r2, r5
 800f8be:	a904      	add	r1, sp, #16
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	9300      	str	r3, [sp, #0]
 800f8c4:	4b04      	ldr	r3, [pc, #16]	; (800f8d8 <_vfiprintf_r+0x22c>)
 800f8c6:	f000 f87d 	bl	800f9c4 <_printf_i>
 800f8ca:	e7e4      	b.n	800f896 <_vfiprintf_r+0x1ea>
 800f8cc:	080102e3 	.word	0x080102e3
 800f8d0:	080102ed 	.word	0x080102ed
 800f8d4:	00000000 	.word	0x00000000
 800f8d8:	0800f687 	.word	0x0800f687
 800f8dc:	080102e9 	.word	0x080102e9

0800f8e0 <_printf_common>:
 800f8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8e4:	4616      	mov	r6, r2
 800f8e6:	4699      	mov	r9, r3
 800f8e8:	688a      	ldr	r2, [r1, #8]
 800f8ea:	4607      	mov	r7, r0
 800f8ec:	690b      	ldr	r3, [r1, #16]
 800f8ee:	460c      	mov	r4, r1
 800f8f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f8f4:	4293      	cmp	r3, r2
 800f8f6:	bfb8      	it	lt
 800f8f8:	4613      	movlt	r3, r2
 800f8fa:	6033      	str	r3, [r6, #0]
 800f8fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f900:	b10a      	cbz	r2, 800f906 <_printf_common+0x26>
 800f902:	3301      	adds	r3, #1
 800f904:	6033      	str	r3, [r6, #0]
 800f906:	6823      	ldr	r3, [r4, #0]
 800f908:	0699      	lsls	r1, r3, #26
 800f90a:	bf42      	ittt	mi
 800f90c:	6833      	ldrmi	r3, [r6, #0]
 800f90e:	3302      	addmi	r3, #2
 800f910:	6033      	strmi	r3, [r6, #0]
 800f912:	6825      	ldr	r5, [r4, #0]
 800f914:	f015 0506 	ands.w	r5, r5, #6
 800f918:	d106      	bne.n	800f928 <_printf_common+0x48>
 800f91a:	f104 0a19 	add.w	sl, r4, #25
 800f91e:	68e3      	ldr	r3, [r4, #12]
 800f920:	6832      	ldr	r2, [r6, #0]
 800f922:	1a9b      	subs	r3, r3, r2
 800f924:	42ab      	cmp	r3, r5
 800f926:	dc2b      	bgt.n	800f980 <_printf_common+0xa0>
 800f928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f92c:	1e13      	subs	r3, r2, #0
 800f92e:	6822      	ldr	r2, [r4, #0]
 800f930:	bf18      	it	ne
 800f932:	2301      	movne	r3, #1
 800f934:	0692      	lsls	r2, r2, #26
 800f936:	d430      	bmi.n	800f99a <_printf_common+0xba>
 800f938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f93c:	4649      	mov	r1, r9
 800f93e:	4638      	mov	r0, r7
 800f940:	47c0      	blx	r8
 800f942:	3001      	adds	r0, #1
 800f944:	d023      	beq.n	800f98e <_printf_common+0xae>
 800f946:	6823      	ldr	r3, [r4, #0]
 800f948:	341a      	adds	r4, #26
 800f94a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800f94e:	f003 0306 	and.w	r3, r3, #6
 800f952:	2b04      	cmp	r3, #4
 800f954:	bf0a      	itet	eq
 800f956:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800f95a:	2500      	movne	r5, #0
 800f95c:	6833      	ldreq	r3, [r6, #0]
 800f95e:	f04f 0600 	mov.w	r6, #0
 800f962:	bf08      	it	eq
 800f964:	1aed      	subeq	r5, r5, r3
 800f966:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f96a:	bf08      	it	eq
 800f96c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f970:	4293      	cmp	r3, r2
 800f972:	bfc4      	itt	gt
 800f974:	1a9b      	subgt	r3, r3, r2
 800f976:	18ed      	addgt	r5, r5, r3
 800f978:	42b5      	cmp	r5, r6
 800f97a:	d11a      	bne.n	800f9b2 <_printf_common+0xd2>
 800f97c:	2000      	movs	r0, #0
 800f97e:	e008      	b.n	800f992 <_printf_common+0xb2>
 800f980:	2301      	movs	r3, #1
 800f982:	4652      	mov	r2, sl
 800f984:	4649      	mov	r1, r9
 800f986:	4638      	mov	r0, r7
 800f988:	47c0      	blx	r8
 800f98a:	3001      	adds	r0, #1
 800f98c:	d103      	bne.n	800f996 <_printf_common+0xb6>
 800f98e:	f04f 30ff 	mov.w	r0, #4294967295
 800f992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f996:	3501      	adds	r5, #1
 800f998:	e7c1      	b.n	800f91e <_printf_common+0x3e>
 800f99a:	18e1      	adds	r1, r4, r3
 800f99c:	1c5a      	adds	r2, r3, #1
 800f99e:	2030      	movs	r0, #48	; 0x30
 800f9a0:	3302      	adds	r3, #2
 800f9a2:	4422      	add	r2, r4
 800f9a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f9a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f9ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f9b0:	e7c2      	b.n	800f938 <_printf_common+0x58>
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	4622      	mov	r2, r4
 800f9b6:	4649      	mov	r1, r9
 800f9b8:	4638      	mov	r0, r7
 800f9ba:	47c0      	blx	r8
 800f9bc:	3001      	adds	r0, #1
 800f9be:	d0e6      	beq.n	800f98e <_printf_common+0xae>
 800f9c0:	3601      	adds	r6, #1
 800f9c2:	e7d9      	b.n	800f978 <_printf_common+0x98>

0800f9c4 <_printf_i>:
 800f9c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f9c8:	7e0f      	ldrb	r7, [r1, #24]
 800f9ca:	4691      	mov	r9, r2
 800f9cc:	4680      	mov	r8, r0
 800f9ce:	460c      	mov	r4, r1
 800f9d0:	2f78      	cmp	r7, #120	; 0x78
 800f9d2:	469a      	mov	sl, r3
 800f9d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f9d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f9da:	d807      	bhi.n	800f9ec <_printf_i+0x28>
 800f9dc:	2f62      	cmp	r7, #98	; 0x62
 800f9de:	d80a      	bhi.n	800f9f6 <_printf_i+0x32>
 800f9e0:	2f00      	cmp	r7, #0
 800f9e2:	f000 80d3 	beq.w	800fb8c <_printf_i+0x1c8>
 800f9e6:	2f58      	cmp	r7, #88	; 0x58
 800f9e8:	f000 80bf 	beq.w	800fb6a <_printf_i+0x1a6>
 800f9ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f9f4:	e03a      	b.n	800fa6c <_printf_i+0xa8>
 800f9f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f9fa:	2b15      	cmp	r3, #21
 800f9fc:	d8f6      	bhi.n	800f9ec <_printf_i+0x28>
 800f9fe:	a101      	add	r1, pc, #4	; (adr r1, 800fa04 <_printf_i+0x40>)
 800fa00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa04:	0800fa5d 	.word	0x0800fa5d
 800fa08:	0800fa71 	.word	0x0800fa71
 800fa0c:	0800f9ed 	.word	0x0800f9ed
 800fa10:	0800f9ed 	.word	0x0800f9ed
 800fa14:	0800f9ed 	.word	0x0800f9ed
 800fa18:	0800f9ed 	.word	0x0800f9ed
 800fa1c:	0800fa71 	.word	0x0800fa71
 800fa20:	0800f9ed 	.word	0x0800f9ed
 800fa24:	0800f9ed 	.word	0x0800f9ed
 800fa28:	0800f9ed 	.word	0x0800f9ed
 800fa2c:	0800f9ed 	.word	0x0800f9ed
 800fa30:	0800fb73 	.word	0x0800fb73
 800fa34:	0800fa9d 	.word	0x0800fa9d
 800fa38:	0800fb2f 	.word	0x0800fb2f
 800fa3c:	0800f9ed 	.word	0x0800f9ed
 800fa40:	0800f9ed 	.word	0x0800f9ed
 800fa44:	0800fb95 	.word	0x0800fb95
 800fa48:	0800f9ed 	.word	0x0800f9ed
 800fa4c:	0800fa9d 	.word	0x0800fa9d
 800fa50:	0800f9ed 	.word	0x0800f9ed
 800fa54:	0800f9ed 	.word	0x0800f9ed
 800fa58:	0800fb37 	.word	0x0800fb37
 800fa5c:	682b      	ldr	r3, [r5, #0]
 800fa5e:	1d1a      	adds	r2, r3, #4
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	602a      	str	r2, [r5, #0]
 800fa64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	e09e      	b.n	800fbae <_printf_i+0x1ea>
 800fa70:	6820      	ldr	r0, [r4, #0]
 800fa72:	682b      	ldr	r3, [r5, #0]
 800fa74:	0607      	lsls	r7, r0, #24
 800fa76:	f103 0104 	add.w	r1, r3, #4
 800fa7a:	6029      	str	r1, [r5, #0]
 800fa7c:	d501      	bpl.n	800fa82 <_printf_i+0xbe>
 800fa7e:	681e      	ldr	r6, [r3, #0]
 800fa80:	e003      	b.n	800fa8a <_printf_i+0xc6>
 800fa82:	0646      	lsls	r6, r0, #25
 800fa84:	d5fb      	bpl.n	800fa7e <_printf_i+0xba>
 800fa86:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fa8a:	2e00      	cmp	r6, #0
 800fa8c:	da03      	bge.n	800fa96 <_printf_i+0xd2>
 800fa8e:	232d      	movs	r3, #45	; 0x2d
 800fa90:	4276      	negs	r6, r6
 800fa92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa96:	4859      	ldr	r0, [pc, #356]	; (800fbfc <_printf_i+0x238>)
 800fa98:	230a      	movs	r3, #10
 800fa9a:	e012      	b.n	800fac2 <_printf_i+0xfe>
 800fa9c:	682b      	ldr	r3, [r5, #0]
 800fa9e:	6820      	ldr	r0, [r4, #0]
 800faa0:	1d19      	adds	r1, r3, #4
 800faa2:	6029      	str	r1, [r5, #0]
 800faa4:	0605      	lsls	r5, r0, #24
 800faa6:	d501      	bpl.n	800faac <_printf_i+0xe8>
 800faa8:	681e      	ldr	r6, [r3, #0]
 800faaa:	e002      	b.n	800fab2 <_printf_i+0xee>
 800faac:	0641      	lsls	r1, r0, #25
 800faae:	d5fb      	bpl.n	800faa8 <_printf_i+0xe4>
 800fab0:	881e      	ldrh	r6, [r3, #0]
 800fab2:	2f6f      	cmp	r7, #111	; 0x6f
 800fab4:	4851      	ldr	r0, [pc, #324]	; (800fbfc <_printf_i+0x238>)
 800fab6:	bf0c      	ite	eq
 800fab8:	2308      	moveq	r3, #8
 800faba:	230a      	movne	r3, #10
 800fabc:	2100      	movs	r1, #0
 800fabe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fac2:	6865      	ldr	r5, [r4, #4]
 800fac4:	2d00      	cmp	r5, #0
 800fac6:	60a5      	str	r5, [r4, #8]
 800fac8:	bfa2      	ittt	ge
 800faca:	6821      	ldrge	r1, [r4, #0]
 800facc:	f021 0104 	bicge.w	r1, r1, #4
 800fad0:	6021      	strge	r1, [r4, #0]
 800fad2:	b90e      	cbnz	r6, 800fad8 <_printf_i+0x114>
 800fad4:	2d00      	cmp	r5, #0
 800fad6:	d04a      	beq.n	800fb6e <_printf_i+0x1aa>
 800fad8:	4615      	mov	r5, r2
 800fada:	fbb6 f1f3 	udiv	r1, r6, r3
 800fade:	fb03 6711 	mls	r7, r3, r1, r6
 800fae2:	5dc7      	ldrb	r7, [r0, r7]
 800fae4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fae8:	4637      	mov	r7, r6
 800faea:	460e      	mov	r6, r1
 800faec:	42bb      	cmp	r3, r7
 800faee:	d9f4      	bls.n	800fada <_printf_i+0x116>
 800faf0:	2b08      	cmp	r3, #8
 800faf2:	d10b      	bne.n	800fb0c <_printf_i+0x148>
 800faf4:	6823      	ldr	r3, [r4, #0]
 800faf6:	07de      	lsls	r6, r3, #31
 800faf8:	d508      	bpl.n	800fb0c <_printf_i+0x148>
 800fafa:	6923      	ldr	r3, [r4, #16]
 800fafc:	6861      	ldr	r1, [r4, #4]
 800fafe:	4299      	cmp	r1, r3
 800fb00:	bfde      	ittt	le
 800fb02:	2330      	movle	r3, #48	; 0x30
 800fb04:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb08:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fb0c:	1b52      	subs	r2, r2, r5
 800fb0e:	6122      	str	r2, [r4, #16]
 800fb10:	464b      	mov	r3, r9
 800fb12:	aa03      	add	r2, sp, #12
 800fb14:	4621      	mov	r1, r4
 800fb16:	4640      	mov	r0, r8
 800fb18:	f8cd a000 	str.w	sl, [sp]
 800fb1c:	f7ff fee0 	bl	800f8e0 <_printf_common>
 800fb20:	3001      	adds	r0, #1
 800fb22:	d149      	bne.n	800fbb8 <_printf_i+0x1f4>
 800fb24:	f04f 30ff 	mov.w	r0, #4294967295
 800fb28:	b004      	add	sp, #16
 800fb2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb2e:	6823      	ldr	r3, [r4, #0]
 800fb30:	f043 0320 	orr.w	r3, r3, #32
 800fb34:	6023      	str	r3, [r4, #0]
 800fb36:	2778      	movs	r7, #120	; 0x78
 800fb38:	4831      	ldr	r0, [pc, #196]	; (800fc00 <_printf_i+0x23c>)
 800fb3a:	6823      	ldr	r3, [r4, #0]
 800fb3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fb40:	061f      	lsls	r7, r3, #24
 800fb42:	6829      	ldr	r1, [r5, #0]
 800fb44:	f851 6b04 	ldr.w	r6, [r1], #4
 800fb48:	d402      	bmi.n	800fb50 <_printf_i+0x18c>
 800fb4a:	065f      	lsls	r7, r3, #25
 800fb4c:	bf48      	it	mi
 800fb4e:	b2b6      	uxthmi	r6, r6
 800fb50:	07df      	lsls	r7, r3, #31
 800fb52:	6029      	str	r1, [r5, #0]
 800fb54:	bf44      	itt	mi
 800fb56:	f043 0320 	orrmi.w	r3, r3, #32
 800fb5a:	6023      	strmi	r3, [r4, #0]
 800fb5c:	b91e      	cbnz	r6, 800fb66 <_printf_i+0x1a2>
 800fb5e:	6823      	ldr	r3, [r4, #0]
 800fb60:	f023 0320 	bic.w	r3, r3, #32
 800fb64:	6023      	str	r3, [r4, #0]
 800fb66:	2310      	movs	r3, #16
 800fb68:	e7a8      	b.n	800fabc <_printf_i+0xf8>
 800fb6a:	4824      	ldr	r0, [pc, #144]	; (800fbfc <_printf_i+0x238>)
 800fb6c:	e7e5      	b.n	800fb3a <_printf_i+0x176>
 800fb6e:	4615      	mov	r5, r2
 800fb70:	e7be      	b.n	800faf0 <_printf_i+0x12c>
 800fb72:	682b      	ldr	r3, [r5, #0]
 800fb74:	6826      	ldr	r6, [r4, #0]
 800fb76:	1d18      	adds	r0, r3, #4
 800fb78:	6961      	ldr	r1, [r4, #20]
 800fb7a:	6028      	str	r0, [r5, #0]
 800fb7c:	0635      	lsls	r5, r6, #24
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	d501      	bpl.n	800fb86 <_printf_i+0x1c2>
 800fb82:	6019      	str	r1, [r3, #0]
 800fb84:	e002      	b.n	800fb8c <_printf_i+0x1c8>
 800fb86:	0670      	lsls	r0, r6, #25
 800fb88:	d5fb      	bpl.n	800fb82 <_printf_i+0x1be>
 800fb8a:	8019      	strh	r1, [r3, #0]
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	4615      	mov	r5, r2
 800fb90:	6123      	str	r3, [r4, #16]
 800fb92:	e7bd      	b.n	800fb10 <_printf_i+0x14c>
 800fb94:	682b      	ldr	r3, [r5, #0]
 800fb96:	2100      	movs	r1, #0
 800fb98:	1d1a      	adds	r2, r3, #4
 800fb9a:	602a      	str	r2, [r5, #0]
 800fb9c:	681d      	ldr	r5, [r3, #0]
 800fb9e:	6862      	ldr	r2, [r4, #4]
 800fba0:	4628      	mov	r0, r5
 800fba2:	f000 f981 	bl	800fea8 <memchr>
 800fba6:	b108      	cbz	r0, 800fbac <_printf_i+0x1e8>
 800fba8:	1b40      	subs	r0, r0, r5
 800fbaa:	6060      	str	r0, [r4, #4]
 800fbac:	6863      	ldr	r3, [r4, #4]
 800fbae:	6123      	str	r3, [r4, #16]
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbb6:	e7ab      	b.n	800fb10 <_printf_i+0x14c>
 800fbb8:	6923      	ldr	r3, [r4, #16]
 800fbba:	462a      	mov	r2, r5
 800fbbc:	4649      	mov	r1, r9
 800fbbe:	4640      	mov	r0, r8
 800fbc0:	47d0      	blx	sl
 800fbc2:	3001      	adds	r0, #1
 800fbc4:	d0ae      	beq.n	800fb24 <_printf_i+0x160>
 800fbc6:	6823      	ldr	r3, [r4, #0]
 800fbc8:	079b      	lsls	r3, r3, #30
 800fbca:	d413      	bmi.n	800fbf4 <_printf_i+0x230>
 800fbcc:	68e0      	ldr	r0, [r4, #12]
 800fbce:	9b03      	ldr	r3, [sp, #12]
 800fbd0:	4298      	cmp	r0, r3
 800fbd2:	bfb8      	it	lt
 800fbd4:	4618      	movlt	r0, r3
 800fbd6:	e7a7      	b.n	800fb28 <_printf_i+0x164>
 800fbd8:	2301      	movs	r3, #1
 800fbda:	4632      	mov	r2, r6
 800fbdc:	4649      	mov	r1, r9
 800fbde:	4640      	mov	r0, r8
 800fbe0:	47d0      	blx	sl
 800fbe2:	3001      	adds	r0, #1
 800fbe4:	d09e      	beq.n	800fb24 <_printf_i+0x160>
 800fbe6:	3501      	adds	r5, #1
 800fbe8:	68e3      	ldr	r3, [r4, #12]
 800fbea:	9903      	ldr	r1, [sp, #12]
 800fbec:	1a5b      	subs	r3, r3, r1
 800fbee:	42ab      	cmp	r3, r5
 800fbf0:	dcf2      	bgt.n	800fbd8 <_printf_i+0x214>
 800fbf2:	e7eb      	b.n	800fbcc <_printf_i+0x208>
 800fbf4:	2500      	movs	r5, #0
 800fbf6:	f104 0619 	add.w	r6, r4, #25
 800fbfa:	e7f5      	b.n	800fbe8 <_printf_i+0x224>
 800fbfc:	080102f4 	.word	0x080102f4
 800fc00:	08010305 	.word	0x08010305

0800fc04 <__sflush_r>:
 800fc04:	898a      	ldrh	r2, [r1, #12]
 800fc06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc0a:	4605      	mov	r5, r0
 800fc0c:	0710      	lsls	r0, r2, #28
 800fc0e:	460c      	mov	r4, r1
 800fc10:	d458      	bmi.n	800fcc4 <__sflush_r+0xc0>
 800fc12:	684b      	ldr	r3, [r1, #4]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	dc05      	bgt.n	800fc24 <__sflush_r+0x20>
 800fc18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	dc02      	bgt.n	800fc24 <__sflush_r+0x20>
 800fc1e:	2000      	movs	r0, #0
 800fc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc26:	2e00      	cmp	r6, #0
 800fc28:	d0f9      	beq.n	800fc1e <__sflush_r+0x1a>
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fc30:	682f      	ldr	r7, [r5, #0]
 800fc32:	6a21      	ldr	r1, [r4, #32]
 800fc34:	602b      	str	r3, [r5, #0]
 800fc36:	d032      	beq.n	800fc9e <__sflush_r+0x9a>
 800fc38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fc3a:	89a3      	ldrh	r3, [r4, #12]
 800fc3c:	075a      	lsls	r2, r3, #29
 800fc3e:	d505      	bpl.n	800fc4c <__sflush_r+0x48>
 800fc40:	6863      	ldr	r3, [r4, #4]
 800fc42:	1ac0      	subs	r0, r0, r3
 800fc44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc46:	b10b      	cbz	r3, 800fc4c <__sflush_r+0x48>
 800fc48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc4a:	1ac0      	subs	r0, r0, r3
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	4602      	mov	r2, r0
 800fc50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc52:	4628      	mov	r0, r5
 800fc54:	6a21      	ldr	r1, [r4, #32]
 800fc56:	47b0      	blx	r6
 800fc58:	1c43      	adds	r3, r0, #1
 800fc5a:	89a3      	ldrh	r3, [r4, #12]
 800fc5c:	d106      	bne.n	800fc6c <__sflush_r+0x68>
 800fc5e:	6829      	ldr	r1, [r5, #0]
 800fc60:	291d      	cmp	r1, #29
 800fc62:	d82b      	bhi.n	800fcbc <__sflush_r+0xb8>
 800fc64:	4a28      	ldr	r2, [pc, #160]	; (800fd08 <__sflush_r+0x104>)
 800fc66:	410a      	asrs	r2, r1
 800fc68:	07d6      	lsls	r6, r2, #31
 800fc6a:	d427      	bmi.n	800fcbc <__sflush_r+0xb8>
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	04d9      	lsls	r1, r3, #19
 800fc70:	6062      	str	r2, [r4, #4]
 800fc72:	6922      	ldr	r2, [r4, #16]
 800fc74:	6022      	str	r2, [r4, #0]
 800fc76:	d504      	bpl.n	800fc82 <__sflush_r+0x7e>
 800fc78:	1c42      	adds	r2, r0, #1
 800fc7a:	d101      	bne.n	800fc80 <__sflush_r+0x7c>
 800fc7c:	682b      	ldr	r3, [r5, #0]
 800fc7e:	b903      	cbnz	r3, 800fc82 <__sflush_r+0x7e>
 800fc80:	6560      	str	r0, [r4, #84]	; 0x54
 800fc82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc84:	602f      	str	r7, [r5, #0]
 800fc86:	2900      	cmp	r1, #0
 800fc88:	d0c9      	beq.n	800fc1e <__sflush_r+0x1a>
 800fc8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc8e:	4299      	cmp	r1, r3
 800fc90:	d002      	beq.n	800fc98 <__sflush_r+0x94>
 800fc92:	4628      	mov	r0, r5
 800fc94:	f7ff fbe0 	bl	800f458 <_free_r>
 800fc98:	2000      	movs	r0, #0
 800fc9a:	6360      	str	r0, [r4, #52]	; 0x34
 800fc9c:	e7c0      	b.n	800fc20 <__sflush_r+0x1c>
 800fc9e:	2301      	movs	r3, #1
 800fca0:	4628      	mov	r0, r5
 800fca2:	47b0      	blx	r6
 800fca4:	1c41      	adds	r1, r0, #1
 800fca6:	d1c8      	bne.n	800fc3a <__sflush_r+0x36>
 800fca8:	682b      	ldr	r3, [r5, #0]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d0c5      	beq.n	800fc3a <__sflush_r+0x36>
 800fcae:	2b1d      	cmp	r3, #29
 800fcb0:	d001      	beq.n	800fcb6 <__sflush_r+0xb2>
 800fcb2:	2b16      	cmp	r3, #22
 800fcb4:	d101      	bne.n	800fcba <__sflush_r+0xb6>
 800fcb6:	602f      	str	r7, [r5, #0]
 800fcb8:	e7b1      	b.n	800fc1e <__sflush_r+0x1a>
 800fcba:	89a3      	ldrh	r3, [r4, #12]
 800fcbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcc0:	81a3      	strh	r3, [r4, #12]
 800fcc2:	e7ad      	b.n	800fc20 <__sflush_r+0x1c>
 800fcc4:	690f      	ldr	r7, [r1, #16]
 800fcc6:	2f00      	cmp	r7, #0
 800fcc8:	d0a9      	beq.n	800fc1e <__sflush_r+0x1a>
 800fcca:	0793      	lsls	r3, r2, #30
 800fccc:	680e      	ldr	r6, [r1, #0]
 800fcce:	600f      	str	r7, [r1, #0]
 800fcd0:	bf0c      	ite	eq
 800fcd2:	694b      	ldreq	r3, [r1, #20]
 800fcd4:	2300      	movne	r3, #0
 800fcd6:	eba6 0807 	sub.w	r8, r6, r7
 800fcda:	608b      	str	r3, [r1, #8]
 800fcdc:	f1b8 0f00 	cmp.w	r8, #0
 800fce0:	dd9d      	ble.n	800fc1e <__sflush_r+0x1a>
 800fce2:	4643      	mov	r3, r8
 800fce4:	463a      	mov	r2, r7
 800fce6:	6a21      	ldr	r1, [r4, #32]
 800fce8:	4628      	mov	r0, r5
 800fcea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fcec:	47b0      	blx	r6
 800fcee:	2800      	cmp	r0, #0
 800fcf0:	dc06      	bgt.n	800fd00 <__sflush_r+0xfc>
 800fcf2:	89a3      	ldrh	r3, [r4, #12]
 800fcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcfc:	81a3      	strh	r3, [r4, #12]
 800fcfe:	e78f      	b.n	800fc20 <__sflush_r+0x1c>
 800fd00:	4407      	add	r7, r0
 800fd02:	eba8 0800 	sub.w	r8, r8, r0
 800fd06:	e7e9      	b.n	800fcdc <__sflush_r+0xd8>
 800fd08:	dfbffffe 	.word	0xdfbffffe

0800fd0c <_fflush_r>:
 800fd0c:	b538      	push	{r3, r4, r5, lr}
 800fd0e:	690b      	ldr	r3, [r1, #16]
 800fd10:	4605      	mov	r5, r0
 800fd12:	460c      	mov	r4, r1
 800fd14:	b913      	cbnz	r3, 800fd1c <_fflush_r+0x10>
 800fd16:	2500      	movs	r5, #0
 800fd18:	4628      	mov	r0, r5
 800fd1a:	bd38      	pop	{r3, r4, r5, pc}
 800fd1c:	b118      	cbz	r0, 800fd26 <_fflush_r+0x1a>
 800fd1e:	6a03      	ldr	r3, [r0, #32]
 800fd20:	b90b      	cbnz	r3, 800fd26 <_fflush_r+0x1a>
 800fd22:	f7ff f977 	bl	800f014 <__sinit>
 800fd26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d0f3      	beq.n	800fd16 <_fflush_r+0xa>
 800fd2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fd30:	07d0      	lsls	r0, r2, #31
 800fd32:	d404      	bmi.n	800fd3e <_fflush_r+0x32>
 800fd34:	0599      	lsls	r1, r3, #22
 800fd36:	d402      	bmi.n	800fd3e <_fflush_r+0x32>
 800fd38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd3a:	f7ff fb60 	bl	800f3fe <__retarget_lock_acquire_recursive>
 800fd3e:	4628      	mov	r0, r5
 800fd40:	4621      	mov	r1, r4
 800fd42:	f7ff ff5f 	bl	800fc04 <__sflush_r>
 800fd46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd48:	4605      	mov	r5, r0
 800fd4a:	07da      	lsls	r2, r3, #31
 800fd4c:	d4e4      	bmi.n	800fd18 <_fflush_r+0xc>
 800fd4e:	89a3      	ldrh	r3, [r4, #12]
 800fd50:	059b      	lsls	r3, r3, #22
 800fd52:	d4e1      	bmi.n	800fd18 <_fflush_r+0xc>
 800fd54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd56:	f7ff fb53 	bl	800f400 <__retarget_lock_release_recursive>
 800fd5a:	e7dd      	b.n	800fd18 <_fflush_r+0xc>

0800fd5c <fiprintf>:
 800fd5c:	b40e      	push	{r1, r2, r3}
 800fd5e:	b503      	push	{r0, r1, lr}
 800fd60:	ab03      	add	r3, sp, #12
 800fd62:	4601      	mov	r1, r0
 800fd64:	4805      	ldr	r0, [pc, #20]	; (800fd7c <fiprintf+0x20>)
 800fd66:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd6a:	6800      	ldr	r0, [r0, #0]
 800fd6c:	9301      	str	r3, [sp, #4]
 800fd6e:	f7ff fc9d 	bl	800f6ac <_vfiprintf_r>
 800fd72:	b002      	add	sp, #8
 800fd74:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd78:	b003      	add	sp, #12
 800fd7a:	4770      	bx	lr
 800fd7c:	200000e4 	.word	0x200000e4

0800fd80 <__swhatbuf_r>:
 800fd80:	b570      	push	{r4, r5, r6, lr}
 800fd82:	460c      	mov	r4, r1
 800fd84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd88:	b096      	sub	sp, #88	; 0x58
 800fd8a:	4615      	mov	r5, r2
 800fd8c:	2900      	cmp	r1, #0
 800fd8e:	461e      	mov	r6, r3
 800fd90:	da0c      	bge.n	800fdac <__swhatbuf_r+0x2c>
 800fd92:	89a3      	ldrh	r3, [r4, #12]
 800fd94:	2100      	movs	r1, #0
 800fd96:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fd9a:	bf0c      	ite	eq
 800fd9c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fda0:	2340      	movne	r3, #64	; 0x40
 800fda2:	2000      	movs	r0, #0
 800fda4:	6031      	str	r1, [r6, #0]
 800fda6:	602b      	str	r3, [r5, #0]
 800fda8:	b016      	add	sp, #88	; 0x58
 800fdaa:	bd70      	pop	{r4, r5, r6, pc}
 800fdac:	466a      	mov	r2, sp
 800fdae:	f000 f849 	bl	800fe44 <_fstat_r>
 800fdb2:	2800      	cmp	r0, #0
 800fdb4:	dbed      	blt.n	800fd92 <__swhatbuf_r+0x12>
 800fdb6:	9901      	ldr	r1, [sp, #4]
 800fdb8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fdbc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fdc0:	4259      	negs	r1, r3
 800fdc2:	4159      	adcs	r1, r3
 800fdc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fdc8:	e7eb      	b.n	800fda2 <__swhatbuf_r+0x22>

0800fdca <__smakebuf_r>:
 800fdca:	898b      	ldrh	r3, [r1, #12]
 800fdcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fdce:	079d      	lsls	r5, r3, #30
 800fdd0:	4606      	mov	r6, r0
 800fdd2:	460c      	mov	r4, r1
 800fdd4:	d507      	bpl.n	800fde6 <__smakebuf_r+0x1c>
 800fdd6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fdda:	6023      	str	r3, [r4, #0]
 800fddc:	6123      	str	r3, [r4, #16]
 800fdde:	2301      	movs	r3, #1
 800fde0:	6163      	str	r3, [r4, #20]
 800fde2:	b002      	add	sp, #8
 800fde4:	bd70      	pop	{r4, r5, r6, pc}
 800fde6:	ab01      	add	r3, sp, #4
 800fde8:	466a      	mov	r2, sp
 800fdea:	f7ff ffc9 	bl	800fd80 <__swhatbuf_r>
 800fdee:	9900      	ldr	r1, [sp, #0]
 800fdf0:	4605      	mov	r5, r0
 800fdf2:	4630      	mov	r0, r6
 800fdf4:	f7ff fba4 	bl	800f540 <_malloc_r>
 800fdf8:	b948      	cbnz	r0, 800fe0e <__smakebuf_r+0x44>
 800fdfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdfe:	059a      	lsls	r2, r3, #22
 800fe00:	d4ef      	bmi.n	800fde2 <__smakebuf_r+0x18>
 800fe02:	f023 0303 	bic.w	r3, r3, #3
 800fe06:	f043 0302 	orr.w	r3, r3, #2
 800fe0a:	81a3      	strh	r3, [r4, #12]
 800fe0c:	e7e3      	b.n	800fdd6 <__smakebuf_r+0xc>
 800fe0e:	89a3      	ldrh	r3, [r4, #12]
 800fe10:	6020      	str	r0, [r4, #0]
 800fe12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe16:	6120      	str	r0, [r4, #16]
 800fe18:	81a3      	strh	r3, [r4, #12]
 800fe1a:	9b00      	ldr	r3, [sp, #0]
 800fe1c:	6163      	str	r3, [r4, #20]
 800fe1e:	9b01      	ldr	r3, [sp, #4]
 800fe20:	b15b      	cbz	r3, 800fe3a <__smakebuf_r+0x70>
 800fe22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe26:	4630      	mov	r0, r6
 800fe28:	f000 f81e 	bl	800fe68 <_isatty_r>
 800fe2c:	b128      	cbz	r0, 800fe3a <__smakebuf_r+0x70>
 800fe2e:	89a3      	ldrh	r3, [r4, #12]
 800fe30:	f023 0303 	bic.w	r3, r3, #3
 800fe34:	f043 0301 	orr.w	r3, r3, #1
 800fe38:	81a3      	strh	r3, [r4, #12]
 800fe3a:	89a3      	ldrh	r3, [r4, #12]
 800fe3c:	431d      	orrs	r5, r3
 800fe3e:	81a5      	strh	r5, [r4, #12]
 800fe40:	e7cf      	b.n	800fde2 <__smakebuf_r+0x18>
	...

0800fe44 <_fstat_r>:
 800fe44:	b538      	push	{r3, r4, r5, lr}
 800fe46:	2300      	movs	r3, #0
 800fe48:	4d06      	ldr	r5, [pc, #24]	; (800fe64 <_fstat_r+0x20>)
 800fe4a:	4604      	mov	r4, r0
 800fe4c:	4608      	mov	r0, r1
 800fe4e:	4611      	mov	r1, r2
 800fe50:	602b      	str	r3, [r5, #0]
 800fe52:	f7f0 ff26 	bl	8000ca2 <_fstat>
 800fe56:	1c43      	adds	r3, r0, #1
 800fe58:	d102      	bne.n	800fe60 <_fstat_r+0x1c>
 800fe5a:	682b      	ldr	r3, [r5, #0]
 800fe5c:	b103      	cbz	r3, 800fe60 <_fstat_r+0x1c>
 800fe5e:	6023      	str	r3, [r4, #0]
 800fe60:	bd38      	pop	{r3, r4, r5, pc}
 800fe62:	bf00      	nop
 800fe64:	20015a5c 	.word	0x20015a5c

0800fe68 <_isatty_r>:
 800fe68:	b538      	push	{r3, r4, r5, lr}
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	4d05      	ldr	r5, [pc, #20]	; (800fe84 <_isatty_r+0x1c>)
 800fe6e:	4604      	mov	r4, r0
 800fe70:	4608      	mov	r0, r1
 800fe72:	602b      	str	r3, [r5, #0]
 800fe74:	f7f0 ff25 	bl	8000cc2 <_isatty>
 800fe78:	1c43      	adds	r3, r0, #1
 800fe7a:	d102      	bne.n	800fe82 <_isatty_r+0x1a>
 800fe7c:	682b      	ldr	r3, [r5, #0]
 800fe7e:	b103      	cbz	r3, 800fe82 <_isatty_r+0x1a>
 800fe80:	6023      	str	r3, [r4, #0]
 800fe82:	bd38      	pop	{r3, r4, r5, pc}
 800fe84:	20015a5c 	.word	0x20015a5c

0800fe88 <_sbrk_r>:
 800fe88:	b538      	push	{r3, r4, r5, lr}
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	4d05      	ldr	r5, [pc, #20]	; (800fea4 <_sbrk_r+0x1c>)
 800fe8e:	4604      	mov	r4, r0
 800fe90:	4608      	mov	r0, r1
 800fe92:	602b      	str	r3, [r5, #0]
 800fe94:	f7f0 ff2e 	bl	8000cf4 <_sbrk>
 800fe98:	1c43      	adds	r3, r0, #1
 800fe9a:	d102      	bne.n	800fea2 <_sbrk_r+0x1a>
 800fe9c:	682b      	ldr	r3, [r5, #0]
 800fe9e:	b103      	cbz	r3, 800fea2 <_sbrk_r+0x1a>
 800fea0:	6023      	str	r3, [r4, #0]
 800fea2:	bd38      	pop	{r3, r4, r5, pc}
 800fea4:	20015a5c 	.word	0x20015a5c

0800fea8 <memchr>:
 800fea8:	b2c9      	uxtb	r1, r1
 800feaa:	4402      	add	r2, r0
 800feac:	b510      	push	{r4, lr}
 800feae:	4290      	cmp	r0, r2
 800feb0:	4603      	mov	r3, r0
 800feb2:	d101      	bne.n	800feb8 <memchr+0x10>
 800feb4:	2300      	movs	r3, #0
 800feb6:	e003      	b.n	800fec0 <memchr+0x18>
 800feb8:	781c      	ldrb	r4, [r3, #0]
 800feba:	3001      	adds	r0, #1
 800febc:	428c      	cmp	r4, r1
 800febe:	d1f6      	bne.n	800feae <memchr+0x6>
 800fec0:	4618      	mov	r0, r3
 800fec2:	bd10      	pop	{r4, pc}

0800fec4 <abort>:
 800fec4:	2006      	movs	r0, #6
 800fec6:	b508      	push	{r3, lr}
 800fec8:	f000 f82c 	bl	800ff24 <raise>
 800fecc:	2001      	movs	r0, #1
 800fece:	f7f0 fe99 	bl	8000c04 <_exit>

0800fed2 <_raise_r>:
 800fed2:	291f      	cmp	r1, #31
 800fed4:	b538      	push	{r3, r4, r5, lr}
 800fed6:	4604      	mov	r4, r0
 800fed8:	460d      	mov	r5, r1
 800feda:	d904      	bls.n	800fee6 <_raise_r+0x14>
 800fedc:	2316      	movs	r3, #22
 800fede:	6003      	str	r3, [r0, #0]
 800fee0:	f04f 30ff 	mov.w	r0, #4294967295
 800fee4:	bd38      	pop	{r3, r4, r5, pc}
 800fee6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fee8:	b112      	cbz	r2, 800fef0 <_raise_r+0x1e>
 800feea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800feee:	b94b      	cbnz	r3, 800ff04 <_raise_r+0x32>
 800fef0:	4620      	mov	r0, r4
 800fef2:	f000 f831 	bl	800ff58 <_getpid_r>
 800fef6:	462a      	mov	r2, r5
 800fef8:	4601      	mov	r1, r0
 800fefa:	4620      	mov	r0, r4
 800fefc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff00:	f000 b818 	b.w	800ff34 <_kill_r>
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d00a      	beq.n	800ff1e <_raise_r+0x4c>
 800ff08:	1c59      	adds	r1, r3, #1
 800ff0a:	d103      	bne.n	800ff14 <_raise_r+0x42>
 800ff0c:	2316      	movs	r3, #22
 800ff0e:	6003      	str	r3, [r0, #0]
 800ff10:	2001      	movs	r0, #1
 800ff12:	e7e7      	b.n	800fee4 <_raise_r+0x12>
 800ff14:	2400      	movs	r4, #0
 800ff16:	4628      	mov	r0, r5
 800ff18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff1c:	4798      	blx	r3
 800ff1e:	2000      	movs	r0, #0
 800ff20:	e7e0      	b.n	800fee4 <_raise_r+0x12>
	...

0800ff24 <raise>:
 800ff24:	4b02      	ldr	r3, [pc, #8]	; (800ff30 <raise+0xc>)
 800ff26:	4601      	mov	r1, r0
 800ff28:	6818      	ldr	r0, [r3, #0]
 800ff2a:	f7ff bfd2 	b.w	800fed2 <_raise_r>
 800ff2e:	bf00      	nop
 800ff30:	200000e4 	.word	0x200000e4

0800ff34 <_kill_r>:
 800ff34:	b538      	push	{r3, r4, r5, lr}
 800ff36:	2300      	movs	r3, #0
 800ff38:	4d06      	ldr	r5, [pc, #24]	; (800ff54 <_kill_r+0x20>)
 800ff3a:	4604      	mov	r4, r0
 800ff3c:	4608      	mov	r0, r1
 800ff3e:	4611      	mov	r1, r2
 800ff40:	602b      	str	r3, [r5, #0]
 800ff42:	f7f0 fe4f 	bl	8000be4 <_kill>
 800ff46:	1c43      	adds	r3, r0, #1
 800ff48:	d102      	bne.n	800ff50 <_kill_r+0x1c>
 800ff4a:	682b      	ldr	r3, [r5, #0]
 800ff4c:	b103      	cbz	r3, 800ff50 <_kill_r+0x1c>
 800ff4e:	6023      	str	r3, [r4, #0]
 800ff50:	bd38      	pop	{r3, r4, r5, pc}
 800ff52:	bf00      	nop
 800ff54:	20015a5c 	.word	0x20015a5c

0800ff58 <_getpid_r>:
 800ff58:	f7f0 be3c 	b.w	8000bd4 <_getpid>

0800ff5c <_init>:
 800ff5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff5e:	bf00      	nop
 800ff60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff62:	bc08      	pop	{r3}
 800ff64:	469e      	mov	lr, r3
 800ff66:	4770      	bx	lr

0800ff68 <_fini>:
 800ff68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff6a:	bf00      	nop
 800ff6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff6e:	bc08      	pop	{r3}
 800ff70:	469e      	mov	lr, r3
 800ff72:	4770      	bx	lr
