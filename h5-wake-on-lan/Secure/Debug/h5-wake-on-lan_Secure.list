
h5-wake-on-lan_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .tcp_sec      00040200  30000000  30000000  00005000  2**0
                  ALLOC
  1 .isr_vector   0000024c  0c000000  0c000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001e90  0c00024c  0c00024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  0c0020dc  0c0020dc  000030dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0c0020ec  0c0020ec  00004040  2**0
                  CONTENTS
  5 .ARM          00000000  0c0020ec  0c0020ec  00004040  2**0
                  CONTENTS
  6 .preinit_array 00000000  0c0020ec  0c0020ec  00004040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0c0020ec  0c0020ec  000030ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0c0020f0  0c0020f0  000030f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000005c  30040200  0c0020f4  00003200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .gnu.sgstubs  00000040  0c0fe000  0c0fe000  00004000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss          000003f8  3004025c  3004025c  00005000  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  30040654  30040654  00005000  2**0
                  ALLOC
 13 .ARM.attributes 00000036  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007a81  00000000  00000000  00004076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000014a8  00000000  00000000  0000baf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006f0  00000000  00000000  0000cfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000522  00000000  00000000  0000d690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00030ad4  00000000  00000000  0000dbb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008f9a  00000000  00000000  0003e686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001330a8  00000000  00000000  00047620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017a6c8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001ab8  00000000  00000000  0017a70c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000073  00000000  00000000  0017c1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c00024c <__do_global_dtors_aux>:
 c00024c:	b510      	push	{r4, lr}
 c00024e:	4c05      	ldr	r4, [pc, #20]	@ (c000264 <__do_global_dtors_aux+0x18>)
 c000250:	7823      	ldrb	r3, [r4, #0]
 c000252:	b933      	cbnz	r3, c000262 <__do_global_dtors_aux+0x16>
 c000254:	4b04      	ldr	r3, [pc, #16]	@ (c000268 <__do_global_dtors_aux+0x1c>)
 c000256:	b113      	cbz	r3, c00025e <__do_global_dtors_aux+0x12>
 c000258:	4804      	ldr	r0, [pc, #16]	@ (c00026c <__do_global_dtors_aux+0x20>)
 c00025a:	f3af 8000 	nop.w
 c00025e:	2301      	movs	r3, #1
 c000260:	7023      	strb	r3, [r4, #0]
 c000262:	bd10      	pop	{r4, pc}
 c000264:	3004025c 	.word	0x3004025c
 c000268:	00000000 	.word	0x00000000
 c00026c:	0c0020c4 	.word	0x0c0020c4

0c000270 <frame_dummy>:
 c000270:	b508      	push	{r3, lr}
 c000272:	4b03      	ldr	r3, [pc, #12]	@ (c000280 <frame_dummy+0x10>)
 c000274:	b11b      	cbz	r3, c00027e <frame_dummy+0xe>
 c000276:	4903      	ldr	r1, [pc, #12]	@ (c000284 <frame_dummy+0x14>)
 c000278:	4803      	ldr	r0, [pc, #12]	@ (c000288 <frame_dummy+0x18>)
 c00027a:	f3af 8000 	nop.w
 c00027e:	bd08      	pop	{r3, pc}
 c000280:	00000000 	.word	0x00000000
 c000284:	30040260 	.word	0x30040260
 c000288:	0c0020c4 	.word	0x0c0020c4

0c00028c <__gnu_cmse_nonsecure_call>:
 c00028c:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000290:	4627      	mov	r7, r4
 c000292:	46a0      	mov	r8, r4
 c000294:	46a1      	mov	r9, r4
 c000296:	46a2      	mov	sl, r4
 c000298:	46a3      	mov	fp, r4
 c00029a:	46a4      	mov	ip, r4
 c00029c:	ed2d 8b10 	vpush	{d8-d15}
 c0002a0:	f04f 0500 	mov.w	r5, #0
 c0002a4:	ec45 5b18 	vmov	d8, r5, r5
 c0002a8:	ec45 5a19 	vmov	s18, s19, r5, r5
 c0002ac:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c0002b0:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c0002b4:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c0002b8:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c0002bc:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c0002c0:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c0002c4:	eef1 5a10 	vmrs	r5, fpscr
 c0002c8:	f64f 7660 	movw	r6, #65376	@ 0xff60
 c0002cc:	f6c0 76ff 	movt	r6, #4095	@ 0xfff
 c0002d0:	4035      	ands	r5, r6
 c0002d2:	eee1 5a10 	vmsr	fpscr, r5
 c0002d6:	f384 8800 	msr	CPSR_f, r4
 c0002da:	4625      	mov	r5, r4
 c0002dc:	4626      	mov	r6, r4
 c0002de:	47a4      	blxns	r4
 c0002e0:	ecbd 8b10 	vpop	{d8-d15}
 c0002e4:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c0002e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c0002e8:	b580      	push	{r7, lr}
 c0002ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c0002ec:	f000 fd8c 	bl	c000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c0002f0:	f000 f84c 	bl	c00038c <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c0002f4:	f000 f9a8 	bl	c000648 <MX_GPIO_Init>
  MX_ICACHE_Init();
 c0002f8:	f000 f99e 	bl	c000638 <MX_ICACHE_Init>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c0002fc:	f000 f802 	bl	c000304 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c000300:	bf00      	nop
 c000302:	e7fd      	b.n	c000300 <main+0x18>

0c000304 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c000304:	b590      	push	{r4, r7, lr}
 c000306:	b083      	sub	sp, #12
 c000308:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c00030a:	4b1e      	ldr	r3, [pc, #120]	@ (c000384 <NonSecure_Init+0x80>)
 c00030c:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 c000310:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c000312:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 c000316:	681b      	ldr	r3, [r3, #0]
 c000318:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c00031a:	683b      	ldr	r3, [r7, #0]
 c00031c:	f383 8888 	msr	MSP_NS, r3
}
 c000320:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c000322:	4b19      	ldr	r3, [pc, #100]	@ (c000388 <NonSecure_Init+0x84>)
 c000324:	681b      	ldr	r3, [r3, #0]
 c000326:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c000328:	687b      	ldr	r3, [r7, #4]
 c00032a:	461c      	mov	r4, r3
 c00032c:	0864      	lsrs	r4, r4, #1
 c00032e:	0064      	lsls	r4, r4, #1
 c000330:	4620      	mov	r0, r4
 c000332:	4621      	mov	r1, r4
 c000334:	4622      	mov	r2, r4
 c000336:	4623      	mov	r3, r4
 c000338:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c00033c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c000340:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c000344:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c000348:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c00034c:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c000350:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c000354:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c000358:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c00035c:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c000360:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c000364:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c000368:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c00036c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c000370:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c000374:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c000378:	f7ff ff88 	bl	c00028c <__gnu_cmse_nonsecure_call>
}
 c00037c:	bf00      	nop
 c00037e:	370c      	adds	r7, #12
 c000380:	46bd      	mov	sp, r7
 c000382:	bd90      	pop	{r4, r7, pc}
 c000384:	e002ed00 	.word	0xe002ed00
 c000388:	08100004 	.word	0x08100004

0c00038c <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c00038c:	b580      	push	{r7, lr}
 c00038e:	b0c4      	sub	sp, #272	@ 0x110
 c000390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */
	if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_ETHERNET, GTZC_TZSC_PERIPH_PRIV) != HAL_OK)
 c000392:	f240 2102 	movw	r1, #514	@ 0x202
 c000396:	48a6      	ldr	r0, [pc, #664]	@ (c000630 <MX_GTZC_S_Init+0x2a4>)
 c000398:	f000 ff84 	bl	c0012a4 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c00039c:	4603      	mov	r3, r0
 c00039e:	2b00      	cmp	r3, #0
 c0003a0:	d001      	beq.n	c0003a6 <MX_GTZC_S_Init+0x1a>
	{
		Error_Handler();
 c0003a2:	f000 f9db 	bl	c00075c <Error_Handler>
	}
  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_Area_Desc = {0};
 c0003a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0003aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0003ae:	4618      	mov	r0, r3
 c0003b0:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 c0003b4:	461a      	mov	r2, r3
 c0003b6:	2100      	movs	r1, #0
 c0003b8:	f001 fdf6 	bl	c001fa8 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  MPCBB_Area_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c0003bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0003c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0003c4:	2200      	movs	r2, #0
 c0003c6:	601a      	str	r2, [r3, #0]
  MPCBB_Area_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c0003c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0003cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0003d0:	2200      	movs	r2, #0
 c0003d2:	605a      	str	r2, [r3, #4]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c0003d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0003d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0003dc:	2200      	movs	r2, #0
 c0003de:	609a      	str	r2, [r3, #8]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c0003e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0003e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0003e8:	2200      	movs	r2, #0
 c0003ea:	60da      	str	r2, [r3, #12]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c0003ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0003f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0003f4:	2200      	movs	r2, #0
 c0003f6:	611a      	str	r2, [r3, #16]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c0003f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0003fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000400:	2200      	movs	r2, #0
 c000402:	615a      	str	r2, [r3, #20]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c000404:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000408:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00040c:	2200      	movs	r2, #0
 c00040e:	619a      	str	r2, [r3, #24]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c000410:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000414:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000418:	2200      	movs	r2, #0
 c00041a:	61da      	str	r2, [r3, #28]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c00041c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000420:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000424:	2200      	movs	r2, #0
 c000426:	621a      	str	r2, [r3, #32]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c000428:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00042c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000430:	2200      	movs	r2, #0
 c000432:	625a      	str	r2, [r3, #36]	@ 0x24
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0x00000000;
 c000434:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000438:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00043c:	2200      	movs	r2, #0
 c00043e:	629a      	str	r2, [r3, #40]	@ 0x28
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0x00000000;
 c000440:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000444:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000448:	2200      	movs	r2, #0
 c00044a:	62da      	str	r2, [r3, #44]	@ 0x2c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0x00000000;
 c00044c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000450:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000454:	2200      	movs	r2, #0
 c000456:	631a      	str	r2, [r3, #48]	@ 0x30
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0x00000000;
 c000458:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00045c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000460:	2200      	movs	r2, #0
 c000462:	635a      	str	r2, [r3, #52]	@ 0x34
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c000464:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000468:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00046c:	2200      	movs	r2, #0
 c00046e:	639a      	str	r2, [r3, #56]	@ 0x38
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c000470:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000474:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000478:	2200      	movs	r2, #0
 c00047a:	63da      	str	r2, [r3, #60]	@ 0x3c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c00047c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000480:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000484:	2200      	movs	r2, #0
 c000486:	641a      	str	r2, [r3, #64]	@ 0x40
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c000488:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00048c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000490:	2200      	movs	r2, #0
 c000492:	645a      	str	r2, [r3, #68]	@ 0x44
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c000494:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000498:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00049c:	2200      	movs	r2, #0
 c00049e:	649a      	str	r2, [r3, #72]	@ 0x48
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0004a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0004a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0004a8:	2200      	movs	r2, #0
 c0004aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0004ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0004b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0004b4:	2200      	movs	r2, #0
 c0004b6:	651a      	str	r2, [r3, #80]	@ 0x50
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0004b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0004bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0004c0:	2200      	movs	r2, #0
 c0004c2:	655a      	str	r2, [r3, #84]	@ 0x54
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[0] =   0xFFFFFFFF;
 c0004c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0004c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0004cc:	f04f 32ff 	mov.w	r2, #4294967295
 c0004d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[1] =   0xFFFFFFFF;
 c0004d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0004d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0004dc:	f04f 32ff 	mov.w	r2, #4294967295
 c0004e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[2] =   0xFFFFFFFF;
 c0004e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0004e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0004ec:	f04f 32ff 	mov.w	r2, #4294967295
 c0004f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[3] =   0xFFFFFFFF;
 c0004f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0004f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0004fc:	f04f 32ff 	mov.w	r2, #4294967295
 c000500:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[4] =   0xFFFFFFFF;
 c000504:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000508:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00050c:	f04f 32ff 	mov.w	r2, #4294967295
 c000510:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[5] =   0xFFFFFFFF;
 c000514:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000518:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00051c:	f04f 32ff 	mov.w	r2, #4294967295
 c000520:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[6] =   0xFFFFFFFF;
 c000524:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000528:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00052c:	f04f 32ff 	mov.w	r2, #4294967295
 c000530:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[7] =   0xFFFFFFFF;
 c000534:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000538:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00053c:	f04f 32ff 	mov.w	r2, #4294967295
 c000540:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[8] =   0xFFFFFFFF;
 c000544:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000548:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00054c:	f04f 32ff 	mov.w	r2, #4294967295
 c000550:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[9] =   0xFFFFFFFF;
 c000554:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000558:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00055c:	f04f 32ff 	mov.w	r2, #4294967295
 c000560:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[10] =   0xFFFFFFFF;
 c000564:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000568:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00056c:	f04f 32ff 	mov.w	r2, #4294967295
 c000570:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[11] =   0xFFFFFFFF;
 c000574:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000578:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00057c:	f04f 32ff 	mov.w	r2, #4294967295
 c000580:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[12] =   0xFFFFFFFF;
 c000584:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000588:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00058c:	f04f 32ff 	mov.w	r2, #4294967295
 c000590:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[13] =   0xFFFFFFFF;
 c000594:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000598:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00059c:	f04f 32ff 	mov.w	r2, #4294967295
 c0005a0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[14] =   0xFFFFFFFF;
 c0005a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0005a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0005ac:	f04f 32ff 	mov.w	r2, #4294967295
 c0005b0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[15] =   0xFFFFFFFF;
 c0005b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0005b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0005bc:	f04f 32ff 	mov.w	r2, #4294967295
 c0005c0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[16] =   0xFFFFFFFF;
 c0005c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0005c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0005cc:	f04f 32ff 	mov.w	r2, #4294967295
 c0005d0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[17] =   0xFFFFFFFF;
 c0005d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0005d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0005dc:	f04f 32ff 	mov.w	r2, #4294967295
 c0005e0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[18] =   0xFFFFFFFF;
 c0005e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0005e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0005ec:	f04f 32ff 	mov.w	r2, #4294967295
 c0005f0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[19] =   0xFFFFFFFF;
 c0005f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0005f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0005fc:	f04f 32ff 	mov.w	r2, #4294967295
 c000600:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000604:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000608:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00060c:	2200      	movs	r2, #0
 c00060e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM3_BASE, &MPCBB_Area_Desc) != HAL_OK)
 c000612:	1d3b      	adds	r3, r7, #4
 c000614:	4619      	mov	r1, r3
 c000616:	4807      	ldr	r0, [pc, #28]	@ (c000634 <MX_GTZC_S_Init+0x2a8>)
 c000618:	f000 ff3a 	bl	c001490 <HAL_GTZC_MPCBB_ConfigMem>
 c00061c:	4603      	mov	r3, r0
 c00061e:	2b00      	cmp	r3, #0
 c000620:	d001      	beq.n	c000626 <MX_GTZC_S_Init+0x29a>
  {
    Error_Handler();
 c000622:	f000 f89b 	bl	c00075c <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c000626:	bf00      	nop
 c000628:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 c00062c:	46bd      	mov	sp, r7
 c00062e:	bd80      	pop	{r7, pc}
 c000630:	2000000b 	.word	0x2000000b
 c000634:	30050000 	.word	0x30050000

0c000638 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 c000638:	b480      	push	{r7}
 c00063a:	af00      	add	r7, sp, #0
  /* USER CODE END ICACHE_Init 1 */
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 c00063c:	bf00      	nop
 c00063e:	46bd      	mov	sp, r7
 c000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000644:	4770      	bx	lr
	...

0c000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000648:	b580      	push	{r7, lr}
 c00064a:	b086      	sub	sp, #24
 c00064c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c00064e:	4b3d      	ldr	r3, [pc, #244]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c000650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000654:	4a3b      	ldr	r2, [pc, #236]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c000656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c00065a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c00065e:	4b39      	ldr	r3, [pc, #228]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c000660:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c000668:	617b      	str	r3, [r7, #20]
 c00066a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c00066c:	4b35      	ldr	r3, [pc, #212]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c00066e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000672:	4a34      	ldr	r2, [pc, #208]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c000674:	f043 0304 	orr.w	r3, r3, #4
 c000678:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c00067c:	4b31      	ldr	r3, [pc, #196]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c00067e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000682:	f003 0304 	and.w	r3, r3, #4
 c000686:	613b      	str	r3, [r7, #16]
 c000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c00068a:	4b2e      	ldr	r3, [pc, #184]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c00068c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000690:	4a2c      	ldr	r2, [pc, #176]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c000692:	f043 0301 	orr.w	r3, r3, #1
 c000696:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c00069a:	4b2a      	ldr	r3, [pc, #168]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c00069c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0006a0:	f003 0301 	and.w	r3, r3, #1
 c0006a4:	60fb      	str	r3, [r7, #12]
 c0006a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c0006a8:	4b26      	ldr	r3, [pc, #152]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c0006aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0006ae:	4a25      	ldr	r2, [pc, #148]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c0006b0:	f043 0302 	orr.w	r3, r3, #2
 c0006b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c0006b8:	4b22      	ldr	r3, [pc, #136]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c0006ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0006be:	f003 0302 	and.w	r3, r3, #2
 c0006c2:	60bb      	str	r3, [r7, #8]
 c0006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c0006c6:	4b1f      	ldr	r3, [pc, #124]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c0006c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0006cc:	4a1d      	ldr	r2, [pc, #116]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c0006ce:	f043 0308 	orr.w	r3, r3, #8
 c0006d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c0006d6:	4b1b      	ldr	r3, [pc, #108]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c0006d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0006dc:	f003 0308 	and.w	r3, r3, #8
 c0006e0:	607b      	str	r3, [r7, #4]
 c0006e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c0006e4:	4b17      	ldr	r3, [pc, #92]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c0006e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0006ea:	4a16      	ldr	r2, [pc, #88]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c0006ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 c0006f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c0006f4:	4b13      	ldr	r3, [pc, #76]	@ (c000744 <MX_GPIO_Init+0xfc>)
 c0006f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0006fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 c0006fe:	603b      	str	r3, [r7, #0]
 c000700:	683b      	ldr	r3, [r7, #0]

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOC, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_NSEC);
 c000702:	2200      	movs	r2, #0
 c000704:	2132      	movs	r1, #50	@ 0x32
 c000706:	4810      	ldr	r0, [pc, #64]	@ (c000748 <MX_GPIO_Init+0x100>)
 c000708:	f000 fd94 	bl	c001234 <HAL_GPIO_ConfigPinAttributes>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7, GPIO_PIN_NSEC);
 c00070c:	2200      	movs	r2, #0
 c00070e:	2186      	movs	r1, #134	@ 0x86
 c000710:	480e      	ldr	r0, [pc, #56]	@ (c00074c <MX_GPIO_Init+0x104>)
 c000712:	f000 fd8f 	bl	c001234 <HAL_GPIO_ConfigPinAttributes>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOB, GPIO_PIN_15, GPIO_PIN_NSEC);
 c000716:	2200      	movs	r2, #0
 c000718:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 c00071c:	480c      	ldr	r0, [pc, #48]	@ (c000750 <MX_GPIO_Init+0x108>)
 c00071e:	f000 fd89 	bl	c001234 <HAL_GPIO_ConfigPinAttributes>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOD, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_NSEC);
 c000722:	2200      	movs	r2, #0
 c000724:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c000728:	480a      	ldr	r0, [pc, #40]	@ (c000754 <MX_GPIO_Init+0x10c>)
 c00072a:	f000 fd83 	bl	c001234 <HAL_GPIO_ConfigPinAttributes>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOG, GPIO_PIN_11|GPIO_PIN_13, GPIO_PIN_NSEC);
 c00072e:	2200      	movs	r2, #0
 c000730:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 c000734:	4808      	ldr	r0, [pc, #32]	@ (c000758 <MX_GPIO_Init+0x110>)
 c000736:	f000 fd7d 	bl	c001234 <HAL_GPIO_ConfigPinAttributes>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c00073a:	bf00      	nop
 c00073c:	3718      	adds	r7, #24
 c00073e:	46bd      	mov	sp, r7
 c000740:	bd80      	pop	{r7, pc}
 c000742:	bf00      	nop
 c000744:	54020c00 	.word	0x54020c00
 c000748:	52020800 	.word	0x52020800
 c00074c:	52020000 	.word	0x52020000
 c000750:	52020400 	.word	0x52020400
 c000754:	52020c00 	.word	0x52020c00
 c000758:	52021800 	.word	0x52021800

0c00075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c00075c:	b480      	push	{r7}
 c00075e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c000760:	b672      	cpsid	i
}
 c000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c000764:	bf00      	nop
 c000766:	e7fd      	b.n	c000764 <Error_Handler+0x8>

0c000768 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c000768:	b480      	push	{r7}
 c00076a:	b083      	sub	sp, #12
 c00076c:	af00      	add	r7, sp, #0
 c00076e:	4603      	mov	r3, r0
 c000770:	6039      	str	r1, [r7, #0]
 c000772:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c000774:	683b      	ldr	r3, [r7, #0]
 c000776:	2b00      	cmp	r3, #0
 c000778:	d00d      	beq.n	c000796 <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c00077a:	79fb      	ldrb	r3, [r7, #7]
 c00077c:	2b00      	cmp	r3, #0
 c00077e:	d002      	beq.n	c000786 <__acle_se_SECURE_RegisterCallback+0x1e>
 c000780:	2b01      	cmp	r3, #1
 c000782:	d004      	beq.n	c00078e <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c000784:	e007      	b.n	c000796 <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureFaultCallback = func;
 c000786:	4a20      	ldr	r2, [pc, #128]	@ (c000808 <__acle_se_SECURE_RegisterCallback+0xa0>)
 c000788:	683b      	ldr	r3, [r7, #0]
 c00078a:	6013      	str	r3, [r2, #0]
        break;
 c00078c:	e003      	b.n	c000796 <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureErrorCallback = func;
 c00078e:	4a1f      	ldr	r2, [pc, #124]	@ (c00080c <__acle_se_SECURE_RegisterCallback+0xa4>)
 c000790:	683b      	ldr	r3, [r7, #0]
 c000792:	6013      	str	r3, [r2, #0]
        break;
 c000794:	bf00      	nop
    }
  }
}
 c000796:	bf00      	nop
 c000798:	370c      	adds	r7, #12
 c00079a:	46bd      	mov	sp, r7
 c00079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0007a0:	4670      	mov	r0, lr
 c0007a2:	4671      	mov	r1, lr
 c0007a4:	4672      	mov	r2, lr
 c0007a6:	4673      	mov	r3, lr
 c0007a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c0007ac:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c0007b0:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c0007b4:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c0007b8:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c0007bc:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c0007c0:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c0007c4:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c0007c8:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c0007cc:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c0007d0:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c0007d4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c0007d8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c0007dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0007e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0007e4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c0007e8:	f38e 8c00 	msr	CPSR_fs, lr
 c0007ec:	b410      	push	{r4}
 c0007ee:	eef1 ca10 	vmrs	ip, fpscr
 c0007f2:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c0007f6:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c0007fa:	ea0c 0c04 	and.w	ip, ip, r4
 c0007fe:	eee1 ca10 	vmsr	fpscr, ip
 c000802:	bc10      	pop	{r4}
 c000804:	46f4      	mov	ip, lr
 c000806:	4774      	bxns	lr
 c000808:	30040278 	.word	0x30040278
 c00080c:	3004027c 	.word	0x3004027c

0c000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c000810:	b480      	push	{r7}
 c000812:	b083      	sub	sp, #12
 c000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_GTZC1_CLK_ENABLE();
 c000816:	4b0a      	ldr	r3, [pc, #40]	@ (c000840 <HAL_MspInit+0x30>)
 c000818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c00081c:	4a08      	ldr	r2, [pc, #32]	@ (c000840 <HAL_MspInit+0x30>)
 c00081e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 c000822:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 c000826:	4b06      	ldr	r3, [pc, #24]	@ (c000840 <HAL_MspInit+0x30>)
 c000828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c00082c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 c000830:	607b      	str	r3, [r7, #4]
 c000832:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c000834:	bf00      	nop
 c000836:	370c      	adds	r7, #12
 c000838:	46bd      	mov	sp, r7
 c00083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00083e:	4770      	bx	lr
 c000840:	54020c00 	.word	0x54020c00

0c000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c000844:	b480      	push	{r7}
 c000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 c000848:	bf00      	nop
 c00084a:	e7fd      	b.n	c000848 <NMI_Handler+0x4>

0c00084c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c00084c:	b480      	push	{r7}
 c00084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c000850:	bf00      	nop
 c000852:	e7fd      	b.n	c000850 <HardFault_Handler+0x4>

0c000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c000854:	b480      	push	{r7}
 c000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c000858:	bf00      	nop
 c00085a:	e7fd      	b.n	c000858 <MemManage_Handler+0x4>

0c00085c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c00085c:	b480      	push	{r7}
 c00085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c000860:	bf00      	nop
 c000862:	e7fd      	b.n	c000860 <BusFault_Handler+0x4>

0c000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c000864:	b480      	push	{r7}
 c000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c000868:	bf00      	nop
 c00086a:	e7fd      	b.n	c000868 <UsageFault_Handler+0x4>

0c00086c <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c00086c:	b480      	push	{r7}
 c00086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c000870:	bf00      	nop
 c000872:	e7fd      	b.n	c000870 <SecureFault_Handler+0x4>

0c000874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c000874:	b480      	push	{r7}
 c000876:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c000878:	bf00      	nop
 c00087a:	46bd      	mov	sp, r7
 c00087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000880:	4770      	bx	lr

0c000882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c000882:	b480      	push	{r7}
 c000884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c000886:	bf00      	nop
 c000888:	46bd      	mov	sp, r7
 c00088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00088e:	4770      	bx	lr

0c000890 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c000890:	b480      	push	{r7}
 c000892:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c000894:	bf00      	nop
 c000896:	46bd      	mov	sp, r7
 c000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00089c:	4770      	bx	lr

0c00089e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c00089e:	b580      	push	{r7, lr}
 c0008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c0008a2:	f000 fb4f 	bl	c000f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c0008a6:	bf00      	nop
 c0008a8:	bd80      	pop	{r7, pc}
	...

0c0008ac <_sbrk>:
 c0008ac:	b580      	push	{r7, lr}
 c0008ae:	b086      	sub	sp, #24
 c0008b0:	af00      	add	r7, sp, #0
 c0008b2:	6078      	str	r0, [r7, #4]
 c0008b4:	4a14      	ldr	r2, [pc, #80]	@ (c000908 <_sbrk+0x5c>)
 c0008b6:	4b15      	ldr	r3, [pc, #84]	@ (c00090c <_sbrk+0x60>)
 c0008b8:	1ad3      	subs	r3, r2, r3
 c0008ba:	617b      	str	r3, [r7, #20]
 c0008bc:	697b      	ldr	r3, [r7, #20]
 c0008be:	613b      	str	r3, [r7, #16]
 c0008c0:	4b13      	ldr	r3, [pc, #76]	@ (c000910 <_sbrk+0x64>)
 c0008c2:	681b      	ldr	r3, [r3, #0]
 c0008c4:	2b00      	cmp	r3, #0
 c0008c6:	d102      	bne.n	c0008ce <_sbrk+0x22>
 c0008c8:	4b11      	ldr	r3, [pc, #68]	@ (c000910 <_sbrk+0x64>)
 c0008ca:	4a12      	ldr	r2, [pc, #72]	@ (c000914 <_sbrk+0x68>)
 c0008cc:	601a      	str	r2, [r3, #0]
 c0008ce:	4b10      	ldr	r3, [pc, #64]	@ (c000910 <_sbrk+0x64>)
 c0008d0:	681a      	ldr	r2, [r3, #0]
 c0008d2:	687b      	ldr	r3, [r7, #4]
 c0008d4:	4413      	add	r3, r2
 c0008d6:	693a      	ldr	r2, [r7, #16]
 c0008d8:	429a      	cmp	r2, r3
 c0008da:	d207      	bcs.n	c0008ec <_sbrk+0x40>
 c0008dc:	f001 fb7c 	bl	c001fd8 <__errno>
 c0008e0:	4603      	mov	r3, r0
 c0008e2:	220c      	movs	r2, #12
 c0008e4:	601a      	str	r2, [r3, #0]
 c0008e6:	f04f 33ff 	mov.w	r3, #4294967295
 c0008ea:	e009      	b.n	c000900 <_sbrk+0x54>
 c0008ec:	4b08      	ldr	r3, [pc, #32]	@ (c000910 <_sbrk+0x64>)
 c0008ee:	681b      	ldr	r3, [r3, #0]
 c0008f0:	60fb      	str	r3, [r7, #12]
 c0008f2:	4b07      	ldr	r3, [pc, #28]	@ (c000910 <_sbrk+0x64>)
 c0008f4:	681a      	ldr	r2, [r3, #0]
 c0008f6:	687b      	ldr	r3, [r7, #4]
 c0008f8:	4413      	add	r3, r2
 c0008fa:	4a05      	ldr	r2, [pc, #20]	@ (c000910 <_sbrk+0x64>)
 c0008fc:	6013      	str	r3, [r2, #0]
 c0008fe:	68fb      	ldr	r3, [r7, #12]
 c000900:	4618      	mov	r0, r3
 c000902:	3718      	adds	r7, #24
 c000904:	46bd      	mov	sp, r7
 c000906:	bd80      	pop	{r7, pc}
 c000908:	30050000 	.word	0x30050000
 c00090c:	00000400 	.word	0x00000400
 c000910:	30040280 	.word	0x30040280
 c000914:	30040658 	.word	0x30040658

0c000918 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c000918:	b480      	push	{r7}
 c00091a:	af00      	add	r7, sp, #0
  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c00091c:	4b21      	ldr	r3, [pc, #132]	@ (c0009a4 <TZ_SAU_Setup+0x8c>)
 c00091e:	2205      	movs	r2, #5
 c000920:	609a      	str	r2, [r3, #8]
 c000922:	4b20      	ldr	r3, [pc, #128]	@ (c0009a4 <TZ_SAU_Setup+0x8c>)
 c000924:	4a20      	ldr	r2, [pc, #128]	@ (c0009a8 <TZ_SAU_Setup+0x90>)
 c000926:	60da      	str	r2, [r3, #12]
 c000928:	4b1e      	ldr	r3, [pc, #120]	@ (c0009a4 <TZ_SAU_Setup+0x8c>)
 c00092a:	4a20      	ldr	r2, [pc, #128]	@ (c0009ac <TZ_SAU_Setup+0x94>)
 c00092c:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION6) && (SAU_INIT_REGION6 == 1U)
    SAU_INIT_REGION(6);
 c00092e:	4b1d      	ldr	r3, [pc, #116]	@ (c0009a4 <TZ_SAU_Setup+0x8c>)
 c000930:	2206      	movs	r2, #6
 c000932:	609a      	str	r2, [r3, #8]
 c000934:	4b1b      	ldr	r3, [pc, #108]	@ (c0009a4 <TZ_SAU_Setup+0x8c>)
 c000936:	2200      	movs	r2, #0
 c000938:	60da      	str	r2, [r3, #12]
 c00093a:	4b1a      	ldr	r3, [pc, #104]	@ (c0009a4 <TZ_SAU_Setup+0x8c>)
 c00093c:	2201      	movs	r2, #1
 c00093e:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION7) && (SAU_INIT_REGION7 == 1U)
    SAU_INIT_REGION(7);
 c000940:	4b18      	ldr	r3, [pc, #96]	@ (c0009a4 <TZ_SAU_Setup+0x8c>)
 c000942:	2207      	movs	r2, #7
 c000944:	609a      	str	r2, [r3, #8]
 c000946:	4b17      	ldr	r3, [pc, #92]	@ (c0009a4 <TZ_SAU_Setup+0x8c>)
 c000948:	2200      	movs	r2, #0
 c00094a:	60da      	str	r2, [r3, #12]
 c00094c:	4b15      	ldr	r3, [pc, #84]	@ (c0009a4 <TZ_SAU_Setup+0x8c>)
 c00094e:	2201      	movs	r2, #1
 c000950:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c000952:	4b14      	ldr	r3, [pc, #80]	@ (c0009a4 <TZ_SAU_Setup+0x8c>)
 c000954:	2202      	movs	r2, #2
 c000956:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c000958:	4b15      	ldr	r3, [pc, #84]	@ (c0009b0 <TZ_SAU_Setup+0x98>)
 c00095a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00095e:	4a14      	ldr	r2, [pc, #80]	@ (c0009b0 <TZ_SAU_Setup+0x98>)
 c000960:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 c000964:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000968:	4b12      	ldr	r3, [pc, #72]	@ (c0009b4 <TZ_SAU_Setup+0x9c>)
 c00096a:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c00096c:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000970:	4a10      	ldr	r2, [pc, #64]	@ (c0009b4 <TZ_SAU_Setup+0x9c>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c000972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000976:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c000978:	4b0f      	ldr	r3, [pc, #60]	@ (c0009b8 <TZ_SAU_Setup+0xa0>)
 c00097a:	2200      	movs	r2, #0
 c00097c:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c000980:	4b0d      	ldr	r3, [pc, #52]	@ (c0009b8 <TZ_SAU_Setup+0xa0>)
 c000982:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 c000986:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c00098a:	4b0b      	ldr	r3, [pc, #44]	@ (c0009b8 <TZ_SAU_Setup+0xa0>)
 c00098c:	2200      	movs	r2, #0
 c00098e:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c000992:	4b09      	ldr	r3, [pc, #36]	@ (c0009b8 <TZ_SAU_Setup+0xa0>)
 c000994:	2200      	movs	r2, #0
 c000996:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
  #endif

}
 c00099a:	bf00      	nop
 c00099c:	46bd      	mov	sp, r7
 c00099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0009a2:	4770      	bx	lr
 c0009a4:	e000edd0 	.word	0xe000edd0
 c0009a8:	0bf90000 	.word	0x0bf90000
 c0009ac:	0bfa8fe1 	.word	0x0bfa8fe1
 c0009b0:	e000ed00 	.word	0xe000ed00
 c0009b4:	e000ef30 	.word	0xe000ef30
 c0009b8:	e000e100 	.word	0xe000e100

0c0009bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 c0009bc:	b580      	push	{r7, lr}
 c0009be:	b082      	sub	sp, #8
 c0009c0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c0009c2:	f7ff ffa9 	bl	c000918 <TZ_SAU_Setup>

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));     /* set CP10 and CP11 Full Access */
 c0009c6:	4b38      	ldr	r3, [pc, #224]	@ (c000aa8 <SystemInit+0xec>)
 c0009c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0009cc:	4a36      	ldr	r2, [pc, #216]	@ (c000aa8 <SystemInit+0xec>)
 c0009ce:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 c0009d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c0009d6:	4b35      	ldr	r3, [pc, #212]	@ (c000aac <SystemInit+0xf0>)
 c0009d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0009dc:	4a33      	ldr	r2, [pc, #204]	@ (c000aac <SystemInit+0xf0>)
 c0009de:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 c0009e2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 c0009e6:	4b32      	ldr	r3, [pc, #200]	@ (c000ab0 <SystemInit+0xf4>)
 c0009e8:	2201      	movs	r2, #1
 c0009ea:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 c0009ec:	4b30      	ldr	r3, [pc, #192]	@ (c000ab0 <SystemInit+0xf4>)
 c0009ee:	2200      	movs	r2, #0
 c0009f0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 c0009f2:	4b2f      	ldr	r3, [pc, #188]	@ (c000ab0 <SystemInit+0xf4>)
 c0009f4:	2200      	movs	r2, #0
 c0009f6:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 c0009f8:	4b2d      	ldr	r3, [pc, #180]	@ (c000ab0 <SystemInit+0xf4>)
 c0009fa:	681a      	ldr	r2, [r3, #0]
 c0009fc:	492c      	ldr	r1, [pc, #176]	@ (c000ab0 <SystemInit+0xf4>)
 c0009fe:	4b2d      	ldr	r3, [pc, #180]	@ (c000ab4 <SystemInit+0xf8>)
 c000a00:	4013      	ands	r3, r2
 c000a02:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 c000a04:	4b2a      	ldr	r3, [pc, #168]	@ (c000ab0 <SystemInit+0xf4>)
 c000a06:	2200      	movs	r2, #0
 c000a08:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 c000a0a:	4b29      	ldr	r3, [pc, #164]	@ (c000ab0 <SystemInit+0xf4>)
 c000a0c:	2200      	movs	r2, #0
 c000a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC->PLL3CFGR = 0U;
 c000a10:	4b27      	ldr	r3, [pc, #156]	@ (c000ab0 <SystemInit+0xf4>)
 c000a12:	2200      	movs	r2, #0
 c000a14:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 c000a16:	4b26      	ldr	r3, [pc, #152]	@ (c000ab0 <SystemInit+0xf4>)
 c000a18:	4a27      	ldr	r2, [pc, #156]	@ (c000ab8 <SystemInit+0xfc>)
 c000a1a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 c000a1c:	4b24      	ldr	r3, [pc, #144]	@ (c000ab0 <SystemInit+0xf4>)
 c000a1e:	2200      	movs	r2, #0
 c000a20:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 c000a22:	4b23      	ldr	r3, [pc, #140]	@ (c000ab0 <SystemInit+0xf4>)
 c000a24:	4a24      	ldr	r2, [pc, #144]	@ (c000ab8 <SystemInit+0xfc>)
 c000a26:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 c000a28:	4b21      	ldr	r3, [pc, #132]	@ (c000ab0 <SystemInit+0xf4>)
 c000a2a:	2200      	movs	r2, #0
 c000a2c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 c000a2e:	4b20      	ldr	r3, [pc, #128]	@ (c000ab0 <SystemInit+0xf4>)
 c000a30:	4a21      	ldr	r2, [pc, #132]	@ (c000ab8 <SystemInit+0xfc>)
 c000a32:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 c000a34:	4b1e      	ldr	r3, [pc, #120]	@ (c000ab0 <SystemInit+0xf4>)
 c000a36:	2200      	movs	r2, #0
 c000a38:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 c000a3a:	4b1d      	ldr	r3, [pc, #116]	@ (c000ab0 <SystemInit+0xf4>)
 c000a3c:	681b      	ldr	r3, [r3, #0]
 c000a3e:	4a1c      	ldr	r2, [pc, #112]	@ (c000ab0 <SystemInit+0xf4>)
 c000a40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 c000a44:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 c000a46:	4b1a      	ldr	r3, [pc, #104]	@ (c000ab0 <SystemInit+0xf4>)
 c000a48:	2200      	movs	r2, #0
 c000a4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 c000a4c:	4b16      	ldr	r3, [pc, #88]	@ (c000aa8 <SystemInit+0xec>)
 c000a4e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 c000a52:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 c000a54:	4b19      	ldr	r3, [pc, #100]	@ (c000abc <SystemInit+0x100>)
 c000a56:	699b      	ldr	r3, [r3, #24]
 c000a58:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 c000a5c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 c000a5e:	687b      	ldr	r3, [r7, #4]
 c000a60:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 c000a64:	d003      	beq.n	c000a6e <SystemInit+0xb2>
 c000a66:	687b      	ldr	r3, [r7, #4]
 c000a68:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 c000a6c:	d117      	bne.n	c000a9e <SystemInit+0xe2>
  {
    /* Check FLASH Option Control Registers access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 c000a6e:	4b13      	ldr	r3, [pc, #76]	@ (c000abc <SystemInit+0x100>)
 c000a70:	69db      	ldr	r3, [r3, #28]
 c000a72:	f003 0301 	and.w	r3, r3, #1
 c000a76:	2b00      	cmp	r3, #0
 c000a78:	d005      	beq.n	c000a86 <SystemInit+0xca>
    {
      /* Authorizes the Option Byte register programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 c000a7a:	4b10      	ldr	r3, [pc, #64]	@ (c000abc <SystemInit+0x100>)
 c000a7c:	4a10      	ldr	r2, [pc, #64]	@ (c000ac0 <SystemInit+0x104>)
 c000a7e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 c000a80:	4b0e      	ldr	r3, [pc, #56]	@ (c000abc <SystemInit+0x100>)
 c000a82:	4a10      	ldr	r2, [pc, #64]	@ (c000ac4 <SystemInit+0x108>)
 c000a84:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 c000a86:	4b0d      	ldr	r3, [pc, #52]	@ (c000abc <SystemInit+0x100>)
 c000a88:	69db      	ldr	r3, [r3, #28]
 c000a8a:	4a0c      	ldr	r2, [pc, #48]	@ (c000abc <SystemInit+0x100>)
 c000a8c:	f043 0302 	orr.w	r3, r3, #2
 c000a90:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 c000a92:	4b0a      	ldr	r3, [pc, #40]	@ (c000abc <SystemInit+0x100>)
 c000a94:	69db      	ldr	r3, [r3, #28]
 c000a96:	4a09      	ldr	r2, [pc, #36]	@ (c000abc <SystemInit+0x100>)
 c000a98:	f043 0301 	orr.w	r3, r3, #1
 c000a9c:	61d3      	str	r3, [r2, #28]
  }
}
 c000a9e:	bf00      	nop
 c000aa0:	3708      	adds	r7, #8
 c000aa2:	46bd      	mov	sp, r7
 c000aa4:	bd80      	pop	{r7, pc}
 c000aa6:	bf00      	nop
 c000aa8:	e000ed00 	.word	0xe000ed00
 c000aac:	e002ed00 	.word	0xe002ed00
 c000ab0:	54020c00 	.word	0x54020c00
 c000ab4:	eae2eae3 	.word	0xeae2eae3
 c000ab8:	01010280 	.word	0x01010280
 c000abc:	50022000 	.word	0x50022000
 c000ac0:	08192a3b 	.word	0x08192a3b
 c000ac4:	4c5d6e7f 	.word	0x4c5d6e7f

0c000ac8 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c000ac8:	b480      	push	{r7}
 c000aca:	b089      	sub	sp, #36	@ 0x24
 c000acc:	af00      	add	r7, sp, #0
  uint32_t pllp, pllsource, pllm, pllfracen, hsivalue, tmp;
  float_t fracn1, pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 c000ace:	4b90      	ldr	r3, [pc, #576]	@ (c000d10 <SystemCoreClockUpdate+0x248>)
 c000ad0:	69db      	ldr	r3, [r3, #28]
 c000ad2:	f003 0318 	and.w	r3, r3, #24
 c000ad6:	2b18      	cmp	r3, #24
 c000ad8:	f200 8102 	bhi.w	c000ce0 <SystemCoreClockUpdate+0x218>
 c000adc:	a201      	add	r2, pc, #4	@ (adr r2, c000ae4 <SystemCoreClockUpdate+0x1c>)
 c000ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c000ae2:	bf00      	nop
 c000ae4:	0c000b49 	.word	0x0c000b49
 c000ae8:	0c000ce1 	.word	0x0c000ce1
 c000aec:	0c000ce1 	.word	0x0c000ce1
 c000af0:	0c000ce1 	.word	0x0c000ce1
 c000af4:	0c000ce1 	.word	0x0c000ce1
 c000af8:	0c000ce1 	.word	0x0c000ce1
 c000afc:	0c000ce1 	.word	0x0c000ce1
 c000b00:	0c000ce1 	.word	0x0c000ce1
 c000b04:	0c000b5f 	.word	0x0c000b5f
 c000b08:	0c000ce1 	.word	0x0c000ce1
 c000b0c:	0c000ce1 	.word	0x0c000ce1
 c000b10:	0c000ce1 	.word	0x0c000ce1
 c000b14:	0c000ce1 	.word	0x0c000ce1
 c000b18:	0c000ce1 	.word	0x0c000ce1
 c000b1c:	0c000ce1 	.word	0x0c000ce1
 c000b20:	0c000ce1 	.word	0x0c000ce1
 c000b24:	0c000b67 	.word	0x0c000b67
 c000b28:	0c000ce1 	.word	0x0c000ce1
 c000b2c:	0c000ce1 	.word	0x0c000ce1
 c000b30:	0c000ce1 	.word	0x0c000ce1
 c000b34:	0c000ce1 	.word	0x0c000ce1
 c000b38:	0c000ce1 	.word	0x0c000ce1
 c000b3c:	0c000ce1 	.word	0x0c000ce1
 c000b40:	0c000ce1 	.word	0x0c000ce1
 c000b44:	0c000b6f 	.word	0x0c000b6f
  {
  case 0x00UL:  /* HSI used as system clock source */
    SystemCoreClock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 c000b48:	4b71      	ldr	r3, [pc, #452]	@ (c000d10 <SystemCoreClockUpdate+0x248>)
 c000b4a:	681b      	ldr	r3, [r3, #0]
 c000b4c:	08db      	lsrs	r3, r3, #3
 c000b4e:	f003 0303 	and.w	r3, r3, #3
 c000b52:	4a70      	ldr	r2, [pc, #448]	@ (c000d14 <SystemCoreClockUpdate+0x24c>)
 c000b54:	fa22 f303 	lsr.w	r3, r2, r3
 c000b58:	4a6f      	ldr	r2, [pc, #444]	@ (c000d18 <SystemCoreClockUpdate+0x250>)
 c000b5a:	6013      	str	r3, [r2, #0]
    break;
 c000b5c:	e0c4      	b.n	c000ce8 <SystemCoreClockUpdate+0x220>

  case 0x08UL:  /* CSI used as system clock  source */
    SystemCoreClock = CSI_VALUE;
 c000b5e:	4b6e      	ldr	r3, [pc, #440]	@ (c000d18 <SystemCoreClockUpdate+0x250>)
 c000b60:	4a6e      	ldr	r2, [pc, #440]	@ (c000d1c <SystemCoreClockUpdate+0x254>)
 c000b62:	601a      	str	r2, [r3, #0]
    break;
 c000b64:	e0c0      	b.n	c000ce8 <SystemCoreClockUpdate+0x220>

  case 0x10UL:  /* HSE used as system clock  source */
    SystemCoreClock = HSE_VALUE;
 c000b66:	4b6c      	ldr	r3, [pc, #432]	@ (c000d18 <SystemCoreClockUpdate+0x250>)
 c000b68:	4a6d      	ldr	r2, [pc, #436]	@ (c000d20 <SystemCoreClockUpdate+0x258>)
 c000b6a:	601a      	str	r2, [r3, #0]
    break;
 c000b6c:	e0bc      	b.n	c000ce8 <SystemCoreClockUpdate+0x220>

  case 0x18UL:  /* PLL1 used as system clock source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c000b6e:	4b68      	ldr	r3, [pc, #416]	@ (c000d10 <SystemCoreClockUpdate+0x248>)
 c000b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c000b72:	f003 0303 	and.w	r3, r3, #3
 c000b76:	61bb      	str	r3, [r7, #24]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M)>> RCC_PLL1CFGR_PLL1M_Pos);
 c000b78:	4b65      	ldr	r3, [pc, #404]	@ (c000d10 <SystemCoreClockUpdate+0x248>)
 c000b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c000b7c:	0a1b      	lsrs	r3, r3, #8
 c000b7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 c000b82:	617b      	str	r3, [r7, #20]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN)>>RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c000b84:	4b62      	ldr	r3, [pc, #392]	@ (c000d10 <SystemCoreClockUpdate+0x248>)
 c000b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c000b88:	091b      	lsrs	r3, r3, #4
 c000b8a:	f003 0301 	and.w	r3, r3, #1
 c000b8e:	613b      	str	r3, [r7, #16]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN)>> RCC_PLL1FRACR_PLL1FRACN_Pos));
 c000b90:	4b5f      	ldr	r3, [pc, #380]	@ (c000d10 <SystemCoreClockUpdate+0x248>)
 c000b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c000b94:	08db      	lsrs	r3, r3, #3
 c000b96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c000b9a:	693a      	ldr	r2, [r7, #16]
 c000b9c:	fb02 f303 	mul.w	r3, r2, r3
 c000ba0:	ee07 3a90 	vmov	s15, r3
 c000ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c000ba8:	edc7 7a03 	vstr	s15, [r7, #12]
 c000bac:	69bb      	ldr	r3, [r7, #24]
 c000bae:	2b03      	cmp	r3, #3
 c000bb0:	d059      	beq.n	c000c66 <SystemCoreClockUpdate+0x19e>
 c000bb2:	69bb      	ldr	r3, [r7, #24]
 c000bb4:	2b03      	cmp	r3, #3
 c000bb6:	d878      	bhi.n	c000caa <SystemCoreClockUpdate+0x1e2>
 c000bb8:	69bb      	ldr	r3, [r7, #24]
 c000bba:	2b01      	cmp	r3, #1
 c000bbc:	d003      	beq.n	c000bc6 <SystemCoreClockUpdate+0xfe>
 c000bbe:	69bb      	ldr	r3, [r7, #24]
 c000bc0:	2b02      	cmp	r3, #2
 c000bc2:	d02e      	beq.n	c000c22 <SystemCoreClockUpdate+0x15a>
 c000bc4:	e071      	b.n	c000caa <SystemCoreClockUpdate+0x1e2>

      switch (pllsource)
      {
      case 0x01UL:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 c000bc6:	4b52      	ldr	r3, [pc, #328]	@ (c000d10 <SystemCoreClockUpdate+0x248>)
 c000bc8:	681b      	ldr	r3, [r3, #0]
 c000bca:	08db      	lsrs	r3, r3, #3
 c000bcc:	f003 0303 	and.w	r3, r3, #3
 c000bd0:	4a50      	ldr	r2, [pc, #320]	@ (c000d14 <SystemCoreClockUpdate+0x24c>)
 c000bd2:	fa22 f303 	lsr.w	r3, r2, r3
 c000bd6:	60bb      	str	r3, [r7, #8]
        pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c000bd8:	68bb      	ldr	r3, [r7, #8]
 c000bda:	ee07 3a90 	vmov	s15, r3
 c000bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c000be2:	697b      	ldr	r3, [r7, #20]
 c000be4:	ee07 3a90 	vmov	s15, r3
 c000be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c000bec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c000bf0:	4b47      	ldr	r3, [pc, #284]	@ (c000d10 <SystemCoreClockUpdate+0x248>)
 c000bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c000bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c000bf8:	ee07 3a90 	vmov	s15, r3
 c000bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c000c00:	ed97 6a03 	vldr	s12, [r7, #12]
 c000c04:	eddf 5a47 	vldr	s11, [pc, #284]	@ c000d24 <SystemCoreClockUpdate+0x25c>
 c000c08:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c000c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c000c10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c000c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c000c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 c000c1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c000c20:	e047      	b.n	c000cb2 <SystemCoreClockUpdate+0x1ea>

      case 0x02UL:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c000c22:	697b      	ldr	r3, [r7, #20]
 c000c24:	ee07 3a90 	vmov	s15, r3
 c000c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c000c2c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ c000d28 <SystemCoreClockUpdate+0x260>
 c000c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c000c34:	4b36      	ldr	r3, [pc, #216]	@ (c000d10 <SystemCoreClockUpdate+0x248>)
 c000c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c000c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c000c3c:	ee07 3a90 	vmov	s15, r3
 c000c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c000c44:	ed97 6a03 	vldr	s12, [r7, #12]
 c000c48:	eddf 5a36 	vldr	s11, [pc, #216]	@ c000d24 <SystemCoreClockUpdate+0x25c>
 c000c4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c000c50:	ee76 7aa7 	vadd.f32	s15, s13, s15
                  (fracn1/(float_t)0x2000) +(float_t)1 );
 c000c54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c000c58:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c000c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 c000c60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c000c64:	e025      	b.n	c000cb2 <SystemCoreClockUpdate+0x1ea>

      case 0x03UL:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c000c66:	697b      	ldr	r3, [r7, #20]
 c000c68:	ee07 3a90 	vmov	s15, r3
 c000c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c000c70:	eddf 6a2e 	vldr	s13, [pc, #184]	@ c000d2c <SystemCoreClockUpdate+0x264>
 c000c74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c000c78:	4b25      	ldr	r3, [pc, #148]	@ (c000d10 <SystemCoreClockUpdate+0x248>)
 c000c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c000c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c000c80:	ee07 3a90 	vmov	s15, r3
 c000c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
                    (fracn1/(float_t)0x2000) +(float_t)1 );
 c000c88:	ed97 6a03 	vldr	s12, [r7, #12]
 c000c8c:	eddf 5a25 	vldr	s11, [pc, #148]	@ c000d24 <SystemCoreClockUpdate+0x25c>
 c000c90:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c000c94:	ee76 7aa7 	vadd.f32	s15, s13, s15
                    (fracn1/(float_t)0x2000) +(float_t)1 );
 c000c98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c000c9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c000ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 c000ca4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c000ca8:	e003      	b.n	c000cb2 <SystemCoreClockUpdate+0x1ea>

      default: /* No clock sent to PLL*/
          pllvco = (float_t) 0U;
 c000caa:	f04f 0300 	mov.w	r3, #0
 c000cae:	61fb      	str	r3, [r7, #28]
        break;
 c000cb0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >>RCC_PLL1DIVR_PLL1P_Pos) + 1U ) ;
 c000cb2:	4b17      	ldr	r3, [pc, #92]	@ (c000d10 <SystemCoreClockUpdate+0x248>)
 c000cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c000cb6:	0a5b      	lsrs	r3, r3, #9
 c000cb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c000cbc:	3301      	adds	r3, #1
 c000cbe:	607b      	str	r3, [r7, #4]
      SystemCoreClock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 c000cc0:	687b      	ldr	r3, [r7, #4]
 c000cc2:	ee07 3a90 	vmov	s15, r3
 c000cc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c000cca:	edd7 6a07 	vldr	s13, [r7, #28]
 c000cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c000cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c000cd6:	ee17 2a90 	vmov	r2, s15
 c000cda:	4b0f      	ldr	r3, [pc, #60]	@ (c000d18 <SystemCoreClockUpdate+0x250>)
 c000cdc:	601a      	str	r2, [r3, #0]

      break;
 c000cde:	e003      	b.n	c000ce8 <SystemCoreClockUpdate+0x220>

  default:
    SystemCoreClock = HSI_VALUE;
 c000ce0:	4b0d      	ldr	r3, [pc, #52]	@ (c000d18 <SystemCoreClockUpdate+0x250>)
 c000ce2:	4a0c      	ldr	r2, [pc, #48]	@ (c000d14 <SystemCoreClockUpdate+0x24c>)
 c000ce4:	601a      	str	r2, [r3, #0]
    break;
 c000ce6:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 c000ce8:	4b09      	ldr	r3, [pc, #36]	@ (c000d10 <SystemCoreClockUpdate+0x248>)
 c000cea:	6a1b      	ldr	r3, [r3, #32]
 c000cec:	f003 030f 	and.w	r3, r3, #15
 c000cf0:	4a0f      	ldr	r2, [pc, #60]	@ (c000d30 <SystemCoreClockUpdate+0x268>)
 c000cf2:	5cd3      	ldrb	r3, [r2, r3]
 c000cf4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c000cf6:	4b08      	ldr	r3, [pc, #32]	@ (c000d18 <SystemCoreClockUpdate+0x250>)
 c000cf8:	681a      	ldr	r2, [r3, #0]
 c000cfa:	683b      	ldr	r3, [r7, #0]
 c000cfc:	fa22 f303 	lsr.w	r3, r2, r3
 c000d00:	4a05      	ldr	r2, [pc, #20]	@ (c000d18 <SystemCoreClockUpdate+0x250>)
 c000d02:	6013      	str	r3, [r2, #0]

}
 c000d04:	bf00      	nop
 c000d06:	3724      	adds	r7, #36	@ 0x24
 c000d08:	46bd      	mov	sp, r7
 c000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d0e:	4770      	bx	lr
 c000d10:	54020c00 	.word	0x54020c00
 c000d14:	03d09000 	.word	0x03d09000
 c000d18:	30040200 	.word	0x30040200
 c000d1c:	003d0900 	.word	0x003d0900
 c000d20:	007a1200 	.word	0x007a1200
 c000d24:	46000000 	.word	0x46000000
 c000d28:	4a742400 	.word	0x4a742400
 c000d2c:	4af42400 	.word	0x4af42400
 c000d30:	0c0020dc 	.word	0x0c0020dc

0c000d34 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c000d34:	b580      	push	{r7, lr}
 c000d36:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c000d38:	f7ff fec6 	bl	c000ac8 <SystemCoreClockUpdate>

  return SystemCoreClock;
 c000d3c:	4b1c      	ldr	r3, [pc, #112]	@ (c000db0 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c000d3e:	681b      	ldr	r3, [r3, #0]
}
 c000d40:	4618      	mov	r0, r3
 c000d42:	46bd      	mov	sp, r7
 c000d44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000d48:	4671      	mov	r1, lr
 c000d4a:	4672      	mov	r2, lr
 c000d4c:	4673      	mov	r3, lr
 c000d4e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c000d52:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c000d56:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c000d5a:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c000d5e:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c000d62:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c000d66:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c000d6a:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c000d6e:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c000d72:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c000d76:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c000d7a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c000d7e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c000d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c000d86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c000d8a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c000d8e:	f38e 8c00 	msr	CPSR_fs, lr
 c000d92:	b410      	push	{r4}
 c000d94:	eef1 ca10 	vmrs	ip, fpscr
 c000d98:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c000d9c:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c000da0:	ea0c 0c04 	and.w	ip, ip, r4
 c000da4:	eee1 ca10 	vmsr	fpscr, ip
 c000da8:	bc10      	pop	{r4}
 c000daa:	46f4      	mov	ip, lr
 c000dac:	4774      	bxns	lr
 c000dae:	bf00      	nop
 c000db0:	30040200 	.word	0x30040200

0c000db4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 c000db4:	480d      	ldr	r0, [pc, #52]	@ (c000dec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 c000db6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 c000db8:	f7ff fe00 	bl	c0009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 c000dbc:	480c      	ldr	r0, [pc, #48]	@ (c000df0 <LoopForever+0x6>)
  ldr r1, =_edata
 c000dbe:	490d      	ldr	r1, [pc, #52]	@ (c000df4 <LoopForever+0xa>)
  ldr r2, =_sidata
 c000dc0:	4a0d      	ldr	r2, [pc, #52]	@ (c000df8 <LoopForever+0xe>)
  movs r3, #0
 c000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 c000dc4:	e002      	b.n	c000dcc <LoopCopyDataInit>

0c000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 c000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 c000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 c000dca:	3304      	adds	r3, #4

0c000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 c000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 c000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 c000dd0:	d3f9      	bcc.n	c000dc6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 c000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (c000dfc <LoopForever+0x12>)
  ldr r4, =_ebss
 c000dd4:	4c0a      	ldr	r4, [pc, #40]	@ (c000e00 <LoopForever+0x16>)
  movs r3, #0
 c000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 c000dd8:	e001      	b.n	c000dde <LoopFillZerobss>

0c000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 c000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 c000ddc:	3204      	adds	r2, #4

0c000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 c000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 c000de0:	d3fb      	bcc.n	c000dda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c000de2:	f001 f8ff 	bl	c001fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 c000de6:	f7ff fa7f 	bl	c0002e8 <main>

0c000dea <LoopForever>:

LoopForever:
    b LoopForever
 c000dea:	e7fe      	b.n	c000dea <LoopForever>
  ldr   r0, =_estack
 c000dec:	30050000 	.word	0x30050000
  ldr r0, =_sdata
 c000df0:	30040200 	.word	0x30040200
  ldr r1, =_edata
 c000df4:	3004025c 	.word	0x3004025c
  ldr r2, =_sidata
 c000df8:	0c0020f4 	.word	0x0c0020f4
  ldr r2, =_sbss
 c000dfc:	3004025c 	.word	0x3004025c
  ldr r4, =_ebss
 c000e00:	30040654 	.word	0x30040654

0c000e04 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 c000e04:	e7fe      	b.n	c000e04 <ADC1_IRQHandler>
	...

0c000e08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c000e08:	b580      	push	{r7, lr}
 c000e0a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 c000e0c:	2003      	movs	r0, #3
 c000e0e:	f000 f93c 	bl	c00108a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c000e12:	f000 fbf7 	bl	c001604 <HAL_RCC_GetSysClockFreq>
 c000e16:	4602      	mov	r2, r0
 c000e18:	4b0c      	ldr	r3, [pc, #48]	@ (c000e4c <HAL_Init+0x44>)
 c000e1a:	6a1b      	ldr	r3, [r3, #32]
 c000e1c:	f003 030f 	and.w	r3, r3, #15
 c000e20:	490b      	ldr	r1, [pc, #44]	@ (c000e50 <HAL_Init+0x48>)
 c000e22:	5ccb      	ldrb	r3, [r1, r3]
 c000e24:	fa22 f303 	lsr.w	r3, r2, r3
 c000e28:	4a0a      	ldr	r2, [pc, #40]	@ (c000e54 <HAL_Init+0x4c>)
 c000e2a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 c000e2c:	2004      	movs	r0, #4
 c000e2e:	f000 f973 	bl	c001118 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c000e32:	200f      	movs	r0, #15
 c000e34:	f000 f810 	bl	c000e58 <HAL_InitTick>
 c000e38:	4603      	mov	r3, r0
 c000e3a:	2b00      	cmp	r3, #0
 c000e3c:	d001      	beq.n	c000e42 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 c000e3e:	2301      	movs	r3, #1
 c000e40:	e002      	b.n	c000e48 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 c000e42:	f7ff fce5 	bl	c000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 c000e46:	2300      	movs	r3, #0
}
 c000e48:	4618      	mov	r0, r3
 c000e4a:	bd80      	pop	{r7, pc}
 c000e4c:	54020c00 	.word	0x54020c00
 c000e50:	0c0020dc 	.word	0x0c0020dc
 c000e54:	30040200 	.word	0x30040200

0c000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c000e58:	b580      	push	{r7, lr}
 c000e5a:	b084      	sub	sp, #16
 c000e5c:	af00      	add	r7, sp, #0
 c000e5e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 c000e60:	2300      	movs	r3, #0
 c000e62:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 c000e64:	4b33      	ldr	r3, [pc, #204]	@ (c000f34 <HAL_InitTick+0xdc>)
 c000e66:	781b      	ldrb	r3, [r3, #0]
 c000e68:	2b00      	cmp	r3, #0
 c000e6a:	d101      	bne.n	c000e70 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 c000e6c:	2301      	movs	r3, #1
 c000e6e:	e05c      	b.n	c000f2a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 c000e70:	4b31      	ldr	r3, [pc, #196]	@ (c000f38 <HAL_InitTick+0xe0>)
 c000e72:	681b      	ldr	r3, [r3, #0]
 c000e74:	f003 0304 	and.w	r3, r3, #4
 c000e78:	2b04      	cmp	r3, #4
 c000e7a:	d10c      	bne.n	c000e96 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 c000e7c:	4b2f      	ldr	r3, [pc, #188]	@ (c000f3c <HAL_InitTick+0xe4>)
 c000e7e:	681a      	ldr	r2, [r3, #0]
 c000e80:	4b2c      	ldr	r3, [pc, #176]	@ (c000f34 <HAL_InitTick+0xdc>)
 c000e82:	781b      	ldrb	r3, [r3, #0]
 c000e84:	4619      	mov	r1, r3
 c000e86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 c000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 c000e92:	60fb      	str	r3, [r7, #12]
 c000e94:	e037      	b.n	c000f06 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 c000e96:	f000 f997 	bl	c0011c8 <HAL_SYSTICK_GetCLKSourceConfig>
 c000e9a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 c000e9c:	68bb      	ldr	r3, [r7, #8]
 c000e9e:	2b02      	cmp	r3, #2
 c000ea0:	d023      	beq.n	c000eea <HAL_InitTick+0x92>
 c000ea2:	68bb      	ldr	r3, [r7, #8]
 c000ea4:	2b02      	cmp	r3, #2
 c000ea6:	d82d      	bhi.n	c000f04 <HAL_InitTick+0xac>
 c000ea8:	68bb      	ldr	r3, [r7, #8]
 c000eaa:	2b00      	cmp	r3, #0
 c000eac:	d003      	beq.n	c000eb6 <HAL_InitTick+0x5e>
 c000eae:	68bb      	ldr	r3, [r7, #8]
 c000eb0:	2b01      	cmp	r3, #1
 c000eb2:	d00d      	beq.n	c000ed0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 c000eb4:	e026      	b.n	c000f04 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 c000eb6:	4b21      	ldr	r3, [pc, #132]	@ (c000f3c <HAL_InitTick+0xe4>)
 c000eb8:	681a      	ldr	r2, [r3, #0]
 c000eba:	4b1e      	ldr	r3, [pc, #120]	@ (c000f34 <HAL_InitTick+0xdc>)
 c000ebc:	781b      	ldrb	r3, [r3, #0]
 c000ebe:	4619      	mov	r1, r3
 c000ec0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 c000ec4:	fbb3 f3f1 	udiv	r3, r3, r1
 c000ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 c000ecc:	60fb      	str	r3, [r7, #12]
        break;
 c000ece:	e01a      	b.n	c000f06 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 c000ed0:	4b18      	ldr	r3, [pc, #96]	@ (c000f34 <HAL_InitTick+0xdc>)
 c000ed2:	781b      	ldrb	r3, [r3, #0]
 c000ed4:	461a      	mov	r2, r3
 c000ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c000eda:	fbb3 f3f2 	udiv	r3, r3, r2
 c000ede:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 c000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 c000ee6:	60fb      	str	r3, [r7, #12]
        break;
 c000ee8:	e00d      	b.n	c000f06 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 c000eea:	4b12      	ldr	r3, [pc, #72]	@ (c000f34 <HAL_InitTick+0xdc>)
 c000eec:	781b      	ldrb	r3, [r3, #0]
 c000eee:	461a      	mov	r2, r3
 c000ef0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c000ef4:	fbb3 f3f2 	udiv	r3, r3, r2
 c000ef8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 c000efc:	fbb2 f3f3 	udiv	r3, r2, r3
 c000f00:	60fb      	str	r3, [r7, #12]
        break;
 c000f02:	e000      	b.n	c000f06 <HAL_InitTick+0xae>
        break;
 c000f04:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 c000f06:	68f8      	ldr	r0, [r7, #12]
 c000f08:	f000 f8e4 	bl	c0010d4 <HAL_SYSTICK_Config>
 c000f0c:	4603      	mov	r3, r0
 c000f0e:	2b00      	cmp	r3, #0
 c000f10:	d001      	beq.n	c000f16 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 c000f12:	2301      	movs	r3, #1
 c000f14:	e009      	b.n	c000f2a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c000f16:	2200      	movs	r2, #0
 c000f18:	6879      	ldr	r1, [r7, #4]
 c000f1a:	f04f 30ff 	mov.w	r0, #4294967295
 c000f1e:	f000 f8bf 	bl	c0010a0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 c000f22:	4a07      	ldr	r2, [pc, #28]	@ (c000f40 <HAL_InitTick+0xe8>)
 c000f24:	687b      	ldr	r3, [r7, #4]
 c000f26:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 c000f28:	2300      	movs	r3, #0
}
 c000f2a:	4618      	mov	r0, r3
 c000f2c:	3710      	adds	r7, #16
 c000f2e:	46bd      	mov	sp, r7
 c000f30:	bd80      	pop	{r7, pc}
 c000f32:	bf00      	nop
 c000f34:	30040208 	.word	0x30040208
 c000f38:	e000e010 	.word	0xe000e010
 c000f3c:	30040200 	.word	0x30040200
 c000f40:	30040204 	.word	0x30040204

0c000f44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c000f44:	b480      	push	{r7}
 c000f46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c000f48:	4b06      	ldr	r3, [pc, #24]	@ (c000f64 <HAL_IncTick+0x20>)
 c000f4a:	781b      	ldrb	r3, [r3, #0]
 c000f4c:	461a      	mov	r2, r3
 c000f4e:	4b06      	ldr	r3, [pc, #24]	@ (c000f68 <HAL_IncTick+0x24>)
 c000f50:	681b      	ldr	r3, [r3, #0]
 c000f52:	4413      	add	r3, r2
 c000f54:	4a04      	ldr	r2, [pc, #16]	@ (c000f68 <HAL_IncTick+0x24>)
 c000f56:	6013      	str	r3, [r2, #0]
}
 c000f58:	bf00      	nop
 c000f5a:	46bd      	mov	sp, r7
 c000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f60:	4770      	bx	lr
 c000f62:	bf00      	nop
 c000f64:	30040208 	.word	0x30040208
 c000f68:	30040284 	.word	0x30040284

0c000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c000f6c:	b480      	push	{r7}
 c000f6e:	b085      	sub	sp, #20
 c000f70:	af00      	add	r7, sp, #0
 c000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c000f74:	687b      	ldr	r3, [r7, #4]
 c000f76:	f003 0307 	and.w	r3, r3, #7
 c000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (c000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 c000f7e:	68db      	ldr	r3, [r3, #12]
 c000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c000f82:	68ba      	ldr	r2, [r7, #8]
 c000f84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 c000f88:	4013      	ands	r3, r2
 c000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c000f8c:	68fb      	ldr	r3, [r7, #12]
 c000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c000f90:	68bb      	ldr	r3, [r7, #8]
 c000f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c000f94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 c000f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c000f9e:	4a04      	ldr	r2, [pc, #16]	@ (c000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 c000fa0:	68bb      	ldr	r3, [r7, #8]
 c000fa2:	60d3      	str	r3, [r2, #12]
}
 c000fa4:	bf00      	nop
 c000fa6:	3714      	adds	r7, #20
 c000fa8:	46bd      	mov	sp, r7
 c000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000fae:	4770      	bx	lr
 c000fb0:	e000ed00 	.word	0xe000ed00

0c000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c000fb4:	b480      	push	{r7}
 c000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c000fb8:	4b04      	ldr	r3, [pc, #16]	@ (c000fcc <__NVIC_GetPriorityGrouping+0x18>)
 c000fba:	68db      	ldr	r3, [r3, #12]
 c000fbc:	0a1b      	lsrs	r3, r3, #8
 c000fbe:	f003 0307 	and.w	r3, r3, #7
}
 c000fc2:	4618      	mov	r0, r3
 c000fc4:	46bd      	mov	sp, r7
 c000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000fca:	4770      	bx	lr
 c000fcc:	e000ed00 	.word	0xe000ed00

0c000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c000fd0:	b480      	push	{r7}
 c000fd2:	b083      	sub	sp, #12
 c000fd4:	af00      	add	r7, sp, #0
 c000fd6:	4603      	mov	r3, r0
 c000fd8:	6039      	str	r1, [r7, #0]
 c000fda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 c000fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c000fe0:	2b00      	cmp	r3, #0
 c000fe2:	db0a      	blt.n	c000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000fe4:	683b      	ldr	r3, [r7, #0]
 c000fe6:	b2da      	uxtb	r2, r3
 c000fe8:	490c      	ldr	r1, [pc, #48]	@ (c00101c <__NVIC_SetPriority+0x4c>)
 c000fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c000fee:	0112      	lsls	r2, r2, #4
 c000ff0:	b2d2      	uxtb	r2, r2
 c000ff2:	440b      	add	r3, r1
 c000ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c000ff8:	e00a      	b.n	c001010 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000ffa:	683b      	ldr	r3, [r7, #0]
 c000ffc:	b2da      	uxtb	r2, r3
 c000ffe:	4908      	ldr	r1, [pc, #32]	@ (c001020 <__NVIC_SetPriority+0x50>)
 c001000:	88fb      	ldrh	r3, [r7, #6]
 c001002:	f003 030f 	and.w	r3, r3, #15
 c001006:	3b04      	subs	r3, #4
 c001008:	0112      	lsls	r2, r2, #4
 c00100a:	b2d2      	uxtb	r2, r2
 c00100c:	440b      	add	r3, r1
 c00100e:	761a      	strb	r2, [r3, #24]
}
 c001010:	bf00      	nop
 c001012:	370c      	adds	r7, #12
 c001014:	46bd      	mov	sp, r7
 c001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00101a:	4770      	bx	lr
 c00101c:	e000e100 	.word	0xe000e100
 c001020:	e000ed00 	.word	0xe000ed00

0c001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001024:	b480      	push	{r7}
 c001026:	b089      	sub	sp, #36	@ 0x24
 c001028:	af00      	add	r7, sp, #0
 c00102a:	60f8      	str	r0, [r7, #12]
 c00102c:	60b9      	str	r1, [r7, #8]
 c00102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c001030:	68fb      	ldr	r3, [r7, #12]
 c001032:	f003 0307 	and.w	r3, r3, #7
 c001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001038:	69fb      	ldr	r3, [r7, #28]
 c00103a:	f1c3 0307 	rsb	r3, r3, #7
 c00103e:	2b04      	cmp	r3, #4
 c001040:	bf28      	it	cs
 c001042:	2304      	movcs	r3, #4
 c001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c001046:	69fb      	ldr	r3, [r7, #28]
 c001048:	3304      	adds	r3, #4
 c00104a:	2b06      	cmp	r3, #6
 c00104c:	d902      	bls.n	c001054 <NVIC_EncodePriority+0x30>
 c00104e:	69fb      	ldr	r3, [r7, #28]
 c001050:	3b03      	subs	r3, #3
 c001052:	e000      	b.n	c001056 <NVIC_EncodePriority+0x32>
 c001054:	2300      	movs	r3, #0
 c001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001058:	f04f 32ff 	mov.w	r2, #4294967295
 c00105c:	69bb      	ldr	r3, [r7, #24]
 c00105e:	fa02 f303 	lsl.w	r3, r2, r3
 c001062:	43da      	mvns	r2, r3
 c001064:	68bb      	ldr	r3, [r7, #8]
 c001066:	401a      	ands	r2, r3
 c001068:	697b      	ldr	r3, [r7, #20]
 c00106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c00106c:	f04f 31ff 	mov.w	r1, #4294967295
 c001070:	697b      	ldr	r3, [r7, #20]
 c001072:	fa01 f303 	lsl.w	r3, r1, r3
 c001076:	43d9      	mvns	r1, r3
 c001078:	687b      	ldr	r3, [r7, #4]
 c00107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c00107c:	4313      	orrs	r3, r2
         );
}
 c00107e:	4618      	mov	r0, r3
 c001080:	3724      	adds	r7, #36	@ 0x24
 c001082:	46bd      	mov	sp, r7
 c001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001088:	4770      	bx	lr

0c00108a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c00108a:	b580      	push	{r7, lr}
 c00108c:	b082      	sub	sp, #8
 c00108e:	af00      	add	r7, sp, #0
 c001090:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c001092:	6878      	ldr	r0, [r7, #4]
 c001094:	f7ff ff6a 	bl	c000f6c <__NVIC_SetPriorityGrouping>
}
 c001098:	bf00      	nop
 c00109a:	3708      	adds	r7, #8
 c00109c:	46bd      	mov	sp, r7
 c00109e:	bd80      	pop	{r7, pc}

0c0010a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0010a0:	b580      	push	{r7, lr}
 c0010a2:	b086      	sub	sp, #24
 c0010a4:	af00      	add	r7, sp, #0
 c0010a6:	4603      	mov	r3, r0
 c0010a8:	60b9      	str	r1, [r7, #8]
 c0010aa:	607a      	str	r2, [r7, #4]
 c0010ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c0010ae:	f7ff ff81 	bl	c000fb4 <__NVIC_GetPriorityGrouping>
 c0010b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c0010b4:	687a      	ldr	r2, [r7, #4]
 c0010b6:	68b9      	ldr	r1, [r7, #8]
 c0010b8:	6978      	ldr	r0, [r7, #20]
 c0010ba:	f7ff ffb3 	bl	c001024 <NVIC_EncodePriority>
 c0010be:	4602      	mov	r2, r0
 c0010c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 c0010c4:	4611      	mov	r1, r2
 c0010c6:	4618      	mov	r0, r3
 c0010c8:	f7ff ff82 	bl	c000fd0 <__NVIC_SetPriority>
}
 c0010cc:	bf00      	nop
 c0010ce:	3718      	adds	r7, #24
 c0010d0:	46bd      	mov	sp, r7
 c0010d2:	bd80      	pop	{r7, pc}

0c0010d4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c0010d4:	b480      	push	{r7}
 c0010d6:	b083      	sub	sp, #12
 c0010d8:	af00      	add	r7, sp, #0
 c0010da:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c0010dc:	687b      	ldr	r3, [r7, #4]
 c0010de:	3b01      	subs	r3, #1
 c0010e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 c0010e4:	d301      	bcc.n	c0010ea <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 c0010e6:	2301      	movs	r3, #1
 c0010e8:	e00d      	b.n	c001106 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 c0010ea:	4a0a      	ldr	r2, [pc, #40]	@ (c001114 <HAL_SYSTICK_Config+0x40>)
 c0010ec:	687b      	ldr	r3, [r7, #4]
 c0010ee:	3b01      	subs	r3, #1
 c0010f0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 c0010f2:	4b08      	ldr	r3, [pc, #32]	@ (c001114 <HAL_SYSTICK_Config+0x40>)
 c0010f4:	2200      	movs	r2, #0
 c0010f6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 c0010f8:	4b06      	ldr	r3, [pc, #24]	@ (c001114 <HAL_SYSTICK_Config+0x40>)
 c0010fa:	681b      	ldr	r3, [r3, #0]
 c0010fc:	4a05      	ldr	r2, [pc, #20]	@ (c001114 <HAL_SYSTICK_Config+0x40>)
 c0010fe:	f043 0303 	orr.w	r3, r3, #3
 c001102:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 c001104:	2300      	movs	r3, #0
}
 c001106:	4618      	mov	r0, r3
 c001108:	370c      	adds	r7, #12
 c00110a:	46bd      	mov	sp, r7
 c00110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001110:	4770      	bx	lr
 c001112:	bf00      	nop
 c001114:	e000e010 	.word	0xe000e010

0c001118 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 c001118:	b480      	push	{r7}
 c00111a:	b083      	sub	sp, #12
 c00111c:	af00      	add	r7, sp, #0
 c00111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 c001120:	687b      	ldr	r3, [r7, #4]
 c001122:	2b04      	cmp	r3, #4
 c001124:	d844      	bhi.n	c0011b0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 c001126:	a201      	add	r2, pc, #4	@ (adr r2, c00112c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 c001128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00112c:	0c00114f 	.word	0x0c00114f
 c001130:	0c00116d 	.word	0x0c00116d
 c001134:	0c00118f 	.word	0x0c00118f
 c001138:	0c0011b1 	.word	0x0c0011b1
 c00113c:	0c001141 	.word	0x0c001141
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 c001140:	4b1f      	ldr	r3, [pc, #124]	@ (c0011c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001142:	681b      	ldr	r3, [r3, #0]
 c001144:	4a1e      	ldr	r2, [pc, #120]	@ (c0011c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001146:	f043 0304 	orr.w	r3, r3, #4
 c00114a:	6013      	str	r3, [r2, #0]
      break;
 c00114c:	e031      	b.n	c0011b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 c00114e:	4b1c      	ldr	r3, [pc, #112]	@ (c0011c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001150:	681b      	ldr	r3, [r3, #0]
 c001152:	4a1b      	ldr	r2, [pc, #108]	@ (c0011c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001154:	f023 0304 	bic.w	r3, r3, #4
 c001158:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 c00115a:	4b1a      	ldr	r3, [pc, #104]	@ (c0011c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c00115c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c001160:	4a18      	ldr	r2, [pc, #96]	@ (c0011c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c001162:	f023 030c 	bic.w	r3, r3, #12
 c001166:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 c00116a:	e022      	b.n	c0011b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 c00116c:	4b14      	ldr	r3, [pc, #80]	@ (c0011c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c00116e:	681b      	ldr	r3, [r3, #0]
 c001170:	4a13      	ldr	r2, [pc, #76]	@ (c0011c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001172:	f023 0304 	bic.w	r3, r3, #4
 c001176:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 c001178:	4b12      	ldr	r3, [pc, #72]	@ (c0011c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c00117a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00117e:	f023 030c 	bic.w	r3, r3, #12
 c001182:	4a10      	ldr	r2, [pc, #64]	@ (c0011c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c001184:	f043 0304 	orr.w	r3, r3, #4
 c001188:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 c00118c:	e011      	b.n	c0011b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 c00118e:	4b0c      	ldr	r3, [pc, #48]	@ (c0011c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001190:	681b      	ldr	r3, [r3, #0]
 c001192:	4a0b      	ldr	r2, [pc, #44]	@ (c0011c0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001194:	f023 0304 	bic.w	r3, r3, #4
 c001198:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 c00119a:	4b0a      	ldr	r3, [pc, #40]	@ (c0011c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c00119c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c0011a0:	f023 030c 	bic.w	r3, r3, #12
 c0011a4:	4a07      	ldr	r2, [pc, #28]	@ (c0011c4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c0011a6:	f043 0308 	orr.w	r3, r3, #8
 c0011aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 c0011ae:	e000      	b.n	c0011b2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 c0011b0:	bf00      	nop
  }
}
 c0011b2:	bf00      	nop
 c0011b4:	370c      	adds	r7, #12
 c0011b6:	46bd      	mov	sp, r7
 c0011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0011bc:	4770      	bx	lr
 c0011be:	bf00      	nop
 c0011c0:	e000e010 	.word	0xe000e010
 c0011c4:	54020c00 	.word	0x54020c00

0c0011c8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 c0011c8:	b480      	push	{r7}
 c0011ca:	b083      	sub	sp, #12
 c0011cc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 c0011ce:	4b17      	ldr	r3, [pc, #92]	@ (c00122c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 c0011d0:	681b      	ldr	r3, [r3, #0]
 c0011d2:	f003 0304 	and.w	r3, r3, #4
 c0011d6:	2b00      	cmp	r3, #0
 c0011d8:	d002      	beq.n	c0011e0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 c0011da:	2304      	movs	r3, #4
 c0011dc:	607b      	str	r3, [r7, #4]
 c0011de:	e01e      	b.n	c00121e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 c0011e0:	4b13      	ldr	r3, [pc, #76]	@ (c001230 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 c0011e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c0011e6:	f003 030c 	and.w	r3, r3, #12
 c0011ea:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 c0011ec:	683b      	ldr	r3, [r7, #0]
 c0011ee:	2b08      	cmp	r3, #8
 c0011f0:	d00f      	beq.n	c001212 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 c0011f2:	683b      	ldr	r3, [r7, #0]
 c0011f4:	2b08      	cmp	r3, #8
 c0011f6:	d80f      	bhi.n	c001218 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 c0011f8:	683b      	ldr	r3, [r7, #0]
 c0011fa:	2b00      	cmp	r3, #0
 c0011fc:	d003      	beq.n	c001206 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 c0011fe:	683b      	ldr	r3, [r7, #0]
 c001200:	2b04      	cmp	r3, #4
 c001202:	d003      	beq.n	c00120c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 c001204:	e008      	b.n	c001218 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 c001206:	2300      	movs	r3, #0
 c001208:	607b      	str	r3, [r7, #4]
        break;
 c00120a:	e008      	b.n	c00121e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 c00120c:	2301      	movs	r3, #1
 c00120e:	607b      	str	r3, [r7, #4]
        break;
 c001210:	e005      	b.n	c00121e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 c001212:	2302      	movs	r3, #2
 c001214:	607b      	str	r3, [r7, #4]
        break;
 c001216:	e002      	b.n	c00121e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 c001218:	2300      	movs	r3, #0
 c00121a:	607b      	str	r3, [r7, #4]
        break;
 c00121c:	bf00      	nop
    }
  }
  return systick_source;
 c00121e:	687b      	ldr	r3, [r7, #4]
}
 c001220:	4618      	mov	r0, r3
 c001222:	370c      	adds	r7, #12
 c001224:	46bd      	mov	sp, r7
 c001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00122a:	4770      	bx	lr
 c00122c:	e000e010 	.word	0xe000e010
 c001230:	54020c00 	.word	0x54020c00

0c001234 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin: specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes: specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c001234:	b480      	push	{r7}
 c001236:	b089      	sub	sp, #36	@ 0x24
 c001238:	af00      	add	r7, sp, #0
 c00123a:	60f8      	str	r0, [r7, #12]
 c00123c:	460b      	mov	r3, r1
 c00123e:	607a      	str	r2, [r7, #4]
 c001240:	817b      	strh	r3, [r7, #10]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 c001242:	2300      	movs	r3, #0
 c001244:	61bb      	str	r3, [r7, #24]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  tmp = GPIOx->SECCFGR;
 c001246:	68fb      	ldr	r3, [r7, #12]
 c001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00124a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c00124c:	e01b      	b.n	c001286 <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c00124e:	897a      	ldrh	r2, [r7, #10]
 c001250:	2101      	movs	r1, #1
 c001252:	69bb      	ldr	r3, [r7, #24]
 c001254:	fa01 f303 	lsl.w	r3, r1, r3
 c001258:	4013      	ands	r3, r2
 c00125a:	617b      	str	r3, [r7, #20]

    if (iocurrent != 0U)
 c00125c:	697b      	ldr	r3, [r7, #20]
 c00125e:	2b00      	cmp	r3, #0
 c001260:	d00e      	beq.n	c001280 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      tmp &= ~(GPIO_SECCFGR_SEC0 << position);
 c001262:	2201      	movs	r2, #1
 c001264:	69bb      	ldr	r3, [r7, #24]
 c001266:	fa02 f303 	lsl.w	r3, r2, r3
 c00126a:	43db      	mvns	r3, r3
 c00126c:	69fa      	ldr	r2, [r7, #28]
 c00126e:	4013      	ands	r3, r2
 c001270:	61fb      	str	r3, [r7, #28]
      tmp |= (PinAttributes << position);
 c001272:	687a      	ldr	r2, [r7, #4]
 c001274:	69bb      	ldr	r3, [r7, #24]
 c001276:	fa02 f303 	lsl.w	r3, r2, r3
 c00127a:	69fa      	ldr	r2, [r7, #28]
 c00127c:	4313      	orrs	r3, r2
 c00127e:	61fb      	str	r3, [r7, #28]
    }
    position++;
 c001280:	69bb      	ldr	r3, [r7, #24]
 c001282:	3301      	adds	r3, #1
 c001284:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 c001286:	897a      	ldrh	r2, [r7, #10]
 c001288:	69bb      	ldr	r3, [r7, #24]
 c00128a:	fa42 f303 	asr.w	r3, r2, r3
 c00128e:	2b00      	cmp	r3, #0
 c001290:	d1dd      	bne.n	c00124e <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = tmp;
 c001292:	68fb      	ldr	r3, [r7, #12]
 c001294:	69fa      	ldr	r2, [r7, #28]
 c001296:	631a      	str	r2, [r3, #48]	@ 0x30
}
 c001298:	bf00      	nop
 c00129a:	3724      	adds	r7, #36	@ 0x24
 c00129c:	46bd      	mov	sp, r7
 c00129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0012a2:	4770      	bx	lr

0c0012a4 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c0012a4:	b480      	push	{r7}
 c0012a6:	b085      	sub	sp, #20
 c0012a8:	af00      	add	r7, sp, #0
 c0012aa:	6078      	str	r0, [r7, #4]
 c0012ac:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if (((PeriphAttributes & ~(GTZC_SEC_PRIV_MSK)) != 0U)
 c0012ae:	683b      	ldr	r3, [r7, #0]
 c0012b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 c0012b4:	f023 0303 	bic.w	r3, r3, #3
 c0012b8:	2b00      	cmp	r3, #0
 c0012ba:	d116      	bne.n	c0012ea <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x46>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c0012bc:	687b      	ldr	r3, [r7, #4]
 c0012be:	0f1b      	lsrs	r3, r3, #28
 c0012c0:	015a      	lsls	r2, r3, #5
 c0012c2:	687b      	ldr	r3, [r7, #4]
 c0012c4:	f003 031f 	and.w	r3, r3, #31
 c0012c8:	4413      	add	r3, r2
 c0012ca:	2b5a      	cmp	r3, #90	@ 0x5a
 c0012cc:	d80d      	bhi.n	c0012ea <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x46>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c0012ce:	687b      	ldr	r3, [r7, #4]
 c0012d0:	f003 0320 	and.w	r3, r3, #32
 c0012d4:	2b00      	cmp	r3, #0
 c0012d6:	d00a      	beq.n	c0012ee <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x4a>
          && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c0012d8:	687b      	ldr	r3, [r7, #4]
 c0012da:	0f1b      	lsrs	r3, r3, #28
 c0012dc:	015a      	lsls	r2, r3, #5
 c0012de:	687b      	ldr	r3, [r7, #4]
 c0012e0:	f003 031f 	and.w	r3, r3, #31
 c0012e4:	4413      	add	r3, r2
 c0012e6:	2b00      	cmp	r3, #0
 c0012e8:	d001      	beq.n	c0012ee <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x4a>
  {
    return HAL_ERROR;
 c0012ea:	2301      	movs	r3, #1
 c0012ec:	e0bc      	b.n	c001468 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1c4>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c0012ee:	687b      	ldr	r3, [r7, #4]
 c0012f0:	f003 0320 	and.w	r3, r3, #32
 c0012f4:	2b00      	cmp	r3, #0
 c0012f6:	d062      	beq.n	c0013be <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x11a>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c0012f8:	683a      	ldr	r2, [r7, #0]
 c0012fa:	f240 1301 	movw	r3, #257	@ 0x101
 c0012fe:	4013      	ands	r3, r2
 c001300:	f240 1201 	movw	r2, #257	@ 0x101
 c001304:	4293      	cmp	r3, r2
 c001306:	d112      	bne.n	c00132e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x8a>
    {
      SET_BIT(GTZC_TZSC1->SECCFGR1, GTZC_CFGR1_MSK);
 c001308:	4b5a      	ldr	r3, [pc, #360]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c00130a:	691b      	ldr	r3, [r3, #16]
 c00130c:	4b59      	ldr	r3, [pc, #356]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c00130e:	f04f 32ff 	mov.w	r2, #4294967295
 c001312:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC1->SECCFGR2, GTZC_CFGR2_MSK);
 c001314:	4b57      	ldr	r3, [pc, #348]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c001316:	695a      	ldr	r2, [r3, #20]
 c001318:	4956      	ldr	r1, [pc, #344]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c00131a:	4b57      	ldr	r3, [pc, #348]	@ (c001478 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d4>)
 c00131c:	4313      	orrs	r3, r2
 c00131e:	614b      	str	r3, [r1, #20]
      SET_BIT(GTZC_TZSC1->SECCFGR3, GTZC_CFGR3_MSK);
 c001320:	4b54      	ldr	r3, [pc, #336]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c001322:	699a      	ldr	r2, [r3, #24]
 c001324:	4953      	ldr	r1, [pc, #332]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c001326:	4b55      	ldr	r3, [pc, #340]	@ (c00147c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d8>)
 c001328:	4313      	orrs	r3, r2
 c00132a:	618b      	str	r3, [r1, #24]
 c00132c:	e015      	b.n	c00135a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xb6>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c00132e:	683b      	ldr	r3, [r7, #0]
 c001330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c001334:	2b00      	cmp	r3, #0
 c001336:	d010      	beq.n	c00135a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xb6>
    {
      CLEAR_BIT(GTZC_TZSC1->SECCFGR1, GTZC_CFGR1_MSK);
 c001338:	4b4e      	ldr	r3, [pc, #312]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c00133a:	691b      	ldr	r3, [r3, #16]
 c00133c:	4b4d      	ldr	r3, [pc, #308]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c00133e:	2200      	movs	r2, #0
 c001340:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC1->SECCFGR2, GTZC_CFGR2_MSK);
 c001342:	4b4c      	ldr	r3, [pc, #304]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c001344:	695a      	ldr	r2, [r3, #20]
 c001346:	494b      	ldr	r1, [pc, #300]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c001348:	4b4d      	ldr	r3, [pc, #308]	@ (c001480 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1dc>)
 c00134a:	4013      	ands	r3, r2
 c00134c:	614b      	str	r3, [r1, #20]
      CLEAR_BIT(GTZC_TZSC1->SECCFGR3, GTZC_CFGR3_MSK);
 c00134e:	4b49      	ldr	r3, [pc, #292]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c001350:	699a      	ldr	r2, [r3, #24]
 c001352:	4948      	ldr	r1, [pc, #288]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c001354:	4b4b      	ldr	r3, [pc, #300]	@ (c001484 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1e0>)
 c001356:	4013      	ands	r3, r2
 c001358:	618b      	str	r3, [r1, #24]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c00135a:	683a      	ldr	r2, [r7, #0]
 c00135c:	f240 2302 	movw	r3, #514	@ 0x202
 c001360:	4013      	ands	r3, r2
 c001362:	f240 2202 	movw	r2, #514	@ 0x202
 c001366:	4293      	cmp	r3, r2
 c001368:	d112      	bne.n	c001390 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xec>
    {
      SET_BIT(GTZC_TZSC1->PRIVCFGR1, GTZC_CFGR1_MSK);
 c00136a:	4b42      	ldr	r3, [pc, #264]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c00136c:	6a1b      	ldr	r3, [r3, #32]
 c00136e:	4b41      	ldr	r3, [pc, #260]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c001370:	f04f 32ff 	mov.w	r2, #4294967295
 c001374:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC1->PRIVCFGR2, GTZC_CFGR2_MSK);
 c001376:	4b3f      	ldr	r3, [pc, #252]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c001378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 c00137a:	493e      	ldr	r1, [pc, #248]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c00137c:	4b3e      	ldr	r3, [pc, #248]	@ (c001478 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d4>)
 c00137e:	4313      	orrs	r3, r2
 c001380:	624b      	str	r3, [r1, #36]	@ 0x24
      SET_BIT(GTZC_TZSC1->PRIVCFGR3, GTZC_CFGR3_MSK);
 c001382:	4b3c      	ldr	r3, [pc, #240]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c001384:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 c001386:	493b      	ldr	r1, [pc, #236]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c001388:	4b3c      	ldr	r3, [pc, #240]	@ (c00147c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d8>)
 c00138a:	4313      	orrs	r3, r2
 c00138c:	628b      	str	r3, [r1, #40]	@ 0x28
 c00138e:	e06a      	b.n	c001466 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1c2>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c001390:	683b      	ldr	r3, [r7, #0]
 c001392:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c001396:	2b00      	cmp	r3, #0
 c001398:	d065      	beq.n	c001466 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1c2>
    {
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR1, GTZC_CFGR1_MSK);
 c00139a:	4b36      	ldr	r3, [pc, #216]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c00139c:	6a1b      	ldr	r3, [r3, #32]
 c00139e:	4b35      	ldr	r3, [pc, #212]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c0013a0:	2200      	movs	r2, #0
 c0013a2:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR2, GTZC_CFGR2_MSK);
 c0013a4:	4b33      	ldr	r3, [pc, #204]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c0013a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 c0013a8:	4932      	ldr	r1, [pc, #200]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c0013aa:	4b35      	ldr	r3, [pc, #212]	@ (c001480 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1dc>)
 c0013ac:	4013      	ands	r3, r2
 c0013ae:	624b      	str	r3, [r1, #36]	@ 0x24
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR3, GTZC_CFGR3_MSK);
 c0013b0:	4b30      	ldr	r3, [pc, #192]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c0013b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 c0013b4:	492f      	ldr	r1, [pc, #188]	@ (c001474 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1d0>)
 c0013b6:	4b33      	ldr	r3, [pc, #204]	@ (c001484 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1e0>)
 c0013b8:	4013      	ands	r3, r2
 c0013ba:	628b      	str	r3, [r1, #40]	@ 0x28
 c0013bc:	e053      	b.n	c001466 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1c2>
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC1->SECCFGR1)
                       + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c0013be:	687b      	ldr	r3, [r7, #4]
 c0013c0:	0f1a      	lsrs	r2, r3, #28
 c0013c2:	4b31      	ldr	r3, [pc, #196]	@ (c001488 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1e4>)
 c0013c4:	4413      	add	r3, r2
    register_address = (uint32_t) &(GTZC_TZSC1->SECCFGR1)
 c0013c6:	009b      	lsls	r3, r3, #2
 c0013c8:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c0013ca:	683a      	ldr	r2, [r7, #0]
 c0013cc:	f240 1301 	movw	r3, #257	@ 0x101
 c0013d0:	4013      	ands	r3, r2
 c0013d2:	f240 1201 	movw	r2, #257	@ 0x101
 c0013d6:	4293      	cmp	r3, r2
 c0013d8:	d10a      	bne.n	c0013f0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x14c>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0013da:	68fb      	ldr	r3, [r7, #12]
 c0013dc:	6819      	ldr	r1, [r3, #0]
 c0013de:	687b      	ldr	r3, [r7, #4]
 c0013e0:	f003 031f 	and.w	r3, r3, #31
 c0013e4:	2201      	movs	r2, #1
 c0013e6:	409a      	lsls	r2, r3
 c0013e8:	68fb      	ldr	r3, [r7, #12]
 c0013ea:	430a      	orrs	r2, r1
 c0013ec:	601a      	str	r2, [r3, #0]
 c0013ee:	e010      	b.n	c001412 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x16e>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c0013f0:	683b      	ldr	r3, [r7, #0]
 c0013f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c0013f6:	2b00      	cmp	r3, #0
 c0013f8:	d00b      	beq.n	c001412 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x16e>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0013fa:	68fb      	ldr	r3, [r7, #12]
 c0013fc:	6819      	ldr	r1, [r3, #0]
 c0013fe:	687b      	ldr	r3, [r7, #4]
 c001400:	f003 031f 	and.w	r3, r3, #31
 c001404:	2201      	movs	r2, #1
 c001406:	fa02 f303 	lsl.w	r3, r2, r3
 c00140a:	43da      	mvns	r2, r3
 c00140c:	68fb      	ldr	r3, [r7, #12]
 c00140e:	400a      	ands	r2, r1
 c001410:	601a      	str	r2, [r3, #0]
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC1->PRIVCFGR1)
                       + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c001412:	687b      	ldr	r3, [r7, #4]
 c001414:	0f1a      	lsrs	r2, r3, #28
 c001416:	4b1d      	ldr	r3, [pc, #116]	@ (c00148c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1e8>)
 c001418:	4413      	add	r3, r2
    register_address = (uint32_t) &(GTZC_TZSC1->PRIVCFGR1)
 c00141a:	009b      	lsls	r3, r3, #2
 c00141c:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c00141e:	683a      	ldr	r2, [r7, #0]
 c001420:	f240 2302 	movw	r3, #514	@ 0x202
 c001424:	4013      	ands	r3, r2
 c001426:	f240 2202 	movw	r2, #514	@ 0x202
 c00142a:	4293      	cmp	r3, r2
 c00142c:	d10a      	bne.n	c001444 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a0>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c00142e:	68fb      	ldr	r3, [r7, #12]
 c001430:	6819      	ldr	r1, [r3, #0]
 c001432:	687b      	ldr	r3, [r7, #4]
 c001434:	f003 031f 	and.w	r3, r3, #31
 c001438:	2201      	movs	r2, #1
 c00143a:	409a      	lsls	r2, r3
 c00143c:	68fb      	ldr	r3, [r7, #12]
 c00143e:	430a      	orrs	r2, r1
 c001440:	601a      	str	r2, [r3, #0]
 c001442:	e010      	b.n	c001466 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1c2>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c001444:	683b      	ldr	r3, [r7, #0]
 c001446:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c00144a:	2b00      	cmp	r3, #0
 c00144c:	d00b      	beq.n	c001466 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1c2>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c00144e:	68fb      	ldr	r3, [r7, #12]
 c001450:	6819      	ldr	r1, [r3, #0]
 c001452:	687b      	ldr	r3, [r7, #4]
 c001454:	f003 031f 	and.w	r3, r3, #31
 c001458:	2201      	movs	r2, #1
 c00145a:	fa02 f303 	lsl.w	r3, r2, r3
 c00145e:	43da      	mvns	r2, r3
 c001460:	68fb      	ldr	r3, [r7, #12]
 c001462:	400a      	ands	r2, r1
 c001464:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c001466:	2300      	movs	r3, #0
}
 c001468:	4618      	mov	r0, r3
 c00146a:	3714      	adds	r7, #20
 c00146c:	46bd      	mov	sp, r7
 c00146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001472:	4770      	bx	lr
 c001474:	50032400 	.word	0x50032400
 c001478:	ff0fff07 	.word	0xff0fff07
 c00147c:	05e6ff03 	.word	0x05e6ff03
 c001480:	00f000f8 	.word	0x00f000f8
 c001484:	fa1900fc 	.word	0xfa1900fc
 c001488:	1400c904 	.word	0x1400c904
 c00148c:	1400c908 	.word	0x1400c908

0c001490 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c001490:	b480      	push	{r7}
 c001492:	b089      	sub	sp, #36	@ 0x24
 c001494:	af00      	add	r7, sp, #0
 c001496:	6078      	str	r0, [r7, #4]
 c001498:	6039      	str	r1, [r7, #0]
  uint32_t size_in_superblocks;
  uint32_t i;

#if defined (GTZC_MPCBB3)
  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c00149a:	687b      	ldr	r3, [r7, #4]
 c00149c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c0014a0:	d013      	beq.n	c0014ca <HAL_GTZC_MPCBB_ConfigMem+0x3a>
 c0014a2:	687b      	ldr	r3, [r7, #4]
 c0014a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c0014a8:	d00f      	beq.n	c0014ca <HAL_GTZC_MPCBB_ConfigMem+0x3a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c0014aa:	687b      	ldr	r3, [r7, #4]
 c0014ac:	4a4e      	ldr	r2, [pc, #312]	@ (c0015e8 <HAL_GTZC_MPCBB_ConfigMem+0x158>)
 c0014ae:	4293      	cmp	r3, r2
 c0014b0:	d00b      	beq.n	c0014ca <HAL_GTZC_MPCBB_ConfigMem+0x3a>
 c0014b2:	687b      	ldr	r3, [r7, #4]
 c0014b4:	4a4d      	ldr	r2, [pc, #308]	@ (c0015ec <HAL_GTZC_MPCBB_ConfigMem+0x15c>)
 c0014b6:	4293      	cmp	r3, r2
 c0014b8:	d007      	beq.n	c0014ca <HAL_GTZC_MPCBB_ConfigMem+0x3a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM3, MemBaseAddress)))
 c0014ba:	687b      	ldr	r3, [r7, #4]
 c0014bc:	4a4c      	ldr	r2, [pc, #304]	@ (c0015f0 <HAL_GTZC_MPCBB_ConfigMem+0x160>)
 c0014be:	4293      	cmp	r3, r2
 c0014c0:	d003      	beq.n	c0014ca <HAL_GTZC_MPCBB_ConfigMem+0x3a>
 c0014c2:	687b      	ldr	r3, [r7, #4]
 c0014c4:	4a4b      	ldr	r2, [pc, #300]	@ (c0015f4 <HAL_GTZC_MPCBB_ConfigMem+0x164>)
 c0014c6:	4293      	cmp	r3, r2
 c0014c8:	d111      	bne.n	c0014ee <HAL_GTZC_MPCBB_ConfigMem+0x5e>
      ||  MPCBB_PARAMETERS_CHECK())
 c0014ca:	683b      	ldr	r3, [r7, #0]
 c0014cc:	681b      	ldr	r3, [r3, #0]
 c0014ce:	2b00      	cmp	r3, #0
 c0014d0:	d004      	beq.n	c0014dc <HAL_GTZC_MPCBB_ConfigMem+0x4c>
 c0014d2:	683b      	ldr	r3, [r7, #0]
 c0014d4:	681b      	ldr	r3, [r3, #0]
 c0014d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 c0014da:	d108      	bne.n	c0014ee <HAL_GTZC_MPCBB_ConfigMem+0x5e>
 c0014dc:	683b      	ldr	r3, [r7, #0]
 c0014de:	685b      	ldr	r3, [r3, #4]
 c0014e0:	2b00      	cmp	r3, #0
 c0014e2:	d006      	beq.n	c0014f2 <HAL_GTZC_MPCBB_ConfigMem+0x62>
 c0014e4:	683b      	ldr	r3, [r7, #0]
 c0014e6:	685b      	ldr	r3, [r3, #4]
 c0014e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c0014ec:	d001      	beq.n	c0014f2 <HAL_GTZC_MPCBB_ConfigMem+0x62>
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
      ||  MPCBB_PARAMETERS_CHECK())
#endif /* defined (GTZC_MPCBB3) */
  {
    return HAL_ERROR;
 c0014ee:	2301      	movs	r3, #1
 c0014f0:	e074      	b.n	c0015dc <HAL_GTZC_MPCBB_ConfigMem+0x14c>
  }

  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0014f2:	687b      	ldr	r3, [r7, #4]
 c0014f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c0014f8:	d003      	beq.n	c001502 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c0014fa:	687b      	ldr	r3, [r7, #4]
 c0014fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c001500:	d105      	bne.n	c00150e <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1;
 c001502:	4b3d      	ldr	r3, [pc, #244]	@ (c0015f8 <HAL_GTZC_MPCBB_ConfigMem+0x168>)
 c001504:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c001506:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 c00150a:	61bb      	str	r3, [r7, #24]
 c00150c:	e012      	b.n	c001534 <HAL_GTZC_MPCBB_ConfigMem+0xa4>
  }
#if defined (GTZC_MPCBB3)
  else if (IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c00150e:	687b      	ldr	r3, [r7, #4]
 c001510:	4a35      	ldr	r2, [pc, #212]	@ (c0015e8 <HAL_GTZC_MPCBB_ConfigMem+0x158>)
 c001512:	4293      	cmp	r3, r2
 c001514:	d003      	beq.n	c00151e <HAL_GTZC_MPCBB_ConfigMem+0x8e>
 c001516:	687b      	ldr	r3, [r7, #4]
 c001518:	4a34      	ldr	r2, [pc, #208]	@ (c0015ec <HAL_GTZC_MPCBB_ConfigMem+0x15c>)
 c00151a:	4293      	cmp	r3, r2
 c00151c:	d105      	bne.n	c00152a <HAL_GTZC_MPCBB_ConfigMem+0x9a>
  {
    mpcbb_ptr = GTZC_MPCBB2;
 c00151e:	4b37      	ldr	r3, [pc, #220]	@ (c0015fc <HAL_GTZC_MPCBB_ConfigMem+0x16c>)
 c001520:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c001522:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 c001526:	61bb      	str	r3, [r7, #24]
 c001528:	e004      	b.n	c001534 <HAL_GTZC_MPCBB_ConfigMem+0xa4>
  }
  else
  {
    mpcbb_ptr = GTZC_MPCBB3;
 c00152a:	4b35      	ldr	r3, [pc, #212]	@ (c001600 <HAL_GTZC_MPCBB_ConfigMem+0x170>)
 c00152c:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM3);
 c00152e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 c001532:	61bb      	str	r3, [r7, #24]
    mem_size = GTZC_MEM_SIZE(SRAM2);
  }
#endif /* defined (GTZC_MPCBB3) */

  /* translate mem_size in number of super-blocks  */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c001534:	69bb      	ldr	r3, [r7, #24]
 c001536:	0b9b      	lsrs	r3, r3, #14
 c001538:	60fb      	str	r3, [r7, #12]

  /* write PRIVCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c00153a:	2300      	movs	r3, #0
 c00153c:	617b      	str	r3, [r7, #20]
 c00153e:	e00c      	b.n	c00155a <HAL_GTZC_MPCBB_ConfigMem+0xca>
  {
    WRITE_REG(mpcbb_ptr->PRIVCFGR[i],
 c001540:	683b      	ldr	r3, [r7, #0]
 c001542:	697a      	ldr	r2, [r7, #20]
 c001544:	3222      	adds	r2, #34	@ 0x22
 c001546:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c00154a:	69fb      	ldr	r3, [r7, #28]
 c00154c:	697a      	ldr	r2, [r7, #20]
 c00154e:	3280      	adds	r2, #128	@ 0x80
 c001550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c001554:	697b      	ldr	r3, [r7, #20]
 c001556:	3301      	adds	r3, #1
 c001558:	617b      	str	r3, [r7, #20]
 c00155a:	697a      	ldr	r2, [r7, #20]
 c00155c:	68fb      	ldr	r3, [r7, #12]
 c00155e:	429a      	cmp	r2, r3
 c001560:	d3ee      	bcc.n	c001540 <HAL_GTZC_MPCBB_ConfigMem+0xb0>
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t size_mask;
  uint32_t reg_value;

  /* write InvertSecureState and SecureRWIllegalMode properties */
  reg_value = pMPCBB_desc->InvertSecureState;
 c001562:	683b      	ldr	r3, [r7, #0]
 c001564:	685b      	ldr	r3, [r3, #4]
 c001566:	60bb      	str	r3, [r7, #8]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c001568:	683b      	ldr	r3, [r7, #0]
 c00156a:	681b      	ldr	r3, [r3, #0]
 c00156c:	68ba      	ldr	r2, [r7, #8]
 c00156e:	4313      	orrs	r3, r2
 c001570:	60bb      	str	r3, [r7, #8]

  /* write SECCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c001572:	2300      	movs	r3, #0
 c001574:	617b      	str	r3, [r7, #20]
 c001576:	e00c      	b.n	c001592 <HAL_GTZC_MPCBB_ConfigMem+0x102>
  {
    WRITE_REG(mpcbb_ptr->SECCFGR[i],
 c001578:	683b      	ldr	r3, [r7, #0]
 c00157a:	697a      	ldr	r2, [r7, #20]
 c00157c:	3202      	adds	r2, #2
 c00157e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001582:	69fb      	ldr	r3, [r7, #28]
 c001584:	697a      	ldr	r2, [r7, #20]
 c001586:	3240      	adds	r2, #64	@ 0x40
 c001588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c00158c:	697b      	ldr	r3, [r7, #20]
 c00158e:	3301      	adds	r3, #1
 c001590:	617b      	str	r3, [r7, #20]
 c001592:	697a      	ldr	r2, [r7, #20]
 c001594:	68fb      	ldr	r3, [r7, #12]
 c001596:	429a      	cmp	r2, r3
 c001598:	d3ee      	bcc.n	c001578 <HAL_GTZC_MPCBB_ConfigMem+0xe8>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  if (size_in_superblocks == 32U)
 c00159a:	68fb      	ldr	r3, [r7, #12]
 c00159c:	2b20      	cmp	r3, #32
 c00159e:	d103      	bne.n	c0015a8 <HAL_GTZC_MPCBB_ConfigMem+0x118>
  {
    size_mask = 0xFFFFFFFFU;
 c0015a0:	f04f 33ff 	mov.w	r3, #4294967295
 c0015a4:	613b      	str	r3, [r7, #16]
 c0015a6:	e005      	b.n	c0015b4 <HAL_GTZC_MPCBB_ConfigMem+0x124>
  }
  else
  {
    size_mask = (1UL << size_in_superblocks) - 1U;
 c0015a8:	2201      	movs	r2, #1
 c0015aa:	68fb      	ldr	r3, [r7, #12]
 c0015ac:	fa02 f303 	lsl.w	r3, r2, r3
 c0015b0:	3b01      	subs	r3, #1
 c0015b2:	613b      	str	r3, [r7, #16]
  }
  /* limitation: code not portable with memory > 512K */
  MODIFY_REG(mpcbb_ptr->CFGLOCKR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c0015b4:	69fb      	ldr	r3, [r7, #28]
 c0015b6:	691a      	ldr	r2, [r3, #16]
 c0015b8:	693b      	ldr	r3, [r7, #16]
 c0015ba:	43db      	mvns	r3, r3
 c0015bc:	401a      	ands	r2, r3
 c0015be:	683b      	ldr	r3, [r7, #0]
 c0015c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 c0015c4:	431a      	orrs	r2, r3
 c0015c6:	69fb      	ldr	r3, [r7, #28]
 c0015c8:	611a      	str	r2, [r3, #16]

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c0015ca:	69fb      	ldr	r3, [r7, #28]
 c0015cc:	681b      	ldr	r3, [r3, #0]
 c0015ce:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 c0015d2:	68bb      	ldr	r3, [r7, #8]
 c0015d4:	431a      	orrs	r2, r3
 c0015d6:	69fb      	ldr	r3, [r7, #28]
 c0015d8:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 c0015da:	2300      	movs	r3, #0
}
 c0015dc:	4618      	mov	r0, r3
 c0015de:	3724      	adds	r7, #36	@ 0x24
 c0015e0:	46bd      	mov	sp, r7
 c0015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015e6:	4770      	bx	lr
 c0015e8:	20040000 	.word	0x20040000
 c0015ec:	30040000 	.word	0x30040000
 c0015f0:	20050000 	.word	0x20050000
 c0015f4:	30050000 	.word	0x30050000
 c0015f8:	50032c00 	.word	0x50032c00
 c0015fc:	50033000 	.word	0x50033000
 c001600:	50033400 	.word	0x50033400

0c001604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c001604:	b480      	push	{r7}
 c001606:	b089      	sub	sp, #36	@ 0x24
 c001608:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 c00160a:	4b8c      	ldr	r3, [pc, #560]	@ (c00183c <HAL_RCC_GetSysClockFreq+0x238>)
 c00160c:	69db      	ldr	r3, [r3, #28]
 c00160e:	f003 0318 	and.w	r3, r3, #24
 c001612:	2b08      	cmp	r3, #8
 c001614:	d102      	bne.n	c00161c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 c001616:	4b8a      	ldr	r3, [pc, #552]	@ (c001840 <HAL_RCC_GetSysClockFreq+0x23c>)
 c001618:	61fb      	str	r3, [r7, #28]
 c00161a:	e107      	b.n	c00182c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 c00161c:	4b87      	ldr	r3, [pc, #540]	@ (c00183c <HAL_RCC_GetSysClockFreq+0x238>)
 c00161e:	69db      	ldr	r3, [r3, #28]
 c001620:	f003 0318 	and.w	r3, r3, #24
 c001624:	2b00      	cmp	r3, #0
 c001626:	d112      	bne.n	c00164e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 c001628:	4b84      	ldr	r3, [pc, #528]	@ (c00183c <HAL_RCC_GetSysClockFreq+0x238>)
 c00162a:	681b      	ldr	r3, [r3, #0]
 c00162c:	f003 0320 	and.w	r3, r3, #32
 c001630:	2b00      	cmp	r3, #0
 c001632:	d009      	beq.n	c001648 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 c001634:	4b81      	ldr	r3, [pc, #516]	@ (c00183c <HAL_RCC_GetSysClockFreq+0x238>)
 c001636:	681b      	ldr	r3, [r3, #0]
 c001638:	08db      	lsrs	r3, r3, #3
 c00163a:	f003 0303 	and.w	r3, r3, #3
 c00163e:	4a81      	ldr	r2, [pc, #516]	@ (c001844 <HAL_RCC_GetSysClockFreq+0x240>)
 c001640:	fa22 f303 	lsr.w	r3, r2, r3
 c001644:	61fb      	str	r3, [r7, #28]
 c001646:	e0f1      	b.n	c00182c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 c001648:	4b7e      	ldr	r3, [pc, #504]	@ (c001844 <HAL_RCC_GetSysClockFreq+0x240>)
 c00164a:	61fb      	str	r3, [r7, #28]
 c00164c:	e0ee      	b.n	c00182c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 c00164e:	4b7b      	ldr	r3, [pc, #492]	@ (c00183c <HAL_RCC_GetSysClockFreq+0x238>)
 c001650:	69db      	ldr	r3, [r3, #28]
 c001652:	f003 0318 	and.w	r3, r3, #24
 c001656:	2b10      	cmp	r3, #16
 c001658:	d102      	bne.n	c001660 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c00165a:	4b7b      	ldr	r3, [pc, #492]	@ (c001848 <HAL_RCC_GetSysClockFreq+0x244>)
 c00165c:	61fb      	str	r3, [r7, #28]
 c00165e:	e0e5      	b.n	c00182c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c001660:	4b76      	ldr	r3, [pc, #472]	@ (c00183c <HAL_RCC_GetSysClockFreq+0x238>)
 c001662:	69db      	ldr	r3, [r3, #28]
 c001664:	f003 0318 	and.w	r3, r3, #24
 c001668:	2b18      	cmp	r3, #24
 c00166a:	f040 80dd 	bne.w	c001828 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c00166e:	4b73      	ldr	r3, [pc, #460]	@ (c00183c <HAL_RCC_GetSysClockFreq+0x238>)
 c001670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c001672:	f003 0303 	and.w	r3, r3, #3
 c001676:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 c001678:	4b70      	ldr	r3, [pc, #448]	@ (c00183c <HAL_RCC_GetSysClockFreq+0x238>)
 c00167a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00167c:	0a1b      	lsrs	r3, r3, #8
 c00167e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 c001682:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c001684:	4b6d      	ldr	r3, [pc, #436]	@ (c00183c <HAL_RCC_GetSysClockFreq+0x238>)
 c001686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c001688:	091b      	lsrs	r3, r3, #4
 c00168a:	f003 0301 	and.w	r3, r3, #1
 c00168e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 c001690:	4b6a      	ldr	r3, [pc, #424]	@ (c00183c <HAL_RCC_GetSysClockFreq+0x238>)
 c001692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 c001694:	08db      	lsrs	r3, r3, #3
 c001696:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 c00169a:	68fa      	ldr	r2, [r7, #12]
 c00169c:	fb02 f303 	mul.w	r3, r2, r3
 c0016a0:	ee07 3a90 	vmov	s15, r3
 c0016a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0016a8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 c0016ac:	693b      	ldr	r3, [r7, #16]
 c0016ae:	2b00      	cmp	r3, #0
 c0016b0:	f000 80b7 	beq.w	c001822 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 c0016b4:	697b      	ldr	r3, [r7, #20]
 c0016b6:	2b01      	cmp	r3, #1
 c0016b8:	d003      	beq.n	c0016c2 <HAL_RCC_GetSysClockFreq+0xbe>
 c0016ba:	697b      	ldr	r3, [r7, #20]
 c0016bc:	2b03      	cmp	r3, #3
 c0016be:	d056      	beq.n	c00176e <HAL_RCC_GetSysClockFreq+0x16a>
 c0016c0:	e077      	b.n	c0017b2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 c0016c2:	4b5e      	ldr	r3, [pc, #376]	@ (c00183c <HAL_RCC_GetSysClockFreq+0x238>)
 c0016c4:	681b      	ldr	r3, [r3, #0]
 c0016c6:	f003 0320 	and.w	r3, r3, #32
 c0016ca:	2b00      	cmp	r3, #0
 c0016cc:	d02d      	beq.n	c00172a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 c0016ce:	4b5b      	ldr	r3, [pc, #364]	@ (c00183c <HAL_RCC_GetSysClockFreq+0x238>)
 c0016d0:	681b      	ldr	r3, [r3, #0]
 c0016d2:	08db      	lsrs	r3, r3, #3
 c0016d4:	f003 0303 	and.w	r3, r3, #3
 c0016d8:	4a5a      	ldr	r2, [pc, #360]	@ (c001844 <HAL_RCC_GetSysClockFreq+0x240>)
 c0016da:	fa22 f303 	lsr.w	r3, r2, r3
 c0016de:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0016e0:	687b      	ldr	r3, [r7, #4]
 c0016e2:	ee07 3a90 	vmov	s15, r3
 c0016e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c0016ea:	693b      	ldr	r3, [r7, #16]
 c0016ec:	ee07 3a90 	vmov	s15, r3
 c0016f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0016f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c0016f8:	4b50      	ldr	r3, [pc, #320]	@ (c00183c <HAL_RCC_GetSysClockFreq+0x238>)
 c0016fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0016fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001700:	ee07 3a90 	vmov	s15, r3
 c001704:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 c001708:	ed97 6a02 	vldr	s12, [r7, #8]
 c00170c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ c00184c <HAL_RCC_GetSysClockFreq+0x248>
 c001710:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001714:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 c001718:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00171c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001720:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001724:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 c001728:	e065      	b.n	c0017f6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00172a:	693b      	ldr	r3, [r7, #16]
 c00172c:	ee07 3a90 	vmov	s15, r3
 c001730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001734:	eddf 6a46 	vldr	s13, [pc, #280]	@ c001850 <HAL_RCC_GetSysClockFreq+0x24c>
 c001738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c00173c:	4b3f      	ldr	r3, [pc, #252]	@ (c00183c <HAL_RCC_GetSysClockFreq+0x238>)
 c00173e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c001740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001744:	ee07 3a90 	vmov	s15, r3
 c001748:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 c00174c:	ed97 6a02 	vldr	s12, [r7, #8]
 c001750:	eddf 5a3e 	vldr	s11, [pc, #248]	@ c00184c <HAL_RCC_GetSysClockFreq+0x248>
 c001754:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001758:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 c00175c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c001760:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c001764:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001768:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 c00176c:	e043      	b.n	c0017f6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00176e:	693b      	ldr	r3, [r7, #16]
 c001770:	ee07 3a90 	vmov	s15, r3
 c001774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c001778:	eddf 6a36 	vldr	s13, [pc, #216]	@ c001854 <HAL_RCC_GetSysClockFreq+0x250>
 c00177c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c001780:	4b2e      	ldr	r3, [pc, #184]	@ (c00183c <HAL_RCC_GetSysClockFreq+0x238>)
 c001782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c001784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c001788:	ee07 3a90 	vmov	s15, r3
 c00178c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c001790:	ed97 6a02 	vldr	s12, [r7, #8]
 c001794:	eddf 5a2d 	vldr	s11, [pc, #180]	@ c00184c <HAL_RCC_GetSysClockFreq+0x248>
 c001798:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00179c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c0017a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0017a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0017a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0017ac:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 c0017b0:	e021      	b.n	c0017f6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0017b2:	693b      	ldr	r3, [r7, #16]
 c0017b4:	ee07 3a90 	vmov	s15, r3
 c0017b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0017bc:	eddf 6a26 	vldr	s13, [pc, #152]	@ c001858 <HAL_RCC_GetSysClockFreq+0x254>
 c0017c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c0017c4:	4b1d      	ldr	r3, [pc, #116]	@ (c00183c <HAL_RCC_GetSysClockFreq+0x238>)
 c0017c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0017c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0017cc:	ee07 3a90 	vmov	s15, r3
 c0017d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c0017d4:	ed97 6a02 	vldr	s12, [r7, #8]
 c0017d8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ c00184c <HAL_RCC_GetSysClockFreq+0x248>
 c0017dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0017e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 c0017e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0017e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0017ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0017f0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 c0017f4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 c0017f6:	4b11      	ldr	r3, [pc, #68]	@ (c00183c <HAL_RCC_GetSysClockFreq+0x238>)
 c0017f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0017fa:	0a5b      	lsrs	r3, r3, #9
 c0017fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c001800:	3301      	adds	r3, #1
 c001802:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 c001804:	683b      	ldr	r3, [r7, #0]
 c001806:	ee07 3a90 	vmov	s15, r3
 c00180a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c00180e:	edd7 6a06 	vldr	s13, [r7, #24]
 c001812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c001816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c00181a:	ee17 3a90 	vmov	r3, s15
 c00181e:	61fb      	str	r3, [r7, #28]
 c001820:	e004      	b.n	c00182c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 c001822:	2300      	movs	r3, #0
 c001824:	61fb      	str	r3, [r7, #28]
 c001826:	e001      	b.n	c00182c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 c001828:	4b06      	ldr	r3, [pc, #24]	@ (c001844 <HAL_RCC_GetSysClockFreq+0x240>)
 c00182a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 c00182c:	69fb      	ldr	r3, [r7, #28]
}
 c00182e:	4618      	mov	r0, r3
 c001830:	3724      	adds	r7, #36	@ 0x24
 c001832:	46bd      	mov	sp, r7
 c001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001838:	4770      	bx	lr
 c00183a:	bf00      	nop
 c00183c:	54020c00 	.word	0x54020c00
 c001840:	003d0900 	.word	0x003d0900
 c001844:	03d09000 	.word	0x03d09000
 c001848:	007a1200 	.word	0x007a1200
 c00184c:	46000000 	.word	0x46000000
 c001850:	4c742400 	.word	0x4c742400
 c001854:	4af42400 	.word	0x4af42400
 c001858:	4a742400 	.word	0x4a742400

0c00185c <__acle_se__tx_thread_secure_mode_stack_initialize>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
__attribute__((cmse_nonsecure_entry, optimize(0)))
UINT    _tx_thread_secure_mode_stack_initialize(void)
{
 c00185c:	b480      	push	{r7}
 c00185e:	b085      	sub	sp, #20
 c001860:	af00      	add	r7, sp, #0
ULONG   control;
ULONG   ipsr;
INT     index;

    /* Make sure function is called from interrupt (threads should not call). */
    asm volatile("MRS     %0, IPSR" : "=r" (ipsr));   /* Get IPSR register. */
 c001862:	f3ef 8305 	mrs	r3, IPSR
 c001866:	607b      	str	r3, [r7, #4]
    if (ipsr == 0)
 c001868:	687b      	ldr	r3, [r7, #4]
 c00186a:	2b00      	cmp	r3, #0
 c00186c:	d102      	bne.n	c001874 <__acle_se__tx_thread_secure_mode_stack_initialize+0x18>
    {
        status = TX_CALLER_ERROR;
 c00186e:	2313      	movs	r3, #19
 c001870:	60fb      	str	r3, [r7, #12]
 c001872:	e034      	b.n	c0018de <__acle_se__tx_thread_secure_mode_stack_initialize+0x82>
    }
    else
    {
        /* Set secure mode to use PSP. */
        asm volatile("MRS     %0, CONTROL" : "=r" (control));   /* Get CONTROL register. */
 c001874:	f3ef 8314 	mrs	r3, CONTROL
 c001878:	603b      	str	r3, [r7, #0]
        control |= 2;                                           /* Use PSP. */
 c00187a:	683b      	ldr	r3, [r7, #0]
 c00187c:	f043 0302 	orr.w	r3, r3, #2
 c001880:	603b      	str	r3, [r7, #0]
        asm volatile("MSR     CONTROL, %0" :: "r" (control));   /* Set CONTROL register. */
 c001882:	683b      	ldr	r3, [r7, #0]
 c001884:	f383 8814 	msr	CONTROL, r3

        /* Set process stack pointer and stack limit to 0 to throw exception when a thread
           without a secure stack calls a secure function that tries to use secure stack. */
        asm volatile("MSR     PSPLIM, %0" :: "r" (0));
 c001888:	2300      	movs	r3, #0
 c00188a:	f383 880b 	msr	PSPLIM, r3
        asm volatile("MSR     PSP, %0" :: "r" (0));
 c00188e:	2300      	movs	r3, #0
 c001890:	f383 8809 	msr	PSP, r3

        for (index = 0; index < TX_MAX_SECURE_CONTEXTS; index++)
 c001894:	2300      	movs	r3, #0
 c001896:	60bb      	str	r3, [r7, #8]
 c001898:	e01c      	b.n	c0018d4 <__acle_se__tx_thread_secure_mode_stack_initialize+0x78>
        {

            /* Check last index and mark next free to invalid index */
            if(index == (TX_MAX_SECURE_CONTEXTS - 1))
 c00189a:	68bb      	ldr	r3, [r7, #8]
 c00189c:	2b1f      	cmp	r3, #31
 c00189e:	d10b      	bne.n	c0018b8 <__acle_se__tx_thread_secure_mode_stack_initialize+0x5c>
            {
                tx_thread_secure_context[index].tx_next_free_index = TX_INVALID_SECURE_CONTEXT_IDX;
 c0018a0:	492b      	ldr	r1, [pc, #172]	@ (c001950 <__acle_se__tx_thread_secure_mode_stack_initialize+0xf4>)
 c0018a2:	68ba      	ldr	r2, [r7, #8]
 c0018a4:	4613      	mov	r3, r2
 c0018a6:	009b      	lsls	r3, r3, #2
 c0018a8:	4413      	add	r3, r2
 c0018aa:	009b      	lsls	r3, r3, #2
 c0018ac:	440b      	add	r3, r1
 c0018ae:	3310      	adds	r3, #16
 c0018b0:	f04f 32ff 	mov.w	r2, #4294967295
 c0018b4:	601a      	str	r2, [r3, #0]
 c0018b6:	e00a      	b.n	c0018ce <__acle_se__tx_thread_secure_mode_stack_initialize+0x72>
            }
            else
            {
                tx_thread_secure_context[index].tx_next_free_index = index + 1;
 c0018b8:	68bb      	ldr	r3, [r7, #8]
 c0018ba:	1c59      	adds	r1, r3, #1
 c0018bc:	4824      	ldr	r0, [pc, #144]	@ (c001950 <__acle_se__tx_thread_secure_mode_stack_initialize+0xf4>)
 c0018be:	68ba      	ldr	r2, [r7, #8]
 c0018c0:	4613      	mov	r3, r2
 c0018c2:	009b      	lsls	r3, r3, #2
 c0018c4:	4413      	add	r3, r2
 c0018c6:	009b      	lsls	r3, r3, #2
 c0018c8:	4403      	add	r3, r0
 c0018ca:	3310      	adds	r3, #16
 c0018cc:	6019      	str	r1, [r3, #0]
        for (index = 0; index < TX_MAX_SECURE_CONTEXTS; index++)
 c0018ce:	68bb      	ldr	r3, [r7, #8]
 c0018d0:	3301      	adds	r3, #1
 c0018d2:	60bb      	str	r3, [r7, #8]
 c0018d4:	68bb      	ldr	r3, [r7, #8]
 c0018d6:	2b1f      	cmp	r3, #31
 c0018d8:	dddf      	ble.n	c00189a <__acle_se__tx_thread_secure_mode_stack_initialize+0x3e>
            }
        }

        status = TX_SUCCESS;
 c0018da:	2300      	movs	r3, #0
 c0018dc:	60fb      	str	r3, [r7, #12]
    }
    return status;
 c0018de:	68fb      	ldr	r3, [r7, #12]
}
 c0018e0:	4618      	mov	r0, r3
 c0018e2:	3714      	adds	r7, #20
 c0018e4:	46bd      	mov	sp, r7
 c0018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0018ea:	4671      	mov	r1, lr
 c0018ec:	4672      	mov	r2, lr
 c0018ee:	4673      	mov	r3, lr
 c0018f0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c0018f4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c0018f8:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c0018fc:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c001900:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c001904:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c001908:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c00190c:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c001910:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c001914:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c001918:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c00191c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c001920:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c001924:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c001928:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c00192c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c001930:	f38e 8c00 	msr	CPSR_fs, lr
 c001934:	b410      	push	{r4}
 c001936:	eef1 ca10 	vmrs	ip, fpscr
 c00193a:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c00193e:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c001942:	ea0c 0c04 	and.w	ip, ip, r4
 c001946:	eee1 ca10 	vmsr	fpscr, ip
 c00194a:	bc10      	pop	{r4}
 c00194c:	46f4      	mov	ip, lr
 c00194e:	4774      	bxns	lr
 c001950:	30040288 	.word	0x30040288

0c001954 <__acle_se__tx_thread_secure_mode_stack_allocate>:
/*                                            resulting in version 6.1.11a*/
/*                                                                        */
/**************************************************************************/
__attribute__((cmse_nonsecure_entry))
UINT    _tx_thread_secure_mode_stack_allocate(TX_THREAD *thread_ptr, ULONG stack_size)
{
 c001954:	b580      	push	{r7, lr}
 c001956:	b090      	sub	sp, #64	@ 0x40
 c001958:	af00      	add	r7, sp, #0
 c00195a:	6078      	str	r0, [r7, #4]
 c00195c:	6039      	str	r1, [r7, #0]
UCHAR   *stack_mem;
ULONG   ipsr;
ULONG   psplim_ns;
INT     secure_context_index;

    status = TX_SUCCESS;
 c00195e:	2300      	movs	r3, #0
 c001960:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Make sure function is called from interrupt (threads should not call). */
    asm volatile("MRS     %0, IPSR" : "=r" (ipsr));   /* Get IPSR register. */
 c001962:	f3ef 8305 	mrs	r3, IPSR
 c001966:	637b      	str	r3, [r7, #52]	@ 0x34
    if (ipsr == 0)
 c001968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 c00196a:	2b00      	cmp	r3, #0
 c00196c:	d102      	bne.n	c001974 <__acle_se__tx_thread_secure_mode_stack_allocate+0x20>
    {
        status = TX_CALLER_ERROR;
 c00196e:	2313      	movs	r3, #19
 c001970:	63fb      	str	r3, [r7, #60]	@ 0x3c
 c001972:	e0a5      	b.n	c001ac0 <__acle_se__tx_thread_secure_mode_stack_allocate+0x16c>
    }
    else if (stack_size < TX_THREAD_SECURE_STACK_MINIMUM || stack_size > TX_THREAD_SECURE_STACK_MAXIMUM)
 c001974:	683b      	ldr	r3, [r7, #0]
 c001976:	2bff      	cmp	r3, #255	@ 0xff
 c001978:	d903      	bls.n	c001982 <__acle_se__tx_thread_secure_mode_stack_allocate+0x2e>
 c00197a:	683b      	ldr	r3, [r7, #0]
 c00197c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c001980:	d902      	bls.n	c001988 <__acle_se__tx_thread_secure_mode_stack_allocate+0x34>
    {
        status = TX_SIZE_ERROR;
 c001982:	2305      	movs	r3, #5
 c001984:	63fb      	str	r3, [r7, #60]	@ 0x3c
 c001986:	e09b      	b.n	c001ac0 <__acle_se__tx_thread_secure_mode_stack_allocate+0x16c>
    }

    /* Check if thread already has secure stack allocated. */
    else if (thread_ptr -> tx_thread_secure_stack_context != 0)
 c001988:	687b      	ldr	r3, [r7, #4]
 c00198a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c00198e:	2b00      	cmp	r3, #0
 c001990:	d002      	beq.n	c001998 <__acle_se__tx_thread_secure_mode_stack_allocate+0x44>
    {
        status = TX_THREAD_ERROR;
 c001992:	230e      	movs	r3, #14
 c001994:	63fb      	str	r3, [r7, #60]	@ 0x3c
 c001996:	e093      	b.n	c001ac0 <__acle_se__tx_thread_secure_mode_stack_allocate+0x16c>
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 c001998:	f3ef 8310 	mrs	r3, PRIMASK
 c00199c:	623b      	str	r3, [r7, #32]
#endif
    return(posture);
 c00199e:	6a3b      	ldr	r3, [r7, #32]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 c0019a0:	61fb      	str	r3, [r7, #28]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 c0019a2:	b672      	cpsid	i
#endif
    return(int_posture);
 c0019a4:	69fb      	ldr	r3, [r7, #28]
    }

    else
    {
        TX_DISABLE
 c0019a6:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Allocate free index for secure stack info. */
        if(tx_head_free_index != TX_INVALID_SECURE_CONTEXT_IDX)
 c0019a8:	4b62      	ldr	r3, [pc, #392]	@ (c001b34 <__acle_se__tx_thread_secure_mode_stack_allocate+0x1e0>)
 c0019aa:	681b      	ldr	r3, [r3, #0]
 c0019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 c0019b0:	d01a      	beq.n	c0019e8 <__acle_se__tx_thread_secure_mode_stack_allocate+0x94>
        {
            secure_context_index = tx_head_free_index;
 c0019b2:	4b60      	ldr	r3, [pc, #384]	@ (c001b34 <__acle_se__tx_thread_secure_mode_stack_allocate+0x1e0>)
 c0019b4:	681b      	ldr	r3, [r3, #0]
 c0019b6:	63bb      	str	r3, [r7, #56]	@ 0x38
            tx_head_free_index = tx_thread_secure_context[tx_head_free_index].tx_next_free_index;
 c0019b8:	4b5e      	ldr	r3, [pc, #376]	@ (c001b34 <__acle_se__tx_thread_secure_mode_stack_allocate+0x1e0>)
 c0019ba:	681a      	ldr	r2, [r3, #0]
 c0019bc:	495e      	ldr	r1, [pc, #376]	@ (c001b38 <__acle_se__tx_thread_secure_mode_stack_allocate+0x1e4>)
 c0019be:	4613      	mov	r3, r2
 c0019c0:	009b      	lsls	r3, r3, #2
 c0019c2:	4413      	add	r3, r2
 c0019c4:	009b      	lsls	r3, r3, #2
 c0019c6:	440b      	add	r3, r1
 c0019c8:	3310      	adds	r3, #16
 c0019ca:	681b      	ldr	r3, [r3, #0]
 c0019cc:	4a59      	ldr	r2, [pc, #356]	@ (c001b34 <__acle_se__tx_thread_secure_mode_stack_allocate+0x1e0>)
 c0019ce:	6013      	str	r3, [r2, #0]
            tx_thread_secure_context[secure_context_index].tx_next_free_index = TX_INVALID_SECURE_CONTEXT_IDX;
 c0019d0:	4959      	ldr	r1, [pc, #356]	@ (c001b38 <__acle_se__tx_thread_secure_mode_stack_allocate+0x1e4>)
 c0019d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 c0019d4:	4613      	mov	r3, r2
 c0019d6:	009b      	lsls	r3, r3, #2
 c0019d8:	4413      	add	r3, r2
 c0019da:	009b      	lsls	r3, r3, #2
 c0019dc:	440b      	add	r3, r1
 c0019de:	3310      	adds	r3, #16
 c0019e0:	f04f 32ff 	mov.w	r2, #4294967295
 c0019e4:	601a      	str	r2, [r3, #0]
 c0019e6:	e002      	b.n	c0019ee <__acle_se__tx_thread_secure_mode_stack_allocate+0x9a>
        }
        else
        {
            secure_context_index = TX_INVALID_SECURE_CONTEXT_IDX;
 c0019e8:	f04f 33ff 	mov.w	r3, #4294967295
 c0019ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 c0019ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0019f0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 c0019f2:	69bb      	ldr	r3, [r7, #24]
 c0019f4:	f383 8810 	msr	PRIMASK, r3
}
 c0019f8:	bf00      	nop
        }

        TX_RESTORE

        if(secure_context_index != TX_INVALID_SECURE_CONTEXT_IDX)
 c0019fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 c0019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 c001a00:	d05c      	beq.n	c001abc <__acle_se__tx_thread_secure_mode_stack_allocate+0x168>
        {
            info_ptr = &tx_thread_secure_context[secure_context_index];
 c001a02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 c001a04:	4613      	mov	r3, r2
 c001a06:	009b      	lsls	r3, r3, #2
 c001a08:	4413      	add	r3, r2
 c001a0a:	009b      	lsls	r3, r3, #2
 c001a0c:	4a4a      	ldr	r2, [pc, #296]	@ (c001b38 <__acle_se__tx_thread_secure_mode_stack_allocate+0x1e4>)
 c001a0e:	4413      	add	r3, r2
 c001a10:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* If stack info allocated, allocate a stack & seal. */
            stack_mem = malloc(stack_size + TX_THREAD_STACK_SEAL_SIZE);
 c001a12:	683b      	ldr	r3, [r7, #0]
 c001a14:	3308      	adds	r3, #8
 c001a16:	4618      	mov	r0, r3
 c001a18:	f000 fa08 	bl	c001e2c <malloc>
 c001a1c:	4603      	mov	r3, r0
 c001a1e:	62bb      	str	r3, [r7, #40]	@ 0x28

            if(stack_mem != TX_NULL)
 c001a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c001a22:	2b00      	cmp	r3, #0
 c001a24:	d02b      	beq.n	c001a7e <__acle_se__tx_thread_secure_mode_stack_allocate+0x12a>
            {
                /* Secure stack has been allocated, save in the stack info struct. */
                info_ptr -> tx_thread_secure_stack_limit = stack_mem;
 c001a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c001a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 c001a2a:	609a      	str	r2, [r3, #8]
                info_ptr -> tx_thread_secure_stack_start = stack_mem + stack_size;
 c001a2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 c001a2e:	683b      	ldr	r3, [r7, #0]
 c001a30:	441a      	add	r2, r3
 c001a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c001a34:	605a      	str	r2, [r3, #4]
                info_ptr -> tx_thread_secure_stack_ptr = info_ptr -> tx_thread_secure_stack_start;
 c001a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c001a38:	685a      	ldr	r2, [r3, #4]
 c001a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c001a3c:	601a      	str	r2, [r3, #0]
                info_ptr -> tx_thread_ptr = thread_ptr;
 c001a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c001a40:	687a      	ldr	r2, [r7, #4]
 c001a42:	60da      	str	r2, [r3, #12]

                /* Seal bottom of stack. */
                *(ULONG*)info_ptr -> tx_thread_secure_stack_start = TX_THREAD_STACK_SEAL_VALUE;
 c001a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c001a46:	685b      	ldr	r3, [r3, #4]
 c001a48:	4a3c      	ldr	r2, [pc, #240]	@ (c001b3c <__acle_se__tx_thread_secure_mode_stack_allocate+0x1e8>)
 c001a4a:	601a      	str	r2, [r3, #0]

                /* Save secure context id (i.e non-zero base index) in thread. */
                thread_ptr -> tx_thread_secure_stack_context = (VOID *)(secure_context_index + 1);
 c001a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 c001a4e:	3301      	adds	r3, #1
 c001a50:	461a      	mov	r2, r3
 c001a52:	687b      	ldr	r3, [r7, #4]
 c001a54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

                /* Check if this thread is running by looking at its stack start and PSPLIM_NS */
                asm volatile("MRS     %0, PSPLIM_NS" : "=r" (psplim_ns));   /* Get PSPLIM_NS register. */
 c001a58:	f3ef 838b 	mrs	r3, PSPLIM_NS
 c001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
                if(((ULONG) thread_ptr -> tx_thread_stack_start & 0xFFFFFFF8) == psplim_ns)
 c001a5e:	687b      	ldr	r3, [r7, #4]
 c001a60:	68db      	ldr	r3, [r3, #12]
 c001a62:	f023 0307 	bic.w	r3, r3, #7
 c001a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 c001a68:	429a      	cmp	r2, r3
 c001a6a:	d129      	bne.n	c001ac0 <__acle_se__tx_thread_secure_mode_stack_allocate+0x16c>
                {
                    /* If this thread is running, set Secure PSP and PSPLIM. */
                    asm volatile("MSR     PSPLIM, %0" :: "r" ((ULONG)(info_ptr -> tx_thread_secure_stack_limit)));
 c001a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c001a6e:	689b      	ldr	r3, [r3, #8]
 c001a70:	f383 880b 	msr	PSPLIM, r3
                    asm volatile("MSR     PSP, %0" :: "r" ((ULONG)(info_ptr -> tx_thread_secure_stack_ptr)));
 c001a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c001a76:	681b      	ldr	r3, [r3, #0]
 c001a78:	f383 8809 	msr	PSP, r3
 c001a7c:	e020      	b.n	c001ac0 <__acle_se__tx_thread_secure_mode_stack_allocate+0x16c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 c001a7e:	f3ef 8310 	mrs	r3, PRIMASK
 c001a82:	613b      	str	r3, [r7, #16]
    return(posture);
 c001a84:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 c001a86:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 c001a88:	b672      	cpsid	i
    return(int_posture);
 c001a8a:	68fb      	ldr	r3, [r7, #12]
                }
            }

            else
            {
                TX_DISABLE
 c001a8c:	633b      	str	r3, [r7, #48]	@ 0x30

                /* Stack not allocated, free the info struct. */
                tx_thread_secure_context[secure_context_index].tx_next_free_index = tx_head_free_index;
 c001a8e:	4b29      	ldr	r3, [pc, #164]	@ (c001b34 <__acle_se__tx_thread_secure_mode_stack_allocate+0x1e0>)
 c001a90:	6819      	ldr	r1, [r3, #0]
 c001a92:	4829      	ldr	r0, [pc, #164]	@ (c001b38 <__acle_se__tx_thread_secure_mode_stack_allocate+0x1e4>)
 c001a94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 c001a96:	4613      	mov	r3, r2
 c001a98:	009b      	lsls	r3, r3, #2
 c001a9a:	4413      	add	r3, r2
 c001a9c:	009b      	lsls	r3, r3, #2
 c001a9e:	4403      	add	r3, r0
 c001aa0:	3310      	adds	r3, #16
 c001aa2:	6019      	str	r1, [r3, #0]
                tx_head_free_index = secure_context_index;
 c001aa4:	4a23      	ldr	r2, [pc, #140]	@ (c001b34 <__acle_se__tx_thread_secure_mode_stack_allocate+0x1e0>)
 c001aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 c001aa8:	6013      	str	r3, [r2, #0]
 c001aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c001aac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 c001aae:	697b      	ldr	r3, [r7, #20]
 c001ab0:	f383 8810 	msr	PRIMASK, r3
}
 c001ab4:	bf00      	nop
                TX_RESTORE

                status = TX_NO_MEMORY;
 c001ab6:	2310      	movs	r3, #16
 c001ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 c001aba:	e001      	b.n	c001ac0 <__acle_se__tx_thread_secure_mode_stack_allocate+0x16c>
            }
        }

        else
        {
            status = TX_NO_MEMORY;
 c001abc:	2310      	movs	r3, #16
 c001abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
    }

    return(status);
 c001ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 c001ac2:	4618      	mov	r0, r3
 c001ac4:	3740      	adds	r7, #64	@ 0x40
 c001ac6:	46bd      	mov	sp, r7
 c001ac8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001acc:	4671      	mov	r1, lr
 c001ace:	4672      	mov	r2, lr
 c001ad0:	4673      	mov	r3, lr
 c001ad2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c001ad6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c001ada:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c001ade:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c001ae2:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c001ae6:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c001aea:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c001aee:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c001af2:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c001af6:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c001afa:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c001afe:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c001b02:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c001b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c001b0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c001b0e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c001b12:	f38e 8c00 	msr	CPSR_fs, lr
 c001b16:	b410      	push	{r4}
 c001b18:	eef1 ca10 	vmrs	ip, fpscr
 c001b1c:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c001b20:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c001b24:	ea0c 0c04 	and.w	ip, ip, r4
 c001b28:	eee1 ca10 	vmsr	fpscr, ip
 c001b2c:	bc10      	pop	{r4}
 c001b2e:	46f4      	mov	ip, lr
 c001b30:	4774      	bxns	lr
 c001b32:	bf00      	nop
 c001b34:	30040508 	.word	0x30040508
 c001b38:	30040288 	.word	0x30040288
 c001b3c:	fef5eda5 	.word	0xfef5eda5

0c001b40 <__acle_se__tx_thread_secure_mode_stack_free>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
__attribute__((cmse_nonsecure_entry))
UINT    _tx_thread_secure_mode_stack_free(TX_THREAD *thread_ptr)
{
 c001b40:	b580      	push	{r7, lr}
 c001b42:	b08a      	sub	sp, #40	@ 0x28
 c001b44:	af00      	add	r7, sp, #0
 c001b46:	6078      	str	r0, [r7, #4]
UINT    status;
TX_THREAD_SECURE_STACK_INFO *info_ptr;
ULONG   ipsr;
INT     secure_context_index;

    status = TX_SUCCESS;
 c001b48:	2300      	movs	r3, #0
 c001b4a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Pickup stack info id from thread. */
    secure_context_index = (INT)thread_ptr -> tx_thread_secure_stack_context - 1;
 c001b4c:	687b      	ldr	r3, [r7, #4]
 c001b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c001b52:	3b01      	subs	r3, #1
 c001b54:	623b      	str	r3, [r7, #32]

    /* Make sure function is called from interrupt (threads should not call). */
    asm volatile("MRS     %0, IPSR" : "=r" (ipsr));   /* Get IPSR register. */
 c001b56:	f3ef 8305 	mrs	r3, IPSR
 c001b5a:	61fb      	str	r3, [r7, #28]
    if (ipsr == 0)
 c001b5c:	69fb      	ldr	r3, [r7, #28]
 c001b5e:	2b00      	cmp	r3, #0
 c001b60:	d102      	bne.n	c001b68 <__acle_se__tx_thread_secure_mode_stack_free+0x28>
    {
        status = TX_CALLER_ERROR;
 c001b62:	2313      	movs	r3, #19
 c001b64:	627b      	str	r3, [r7, #36]	@ 0x24
 c001b66:	e03d      	b.n	c001be4 <__acle_se__tx_thread_secure_mode_stack_free+0xa4>
    }

    /* Check if secure context index is in valid range. */
    else if (secure_context_index < 0 || secure_context_index >= TX_MAX_SECURE_CONTEXTS)
 c001b68:	6a3b      	ldr	r3, [r7, #32]
 c001b6a:	2b00      	cmp	r3, #0
 c001b6c:	db02      	blt.n	c001b74 <__acle_se__tx_thread_secure_mode_stack_free+0x34>
 c001b6e:	6a3b      	ldr	r3, [r7, #32]
 c001b70:	2b1f      	cmp	r3, #31
 c001b72:	dd02      	ble.n	c001b7a <__acle_se__tx_thread_secure_mode_stack_free+0x3a>
    {
        status = TX_THREAD_ERROR;
 c001b74:	230e      	movs	r3, #14
 c001b76:	627b      	str	r3, [r7, #36]	@ 0x24
 c001b78:	e034      	b.n	c001be4 <__acle_se__tx_thread_secure_mode_stack_free+0xa4>
    }
    else
    {

        /* Pickup stack info from static array of secure contexts. */
        info_ptr = &tx_thread_secure_context[secure_context_index];
 c001b7a:	6a3a      	ldr	r2, [r7, #32]
 c001b7c:	4613      	mov	r3, r2
 c001b7e:	009b      	lsls	r3, r3, #2
 c001b80:	4413      	add	r3, r2
 c001b82:	009b      	lsls	r3, r3, #2
 c001b84:	4a34      	ldr	r2, [pc, #208]	@ (c001c58 <__acle_se__tx_thread_secure_mode_stack_free+0x118>)
 c001b86:	4413      	add	r3, r2
 c001b88:	61bb      	str	r3, [r7, #24]

        /* Check that this secure context is for this thread. */
        if (info_ptr -> tx_thread_ptr != thread_ptr)
 c001b8a:	69bb      	ldr	r3, [r7, #24]
 c001b8c:	68db      	ldr	r3, [r3, #12]
 c001b8e:	687a      	ldr	r2, [r7, #4]
 c001b90:	429a      	cmp	r2, r3
 c001b92:	d002      	beq.n	c001b9a <__acle_se__tx_thread_secure_mode_stack_free+0x5a>
        {
            status = TX_THREAD_ERROR;
 c001b94:	230e      	movs	r3, #14
 c001b96:	627b      	str	r3, [r7, #36]	@ 0x24
 c001b98:	e024      	b.n	c001be4 <__acle_se__tx_thread_secure_mode_stack_free+0xa4>

        else
        {

            /* Free secure stack. */
            free(info_ptr -> tx_thread_secure_stack_limit);
 c001b9a:	69bb      	ldr	r3, [r7, #24]
 c001b9c:	689b      	ldr	r3, [r3, #8]
 c001b9e:	4618      	mov	r0, r3
 c001ba0:	f000 f94c 	bl	c001e3c <free>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 c001ba4:	f3ef 8310 	mrs	r3, PRIMASK
 c001ba8:	60fb      	str	r3, [r7, #12]
    return(posture);
 c001baa:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 c001bac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 c001bae:	b672      	cpsid	i
    return(int_posture);
 c001bb0:	68bb      	ldr	r3, [r7, #8]

            TX_DISABLE
 c001bb2:	617b      	str	r3, [r7, #20]

            /* Free info struct. */
            tx_thread_secure_context[secure_context_index].tx_next_free_index = tx_head_free_index;
 c001bb4:	4b29      	ldr	r3, [pc, #164]	@ (c001c5c <__acle_se__tx_thread_secure_mode_stack_free+0x11c>)
 c001bb6:	6819      	ldr	r1, [r3, #0]
 c001bb8:	4827      	ldr	r0, [pc, #156]	@ (c001c58 <__acle_se__tx_thread_secure_mode_stack_free+0x118>)
 c001bba:	6a3a      	ldr	r2, [r7, #32]
 c001bbc:	4613      	mov	r3, r2
 c001bbe:	009b      	lsls	r3, r3, #2
 c001bc0:	4413      	add	r3, r2
 c001bc2:	009b      	lsls	r3, r3, #2
 c001bc4:	4403      	add	r3, r0
 c001bc6:	3310      	adds	r3, #16
 c001bc8:	6019      	str	r1, [r3, #0]
            tx_head_free_index = secure_context_index;
 c001bca:	4a24      	ldr	r2, [pc, #144]	@ (c001c5c <__acle_se__tx_thread_secure_mode_stack_free+0x11c>)
 c001bcc:	6a3b      	ldr	r3, [r7, #32]
 c001bce:	6013      	str	r3, [r2, #0]
 c001bd0:	697b      	ldr	r3, [r7, #20]
 c001bd2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 c001bd4:	693b      	ldr	r3, [r7, #16]
 c001bd6:	f383 8810 	msr	PRIMASK, r3
}
 c001bda:	bf00      	nop
            TX_RESTORE

            /* Clear secure context from thread. */
            thread_ptr -> tx_thread_secure_stack_context = 0;
 c001bdc:	687b      	ldr	r3, [r7, #4]
 c001bde:	2200      	movs	r2, #0
 c001be0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
    }

    return(status);
 c001be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 c001be6:	4618      	mov	r0, r3
 c001be8:	3728      	adds	r7, #40	@ 0x28
 c001bea:	46bd      	mov	sp, r7
 c001bec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001bf0:	4671      	mov	r1, lr
 c001bf2:	4672      	mov	r2, lr
 c001bf4:	4673      	mov	r3, lr
 c001bf6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c001bfa:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c001bfe:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c001c02:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c001c06:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c001c0a:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c001c0e:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c001c12:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c001c16:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c001c1a:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c001c1e:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c001c22:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c001c26:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c001c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c001c2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c001c32:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c001c36:	f38e 8c00 	msr	CPSR_fs, lr
 c001c3a:	b410      	push	{r4}
 c001c3c:	eef1 ca10 	vmrs	ip, fpscr
 c001c40:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c001c44:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c001c48:	ea0c 0c04 	and.w	ip, ip, r4
 c001c4c:	eee1 ca10 	vmsr	fpscr, ip
 c001c50:	bc10      	pop	{r4}
 c001c52:	46f4      	mov	ip, lr
 c001c54:	4774      	bxns	lr
 c001c56:	bf00      	nop
 c001c58:	30040288 	.word	0x30040288
 c001c5c:	30040508 	.word	0x30040508

0c001c60 <__acle_se__tx_thread_secure_stack_context_save>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
__attribute__((cmse_nonsecure_entry))
void _tx_thread_secure_stack_context_save(TX_THREAD *thread_ptr)
{
 c001c60:	b480      	push	{r7}
 c001c62:	b087      	sub	sp, #28
 c001c64:	af00      	add	r7, sp, #0
 c001c66:	6078      	str	r0, [r7, #4]
TX_THREAD_SECURE_STACK_INFO *info_ptr;
ULONG   sp;
ULONG   ipsr;
INT secure_context_index = (INT)thread_ptr -> tx_thread_secure_stack_context - 1;
 c001c68:	687b      	ldr	r3, [r7, #4]
 c001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c001c6e:	3b01      	subs	r3, #1
 c001c70:	617b      	str	r3, [r7, #20]

    /* This function should be called from scheduler only. */
    asm volatile("MRS     %0, IPSR" : "=r" (ipsr));   /* Get IPSR register. */
 c001c72:	f3ef 8305 	mrs	r3, IPSR
 c001c76:	613b      	str	r3, [r7, #16]
    if (ipsr == 0)
 c001c78:	693b      	ldr	r3, [r7, #16]
 c001c7a:	2b00      	cmp	r3, #0
 c001c7c:	d02b      	beq.n	c001cd6 <__acle_se__tx_thread_secure_stack_context_save+0x76>
    {
        return;
    }

    /* Check if secure context index is in valid range. */
    else if (secure_context_index < 0 || secure_context_index >= TX_MAX_SECURE_CONTEXTS)
 c001c7e:	697b      	ldr	r3, [r7, #20]
 c001c80:	2b00      	cmp	r3, #0
 c001c82:	db2a      	blt.n	c001cda <__acle_se__tx_thread_secure_stack_context_save+0x7a>
 c001c84:	697b      	ldr	r3, [r7, #20]
 c001c86:	2b1f      	cmp	r3, #31
 c001c88:	dc27      	bgt.n	c001cda <__acle_se__tx_thread_secure_stack_context_save+0x7a>
    {
        return;
    }

    /* Pickup the secure context pointer. */
    info_ptr = &tx_thread_secure_context[secure_context_index];
 c001c8a:	697a      	ldr	r2, [r7, #20]
 c001c8c:	4613      	mov	r3, r2
 c001c8e:	009b      	lsls	r3, r3, #2
 c001c90:	4413      	add	r3, r2
 c001c92:	009b      	lsls	r3, r3, #2
 c001c94:	4a2f      	ldr	r2, [pc, #188]	@ (c001d54 <__acle_se__tx_thread_secure_stack_context_save+0xf4>)
 c001c96:	4413      	add	r3, r2
 c001c98:	60fb      	str	r3, [r7, #12]

    /* Check that this secure context is for this thread. */
    if (info_ptr -> tx_thread_ptr != thread_ptr)
 c001c9a:	68fb      	ldr	r3, [r7, #12]
 c001c9c:	68db      	ldr	r3, [r3, #12]
 c001c9e:	687a      	ldr	r2, [r7, #4]
 c001ca0:	429a      	cmp	r2, r3
 c001ca2:	d11c      	bne.n	c001cde <__acle_se__tx_thread_secure_stack_context_save+0x7e>
    {
        return;
    }

    /* Check that stack pointer is in range */
    asm volatile("MRS     %0, PSP" : "=r" (sp));   /* Get PSP register. */
 c001ca4:	f3ef 8309 	mrs	r3, PSP
 c001ca8:	60bb      	str	r3, [r7, #8]
    if ((sp < (ULONG)info_ptr -> tx_thread_secure_stack_limit) ||
 c001caa:	68fb      	ldr	r3, [r7, #12]
 c001cac:	689b      	ldr	r3, [r3, #8]
 c001cae:	461a      	mov	r2, r3
 c001cb0:	68bb      	ldr	r3, [r7, #8]
 c001cb2:	4293      	cmp	r3, r2
 c001cb4:	d315      	bcc.n	c001ce2 <__acle_se__tx_thread_secure_stack_context_save+0x82>
        (sp > (ULONG)info_ptr -> tx_thread_secure_stack_start))
 c001cb6:	68fb      	ldr	r3, [r7, #12]
 c001cb8:	685b      	ldr	r3, [r3, #4]
 c001cba:	461a      	mov	r2, r3
    if ((sp < (ULONG)info_ptr -> tx_thread_secure_stack_limit) ||
 c001cbc:	68bb      	ldr	r3, [r7, #8]
 c001cbe:	4293      	cmp	r3, r2
 c001cc0:	d80f      	bhi.n	c001ce2 <__acle_se__tx_thread_secure_stack_context_save+0x82>
    {
        return;
    }

    /* Save stack pointer. */
    info_ptr -> tx_thread_secure_stack_ptr = (VOID *) sp;
 c001cc2:	68ba      	ldr	r2, [r7, #8]
 c001cc4:	68fb      	ldr	r3, [r7, #12]
 c001cc6:	601a      	str	r2, [r3, #0]

    /* Set process stack pointer and stack limit to 0 to throw exception when a thread
       without a secure stack calls a secure function that tries to use secure stack. */
    asm volatile("MSR     PSPLIM, %0" :: "r" (0));
 c001cc8:	2300      	movs	r3, #0
 c001cca:	f383 880b 	msr	PSPLIM, r3
    asm volatile("MSR     PSP, %0" :: "r" (0));
 c001cce:	2300      	movs	r3, #0
 c001cd0:	f383 8809 	msr	PSP, r3

    return;
 c001cd4:	e006      	b.n	c001ce4 <__acle_se__tx_thread_secure_stack_context_save+0x84>
        return;
 c001cd6:	bf00      	nop
 c001cd8:	e004      	b.n	c001ce4 <__acle_se__tx_thread_secure_stack_context_save+0x84>
        return;
 c001cda:	bf00      	nop
 c001cdc:	e002      	b.n	c001ce4 <__acle_se__tx_thread_secure_stack_context_save+0x84>
        return;
 c001cde:	bf00      	nop
 c001ce0:	e000      	b.n	c001ce4 <__acle_se__tx_thread_secure_stack_context_save+0x84>
        return;
 c001ce2:	bf00      	nop
}
 c001ce4:	371c      	adds	r7, #28
 c001ce6:	46bd      	mov	sp, r7
 c001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001cec:	4670      	mov	r0, lr
 c001cee:	4671      	mov	r1, lr
 c001cf0:	4672      	mov	r2, lr
 c001cf2:	4673      	mov	r3, lr
 c001cf4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c001cf8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c001cfc:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c001d00:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c001d04:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c001d08:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c001d0c:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c001d10:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c001d14:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c001d18:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c001d1c:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c001d20:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c001d24:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c001d28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c001d2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c001d30:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c001d34:	f38e 8c00 	msr	CPSR_fs, lr
 c001d38:	b410      	push	{r4}
 c001d3a:	eef1 ca10 	vmrs	ip, fpscr
 c001d3e:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c001d42:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c001d46:	ea0c 0c04 	and.w	ip, ip, r4
 c001d4a:	eee1 ca10 	vmsr	fpscr, ip
 c001d4e:	bc10      	pop	{r4}
 c001d50:	46f4      	mov	ip, lr
 c001d52:	4774      	bxns	lr
 c001d54:	30040288 	.word	0x30040288

0c001d58 <__acle_se__tx_thread_secure_stack_context_restore>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
__attribute__((cmse_nonsecure_entry))
void _tx_thread_secure_stack_context_restore(TX_THREAD *thread_ptr)
{
 c001d58:	b480      	push	{r7}
 c001d5a:	b087      	sub	sp, #28
 c001d5c:	af00      	add	r7, sp, #0
 c001d5e:	6078      	str	r0, [r7, #4]
TX_THREAD_SECURE_STACK_INFO *info_ptr;
ULONG   ipsr;
INT secure_context_index = (INT)thread_ptr -> tx_thread_secure_stack_context - 1;
 c001d60:	687b      	ldr	r3, [r7, #4]
 c001d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c001d66:	3b01      	subs	r3, #1
 c001d68:	617b      	str	r3, [r7, #20]

    /* This function should be called from scheduler only. */
    asm volatile("MRS     %0, IPSR" : "=r" (ipsr));   /* Get IPSR register. */
 c001d6a:	f3ef 8305 	mrs	r3, IPSR
 c001d6e:	613b      	str	r3, [r7, #16]
    if (ipsr == 0)
 c001d70:	693b      	ldr	r3, [r7, #16]
 c001d72:	2b00      	cmp	r3, #0
 c001d74:	d01b      	beq.n	c001dae <__acle_se__tx_thread_secure_stack_context_restore+0x56>
    {
        return;
    }

    /* Check if secure context index is in valid range. */
    else if (secure_context_index < 0 || secure_context_index >= TX_MAX_SECURE_CONTEXTS)
 c001d76:	697b      	ldr	r3, [r7, #20]
 c001d78:	2b00      	cmp	r3, #0
 c001d7a:	db1a      	blt.n	c001db2 <__acle_se__tx_thread_secure_stack_context_restore+0x5a>
 c001d7c:	697b      	ldr	r3, [r7, #20]
 c001d7e:	2b1f      	cmp	r3, #31
 c001d80:	dc17      	bgt.n	c001db2 <__acle_se__tx_thread_secure_stack_context_restore+0x5a>
    {
        return;
    }

    /* Pickup the secure context pointer. */
    info_ptr = &tx_thread_secure_context[secure_context_index];
 c001d82:	697a      	ldr	r2, [r7, #20]
 c001d84:	4613      	mov	r3, r2
 c001d86:	009b      	lsls	r3, r3, #2
 c001d88:	4413      	add	r3, r2
 c001d8a:	009b      	lsls	r3, r3, #2
 c001d8c:	4a26      	ldr	r2, [pc, #152]	@ (c001e28 <__acle_se__tx_thread_secure_stack_context_restore+0xd0>)
 c001d8e:	4413      	add	r3, r2
 c001d90:	60fb      	str	r3, [r7, #12]

    /* Check that this secure context is for this thread. */
    if (info_ptr -> tx_thread_ptr != thread_ptr)
 c001d92:	68fb      	ldr	r3, [r7, #12]
 c001d94:	68db      	ldr	r3, [r3, #12]
 c001d96:	687a      	ldr	r2, [r7, #4]
 c001d98:	429a      	cmp	r2, r3
 c001d9a:	d10c      	bne.n	c001db6 <__acle_se__tx_thread_secure_stack_context_restore+0x5e>
    {
        return;
    }

    /* Set stack pointer and limit. */
    asm volatile("MSR     PSPLIM, %0" :: "r" ((ULONG)info_ptr -> tx_thread_secure_stack_limit));
 c001d9c:	68fb      	ldr	r3, [r7, #12]
 c001d9e:	689b      	ldr	r3, [r3, #8]
 c001da0:	f383 880b 	msr	PSPLIM, r3
    asm volatile("MSR     PSP, %0" :: "r" ((ULONG)info_ptr -> tx_thread_secure_stack_ptr));
 c001da4:	68fb      	ldr	r3, [r7, #12]
 c001da6:	681b      	ldr	r3, [r3, #0]
 c001da8:	f383 8809 	msr	PSP, r3

    return;
 c001dac:	e004      	b.n	c001db8 <__acle_se__tx_thread_secure_stack_context_restore+0x60>
        return;
 c001dae:	bf00      	nop
 c001db0:	e002      	b.n	c001db8 <__acle_se__tx_thread_secure_stack_context_restore+0x60>
        return;
 c001db2:	bf00      	nop
 c001db4:	e000      	b.n	c001db8 <__acle_se__tx_thread_secure_stack_context_restore+0x60>
        return;
 c001db6:	bf00      	nop
}
 c001db8:	371c      	adds	r7, #28
 c001dba:	46bd      	mov	sp, r7
 c001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001dc0:	4670      	mov	r0, lr
 c001dc2:	4671      	mov	r1, lr
 c001dc4:	4672      	mov	r2, lr
 c001dc6:	4673      	mov	r3, lr
 c001dc8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c001dcc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c001dd0:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c001dd4:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c001dd8:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c001ddc:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c001de0:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c001de4:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c001de8:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c001dec:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c001df0:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c001df4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c001df8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c001dfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c001e00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c001e04:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c001e08:	f38e 8c00 	msr	CPSR_fs, lr
 c001e0c:	b410      	push	{r4}
 c001e0e:	eef1 ca10 	vmrs	ip, fpscr
 c001e12:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c001e16:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c001e1a:	ea0c 0c04 	and.w	ip, ip, r4
 c001e1e:	eee1 ca10 	vmsr	fpscr, ip
 c001e22:	bc10      	pop	{r4}
 c001e24:	46f4      	mov	ip, lr
 c001e26:	4774      	bxns	lr
 c001e28:	30040288 	.word	0x30040288

0c001e2c <malloc>:
 c001e2c:	4b02      	ldr	r3, [pc, #8]	@ (c001e38 <malloc+0xc>)
 c001e2e:	4601      	mov	r1, r0
 c001e30:	6818      	ldr	r0, [r3, #0]
 c001e32:	f000 b82d 	b.w	c001e90 <_malloc_r>
 c001e36:	bf00      	nop
 c001e38:	3004020c 	.word	0x3004020c

0c001e3c <free>:
 c001e3c:	4b02      	ldr	r3, [pc, #8]	@ (c001e48 <free+0xc>)
 c001e3e:	4601      	mov	r1, r0
 c001e40:	6818      	ldr	r0, [r3, #0]
 c001e42:	f000 b8f5 	b.w	c002030 <_free_r>
 c001e46:	bf00      	nop
 c001e48:	3004020c 	.word	0x3004020c

0c001e4c <sbrk_aligned>:
 c001e4c:	b570      	push	{r4, r5, r6, lr}
 c001e4e:	4e0f      	ldr	r6, [pc, #60]	@ (c001e8c <sbrk_aligned+0x40>)
 c001e50:	460c      	mov	r4, r1
 c001e52:	4605      	mov	r5, r0
 c001e54:	6831      	ldr	r1, [r6, #0]
 c001e56:	b911      	cbnz	r1, c001e5e <sbrk_aligned+0x12>
 c001e58:	f000 f8ae 	bl	c001fb8 <_sbrk_r>
 c001e5c:	6030      	str	r0, [r6, #0]
 c001e5e:	4621      	mov	r1, r4
 c001e60:	4628      	mov	r0, r5
 c001e62:	f000 f8a9 	bl	c001fb8 <_sbrk_r>
 c001e66:	1c43      	adds	r3, r0, #1
 c001e68:	d103      	bne.n	c001e72 <sbrk_aligned+0x26>
 c001e6a:	f04f 34ff 	mov.w	r4, #4294967295
 c001e6e:	4620      	mov	r0, r4
 c001e70:	bd70      	pop	{r4, r5, r6, pc}
 c001e72:	1cc4      	adds	r4, r0, #3
 c001e74:	f024 0403 	bic.w	r4, r4, #3
 c001e78:	42a0      	cmp	r0, r4
 c001e7a:	d0f8      	beq.n	c001e6e <sbrk_aligned+0x22>
 c001e7c:	1a21      	subs	r1, r4, r0
 c001e7e:	4628      	mov	r0, r5
 c001e80:	f000 f89a 	bl	c001fb8 <_sbrk_r>
 c001e84:	3001      	adds	r0, #1
 c001e86:	d1f2      	bne.n	c001e6e <sbrk_aligned+0x22>
 c001e88:	e7ef      	b.n	c001e6a <sbrk_aligned+0x1e>
 c001e8a:	bf00      	nop
 c001e8c:	3004050c 	.word	0x3004050c

0c001e90 <_malloc_r>:
 c001e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c001e94:	1ccd      	adds	r5, r1, #3
 c001e96:	4606      	mov	r6, r0
 c001e98:	f025 0503 	bic.w	r5, r5, #3
 c001e9c:	3508      	adds	r5, #8
 c001e9e:	2d0c      	cmp	r5, #12
 c001ea0:	bf38      	it	cc
 c001ea2:	250c      	movcc	r5, #12
 c001ea4:	2d00      	cmp	r5, #0
 c001ea6:	db01      	blt.n	c001eac <_malloc_r+0x1c>
 c001ea8:	42a9      	cmp	r1, r5
 c001eaa:	d904      	bls.n	c001eb6 <_malloc_r+0x26>
 c001eac:	230c      	movs	r3, #12
 c001eae:	6033      	str	r3, [r6, #0]
 c001eb0:	2000      	movs	r0, #0
 c001eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c001eb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ c001f8c <_malloc_r+0xfc>
 c001eba:	f000 f869 	bl	c001f90 <__malloc_lock>
 c001ebe:	f8d8 3000 	ldr.w	r3, [r8]
 c001ec2:	461c      	mov	r4, r3
 c001ec4:	bb44      	cbnz	r4, c001f18 <_malloc_r+0x88>
 c001ec6:	4629      	mov	r1, r5
 c001ec8:	4630      	mov	r0, r6
 c001eca:	f7ff ffbf 	bl	c001e4c <sbrk_aligned>
 c001ece:	1c43      	adds	r3, r0, #1
 c001ed0:	4604      	mov	r4, r0
 c001ed2:	d158      	bne.n	c001f86 <_malloc_r+0xf6>
 c001ed4:	f8d8 4000 	ldr.w	r4, [r8]
 c001ed8:	4627      	mov	r7, r4
 c001eda:	2f00      	cmp	r7, #0
 c001edc:	d143      	bne.n	c001f66 <_malloc_r+0xd6>
 c001ede:	2c00      	cmp	r4, #0
 c001ee0:	d04b      	beq.n	c001f7a <_malloc_r+0xea>
 c001ee2:	6823      	ldr	r3, [r4, #0]
 c001ee4:	4639      	mov	r1, r7
 c001ee6:	4630      	mov	r0, r6
 c001ee8:	eb04 0903 	add.w	r9, r4, r3
 c001eec:	f000 f864 	bl	c001fb8 <_sbrk_r>
 c001ef0:	4581      	cmp	r9, r0
 c001ef2:	d142      	bne.n	c001f7a <_malloc_r+0xea>
 c001ef4:	6821      	ldr	r1, [r4, #0]
 c001ef6:	4630      	mov	r0, r6
 c001ef8:	1a6d      	subs	r5, r5, r1
 c001efa:	4629      	mov	r1, r5
 c001efc:	f7ff ffa6 	bl	c001e4c <sbrk_aligned>
 c001f00:	3001      	adds	r0, #1
 c001f02:	d03a      	beq.n	c001f7a <_malloc_r+0xea>
 c001f04:	6823      	ldr	r3, [r4, #0]
 c001f06:	442b      	add	r3, r5
 c001f08:	6023      	str	r3, [r4, #0]
 c001f0a:	f8d8 3000 	ldr.w	r3, [r8]
 c001f0e:	685a      	ldr	r2, [r3, #4]
 c001f10:	bb62      	cbnz	r2, c001f6c <_malloc_r+0xdc>
 c001f12:	f8c8 7000 	str.w	r7, [r8]
 c001f16:	e00f      	b.n	c001f38 <_malloc_r+0xa8>
 c001f18:	6822      	ldr	r2, [r4, #0]
 c001f1a:	1b52      	subs	r2, r2, r5
 c001f1c:	d420      	bmi.n	c001f60 <_malloc_r+0xd0>
 c001f1e:	2a0b      	cmp	r2, #11
 c001f20:	d917      	bls.n	c001f52 <_malloc_r+0xc2>
 c001f22:	1961      	adds	r1, r4, r5
 c001f24:	42a3      	cmp	r3, r4
 c001f26:	6025      	str	r5, [r4, #0]
 c001f28:	bf18      	it	ne
 c001f2a:	6059      	strne	r1, [r3, #4]
 c001f2c:	6863      	ldr	r3, [r4, #4]
 c001f2e:	bf08      	it	eq
 c001f30:	f8c8 1000 	streq.w	r1, [r8]
 c001f34:	5162      	str	r2, [r4, r5]
 c001f36:	604b      	str	r3, [r1, #4]
 c001f38:	4630      	mov	r0, r6
 c001f3a:	f000 f82f 	bl	c001f9c <__malloc_unlock>
 c001f3e:	f104 000b 	add.w	r0, r4, #11
 c001f42:	1d23      	adds	r3, r4, #4
 c001f44:	f020 0007 	bic.w	r0, r0, #7
 c001f48:	1ac2      	subs	r2, r0, r3
 c001f4a:	bf1c      	itt	ne
 c001f4c:	1a1b      	subne	r3, r3, r0
 c001f4e:	50a3      	strne	r3, [r4, r2]
 c001f50:	e7af      	b.n	c001eb2 <_malloc_r+0x22>
 c001f52:	6862      	ldr	r2, [r4, #4]
 c001f54:	42a3      	cmp	r3, r4
 c001f56:	bf0c      	ite	eq
 c001f58:	f8c8 2000 	streq.w	r2, [r8]
 c001f5c:	605a      	strne	r2, [r3, #4]
 c001f5e:	e7eb      	b.n	c001f38 <_malloc_r+0xa8>
 c001f60:	4623      	mov	r3, r4
 c001f62:	6864      	ldr	r4, [r4, #4]
 c001f64:	e7ae      	b.n	c001ec4 <_malloc_r+0x34>
 c001f66:	463c      	mov	r4, r7
 c001f68:	687f      	ldr	r7, [r7, #4]
 c001f6a:	e7b6      	b.n	c001eda <_malloc_r+0x4a>
 c001f6c:	461a      	mov	r2, r3
 c001f6e:	685b      	ldr	r3, [r3, #4]
 c001f70:	42a3      	cmp	r3, r4
 c001f72:	d1fb      	bne.n	c001f6c <_malloc_r+0xdc>
 c001f74:	2300      	movs	r3, #0
 c001f76:	6053      	str	r3, [r2, #4]
 c001f78:	e7de      	b.n	c001f38 <_malloc_r+0xa8>
 c001f7a:	230c      	movs	r3, #12
 c001f7c:	4630      	mov	r0, r6
 c001f7e:	6033      	str	r3, [r6, #0]
 c001f80:	f000 f80c 	bl	c001f9c <__malloc_unlock>
 c001f84:	e794      	b.n	c001eb0 <_malloc_r+0x20>
 c001f86:	6005      	str	r5, [r0, #0]
 c001f88:	e7d6      	b.n	c001f38 <_malloc_r+0xa8>
 c001f8a:	bf00      	nop
 c001f8c:	30040510 	.word	0x30040510

0c001f90 <__malloc_lock>:
 c001f90:	4801      	ldr	r0, [pc, #4]	@ (c001f98 <__malloc_lock+0x8>)
 c001f92:	f000 b84b 	b.w	c00202c <__retarget_lock_acquire_recursive>
 c001f96:	bf00      	nop
 c001f98:	30040650 	.word	0x30040650

0c001f9c <__malloc_unlock>:
 c001f9c:	4801      	ldr	r0, [pc, #4]	@ (c001fa4 <__malloc_unlock+0x8>)
 c001f9e:	f000 b846 	b.w	c00202e <__retarget_lock_release_recursive>
 c001fa2:	bf00      	nop
 c001fa4:	30040650 	.word	0x30040650

0c001fa8 <memset>:
 c001fa8:	4402      	add	r2, r0
 c001faa:	4603      	mov	r3, r0
 c001fac:	4293      	cmp	r3, r2
 c001fae:	d100      	bne.n	c001fb2 <memset+0xa>
 c001fb0:	4770      	bx	lr
 c001fb2:	f803 1b01 	strb.w	r1, [r3], #1
 c001fb6:	e7f9      	b.n	c001fac <memset+0x4>

0c001fb8 <_sbrk_r>:
 c001fb8:	b538      	push	{r3, r4, r5, lr}
 c001fba:	2300      	movs	r3, #0
 c001fbc:	4d05      	ldr	r5, [pc, #20]	@ (c001fd4 <_sbrk_r+0x1c>)
 c001fbe:	4604      	mov	r4, r0
 c001fc0:	4608      	mov	r0, r1
 c001fc2:	602b      	str	r3, [r5, #0]
 c001fc4:	f7fe fc72 	bl	c0008ac <_sbrk>
 c001fc8:	1c43      	adds	r3, r0, #1
 c001fca:	d102      	bne.n	c001fd2 <_sbrk_r+0x1a>
 c001fcc:	682b      	ldr	r3, [r5, #0]
 c001fce:	b103      	cbz	r3, c001fd2 <_sbrk_r+0x1a>
 c001fd0:	6023      	str	r3, [r4, #0]
 c001fd2:	bd38      	pop	{r3, r4, r5, pc}
 c001fd4:	3004064c 	.word	0x3004064c

0c001fd8 <__errno>:
 c001fd8:	4b01      	ldr	r3, [pc, #4]	@ (c001fe0 <__errno+0x8>)
 c001fda:	6818      	ldr	r0, [r3, #0]
 c001fdc:	4770      	bx	lr
 c001fde:	bf00      	nop
 c001fe0:	3004020c 	.word	0x3004020c

0c001fe4 <__libc_init_array>:
 c001fe4:	b570      	push	{r4, r5, r6, lr}
 c001fe6:	4d0d      	ldr	r5, [pc, #52]	@ (c00201c <__libc_init_array+0x38>)
 c001fe8:	2600      	movs	r6, #0
 c001fea:	4c0d      	ldr	r4, [pc, #52]	@ (c002020 <__libc_init_array+0x3c>)
 c001fec:	1b64      	subs	r4, r4, r5
 c001fee:	10a4      	asrs	r4, r4, #2
 c001ff0:	42a6      	cmp	r6, r4
 c001ff2:	d109      	bne.n	c002008 <__libc_init_array+0x24>
 c001ff4:	4d0b      	ldr	r5, [pc, #44]	@ (c002024 <__libc_init_array+0x40>)
 c001ff6:	2600      	movs	r6, #0
 c001ff8:	4c0b      	ldr	r4, [pc, #44]	@ (c002028 <__libc_init_array+0x44>)
 c001ffa:	f000 f863 	bl	c0020c4 <_init>
 c001ffe:	1b64      	subs	r4, r4, r5
 c002000:	10a4      	asrs	r4, r4, #2
 c002002:	42a6      	cmp	r6, r4
 c002004:	d105      	bne.n	c002012 <__libc_init_array+0x2e>
 c002006:	bd70      	pop	{r4, r5, r6, pc}
 c002008:	f855 3b04 	ldr.w	r3, [r5], #4
 c00200c:	3601      	adds	r6, #1
 c00200e:	4798      	blx	r3
 c002010:	e7ee      	b.n	c001ff0 <__libc_init_array+0xc>
 c002012:	f855 3b04 	ldr.w	r3, [r5], #4
 c002016:	3601      	adds	r6, #1
 c002018:	4798      	blx	r3
 c00201a:	e7f2      	b.n	c002002 <__libc_init_array+0x1e>
 c00201c:	0c0020ec 	.word	0x0c0020ec
 c002020:	0c0020ec 	.word	0x0c0020ec
 c002024:	0c0020ec 	.word	0x0c0020ec
 c002028:	0c0020f0 	.word	0x0c0020f0

0c00202c <__retarget_lock_acquire_recursive>:
 c00202c:	4770      	bx	lr

0c00202e <__retarget_lock_release_recursive>:
 c00202e:	4770      	bx	lr

0c002030 <_free_r>:
 c002030:	b538      	push	{r3, r4, r5, lr}
 c002032:	4605      	mov	r5, r0
 c002034:	2900      	cmp	r1, #0
 c002036:	d041      	beq.n	c0020bc <_free_r+0x8c>
 c002038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c00203c:	1f0c      	subs	r4, r1, #4
 c00203e:	2b00      	cmp	r3, #0
 c002040:	bfb8      	it	lt
 c002042:	18e4      	addlt	r4, r4, r3
 c002044:	f7ff ffa4 	bl	c001f90 <__malloc_lock>
 c002048:	4a1d      	ldr	r2, [pc, #116]	@ (c0020c0 <_free_r+0x90>)
 c00204a:	6813      	ldr	r3, [r2, #0]
 c00204c:	b933      	cbnz	r3, c00205c <_free_r+0x2c>
 c00204e:	6063      	str	r3, [r4, #4]
 c002050:	6014      	str	r4, [r2, #0]
 c002052:	4628      	mov	r0, r5
 c002054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 c002058:	f7ff bfa0 	b.w	c001f9c <__malloc_unlock>
 c00205c:	42a3      	cmp	r3, r4
 c00205e:	d908      	bls.n	c002072 <_free_r+0x42>
 c002060:	6820      	ldr	r0, [r4, #0]
 c002062:	1821      	adds	r1, r4, r0
 c002064:	428b      	cmp	r3, r1
 c002066:	bf01      	itttt	eq
 c002068:	6819      	ldreq	r1, [r3, #0]
 c00206a:	685b      	ldreq	r3, [r3, #4]
 c00206c:	1809      	addeq	r1, r1, r0
 c00206e:	6021      	streq	r1, [r4, #0]
 c002070:	e7ed      	b.n	c00204e <_free_r+0x1e>
 c002072:	461a      	mov	r2, r3
 c002074:	685b      	ldr	r3, [r3, #4]
 c002076:	b10b      	cbz	r3, c00207c <_free_r+0x4c>
 c002078:	42a3      	cmp	r3, r4
 c00207a:	d9fa      	bls.n	c002072 <_free_r+0x42>
 c00207c:	6811      	ldr	r1, [r2, #0]
 c00207e:	1850      	adds	r0, r2, r1
 c002080:	42a0      	cmp	r0, r4
 c002082:	d10b      	bne.n	c00209c <_free_r+0x6c>
 c002084:	6820      	ldr	r0, [r4, #0]
 c002086:	4401      	add	r1, r0
 c002088:	1850      	adds	r0, r2, r1
 c00208a:	6011      	str	r1, [r2, #0]
 c00208c:	4283      	cmp	r3, r0
 c00208e:	d1e0      	bne.n	c002052 <_free_r+0x22>
 c002090:	6818      	ldr	r0, [r3, #0]
 c002092:	685b      	ldr	r3, [r3, #4]
 c002094:	4408      	add	r0, r1
 c002096:	6053      	str	r3, [r2, #4]
 c002098:	6010      	str	r0, [r2, #0]
 c00209a:	e7da      	b.n	c002052 <_free_r+0x22>
 c00209c:	d902      	bls.n	c0020a4 <_free_r+0x74>
 c00209e:	230c      	movs	r3, #12
 c0020a0:	602b      	str	r3, [r5, #0]
 c0020a2:	e7d6      	b.n	c002052 <_free_r+0x22>
 c0020a4:	6820      	ldr	r0, [r4, #0]
 c0020a6:	1821      	adds	r1, r4, r0
 c0020a8:	428b      	cmp	r3, r1
 c0020aa:	bf02      	ittt	eq
 c0020ac:	6819      	ldreq	r1, [r3, #0]
 c0020ae:	685b      	ldreq	r3, [r3, #4]
 c0020b0:	1809      	addeq	r1, r1, r0
 c0020b2:	6063      	str	r3, [r4, #4]
 c0020b4:	bf08      	it	eq
 c0020b6:	6021      	streq	r1, [r4, #0]
 c0020b8:	6054      	str	r4, [r2, #4]
 c0020ba:	e7ca      	b.n	c002052 <_free_r+0x22>
 c0020bc:	bd38      	pop	{r3, r4, r5, pc}
 c0020be:	bf00      	nop
 c0020c0:	30040510 	.word	0x30040510

0c0020c4 <_init>:
 c0020c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0020c6:	bf00      	nop
 c0020c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c0020ca:	bc08      	pop	{r3}
 c0020cc:	469e      	mov	lr, r3
 c0020ce:	4770      	bx	lr

0c0020d0 <_fini>:
 c0020d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0020d2:	bf00      	nop
 c0020d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c0020d6:	bc08      	pop	{r3}
 c0020d8:	469e      	mov	lr, r3
 c0020da:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c0fe000 <SECURE_SystemCoreClockUpdate>:
 c0fe000:	e97f e97f 	sg
 c0fe004:	f702 be96 	b.w	c000d34 <__acle_se_SECURE_SystemCoreClockUpdate>

0c0fe008 <_tx_thread_secure_stack_context_restore>:
 c0fe008:	e97f e97f 	sg
 c0fe00c:	f703 bea4 	b.w	c001d58 <__acle_se__tx_thread_secure_stack_context_restore>

0c0fe010 <_tx_thread_secure_mode_stack_initialize>:
 c0fe010:	e97f e97f 	sg
 c0fe014:	f703 bc22 	b.w	c00185c <__acle_se__tx_thread_secure_mode_stack_initialize>

0c0fe018 <_tx_thread_secure_mode_stack_allocate>:
 c0fe018:	e97f e97f 	sg
 c0fe01c:	f703 bc9a 	b.w	c001954 <__acle_se__tx_thread_secure_mode_stack_allocate>

0c0fe020 <SECURE_RegisterCallback>:
 c0fe020:	e97f e97f 	sg
 c0fe024:	f702 bba0 	b.w	c000768 <__acle_se_SECURE_RegisterCallback>

0c0fe028 <_tx_thread_secure_stack_context_save>:
 c0fe028:	e97f e97f 	sg
 c0fe02c:	f703 be18 	b.w	c001c60 <__acle_se__tx_thread_secure_stack_context_save>

0c0fe030 <_tx_thread_secure_mode_stack_free>:
 c0fe030:	e97f e97f 	sg
 c0fe034:	f703 bd84 	b.w	c001b40 <__acle_se__tx_thread_secure_mode_stack_free>
	...
