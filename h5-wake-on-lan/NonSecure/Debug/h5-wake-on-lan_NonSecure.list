
h5-wake-on-lan_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017aa8  08100250  08100250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08117cf8  08117cf8  00018cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08117f14  08117f14  000208e8  2**0
                  CONTENTS
  4 .ARM          00000008  08117f14  08117f14  00018f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08117f1c  08117f1c  000208e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08117f1c  08117f1c  00018f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08117f20  08117f20  00018f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20050000  08117f24  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .NetXPoolSection 00007800  200500e8  0811800c  000190e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000018cc  200578e8  0811f80c  000208e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200591b4  0811f80c  000211b4  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  000208e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000f1e0e  00000000  00000000  0002091e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000121af  00000000  00000000  0011272c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002758  00000000  00000000  001248e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b42  00000000  00000000  00127038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000476e9  00000000  00000000  00128b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00063003  00000000  00000000  00170263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00162042  00000000  00000000  001d3266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  003352a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007fd8  00000000  00000000  003352ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000192  00000000  00000000  0033d2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100250 <__do_global_dtors_aux>:
 8100250:	b510      	push	{r4, lr}
 8100252:	4c05      	ldr	r4, [pc, #20]	@ (8100268 <__do_global_dtors_aux+0x18>)
 8100254:	7823      	ldrb	r3, [r4, #0]
 8100256:	b933      	cbnz	r3, 8100266 <__do_global_dtors_aux+0x16>
 8100258:	4b04      	ldr	r3, [pc, #16]	@ (810026c <__do_global_dtors_aux+0x1c>)
 810025a:	b113      	cbz	r3, 8100262 <__do_global_dtors_aux+0x12>
 810025c:	4804      	ldr	r0, [pc, #16]	@ (8100270 <__do_global_dtors_aux+0x20>)
 810025e:	f3af 8000 	nop.w
 8100262:	2301      	movs	r3, #1
 8100264:	7023      	strb	r3, [r4, #0]
 8100266:	bd10      	pop	{r4, pc}
 8100268:	200578e8 	.word	0x200578e8
 810026c:	00000000 	.word	0x00000000
 8100270:	08117cb4 	.word	0x08117cb4

08100274 <frame_dummy>:
 8100274:	b508      	push	{r3, lr}
 8100276:	4b03      	ldr	r3, [pc, #12]	@ (8100284 <frame_dummy+0x10>)
 8100278:	b11b      	cbz	r3, 8100282 <frame_dummy+0xe>
 810027a:	4903      	ldr	r1, [pc, #12]	@ (8100288 <frame_dummy+0x14>)
 810027c:	4803      	ldr	r0, [pc, #12]	@ (810028c <frame_dummy+0x18>)
 810027e:	f3af 8000 	nop.w
 8100282:	bd08      	pop	{r3, pc}
 8100284:	00000000 	.word	0x00000000
 8100288:	200578ec 	.word	0x200578ec
 810028c:	08117cb4 	.word	0x08117cb4

08100290 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8100290:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8100292:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8100296:	4917      	ldr	r1, [pc, #92]	@ (81002f4 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8100298:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 810029c:	4816      	ldr	r0, [pc, #88]	@ (81002f8 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 810029e:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 81002a0:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 81002a4:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 81002a6:	4815      	ldr	r0, [pc, #84]	@ (81002fc <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 81002a8:	4912      	ldr	r1, [pc, #72]	@ (81002f4 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 81002aa:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 81002ac:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 81002ae:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 81002b2:	4913      	ldr	r1, [pc, #76]	@ (8100300 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 81002b4:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 81002b6:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 81002ba:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 81002bc:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 81002c0:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 81002c4:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 81002c8:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 81002cc:	490d      	ldr	r1, [pc, #52]	@ (8100304 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 81002ce:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 81002d2:	4770      	bx	lr

081002d4 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 81002d4:	f7ff bffe 	b.w	81002d4 <__tx_BadHandler>

081002d8 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 81002d8:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 81002da:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 81002de:	4770      	bx	lr

081002e0 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 81002e0:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 81002e2:	f000 f8dd 	bl	81004a0 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 81002e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 81002ea:	4770      	bx	lr

081002ec <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 81002ec:	f7ff bffe 	b.w	81002ec <__tx_NMIHandler>

081002f0 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 81002f0:	f7ff bffe 	b.w	81002f0 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 81002f4:	08100000 	.word	0x08100000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 81002f8:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 81002fc:	20058124 	.word	0x20058124
    LDR     r1, =SYSTICK_CYCLES
 8100300:	0026259f 	.word	0x0026259f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8100304:	40ff0000 	.word	0x40ff0000

08100308 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8100308:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 810030c:	4a4a      	ldr	r2, [pc, #296]	@ (8100438 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 810030e:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8100310:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8100314:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8100318:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 810031c:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 810031e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8100322:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8100326:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 810032a:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 810032e:	f3bf 8f6f 	isb	sy

08100332 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8100332:	e7fe      	b.n	8100332 <__tx_wait_here>

08100334 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8100334:	4841      	ldr	r0, [pc, #260]	@ (810043c <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8100336:	4a42      	ldr	r2, [pc, #264]	@ (8100440 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8100338:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 810033c:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 810033e:	b1d1      	cbz	r1, 8100376 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8100340:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8100342:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8100346:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 810034a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 810034e:	d101      	bne.n	8100354 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8100350:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08100354 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8100354:	4c3b      	ldr	r4, [pc, #236]	@ (8100444 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8100356:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 810035a:	f8c1 c008 	str.w	ip, [r1, #8]

#if (!defined(TX_SINGLE_MODE_SECURE) && !defined(TX_SINGLE_MODE_NON_SECURE))
    // Save secure context
    LDR     r5, [r1,#0x90]                          // Load secure stack index
 810035e:	f8d1 5090 	ldr.w	r5, [r1, #144]	@ 0x90
    CBZ     r5, _skip_secure_save                   // Skip save if there is no secure context
 8100362:	b125      	cbz	r5, 810036e <_skip_secure_save>
    PUSH    {r0,r1,r2,r3}                           // Save scratch registers
 8100364:	b40f      	push	{r0, r1, r2, r3}
    MOV     r0, r1                                  // Move thread ptr to r0
 8100366:	4608      	mov	r0, r1
    BL      _tx_thread_secure_stack_context_save    // Save secure stack
 8100368:	f017 fcba 	bl	8117ce0 <___tx_thread_secure_stack_context_save_veneer>
    POP     {r0,r1,r2,r3}                           // Restore secure registers
 810036c:	bc0f      	pop	{r0, r1, r2, r3}

0810036e <_skip_secure_save>:
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 810036e:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8100370:	b10d      	cbz	r5, 8100376 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8100372:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8100374:	6023      	str	r3, [r4, #0]

08100376 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8100376:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8100378:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 810037a:	b311      	cbz	r1, 81003c2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 810037c:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 810037e:	b662      	cpsie	i

08100380 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8100380:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8100382:	4c30      	ldr	r4, [pc, #192]	@ (8100444 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8100384:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8100386:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 810038a:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 810038c:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

#if (!defined(TX_SINGLE_MODE_SECURE) && !defined(TX_SINGLE_MODE_NON_SECURE))
    // Restore secure context
    LDR     r0, [r1,#0x90]                          // Load secure stack index
 810038e:	f8d1 0090 	ldr.w	r0, [r1, #144]	@ 0x90
    CBZ     r0, _skip_secure_restore                // Skip restore if there is no secure context
 8100392:	b120      	cbz	r0, 810039e <_skip_secure_restore>
    PUSH    {r0,r1}                                 // Save r1 (and dummy r0)
 8100394:	b403      	push	{r0, r1}
    MOV     r0, r1                                  // Move thread ptr to r0
 8100396:	4608      	mov	r0, r1
    BL      _tx_thread_secure_stack_context_restore // Restore secure stack
 8100398:	f017 fc9e 	bl	8117cd8 <___tx_thread_secure_stack_context_restore_veneer>
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
 810039c:	bc03      	pop	{r0, r1}

0810039e <_skip_secure_restore>:
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 810039e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 81003a2:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 81003a6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 81003aa:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 81003ae:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 81003b2:	d101      	bne.n	81003b8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 81003b4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

081003b8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 81003b8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 81003bc:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 81003c0:	4770      	bx	lr

081003c2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 81003c2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 81003c4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 81003c6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 81003c8:	b909      	cbnz	r1, 81003ce <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 81003ca:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 81003cc:	e7f9      	b.n	81003c2 <__tx_ts_wait>

081003ce <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 81003ce:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 81003d2:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 81003d6:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 81003da:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 81003dc:	e7d0      	b.n	8100380 <__tx_ts_restore>
 81003de:	bf00      	nop

081003e0 <SVC_Handler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  SVC_Handler
    .thumb_func
.type SVC_Handler, function
SVC_Handler:
    TST     lr, #0x04                               // Determine return stack from EXC_RETURN bit 2
 81003e0:	f01e 0f04 	tst.w	lr, #4
    ITE     EQ
 81003e4:	bf0c      	ite	eq
    MRSEQ   r0, MSP                                 // Get MSP if return stack is MSP
 81003e6:	f3ef 8008 	mrseq	r0, MSP
    MRSNE   r0, PSP                                 // Get PSP if return stack is PSP
 81003ea:	f3ef 8009 	mrsne	r0, PSP

    LDR     r1, [r0,#24]                            // Load saved PC from stack
 81003ee:	6981      	ldr	r1, [r0, #24]
    LDRB    r1, [r1,#-2]                            // Load SVC number
 81003f0:	f811 1c02 	ldrb.w	r1, [r1, #-2]

    CMP     r1, #1                                  // Is it a secure stack allocate request?
 81003f4:	2901      	cmp	r1, #1
    BEQ     _tx_svc_secure_alloc                    // Yes, go there
 81003f6:	d004      	beq.n	8100402 <_tx_svc_secure_alloc>

    CMP     r1, #2                                  // Is it a secure stack free request?
 81003f8:	2902      	cmp	r1, #2
    BEQ     _tx_svc_secure_free                     // Yes, go there
 81003fa:	d00b      	beq.n	8100414 <_tx_svc_secure_free>
    
    CMP     r1, #3                                  // Is it a secure stack init request?
 81003fc:	2903      	cmp	r1, #3
    BEQ     _tx_svc_secure_init                     // Yes, go there
 81003fe:	d012      	beq.n	8100426 <_tx_svc_secure_init>

    // Unknown SVC argument - just return
    BX      lr
 8100400:	4770      	bx	lr

08100402 <_tx_svc_secure_alloc>:

_tx_svc_secure_alloc:
    PUSH    {r0,lr}                                 // Save SP and EXC_RETURN
 8100402:	b501      	push	{r0, lr}
    LDM     r0, {r0-r3}                             // Load function parameters from stack
 8100404:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    BL      _tx_thread_secure_mode_stack_allocate
 8100406:	f017 fc63 	bl	8117cd0 <___tx_thread_secure_mode_stack_allocate_veneer>
    POP     {r12,lr}                                // Restore SP and EXC_RETURN
 810040a:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    STR     r0,[r12]                                // Store function return value
 810040e:	f8cc 0000 	str.w	r0, [ip]
    BX      lr
 8100412:	4770      	bx	lr

08100414 <_tx_svc_secure_free>:
_tx_svc_secure_free:
    PUSH    {r0,lr}                                 // Save SP and EXC_RETURN
 8100414:	b501      	push	{r0, lr}
    LDM     r0, {r0-r3}                             // Load function parameters from stack
 8100416:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    BL      _tx_thread_secure_mode_stack_free
 8100418:	f017 fc66 	bl	8117ce8 <___tx_thread_secure_mode_stack_free_veneer>
    POP     {r12,lr}                                // Restore SP and EXC_RETURN
 810041c:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    STR     r0,[r12]                                // Store function return value
 8100420:	f8cc 0000 	str.w	r0, [ip]
    BX      lr
 8100424:	4770      	bx	lr

08100426 <_tx_svc_secure_init>:
_tx_svc_secure_init:
    PUSH    {r0,lr}                                 // Save SP and EXC_RETURN
 8100426:	b501      	push	{r0, lr}
    BL      _tx_thread_secure_mode_stack_initialize
 8100428:	f017 fc62 	bl	8117cf0 <___tx_thread_secure_mode_stack_initialize_veneer>
    POP     {r12,lr}                                // Restore SP and EXC_RETURN
 810042c:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    BX      lr
 8100430:	4770      	bx	lr
 8100432:	bf00      	nop

08100434 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 8100434:	4770      	bx	lr
 8100436:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8100438:	200581c0 	.word	0x200581c0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 810043c:	20058128 	.word	0x20058128
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8100440:	2005812c 	.word	0x2005812c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8100444:	20058730 	.word	0x20058730

08100448 <_tx_thread_secure_stack_allocate>:
    .global  _tx_thread_secure_stack_allocate
    .thumb_func
.type _tx_thread_secure_stack_allocate, function
_tx_thread_secure_stack_allocate:
#if !defined(TX_SINGLE_MODE_SECURE) && !defined(TX_SINGLE_MODE_NON_SECURE)
    MRS     r3, PRIMASK     // Save interrupt mask
 8100448:	f3ef 8310 	mrs	r3, PRIMASK
    CPSIE   i               // Enable interrupts for SVC call
 810044c:	b662      	cpsie	i
    SVC     1
 810044e:	df01      	svc	1
    CMP     r3, #0          // If interrupts enabled, just return
 8100450:	2b00      	cmp	r3, #0
    BEQ     _alloc_return_interrupt_enabled
 8100452:	d000      	beq.n	8100456 <_alloc_return_interrupt_enabled>
    CPSID   i               // Otherwise, disable interrupts
 8100454:	b672      	cpsid	i

08100456 <_alloc_return_interrupt_enabled>:
#else
    MOV     r0, #0xFF       // Feature not enabled
#endif
_alloc_return_interrupt_enabled:
    BX      lr
 8100456:	4770      	bx	lr

08100458 <_tx_thread_secure_stack_initialize>:
    .global  _tx_thread_secure_stack_initialize
    .thumb_func
.type _tx_thread_secure_stack_initialize, function
_tx_thread_secure_stack_initialize:
#if !defined(TX_SINGLE_MODE_SECURE) && !defined(TX_SINGLE_MODE_NON_SECURE)
    CPSIE   i               // Enable interrupts for SVC call
 8100458:	b662      	cpsie	i
    SVC     3
 810045a:	df03      	svc	3
    CPSID   i               // Disable interrupts
 810045c:	b672      	cpsid	i
#else
    MOV     r0, #0xFF       // Feature not enabled
#endif
    BX      lr
 810045e:	4770      	bx	lr

08100460 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8100460:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8100462:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8100466:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 810046a:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 810046e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8100470:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8100474:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8100476:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8100478:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 810047a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 810047c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 810047e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8100480:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8100482:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8100484:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8100486:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8100488:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 810048a:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 810048c:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 810048e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8100492:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8100494:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8100496:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 810049a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 810049c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 810049e:	4770      	bx	lr

081004a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 81004a0:	4922      	ldr	r1, [pc, #136]	@ (810052c <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 81004a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 81004a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 81004a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 81004aa:	4b21      	ldr	r3, [pc, #132]	@ (8100530 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 81004ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 81004ae:	b13a      	cbz	r2, 81004c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 81004b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 81004b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 81004b6:	b91a      	cbnz	r2, 81004c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 81004b8:	4b1e      	ldr	r3, [pc, #120]	@ (8100534 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 81004ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 81004be:	6018      	str	r0, [r3, #0]

081004c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 81004c0:	491d      	ldr	r1, [pc, #116]	@ (8100538 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 81004c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 81004c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 81004c6:	b122      	cbz	r2, 81004d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 81004c8:	4b1c      	ldr	r3, [pc, #112]	@ (810053c <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 81004ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 81004ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 81004d0:	e008      	b.n	81004e4 <__tx_timer_done>

081004d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 81004d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 81004d6:	4b1a      	ldr	r3, [pc, #104]	@ (8100540 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 81004d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 81004da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 81004dc:	d101      	bne.n	81004e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 81004de:	4b19      	ldr	r3, [pc, #100]	@ (8100544 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 81004e0:	6818      	ldr	r0, [r3, #0]

081004e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 81004e2:	6008      	str	r0, [r1, #0]

081004e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 81004e4:	4b13      	ldr	r3, [pc, #76]	@ (8100534 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 81004e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 81004e8:	b912      	cbnz	r2, 81004f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 81004ea:	4914      	ldr	r1, [pc, #80]	@ (810053c <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 81004ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 81004ee:	b1c8      	cbz	r0, 8100524 <__tx_timer_nothing_expired>

081004f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 81004f0:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 81004f2:	4912      	ldr	r1, [pc, #72]	@ (810053c <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 81004f4:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 81004f6:	b108      	cbz	r0, 81004fc <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 81004f8:	f015 fdb4 	bl	8116064 <_tx_timer_expiration_process>

081004fc <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 81004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8100534 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 81004fe:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8100500:	b172      	cbz	r2, 8100520 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8100502:	f015 fcbd 	bl	8115e80 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8100506:	4810      	ldr	r0, [pc, #64]	@ (8100548 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8100508:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 810050a:	b949      	cbnz	r1, 8100520 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 810050c:	480f      	ldr	r0, [pc, #60]	@ (810054c <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 810050e:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8100510:	4a0f      	ldr	r2, [pc, #60]	@ (8100550 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8100512:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8100514:	480f      	ldr	r0, [pc, #60]	@ (8100554 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8100516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 810051a:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 810051c:	d000      	beq.n	8100520 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 810051e:	6002      	str	r2, [r0, #0]

08100520 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8100520:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08100524 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8100524:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8100528:	4770      	bx	lr
 810052a:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 810052c:	200581cc 	.word	0x200581cc
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8100530:	20058730 	.word	0x20058730
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8100534:	200581d0 	.word	0x200581d0
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8100538:	2005825c 	.word	0x2005825c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 810053c:	20058260 	.word	0x20058260
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8100540:	20058258 	.word	0x20058258
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8100544:	20058254 	.word	0x20058254
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8100548:	200581c0 	.word	0x200581c0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 810054c:	20058128 	.word	0x20058128
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8100550:	2005812c 	.word	0x2005812c
    LDR     r0, =0xE000ED04                         // Build address of control register
 8100554:	e000ed04 	.word	0xe000ed04

08100558 <__aeabi_uldivmod>:
 8100558:	b953      	cbnz	r3, 8100570 <__aeabi_uldivmod+0x18>
 810055a:	b94a      	cbnz	r2, 8100570 <__aeabi_uldivmod+0x18>
 810055c:	2900      	cmp	r1, #0
 810055e:	bf08      	it	eq
 8100560:	2800      	cmpeq	r0, #0
 8100562:	bf1c      	itt	ne
 8100564:	f04f 31ff 	movne.w	r1, #4294967295
 8100568:	f04f 30ff 	movne.w	r0, #4294967295
 810056c:	f000 b97e 	b.w	810086c <__aeabi_idiv0>
 8100570:	f1ad 0c08 	sub.w	ip, sp, #8
 8100574:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100578:	f000 f806 	bl	8100588 <__udivmoddi4>
 810057c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100584:	b004      	add	sp, #16
 8100586:	4770      	bx	lr

08100588 <__udivmoddi4>:
 8100588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810058c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 810058e:	460c      	mov	r4, r1
 8100590:	2b00      	cmp	r3, #0
 8100592:	d14d      	bne.n	8100630 <__udivmoddi4+0xa8>
 8100594:	428a      	cmp	r2, r1
 8100596:	460f      	mov	r7, r1
 8100598:	4684      	mov	ip, r0
 810059a:	4696      	mov	lr, r2
 810059c:	fab2 f382 	clz	r3, r2
 81005a0:	d960      	bls.n	8100664 <__udivmoddi4+0xdc>
 81005a2:	b14b      	cbz	r3, 81005b8 <__udivmoddi4+0x30>
 81005a4:	fa02 fe03 	lsl.w	lr, r2, r3
 81005a8:	f1c3 0220 	rsb	r2, r3, #32
 81005ac:	409f      	lsls	r7, r3
 81005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 81005b2:	fa20 f202 	lsr.w	r2, r0, r2
 81005b6:	4317      	orrs	r7, r2
 81005b8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 81005bc:	fa1f f48e 	uxth.w	r4, lr
 81005c0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 81005c4:	fbb7 f1f6 	udiv	r1, r7, r6
 81005c8:	fb06 7711 	mls	r7, r6, r1, r7
 81005cc:	fb01 f004 	mul.w	r0, r1, r4
 81005d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 81005d4:	4290      	cmp	r0, r2
 81005d6:	d908      	bls.n	81005ea <__udivmoddi4+0x62>
 81005d8:	eb1e 0202 	adds.w	r2, lr, r2
 81005dc:	f101 37ff 	add.w	r7, r1, #4294967295
 81005e0:	d202      	bcs.n	81005e8 <__udivmoddi4+0x60>
 81005e2:	4290      	cmp	r0, r2
 81005e4:	f200 812d 	bhi.w	8100842 <__udivmoddi4+0x2ba>
 81005e8:	4639      	mov	r1, r7
 81005ea:	1a12      	subs	r2, r2, r0
 81005ec:	fa1f fc8c 	uxth.w	ip, ip
 81005f0:	fbb2 f0f6 	udiv	r0, r2, r6
 81005f4:	fb06 2210 	mls	r2, r6, r0, r2
 81005f8:	fb00 f404 	mul.w	r4, r0, r4
 81005fc:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8100600:	4564      	cmp	r4, ip
 8100602:	d908      	bls.n	8100616 <__udivmoddi4+0x8e>
 8100604:	eb1e 0c0c 	adds.w	ip, lr, ip
 8100608:	f100 32ff 	add.w	r2, r0, #4294967295
 810060c:	d202      	bcs.n	8100614 <__udivmoddi4+0x8c>
 810060e:	4564      	cmp	r4, ip
 8100610:	f200 811a 	bhi.w	8100848 <__udivmoddi4+0x2c0>
 8100614:	4610      	mov	r0, r2
 8100616:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 810061a:	ebac 0c04 	sub.w	ip, ip, r4
 810061e:	2100      	movs	r1, #0
 8100620:	b125      	cbz	r5, 810062c <__udivmoddi4+0xa4>
 8100622:	fa2c f303 	lsr.w	r3, ip, r3
 8100626:	2200      	movs	r2, #0
 8100628:	e9c5 3200 	strd	r3, r2, [r5]
 810062c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8100630:	428b      	cmp	r3, r1
 8100632:	d905      	bls.n	8100640 <__udivmoddi4+0xb8>
 8100634:	b10d      	cbz	r5, 810063a <__udivmoddi4+0xb2>
 8100636:	e9c5 0100 	strd	r0, r1, [r5]
 810063a:	2100      	movs	r1, #0
 810063c:	4608      	mov	r0, r1
 810063e:	e7f5      	b.n	810062c <__udivmoddi4+0xa4>
 8100640:	fab3 f183 	clz	r1, r3
 8100644:	2900      	cmp	r1, #0
 8100646:	d14d      	bne.n	81006e4 <__udivmoddi4+0x15c>
 8100648:	42a3      	cmp	r3, r4
 810064a:	f0c0 80f2 	bcc.w	8100832 <__udivmoddi4+0x2aa>
 810064e:	4290      	cmp	r0, r2
 8100650:	f080 80ef 	bcs.w	8100832 <__udivmoddi4+0x2aa>
 8100654:	4606      	mov	r6, r0
 8100656:	4623      	mov	r3, r4
 8100658:	4608      	mov	r0, r1
 810065a:	2d00      	cmp	r5, #0
 810065c:	d0e6      	beq.n	810062c <__udivmoddi4+0xa4>
 810065e:	e9c5 6300 	strd	r6, r3, [r5]
 8100662:	e7e3      	b.n	810062c <__udivmoddi4+0xa4>
 8100664:	2b00      	cmp	r3, #0
 8100666:	f040 80a2 	bne.w	81007ae <__udivmoddi4+0x226>
 810066a:	1a8a      	subs	r2, r1, r2
 810066c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8100670:	fa1f f68e 	uxth.w	r6, lr
 8100674:	2101      	movs	r1, #1
 8100676:	fbb2 f4f7 	udiv	r4, r2, r7
 810067a:	fb07 2014 	mls	r0, r7, r4, r2
 810067e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8100682:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8100686:	fb06 f004 	mul.w	r0, r6, r4
 810068a:	4290      	cmp	r0, r2
 810068c:	d90f      	bls.n	81006ae <__udivmoddi4+0x126>
 810068e:	eb1e 0202 	adds.w	r2, lr, r2
 8100692:	f104 38ff 	add.w	r8, r4, #4294967295
 8100696:	bf2c      	ite	cs
 8100698:	f04f 0901 	movcs.w	r9, #1
 810069c:	f04f 0900 	movcc.w	r9, #0
 81006a0:	4290      	cmp	r0, r2
 81006a2:	d903      	bls.n	81006ac <__udivmoddi4+0x124>
 81006a4:	f1b9 0f00 	cmp.w	r9, #0
 81006a8:	f000 80c8 	beq.w	810083c <__udivmoddi4+0x2b4>
 81006ac:	4644      	mov	r4, r8
 81006ae:	1a12      	subs	r2, r2, r0
 81006b0:	fa1f fc8c 	uxth.w	ip, ip
 81006b4:	fbb2 f0f7 	udiv	r0, r2, r7
 81006b8:	fb07 2210 	mls	r2, r7, r0, r2
 81006bc:	fb00 f606 	mul.w	r6, r0, r6
 81006c0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 81006c4:	4566      	cmp	r6, ip
 81006c6:	d908      	bls.n	81006da <__udivmoddi4+0x152>
 81006c8:	eb1e 0c0c 	adds.w	ip, lr, ip
 81006cc:	f100 32ff 	add.w	r2, r0, #4294967295
 81006d0:	d202      	bcs.n	81006d8 <__udivmoddi4+0x150>
 81006d2:	4566      	cmp	r6, ip
 81006d4:	f200 80bb 	bhi.w	810084e <__udivmoddi4+0x2c6>
 81006d8:	4610      	mov	r0, r2
 81006da:	ebac 0c06 	sub.w	ip, ip, r6
 81006de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 81006e2:	e79d      	b.n	8100620 <__udivmoddi4+0x98>
 81006e4:	f1c1 0620 	rsb	r6, r1, #32
 81006e8:	408b      	lsls	r3, r1
 81006ea:	fa04 fe01 	lsl.w	lr, r4, r1
 81006ee:	fa22 f706 	lsr.w	r7, r2, r6
 81006f2:	fa20 fc06 	lsr.w	ip, r0, r6
 81006f6:	40f4      	lsrs	r4, r6
 81006f8:	408a      	lsls	r2, r1
 81006fa:	431f      	orrs	r7, r3
 81006fc:	ea4e 030c 	orr.w	r3, lr, ip
 8100700:	fa00 fe01 	lsl.w	lr, r0, r1
 8100704:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100708:	ea4f 4913 	mov.w	r9, r3, lsr #16
 810070c:	fa1f fc87 	uxth.w	ip, r7
 8100710:	fbb4 f0f8 	udiv	r0, r4, r8
 8100714:	fb08 4410 	mls	r4, r8, r0, r4
 8100718:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810071c:	fb00 f90c 	mul.w	r9, r0, ip
 8100720:	45a1      	cmp	r9, r4
 8100722:	d90e      	bls.n	8100742 <__udivmoddi4+0x1ba>
 8100724:	193c      	adds	r4, r7, r4
 8100726:	f100 3aff 	add.w	sl, r0, #4294967295
 810072a:	bf2c      	ite	cs
 810072c:	f04f 0b01 	movcs.w	fp, #1
 8100730:	f04f 0b00 	movcc.w	fp, #0
 8100734:	45a1      	cmp	r9, r4
 8100736:	d903      	bls.n	8100740 <__udivmoddi4+0x1b8>
 8100738:	f1bb 0f00 	cmp.w	fp, #0
 810073c:	f000 8093 	beq.w	8100866 <__udivmoddi4+0x2de>
 8100740:	4650      	mov	r0, sl
 8100742:	eba4 0409 	sub.w	r4, r4, r9
 8100746:	fa1f f983 	uxth.w	r9, r3
 810074a:	fbb4 f3f8 	udiv	r3, r4, r8
 810074e:	fb08 4413 	mls	r4, r8, r3, r4
 8100752:	fb03 fc0c 	mul.w	ip, r3, ip
 8100756:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810075a:	45a4      	cmp	ip, r4
 810075c:	d906      	bls.n	810076c <__udivmoddi4+0x1e4>
 810075e:	193c      	adds	r4, r7, r4
 8100760:	f103 38ff 	add.w	r8, r3, #4294967295
 8100764:	d201      	bcs.n	810076a <__udivmoddi4+0x1e2>
 8100766:	45a4      	cmp	ip, r4
 8100768:	d87a      	bhi.n	8100860 <__udivmoddi4+0x2d8>
 810076a:	4643      	mov	r3, r8
 810076c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8100770:	eba4 040c 	sub.w	r4, r4, ip
 8100774:	fba0 9802 	umull	r9, r8, r0, r2
 8100778:	4544      	cmp	r4, r8
 810077a:	46cc      	mov	ip, r9
 810077c:	4643      	mov	r3, r8
 810077e:	d302      	bcc.n	8100786 <__udivmoddi4+0x1fe>
 8100780:	d106      	bne.n	8100790 <__udivmoddi4+0x208>
 8100782:	45ce      	cmp	lr, r9
 8100784:	d204      	bcs.n	8100790 <__udivmoddi4+0x208>
 8100786:	3801      	subs	r0, #1
 8100788:	ebb9 0c02 	subs.w	ip, r9, r2
 810078c:	eb68 0307 	sbc.w	r3, r8, r7
 8100790:	b15d      	cbz	r5, 81007aa <__udivmoddi4+0x222>
 8100792:	ebbe 020c 	subs.w	r2, lr, ip
 8100796:	eb64 0403 	sbc.w	r4, r4, r3
 810079a:	fa04 f606 	lsl.w	r6, r4, r6
 810079e:	fa22 f301 	lsr.w	r3, r2, r1
 81007a2:	40cc      	lsrs	r4, r1
 81007a4:	431e      	orrs	r6, r3
 81007a6:	e9c5 6400 	strd	r6, r4, [r5]
 81007aa:	2100      	movs	r1, #0
 81007ac:	e73e      	b.n	810062c <__udivmoddi4+0xa4>
 81007ae:	fa02 fe03 	lsl.w	lr, r2, r3
 81007b2:	f1c3 0120 	rsb	r1, r3, #32
 81007b6:	fa04 f203 	lsl.w	r2, r4, r3
 81007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 81007be:	40cc      	lsrs	r4, r1
 81007c0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 81007c4:	fa20 f101 	lsr.w	r1, r0, r1
 81007c8:	fa1f f68e 	uxth.w	r6, lr
 81007cc:	fbb4 f0f7 	udiv	r0, r4, r7
 81007d0:	430a      	orrs	r2, r1
 81007d2:	fb07 4410 	mls	r4, r7, r0, r4
 81007d6:	0c11      	lsrs	r1, r2, #16
 81007d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 81007dc:	fb00 f406 	mul.w	r4, r0, r6
 81007e0:	428c      	cmp	r4, r1
 81007e2:	d90e      	bls.n	8100802 <__udivmoddi4+0x27a>
 81007e4:	eb1e 0101 	adds.w	r1, lr, r1
 81007e8:	f100 38ff 	add.w	r8, r0, #4294967295
 81007ec:	bf2c      	ite	cs
 81007ee:	f04f 0901 	movcs.w	r9, #1
 81007f2:	f04f 0900 	movcc.w	r9, #0
 81007f6:	428c      	cmp	r4, r1
 81007f8:	d902      	bls.n	8100800 <__udivmoddi4+0x278>
 81007fa:	f1b9 0f00 	cmp.w	r9, #0
 81007fe:	d02c      	beq.n	810085a <__udivmoddi4+0x2d2>
 8100800:	4640      	mov	r0, r8
 8100802:	1b09      	subs	r1, r1, r4
 8100804:	b292      	uxth	r2, r2
 8100806:	fbb1 f4f7 	udiv	r4, r1, r7
 810080a:	fb07 1114 	mls	r1, r7, r4, r1
 810080e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8100812:	fb04 f106 	mul.w	r1, r4, r6
 8100816:	4291      	cmp	r1, r2
 8100818:	d907      	bls.n	810082a <__udivmoddi4+0x2a2>
 810081a:	eb1e 0202 	adds.w	r2, lr, r2
 810081e:	f104 38ff 	add.w	r8, r4, #4294967295
 8100822:	d201      	bcs.n	8100828 <__udivmoddi4+0x2a0>
 8100824:	4291      	cmp	r1, r2
 8100826:	d815      	bhi.n	8100854 <__udivmoddi4+0x2cc>
 8100828:	4644      	mov	r4, r8
 810082a:	1a52      	subs	r2, r2, r1
 810082c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8100830:	e721      	b.n	8100676 <__udivmoddi4+0xee>
 8100832:	1a86      	subs	r6, r0, r2
 8100834:	eb64 0303 	sbc.w	r3, r4, r3
 8100838:	2001      	movs	r0, #1
 810083a:	e70e      	b.n	810065a <__udivmoddi4+0xd2>
 810083c:	3c02      	subs	r4, #2
 810083e:	4472      	add	r2, lr
 8100840:	e735      	b.n	81006ae <__udivmoddi4+0x126>
 8100842:	3902      	subs	r1, #2
 8100844:	4472      	add	r2, lr
 8100846:	e6d0      	b.n	81005ea <__udivmoddi4+0x62>
 8100848:	44f4      	add	ip, lr
 810084a:	3802      	subs	r0, #2
 810084c:	e6e3      	b.n	8100616 <__udivmoddi4+0x8e>
 810084e:	44f4      	add	ip, lr
 8100850:	3802      	subs	r0, #2
 8100852:	e742      	b.n	81006da <__udivmoddi4+0x152>
 8100854:	3c02      	subs	r4, #2
 8100856:	4472      	add	r2, lr
 8100858:	e7e7      	b.n	810082a <__udivmoddi4+0x2a2>
 810085a:	3802      	subs	r0, #2
 810085c:	4471      	add	r1, lr
 810085e:	e7d0      	b.n	8100802 <__udivmoddi4+0x27a>
 8100860:	3b02      	subs	r3, #2
 8100862:	443c      	add	r4, r7
 8100864:	e782      	b.n	810076c <__udivmoddi4+0x1e4>
 8100866:	3802      	subs	r0, #2
 8100868:	443c      	add	r4, r7
 810086a:	e76a      	b.n	8100742 <__udivmoddi4+0x1ba>

0810086c <__aeabi_idiv0>:
 810086c:	4770      	bx	lr
 810086e:	bf00      	nop

08100870 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8100870:	b580      	push	{r7, lr}
 8100872:	b086      	sub	sp, #24
 8100874:	af02      	add	r7, sp, #8
 8100876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8100878:	2300      	movs	r3, #0
 810087a:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 810087c:	2334      	movs	r3, #52	@ 0x34
 810087e:	9300      	str	r3, [sp, #0]
 8100880:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8100884:	4a16      	ldr	r2, [pc, #88]	@ (81008e0 <tx_application_define+0x70>)
 8100886:	4917      	ldr	r1, [pc, #92]	@ (81008e4 <tx_application_define+0x74>)
 8100888:	4817      	ldr	r0, [pc, #92]	@ (81008e8 <tx_application_define+0x78>)
 810088a:	f015 fe99 	bl	81165c0 <_txe_byte_pool_create>
 810088e:	4603      	mov	r3, r0
 8100890:	2b00      	cmp	r3, #0
 8100892:	d10a      	bne.n	81008aa <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8100894:	4b14      	ldr	r3, [pc, #80]	@ (81008e8 <tx_application_define+0x78>)
 8100896:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8100898:	68b8      	ldr	r0, [r7, #8]
 810089a:	f000 f82d 	bl	81008f8 <App_ThreadX_Init>
 810089e:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 81008a0:	68fb      	ldr	r3, [r7, #12]
 81008a2:	2b00      	cmp	r3, #0
 81008a4:	d001      	beq.n	81008aa <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 81008a6:	bf00      	nop
 81008a8:	e7fd      	b.n	81008a6 <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&nx_app_byte_pool, "Nx App memory pool", nx_byte_pool_buffer, NX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 81008aa:	2334      	movs	r3, #52	@ 0x34
 81008ac:	9300      	str	r3, [sp, #0]
 81008ae:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 81008b2:	4a0e      	ldr	r2, [pc, #56]	@ (81008ec <tx_application_define+0x7c>)
 81008b4:	490e      	ldr	r1, [pc, #56]	@ (81008f0 <tx_application_define+0x80>)
 81008b6:	480f      	ldr	r0, [pc, #60]	@ (81008f4 <tx_application_define+0x84>)
 81008b8:	f015 fe82 	bl	81165c0 <_txe_byte_pool_create>
 81008bc:	4603      	mov	r3, r0
 81008be:	2b00      	cmp	r3, #0
 81008c0:	d10a      	bne.n	81008d8 <tx_application_define+0x68>
  {
    /* USER CODE BEGIN NX_Byte_Pool_Success */

    /* USER CODE END NX_Byte_Pool_Success */

    memory_ptr = (VOID *)&nx_app_byte_pool;
 81008c2:	4b0c      	ldr	r3, [pc, #48]	@ (81008f4 <tx_application_define+0x84>)
 81008c4:	60bb      	str	r3, [r7, #8]
    status = MX_NetXDuo_Init(memory_ptr);
 81008c6:	68b8      	ldr	r0, [r7, #8]
 81008c8:	f016 f80c 	bl	81168e4 <MX_NetXDuo_Init>
 81008cc:	60f8      	str	r0, [r7, #12]
    if (status != NX_SUCCESS)
 81008ce:	68fb      	ldr	r3, [r7, #12]
 81008d0:	2b00      	cmp	r3, #0
 81008d2:	d001      	beq.n	81008d8 <tx_application_define+0x68>
    {
      /* USER CODE BEGIN  MX_NetXDuo_Init_Error */
      while(1)
 81008d4:	bf00      	nop
 81008d6:	e7fd      	b.n	81008d4 <tx_application_define+0x64>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 81008d8:	bf00      	nop
 81008da:	3710      	adds	r7, #16
 81008dc:	46bd      	mov	sp, r7
 81008de:	bd80      	pop	{r7, pc}
 81008e0:	20057904 	.word	0x20057904
 81008e4:	08117cf8 	.word	0x08117cf8
 81008e8:	20057d04 	.word	0x20057d04
 81008ec:	200500e8 	.word	0x200500e8
 81008f0:	08117d0c 	.word	0x08117d0c
 81008f4:	20057d38 	.word	0x20057d38

081008f8 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 81008f8:	b480      	push	{r7}
 81008fa:	b085      	sub	sp, #20
 81008fc:	af00      	add	r7, sp, #0
 81008fe:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8100900:	2300      	movs	r3, #0
 8100902:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8100904:	68fb      	ldr	r3, [r7, #12]
}
 8100906:	4618      	mov	r0, r3
 8100908:	3714      	adds	r7, #20
 810090a:	46bd      	mov	sp, r7
 810090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100910:	4770      	bx	lr

08100912 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8100912:	b580      	push	{r7, lr}
 8100914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8100916:	f013 ffed 	bl	81148f4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 810091a:	bf00      	nop
 810091c:	bd80      	pop	{r7, pc}
	...

08100920 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int __io_putchar(int ch)
{
 8100920:	b580      	push	{r7, lr}
 8100922:	b082      	sub	sp, #8
 8100924:	af00      	add	r7, sp, #0
 8100926:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8100928:	1d39      	adds	r1, r7, #4
 810092a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 810092e:	2201      	movs	r2, #1
 8100930:	4803      	ldr	r0, [pc, #12]	@ (8100940 <__io_putchar+0x20>)
 8100932:	f009 fa49 	bl	8109dc8 <HAL_UART_Transmit>

  return ch;
 8100936:	687b      	ldr	r3, [r7, #4]
}
 8100938:	4618      	mov	r0, r3
 810093a:	3708      	adds	r7, #8
 810093c:	46bd      	mov	sp, r7
 810093e:	bd80      	pop	{r7, pc}
 8100940:	20057f14 	.word	0x20057f14

08100944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100944:	b580      	push	{r7, lr}
 8100946:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100948:	f000 fd74 	bl	8101434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 810094c:	f000 f80a 	bl	8100964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100950:	f000 f906 	bl	8100b60 <MX_GPIO_Init>
  MX_ETH_Init();
 8100954:	f000 f86c 	bl	8100a30 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8100958:	f000 f8b6 	bl	8100ac8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 810095c:	f7ff ffd9 	bl	8100912 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100960:	bf00      	nop
 8100962:	e7fd      	b.n	8100960 <main+0x1c>

08100964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8100964:	b580      	push	{r7, lr}
 8100966:	b09c      	sub	sp, #112	@ 0x70
 8100968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 810096a:	f107 0320 	add.w	r3, r7, #32
 810096e:	2250      	movs	r2, #80	@ 0x50
 8100970:	2100      	movs	r1, #0
 8100972:	4618      	mov	r0, r3
 8100974:	f016 fb78 	bl	8117068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8100978:	f107 0308 	add.w	r3, r7, #8
 810097c:	2200      	movs	r2, #0
 810097e:	601a      	str	r2, [r3, #0]
 8100980:	605a      	str	r2, [r3, #4]
 8100982:	609a      	str	r2, [r3, #8]
 8100984:	60da      	str	r2, [r3, #12]
 8100986:	611a      	str	r2, [r3, #16]
 8100988:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 810098a:	4b28      	ldr	r3, [pc, #160]	@ (8100a2c <SystemClock_Config+0xc8>)
 810098c:	691b      	ldr	r3, [r3, #16]
 810098e:	4a27      	ldr	r2, [pc, #156]	@ (8100a2c <SystemClock_Config+0xc8>)
 8100990:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8100994:	6113      	str	r3, [r2, #16]
 8100996:	4b25      	ldr	r3, [pc, #148]	@ (8100a2c <SystemClock_Config+0xc8>)
 8100998:	691b      	ldr	r3, [r3, #16]
 810099a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 810099e:	607b      	str	r3, [r7, #4]
 81009a0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 81009a2:	bf00      	nop
 81009a4:	4b21      	ldr	r3, [pc, #132]	@ (8100a2c <SystemClock_Config+0xc8>)
 81009a6:	695b      	ldr	r3, [r3, #20]
 81009a8:	f003 0308 	and.w	r3, r3, #8
 81009ac:	2b08      	cmp	r3, #8
 81009ae:	d1f9      	bne.n	81009a4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 81009b0:	2301      	movs	r3, #1
 81009b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 81009b4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 81009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 81009ba:	2302      	movs	r3, #2
 81009bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 81009be:	2303      	movs	r3, #3
 81009c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 81009c2:	2304      	movs	r3, #4
 81009c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 81009c6:	23fa      	movs	r3, #250	@ 0xfa
 81009c8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 81009ca:	2302      	movs	r3, #2
 81009cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 81009ce:	2302      	movs	r3, #2
 81009d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 81009d2:	2302      	movs	r3, #2
 81009d4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 81009d6:	2304      	movs	r3, #4
 81009d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 81009da:	2300      	movs	r3, #0
 81009dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 81009de:	2300      	movs	r3, #0
 81009e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 81009e2:	f107 0320 	add.w	r3, r7, #32
 81009e6:	4618      	mov	r0, r3
 81009e8:	f002 fda2 	bl	8103530 <HAL_RCC_OscConfig>
 81009ec:	4603      	mov	r3, r0
 81009ee:	2b00      	cmp	r3, #0
 81009f0:	d001      	beq.n	81009f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 81009f2:	f000 f91d 	bl	8100c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 81009f6:	231f      	movs	r3, #31
 81009f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 81009fa:	2303      	movs	r3, #3
 81009fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 81009fe:	2300      	movs	r3, #0
 8100a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8100a02:	2300      	movs	r3, #0
 8100a04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8100a06:	2300      	movs	r3, #0
 8100a08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8100a0a:	2300      	movs	r3, #0
 8100a0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8100a0e:	f107 0308 	add.w	r3, r7, #8
 8100a12:	2105      	movs	r1, #5
 8100a14:	4618      	mov	r0, r3
 8100a16:	f003 f9c3 	bl	8103da0 <HAL_RCC_ClockConfig>
 8100a1a:	4603      	mov	r3, r0
 8100a1c:	2b00      	cmp	r3, #0
 8100a1e:	d001      	beq.n	8100a24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8100a20:	f000 f906 	bl	8100c30 <Error_Handler>
  }
}
 8100a24:	bf00      	nop
 8100a26:	3770      	adds	r7, #112	@ 0x70
 8100a28:	46bd      	mov	sp, r7
 8100a2a:	bd80      	pop	{r7, pc}
 8100a2c:	44020800 	.word	0x44020800

08100a30 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8100a30:	b580      	push	{r7, lr}
 8100a32:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8100a34:	4b1e      	ldr	r3, [pc, #120]	@ (8100ab0 <MX_ETH_Init+0x80>)
 8100a36:	4a1f      	ldr	r2, [pc, #124]	@ (8100ab4 <MX_ETH_Init+0x84>)
 8100a38:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8100a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8100ab8 <MX_ETH_Init+0x88>)
 8100a3c:	2200      	movs	r2, #0
 8100a3e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8100a40:	4b1d      	ldr	r3, [pc, #116]	@ (8100ab8 <MX_ETH_Init+0x88>)
 8100a42:	2280      	movs	r2, #128	@ 0x80
 8100a44:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8100a46:	4b1c      	ldr	r3, [pc, #112]	@ (8100ab8 <MX_ETH_Init+0x88>)
 8100a48:	22e1      	movs	r2, #225	@ 0xe1
 8100a4a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8100a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8100ab8 <MX_ETH_Init+0x88>)
 8100a4e:	2200      	movs	r2, #0
 8100a50:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8100a52:	4b19      	ldr	r3, [pc, #100]	@ (8100ab8 <MX_ETH_Init+0x88>)
 8100a54:	2200      	movs	r2, #0
 8100a56:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8100a58:	4b17      	ldr	r3, [pc, #92]	@ (8100ab8 <MX_ETH_Init+0x88>)
 8100a5a:	2200      	movs	r2, #0
 8100a5c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8100a5e:	4b14      	ldr	r3, [pc, #80]	@ (8100ab0 <MX_ETH_Init+0x80>)
 8100a60:	4a15      	ldr	r2, [pc, #84]	@ (8100ab8 <MX_ETH_Init+0x88>)
 8100a62:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8100a64:	4b12      	ldr	r3, [pc, #72]	@ (8100ab0 <MX_ETH_Init+0x80>)
 8100a66:	2201      	movs	r2, #1
 8100a68:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8100a6a:	4b11      	ldr	r3, [pc, #68]	@ (8100ab0 <MX_ETH_Init+0x80>)
 8100a6c:	4a13      	ldr	r2, [pc, #76]	@ (8100abc <MX_ETH_Init+0x8c>)
 8100a6e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8100a70:	4b0f      	ldr	r3, [pc, #60]	@ (8100ab0 <MX_ETH_Init+0x80>)
 8100a72:	4a13      	ldr	r2, [pc, #76]	@ (8100ac0 <MX_ETH_Init+0x90>)
 8100a74:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8100a76:	4b0e      	ldr	r3, [pc, #56]	@ (8100ab0 <MX_ETH_Init+0x80>)
 8100a78:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8100a7c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8100a7e:	480c      	ldr	r0, [pc, #48]	@ (8100ab0 <MX_ETH_Init+0x80>)
 8100a80:	f000 fe6e 	bl	8101760 <HAL_ETH_Init>
 8100a84:	4603      	mov	r3, r0
 8100a86:	2b00      	cmp	r3, #0
 8100a88:	d001      	beq.n	8100a8e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8100a8a:	f000 f8d1 	bl	8100c30 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfigTypeDef));
 8100a8e:	2238      	movs	r2, #56	@ 0x38
 8100a90:	2100      	movs	r1, #0
 8100a92:	480c      	ldr	r0, [pc, #48]	@ (8100ac4 <MX_ETH_Init+0x94>)
 8100a94:	f016 fae8 	bl	8117068 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8100a98:	4b0a      	ldr	r3, [pc, #40]	@ (8100ac4 <MX_ETH_Init+0x94>)
 8100a9a:	2221      	movs	r2, #33	@ 0x21
 8100a9c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8100a9e:	4b09      	ldr	r3, [pc, #36]	@ (8100ac4 <MX_ETH_Init+0x94>)
 8100aa0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8100aa4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8100aa6:	4b07      	ldr	r3, [pc, #28]	@ (8100ac4 <MX_ETH_Init+0x94>)
 8100aa8:	2200      	movs	r2, #0
 8100aaa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8100aac:	bf00      	nop
 8100aae:	bd80      	pop	{r7, pc}
 8100ab0:	20057e64 	.word	0x20057e64
 8100ab4:	40028000 	.word	0x40028000
 8100ab8:	20057fa8 	.word	0x20057fa8
 8100abc:	20057e04 	.word	0x20057e04
 8100ac0:	20057da4 	.word	0x20057da4
 8100ac4:	20057d6c 	.word	0x20057d6c

08100ac8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8100ac8:	b580      	push	{r7, lr}
 8100aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8100acc:	4b22      	ldr	r3, [pc, #136]	@ (8100b58 <MX_USART3_UART_Init+0x90>)
 8100ace:	4a23      	ldr	r2, [pc, #140]	@ (8100b5c <MX_USART3_UART_Init+0x94>)
 8100ad0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8100ad2:	4b21      	ldr	r3, [pc, #132]	@ (8100b58 <MX_USART3_UART_Init+0x90>)
 8100ad4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8100ad8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100ada:	4b1f      	ldr	r3, [pc, #124]	@ (8100b58 <MX_USART3_UART_Init+0x90>)
 8100adc:	2200      	movs	r2, #0
 8100ade:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8100b58 <MX_USART3_UART_Init+0x90>)
 8100ae2:	2200      	movs	r2, #0
 8100ae4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8100b58 <MX_USART3_UART_Init+0x90>)
 8100ae8:	2200      	movs	r2, #0
 8100aea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100aec:	4b1a      	ldr	r3, [pc, #104]	@ (8100b58 <MX_USART3_UART_Init+0x90>)
 8100aee:	220c      	movs	r2, #12
 8100af0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100af2:	4b19      	ldr	r3, [pc, #100]	@ (8100b58 <MX_USART3_UART_Init+0x90>)
 8100af4:	2200      	movs	r2, #0
 8100af6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100af8:	4b17      	ldr	r3, [pc, #92]	@ (8100b58 <MX_USART3_UART_Init+0x90>)
 8100afa:	2200      	movs	r2, #0
 8100afc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100afe:	4b16      	ldr	r3, [pc, #88]	@ (8100b58 <MX_USART3_UART_Init+0x90>)
 8100b00:	2200      	movs	r2, #0
 8100b02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100b04:	4b14      	ldr	r3, [pc, #80]	@ (8100b58 <MX_USART3_UART_Init+0x90>)
 8100b06:	2200      	movs	r2, #0
 8100b08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100b0a:	4b13      	ldr	r3, [pc, #76]	@ (8100b58 <MX_USART3_UART_Init+0x90>)
 8100b0c:	2200      	movs	r2, #0
 8100b0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100b10:	4811      	ldr	r0, [pc, #68]	@ (8100b58 <MX_USART3_UART_Init+0x90>)
 8100b12:	f009 f909 	bl	8109d28 <HAL_UART_Init>
 8100b16:	4603      	mov	r3, r0
 8100b18:	2b00      	cmp	r3, #0
 8100b1a:	d001      	beq.n	8100b20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8100b1c:	f000 f888 	bl	8100c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100b20:	2100      	movs	r1, #0
 8100b22:	480d      	ldr	r0, [pc, #52]	@ (8100b58 <MX_USART3_UART_Init+0x90>)
 8100b24:	f009 fe34 	bl	810a790 <HAL_UARTEx_SetTxFifoThreshold>
 8100b28:	4603      	mov	r3, r0
 8100b2a:	2b00      	cmp	r3, #0
 8100b2c:	d001      	beq.n	8100b32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8100b2e:	f000 f87f 	bl	8100c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100b32:	2100      	movs	r1, #0
 8100b34:	4808      	ldr	r0, [pc, #32]	@ (8100b58 <MX_USART3_UART_Init+0x90>)
 8100b36:	f009 fe69 	bl	810a80c <HAL_UARTEx_SetRxFifoThreshold>
 8100b3a:	4603      	mov	r3, r0
 8100b3c:	2b00      	cmp	r3, #0
 8100b3e:	d001      	beq.n	8100b44 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100b40:	f000 f876 	bl	8100c30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100b44:	4804      	ldr	r0, [pc, #16]	@ (8100b58 <MX_USART3_UART_Init+0x90>)
 8100b46:	f009 fdea 	bl	810a71e <HAL_UARTEx_DisableFifoMode>
 8100b4a:	4603      	mov	r3, r0
 8100b4c:	2b00      	cmp	r3, #0
 8100b4e:	d001      	beq.n	8100b54 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100b50:	f000 f86e 	bl	8100c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100b54:	bf00      	nop
 8100b56:	bd80      	pop	{r7, pc}
 8100b58:	20057f14 	.word	0x20057f14
 8100b5c:	40004800 	.word	0x40004800

08100b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100b60:	b480      	push	{r7}
 8100b62:	b087      	sub	sp, #28
 8100b64:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100b66:	4b28      	ldr	r3, [pc, #160]	@ (8100c08 <MX_GPIO_Init+0xa8>)
 8100b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100b6c:	4a26      	ldr	r2, [pc, #152]	@ (8100c08 <MX_GPIO_Init+0xa8>)
 8100b6e:	f043 0304 	orr.w	r3, r3, #4
 8100b72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8100b76:	4b24      	ldr	r3, [pc, #144]	@ (8100c08 <MX_GPIO_Init+0xa8>)
 8100b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100b7c:	f003 0304 	and.w	r3, r3, #4
 8100b80:	617b      	str	r3, [r7, #20]
 8100b82:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100b84:	4b20      	ldr	r3, [pc, #128]	@ (8100c08 <MX_GPIO_Init+0xa8>)
 8100b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8100c08 <MX_GPIO_Init+0xa8>)
 8100b8c:	f043 0301 	orr.w	r3, r3, #1
 8100b90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8100b94:	4b1c      	ldr	r3, [pc, #112]	@ (8100c08 <MX_GPIO_Init+0xa8>)
 8100b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100b9a:	f003 0301 	and.w	r3, r3, #1
 8100b9e:	613b      	str	r3, [r7, #16]
 8100ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100ba2:	4b19      	ldr	r3, [pc, #100]	@ (8100c08 <MX_GPIO_Init+0xa8>)
 8100ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100ba8:	4a17      	ldr	r2, [pc, #92]	@ (8100c08 <MX_GPIO_Init+0xa8>)
 8100baa:	f043 0302 	orr.w	r3, r3, #2
 8100bae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8100bb2:	4b15      	ldr	r3, [pc, #84]	@ (8100c08 <MX_GPIO_Init+0xa8>)
 8100bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100bb8:	f003 0302 	and.w	r3, r3, #2
 8100bbc:	60fb      	str	r3, [r7, #12]
 8100bbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100bc0:	4b11      	ldr	r3, [pc, #68]	@ (8100c08 <MX_GPIO_Init+0xa8>)
 8100bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100bc6:	4a10      	ldr	r2, [pc, #64]	@ (8100c08 <MX_GPIO_Init+0xa8>)
 8100bc8:	f043 0308 	orr.w	r3, r3, #8
 8100bcc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8100bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8100c08 <MX_GPIO_Init+0xa8>)
 8100bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100bd6:	f003 0308 	and.w	r3, r3, #8
 8100bda:	60bb      	str	r3, [r7, #8]
 8100bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100bde:	4b0a      	ldr	r3, [pc, #40]	@ (8100c08 <MX_GPIO_Init+0xa8>)
 8100be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100be4:	4a08      	ldr	r2, [pc, #32]	@ (8100c08 <MX_GPIO_Init+0xa8>)
 8100be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100bea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8100bee:	4b06      	ldr	r3, [pc, #24]	@ (8100c08 <MX_GPIO_Init+0xa8>)
 8100bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8100bf8:	607b      	str	r3, [r7, #4]
 8100bfa:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8100bfc:	bf00      	nop
 8100bfe:	371c      	adds	r7, #28
 8100c00:	46bd      	mov	sp, r7
 8100c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c06:	4770      	bx	lr
 8100c08:	44020c00 	.word	0x44020c00

08100c0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100c0c:	b580      	push	{r7, lr}
 8100c0e:	b082      	sub	sp, #8
 8100c10:	af00      	add	r7, sp, #0
 8100c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8100c14:	687b      	ldr	r3, [r7, #4]
 8100c16:	681b      	ldr	r3, [r3, #0]
 8100c18:	4a04      	ldr	r2, [pc, #16]	@ (8100c2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8100c1a:	4293      	cmp	r3, r2
 8100c1c:	d101      	bne.n	8100c22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8100c1e:	f000 fc31 	bl	8101484 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100c22:	bf00      	nop
 8100c24:	3708      	adds	r7, #8
 8100c26:	46bd      	mov	sp, r7
 8100c28:	bd80      	pop	{r7, pc}
 8100c2a:	bf00      	nop
 8100c2c:	40001000 	.word	0x40001000

08100c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100c30:	b480      	push	{r7}
 8100c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100c34:	b672      	cpsid	i
}
 8100c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100c38:	bf00      	nop
 8100c3a:	e7fd      	b.n	8100c38 <Error_Handler+0x8>

08100c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100c3c:	b480      	push	{r7}
 8100c3e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100c40:	bf00      	nop
 8100c42:	46bd      	mov	sp, r7
 8100c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c48:	4770      	bx	lr
	...

08100c4c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8100c4c:	b580      	push	{r7, lr}
 8100c4e:	b08e      	sub	sp, #56	@ 0x38
 8100c50:	af00      	add	r7, sp, #0
 8100c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100c58:	2200      	movs	r2, #0
 8100c5a:	601a      	str	r2, [r3, #0]
 8100c5c:	605a      	str	r2, [r3, #4]
 8100c5e:	609a      	str	r2, [r3, #8]
 8100c60:	60da      	str	r2, [r3, #12]
 8100c62:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8100c64:	687b      	ldr	r3, [r7, #4]
 8100c66:	681b      	ldr	r3, [r3, #0]
 8100c68:	4a5d      	ldr	r2, [pc, #372]	@ (8100de0 <HAL_ETH_MspInit+0x194>)
 8100c6a:	4293      	cmp	r3, r2
 8100c6c:	f040 80b3 	bne.w	8100dd6 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8100c70:	4b5c      	ldr	r3, [pc, #368]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100c76:	4a5b      	ldr	r2, [pc, #364]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100c78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8100c7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8100c80:	4b58      	ldr	r3, [pc, #352]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100c86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8100c8a:	623b      	str	r3, [r7, #32]
 8100c8c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8100c8e:	4b55      	ldr	r3, [pc, #340]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100c94:	4a53      	ldr	r2, [pc, #332]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100c9a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8100c9e:	4b51      	ldr	r3, [pc, #324]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100ca4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8100ca8:	61fb      	str	r3, [r7, #28]
 8100caa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8100cac:	4b4d      	ldr	r3, [pc, #308]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100cb2:	4a4c      	ldr	r2, [pc, #304]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100cb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8100cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8100cbc:	4b49      	ldr	r3, [pc, #292]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100cc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8100cc6:	61bb      	str	r3, [r7, #24]
 8100cc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8100cca:	4b46      	ldr	r3, [pc, #280]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100cd0:	4a44      	ldr	r2, [pc, #272]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100cd2:	f043 0304 	orr.w	r3, r3, #4
 8100cd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8100cda:	4b42      	ldr	r3, [pc, #264]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100ce0:	f003 0304 	and.w	r3, r3, #4
 8100ce4:	617b      	str	r3, [r7, #20]
 8100ce6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100cee:	4a3d      	ldr	r2, [pc, #244]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100cf0:	f043 0301 	orr.w	r3, r3, #1
 8100cf4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8100cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100cfe:	f003 0301 	and.w	r3, r3, #1
 8100d02:	613b      	str	r3, [r7, #16]
 8100d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100d06:	4b37      	ldr	r3, [pc, #220]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100d0c:	4a35      	ldr	r2, [pc, #212]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100d0e:	f043 0302 	orr.w	r3, r3, #2
 8100d12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8100d16:	4b33      	ldr	r3, [pc, #204]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100d1c:	f003 0302 	and.w	r3, r3, #2
 8100d20:	60fb      	str	r3, [r7, #12]
 8100d22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8100d24:	4b2f      	ldr	r3, [pc, #188]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100d2a:	4a2e      	ldr	r2, [pc, #184]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100d2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100d30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8100d34:	4b2b      	ldr	r3, [pc, #172]	@ (8100de4 <HAL_ETH_MspInit+0x198>)
 8100d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8100d3e:	60bb      	str	r3, [r7, #8]
 8100d40:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB15     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8100d42:	2332      	movs	r3, #50	@ 0x32
 8100d44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d46:	2302      	movs	r3, #2
 8100d48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d4a:	2300      	movs	r3, #0
 8100d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100d4e:	2303      	movs	r3, #3
 8100d50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100d52:	230b      	movs	r3, #11
 8100d54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8100d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100d5a:	4619      	mov	r1, r3
 8100d5c:	4822      	ldr	r0, [pc, #136]	@ (8100de8 <HAL_ETH_MspInit+0x19c>)
 8100d5e:	f002 fa95 	bl	810328c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8100d62:	2386      	movs	r3, #134	@ 0x86
 8100d64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d66:	2302      	movs	r3, #2
 8100d68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d6a:	2300      	movs	r3, #0
 8100d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100d6e:	2303      	movs	r3, #3
 8100d70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100d72:	230b      	movs	r3, #11
 8100d74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100d76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100d7a:	4619      	mov	r1, r3
 8100d7c:	481b      	ldr	r0, [pc, #108]	@ (8100dec <HAL_ETH_MspInit+0x1a0>)
 8100d7e:	f002 fa85 	bl	810328c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8100d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8100d86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d88:	2302      	movs	r3, #2
 8100d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d8c:	2300      	movs	r3, #0
 8100d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100d90:	2303      	movs	r3, #3
 8100d92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100d94:	230b      	movs	r3, #11
 8100d96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100d9c:	4619      	mov	r1, r3
 8100d9e:	4814      	ldr	r0, [pc, #80]	@ (8100df0 <HAL_ETH_MspInit+0x1a4>)
 8100da0:	f002 fa74 	bl	810328c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8100da4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8100da8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100daa:	2302      	movs	r3, #2
 8100dac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100dae:	2300      	movs	r3, #0
 8100db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100db2:	2303      	movs	r3, #3
 8100db4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100db6:	230b      	movs	r3, #11
 8100db8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100dbe:	4619      	mov	r1, r3
 8100dc0:	480c      	ldr	r0, [pc, #48]	@ (8100df4 <HAL_ETH_MspInit+0x1a8>)
 8100dc2:	f002 fa63 	bl	810328c <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 8100dc6:	2200      	movs	r2, #0
 8100dc8:	2107      	movs	r1, #7
 8100dca:	206a      	movs	r0, #106	@ 0x6a
 8100dcc:	f000 fc48 	bl	8101660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8100dd0:	206a      	movs	r0, #106	@ 0x6a
 8100dd2:	f000 fc5f 	bl	8101694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8100dd6:	bf00      	nop
 8100dd8:	3738      	adds	r7, #56	@ 0x38
 8100dda:	46bd      	mov	sp, r7
 8100ddc:	bd80      	pop	{r7, pc}
 8100dde:	bf00      	nop
 8100de0:	40028000 	.word	0x40028000
 8100de4:	44020c00 	.word	0x44020c00
 8100de8:	42020800 	.word	0x42020800
 8100dec:	42020000 	.word	0x42020000
 8100df0:	42020400 	.word	0x42020400
 8100df4:	42021800 	.word	0x42021800

08100df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8100df8:	b580      	push	{r7, lr}
 8100dfa:	b0cc      	sub	sp, #304	@ 0x130
 8100dfc:	af00      	add	r7, sp, #0
 8100dfe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8100e02:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8100e06:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100e08:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8100e0c:	2200      	movs	r2, #0
 8100e0e:	601a      	str	r2, [r3, #0]
 8100e10:	605a      	str	r2, [r3, #4]
 8100e12:	609a      	str	r2, [r3, #8]
 8100e14:	60da      	str	r2, [r3, #12]
 8100e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100e18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8100e1c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8100e20:	4618      	mov	r0, r3
 8100e22:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8100e26:	461a      	mov	r2, r3
 8100e28:	2100      	movs	r1, #0
 8100e2a:	f016 f91d 	bl	8117068 <memset>
  if(huart->Instance==USART3)
 8100e2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8100e32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8100e36:	681b      	ldr	r3, [r3, #0]
 8100e38:	681b      	ldr	r3, [r3, #0]
 8100e3a:	4a33      	ldr	r2, [pc, #204]	@ (8100f08 <HAL_UART_MspInit+0x110>)
 8100e3c:	4293      	cmp	r3, r2
 8100e3e:	d15d      	bne.n	8100efc <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8100e40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8100e44:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8100e48:	f04f 0204 	mov.w	r2, #4
 8100e4c:	f04f 0300 	mov.w	r3, #0
 8100e50:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8100e54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8100e58:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8100e5c:	2200      	movs	r2, #0
 8100e5e:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100e60:	f107 0310 	add.w	r3, r7, #16
 8100e64:	4618      	mov	r0, r3
 8100e66:	f003 fb15 	bl	8104494 <HAL_RCCEx_PeriphCLKConfig>
 8100e6a:	4603      	mov	r3, r0
 8100e6c:	2b00      	cmp	r3, #0
 8100e6e:	d001      	beq.n	8100e74 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8100e70:	f7ff fede 	bl	8100c30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8100e74:	4b25      	ldr	r3, [pc, #148]	@ (8100f0c <HAL_UART_MspInit+0x114>)
 8100e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8100e7a:	4a24      	ldr	r2, [pc, #144]	@ (8100f0c <HAL_UART_MspInit+0x114>)
 8100e7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8100e80:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8100e84:	4b21      	ldr	r3, [pc, #132]	@ (8100f0c <HAL_UART_MspInit+0x114>)
 8100e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8100e8a:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8100e8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8100e92:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8100e96:	601a      	str	r2, [r3, #0]
 8100e98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8100e9c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8100ea0:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8100f0c <HAL_UART_MspInit+0x114>)
 8100ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100ea8:	4a18      	ldr	r2, [pc, #96]	@ (8100f0c <HAL_UART_MspInit+0x114>)
 8100eaa:	f043 0308 	orr.w	r3, r3, #8
 8100eae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8100eb2:	4b16      	ldr	r3, [pc, #88]	@ (8100f0c <HAL_UART_MspInit+0x114>)
 8100eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100eb8:	f003 0208 	and.w	r2, r3, #8
 8100ebc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8100ec0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8100ec4:	601a      	str	r2, [r3, #0]
 8100ec6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8100eca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8100ece:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8100ed0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8100ed4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100ed8:	2302      	movs	r3, #2
 8100eda:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100ede:	2300      	movs	r3, #0
 8100ee0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100ee4:	2300      	movs	r3, #0
 8100ee6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8100eea:	2307      	movs	r3, #7
 8100eec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100ef0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8100ef4:	4619      	mov	r1, r3
 8100ef6:	4806      	ldr	r0, [pc, #24]	@ (8100f10 <HAL_UART_MspInit+0x118>)
 8100ef8:	f002 f9c8 	bl	810328c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8100efc:	bf00      	nop
 8100efe:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8100f02:	46bd      	mov	sp, r7
 8100f04:	bd80      	pop	{r7, pc}
 8100f06:	bf00      	nop
 8100f08:	40004800 	.word	0x40004800
 8100f0c:	44020c00 	.word	0x44020c00
 8100f10:	42020c00 	.word	0x42020c00

08100f14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100f14:	b580      	push	{r7, lr}
 8100f16:	b08e      	sub	sp, #56	@ 0x38
 8100f18:	af00      	add	r7, sp, #0
 8100f1a:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8100f1c:	4b33      	ldr	r3, [pc, #204]	@ (8100fec <HAL_InitTick+0xd8>)
 8100f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8100f22:	4a32      	ldr	r2, [pc, #200]	@ (8100fec <HAL_InitTick+0xd8>)
 8100f24:	f043 0310 	orr.w	r3, r3, #16
 8100f28:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8100f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8100fec <HAL_InitTick+0xd8>)
 8100f2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8100f32:	f003 0310 	and.w	r3, r3, #16
 8100f36:	60bb      	str	r3, [r7, #8]
 8100f38:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8100f3a:	f107 020c 	add.w	r2, r7, #12
 8100f3e:	f107 0310 	add.w	r3, r7, #16
 8100f42:	4611      	mov	r1, r2
 8100f44:	4618      	mov	r0, r3
 8100f46:	f003 fa6d 	bl	8104424 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8100f4a:	69fb      	ldr	r3, [r7, #28]
 8100f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8100f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8100f50:	2b00      	cmp	r3, #0
 8100f52:	d103      	bne.n	8100f5c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8100f54:	f003 fa24 	bl	81043a0 <HAL_RCC_GetPCLK1Freq>
 8100f58:	6378      	str	r0, [r7, #52]	@ 0x34
 8100f5a:	e004      	b.n	8100f66 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8100f5c:	f003 fa20 	bl	81043a0 <HAL_RCC_GetPCLK1Freq>
 8100f60:	4603      	mov	r3, r0
 8100f62:	005b      	lsls	r3, r3, #1
 8100f64:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8100f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8100f68:	095b      	lsrs	r3, r3, #5
 8100f6a:	4a21      	ldr	r2, [pc, #132]	@ (8100ff0 <HAL_InitTick+0xdc>)
 8100f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8100f70:	09db      	lsrs	r3, r3, #7
 8100f72:	3b01      	subs	r3, #1
 8100f74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8100f76:	4b1f      	ldr	r3, [pc, #124]	@ (8100ff4 <HAL_InitTick+0xe0>)
 8100f78:	4a1f      	ldr	r2, [pc, #124]	@ (8100ff8 <HAL_InitTick+0xe4>)
 8100f7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8100f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8100ff4 <HAL_InitTick+0xe0>)
 8100f7e:	2263      	movs	r2, #99	@ 0x63
 8100f80:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8100f82:	4a1c      	ldr	r2, [pc, #112]	@ (8100ff4 <HAL_InitTick+0xe0>)
 8100f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100f86:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8100f88:	4b1a      	ldr	r3, [pc, #104]	@ (8100ff4 <HAL_InitTick+0xe0>)
 8100f8a:	2200      	movs	r2, #0
 8100f8c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100f8e:	4b19      	ldr	r3, [pc, #100]	@ (8100ff4 <HAL_InitTick+0xe0>)
 8100f90:	2200      	movs	r2, #0
 8100f92:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8100f94:	4817      	ldr	r0, [pc, #92]	@ (8100ff4 <HAL_InitTick+0xe0>)
 8100f96:	f008 facf 	bl	8109538 <HAL_TIM_Base_Init>
 8100f9a:	4603      	mov	r3, r0
 8100f9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8100fa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8100fa4:	2b00      	cmp	r3, #0
 8100fa6:	d118      	bne.n	8100fda <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8100fa8:	4812      	ldr	r0, [pc, #72]	@ (8100ff4 <HAL_InitTick+0xe0>)
 8100faa:	f008 fb27 	bl	81095fc <HAL_TIM_Base_Start_IT>
 8100fae:	4603      	mov	r3, r0
 8100fb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8100fb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8100fb8:	2b00      	cmp	r3, #0
 8100fba:	d10e      	bne.n	8100fda <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100fbc:	687b      	ldr	r3, [r7, #4]
 8100fbe:	2b0f      	cmp	r3, #15
 8100fc0:	d808      	bhi.n	8100fd4 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8100fc2:	2200      	movs	r2, #0
 8100fc4:	6879      	ldr	r1, [r7, #4]
 8100fc6:	2031      	movs	r0, #49	@ 0x31
 8100fc8:	f000 fb4a 	bl	8101660 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8100fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8100ffc <HAL_InitTick+0xe8>)
 8100fce:	687b      	ldr	r3, [r7, #4]
 8100fd0:	6013      	str	r3, [r2, #0]
 8100fd2:	e002      	b.n	8100fda <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8100fd4:	2301      	movs	r3, #1
 8100fd6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8100fda:	2031      	movs	r0, #49	@ 0x31
 8100fdc:	f000 fb5a 	bl	8101694 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8100fe0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8100fe4:	4618      	mov	r0, r3
 8100fe6:	3738      	adds	r7, #56	@ 0x38
 8100fe8:	46bd      	mov	sp, r7
 8100fea:	bd80      	pop	{r7, pc}
 8100fec:	44020c00 	.word	0x44020c00
 8100ff0:	0a7c5ac5 	.word	0x0a7c5ac5
 8100ff4:	20057fb0 	.word	0x20057fb0
 8100ff8:	40001000 	.word	0x40001000
 8100ffc:	20050004 	.word	0x20050004

08101000 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101000:	b480      	push	{r7}
 8101002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101004:	bf00      	nop
 8101006:	e7fd      	b.n	8101004 <MemManage_Handler+0x4>

08101008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101008:	b480      	push	{r7}
 810100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810100c:	bf00      	nop
 810100e:	e7fd      	b.n	810100c <UsageFault_Handler+0x4>

08101010 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8101010:	b580      	push	{r7, lr}
 8101012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8101014:	4802      	ldr	r0, [pc, #8]	@ (8101020 <TIM6_IRQHandler+0x10>)
 8101016:	f008 fb9f 	bl	8109758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 810101a:	bf00      	nop
 810101c:	bd80      	pop	{r7, pc}
 810101e:	bf00      	nop
 8101020:	20057fb0 	.word	0x20057fb0

08101024 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8101024:	b580      	push	{r7, lr}
 8101026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8101028:	4802      	ldr	r0, [pc, #8]	@ (8101034 <ETH_IRQHandler+0x10>)
 810102a:	f000 ff47 	bl	8101ebc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 810102e:	bf00      	nop
 8101030:	bd80      	pop	{r7, pc}
 8101032:	bf00      	nop
 8101034:	20057e64 	.word	0x20057e64

08101038 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101038:	b480      	push	{r7}
 810103a:	af00      	add	r7, sp, #0
  return 1;
 810103c:	2301      	movs	r3, #1
}
 810103e:	4618      	mov	r0, r3
 8101040:	46bd      	mov	sp, r7
 8101042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101046:	4770      	bx	lr

08101048 <_kill>:

int _kill(int pid, int sig)
{
 8101048:	b580      	push	{r7, lr}
 810104a:	b082      	sub	sp, #8
 810104c:	af00      	add	r7, sp, #0
 810104e:	6078      	str	r0, [r7, #4]
 8101050:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8101052:	f016 f857 	bl	8117104 <__errno>
 8101056:	4603      	mov	r3, r0
 8101058:	2216      	movs	r2, #22
 810105a:	601a      	str	r2, [r3, #0]
  return -1;
 810105c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101060:	4618      	mov	r0, r3
 8101062:	3708      	adds	r7, #8
 8101064:	46bd      	mov	sp, r7
 8101066:	bd80      	pop	{r7, pc}

08101068 <_exit>:

void _exit (int status)
{
 8101068:	b580      	push	{r7, lr}
 810106a:	b082      	sub	sp, #8
 810106c:	af00      	add	r7, sp, #0
 810106e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8101070:	f04f 31ff 	mov.w	r1, #4294967295
 8101074:	6878      	ldr	r0, [r7, #4]
 8101076:	f7ff ffe7 	bl	8101048 <_kill>
  while (1) {}    /* Make sure we hang here */
 810107a:	bf00      	nop
 810107c:	e7fd      	b.n	810107a <_exit+0x12>

0810107e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 810107e:	b580      	push	{r7, lr}
 8101080:	b086      	sub	sp, #24
 8101082:	af00      	add	r7, sp, #0
 8101084:	60f8      	str	r0, [r7, #12]
 8101086:	60b9      	str	r1, [r7, #8]
 8101088:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810108a:	2300      	movs	r3, #0
 810108c:	617b      	str	r3, [r7, #20]
 810108e:	e00a      	b.n	81010a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8101090:	f3af 8000 	nop.w
 8101094:	4601      	mov	r1, r0
 8101096:	68bb      	ldr	r3, [r7, #8]
 8101098:	1c5a      	adds	r2, r3, #1
 810109a:	60ba      	str	r2, [r7, #8]
 810109c:	b2ca      	uxtb	r2, r1
 810109e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81010a0:	697b      	ldr	r3, [r7, #20]
 81010a2:	3301      	adds	r3, #1
 81010a4:	617b      	str	r3, [r7, #20]
 81010a6:	697a      	ldr	r2, [r7, #20]
 81010a8:	687b      	ldr	r3, [r7, #4]
 81010aa:	429a      	cmp	r2, r3
 81010ac:	dbf0      	blt.n	8101090 <_read+0x12>
  }

  return len;
 81010ae:	687b      	ldr	r3, [r7, #4]
}
 81010b0:	4618      	mov	r0, r3
 81010b2:	3718      	adds	r7, #24
 81010b4:	46bd      	mov	sp, r7
 81010b6:	bd80      	pop	{r7, pc}

081010b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81010b8:	b580      	push	{r7, lr}
 81010ba:	b086      	sub	sp, #24
 81010bc:	af00      	add	r7, sp, #0
 81010be:	60f8      	str	r0, [r7, #12]
 81010c0:	60b9      	str	r1, [r7, #8]
 81010c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81010c4:	2300      	movs	r3, #0
 81010c6:	617b      	str	r3, [r7, #20]
 81010c8:	e009      	b.n	81010de <_write+0x26>
  {
    __io_putchar(*ptr++);
 81010ca:	68bb      	ldr	r3, [r7, #8]
 81010cc:	1c5a      	adds	r2, r3, #1
 81010ce:	60ba      	str	r2, [r7, #8]
 81010d0:	781b      	ldrb	r3, [r3, #0]
 81010d2:	4618      	mov	r0, r3
 81010d4:	f7ff fc24 	bl	8100920 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81010d8:	697b      	ldr	r3, [r7, #20]
 81010da:	3301      	adds	r3, #1
 81010dc:	617b      	str	r3, [r7, #20]
 81010de:	697a      	ldr	r2, [r7, #20]
 81010e0:	687b      	ldr	r3, [r7, #4]
 81010e2:	429a      	cmp	r2, r3
 81010e4:	dbf1      	blt.n	81010ca <_write+0x12>
  }
  return len;
 81010e6:	687b      	ldr	r3, [r7, #4]
}
 81010e8:	4618      	mov	r0, r3
 81010ea:	3718      	adds	r7, #24
 81010ec:	46bd      	mov	sp, r7
 81010ee:	bd80      	pop	{r7, pc}

081010f0 <_close>:

int _close(int file)
{
 81010f0:	b480      	push	{r7}
 81010f2:	b083      	sub	sp, #12
 81010f4:	af00      	add	r7, sp, #0
 81010f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81010f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 81010fc:	4618      	mov	r0, r3
 81010fe:	370c      	adds	r7, #12
 8101100:	46bd      	mov	sp, r7
 8101102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101106:	4770      	bx	lr

08101108 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101108:	b480      	push	{r7}
 810110a:	b083      	sub	sp, #12
 810110c:	af00      	add	r7, sp, #0
 810110e:	6078      	str	r0, [r7, #4]
 8101110:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8101112:	683b      	ldr	r3, [r7, #0]
 8101114:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101118:	605a      	str	r2, [r3, #4]
  return 0;
 810111a:	2300      	movs	r3, #0
}
 810111c:	4618      	mov	r0, r3
 810111e:	370c      	adds	r7, #12
 8101120:	46bd      	mov	sp, r7
 8101122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101126:	4770      	bx	lr

08101128 <_isatty>:

int _isatty(int file)
{
 8101128:	b480      	push	{r7}
 810112a:	b083      	sub	sp, #12
 810112c:	af00      	add	r7, sp, #0
 810112e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8101130:	2301      	movs	r3, #1
}
 8101132:	4618      	mov	r0, r3
 8101134:	370c      	adds	r7, #12
 8101136:	46bd      	mov	sp, r7
 8101138:	f85d 7b04 	ldr.w	r7, [sp], #4
 810113c:	4770      	bx	lr

0810113e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 810113e:	b480      	push	{r7}
 8101140:	b085      	sub	sp, #20
 8101142:	af00      	add	r7, sp, #0
 8101144:	60f8      	str	r0, [r7, #12]
 8101146:	60b9      	str	r1, [r7, #8]
 8101148:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 810114a:	2300      	movs	r3, #0
}
 810114c:	4618      	mov	r0, r3
 810114e:	3714      	adds	r7, #20
 8101150:	46bd      	mov	sp, r7
 8101152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101156:	4770      	bx	lr

08101158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101158:	b580      	push	{r7, lr}
 810115a:	b086      	sub	sp, #24
 810115c:	af00      	add	r7, sp, #0
 810115e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101160:	4a14      	ldr	r2, [pc, #80]	@ (81011b4 <_sbrk+0x5c>)
 8101162:	4b15      	ldr	r3, [pc, #84]	@ (81011b8 <_sbrk+0x60>)
 8101164:	1ad3      	subs	r3, r2, r3
 8101166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101168:	697b      	ldr	r3, [r7, #20]
 810116a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 810116c:	4b13      	ldr	r3, [pc, #76]	@ (81011bc <_sbrk+0x64>)
 810116e:	681b      	ldr	r3, [r3, #0]
 8101170:	2b00      	cmp	r3, #0
 8101172:	d102      	bne.n	810117a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101174:	4b11      	ldr	r3, [pc, #68]	@ (81011bc <_sbrk+0x64>)
 8101176:	4a12      	ldr	r2, [pc, #72]	@ (81011c0 <_sbrk+0x68>)
 8101178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810117a:	4b10      	ldr	r3, [pc, #64]	@ (81011bc <_sbrk+0x64>)
 810117c:	681a      	ldr	r2, [r3, #0]
 810117e:	687b      	ldr	r3, [r7, #4]
 8101180:	4413      	add	r3, r2
 8101182:	693a      	ldr	r2, [r7, #16]
 8101184:	429a      	cmp	r2, r3
 8101186:	d207      	bcs.n	8101198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101188:	f015 ffbc 	bl	8117104 <__errno>
 810118c:	4603      	mov	r3, r0
 810118e:	220c      	movs	r2, #12
 8101190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101192:	f04f 33ff 	mov.w	r3, #4294967295
 8101196:	e009      	b.n	81011ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101198:	4b08      	ldr	r3, [pc, #32]	@ (81011bc <_sbrk+0x64>)
 810119a:	681b      	ldr	r3, [r3, #0]
 810119c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810119e:	4b07      	ldr	r3, [pc, #28]	@ (81011bc <_sbrk+0x64>)
 81011a0:	681a      	ldr	r2, [r3, #0]
 81011a2:	687b      	ldr	r3, [r7, #4]
 81011a4:	4413      	add	r3, r2
 81011a6:	4a05      	ldr	r2, [pc, #20]	@ (81011bc <_sbrk+0x64>)
 81011a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81011aa:	68fb      	ldr	r3, [r7, #12]
}
 81011ac:	4618      	mov	r0, r3
 81011ae:	3718      	adds	r7, #24
 81011b0:	46bd      	mov	sp, r7
 81011b2:	bd80      	pop	{r7, pc}
 81011b4:	200a0000 	.word	0x200a0000
 81011b8:	00000400 	.word	0x00000400
 81011bc:	20057ffc 	.word	0x20057ffc
 81011c0:	200591b8 	.word	0x200591b8

081011c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 81011c4:	b480      	push	{r7}
 81011c6:	af00      	add	r7, sp, #0
  /* Nothing done in non-secure */

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 81011c8:	bf00      	nop
 81011ca:	46bd      	mov	sp, r7
 81011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011d0:	4770      	bx	lr
	...

081011d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 81011d4:	480d      	ldr	r0, [pc, #52]	@ (810120c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 81011d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 81011d8:	f7ff fff4 	bl	81011c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81011dc:	480c      	ldr	r0, [pc, #48]	@ (8101210 <LoopForever+0x6>)
  ldr r1, =_edata
 81011de:	490d      	ldr	r1, [pc, #52]	@ (8101214 <LoopForever+0xa>)
  ldr r2, =_sidata
 81011e0:	4a0d      	ldr	r2, [pc, #52]	@ (8101218 <LoopForever+0xe>)
  movs r3, #0
 81011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81011e4:	e002      	b.n	81011ec <LoopCopyDataInit>

081011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81011ea:	3304      	adds	r3, #4

081011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81011f0:	d3f9      	bcc.n	81011e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81011f2:	4a0a      	ldr	r2, [pc, #40]	@ (810121c <LoopForever+0x12>)
  ldr r4, =_ebss
 81011f4:	4c0a      	ldr	r4, [pc, #40]	@ (8101220 <LoopForever+0x16>)
  movs r3, #0
 81011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 81011f8:	e001      	b.n	81011fe <LoopFillZerobss>

081011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81011fc:	3204      	adds	r2, #4

081011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101200:	d3fb      	bcc.n	81011fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8101202:	f015 ff85 	bl	8117110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8101206:	f7ff fb9d 	bl	8100944 <main>

0810120a <LoopForever>:

LoopForever:
    b LoopForever
 810120a:	e7fe      	b.n	810120a <LoopForever>
  ldr   r0, =_estack
 810120c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8101210:	20050000 	.word	0x20050000
  ldr r1, =_edata
 8101214:	200500e8 	.word	0x200500e8
  ldr r2, =_sidata
 8101218:	08117f24 	.word	0x08117f24
  ldr r2, =_sbss
 810121c:	200578e8 	.word	0x200578e8
  ldr r4, =_ebss
 8101220:	200591b4 	.word	0x200591b4

08101224 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8101224:	e7fe      	b.n	8101224 <ADC1_IRQHandler>

08101226 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8101226:	b480      	push	{r7}
 8101228:	b083      	sub	sp, #12
 810122a:	af00      	add	r7, sp, #0
 810122c:	6078      	str	r0, [r7, #4]
 810122e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8101230:	687b      	ldr	r3, [r7, #4]
 8101232:	2b00      	cmp	r3, #0
 8101234:	d00b      	beq.n	810124e <LAN8742_RegisterBusIO+0x28>
 8101236:	683b      	ldr	r3, [r7, #0]
 8101238:	68db      	ldr	r3, [r3, #12]
 810123a:	2b00      	cmp	r3, #0
 810123c:	d007      	beq.n	810124e <LAN8742_RegisterBusIO+0x28>
 810123e:	683b      	ldr	r3, [r7, #0]
 8101240:	689b      	ldr	r3, [r3, #8]
 8101242:	2b00      	cmp	r3, #0
 8101244:	d003      	beq.n	810124e <LAN8742_RegisterBusIO+0x28>
 8101246:	683b      	ldr	r3, [r7, #0]
 8101248:	691b      	ldr	r3, [r3, #16]
 810124a:	2b00      	cmp	r3, #0
 810124c:	d102      	bne.n	8101254 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 810124e:	f04f 33ff 	mov.w	r3, #4294967295
 8101252:	e014      	b.n	810127e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8101254:	683b      	ldr	r3, [r7, #0]
 8101256:	681a      	ldr	r2, [r3, #0]
 8101258:	687b      	ldr	r3, [r7, #4]
 810125a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 810125c:	683b      	ldr	r3, [r7, #0]
 810125e:	685a      	ldr	r2, [r3, #4]
 8101260:	687b      	ldr	r3, [r7, #4]
 8101262:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8101264:	683b      	ldr	r3, [r7, #0]
 8101266:	68da      	ldr	r2, [r3, #12]
 8101268:	687b      	ldr	r3, [r7, #4]
 810126a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 810126c:	683b      	ldr	r3, [r7, #0]
 810126e:	689a      	ldr	r2, [r3, #8]
 8101270:	687b      	ldr	r3, [r7, #4]
 8101272:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8101274:	683b      	ldr	r3, [r7, #0]
 8101276:	691a      	ldr	r2, [r3, #16]
 8101278:	687b      	ldr	r3, [r7, #4]
 810127a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 810127c:	2300      	movs	r3, #0
}
 810127e:	4618      	mov	r0, r3
 8101280:	370c      	adds	r7, #12
 8101282:	46bd      	mov	sp, r7
 8101284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101288:	4770      	bx	lr

0810128a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 810128a:	b580      	push	{r7, lr}
 810128c:	b086      	sub	sp, #24
 810128e:	af00      	add	r7, sp, #0
 8101290:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8101292:	2300      	movs	r3, #0
 8101294:	60fb      	str	r3, [r7, #12]
 8101296:	2300      	movs	r3, #0
 8101298:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 810129a:	2300      	movs	r3, #0
 810129c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 810129e:	687b      	ldr	r3, [r7, #4]
 81012a0:	685b      	ldr	r3, [r3, #4]
 81012a2:	2b00      	cmp	r3, #0
 81012a4:	d139      	bne.n	810131a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 81012a6:	687b      	ldr	r3, [r7, #4]
 81012a8:	689b      	ldr	r3, [r3, #8]
 81012aa:	2b00      	cmp	r3, #0
 81012ac:	d002      	beq.n	81012b4 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 81012ae:	687b      	ldr	r3, [r7, #4]
 81012b0:	689b      	ldr	r3, [r3, #8]
 81012b2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 81012b4:	687b      	ldr	r3, [r7, #4]
 81012b6:	2220      	movs	r2, #32
 81012b8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 81012ba:	2300      	movs	r3, #0
 81012bc:	617b      	str	r3, [r7, #20]
 81012be:	e01c      	b.n	81012fa <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 81012c0:	687b      	ldr	r3, [r7, #4]
 81012c2:	695b      	ldr	r3, [r3, #20]
 81012c4:	f107 020c 	add.w	r2, r7, #12
 81012c8:	2112      	movs	r1, #18
 81012ca:	6978      	ldr	r0, [r7, #20]
 81012cc:	4798      	blx	r3
 81012ce:	4603      	mov	r3, r0
 81012d0:	2b00      	cmp	r3, #0
 81012d2:	da03      	bge.n	81012dc <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 81012d4:	f06f 0304 	mvn.w	r3, #4
 81012d8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 81012da:	e00b      	b.n	81012f4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 81012dc:	68fb      	ldr	r3, [r7, #12]
 81012de:	f003 031f 	and.w	r3, r3, #31
 81012e2:	697a      	ldr	r2, [r7, #20]
 81012e4:	429a      	cmp	r2, r3
 81012e6:	d105      	bne.n	81012f4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 81012e8:	687b      	ldr	r3, [r7, #4]
 81012ea:	697a      	ldr	r2, [r7, #20]
 81012ec:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 81012ee:	2300      	movs	r3, #0
 81012f0:	613b      	str	r3, [r7, #16]
         break;
 81012f2:	e005      	b.n	8101300 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 81012f4:	697b      	ldr	r3, [r7, #20]
 81012f6:	3301      	adds	r3, #1
 81012f8:	617b      	str	r3, [r7, #20]
 81012fa:	697b      	ldr	r3, [r7, #20]
 81012fc:	2b1f      	cmp	r3, #31
 81012fe:	d9df      	bls.n	81012c0 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8101300:	687b      	ldr	r3, [r7, #4]
 8101302:	681b      	ldr	r3, [r3, #0]
 8101304:	2b1f      	cmp	r3, #31
 8101306:	d902      	bls.n	810130e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8101308:	f06f 0302 	mvn.w	r3, #2
 810130c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 810130e:	693b      	ldr	r3, [r7, #16]
 8101310:	2b00      	cmp	r3, #0
 8101312:	d102      	bne.n	810131a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8101314:	687b      	ldr	r3, [r7, #4]
 8101316:	2201      	movs	r2, #1
 8101318:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 810131a:	693b      	ldr	r3, [r7, #16]
 }
 810131c:	4618      	mov	r0, r3
 810131e:	3718      	adds	r7, #24
 8101320:	46bd      	mov	sp, r7
 8101322:	bd80      	pop	{r7, pc}

08101324 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8101324:	b580      	push	{r7, lr}
 8101326:	b084      	sub	sp, #16
 8101328:	af00      	add	r7, sp, #0
 810132a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 810132c:	2300      	movs	r3, #0
 810132e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8101330:	687b      	ldr	r3, [r7, #4]
 8101332:	695b      	ldr	r3, [r3, #20]
 8101334:	687a      	ldr	r2, [r7, #4]
 8101336:	6810      	ldr	r0, [r2, #0]
 8101338:	f107 020c 	add.w	r2, r7, #12
 810133c:	2101      	movs	r1, #1
 810133e:	4798      	blx	r3
 8101340:	4603      	mov	r3, r0
 8101342:	2b00      	cmp	r3, #0
 8101344:	da02      	bge.n	810134c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8101346:	f06f 0304 	mvn.w	r3, #4
 810134a:	e06e      	b.n	810142a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 810134c:	687b      	ldr	r3, [r7, #4]
 810134e:	695b      	ldr	r3, [r3, #20]
 8101350:	687a      	ldr	r2, [r7, #4]
 8101352:	6810      	ldr	r0, [r2, #0]
 8101354:	f107 020c 	add.w	r2, r7, #12
 8101358:	2101      	movs	r1, #1
 810135a:	4798      	blx	r3
 810135c:	4603      	mov	r3, r0
 810135e:	2b00      	cmp	r3, #0
 8101360:	da02      	bge.n	8101368 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8101362:	f06f 0304 	mvn.w	r3, #4
 8101366:	e060      	b.n	810142a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8101368:	68fb      	ldr	r3, [r7, #12]
 810136a:	f003 0304 	and.w	r3, r3, #4
 810136e:	2b00      	cmp	r3, #0
 8101370:	d101      	bne.n	8101376 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8101372:	2301      	movs	r3, #1
 8101374:	e059      	b.n	810142a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8101376:	687b      	ldr	r3, [r7, #4]
 8101378:	695b      	ldr	r3, [r3, #20]
 810137a:	687a      	ldr	r2, [r7, #4]
 810137c:	6810      	ldr	r0, [r2, #0]
 810137e:	f107 020c 	add.w	r2, r7, #12
 8101382:	2100      	movs	r1, #0
 8101384:	4798      	blx	r3
 8101386:	4603      	mov	r3, r0
 8101388:	2b00      	cmp	r3, #0
 810138a:	da02      	bge.n	8101392 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 810138c:	f06f 0304 	mvn.w	r3, #4
 8101390:	e04b      	b.n	810142a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8101392:	68fb      	ldr	r3, [r7, #12]
 8101394:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8101398:	2b00      	cmp	r3, #0
 810139a:	d11b      	bne.n	81013d4 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 810139c:	68fb      	ldr	r3, [r7, #12]
 810139e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81013a2:	2b00      	cmp	r3, #0
 81013a4:	d006      	beq.n	81013b4 <LAN8742_GetLinkState+0x90>
 81013a6:	68fb      	ldr	r3, [r7, #12]
 81013a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81013ac:	2b00      	cmp	r3, #0
 81013ae:	d001      	beq.n	81013b4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 81013b0:	2302      	movs	r3, #2
 81013b2:	e03a      	b.n	810142a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 81013b4:	68fb      	ldr	r3, [r7, #12]
 81013b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81013ba:	2b00      	cmp	r3, #0
 81013bc:	d001      	beq.n	81013c2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 81013be:	2303      	movs	r3, #3
 81013c0:	e033      	b.n	810142a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 81013c2:	68fb      	ldr	r3, [r7, #12]
 81013c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81013c8:	2b00      	cmp	r3, #0
 81013ca:	d001      	beq.n	81013d0 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 81013cc:	2304      	movs	r3, #4
 81013ce:	e02c      	b.n	810142a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 81013d0:	2305      	movs	r3, #5
 81013d2:	e02a      	b.n	810142a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 81013d4:	687b      	ldr	r3, [r7, #4]
 81013d6:	695b      	ldr	r3, [r3, #20]
 81013d8:	687a      	ldr	r2, [r7, #4]
 81013da:	6810      	ldr	r0, [r2, #0]
 81013dc:	f107 020c 	add.w	r2, r7, #12
 81013e0:	211f      	movs	r1, #31
 81013e2:	4798      	blx	r3
 81013e4:	4603      	mov	r3, r0
 81013e6:	2b00      	cmp	r3, #0
 81013e8:	da02      	bge.n	81013f0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 81013ea:	f06f 0304 	mvn.w	r3, #4
 81013ee:	e01c      	b.n	810142a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 81013f0:	68fb      	ldr	r3, [r7, #12]
 81013f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81013f6:	2b00      	cmp	r3, #0
 81013f8:	d101      	bne.n	81013fe <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 81013fa:	2306      	movs	r3, #6
 81013fc:	e015      	b.n	810142a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 81013fe:	68fb      	ldr	r3, [r7, #12]
 8101400:	f003 031c 	and.w	r3, r3, #28
 8101404:	2b18      	cmp	r3, #24
 8101406:	d101      	bne.n	810140c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8101408:	2302      	movs	r3, #2
 810140a:	e00e      	b.n	810142a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 810140c:	68fb      	ldr	r3, [r7, #12]
 810140e:	f003 031c 	and.w	r3, r3, #28
 8101412:	2b08      	cmp	r3, #8
 8101414:	d101      	bne.n	810141a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8101416:	2303      	movs	r3, #3
 8101418:	e007      	b.n	810142a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 810141a:	68fb      	ldr	r3, [r7, #12]
 810141c:	f003 031c 	and.w	r3, r3, #28
 8101420:	2b14      	cmp	r3, #20
 8101422:	d101      	bne.n	8101428 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8101424:	2304      	movs	r3, #4
 8101426:	e000      	b.n	810142a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8101428:	2305      	movs	r3, #5
    }
  }
}
 810142a:	4618      	mov	r0, r3
 810142c:	3710      	adds	r7, #16
 810142e:	46bd      	mov	sp, r7
 8101430:	bd80      	pop	{r7, pc}
	...

08101434 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101434:	b580      	push	{r7, lr}
 8101436:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101438:	2003      	movs	r0, #3
 810143a:	f000 f906 	bl	810164a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 810143e:	f002 fe67 	bl	8104110 <HAL_RCC_GetSysClockFreq>
 8101442:	4602      	mov	r2, r0
 8101444:	4b0c      	ldr	r3, [pc, #48]	@ (8101478 <HAL_Init+0x44>)
 8101446:	6a1b      	ldr	r3, [r3, #32]
 8101448:	f003 030f 	and.w	r3, r3, #15
 810144c:	490b      	ldr	r1, [pc, #44]	@ (810147c <HAL_Init+0x48>)
 810144e:	5ccb      	ldrb	r3, [r1, r3]
 8101450:	fa22 f303 	lsr.w	r3, r2, r3
 8101454:	4a0a      	ldr	r2, [pc, #40]	@ (8101480 <HAL_Init+0x4c>)
 8101456:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8101458:	2004      	movs	r0, #4
 810145a:	f000 f929 	bl	81016b0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810145e:	200f      	movs	r0, #15
 8101460:	f7ff fd58 	bl	8100f14 <HAL_InitTick>
 8101464:	4603      	mov	r3, r0
 8101466:	2b00      	cmp	r3, #0
 8101468:	d001      	beq.n	810146e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 810146a:	2301      	movs	r3, #1
 810146c:	e002      	b.n	8101474 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810146e:	f7ff fbe5 	bl	8100c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101472:	2300      	movs	r3, #0
}
 8101474:	4618      	mov	r0, r3
 8101476:	bd80      	pop	{r7, pc}
 8101478:	44020c00 	.word	0x44020c00
 810147c:	08117df4 	.word	0x08117df4
 8101480:	20050000 	.word	0x20050000

08101484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101484:	b480      	push	{r7}
 8101486:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101488:	4b06      	ldr	r3, [pc, #24]	@ (81014a4 <HAL_IncTick+0x20>)
 810148a:	781b      	ldrb	r3, [r3, #0]
 810148c:	461a      	mov	r2, r3
 810148e:	4b06      	ldr	r3, [pc, #24]	@ (81014a8 <HAL_IncTick+0x24>)
 8101490:	681b      	ldr	r3, [r3, #0]
 8101492:	4413      	add	r3, r2
 8101494:	4a04      	ldr	r2, [pc, #16]	@ (81014a8 <HAL_IncTick+0x24>)
 8101496:	6013      	str	r3, [r2, #0]
}
 8101498:	bf00      	nop
 810149a:	46bd      	mov	sp, r7
 810149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014a0:	4770      	bx	lr
 81014a2:	bf00      	nop
 81014a4:	20050008 	.word	0x20050008
 81014a8:	20058000 	.word	0x20058000

081014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81014ac:	b480      	push	{r7}
 81014ae:	af00      	add	r7, sp, #0
  return uwTick;
 81014b0:	4b03      	ldr	r3, [pc, #12]	@ (81014c0 <HAL_GetTick+0x14>)
 81014b2:	681b      	ldr	r3, [r3, #0]
}
 81014b4:	4618      	mov	r0, r3
 81014b6:	46bd      	mov	sp, r7
 81014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014bc:	4770      	bx	lr
 81014be:	bf00      	nop
 81014c0:	20058000 	.word	0x20058000

081014c4 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 81014c4:	b480      	push	{r7}
 81014c6:	b083      	sub	sp, #12
 81014c8:	af00      	add	r7, sp, #0
 81014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 81014cc:	4b07      	ldr	r3, [pc, #28]	@ (81014ec <HAL_SBS_ETHInterfaceSelect+0x28>)
 81014ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 81014d2:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 81014d6:	4905      	ldr	r1, [pc, #20]	@ (81014ec <HAL_SBS_ETHInterfaceSelect+0x28>)
 81014d8:	687b      	ldr	r3, [r7, #4]
 81014da:	4313      	orrs	r3, r2
 81014dc:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
}
 81014e0:	bf00      	nop
 81014e2:	370c      	adds	r7, #12
 81014e4:	46bd      	mov	sp, r7
 81014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014ea:	4770      	bx	lr
 81014ec:	44000400 	.word	0x44000400

081014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81014f0:	b480      	push	{r7}
 81014f2:	b085      	sub	sp, #20
 81014f4:	af00      	add	r7, sp, #0
 81014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81014f8:	687b      	ldr	r3, [r7, #4]
 81014fa:	f003 0307 	and.w	r3, r3, #7
 81014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101500:	4b0c      	ldr	r3, [pc, #48]	@ (8101534 <__NVIC_SetPriorityGrouping+0x44>)
 8101502:	68db      	ldr	r3, [r3, #12]
 8101504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101506:	68ba      	ldr	r2, [r7, #8]
 8101508:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 810150c:	4013      	ands	r3, r2
 810150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101510:	68fb      	ldr	r3, [r7, #12]
 8101512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101514:	68bb      	ldr	r3, [r7, #8]
 8101516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101518:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 810151c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101522:	4a04      	ldr	r2, [pc, #16]	@ (8101534 <__NVIC_SetPriorityGrouping+0x44>)
 8101524:	68bb      	ldr	r3, [r7, #8]
 8101526:	60d3      	str	r3, [r2, #12]
}
 8101528:	bf00      	nop
 810152a:	3714      	adds	r7, #20
 810152c:	46bd      	mov	sp, r7
 810152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101532:	4770      	bx	lr
 8101534:	e000ed00 	.word	0xe000ed00

08101538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101538:	b480      	push	{r7}
 810153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810153c:	4b04      	ldr	r3, [pc, #16]	@ (8101550 <__NVIC_GetPriorityGrouping+0x18>)
 810153e:	68db      	ldr	r3, [r3, #12]
 8101540:	0a1b      	lsrs	r3, r3, #8
 8101542:	f003 0307 	and.w	r3, r3, #7
}
 8101546:	4618      	mov	r0, r3
 8101548:	46bd      	mov	sp, r7
 810154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810154e:	4770      	bx	lr
 8101550:	e000ed00 	.word	0xe000ed00

08101554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101554:	b480      	push	{r7}
 8101556:	b083      	sub	sp, #12
 8101558:	af00      	add	r7, sp, #0
 810155a:	4603      	mov	r3, r0
 810155c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810155e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101562:	2b00      	cmp	r3, #0
 8101564:	db0b      	blt.n	810157e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101566:	88fb      	ldrh	r3, [r7, #6]
 8101568:	f003 021f 	and.w	r2, r3, #31
 810156c:	4907      	ldr	r1, [pc, #28]	@ (810158c <__NVIC_EnableIRQ+0x38>)
 810156e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101572:	095b      	lsrs	r3, r3, #5
 8101574:	2001      	movs	r0, #1
 8101576:	fa00 f202 	lsl.w	r2, r0, r2
 810157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810157e:	bf00      	nop
 8101580:	370c      	adds	r7, #12
 8101582:	46bd      	mov	sp, r7
 8101584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101588:	4770      	bx	lr
 810158a:	bf00      	nop
 810158c:	e000e100 	.word	0xe000e100

08101590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101590:	b480      	push	{r7}
 8101592:	b083      	sub	sp, #12
 8101594:	af00      	add	r7, sp, #0
 8101596:	4603      	mov	r3, r0
 8101598:	6039      	str	r1, [r7, #0]
 810159a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810159c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81015a0:	2b00      	cmp	r3, #0
 81015a2:	db0a      	blt.n	81015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81015a4:	683b      	ldr	r3, [r7, #0]
 81015a6:	b2da      	uxtb	r2, r3
 81015a8:	490c      	ldr	r1, [pc, #48]	@ (81015dc <__NVIC_SetPriority+0x4c>)
 81015aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81015ae:	0112      	lsls	r2, r2, #4
 81015b0:	b2d2      	uxtb	r2, r2
 81015b2:	440b      	add	r3, r1
 81015b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81015b8:	e00a      	b.n	81015d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81015ba:	683b      	ldr	r3, [r7, #0]
 81015bc:	b2da      	uxtb	r2, r3
 81015be:	4908      	ldr	r1, [pc, #32]	@ (81015e0 <__NVIC_SetPriority+0x50>)
 81015c0:	88fb      	ldrh	r3, [r7, #6]
 81015c2:	f003 030f 	and.w	r3, r3, #15
 81015c6:	3b04      	subs	r3, #4
 81015c8:	0112      	lsls	r2, r2, #4
 81015ca:	b2d2      	uxtb	r2, r2
 81015cc:	440b      	add	r3, r1
 81015ce:	761a      	strb	r2, [r3, #24]
}
 81015d0:	bf00      	nop
 81015d2:	370c      	adds	r7, #12
 81015d4:	46bd      	mov	sp, r7
 81015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015da:	4770      	bx	lr
 81015dc:	e000e100 	.word	0xe000e100
 81015e0:	e000ed00 	.word	0xe000ed00

081015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81015e4:	b480      	push	{r7}
 81015e6:	b089      	sub	sp, #36	@ 0x24
 81015e8:	af00      	add	r7, sp, #0
 81015ea:	60f8      	str	r0, [r7, #12]
 81015ec:	60b9      	str	r1, [r7, #8]
 81015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81015f0:	68fb      	ldr	r3, [r7, #12]
 81015f2:	f003 0307 	and.w	r3, r3, #7
 81015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81015f8:	69fb      	ldr	r3, [r7, #28]
 81015fa:	f1c3 0307 	rsb	r3, r3, #7
 81015fe:	2b04      	cmp	r3, #4
 8101600:	bf28      	it	cs
 8101602:	2304      	movcs	r3, #4
 8101604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101606:	69fb      	ldr	r3, [r7, #28]
 8101608:	3304      	adds	r3, #4
 810160a:	2b06      	cmp	r3, #6
 810160c:	d902      	bls.n	8101614 <NVIC_EncodePriority+0x30>
 810160e:	69fb      	ldr	r3, [r7, #28]
 8101610:	3b03      	subs	r3, #3
 8101612:	e000      	b.n	8101616 <NVIC_EncodePriority+0x32>
 8101614:	2300      	movs	r3, #0
 8101616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101618:	f04f 32ff 	mov.w	r2, #4294967295
 810161c:	69bb      	ldr	r3, [r7, #24]
 810161e:	fa02 f303 	lsl.w	r3, r2, r3
 8101622:	43da      	mvns	r2, r3
 8101624:	68bb      	ldr	r3, [r7, #8]
 8101626:	401a      	ands	r2, r3
 8101628:	697b      	ldr	r3, [r7, #20]
 810162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810162c:	f04f 31ff 	mov.w	r1, #4294967295
 8101630:	697b      	ldr	r3, [r7, #20]
 8101632:	fa01 f303 	lsl.w	r3, r1, r3
 8101636:	43d9      	mvns	r1, r3
 8101638:	687b      	ldr	r3, [r7, #4]
 810163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810163c:	4313      	orrs	r3, r2
         );
}
 810163e:	4618      	mov	r0, r3
 8101640:	3724      	adds	r7, #36	@ 0x24
 8101642:	46bd      	mov	sp, r7
 8101644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101648:	4770      	bx	lr

0810164a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810164a:	b580      	push	{r7, lr}
 810164c:	b082      	sub	sp, #8
 810164e:	af00      	add	r7, sp, #0
 8101650:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101652:	6878      	ldr	r0, [r7, #4]
 8101654:	f7ff ff4c 	bl	81014f0 <__NVIC_SetPriorityGrouping>
}
 8101658:	bf00      	nop
 810165a:	3708      	adds	r7, #8
 810165c:	46bd      	mov	sp, r7
 810165e:	bd80      	pop	{r7, pc}

08101660 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101660:	b580      	push	{r7, lr}
 8101662:	b086      	sub	sp, #24
 8101664:	af00      	add	r7, sp, #0
 8101666:	4603      	mov	r3, r0
 8101668:	60b9      	str	r1, [r7, #8]
 810166a:	607a      	str	r2, [r7, #4]
 810166c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810166e:	f7ff ff63 	bl	8101538 <__NVIC_GetPriorityGrouping>
 8101672:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101674:	687a      	ldr	r2, [r7, #4]
 8101676:	68b9      	ldr	r1, [r7, #8]
 8101678:	6978      	ldr	r0, [r7, #20]
 810167a:	f7ff ffb3 	bl	81015e4 <NVIC_EncodePriority>
 810167e:	4602      	mov	r2, r0
 8101680:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101684:	4611      	mov	r1, r2
 8101686:	4618      	mov	r0, r3
 8101688:	f7ff ff82 	bl	8101590 <__NVIC_SetPriority>
}
 810168c:	bf00      	nop
 810168e:	3718      	adds	r7, #24
 8101690:	46bd      	mov	sp, r7
 8101692:	bd80      	pop	{r7, pc}

08101694 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101694:	b580      	push	{r7, lr}
 8101696:	b082      	sub	sp, #8
 8101698:	af00      	add	r7, sp, #0
 810169a:	4603      	mov	r3, r0
 810169c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810169e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016a2:	4618      	mov	r0, r3
 81016a4:	f7ff ff56 	bl	8101554 <__NVIC_EnableIRQ>
}
 81016a8:	bf00      	nop
 81016aa:	3708      	adds	r7, #8
 81016ac:	46bd      	mov	sp, r7
 81016ae:	bd80      	pop	{r7, pc}

081016b0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 81016b0:	b480      	push	{r7}
 81016b2:	b083      	sub	sp, #12
 81016b4:	af00      	add	r7, sp, #0
 81016b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 81016b8:	687b      	ldr	r3, [r7, #4]
 81016ba:	2b04      	cmp	r3, #4
 81016bc:	d844      	bhi.n	8101748 <HAL_SYSTICK_CLKSourceConfig+0x98>
 81016be:	a201      	add	r2, pc, #4	@ (adr r2, 81016c4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 81016c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81016c4:	081016e7 	.word	0x081016e7
 81016c8:	08101705 	.word	0x08101705
 81016cc:	08101727 	.word	0x08101727
 81016d0:	08101749 	.word	0x08101749
 81016d4:	081016d9 	.word	0x081016d9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 81016d8:	4b1f      	ldr	r3, [pc, #124]	@ (8101758 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 81016da:	681b      	ldr	r3, [r3, #0]
 81016dc:	4a1e      	ldr	r2, [pc, #120]	@ (8101758 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 81016de:	f043 0304 	orr.w	r3, r3, #4
 81016e2:	6013      	str	r3, [r2, #0]
      break;
 81016e4:	e031      	b.n	810174a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 81016e6:	4b1c      	ldr	r3, [pc, #112]	@ (8101758 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 81016e8:	681b      	ldr	r3, [r3, #0]
 81016ea:	4a1b      	ldr	r2, [pc, #108]	@ (8101758 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 81016ec:	f023 0304 	bic.w	r3, r3, #4
 81016f0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 81016f2:	4b1a      	ldr	r3, [pc, #104]	@ (810175c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 81016f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 81016f8:	4a18      	ldr	r2, [pc, #96]	@ (810175c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 81016fa:	f023 030c 	bic.w	r3, r3, #12
 81016fe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8101702:	e022      	b.n	810174a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8101704:	4b14      	ldr	r3, [pc, #80]	@ (8101758 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8101706:	681b      	ldr	r3, [r3, #0]
 8101708:	4a13      	ldr	r2, [pc, #76]	@ (8101758 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 810170a:	f023 0304 	bic.w	r3, r3, #4
 810170e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8101710:	4b12      	ldr	r3, [pc, #72]	@ (810175c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8101712:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8101716:	f023 030c 	bic.w	r3, r3, #12
 810171a:	4a10      	ldr	r2, [pc, #64]	@ (810175c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 810171c:	f043 0304 	orr.w	r3, r3, #4
 8101720:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8101724:	e011      	b.n	810174a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8101726:	4b0c      	ldr	r3, [pc, #48]	@ (8101758 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8101728:	681b      	ldr	r3, [r3, #0]
 810172a:	4a0b      	ldr	r2, [pc, #44]	@ (8101758 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 810172c:	f023 0304 	bic.w	r3, r3, #4
 8101730:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8101732:	4b0a      	ldr	r3, [pc, #40]	@ (810175c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8101734:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8101738:	f023 030c 	bic.w	r3, r3, #12
 810173c:	4a07      	ldr	r2, [pc, #28]	@ (810175c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 810173e:	f043 0308 	orr.w	r3, r3, #8
 8101742:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8101746:	e000      	b.n	810174a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8101748:	bf00      	nop
  }
}
 810174a:	bf00      	nop
 810174c:	370c      	adds	r7, #12
 810174e:	46bd      	mov	sp, r7
 8101750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101754:	4770      	bx	lr
 8101756:	bf00      	nop
 8101758:	e000e010 	.word	0xe000e010
 810175c:	44020c00 	.word	0x44020c00

08101760 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8101760:	b580      	push	{r7, lr}
 8101762:	b084      	sub	sp, #16
 8101764:	af00      	add	r7, sp, #0
 8101766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8101768:	687b      	ldr	r3, [r7, #4]
 810176a:	2b00      	cmp	r3, #0
 810176c:	d101      	bne.n	8101772 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 810176e:	2301      	movs	r3, #1
 8101770:	e0e8      	b.n	8101944 <HAL_ETH_Init+0x1e4>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8101772:	687b      	ldr	r3, [r7, #4]
 8101774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8101778:	2b00      	cmp	r3, #0
 810177a:	d106      	bne.n	810178a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 810177c:	687b      	ldr	r3, [r7, #4]
 810177e:	2223      	movs	r2, #35	@ 0x23
 8101780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8101784:	6878      	ldr	r0, [r7, #4]
 8101786:	f7ff fa61 	bl	8100c4c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 810178a:	4b70      	ldr	r3, [pc, #448]	@ (810194c <HAL_ETH_Init+0x1ec>)
 810178c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8101790:	4a6e      	ldr	r2, [pc, #440]	@ (810194c <HAL_ETH_Init+0x1ec>)
 8101792:	f043 0302 	orr.w	r3, r3, #2
 8101796:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 810179a:	4b6c      	ldr	r3, [pc, #432]	@ (810194c <HAL_ETH_Init+0x1ec>)
 810179c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81017a0:	f003 0302 	and.w	r3, r3, #2
 81017a4:	60bb      	str	r3, [r7, #8]
 81017a6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 81017a8:	687b      	ldr	r3, [r7, #4]
 81017aa:	7a1b      	ldrb	r3, [r3, #8]
 81017ac:	2b00      	cmp	r3, #0
 81017ae:	d103      	bne.n	81017b8 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 81017b0:	2000      	movs	r0, #0
 81017b2:	f7ff fe87 	bl	81014c4 <HAL_SBS_ETHInterfaceSelect>
 81017b6:	e003      	b.n	81017c0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 81017b8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 81017bc:	f7ff fe82 	bl	81014c4 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 81017c0:	4b63      	ldr	r3, [pc, #396]	@ (8101950 <HAL_ETH_Init+0x1f0>)
 81017c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 81017c6:	687b      	ldr	r3, [r7, #4]
 81017c8:	681b      	ldr	r3, [r3, #0]
 81017ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81017ce:	681b      	ldr	r3, [r3, #0]
 81017d0:	687a      	ldr	r2, [r7, #4]
 81017d2:	6812      	ldr	r2, [r2, #0]
 81017d4:	f043 0301 	orr.w	r3, r3, #1
 81017d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81017dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 81017de:	f7ff fe65 	bl	81014ac <HAL_GetTick>
 81017e2:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81017e4:	e011      	b.n	810180a <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 81017e6:	f7ff fe61 	bl	81014ac <HAL_GetTick>
 81017ea:	4602      	mov	r2, r0
 81017ec:	68fb      	ldr	r3, [r7, #12]
 81017ee:	1ad3      	subs	r3, r2, r3
 81017f0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 81017f4:	d909      	bls.n	810180a <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 81017f6:	687b      	ldr	r3, [r7, #4]
 81017f8:	2204      	movs	r2, #4
 81017fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 81017fe:	687b      	ldr	r3, [r7, #4]
 8101800:	22e0      	movs	r2, #224	@ 0xe0
 8101802:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8101806:	2301      	movs	r3, #1
 8101808:	e09c      	b.n	8101944 <HAL_ETH_Init+0x1e4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 810180a:	687b      	ldr	r3, [r7, #4]
 810180c:	681b      	ldr	r3, [r3, #0]
 810180e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101812:	681b      	ldr	r3, [r3, #0]
 8101814:	f003 0301 	and.w	r3, r3, #1
 8101818:	2b00      	cmp	r3, #0
 810181a:	d1e4      	bne.n	81017e6 <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 810181c:	6878      	ldr	r0, [r7, #4]
 810181e:	f000 ff19 	bl	8102654 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8101822:	f002 fda1 	bl	8104368 <HAL_RCC_GetHCLKFreq>
 8101826:	4603      	mov	r3, r0
 8101828:	4a4a      	ldr	r2, [pc, #296]	@ (8101954 <HAL_ETH_Init+0x1f4>)
 810182a:	fba2 2303 	umull	r2, r3, r2, r3
 810182e:	0c9a      	lsrs	r2, r3, #18
 8101830:	687b      	ldr	r3, [r7, #4]
 8101832:	681b      	ldr	r3, [r3, #0]
 8101834:	3a01      	subs	r2, #1
 8101836:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 810183a:	6878      	ldr	r0, [r7, #4]
 810183c:	f001 f948 	bl	8102ad0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8101840:	687b      	ldr	r3, [r7, #4]
 8101842:	681b      	ldr	r3, [r3, #0]
 8101844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101848:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 810184c:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8101850:	687a      	ldr	r2, [r7, #4]
 8101852:	6812      	ldr	r2, [r2, #0]
 8101854:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8101858:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810185c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8101860:	687b      	ldr	r3, [r7, #4]
 8101862:	695b      	ldr	r3, [r3, #20]
 8101864:	f003 0303 	and.w	r3, r3, #3
 8101868:	2b00      	cmp	r3, #0
 810186a:	d009      	beq.n	8101880 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 810186c:	687b      	ldr	r3, [r7, #4]
 810186e:	2201      	movs	r2, #1
 8101870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8101874:	687b      	ldr	r3, [r7, #4]
 8101876:	22e0      	movs	r2, #224	@ 0xe0
 8101878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 810187c:	2301      	movs	r3, #1
 810187e:	e061      	b.n	8101944 <HAL_ETH_Init+0x1e4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8101880:	687b      	ldr	r3, [r7, #4]
 8101882:	681b      	ldr	r3, [r3, #0]
 8101884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101888:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810188c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8101890:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8101894:	687a      	ldr	r2, [r7, #4]
 8101896:	6952      	ldr	r2, [r2, #20]
 8101898:	0051      	lsls	r1, r2, #1
 810189a:	687a      	ldr	r2, [r7, #4]
 810189c:	6812      	ldr	r2, [r2, #0]
 810189e:	430b      	orrs	r3, r1
 81018a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81018a4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 81018a8:	6878      	ldr	r0, [r7, #4]
 81018aa:	f001 f9ae 	bl	8102c0a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 81018ae:	6878      	ldr	r0, [r7, #4]
 81018b0:	f001 f9f4 	bl	8102c9c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 81018b4:	687b      	ldr	r3, [r7, #4]
 81018b6:	685b      	ldr	r3, [r3, #4]
 81018b8:	3305      	adds	r3, #5
 81018ba:	781b      	ldrb	r3, [r3, #0]
 81018bc:	021a      	lsls	r2, r3, #8
 81018be:	687b      	ldr	r3, [r7, #4]
 81018c0:	685b      	ldr	r3, [r3, #4]
 81018c2:	3304      	adds	r3, #4
 81018c4:	781b      	ldrb	r3, [r3, #0]
 81018c6:	4619      	mov	r1, r3
 81018c8:	687b      	ldr	r3, [r7, #4]
 81018ca:	681b      	ldr	r3, [r3, #0]
 81018cc:	430a      	orrs	r2, r1
 81018ce:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81018d2:	687b      	ldr	r3, [r7, #4]
 81018d4:	685b      	ldr	r3, [r3, #4]
 81018d6:	3303      	adds	r3, #3
 81018d8:	781b      	ldrb	r3, [r3, #0]
 81018da:	061a      	lsls	r2, r3, #24
 81018dc:	687b      	ldr	r3, [r7, #4]
 81018de:	685b      	ldr	r3, [r3, #4]
 81018e0:	3302      	adds	r3, #2
 81018e2:	781b      	ldrb	r3, [r3, #0]
 81018e4:	041b      	lsls	r3, r3, #16
 81018e6:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81018e8:	687b      	ldr	r3, [r7, #4]
 81018ea:	685b      	ldr	r3, [r3, #4]
 81018ec:	3301      	adds	r3, #1
 81018ee:	781b      	ldrb	r3, [r3, #0]
 81018f0:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81018f2:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81018f4:	687b      	ldr	r3, [r7, #4]
 81018f6:	685b      	ldr	r3, [r3, #4]
 81018f8:	781b      	ldrb	r3, [r3, #0]
 81018fa:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81018fc:	687b      	ldr	r3, [r7, #4]
 81018fe:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8101900:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8101902:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8101906:	687b      	ldr	r3, [r7, #4]
 8101908:	681b      	ldr	r3, [r3, #0]
 810190a:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 810190e:	687b      	ldr	r3, [r7, #4]
 8101910:	681a      	ldr	r2, [r3, #0]
 8101912:	4b11      	ldr	r3, [pc, #68]	@ (8101958 <HAL_ETH_Init+0x1f8>)
 8101914:	430b      	orrs	r3, r1
 8101916:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 810191a:	687b      	ldr	r3, [r7, #4]
 810191c:	681b      	ldr	r3, [r3, #0]
 810191e:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 8101922:	687a      	ldr	r2, [r7, #4]
 8101924:	6812      	ldr	r2, [r2, #0]
 8101926:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 810192a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 810192e:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8101932:	687b      	ldr	r3, [r7, #4]
 8101934:	2200      	movs	r2, #0
 8101936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 810193a:	687b      	ldr	r3, [r7, #4]
 810193c:	2210      	movs	r2, #16
 810193e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8101942:	2300      	movs	r3, #0
}
 8101944:	4618      	mov	r0, r3
 8101946:	3710      	adds	r7, #16
 8101948:	46bd      	mov	sp, r7
 810194a:	bd80      	pop	{r7, pc}
 810194c:	44020c00 	.word	0x44020c00
 8101950:	44000400 	.word	0x44000400
 8101954:	431bde83 	.word	0x431bde83
 8101958:	0c020060 	.word	0x0c020060

0810195c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 810195c:	b580      	push	{r7, lr}
 810195e:	b082      	sub	sp, #8
 8101960:	af00      	add	r7, sp, #0
 8101962:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8101964:	687b      	ldr	r3, [r7, #4]
 8101966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810196a:	2b10      	cmp	r3, #16
 810196c:	d166      	bne.n	8101a3c <HAL_ETH_Start_IT+0xe0>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 810196e:	687b      	ldr	r3, [r7, #4]
 8101970:	2223      	movs	r2, #35	@ 0x23
 8101972:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8101976:	687b      	ldr	r3, [r7, #4]
 8101978:	2201      	movs	r2, #1
 810197a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	2204      	movs	r2, #4
 8101980:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8101982:	6878      	ldr	r0, [r7, #4]
 8101984:	f000 f9bd 	bl	8101d02 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8101988:	687b      	ldr	r3, [r7, #4]
 810198a:	681b      	ldr	r3, [r3, #0]
 810198c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101990:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8101994:	687a      	ldr	r2, [r7, #4]
 8101996:	6812      	ldr	r2, [r2, #0]
 8101998:	f043 0301 	orr.w	r3, r3, #1
 810199c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81019a0:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 81019a4:	687b      	ldr	r3, [r7, #4]
 81019a6:	681b      	ldr	r3, [r3, #0]
 81019a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81019ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 81019b0:	687a      	ldr	r2, [r7, #4]
 81019b2:	6812      	ldr	r2, [r2, #0]
 81019b4:	f043 0301 	orr.w	r3, r3, #1
 81019b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81019bc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 81019c0:	687b      	ldr	r3, [r7, #4]
 81019c2:	681b      	ldr	r3, [r3, #0]
 81019c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81019c8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 81019cc:	687a      	ldr	r2, [r7, #4]
 81019ce:	6812      	ldr	r2, [r2, #0]
 81019d0:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 81019d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81019d8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 81019dc:	687b      	ldr	r3, [r7, #4]
 81019de:	681b      	ldr	r3, [r3, #0]
 81019e0:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 81019e4:	687b      	ldr	r3, [r7, #4]
 81019e6:	681b      	ldr	r3, [r3, #0]
 81019e8:	f042 0201 	orr.w	r2, r2, #1
 81019ec:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 81019f0:	687b      	ldr	r3, [r7, #4]
 81019f2:	681b      	ldr	r3, [r3, #0]
 81019f4:	681a      	ldr	r2, [r3, #0]
 81019f6:	687b      	ldr	r3, [r7, #4]
 81019f8:	681b      	ldr	r3, [r3, #0]
 81019fa:	f042 0202 	orr.w	r2, r2, #2
 81019fe:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8101a00:	687b      	ldr	r3, [r7, #4]
 8101a02:	681b      	ldr	r3, [r3, #0]
 8101a04:	681a      	ldr	r2, [r3, #0]
 8101a06:	687b      	ldr	r3, [r7, #4]
 8101a08:	681b      	ldr	r3, [r3, #0]
 8101a0a:	f042 0201 	orr.w	r2, r2, #1
 8101a0e:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8101a10:	687b      	ldr	r3, [r7, #4]
 8101a12:	681b      	ldr	r3, [r3, #0]
 8101a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101a18:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8101a1c:	687a      	ldr	r2, [r7, #4]
 8101a1e:	6812      	ldr	r2, [r2, #0]
 8101a20:	f443 4350 	orr.w	r3, r3, #53248	@ 0xd000
 8101a24:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8101a28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8101a2c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8101a30:	687b      	ldr	r3, [r7, #4]
 8101a32:	2223      	movs	r2, #35	@ 0x23
 8101a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8101a38:	2300      	movs	r3, #0
 8101a3a:	e000      	b.n	8101a3e <HAL_ETH_Start_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8101a3c:	2301      	movs	r3, #1
  }
}
 8101a3e:	4618      	mov	r0, r3
 8101a40:	3708      	adds	r7, #8
 8101a42:	46bd      	mov	sp, r7
 8101a44:	bd80      	pop	{r7, pc}

08101a46 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8101a46:	b480      	push	{r7}
 8101a48:	b083      	sub	sp, #12
 8101a4a:	af00      	add	r7, sp, #0
 8101a4c:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8101a4e:	687b      	ldr	r3, [r7, #4]
 8101a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8101a54:	2b23      	cmp	r3, #35	@ 0x23
 8101a56:	d13f      	bne.n	8101ad8 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8101a58:	687b      	ldr	r3, [r7, #4]
 8101a5a:	2223      	movs	r2, #35	@ 0x23
 8101a5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8101a60:	687b      	ldr	r3, [r7, #4]
 8101a62:	681b      	ldr	r3, [r3, #0]
 8101a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101a68:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8101a6c:	687a      	ldr	r2, [r7, #4]
 8101a6e:	6812      	ldr	r2, [r2, #0]
 8101a70:	f023 0301 	bic.w	r3, r3, #1
 8101a74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8101a78:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8101a7c:	687b      	ldr	r3, [r7, #4]
 8101a7e:	681b      	ldr	r3, [r3, #0]
 8101a80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101a84:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8101a88:	687a      	ldr	r2, [r7, #4]
 8101a8a:	6812      	ldr	r2, [r2, #0]
 8101a8c:	f023 0301 	bic.w	r3, r3, #1
 8101a90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8101a94:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8101a98:	687b      	ldr	r3, [r7, #4]
 8101a9a:	681b      	ldr	r3, [r3, #0]
 8101a9c:	681a      	ldr	r2, [r3, #0]
 8101a9e:	687b      	ldr	r3, [r7, #4]
 8101aa0:	681b      	ldr	r3, [r3, #0]
 8101aa2:	f022 0201 	bic.w	r2, r2, #1
 8101aa6:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8101aa8:	687b      	ldr	r3, [r7, #4]
 8101aaa:	681b      	ldr	r3, [r3, #0]
 8101aac:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8101ab0:	687b      	ldr	r3, [r7, #4]
 8101ab2:	681b      	ldr	r3, [r3, #0]
 8101ab4:	f042 0201 	orr.w	r2, r2, #1
 8101ab8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8101abc:	687b      	ldr	r3, [r7, #4]
 8101abe:	681b      	ldr	r3, [r3, #0]
 8101ac0:	681a      	ldr	r2, [r3, #0]
 8101ac2:	687b      	ldr	r3, [r7, #4]
 8101ac4:	681b      	ldr	r3, [r3, #0]
 8101ac6:	f022 0202 	bic.w	r2, r2, #2
 8101aca:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8101acc:	687b      	ldr	r3, [r7, #4]
 8101ace:	2210      	movs	r2, #16
 8101ad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8101ad4:	2300      	movs	r3, #0
 8101ad6:	e000      	b.n	8101ada <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8101ad8:	2301      	movs	r3, #1
  }
}
 8101ada:	4618      	mov	r0, r3
 8101adc:	370c      	adds	r7, #12
 8101ade:	46bd      	mov	sp, r7
 8101ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ae4:	4770      	bx	lr

08101ae6 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8101ae6:	b580      	push	{r7, lr}
 8101ae8:	b082      	sub	sp, #8
 8101aea:	af00      	add	r7, sp, #0
 8101aec:	6078      	str	r0, [r7, #4]
 8101aee:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8101af0:	683b      	ldr	r3, [r7, #0]
 8101af2:	2b00      	cmp	r3, #0
 8101af4:	d109      	bne.n	8101b0a <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8101af6:	687b      	ldr	r3, [r7, #4]
 8101af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8101afc:	f043 0201 	orr.w	r2, r3, #1
 8101b00:	687b      	ldr	r3, [r7, #4]
 8101b02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8101b06:	2301      	movs	r3, #1
 8101b08:	e03a      	b.n	8101b80 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8101b0a:	687b      	ldr	r3, [r7, #4]
 8101b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8101b10:	2b23      	cmp	r3, #35	@ 0x23
 8101b12:	d134      	bne.n	8101b7e <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8101b14:	683b      	ldr	r3, [r7, #0]
 8101b16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8101b18:	687b      	ldr	r3, [r7, #4]
 8101b1a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8101b1c:	2201      	movs	r2, #1
 8101b1e:	6839      	ldr	r1, [r7, #0]
 8101b20:	6878      	ldr	r0, [r7, #4]
 8101b22:	f001 f918 	bl	8102d56 <ETH_Prepare_Tx_Descriptors>
 8101b26:	4603      	mov	r3, r0
 8101b28:	2b00      	cmp	r3, #0
 8101b2a:	d009      	beq.n	8101b40 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8101b2c:	687b      	ldr	r3, [r7, #4]
 8101b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8101b32:	f043 0202 	orr.w	r2, r3, #2
 8101b36:	687b      	ldr	r3, [r7, #4]
 8101b38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8101b3c:	2301      	movs	r3, #1
 8101b3e:	e01f      	b.n	8101b80 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8101b40:	f3bf 8f4f 	dsb	sy
}
 8101b44:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8101b46:	687b      	ldr	r3, [r7, #4]
 8101b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101b4a:	1c5a      	adds	r2, r3, #1
 8101b4c:	687b      	ldr	r3, [r7, #4]
 8101b4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8101b50:	687b      	ldr	r3, [r7, #4]
 8101b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101b54:	2b03      	cmp	r3, #3
 8101b56:	d904      	bls.n	8101b62 <HAL_ETH_Transmit_IT+0x7c>
 8101b58:	687b      	ldr	r3, [r7, #4]
 8101b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101b5c:	1f1a      	subs	r2, r3, #4
 8101b5e:	687b      	ldr	r3, [r7, #4]
 8101b60:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8101b62:	687b      	ldr	r3, [r7, #4]
 8101b64:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8101b66:	687b      	ldr	r3, [r7, #4]
 8101b68:	681a      	ldr	r2, [r3, #0]
 8101b6a:	687b      	ldr	r3, [r7, #4]
 8101b6c:	3106      	adds	r1, #6
 8101b6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8101b72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8101b76:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8101b7a:	2300      	movs	r3, #0
 8101b7c:	e000      	b.n	8101b80 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8101b7e:	2301      	movs	r3, #1
  }
}
 8101b80:	4618      	mov	r0, r3
 8101b82:	3708      	adds	r7, #8
 8101b84:	46bd      	mov	sp, r7
 8101b86:	bd80      	pop	{r7, pc}

08101b88 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8101b88:	b580      	push	{r7, lr}
 8101b8a:	b088      	sub	sp, #32
 8101b8c:	af00      	add	r7, sp, #0
 8101b8e:	6078      	str	r0, [r7, #4]
 8101b90:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8101b92:	2300      	movs	r3, #0
 8101b94:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8101b96:	2300      	movs	r3, #0
 8101b98:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8101b9a:	683b      	ldr	r3, [r7, #0]
 8101b9c:	2b00      	cmp	r3, #0
 8101b9e:	d109      	bne.n	8101bb4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8101ba0:	687b      	ldr	r3, [r7, #4]
 8101ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8101ba6:	f043 0201 	orr.w	r2, r3, #1
 8101baa:	687b      	ldr	r3, [r7, #4]
 8101bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8101bb0:	2301      	movs	r3, #1
 8101bb2:	e0a2      	b.n	8101cfa <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8101bb4:	687b      	ldr	r3, [r7, #4]
 8101bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8101bba:	2b23      	cmp	r3, #35	@ 0x23
 8101bbc:	d001      	beq.n	8101bc2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8101bbe:	2301      	movs	r3, #1
 8101bc0:	e09b      	b.n	8101cfa <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8101bc2:	687b      	ldr	r3, [r7, #4]
 8101bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101bc6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8101bc8:	687b      	ldr	r3, [r7, #4]
 8101bca:	69fa      	ldr	r2, [r7, #28]
 8101bcc:	3212      	adds	r2, #18
 8101bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101bd2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8101bd4:	687b      	ldr	r3, [r7, #4]
 8101bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101bd8:	f1c3 0304 	rsb	r3, r3, #4
 8101bdc:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8101bde:	e064      	b.n	8101caa <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8101be0:	69bb      	ldr	r3, [r7, #24]
 8101be2:	68db      	ldr	r3, [r3, #12]
 8101be4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8101be8:	2b00      	cmp	r3, #0
 8101bea:	d007      	beq.n	8101bfc <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8101bec:	69bb      	ldr	r3, [r7, #24]
 8101bee:	685a      	ldr	r2, [r3, #4]
 8101bf0:	687b      	ldr	r3, [r7, #4]
 8101bf2:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8101bf4:	69bb      	ldr	r3, [r7, #24]
 8101bf6:	681a      	ldr	r2, [r3, #0]
 8101bf8:	687b      	ldr	r3, [r7, #4]
 8101bfa:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8101bfc:	69bb      	ldr	r3, [r7, #24]
 8101bfe:	68db      	ldr	r3, [r3, #12]
 8101c00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8101c04:	2b00      	cmp	r3, #0
 8101c06:	d103      	bne.n	8101c10 <HAL_ETH_ReadData+0x88>
 8101c08:	687b      	ldr	r3, [r7, #4]
 8101c0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8101c0c:	2b00      	cmp	r3, #0
 8101c0e:	d03a      	beq.n	8101c86 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8101c10:	69bb      	ldr	r3, [r7, #24]
 8101c12:	68db      	ldr	r3, [r3, #12]
 8101c14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8101c18:	2b00      	cmp	r3, #0
 8101c1a:	d005      	beq.n	8101c28 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8101c1c:	687b      	ldr	r3, [r7, #4]
 8101c1e:	2200      	movs	r2, #0
 8101c20:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8101c22:	687b      	ldr	r3, [r7, #4]
 8101c24:	2200      	movs	r2, #0
 8101c26:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8101c28:	69bb      	ldr	r3, [r7, #24]
 8101c2a:	68db      	ldr	r3, [r3, #12]
 8101c2c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8101c30:	687b      	ldr	r3, [r7, #4]
 8101c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8101c34:	1ad3      	subs	r3, r2, r3
 8101c36:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8101c38:	69bb      	ldr	r3, [r7, #24]
 8101c3a:	68db      	ldr	r3, [r3, #12]
 8101c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8101c40:	2b00      	cmp	r3, #0
 8101c42:	d005      	beq.n	8101c50 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8101c44:	69bb      	ldr	r3, [r7, #24]
 8101c46:	68da      	ldr	r2, [r3, #12]
 8101c48:	687b      	ldr	r3, [r7, #4]
 8101c4a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8101c4c:	2301      	movs	r3, #1
 8101c4e:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8101c50:	687b      	ldr	r3, [r7, #4]
 8101c52:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8101c56:	687b      	ldr	r3, [r7, #4]
 8101c58:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8101c5c:	69bb      	ldr	r3, [r7, #24]
 8101c5e:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8101c60:	461a      	mov	r2, r3
 8101c62:	68bb      	ldr	r3, [r7, #8]
 8101c64:	b29b      	uxth	r3, r3
 8101c66:	f009 fb5b 	bl	810b320 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8101c6a:	687b      	ldr	r3, [r7, #4]
 8101c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101c6e:	1c5a      	adds	r2, r3, #1
 8101c70:	687b      	ldr	r3, [r7, #4]
 8101c72:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8101c74:	687b      	ldr	r3, [r7, #4]
 8101c76:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8101c78:	68bb      	ldr	r3, [r7, #8]
 8101c7a:	441a      	add	r2, r3
 8101c7c:	687b      	ldr	r3, [r7, #4]
 8101c7e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8101c80:	69bb      	ldr	r3, [r7, #24]
 8101c82:	2200      	movs	r2, #0
 8101c84:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8101c86:	69fb      	ldr	r3, [r7, #28]
 8101c88:	3301      	adds	r3, #1
 8101c8a:	61fb      	str	r3, [r7, #28]
 8101c8c:	69fb      	ldr	r3, [r7, #28]
 8101c8e:	2b03      	cmp	r3, #3
 8101c90:	d902      	bls.n	8101c98 <HAL_ETH_ReadData+0x110>
 8101c92:	69fb      	ldr	r3, [r7, #28]
 8101c94:	3b04      	subs	r3, #4
 8101c96:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8101c98:	687b      	ldr	r3, [r7, #4]
 8101c9a:	69fa      	ldr	r2, [r7, #28]
 8101c9c:	3212      	adds	r2, #18
 8101c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101ca2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8101ca4:	697b      	ldr	r3, [r7, #20]
 8101ca6:	3301      	adds	r3, #1
 8101ca8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8101caa:	69bb      	ldr	r3, [r7, #24]
 8101cac:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8101cae:	2b00      	cmp	r3, #0
 8101cb0:	db06      	blt.n	8101cc0 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8101cb2:	697a      	ldr	r2, [r7, #20]
 8101cb4:	68fb      	ldr	r3, [r7, #12]
 8101cb6:	429a      	cmp	r2, r3
 8101cb8:	d202      	bcs.n	8101cc0 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8101cba:	7cfb      	ldrb	r3, [r7, #19]
 8101cbc:	2b00      	cmp	r3, #0
 8101cbe:	d08f      	beq.n	8101be0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8101cc0:	687b      	ldr	r3, [r7, #4]
 8101cc2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8101cc4:	697b      	ldr	r3, [r7, #20]
 8101cc6:	441a      	add	r2, r3
 8101cc8:	687b      	ldr	r3, [r7, #4]
 8101cca:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8101ccc:	687b      	ldr	r3, [r7, #4]
 8101cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101cd0:	2b00      	cmp	r3, #0
 8101cd2:	d002      	beq.n	8101cda <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8101cd4:	6878      	ldr	r0, [r7, #4]
 8101cd6:	f000 f814 	bl	8101d02 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8101cda:	687b      	ldr	r3, [r7, #4]
 8101cdc:	69fa      	ldr	r2, [r7, #28]
 8101cde:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8101ce0:	7cfb      	ldrb	r3, [r7, #19]
 8101ce2:	2b01      	cmp	r3, #1
 8101ce4:	d108      	bne.n	8101cf8 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8101ce6:	687b      	ldr	r3, [r7, #4]
 8101ce8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8101cea:	683b      	ldr	r3, [r7, #0]
 8101cec:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8101cee:	687b      	ldr	r3, [r7, #4]
 8101cf0:	2200      	movs	r2, #0
 8101cf2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8101cf4:	2300      	movs	r3, #0
 8101cf6:	e000      	b.n	8101cfa <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8101cf8:	2301      	movs	r3, #1
}
 8101cfa:	4618      	mov	r0, r3
 8101cfc:	3720      	adds	r7, #32
 8101cfe:	46bd      	mov	sp, r7
 8101d00:	bd80      	pop	{r7, pc}

08101d02 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8101d02:	b580      	push	{r7, lr}
 8101d04:	b088      	sub	sp, #32
 8101d06:	af00      	add	r7, sp, #0
 8101d08:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8101d0a:	2300      	movs	r3, #0
 8101d0c:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8101d0e:	2301      	movs	r3, #1
 8101d10:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8101d12:	687b      	ldr	r3, [r7, #4]
 8101d14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101d16:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8101d18:	687b      	ldr	r3, [r7, #4]
 8101d1a:	69fa      	ldr	r2, [r7, #28]
 8101d1c:	3212      	adds	r2, #18
 8101d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101d22:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8101d24:	687b      	ldr	r3, [r7, #4]
 8101d26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101d28:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8101d2a:	e038      	b.n	8101d9e <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8101d2c:	697b      	ldr	r3, [r7, #20]
 8101d2e:	691b      	ldr	r3, [r3, #16]
 8101d30:	2b00      	cmp	r3, #0
 8101d32:	d112      	bne.n	8101d5a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8101d34:	f107 0308 	add.w	r3, r7, #8
 8101d38:	4618      	mov	r0, r3
 8101d3a:	f009 facf 	bl	810b2dc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8101d3e:	68bb      	ldr	r3, [r7, #8]
 8101d40:	2b00      	cmp	r3, #0
 8101d42:	d102      	bne.n	8101d4a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8101d44:	2300      	movs	r3, #0
 8101d46:	74fb      	strb	r3, [r7, #19]
 8101d48:	e007      	b.n	8101d5a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8101d4a:	68bb      	ldr	r3, [r7, #8]
 8101d4c:	461a      	mov	r2, r3
 8101d4e:	697b      	ldr	r3, [r7, #20]
 8101d50:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8101d52:	68bb      	ldr	r3, [r7, #8]
 8101d54:	461a      	mov	r2, r3
 8101d56:	697b      	ldr	r3, [r7, #20]
 8101d58:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8101d5a:	7cfb      	ldrb	r3, [r7, #19]
 8101d5c:	2b00      	cmp	r3, #0
 8101d5e:	d01e      	beq.n	8101d9e <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8101d60:	687b      	ldr	r3, [r7, #4]
 8101d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101d64:	2b00      	cmp	r3, #0
 8101d66:	d004      	beq.n	8101d72 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8101d68:	697b      	ldr	r3, [r7, #20]
 8101d6a:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8101d6e:	60da      	str	r2, [r3, #12]
 8101d70:	e003      	b.n	8101d7a <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8101d72:	697b      	ldr	r3, [r7, #20]
 8101d74:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8101d78:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8101d7a:	69fb      	ldr	r3, [r7, #28]
 8101d7c:	3301      	adds	r3, #1
 8101d7e:	61fb      	str	r3, [r7, #28]
 8101d80:	69fb      	ldr	r3, [r7, #28]
 8101d82:	2b03      	cmp	r3, #3
 8101d84:	d902      	bls.n	8101d8c <ETH_UpdateDescriptor+0x8a>
 8101d86:	69fb      	ldr	r3, [r7, #28]
 8101d88:	3b04      	subs	r3, #4
 8101d8a:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8101d8c:	687b      	ldr	r3, [r7, #4]
 8101d8e:	69fa      	ldr	r2, [r7, #28]
 8101d90:	3212      	adds	r2, #18
 8101d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101d96:	617b      	str	r3, [r7, #20]
      desccount--;
 8101d98:	69bb      	ldr	r3, [r7, #24]
 8101d9a:	3b01      	subs	r3, #1
 8101d9c:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8101d9e:	69bb      	ldr	r3, [r7, #24]
 8101da0:	2b00      	cmp	r3, #0
 8101da2:	d002      	beq.n	8101daa <ETH_UpdateDescriptor+0xa8>
 8101da4:	7cfb      	ldrb	r3, [r7, #19]
 8101da6:	2b00      	cmp	r3, #0
 8101da8:	d1c0      	bne.n	8101d2c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8101daa:	687b      	ldr	r3, [r7, #4]
 8101dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101dae:	69ba      	ldr	r2, [r7, #24]
 8101db0:	429a      	cmp	r2, r3
 8101db2:	d01b      	beq.n	8101dec <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8101db4:	69fb      	ldr	r3, [r7, #28]
 8101db6:	3301      	adds	r3, #1
 8101db8:	f003 0303 	and.w	r3, r3, #3
 8101dbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8101dbe:	f3bf 8f5f 	dmb	sy
}
 8101dc2:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8101dc4:	687b      	ldr	r3, [r7, #4]
 8101dc6:	6919      	ldr	r1, [r3, #16]
 8101dc8:	68fa      	ldr	r2, [r7, #12]
 8101dca:	4613      	mov	r3, r2
 8101dcc:	005b      	lsls	r3, r3, #1
 8101dce:	4413      	add	r3, r2
 8101dd0:	00db      	lsls	r3, r3, #3
 8101dd2:	18ca      	adds	r2, r1, r3
 8101dd4:	687b      	ldr	r3, [r7, #4]
 8101dd6:	681b      	ldr	r3, [r3, #0]
 8101dd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101ddc:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8101de0:	687b      	ldr	r3, [r7, #4]
 8101de2:	69fa      	ldr	r2, [r7, #28]
 8101de4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8101de6:	687b      	ldr	r3, [r7, #4]
 8101de8:	69ba      	ldr	r2, [r7, #24]
 8101dea:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8101dec:	bf00      	nop
 8101dee:	3720      	adds	r7, #32
 8101df0:	46bd      	mov	sp, r7
 8101df2:	bd80      	pop	{r7, pc}

08101df4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8101df4:	b580      	push	{r7, lr}
 8101df6:	b086      	sub	sp, #24
 8101df8:	af00      	add	r7, sp, #0
 8101dfa:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8101dfc:	687b      	ldr	r3, [r7, #4]
 8101dfe:	3318      	adds	r3, #24
 8101e00:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8101e02:	68bb      	ldr	r3, [r7, #8]
 8101e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101e06:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8101e08:	68bb      	ldr	r3, [r7, #8]
 8101e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101e0c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8101e0e:	2301      	movs	r3, #1
 8101e10:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8101e12:	e047      	b.n	8101ea4 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8101e14:	2301      	movs	r3, #1
 8101e16:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8101e18:	697b      	ldr	r3, [r7, #20]
 8101e1a:	3b01      	subs	r3, #1
 8101e1c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8101e1e:	68ba      	ldr	r2, [r7, #8]
 8101e20:	693b      	ldr	r3, [r7, #16]
 8101e22:	3304      	adds	r3, #4
 8101e24:	009b      	lsls	r3, r3, #2
 8101e26:	4413      	add	r3, r2
 8101e28:	685b      	ldr	r3, [r3, #4]
 8101e2a:	2b00      	cmp	r3, #0
 8101e2c:	d10a      	bne.n	8101e44 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8101e2e:	693b      	ldr	r3, [r7, #16]
 8101e30:	3301      	adds	r3, #1
 8101e32:	613b      	str	r3, [r7, #16]
 8101e34:	693b      	ldr	r3, [r7, #16]
 8101e36:	2b03      	cmp	r3, #3
 8101e38:	d902      	bls.n	8101e40 <HAL_ETH_ReleaseTxPacket+0x4c>
 8101e3a:	693b      	ldr	r3, [r7, #16]
 8101e3c:	3b04      	subs	r3, #4
 8101e3e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8101e40:	2300      	movs	r3, #0
 8101e42:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8101e44:	7bbb      	ldrb	r3, [r7, #14]
 8101e46:	2b00      	cmp	r3, #0
 8101e48:	d02c      	beq.n	8101ea4 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8101e4a:	687b      	ldr	r3, [r7, #4]
 8101e4c:	68d9      	ldr	r1, [r3, #12]
 8101e4e:	693a      	ldr	r2, [r7, #16]
 8101e50:	4613      	mov	r3, r2
 8101e52:	005b      	lsls	r3, r3, #1
 8101e54:	4413      	add	r3, r2
 8101e56:	00db      	lsls	r3, r3, #3
 8101e58:	440b      	add	r3, r1
 8101e5a:	68db      	ldr	r3, [r3, #12]
 8101e5c:	2b00      	cmp	r3, #0
 8101e5e:	db1f      	blt.n	8101ea0 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8101e60:	68ba      	ldr	r2, [r7, #8]
 8101e62:	693b      	ldr	r3, [r7, #16]
 8101e64:	3304      	adds	r3, #4
 8101e66:	009b      	lsls	r3, r3, #2
 8101e68:	4413      	add	r3, r2
 8101e6a:	685b      	ldr	r3, [r3, #4]
 8101e6c:	4618      	mov	r0, r3
 8101e6e:	f009 f9ff 	bl	810b270 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8101e72:	68ba      	ldr	r2, [r7, #8]
 8101e74:	693b      	ldr	r3, [r7, #16]
 8101e76:	3304      	adds	r3, #4
 8101e78:	009b      	lsls	r3, r3, #2
 8101e7a:	4413      	add	r3, r2
 8101e7c:	2200      	movs	r2, #0
 8101e7e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8101e80:	693b      	ldr	r3, [r7, #16]
 8101e82:	3301      	adds	r3, #1
 8101e84:	613b      	str	r3, [r7, #16]
 8101e86:	693b      	ldr	r3, [r7, #16]
 8101e88:	2b03      	cmp	r3, #3
 8101e8a:	d902      	bls.n	8101e92 <HAL_ETH_ReleaseTxPacket+0x9e>
 8101e8c:	693b      	ldr	r3, [r7, #16]
 8101e8e:	3b04      	subs	r3, #4
 8101e90:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8101e92:	68bb      	ldr	r3, [r7, #8]
 8101e94:	697a      	ldr	r2, [r7, #20]
 8101e96:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8101e98:	68bb      	ldr	r3, [r7, #8]
 8101e9a:	693a      	ldr	r2, [r7, #16]
 8101e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8101e9e:	e001      	b.n	8101ea4 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8101ea0:	2300      	movs	r3, #0
 8101ea2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8101ea4:	697b      	ldr	r3, [r7, #20]
 8101ea6:	2b00      	cmp	r3, #0
 8101ea8:	d002      	beq.n	8101eb0 <HAL_ETH_ReleaseTxPacket+0xbc>
 8101eaa:	7bfb      	ldrb	r3, [r7, #15]
 8101eac:	2b00      	cmp	r3, #0
 8101eae:	d1b1      	bne.n	8101e14 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8101eb0:	2300      	movs	r3, #0
}
 8101eb2:	4618      	mov	r0, r3
 8101eb4:	3718      	adds	r7, #24
 8101eb6:	46bd      	mov	sp, r7
 8101eb8:	bd80      	pop	{r7, pc}
	...

08101ebc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8101ebc:	b580      	push	{r7, lr}
 8101ebe:	b086      	sub	sp, #24
 8101ec0:	af00      	add	r7, sp, #0
 8101ec2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8101ec4:	687b      	ldr	r3, [r7, #4]
 8101ec6:	681b      	ldr	r3, [r3, #0]
 8101ec8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8101ecc:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8101ece:	687b      	ldr	r3, [r7, #4]
 8101ed0:	681b      	ldr	r3, [r3, #0]
 8101ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101ed6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8101eda:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8101edc:	687b      	ldr	r3, [r7, #4]
 8101ede:	681b      	ldr	r3, [r3, #0]
 8101ee0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101ee4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8101ee8:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->RPR2);
 8101eea:	4b6d      	ldr	r3, [pc, #436]	@ (81020a0 <HAL_ETH_IRQHandler+0x1e4>)
 8101eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101eee:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8101ef0:	693b      	ldr	r3, [r7, #16]
 8101ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8101ef6:	2b00      	cmp	r3, #0
 8101ef8:	d010      	beq.n	8101f1c <HAL_ETH_IRQHandler+0x60>
 8101efa:	68fb      	ldr	r3, [r7, #12]
 8101efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8101f00:	2b00      	cmp	r3, #0
 8101f02:	d00b      	beq.n	8101f1c <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8101f04:	687b      	ldr	r3, [r7, #4]
 8101f06:	681b      	ldr	r3, [r3, #0]
 8101f08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101f0c:	461a      	mov	r2, r3
 8101f0e:	f248 0340 	movw	r3, #32832	@ 0x8040
 8101f12:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8101f16:	6878      	ldr	r0, [r7, #4]
 8101f18:	f009 fa38 	bl	810b38c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8101f1c:	693b      	ldr	r3, [r7, #16]
 8101f1e:	f003 0301 	and.w	r3, r3, #1
 8101f22:	2b00      	cmp	r3, #0
 8101f24:	d010      	beq.n	8101f48 <HAL_ETH_IRQHandler+0x8c>
 8101f26:	68fb      	ldr	r3, [r7, #12]
 8101f28:	f003 0301 	and.w	r3, r3, #1
 8101f2c:	2b00      	cmp	r3, #0
 8101f2e:	d00b      	beq.n	8101f48 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8101f30:	687b      	ldr	r3, [r7, #4]
 8101f32:	681b      	ldr	r3, [r3, #0]
 8101f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101f38:	461a      	mov	r2, r3
 8101f3a:	f248 0301 	movw	r3, #32769	@ 0x8001
 8101f3e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8101f42:	6878      	ldr	r0, [r7, #4]
 8101f44:	f009 fa3e 	bl	810b3c4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8101f48:	693b      	ldr	r3, [r7, #16]
 8101f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101f4e:	2b00      	cmp	r3, #0
 8101f50:	d047      	beq.n	8101fe2 <HAL_ETH_IRQHandler+0x126>
 8101f52:	68fb      	ldr	r3, [r7, #12]
 8101f54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101f58:	2b00      	cmp	r3, #0
 8101f5a:	d042      	beq.n	8101fe2 <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8101f5c:	687b      	ldr	r3, [r7, #4]
 8101f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8101f62:	f043 0208 	orr.w	r2, r3, #8
 8101f66:	687b      	ldr	r3, [r7, #4]
 8101f68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8101f6c:	693b      	ldr	r3, [r7, #16]
 8101f6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8101f72:	2b00      	cmp	r3, #0
 8101f74:	d01e      	beq.n	8101fb4 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8101f76:	687b      	ldr	r3, [r7, #4]
 8101f78:	681b      	ldr	r3, [r3, #0]
 8101f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101f7e:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8101f82:	f241 1302 	movw	r3, #4354	@ 0x1102
 8101f86:	4013      	ands	r3, r2
 8101f88:	687a      	ldr	r2, [r7, #4]
 8101f8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8101f8e:	687b      	ldr	r3, [r7, #4]
 8101f90:	681b      	ldr	r3, [r3, #0]
 8101f92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101f96:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8101f9a:	687a      	ldr	r2, [r7, #4]
 8101f9c:	6812      	ldr	r2, [r2, #0]
 8101f9e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8101fa2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8101fa6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8101faa:	687b      	ldr	r3, [r7, #4]
 8101fac:	22e0      	movs	r2, #224	@ 0xe0
 8101fae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8101fb2:	e013      	b.n	8101fdc <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8101fb4:	687b      	ldr	r3, [r7, #4]
 8101fb6:	681b      	ldr	r3, [r3, #0]
 8101fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101fbc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8101fc0:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8101fc4:	687b      	ldr	r3, [r7, #4]
 8101fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8101fca:	687b      	ldr	r3, [r7, #4]
 8101fcc:	681b      	ldr	r3, [r3, #0]
 8101fce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8101fd2:	461a      	mov	r2, r3
 8101fd4:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8101fd8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8101fdc:	6878      	ldr	r0, [r7, #4]
 8101fde:	f000 f861 	bl	81020a4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8101fe2:	697b      	ldr	r3, [r7, #20]
 8101fe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101fe8:	2b00      	cmp	r3, #0
 8101fea:	d104      	bne.n	8101ff6 <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8101fec:	697b      	ldr	r3, [r7, #20]
 8101fee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8101ff2:	2b00      	cmp	r3, #0
 8101ff4:	d019      	beq.n	810202a <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8101ffc:	f043 0210 	orr.w	r2, r3, #16
 8102000:	687b      	ldr	r3, [r7, #4]
 8102002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	681b      	ldr	r3, [r3, #0]
 810200a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 810200e:	687b      	ldr	r3, [r7, #4]
 8102010:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8102014:	687b      	ldr	r3, [r7, #4]
 8102016:	22e0      	movs	r2, #224	@ 0xe0
 8102018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 810201c:	6878      	ldr	r0, [r7, #4]
 810201e:	f000 f841 	bl	81020a4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8102022:	687b      	ldr	r3, [r7, #4]
 8102024:	2200      	movs	r2, #0
 8102026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 810202a:	697b      	ldr	r3, [r7, #20]
 810202c:	f003 0310 	and.w	r3, r3, #16
 8102030:	2b00      	cmp	r3, #0
 8102032:	d00f      	beq.n	8102054 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8102034:	687b      	ldr	r3, [r7, #4]
 8102036:	681b      	ldr	r3, [r3, #0]
 8102038:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810203c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8102040:	687b      	ldr	r3, [r7, #4]
 8102042:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8102046:	6878      	ldr	r0, [r7, #4]
 8102048:	f000 f836 	bl	81020b8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 810204c:	687b      	ldr	r3, [r7, #4]
 810204e:	2200      	movs	r2, #0
 8102050:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8102054:	697b      	ldr	r3, [r7, #20]
 8102056:	f003 0320 	and.w	r3, r3, #32
 810205a:	2b00      	cmp	r3, #0
 810205c:	d00f      	beq.n	810207e <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 810205e:	687b      	ldr	r3, [r7, #4]
 8102060:	681b      	ldr	r3, [r3, #0]
 8102062:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8102066:	f003 020f 	and.w	r2, r3, #15
 810206a:	687b      	ldr	r3, [r7, #4]
 810206c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8102070:	6878      	ldr	r0, [r7, #4]
 8102072:	f000 f82b 	bl	81020cc <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	2200      	movs	r2, #0
 810207a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 810207e:	68bb      	ldr	r3, [r7, #8]
 8102080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8102084:	2b00      	cmp	r3, #0
 8102086:	d006      	beq.n	8102096 <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8102088:	4b05      	ldr	r3, [pc, #20]	@ (81020a0 <HAL_ETH_IRQHandler+0x1e4>)
 810208a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 810208e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8102090:	6878      	ldr	r0, [r7, #4]
 8102092:	f000 f825 	bl	81020e0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8102096:	bf00      	nop
 8102098:	3718      	adds	r7, #24
 810209a:	46bd      	mov	sp, r7
 810209c:	bd80      	pop	{r7, pc}
 810209e:	bf00      	nop
 81020a0:	44022000 	.word	0x44022000

081020a4 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 81020a4:	b480      	push	{r7}
 81020a6:	b083      	sub	sp, #12
 81020a8:	af00      	add	r7, sp, #0
 81020aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 81020ac:	bf00      	nop
 81020ae:	370c      	adds	r7, #12
 81020b0:	46bd      	mov	sp, r7
 81020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020b6:	4770      	bx	lr

081020b8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 81020b8:	b480      	push	{r7}
 81020ba:	b083      	sub	sp, #12
 81020bc:	af00      	add	r7, sp, #0
 81020be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 81020c0:	bf00      	nop
 81020c2:	370c      	adds	r7, #12
 81020c4:	46bd      	mov	sp, r7
 81020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020ca:	4770      	bx	lr

081020cc <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 81020cc:	b480      	push	{r7}
 81020ce:	b083      	sub	sp, #12
 81020d0:	af00      	add	r7, sp, #0
 81020d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 81020d4:	bf00      	nop
 81020d6:	370c      	adds	r7, #12
 81020d8:	46bd      	mov	sp, r7
 81020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020de:	4770      	bx	lr

081020e0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 81020e0:	b480      	push	{r7}
 81020e2:	b083      	sub	sp, #12
 81020e4:	af00      	add	r7, sp, #0
 81020e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 81020e8:	bf00      	nop
 81020ea:	370c      	adds	r7, #12
 81020ec:	46bd      	mov	sp, r7
 81020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020f2:	4770      	bx	lr

081020f4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 81020f4:	b580      	push	{r7, lr}
 81020f6:	b086      	sub	sp, #24
 81020f8:	af00      	add	r7, sp, #0
 81020fa:	60f8      	str	r0, [r7, #12]
 81020fc:	60b9      	str	r1, [r7, #8]
 81020fe:	607a      	str	r2, [r7, #4]
 8102100:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8102102:	68fb      	ldr	r3, [r7, #12]
 8102104:	681b      	ldr	r3, [r3, #0]
 8102106:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810210a:	f003 0301 	and.w	r3, r3, #1
 810210e:	2b00      	cmp	r3, #0
 8102110:	d001      	beq.n	8102116 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8102112:	2301      	movs	r3, #1
 8102114:	e03e      	b.n	8102194 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8102116:	68fb      	ldr	r3, [r7, #12]
 8102118:	681b      	ldr	r3, [r3, #0]
 810211a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810211e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8102120:	697b      	ldr	r3, [r7, #20]
 8102122:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8102126:	68bb      	ldr	r3, [r7, #8]
 8102128:	055b      	lsls	r3, r3, #21
 810212a:	4313      	orrs	r3, r2
 810212c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 810212e:	697b      	ldr	r3, [r7, #20]
 8102130:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8102134:	687b      	ldr	r3, [r7, #4]
 8102136:	041b      	lsls	r3, r3, #16
 8102138:	4313      	orrs	r3, r2
 810213a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 810213c:	697b      	ldr	r3, [r7, #20]
 810213e:	f043 030c 	orr.w	r3, r3, #12
 8102142:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8102144:	697b      	ldr	r3, [r7, #20]
 8102146:	f043 0301 	orr.w	r3, r3, #1
 810214a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 810214c:	68fb      	ldr	r3, [r7, #12]
 810214e:	681b      	ldr	r3, [r3, #0]
 8102150:	697a      	ldr	r2, [r7, #20]
 8102152:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8102156:	f7ff f9a9 	bl	81014ac <HAL_GetTick>
 810215a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810215c:	e009      	b.n	8102172 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 810215e:	f7ff f9a5 	bl	81014ac <HAL_GetTick>
 8102162:	4602      	mov	r2, r0
 8102164:	693b      	ldr	r3, [r7, #16]
 8102166:	1ad3      	subs	r3, r2, r3
 8102168:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 810216c:	d901      	bls.n	8102172 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 810216e:	2301      	movs	r3, #1
 8102170:	e010      	b.n	8102194 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8102172:	68fb      	ldr	r3, [r7, #12]
 8102174:	681b      	ldr	r3, [r3, #0]
 8102176:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810217a:	f003 0301 	and.w	r3, r3, #1
 810217e:	2b00      	cmp	r3, #0
 8102180:	d1ed      	bne.n	810215e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8102182:	68fb      	ldr	r3, [r7, #12]
 8102184:	681b      	ldr	r3, [r3, #0]
 8102186:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 810218a:	b29b      	uxth	r3, r3
 810218c:	461a      	mov	r2, r3
 810218e:	683b      	ldr	r3, [r7, #0]
 8102190:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8102192:	2300      	movs	r3, #0
}
 8102194:	4618      	mov	r0, r3
 8102196:	3718      	adds	r7, #24
 8102198:	46bd      	mov	sp, r7
 810219a:	bd80      	pop	{r7, pc}

0810219c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 810219c:	b580      	push	{r7, lr}
 810219e:	b086      	sub	sp, #24
 81021a0:	af00      	add	r7, sp, #0
 81021a2:	60f8      	str	r0, [r7, #12]
 81021a4:	60b9      	str	r1, [r7, #8]
 81021a6:	607a      	str	r2, [r7, #4]
 81021a8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 81021aa:	68fb      	ldr	r3, [r7, #12]
 81021ac:	681b      	ldr	r3, [r3, #0]
 81021ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 81021b2:	f003 0301 	and.w	r3, r3, #1
 81021b6:	2b00      	cmp	r3, #0
 81021b8:	d001      	beq.n	81021be <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 81021ba:	2301      	movs	r3, #1
 81021bc:	e03c      	b.n	8102238 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 81021be:	68fb      	ldr	r3, [r7, #12]
 81021c0:	681b      	ldr	r3, [r3, #0]
 81021c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 81021c6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 81021c8:	697b      	ldr	r3, [r7, #20]
 81021ca:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 81021ce:	68bb      	ldr	r3, [r7, #8]
 81021d0:	055b      	lsls	r3, r3, #21
 81021d2:	4313      	orrs	r3, r2
 81021d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 81021d6:	697b      	ldr	r3, [r7, #20]
 81021d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 81021dc:	687b      	ldr	r3, [r7, #4]
 81021de:	041b      	lsls	r3, r3, #16
 81021e0:	4313      	orrs	r3, r2
 81021e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 81021e4:	697b      	ldr	r3, [r7, #20]
 81021e6:	f023 030c 	bic.w	r3, r3, #12
 81021ea:	f043 0304 	orr.w	r3, r3, #4
 81021ee:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 81021f0:	697b      	ldr	r3, [r7, #20]
 81021f2:	f043 0301 	orr.w	r3, r3, #1
 81021f6:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 81021f8:	683b      	ldr	r3, [r7, #0]
 81021fa:	b29a      	uxth	r2, r3
 81021fc:	4b10      	ldr	r3, [pc, #64]	@ (8102240 <HAL_ETH_WritePHYRegister+0xa4>)
 81021fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8102202:	4a0f      	ldr	r2, [pc, #60]	@ (8102240 <HAL_ETH_WritePHYRegister+0xa4>)
 8102204:	697b      	ldr	r3, [r7, #20]
 8102206:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 810220a:	f7ff f94f 	bl	81014ac <HAL_GetTick>
 810220e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8102210:	e009      	b.n	8102226 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8102212:	f7ff f94b 	bl	81014ac <HAL_GetTick>
 8102216:	4602      	mov	r2, r0
 8102218:	693b      	ldr	r3, [r7, #16]
 810221a:	1ad3      	subs	r3, r2, r3
 810221c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8102220:	d901      	bls.n	8102226 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8102222:	2301      	movs	r3, #1
 8102224:	e008      	b.n	8102238 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8102226:	68fb      	ldr	r3, [r7, #12]
 8102228:	681b      	ldr	r3, [r3, #0]
 810222a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810222e:	f003 0301 	and.w	r3, r3, #1
 8102232:	2b00      	cmp	r3, #0
 8102234:	d1ed      	bne.n	8102212 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8102236:	2300      	movs	r3, #0
}
 8102238:	4618      	mov	r0, r3
 810223a:	3718      	adds	r7, #24
 810223c:	46bd      	mov	sp, r7
 810223e:	bd80      	pop	{r7, pc}
 8102240:	40028000 	.word	0x40028000

08102244 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8102244:	b480      	push	{r7}
 8102246:	b083      	sub	sp, #12
 8102248:	af00      	add	r7, sp, #0
 810224a:	6078      	str	r0, [r7, #4]
 810224c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 810224e:	683b      	ldr	r3, [r7, #0]
 8102250:	2b00      	cmp	r3, #0
 8102252:	d101      	bne.n	8102258 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8102254:	2301      	movs	r3, #1
 8102256:	e1c3      	b.n	81025e0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8102258:	687b      	ldr	r3, [r7, #4]
 810225a:	681b      	ldr	r3, [r3, #0]
 810225c:	681b      	ldr	r3, [r3, #0]
 810225e:	f003 020c 	and.w	r2, r3, #12
 8102262:	683b      	ldr	r3, [r7, #0]
 8102264:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8102266:	687b      	ldr	r3, [r7, #4]
 8102268:	681b      	ldr	r3, [r3, #0]
 810226a:	681b      	ldr	r3, [r3, #0]
 810226c:	f003 0310 	and.w	r3, r3, #16
 8102270:	2b00      	cmp	r3, #0
 8102272:	bf14      	ite	ne
 8102274:	2301      	movne	r3, #1
 8102276:	2300      	moveq	r3, #0
 8102278:	b2db      	uxtb	r3, r3
 810227a:	461a      	mov	r2, r3
 810227c:	683b      	ldr	r3, [r7, #0]
 810227e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8102282:	687b      	ldr	r3, [r7, #4]
 8102284:	681b      	ldr	r3, [r3, #0]
 8102286:	681b      	ldr	r3, [r3, #0]
 8102288:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 810228c:	683b      	ldr	r3, [r7, #0]
 810228e:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8102290:	687b      	ldr	r3, [r7, #4]
 8102292:	681b      	ldr	r3, [r3, #0]
 8102294:	681b      	ldr	r3, [r3, #0]
 8102296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810229a:	2b00      	cmp	r3, #0
 810229c:	bf0c      	ite	eq
 810229e:	2301      	moveq	r3, #1
 81022a0:	2300      	movne	r3, #0
 81022a2:	b2db      	uxtb	r3, r3
 81022a4:	461a      	mov	r2, r3
 81022a6:	683b      	ldr	r3, [r7, #0]
 81022a8:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 81022ac:	687b      	ldr	r3, [r7, #4]
 81022ae:	681b      	ldr	r3, [r3, #0]
 81022b0:	681b      	ldr	r3, [r3, #0]
 81022b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 81022b6:	2b00      	cmp	r3, #0
 81022b8:	bf14      	ite	ne
 81022ba:	2301      	movne	r3, #1
 81022bc:	2300      	moveq	r3, #0
 81022be:	b2db      	uxtb	r3, r3
 81022c0:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 81022c2:	683b      	ldr	r3, [r7, #0]
 81022c4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 81022c6:	687b      	ldr	r3, [r7, #4]
 81022c8:	681b      	ldr	r3, [r3, #0]
 81022ca:	681b      	ldr	r3, [r3, #0]
 81022cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81022d0:	2b00      	cmp	r3, #0
 81022d2:	bf0c      	ite	eq
 81022d4:	2301      	moveq	r3, #1
 81022d6:	2300      	movne	r3, #0
 81022d8:	b2db      	uxtb	r3, r3
 81022da:	461a      	mov	r2, r3
 81022dc:	683b      	ldr	r3, [r7, #0]
 81022de:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 81022e0:	687b      	ldr	r3, [r7, #4]
 81022e2:	681b      	ldr	r3, [r3, #0]
 81022e4:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 81022e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81022ea:	2b00      	cmp	r3, #0
 81022ec:	bf14      	ite	ne
 81022ee:	2301      	movne	r3, #1
 81022f0:	2300      	moveq	r3, #0
 81022f2:	b2db      	uxtb	r3, r3
 81022f4:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 81022f6:	683b      	ldr	r3, [r7, #0]
 81022f8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 81022fa:	687b      	ldr	r3, [r7, #4]
 81022fc:	681b      	ldr	r3, [r3, #0]
 81022fe:	681b      	ldr	r3, [r3, #0]
 8102300:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8102304:	2b00      	cmp	r3, #0
 8102306:	bf14      	ite	ne
 8102308:	2301      	movne	r3, #1
 810230a:	2300      	moveq	r3, #0
 810230c:	b2db      	uxtb	r3, r3
 810230e:	461a      	mov	r2, r3
 8102310:	683b      	ldr	r3, [r7, #0]
 8102312:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8102314:	687b      	ldr	r3, [r7, #4]
 8102316:	681b      	ldr	r3, [r3, #0]
 8102318:	681b      	ldr	r3, [r3, #0]
 810231a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 810231e:	683b      	ldr	r3, [r7, #0]
 8102320:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8102322:	687b      	ldr	r3, [r7, #4]
 8102324:	681b      	ldr	r3, [r3, #0]
 8102326:	681b      	ldr	r3, [r3, #0]
 8102328:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 810232c:	683b      	ldr	r3, [r7, #0]
 810232e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	681b      	ldr	r3, [r3, #0]
 8102334:	681b      	ldr	r3, [r3, #0]
 8102336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810233a:	2b00      	cmp	r3, #0
 810233c:	bf14      	ite	ne
 810233e:	2301      	movne	r3, #1
 8102340:	2300      	moveq	r3, #0
 8102342:	b2db      	uxtb	r3, r3
 8102344:	461a      	mov	r2, r3
 8102346:	683b      	ldr	r3, [r7, #0]
 8102348:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	681b      	ldr	r3, [r3, #0]
 810234e:	681b      	ldr	r3, [r3, #0]
 8102350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102354:	2b00      	cmp	r3, #0
 8102356:	bf0c      	ite	eq
 8102358:	2301      	moveq	r3, #1
 810235a:	2300      	movne	r3, #0
 810235c:	b2db      	uxtb	r3, r3
 810235e:	461a      	mov	r2, r3
 8102360:	683b      	ldr	r3, [r7, #0]
 8102362:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8102364:	687b      	ldr	r3, [r7, #4]
 8102366:	681b      	ldr	r3, [r3, #0]
 8102368:	681b      	ldr	r3, [r3, #0]
 810236a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 810236e:	2b00      	cmp	r3, #0
 8102370:	bf0c      	ite	eq
 8102372:	2301      	moveq	r3, #1
 8102374:	2300      	movne	r3, #0
 8102376:	b2db      	uxtb	r3, r3
 8102378:	461a      	mov	r2, r3
 810237a:	683b      	ldr	r3, [r7, #0]
 810237c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 810237e:	687b      	ldr	r3, [r7, #4]
 8102380:	681b      	ldr	r3, [r3, #0]
 8102382:	681b      	ldr	r3, [r3, #0]
 8102384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8102388:	2b00      	cmp	r3, #0
 810238a:	bf14      	ite	ne
 810238c:	2301      	movne	r3, #1
 810238e:	2300      	moveq	r3, #0
 8102390:	b2db      	uxtb	r3, r3
 8102392:	461a      	mov	r2, r3
 8102394:	683b      	ldr	r3, [r7, #0]
 8102396:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8102398:	687b      	ldr	r3, [r7, #4]
 810239a:	681b      	ldr	r3, [r3, #0]
 810239c:	681b      	ldr	r3, [r3, #0]
 810239e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81023a2:	2b00      	cmp	r3, #0
 81023a4:	bf14      	ite	ne
 81023a6:	2301      	movne	r3, #1
 81023a8:	2300      	moveq	r3, #0
 81023aa:	b2db      	uxtb	r3, r3
 81023ac:	461a      	mov	r2, r3
 81023ae:	683b      	ldr	r3, [r7, #0]
 81023b0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 81023b2:	687b      	ldr	r3, [r7, #4]
 81023b4:	681b      	ldr	r3, [r3, #0]
 81023b6:	681b      	ldr	r3, [r3, #0]
 81023b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81023bc:	2b00      	cmp	r3, #0
 81023be:	bf14      	ite	ne
 81023c0:	2301      	movne	r3, #1
 81023c2:	2300      	moveq	r3, #0
 81023c4:	b2db      	uxtb	r3, r3
 81023c6:	461a      	mov	r2, r3
 81023c8:	683b      	ldr	r3, [r7, #0]
 81023ca:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 81023cc:	687b      	ldr	r3, [r7, #4]
 81023ce:	681b      	ldr	r3, [r3, #0]
 81023d0:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 81023d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81023d6:	2b00      	cmp	r3, #0
 81023d8:	bf14      	ite	ne
 81023da:	2301      	movne	r3, #1
 81023dc:	2300      	moveq	r3, #0
 81023de:	b2db      	uxtb	r3, r3
 81023e0:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 81023e2:	683b      	ldr	r3, [r7, #0]
 81023e4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 81023e6:	687b      	ldr	r3, [r7, #4]
 81023e8:	681b      	ldr	r3, [r3, #0]
 81023ea:	681b      	ldr	r3, [r3, #0]
 81023ec:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 81023f0:	683b      	ldr	r3, [r7, #0]
 81023f2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 81023f4:	687b      	ldr	r3, [r7, #4]
 81023f6:	681b      	ldr	r3, [r3, #0]
 81023f8:	681b      	ldr	r3, [r3, #0]
 81023fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81023fe:	2b00      	cmp	r3, #0
 8102400:	bf14      	ite	ne
 8102402:	2301      	movne	r3, #1
 8102404:	2300      	moveq	r3, #0
 8102406:	b2db      	uxtb	r3, r3
 8102408:	461a      	mov	r2, r3
 810240a:	683b      	ldr	r3, [r7, #0]
 810240c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 810240e:	687b      	ldr	r3, [r7, #4]
 8102410:	681b      	ldr	r3, [r3, #0]
 8102412:	681b      	ldr	r3, [r3, #0]
 8102414:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8102418:	683b      	ldr	r3, [r7, #0]
 810241a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	681b      	ldr	r3, [r3, #0]
 8102420:	685b      	ldr	r3, [r3, #4]
 8102422:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8102426:	683b      	ldr	r3, [r7, #0]
 8102428:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 810242a:	687b      	ldr	r3, [r7, #4]
 810242c:	681b      	ldr	r3, [r3, #0]
 810242e:	685b      	ldr	r3, [r3, #4]
 8102430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8102434:	2b00      	cmp	r3, #0
 8102436:	bf0c      	ite	eq
 8102438:	2301      	moveq	r3, #1
 810243a:	2300      	movne	r3, #0
 810243c:	b2db      	uxtb	r3, r3
 810243e:	461a      	mov	r2, r3
 8102440:	683b      	ldr	r3, [r7, #0]
 8102442:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8102446:	687b      	ldr	r3, [r7, #4]
 8102448:	681b      	ldr	r3, [r3, #0]
 810244a:	685b      	ldr	r3, [r3, #4]
 810244c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102450:	2b00      	cmp	r3, #0
 8102452:	bf14      	ite	ne
 8102454:	2301      	movne	r3, #1
 8102456:	2300      	moveq	r3, #0
 8102458:	b2db      	uxtb	r3, r3
 810245a:	461a      	mov	r2, r3
 810245c:	683b      	ldr	r3, [r7, #0]
 810245e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	681b      	ldr	r3, [r3, #0]
 8102466:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8102468:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810246c:	2b00      	cmp	r3, #0
 810246e:	bf14      	ite	ne
 8102470:	2301      	movne	r3, #1
 8102472:	2300      	moveq	r3, #0
 8102474:	b2db      	uxtb	r3, r3
 8102476:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8102478:	683b      	ldr	r3, [r7, #0]
 810247a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 810247e:	687b      	ldr	r3, [r7, #4]
 8102480:	681b      	ldr	r3, [r3, #0]
 8102482:	685b      	ldr	r3, [r3, #4]
 8102484:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8102488:	2b00      	cmp	r3, #0
 810248a:	bf14      	ite	ne
 810248c:	2301      	movne	r3, #1
 810248e:	2300      	moveq	r3, #0
 8102490:	b2db      	uxtb	r3, r3
 8102492:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8102494:	683b      	ldr	r3, [r7, #0]
 8102496:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 810249a:	687b      	ldr	r3, [r7, #4]
 810249c:	681b      	ldr	r3, [r3, #0]
 810249e:	685b      	ldr	r3, [r3, #4]
 81024a0:	0e5b      	lsrs	r3, r3, #25
 81024a2:	f003 021f 	and.w	r2, r3, #31
 81024a6:	683b      	ldr	r3, [r7, #0]
 81024a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 81024aa:	687b      	ldr	r3, [r7, #4]
 81024ac:	681b      	ldr	r3, [r3, #0]
 81024ae:	68db      	ldr	r3, [r3, #12]
 81024b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81024b4:	2b00      	cmp	r3, #0
 81024b6:	bf14      	ite	ne
 81024b8:	2301      	movne	r3, #1
 81024ba:	2300      	moveq	r3, #0
 81024bc:	b2db      	uxtb	r3, r3
 81024be:	461a      	mov	r2, r3
 81024c0:	683b      	ldr	r3, [r7, #0]
 81024c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 81024c6:	687b      	ldr	r3, [r7, #4]
 81024c8:	681b      	ldr	r3, [r3, #0]
 81024ca:	68db      	ldr	r3, [r3, #12]
 81024cc:	f003 020f 	and.w	r2, r3, #15
 81024d0:	683b      	ldr	r3, [r7, #0]
 81024d2:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 81024d4:	687b      	ldr	r3, [r7, #4]
 81024d6:	681b      	ldr	r3, [r3, #0]
 81024d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81024da:	f003 0302 	and.w	r3, r3, #2
 81024de:	2b00      	cmp	r3, #0
 81024e0:	bf14      	ite	ne
 81024e2:	2301      	movne	r3, #1
 81024e4:	2300      	moveq	r3, #0
 81024e6:	b2db      	uxtb	r3, r3
 81024e8:	461a      	mov	r2, r3
 81024ea:	683b      	ldr	r3, [r7, #0]
 81024ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 81024f0:	687b      	ldr	r3, [r7, #4]
 81024f2:	681b      	ldr	r3, [r3, #0]
 81024f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81024f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81024fa:	2b00      	cmp	r3, #0
 81024fc:	bf0c      	ite	eq
 81024fe:	2301      	moveq	r3, #1
 8102500:	2300      	movne	r3, #0
 8102502:	b2db      	uxtb	r3, r3
 8102504:	461a      	mov	r2, r3
 8102506:	683b      	ldr	r3, [r7, #0]
 8102508:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	681b      	ldr	r3, [r3, #0]
 8102510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102512:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8102516:	683b      	ldr	r3, [r7, #0]
 8102518:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 810251a:	687b      	ldr	r3, [r7, #4]
 810251c:	681b      	ldr	r3, [r3, #0]
 810251e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102520:	0c1b      	lsrs	r3, r3, #16
 8102522:	b29a      	uxth	r2, r3
 8102524:	683b      	ldr	r3, [r7, #0]
 8102526:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	681b      	ldr	r3, [r3, #0]
 810252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102530:	f003 0301 	and.w	r3, r3, #1
 8102534:	2b00      	cmp	r3, #0
 8102536:	bf14      	ite	ne
 8102538:	2301      	movne	r3, #1
 810253a:	2300      	moveq	r3, #0
 810253c:	b2db      	uxtb	r3, r3
 810253e:	461a      	mov	r2, r3
 8102540:	683b      	ldr	r3, [r7, #0]
 8102542:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8102546:	687b      	ldr	r3, [r7, #4]
 8102548:	681b      	ldr	r3, [r3, #0]
 810254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810254e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8102552:	2b00      	cmp	r3, #0
 8102554:	bf14      	ite	ne
 8102556:	2301      	movne	r3, #1
 8102558:	2300      	moveq	r3, #0
 810255a:	b2db      	uxtb	r3, r3
 810255c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 810255e:	683b      	ldr	r3, [r7, #0]
 8102560:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8102564:	687b      	ldr	r3, [r7, #4]
 8102566:	681b      	ldr	r3, [r3, #0]
 8102568:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 810256c:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8102570:	683b      	ldr	r3, [r7, #0]
 8102572:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8102574:	687b      	ldr	r3, [r7, #4]
 8102576:	681b      	ldr	r3, [r3, #0]
 8102578:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 810257c:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8102580:	683b      	ldr	r3, [r7, #0]
 8102582:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8102584:	687b      	ldr	r3, [r7, #4]
 8102586:	681b      	ldr	r3, [r3, #0]
 8102588:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 810258c:	f003 0308 	and.w	r3, r3, #8
 8102590:	2b00      	cmp	r3, #0
 8102592:	bf14      	ite	ne
 8102594:	2301      	movne	r3, #1
 8102596:	2300      	moveq	r3, #0
 8102598:	b2db      	uxtb	r3, r3
 810259a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810259c:	683b      	ldr	r3, [r7, #0]
 810259e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 81025a2:	687b      	ldr	r3, [r7, #4]
 81025a4:	681b      	ldr	r3, [r3, #0]
 81025a6:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 81025aa:	f003 0310 	and.w	r3, r3, #16
 81025ae:	2b00      	cmp	r3, #0
 81025b0:	bf14      	ite	ne
 81025b2:	2301      	movne	r3, #1
 81025b4:	2300      	moveq	r3, #0
 81025b6:	b2db      	uxtb	r3, r3
 81025b8:	461a      	mov	r2, r3
 81025ba:	683b      	ldr	r3, [r7, #0]
 81025bc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 81025c0:	687b      	ldr	r3, [r7, #4]
 81025c2:	681b      	ldr	r3, [r3, #0]
 81025c4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 81025c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81025cc:	2b00      	cmp	r3, #0
 81025ce:	bf0c      	ite	eq
 81025d0:	2301      	moveq	r3, #1
 81025d2:	2300      	movne	r3, #0
 81025d4:	b2db      	uxtb	r3, r3
 81025d6:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 81025d8:	683b      	ldr	r3, [r7, #0]
 81025da:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 81025de:	2300      	movs	r3, #0
}
 81025e0:	4618      	mov	r0, r3
 81025e2:	370c      	adds	r7, #12
 81025e4:	46bd      	mov	sp, r7
 81025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025ea:	4770      	bx	lr

081025ec <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 81025ec:	b580      	push	{r7, lr}
 81025ee:	b082      	sub	sp, #8
 81025f0:	af00      	add	r7, sp, #0
 81025f2:	6078      	str	r0, [r7, #4]
 81025f4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 81025f6:	683b      	ldr	r3, [r7, #0]
 81025f8:	2b00      	cmp	r3, #0
 81025fa:	d101      	bne.n	8102600 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 81025fc:	2301      	movs	r3, #1
 81025fe:	e00b      	b.n	8102618 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8102600:	687b      	ldr	r3, [r7, #4]
 8102602:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102606:	2b10      	cmp	r3, #16
 8102608:	d105      	bne.n	8102616 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 810260a:	6839      	ldr	r1, [r7, #0]
 810260c:	6878      	ldr	r0, [r7, #4]
 810260e:	f000 f8bd 	bl	810278c <ETH_SetMACConfig>

    return HAL_OK;
 8102612:	2300      	movs	r3, #0
 8102614:	e000      	b.n	8102618 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8102616:	2301      	movs	r3, #1
  }
}
 8102618:	4618      	mov	r0, r3
 810261a:	3708      	adds	r7, #8
 810261c:	46bd      	mov	sp, r7
 810261e:	bd80      	pop	{r7, pc}

08102620 <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8102620:	b580      	push	{r7, lr}
 8102622:	b082      	sub	sp, #8
 8102624:	af00      	add	r7, sp, #0
 8102626:	6078      	str	r0, [r7, #4]
 8102628:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 810262a:	683b      	ldr	r3, [r7, #0]
 810262c:	2b00      	cmp	r3, #0
 810262e:	d101      	bne.n	8102634 <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 8102630:	2301      	movs	r3, #1
 8102632:	e00b      	b.n	810264c <HAL_ETH_SetDMAConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8102634:	687b      	ldr	r3, [r7, #4]
 8102636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810263a:	2b10      	cmp	r3, #16
 810263c:	d105      	bne.n	810264a <HAL_ETH_SetDMAConfig+0x2a>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 810263e:	6839      	ldr	r1, [r7, #0]
 8102640:	6878      	ldr	r0, [r7, #4]
 8102642:	f000 f9bf 	bl	81029c4 <ETH_SetDMAConfig>

    return HAL_OK;
 8102646:	2300      	movs	r3, #0
 8102648:	e000      	b.n	810264c <HAL_ETH_SetDMAConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 810264a:	2301      	movs	r3, #1
  }
}
 810264c:	4618      	mov	r0, r3
 810264e:	3708      	adds	r7, #8
 8102650:	46bd      	mov	sp, r7
 8102652:	bd80      	pop	{r7, pc}

08102654 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8102654:	b580      	push	{r7, lr}
 8102656:	b084      	sub	sp, #16
 8102658:	af00      	add	r7, sp, #0
 810265a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 810265c:	687b      	ldr	r3, [r7, #4]
 810265e:	681b      	ldr	r3, [r3, #0]
 8102660:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8102664:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8102666:	68fb      	ldr	r3, [r7, #12]
 8102668:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810266c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 810266e:	f001 fe7b 	bl	8104368 <HAL_RCC_GetHCLKFreq>
 8102672:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8102674:	68bb      	ldr	r3, [r7, #8]
 8102676:	4a1a      	ldr	r2, [pc, #104]	@ (81026e0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8102678:	4293      	cmp	r3, r2
 810267a:	d804      	bhi.n	8102686 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 810267c:	68fb      	ldr	r3, [r7, #12]
 810267e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8102682:	60fb      	str	r3, [r7, #12]
 8102684:	e022      	b.n	81026cc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8102686:	68bb      	ldr	r3, [r7, #8]
 8102688:	4a16      	ldr	r2, [pc, #88]	@ (81026e4 <HAL_ETH_SetMDIOClockRange+0x90>)
 810268a:	4293      	cmp	r3, r2
 810268c:	d204      	bcs.n	8102698 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 810268e:	68fb      	ldr	r3, [r7, #12]
 8102690:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8102694:	60fb      	str	r3, [r7, #12]
 8102696:	e019      	b.n	81026cc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8102698:	68bb      	ldr	r3, [r7, #8]
 810269a:	4a13      	ldr	r2, [pc, #76]	@ (81026e8 <HAL_ETH_SetMDIOClockRange+0x94>)
 810269c:	4293      	cmp	r3, r2
 810269e:	d915      	bls.n	81026cc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 81026a0:	68bb      	ldr	r3, [r7, #8]
 81026a2:	4a12      	ldr	r2, [pc, #72]	@ (81026ec <HAL_ETH_SetMDIOClockRange+0x98>)
 81026a4:	4293      	cmp	r3, r2
 81026a6:	d804      	bhi.n	81026b2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 81026a8:	68fb      	ldr	r3, [r7, #12]
 81026aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81026ae:	60fb      	str	r3, [r7, #12]
 81026b0:	e00c      	b.n	81026cc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 81026b2:	68bb      	ldr	r3, [r7, #8]
 81026b4:	4a0e      	ldr	r2, [pc, #56]	@ (81026f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 81026b6:	4293      	cmp	r3, r2
 81026b8:	d804      	bhi.n	81026c4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 81026ba:	68fb      	ldr	r3, [r7, #12]
 81026bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 81026c0:	60fb      	str	r3, [r7, #12]
 81026c2:	e003      	b.n	81026cc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 81026c4:	68fb      	ldr	r3, [r7, #12]
 81026c6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 81026ca:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 81026cc:	687b      	ldr	r3, [r7, #4]
 81026ce:	681b      	ldr	r3, [r3, #0]
 81026d0:	68fa      	ldr	r2, [r7, #12]
 81026d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 81026d6:	bf00      	nop
 81026d8:	3710      	adds	r7, #16
 81026da:	46bd      	mov	sp, r7
 81026dc:	bd80      	pop	{r7, pc}
 81026de:	bf00      	nop
 81026e0:	02160ebf 	.word	0x02160ebf
 81026e4:	03938700 	.word	0x03938700
 81026e8:	05f5e0ff 	.word	0x05f5e0ff
 81026ec:	08f0d17f 	.word	0x08f0d17f
 81026f0:	0ee6b27f 	.word	0x0ee6b27f

081026f4 <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, const ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 81026f4:	b480      	push	{r7}
 81026f6:	b085      	sub	sp, #20
 81026f8:	af00      	add	r7, sp, #0
 81026fa:	6078      	str	r0, [r7, #4]
 81026fc:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;

  if (pFilterConfig == NULL)
 81026fe:	683b      	ldr	r3, [r7, #0]
 8102700:	2b00      	cmp	r3, #0
 8102702:	d101      	bne.n	8102708 <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 8102704:	2301      	movs	r3, #1
 8102706:	e039      	b.n	810277c <HAL_ETH_SetMACFilterConfig+0x88>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8102708:	683b      	ldr	r3, [r7, #0]
 810270a:	781b      	ldrb	r3, [r3, #0]
 810270c:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 810270e:	683b      	ldr	r3, [r7, #0]
 8102710:	78db      	ldrb	r3, [r3, #3]
 8102712:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8102714:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8102716:	683b      	ldr	r3, [r7, #0]
 8102718:	791b      	ldrb	r3, [r3, #4]
 810271a:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 810271c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 810271e:	683b      	ldr	r3, [r7, #0]
 8102720:	7a1b      	ldrb	r3, [r3, #8]
 8102722:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8102724:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8102726:	683b      	ldr	r3, [r7, #0]
 8102728:	795b      	ldrb	r3, [r3, #5]
 810272a:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 810272c:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 810272e:	683a      	ldr	r2, [r7, #0]
 8102730:	7a52      	ldrb	r2, [r2, #9]
 8102732:	2a00      	cmp	r2, #0
 8102734:	d101      	bne.n	810273a <HAL_ETH_SetMACFilterConfig+0x46>
 8102736:	2220      	movs	r2, #32
 8102738:	e000      	b.n	810273c <HAL_ETH_SetMACFilterConfig+0x48>
 810273a:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 810273c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 810273e:	683b      	ldr	r3, [r7, #0]
 8102740:	79db      	ldrb	r3, [r3, #7]
 8102742:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8102744:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8102746:	683b      	ldr	r3, [r7, #0]
 8102748:	799b      	ldrb	r3, [r3, #6]
 810274a:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 810274c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 810274e:	683b      	ldr	r3, [r7, #0]
 8102750:	789b      	ldrb	r3, [r3, #2]
 8102752:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8102754:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 8102756:	683b      	ldr	r3, [r7, #0]
 8102758:	785b      	ldrb	r3, [r3, #1]
 810275a:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 810275c:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 810275e:	683b      	ldr	r3, [r7, #0]
 8102760:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8102762:	4313      	orrs	r3, r2
 8102764:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8102766:	687b      	ldr	r3, [r7, #4]
 8102768:	681b      	ldr	r3, [r3, #0]
 810276a:	689a      	ldr	r2, [r3, #8]
 810276c:	4b06      	ldr	r3, [pc, #24]	@ (8102788 <HAL_ETH_SetMACFilterConfig+0x94>)
 810276e:	4013      	ands	r3, r2
 8102770:	687a      	ldr	r2, [r7, #4]
 8102772:	6812      	ldr	r2, [r2, #0]
 8102774:	68f9      	ldr	r1, [r7, #12]
 8102776:	430b      	orrs	r3, r1
 8102778:	6093      	str	r3, [r2, #8]

  return HAL_OK;
 810277a:	2300      	movs	r3, #0
}
 810277c:	4618      	mov	r0, r3
 810277e:	3714      	adds	r7, #20
 8102780:	46bd      	mov	sp, r7
 8102782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102786:	4770      	bx	lr
 8102788:	7ffff800 	.word	0x7ffff800

0810278c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 810278c:	b480      	push	{r7}
 810278e:	b085      	sub	sp, #20
 8102790:	af00      	add	r7, sp, #0
 8102792:	6078      	str	r0, [r7, #4]
 8102794:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8102796:	683b      	ldr	r3, [r7, #0]
 8102798:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 810279a:	683b      	ldr	r3, [r7, #0]
 810279c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 810279e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 81027a0:	683b      	ldr	r3, [r7, #0]
 81027a2:	791b      	ldrb	r3, [r3, #4]
 81027a4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 81027a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81027a8:	683b      	ldr	r3, [r7, #0]
 81027aa:	7b1b      	ldrb	r3, [r3, #12]
 81027ac:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 81027ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 81027b0:	683b      	ldr	r3, [r7, #0]
 81027b2:	7b5b      	ldrb	r3, [r3, #13]
 81027b4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81027b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81027b8:	683b      	ldr	r3, [r7, #0]
 81027ba:	7b9b      	ldrb	r3, [r3, #14]
 81027bc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 81027be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81027c0:	683b      	ldr	r3, [r7, #0]
 81027c2:	7bdb      	ldrb	r3, [r3, #15]
 81027c4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81027c6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 81027c8:	683a      	ldr	r2, [r7, #0]
 81027ca:	7c12      	ldrb	r2, [r2, #16]
 81027cc:	2a00      	cmp	r2, #0
 81027ce:	d102      	bne.n	81027d6 <ETH_SetMACConfig+0x4a>
 81027d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 81027d4:	e000      	b.n	81027d8 <ETH_SetMACConfig+0x4c>
 81027d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81027d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 81027da:	683a      	ldr	r2, [r7, #0]
 81027dc:	7c52      	ldrb	r2, [r2, #17]
 81027de:	2a00      	cmp	r2, #0
 81027e0:	d102      	bne.n	81027e8 <ETH_SetMACConfig+0x5c>
 81027e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 81027e6:	e000      	b.n	81027ea <ETH_SetMACConfig+0x5e>
 81027e8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 81027ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 81027ec:	683b      	ldr	r3, [r7, #0]
 81027ee:	7c9b      	ldrb	r3, [r3, #18]
 81027f0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 81027f2:	431a      	orrs	r2, r3
               macconf->Speed |
 81027f4:	683b      	ldr	r3, [r7, #0]
 81027f6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 81027f8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 81027fa:	683b      	ldr	r3, [r7, #0]
 81027fc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 81027fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8102800:	683b      	ldr	r3, [r7, #0]
 8102802:	7f1b      	ldrb	r3, [r3, #28]
 8102804:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8102806:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8102808:	683b      	ldr	r3, [r7, #0]
 810280a:	7f5b      	ldrb	r3, [r3, #29]
 810280c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 810280e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8102810:	683a      	ldr	r2, [r7, #0]
 8102812:	7f92      	ldrb	r2, [r2, #30]
 8102814:	2a00      	cmp	r2, #0
 8102816:	d102      	bne.n	810281e <ETH_SetMACConfig+0x92>
 8102818:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810281c:	e000      	b.n	8102820 <ETH_SetMACConfig+0x94>
 810281e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8102820:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8102822:	683b      	ldr	r3, [r7, #0]
 8102824:	7fdb      	ldrb	r3, [r3, #31]
 8102826:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8102828:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810282a:	683a      	ldr	r2, [r7, #0]
 810282c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8102830:	2a00      	cmp	r2, #0
 8102832:	d102      	bne.n	810283a <ETH_SetMACConfig+0xae>
 8102834:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8102838:	e000      	b.n	810283c <ETH_SetMACConfig+0xb0>
 810283a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 810283c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 810283e:	683b      	ldr	r3, [r7, #0]
 8102840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8102842:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8102844:	683b      	ldr	r3, [r7, #0]
 8102846:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810284a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 810284c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 810284e:	683b      	ldr	r3, [r7, #0]
 8102850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8102852:	4313      	orrs	r3, r2
 8102854:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8102856:	687b      	ldr	r3, [r7, #4]
 8102858:	681b      	ldr	r3, [r3, #0]
 810285a:	681a      	ldr	r2, [r3, #0]
 810285c:	4b57      	ldr	r3, [pc, #348]	@ (81029bc <ETH_SetMACConfig+0x230>)
 810285e:	4013      	ands	r3, r2
 8102860:	687a      	ldr	r2, [r7, #4]
 8102862:	6812      	ldr	r2, [r2, #0]
 8102864:	68f9      	ldr	r1, [r7, #12]
 8102866:	430b      	orrs	r3, r1
 8102868:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810286a:	683b      	ldr	r3, [r7, #0]
 810286c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810286e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8102870:	683b      	ldr	r3, [r7, #0]
 8102872:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8102876:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8102878:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810287a:	683b      	ldr	r3, [r7, #0]
 810287c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8102880:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8102882:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8102884:	683b      	ldr	r3, [r7, #0]
 8102886:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 810288a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810288c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 810288e:	683a      	ldr	r2, [r7, #0]
 8102890:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8102894:	2a00      	cmp	r2, #0
 8102896:	d102      	bne.n	810289e <ETH_SetMACConfig+0x112>
 8102898:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 810289c:	e000      	b.n	81028a0 <ETH_SetMACConfig+0x114>
 810289e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81028a0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 81028a2:	683b      	ldr	r3, [r7, #0]
 81028a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81028a6:	4313      	orrs	r3, r2
 81028a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 81028aa:	687b      	ldr	r3, [r7, #4]
 81028ac:	681b      	ldr	r3, [r3, #0]
 81028ae:	685a      	ldr	r2, [r3, #4]
 81028b0:	4b43      	ldr	r3, [pc, #268]	@ (81029c0 <ETH_SetMACConfig+0x234>)
 81028b2:	4013      	ands	r3, r2
 81028b4:	687a      	ldr	r2, [r7, #4]
 81028b6:	6812      	ldr	r2, [r2, #0]
 81028b8:	68f9      	ldr	r1, [r7, #12]
 81028ba:	430b      	orrs	r3, r1
 81028bc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81028be:	683b      	ldr	r3, [r7, #0]
 81028c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81028c4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 81028c6:	683b      	ldr	r3, [r7, #0]
 81028c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81028ca:	4313      	orrs	r3, r2
 81028cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 81028ce:	687b      	ldr	r3, [r7, #4]
 81028d0:	681b      	ldr	r3, [r3, #0]
 81028d2:	68db      	ldr	r3, [r3, #12]
 81028d4:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 81028d8:	f023 0301 	bic.w	r3, r3, #1
 81028dc:	687a      	ldr	r2, [r7, #4]
 81028de:	6812      	ldr	r2, [r2, #0]
 81028e0:	68f9      	ldr	r1, [r7, #12]
 81028e2:	430b      	orrs	r3, r1
 81028e4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 81028e6:	683b      	ldr	r3, [r7, #0]
 81028e8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 81028ec:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 81028ee:	683b      	ldr	r3, [r7, #0]
 81028f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 81028f2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 81028f4:	683a      	ldr	r2, [r7, #0]
 81028f6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 81028fa:	2a00      	cmp	r2, #0
 81028fc:	d101      	bne.n	8102902 <ETH_SetMACConfig+0x176>
 81028fe:	2280      	movs	r2, #128	@ 0x80
 8102900:	e000      	b.n	8102904 <ETH_SetMACConfig+0x178>
 8102902:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8102904:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8102906:	683b      	ldr	r3, [r7, #0]
 8102908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810290a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810290c:	4313      	orrs	r3, r2
 810290e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8102910:	687b      	ldr	r3, [r7, #4]
 8102912:	681b      	ldr	r3, [r3, #0]
 8102914:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8102916:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 810291a:	4013      	ands	r3, r2
 810291c:	687a      	ldr	r2, [r7, #4]
 810291e:	6812      	ldr	r2, [r2, #0]
 8102920:	68f9      	ldr	r1, [r7, #12]
 8102922:	430b      	orrs	r3, r1
 8102924:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8102926:	683b      	ldr	r3, [r7, #0]
 8102928:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 810292c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 810292e:	683b      	ldr	r3, [r7, #0]
 8102930:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8102934:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8102936:	4313      	orrs	r3, r2
 8102938:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 810293a:	687b      	ldr	r3, [r7, #4]
 810293c:	681b      	ldr	r3, [r3, #0]
 810293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102942:	f023 0103 	bic.w	r1, r3, #3
 8102946:	687b      	ldr	r3, [r7, #4]
 8102948:	681b      	ldr	r3, [r3, #0]
 810294a:	68fa      	ldr	r2, [r7, #12]
 810294c:	430a      	orrs	r2, r1
 810294e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8102952:	687b      	ldr	r3, [r7, #4]
 8102954:	681b      	ldr	r3, [r3, #0]
 8102956:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 810295a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 810295e:	683b      	ldr	r3, [r7, #0]
 8102960:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8102962:	687b      	ldr	r3, [r7, #4]
 8102964:	681b      	ldr	r3, [r3, #0]
 8102966:	430a      	orrs	r2, r1
 8102968:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 810296c:	683b      	ldr	r3, [r7, #0]
 810296e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8102970:	683a      	ldr	r2, [r7, #0]
 8102972:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8102976:	2a00      	cmp	r2, #0
 8102978:	d101      	bne.n	810297e <ETH_SetMACConfig+0x1f2>
 810297a:	2240      	movs	r2, #64	@ 0x40
 810297c:	e000      	b.n	8102980 <ETH_SetMACConfig+0x1f4>
 810297e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8102980:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8102982:	683b      	ldr	r3, [r7, #0]
 8102984:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8102988:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 810298a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 810298c:	683b      	ldr	r3, [r7, #0]
 810298e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8102992:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8102994:	4313      	orrs	r3, r2
 8102996:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8102998:	687b      	ldr	r3, [r7, #4]
 810299a:	681b      	ldr	r3, [r3, #0]
 810299c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 81029a0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 81029a4:	687b      	ldr	r3, [r7, #4]
 81029a6:	681b      	ldr	r3, [r3, #0]
 81029a8:	68fa      	ldr	r2, [r7, #12]
 81029aa:	430a      	orrs	r2, r1
 81029ac:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 81029b0:	bf00      	nop
 81029b2:	3714      	adds	r7, #20
 81029b4:	46bd      	mov	sp, r7
 81029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029ba:	4770      	bx	lr
 81029bc:	00048083 	.word	0x00048083
 81029c0:	c0f88000 	.word	0xc0f88000

081029c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 81029c4:	b480      	push	{r7}
 81029c6:	b085      	sub	sp, #20
 81029c8:	af00      	add	r7, sp, #0
 81029ca:	6078      	str	r0, [r7, #4]
 81029cc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 81029ce:	687b      	ldr	r3, [r7, #4]
 81029d0:	681b      	ldr	r3, [r3, #0]
 81029d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81029d6:	681b      	ldr	r3, [r3, #0]
 81029d8:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 81029dc:	f023 0302 	bic.w	r3, r3, #2
 81029e0:	683a      	ldr	r2, [r7, #0]
 81029e2:	6811      	ldr	r1, [r2, #0]
 81029e4:	687a      	ldr	r2, [r7, #4]
 81029e6:	6812      	ldr	r2, [r2, #0]
 81029e8:	430b      	orrs	r3, r1
 81029ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81029ee:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 81029f0:	683b      	ldr	r3, [r7, #0]
 81029f2:	791b      	ldrb	r3, [r3, #4]
 81029f4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 81029f6:	683b      	ldr	r3, [r7, #0]
 81029f8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 81029fa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 81029fc:	683b      	ldr	r3, [r7, #0]
 81029fe:	7b1b      	ldrb	r3, [r3, #12]
 8102a00:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8102a02:	4313      	orrs	r3, r2
 8102a04:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8102a06:	687b      	ldr	r3, [r7, #4]
 8102a08:	681b      	ldr	r3, [r3, #0]
 8102a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102a0e:	685b      	ldr	r3, [r3, #4]
 8102a10:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8102a14:	f023 0301 	bic.w	r3, r3, #1
 8102a18:	687a      	ldr	r2, [r7, #4]
 8102a1a:	6812      	ldr	r2, [r2, #0]
 8102a1c:	68f9      	ldr	r1, [r7, #12]
 8102a1e:	430b      	orrs	r3, r1
 8102a20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8102a24:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8102a26:	683b      	ldr	r3, [r7, #0]
 8102a28:	7b5b      	ldrb	r3, [r3, #13]
 8102a2a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8102a2c:	683b      	ldr	r3, [r7, #0]
 8102a2e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8102a30:	4313      	orrs	r3, r2
 8102a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8102a34:	687b      	ldr	r3, [r7, #4]
 8102a36:	681b      	ldr	r3, [r3, #0]
 8102a38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102a3c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8102a40:	4b21      	ldr	r3, [pc, #132]	@ (8102ac8 <ETH_SetDMAConfig+0x104>)
 8102a42:	4013      	ands	r3, r2
 8102a44:	687a      	ldr	r2, [r7, #4]
 8102a46:	6812      	ldr	r2, [r2, #0]
 8102a48:	68f9      	ldr	r1, [r7, #12]
 8102a4a:	430b      	orrs	r3, r1
 8102a4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8102a50:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8102a54:	683b      	ldr	r3, [r7, #0]
 8102a56:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8102a58:	683b      	ldr	r3, [r7, #0]
 8102a5a:	7d1b      	ldrb	r3, [r3, #20]
 8102a5c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8102a5e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8102a60:	683b      	ldr	r3, [r7, #0]
 8102a62:	7f5b      	ldrb	r3, [r3, #29]
 8102a64:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8102a66:	4313      	orrs	r3, r2
 8102a68:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8102a6a:	687b      	ldr	r3, [r7, #4]
 8102a6c:	681b      	ldr	r3, [r3, #0]
 8102a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102a72:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8102a76:	4b15      	ldr	r3, [pc, #84]	@ (8102acc <ETH_SetDMAConfig+0x108>)
 8102a78:	4013      	ands	r3, r2
 8102a7a:	687a      	ldr	r2, [r7, #4]
 8102a7c:	6812      	ldr	r2, [r2, #0]
 8102a7e:	68f9      	ldr	r1, [r7, #12]
 8102a80:	430b      	orrs	r3, r1
 8102a82:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8102a86:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8102a8a:	683b      	ldr	r3, [r7, #0]
 8102a8c:	7f1b      	ldrb	r3, [r3, #28]
 8102a8e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8102a90:	683b      	ldr	r3, [r7, #0]
 8102a92:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8102a94:	4313      	orrs	r3, r2
 8102a96:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8102a98:	687b      	ldr	r3, [r7, #4]
 8102a9a:	681b      	ldr	r3, [r3, #0]
 8102a9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102aa0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8102aa4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8102aa8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8102aac:	687a      	ldr	r2, [r7, #4]
 8102aae:	6812      	ldr	r2, [r2, #0]
 8102ab0:	68f9      	ldr	r1, [r7, #12]
 8102ab2:	430b      	orrs	r3, r1
 8102ab4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8102ab8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8102abc:	bf00      	nop
 8102abe:	3714      	adds	r7, #20
 8102ac0:	46bd      	mov	sp, r7
 8102ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ac6:	4770      	bx	lr
 8102ac8:	fffec000 	.word	0xfffec000
 8102acc:	ffc0efef 	.word	0xffc0efef

08102ad0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8102ad0:	b580      	push	{r7, lr}
 8102ad2:	b0a4      	sub	sp, #144	@ 0x90
 8102ad4:	af00      	add	r7, sp, #0
 8102ad6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8102ad8:	2301      	movs	r3, #1
 8102ada:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8102ade:	2300      	movs	r3, #0
 8102ae0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8102ae2:	2300      	movs	r3, #0
 8102ae4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8102ae8:	2300      	movs	r3, #0
 8102aea:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8102aee:	2301      	movs	r3, #1
 8102af0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8102af4:	2301      	movs	r3, #1
 8102af6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8102afa:	2301      	movs	r3, #1
 8102afc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8102b00:	2300      	movs	r3, #0
 8102b02:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8102b06:	2301      	movs	r3, #1
 8102b08:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8102b0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8102b10:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8102b12:	2300      	movs	r3, #0
 8102b14:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8102b18:	2300      	movs	r3, #0
 8102b1a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8102b1c:	2300      	movs	r3, #0
 8102b1e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8102b22:	2300      	movs	r3, #0
 8102b24:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8102b28:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8102b2c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8102b2e:	2300      	movs	r3, #0
 8102b30:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8102b34:	2300      	movs	r3, #0
 8102b36:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8102b38:	2301      	movs	r3, #1
 8102b3a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8102b3e:	2300      	movs	r3, #0
 8102b40:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8102b44:	2300      	movs	r3, #0
 8102b46:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8102b4a:	2300      	movs	r3, #0
 8102b4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8102b4e:	2300      	movs	r3, #0
 8102b50:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8102b52:	2300      	movs	r3, #0
 8102b54:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8102b56:	2300      	movs	r3, #0
 8102b58:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8102b5c:	2300      	movs	r3, #0
 8102b5e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8102b62:	2301      	movs	r3, #1
 8102b64:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8102b68:	2320      	movs	r3, #32
 8102b6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8102b6e:	2301      	movs	r3, #1
 8102b70:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8102b74:	2300      	movs	r3, #0
 8102b76:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8102b7a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8102b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8102b80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8102b84:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8102b86:	2300      	movs	r3, #0
 8102b88:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8102b8c:	2302      	movs	r3, #2
 8102b8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8102b92:	2300      	movs	r3, #0
 8102b94:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8102b98:	2300      	movs	r3, #0
 8102b9a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8102b9e:	2300      	movs	r3, #0
 8102ba0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8102ba4:	2301      	movs	r3, #1
 8102ba6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8102baa:	2300      	movs	r3, #0
 8102bac:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8102bae:	2301      	movs	r3, #1
 8102bb0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8102bb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8102bb8:	4619      	mov	r1, r3
 8102bba:	6878      	ldr	r0, [r7, #4]
 8102bbc:	f7ff fde6 	bl	810278c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8102bc0:	2301      	movs	r3, #1
 8102bc2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8102bc4:	2301      	movs	r3, #1
 8102bc6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8102bc8:	2300      	movs	r3, #0
 8102bca:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8102bcc:	2300      	movs	r3, #0
 8102bce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8102bd2:	2300      	movs	r3, #0
 8102bd4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8102bd6:	2300      	movs	r3, #0
 8102bd8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8102bda:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8102bde:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8102be0:	2300      	movs	r3, #0
 8102be2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8102be4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8102be8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8102bea:	2300      	movs	r3, #0
 8102bec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8102bf0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8102bf4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8102bf6:	f107 0308 	add.w	r3, r7, #8
 8102bfa:	4619      	mov	r1, r3
 8102bfc:	6878      	ldr	r0, [r7, #4]
 8102bfe:	f7ff fee1 	bl	81029c4 <ETH_SetDMAConfig>
}
 8102c02:	bf00      	nop
 8102c04:	3790      	adds	r7, #144	@ 0x90
 8102c06:	46bd      	mov	sp, r7
 8102c08:	bd80      	pop	{r7, pc}

08102c0a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8102c0a:	b480      	push	{r7}
 8102c0c:	b085      	sub	sp, #20
 8102c0e:	af00      	add	r7, sp, #0
 8102c10:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8102c12:	2300      	movs	r3, #0
 8102c14:	60fb      	str	r3, [r7, #12]
 8102c16:	e01d      	b.n	8102c54 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8102c18:	687b      	ldr	r3, [r7, #4]
 8102c1a:	68d9      	ldr	r1, [r3, #12]
 8102c1c:	68fa      	ldr	r2, [r7, #12]
 8102c1e:	4613      	mov	r3, r2
 8102c20:	005b      	lsls	r3, r3, #1
 8102c22:	4413      	add	r3, r2
 8102c24:	00db      	lsls	r3, r3, #3
 8102c26:	440b      	add	r3, r1
 8102c28:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8102c2a:	68bb      	ldr	r3, [r7, #8]
 8102c2c:	2200      	movs	r2, #0
 8102c2e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8102c30:	68bb      	ldr	r3, [r7, #8]
 8102c32:	2200      	movs	r2, #0
 8102c34:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8102c36:	68bb      	ldr	r3, [r7, #8]
 8102c38:	2200      	movs	r2, #0
 8102c3a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8102c3c:	68bb      	ldr	r3, [r7, #8]
 8102c3e:	2200      	movs	r2, #0
 8102c40:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8102c42:	68b9      	ldr	r1, [r7, #8]
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	68fa      	ldr	r2, [r7, #12]
 8102c48:	3206      	adds	r2, #6
 8102c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8102c4e:	68fb      	ldr	r3, [r7, #12]
 8102c50:	3301      	adds	r3, #1
 8102c52:	60fb      	str	r3, [r7, #12]
 8102c54:	68fb      	ldr	r3, [r7, #12]
 8102c56:	2b03      	cmp	r3, #3
 8102c58:	d9de      	bls.n	8102c18 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8102c5a:	687b      	ldr	r3, [r7, #4]
 8102c5c:	2200      	movs	r2, #0
 8102c5e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8102c60:	687b      	ldr	r3, [r7, #4]
 8102c62:	681b      	ldr	r3, [r3, #0]
 8102c64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102c68:	461a      	mov	r2, r3
 8102c6a:	2303      	movs	r3, #3
 8102c6c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8102c70:	687b      	ldr	r3, [r7, #4]
 8102c72:	68da      	ldr	r2, [r3, #12]
 8102c74:	687b      	ldr	r3, [r7, #4]
 8102c76:	681b      	ldr	r3, [r3, #0]
 8102c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102c7c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8102c80:	687b      	ldr	r3, [r7, #4]
 8102c82:	68da      	ldr	r2, [r3, #12]
 8102c84:	687b      	ldr	r3, [r7, #4]
 8102c86:	681b      	ldr	r3, [r3, #0]
 8102c88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102c8c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8102c90:	bf00      	nop
 8102c92:	3714      	adds	r7, #20
 8102c94:	46bd      	mov	sp, r7
 8102c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c9a:	4770      	bx	lr

08102c9c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8102c9c:	b480      	push	{r7}
 8102c9e:	b085      	sub	sp, #20
 8102ca0:	af00      	add	r7, sp, #0
 8102ca2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8102ca4:	2300      	movs	r3, #0
 8102ca6:	60fb      	str	r3, [r7, #12]
 8102ca8:	e023      	b.n	8102cf2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8102caa:	687b      	ldr	r3, [r7, #4]
 8102cac:	6919      	ldr	r1, [r3, #16]
 8102cae:	68fa      	ldr	r2, [r7, #12]
 8102cb0:	4613      	mov	r3, r2
 8102cb2:	005b      	lsls	r3, r3, #1
 8102cb4:	4413      	add	r3, r2
 8102cb6:	00db      	lsls	r3, r3, #3
 8102cb8:	440b      	add	r3, r1
 8102cba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8102cbc:	68bb      	ldr	r3, [r7, #8]
 8102cbe:	2200      	movs	r2, #0
 8102cc0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8102cc2:	68bb      	ldr	r3, [r7, #8]
 8102cc4:	2200      	movs	r2, #0
 8102cc6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8102cc8:	68bb      	ldr	r3, [r7, #8]
 8102cca:	2200      	movs	r2, #0
 8102ccc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8102cce:	68bb      	ldr	r3, [r7, #8]
 8102cd0:	2200      	movs	r2, #0
 8102cd2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8102cd4:	68bb      	ldr	r3, [r7, #8]
 8102cd6:	2200      	movs	r2, #0
 8102cd8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8102cda:	68bb      	ldr	r3, [r7, #8]
 8102cdc:	2200      	movs	r2, #0
 8102cde:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8102ce0:	68b9      	ldr	r1, [r7, #8]
 8102ce2:	687b      	ldr	r3, [r7, #4]
 8102ce4:	68fa      	ldr	r2, [r7, #12]
 8102ce6:	3212      	adds	r2, #18
 8102ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8102cec:	68fb      	ldr	r3, [r7, #12]
 8102cee:	3301      	adds	r3, #1
 8102cf0:	60fb      	str	r3, [r7, #12]
 8102cf2:	68fb      	ldr	r3, [r7, #12]
 8102cf4:	2b03      	cmp	r3, #3
 8102cf6:	d9d8      	bls.n	8102caa <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8102cf8:	687b      	ldr	r3, [r7, #4]
 8102cfa:	2200      	movs	r2, #0
 8102cfc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8102cfe:	687b      	ldr	r3, [r7, #4]
 8102d00:	2200      	movs	r2, #0
 8102d02:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	2200      	movs	r2, #0
 8102d08:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8102d0a:	687b      	ldr	r3, [r7, #4]
 8102d0c:	2200      	movs	r2, #0
 8102d0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8102d10:	687b      	ldr	r3, [r7, #4]
 8102d12:	2200      	movs	r2, #0
 8102d14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8102d16:	687b      	ldr	r3, [r7, #4]
 8102d18:	681b      	ldr	r3, [r3, #0]
 8102d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102d1e:	461a      	mov	r2, r3
 8102d20:	2303      	movs	r3, #3
 8102d22:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8102d26:	687b      	ldr	r3, [r7, #4]
 8102d28:	691a      	ldr	r2, [r3, #16]
 8102d2a:	687b      	ldr	r3, [r7, #4]
 8102d2c:	681b      	ldr	r3, [r3, #0]
 8102d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102d32:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8102d36:	687b      	ldr	r3, [r7, #4]
 8102d38:	691b      	ldr	r3, [r3, #16]
 8102d3a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8102d3e:	687b      	ldr	r3, [r7, #4]
 8102d40:	681b      	ldr	r3, [r3, #0]
 8102d42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8102d46:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8102d4a:	bf00      	nop
 8102d4c:	3714      	adds	r7, #20
 8102d4e:	46bd      	mov	sp, r7
 8102d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d54:	4770      	bx	lr

08102d56 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8102d56:	b480      	push	{r7}
 8102d58:	b091      	sub	sp, #68	@ 0x44
 8102d5a:	af00      	add	r7, sp, #0
 8102d5c:	60f8      	str	r0, [r7, #12]
 8102d5e:	60b9      	str	r1, [r7, #8]
 8102d60:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8102d62:	68fb      	ldr	r3, [r7, #12]
 8102d64:	3318      	adds	r3, #24
 8102d66:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8102d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102d6a:	691b      	ldr	r3, [r3, #16]
 8102d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8102d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102d70:	691b      	ldr	r3, [r3, #16]
 8102d72:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8102d74:	2300      	movs	r3, #0
 8102d76:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8102d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102d7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8102d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102d80:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8102d82:	68bb      	ldr	r3, [r7, #8]
 8102d84:	689b      	ldr	r3, [r3, #8]
 8102d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8102d88:	2300      	movs	r3, #0
 8102d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8102d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102d8e:	68db      	ldr	r3, [r3, #12]
 8102d90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8102d94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8102d98:	d007      	beq.n	8102daa <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8102d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8102d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102d9e:	3304      	adds	r3, #4
 8102da0:	009b      	lsls	r3, r3, #2
 8102da2:	4413      	add	r3, r2
 8102da4:	685b      	ldr	r3, [r3, #4]
 8102da6:	2b00      	cmp	r3, #0
 8102da8:	d001      	beq.n	8102dae <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8102daa:	2302      	movs	r3, #2
 8102dac:	e267      	b.n	810327e <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8102dae:	68bb      	ldr	r3, [r7, #8]
 8102db0:	681b      	ldr	r3, [r3, #0]
 8102db2:	f003 0304 	and.w	r3, r3, #4
 8102db6:	2b00      	cmp	r3, #0
 8102db8:	d044      	beq.n	8102e44 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8102dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102dbc:	68db      	ldr	r3, [r3, #12]
 8102dbe:	0c1b      	lsrs	r3, r3, #16
 8102dc0:	041b      	lsls	r3, r3, #16
 8102dc2:	68ba      	ldr	r2, [r7, #8]
 8102dc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8102dc6:	431a      	orrs	r2, r3
 8102dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102dca:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8102dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102dce:	68db      	ldr	r3, [r3, #12]
 8102dd0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8102dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102dd6:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8102dd8:	68fb      	ldr	r3, [r7, #12]
 8102dda:	681b      	ldr	r3, [r3, #0]
 8102ddc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8102dde:	68fb      	ldr	r3, [r7, #12]
 8102de0:	681b      	ldr	r3, [r3, #0]
 8102de2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8102de6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8102de8:	68bb      	ldr	r3, [r7, #8]
 8102dea:	681b      	ldr	r3, [r3, #0]
 8102dec:	f003 0308 	and.w	r3, r3, #8
 8102df0:	2b00      	cmp	r3, #0
 8102df2:	d027      	beq.n	8102e44 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8102df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102df6:	689b      	ldr	r3, [r3, #8]
 8102df8:	b29a      	uxth	r2, r3
 8102dfa:	68bb      	ldr	r3, [r7, #8]
 8102dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102dfe:	041b      	lsls	r3, r3, #16
 8102e00:	431a      	orrs	r2, r3
 8102e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102e04:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8102e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102e08:	68db      	ldr	r3, [r3, #12]
 8102e0a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8102e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102e10:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8102e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102e14:	68db      	ldr	r3, [r3, #12]
 8102e16:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8102e1a:	68bb      	ldr	r3, [r7, #8]
 8102e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102e1e:	431a      	orrs	r2, r3
 8102e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102e22:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8102e24:	68fb      	ldr	r3, [r7, #12]
 8102e26:	681b      	ldr	r3, [r3, #0]
 8102e28:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8102e2a:	68fb      	ldr	r3, [r7, #12]
 8102e2c:	681b      	ldr	r3, [r3, #0]
 8102e2e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8102e32:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8102e34:	68fb      	ldr	r3, [r7, #12]
 8102e36:	681b      	ldr	r3, [r3, #0]
 8102e38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8102e3a:	68fb      	ldr	r3, [r7, #12]
 8102e3c:	681b      	ldr	r3, [r3, #0]
 8102e3e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8102e42:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8102e44:	68bb      	ldr	r3, [r7, #8]
 8102e46:	681b      	ldr	r3, [r3, #0]
 8102e48:	f003 0310 	and.w	r3, r3, #16
 8102e4c:	2b00      	cmp	r3, #0
 8102e4e:	d010      	beq.n	8102e72 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8102e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102e52:	689b      	ldr	r3, [r3, #8]
 8102e54:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8102e58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102e5c:	68ba      	ldr	r2, [r7, #8]
 8102e5e:	6992      	ldr	r2, [r2, #24]
 8102e60:	431a      	orrs	r2, r3
 8102e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102e64:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8102e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102e68:	68db      	ldr	r3, [r3, #12]
 8102e6a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8102e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102e70:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8102e72:	68bb      	ldr	r3, [r7, #8]
 8102e74:	681b      	ldr	r3, [r3, #0]
 8102e76:	f003 0304 	and.w	r3, r3, #4
 8102e7a:	2b00      	cmp	r3, #0
 8102e7c:	d105      	bne.n	8102e8a <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8102e7e:	68bb      	ldr	r3, [r7, #8]
 8102e80:	681b      	ldr	r3, [r3, #0]
 8102e82:	f003 0310 	and.w	r3, r3, #16
 8102e86:	2b00      	cmp	r3, #0
 8102e88:	d036      	beq.n	8102ef8 <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8102e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102e8c:	68db      	ldr	r3, [r3, #12]
 8102e8e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8102e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102e94:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8102e96:	f3bf 8f5f 	dmb	sy
}
 8102e9a:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8102e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102e9e:	68db      	ldr	r3, [r3, #12]
 8102ea0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8102ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102ea6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8102ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102eaa:	3301      	adds	r3, #1
 8102eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102eb0:	2b03      	cmp	r3, #3
 8102eb2:	d902      	bls.n	8102eba <ETH_Prepare_Tx_Descriptors+0x164>
 8102eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102eb6:	3b04      	subs	r3, #4
 8102eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8102eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102ebc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8102ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102ec2:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8102ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102ec6:	3301      	adds	r3, #1
 8102ec8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8102eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102ecc:	68db      	ldr	r3, [r3, #12]
 8102ece:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8102ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8102ed6:	d10f      	bne.n	8102ef8 <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8102ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102eda:	6a3a      	ldr	r2, [r7, #32]
 8102edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102ee0:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8102ee2:	f3bf 8f5f 	dmb	sy
}
 8102ee6:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8102ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102eea:	68db      	ldr	r3, [r3, #12]
 8102eec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8102ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102ef2:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8102ef4:	2302      	movs	r3, #2
 8102ef6:	e1c2      	b.n	810327e <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8102ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102efa:	3301      	adds	r3, #1
 8102efc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8102efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102f00:	681b      	ldr	r3, [r3, #0]
 8102f02:	461a      	mov	r2, r3
 8102f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102f06:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8102f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102f0a:	689b      	ldr	r3, [r3, #8]
 8102f0c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8102f10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102f14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8102f16:	6852      	ldr	r2, [r2, #4]
 8102f18:	431a      	orrs	r2, r3
 8102f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102f1c:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8102f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102f20:	689b      	ldr	r3, [r3, #8]
 8102f22:	2b00      	cmp	r3, #0
 8102f24:	d014      	beq.n	8102f50 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8102f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102f28:	689b      	ldr	r3, [r3, #8]
 8102f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8102f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102f2e:	681b      	ldr	r3, [r3, #0]
 8102f30:	461a      	mov	r2, r3
 8102f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102f34:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8102f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102f38:	689b      	ldr	r3, [r3, #8]
 8102f3a:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8102f3e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8102f42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8102f44:	6852      	ldr	r2, [r2, #4]
 8102f46:	0412      	lsls	r2, r2, #16
 8102f48:	431a      	orrs	r2, r3
 8102f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102f4c:	609a      	str	r2, [r3, #8]
 8102f4e:	e00a      	b.n	8102f66 <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8102f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102f52:	2200      	movs	r2, #0
 8102f54:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8102f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102f58:	689b      	ldr	r3, [r3, #8]
 8102f5a:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8102f5e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8102f62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8102f64:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8102f66:	68bb      	ldr	r3, [r7, #8]
 8102f68:	681b      	ldr	r3, [r3, #0]
 8102f6a:	f003 0310 	and.w	r3, r3, #16
 8102f6e:	2b00      	cmp	r3, #0
 8102f70:	d019      	beq.n	8102fa6 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8102f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102f74:	68db      	ldr	r3, [r3, #12]
 8102f76:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8102f7a:	68bb      	ldr	r3, [r7, #8]
 8102f7c:	6a1b      	ldr	r3, [r3, #32]
 8102f7e:	04db      	lsls	r3, r3, #19
 8102f80:	431a      	orrs	r2, r3
 8102f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102f84:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8102f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102f88:	68db      	ldr	r3, [r3, #12]
 8102f8a:	0c9b      	lsrs	r3, r3, #18
 8102f8c:	049b      	lsls	r3, r3, #18
 8102f8e:	68ba      	ldr	r2, [r7, #8]
 8102f90:	69d2      	ldr	r2, [r2, #28]
 8102f92:	431a      	orrs	r2, r3
 8102f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102f96:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8102f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102f9a:	68db      	ldr	r3, [r3, #12]
 8102f9c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8102fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102fa2:	60da      	str	r2, [r3, #12]
 8102fa4:	e028      	b.n	8102ff8 <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8102fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102fa8:	68db      	ldr	r3, [r3, #12]
 8102faa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8102fae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8102fb2:	68ba      	ldr	r2, [r7, #8]
 8102fb4:	6852      	ldr	r2, [r2, #4]
 8102fb6:	431a      	orrs	r2, r3
 8102fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102fba:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8102fbc:	68bb      	ldr	r3, [r7, #8]
 8102fbe:	681b      	ldr	r3, [r3, #0]
 8102fc0:	f003 0301 	and.w	r3, r3, #1
 8102fc4:	2b00      	cmp	r3, #0
 8102fc6:	d008      	beq.n	8102fda <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8102fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102fca:	68db      	ldr	r3, [r3, #12]
 8102fcc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8102fd0:	68bb      	ldr	r3, [r7, #8]
 8102fd2:	695b      	ldr	r3, [r3, #20]
 8102fd4:	431a      	orrs	r2, r3
 8102fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102fd8:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8102fda:	68bb      	ldr	r3, [r7, #8]
 8102fdc:	681b      	ldr	r3, [r3, #0]
 8102fde:	f003 0320 	and.w	r3, r3, #32
 8102fe2:	2b00      	cmp	r3, #0
 8102fe4:	d008      	beq.n	8102ff8 <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8102fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102fe8:	68db      	ldr	r3, [r3, #12]
 8102fea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8102fee:	68bb      	ldr	r3, [r7, #8]
 8102ff0:	691b      	ldr	r3, [r3, #16]
 8102ff2:	431a      	orrs	r2, r3
 8102ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102ff6:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8102ff8:	68bb      	ldr	r3, [r7, #8]
 8102ffa:	681b      	ldr	r3, [r3, #0]
 8102ffc:	f003 0304 	and.w	r3, r3, #4
 8103000:	2b00      	cmp	r3, #0
 8103002:	d008      	beq.n	8103016 <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8103004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103006:	689b      	ldr	r3, [r3, #8]
 8103008:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 810300c:	68bb      	ldr	r3, [r7, #8]
 810300e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103010:	431a      	orrs	r2, r3
 8103012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103014:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8103016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103018:	68db      	ldr	r3, [r3, #12]
 810301a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 810301e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103020:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8103022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103024:	68db      	ldr	r3, [r3, #12]
 8103026:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 810302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810302c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 810302e:	f3bf 8f5f 	dmb	sy
}
 8103032:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8103034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103036:	68db      	ldr	r3, [r3, #12]
 8103038:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810303c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810303e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8103040:	68bb      	ldr	r3, [r7, #8]
 8103042:	681b      	ldr	r3, [r3, #0]
 8103044:	f003 0302 	and.w	r3, r3, #2
 8103048:	2b00      	cmp	r3, #0
 810304a:	f000 80d9 	beq.w	8103200 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 810304e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103050:	68db      	ldr	r3, [r3, #12]
 8103052:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8103056:	68bb      	ldr	r3, [r7, #8]
 8103058:	68db      	ldr	r3, [r3, #12]
 810305a:	431a      	orrs	r2, r3
 810305c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810305e:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8103060:	e0ce      	b.n	8103200 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8103062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103064:	68db      	ldr	r3, [r3, #12]
 8103066:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 810306a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810306c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 810306e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103070:	3301      	adds	r3, #1
 8103072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103076:	2b03      	cmp	r3, #3
 8103078:	d902      	bls.n	8103080 <ETH_Prepare_Tx_Descriptors+0x32a>
 810307a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810307c:	3b04      	subs	r3, #4
 810307e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8103080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103082:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8103084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8103088:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 810308a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810308c:	68db      	ldr	r3, [r3, #12]
 810308e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8103092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103094:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8103096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103098:	68db      	ldr	r3, [r3, #12]
 810309a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810309e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 81030a2:	d007      	beq.n	81030b4 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 81030a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81030a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81030a8:	3304      	adds	r3, #4
 81030aa:	009b      	lsls	r3, r3, #2
 81030ac:	4413      	add	r3, r2
 81030ae:	685b      	ldr	r3, [r3, #4]
 81030b0:	2b00      	cmp	r3, #0
 81030b2:	d029      	beq.n	8103108 <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 81030b4:	6a3b      	ldr	r3, [r7, #32]
 81030b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 81030b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81030ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 81030bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81030c0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 81030c2:	2300      	movs	r3, #0
 81030c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 81030c6:	e019      	b.n	81030fc <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 81030c8:	f3bf 8f5f 	dmb	sy
}
 81030cc:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 81030ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81030d0:	68db      	ldr	r3, [r3, #12]
 81030d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 81030d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81030d8:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 81030da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81030dc:	3301      	adds	r3, #1
 81030de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81030e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81030e2:	2b03      	cmp	r3, #3
 81030e4:	d902      	bls.n	81030ec <ETH_Prepare_Tx_Descriptors+0x396>
 81030e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81030e8:	3b04      	subs	r3, #4
 81030ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 81030ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81030ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 81030f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81030f4:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 81030f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81030f8:	3301      	adds	r3, #1
 81030fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 81030fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81030fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103100:	429a      	cmp	r2, r3
 8103102:	d3e1      	bcc.n	81030c8 <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 8103104:	2302      	movs	r3, #2
 8103106:	e0ba      	b.n	810327e <ETH_Prepare_Tx_Descriptors+0x528>
    }

    descnbr += 1U;
 8103108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810310a:	3301      	adds	r3, #1
 810310c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 810310e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103110:	689b      	ldr	r3, [r3, #8]
 8103112:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8103114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103116:	681b      	ldr	r3, [r3, #0]
 8103118:	461a      	mov	r2, r3
 810311a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810311c:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 810311e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103120:	689b      	ldr	r3, [r3, #8]
 8103122:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8103126:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810312a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810312c:	6852      	ldr	r2, [r2, #4]
 810312e:	431a      	orrs	r2, r3
 8103130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103132:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8103134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103136:	689b      	ldr	r3, [r3, #8]
 8103138:	2b00      	cmp	r3, #0
 810313a:	d014      	beq.n	8103166 <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 810313c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810313e:	689b      	ldr	r3, [r3, #8]
 8103140:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8103142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103144:	681b      	ldr	r3, [r3, #0]
 8103146:	461a      	mov	r2, r3
 8103148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810314a:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 810314c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810314e:	689b      	ldr	r3, [r3, #8]
 8103150:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8103154:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8103158:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810315a:	6852      	ldr	r2, [r2, #4]
 810315c:	0412      	lsls	r2, r2, #16
 810315e:	431a      	orrs	r2, r3
 8103160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103162:	609a      	str	r2, [r3, #8]
 8103164:	e00a      	b.n	810317c <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8103166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103168:	2200      	movs	r2, #0
 810316a:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 810316c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810316e:	689b      	ldr	r3, [r3, #8]
 8103170:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8103174:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8103178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810317a:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 810317c:	68bb      	ldr	r3, [r7, #8]
 810317e:	681b      	ldr	r3, [r3, #0]
 8103180:	f003 0310 	and.w	r3, r3, #16
 8103184:	2b00      	cmp	r3, #0
 8103186:	d00f      	beq.n	81031a8 <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8103188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810318a:	68db      	ldr	r3, [r3, #12]
 810318c:	0c9b      	lsrs	r3, r3, #18
 810318e:	049b      	lsls	r3, r3, #18
 8103190:	68ba      	ldr	r2, [r7, #8]
 8103192:	69d2      	ldr	r2, [r2, #28]
 8103194:	431a      	orrs	r2, r3
 8103196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103198:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 810319a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810319c:	68db      	ldr	r3, [r3, #12]
 810319e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 81031a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81031a4:	60da      	str	r2, [r3, #12]
 81031a6:	e019      	b.n	81031dc <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 81031a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81031aa:	68db      	ldr	r3, [r3, #12]
 81031ac:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 81031b0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 81031b4:	68ba      	ldr	r2, [r7, #8]
 81031b6:	6852      	ldr	r2, [r2, #4]
 81031b8:	431a      	orrs	r2, r3
 81031ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81031bc:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 81031be:	68bb      	ldr	r3, [r7, #8]
 81031c0:	681b      	ldr	r3, [r3, #0]
 81031c2:	f003 0301 	and.w	r3, r3, #1
 81031c6:	2b00      	cmp	r3, #0
 81031c8:	d008      	beq.n	81031dc <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 81031ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81031cc:	68db      	ldr	r3, [r3, #12]
 81031ce:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 81031d2:	68bb      	ldr	r3, [r7, #8]
 81031d4:	695b      	ldr	r3, [r3, #20]
 81031d6:	431a      	orrs	r2, r3
 81031d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81031da:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 81031dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81031de:	3301      	adds	r3, #1
 81031e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 81031e2:	f3bf 8f5f 	dmb	sy
}
 81031e6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 81031e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81031ea:	68db      	ldr	r3, [r3, #12]
 81031ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 81031f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81031f2:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 81031f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81031f6:	68db      	ldr	r3, [r3, #12]
 81031f8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 81031fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81031fe:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8103200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103202:	689b      	ldr	r3, [r3, #8]
 8103204:	2b00      	cmp	r3, #0
 8103206:	f47f af2c 	bne.w	8103062 <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 810320a:	687b      	ldr	r3, [r7, #4]
 810320c:	2b00      	cmp	r3, #0
 810320e:	d006      	beq.n	810321e <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8103210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103212:	689b      	ldr	r3, [r3, #8]
 8103214:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8103218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810321a:	609a      	str	r2, [r3, #8]
 810321c:	e005      	b.n	810322a <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 810321e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103220:	689b      	ldr	r3, [r3, #8]
 8103222:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8103226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103228:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 810322a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810322c:	68db      	ldr	r3, [r3, #12]
 810322e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8103232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103234:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8103236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810323a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810323c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810323e:	3304      	adds	r3, #4
 8103240:	009b      	lsls	r3, r3, #2
 8103242:	440b      	add	r3, r1
 8103244:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8103246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103248:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810324a:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 810324c:	f3ef 8310 	mrs	r3, PRIMASK
 8103250:	613b      	str	r3, [r7, #16]
  return(result);
 8103252:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8103254:	61fb      	str	r3, [r7, #28]
 8103256:	2301      	movs	r3, #1
 8103258:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 810325a:	697b      	ldr	r3, [r7, #20]
 810325c:	f383 8810 	msr	PRIMASK, r3
}
 8103260:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8103262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103264:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8103266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103268:	4413      	add	r3, r2
 810326a:	1c5a      	adds	r2, r3, #1
 810326c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810326e:	629a      	str	r2, [r3, #40]	@ 0x28
 8103270:	69fb      	ldr	r3, [r7, #28]
 8103272:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8103274:	69bb      	ldr	r3, [r7, #24]
 8103276:	f383 8810 	msr	PRIMASK, r3
}
 810327a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 810327c:	2300      	movs	r3, #0
}
 810327e:	4618      	mov	r0, r3
 8103280:	3744      	adds	r7, #68	@ 0x44
 8103282:	46bd      	mov	sp, r7
 8103284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103288:	4770      	bx	lr
	...

0810328c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 810328c:	b480      	push	{r7}
 810328e:	b087      	sub	sp, #28
 8103290:	af00      	add	r7, sp, #0
 8103292:	6078      	str	r0, [r7, #4]
 8103294:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8103296:	2300      	movs	r3, #0
 8103298:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 810329a:	e136      	b.n	810350a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 810329c:	683b      	ldr	r3, [r7, #0]
 810329e:	681a      	ldr	r2, [r3, #0]
 81032a0:	2101      	movs	r1, #1
 81032a2:	693b      	ldr	r3, [r7, #16]
 81032a4:	fa01 f303 	lsl.w	r3, r1, r3
 81032a8:	4013      	ands	r3, r2
 81032aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 81032ac:	68fb      	ldr	r3, [r7, #12]
 81032ae:	2b00      	cmp	r3, #0
 81032b0:	f000 8128 	beq.w	8103504 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 81032b4:	683b      	ldr	r3, [r7, #0]
 81032b6:	685b      	ldr	r3, [r3, #4]
 81032b8:	2b02      	cmp	r3, #2
 81032ba:	d003      	beq.n	81032c4 <HAL_GPIO_Init+0x38>
 81032bc:	683b      	ldr	r3, [r7, #0]
 81032be:	685b      	ldr	r3, [r3, #4]
 81032c0:	2b12      	cmp	r3, #18
 81032c2:	d125      	bne.n	8103310 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 81032c4:	693b      	ldr	r3, [r7, #16]
 81032c6:	08da      	lsrs	r2, r3, #3
 81032c8:	687b      	ldr	r3, [r7, #4]
 81032ca:	3208      	adds	r2, #8
 81032cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81032d0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 81032d2:	693b      	ldr	r3, [r7, #16]
 81032d4:	f003 0307 	and.w	r3, r3, #7
 81032d8:	009b      	lsls	r3, r3, #2
 81032da:	220f      	movs	r2, #15
 81032dc:	fa02 f303 	lsl.w	r3, r2, r3
 81032e0:	43db      	mvns	r3, r3
 81032e2:	697a      	ldr	r2, [r7, #20]
 81032e4:	4013      	ands	r3, r2
 81032e6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 81032e8:	683b      	ldr	r3, [r7, #0]
 81032ea:	691b      	ldr	r3, [r3, #16]
 81032ec:	f003 020f 	and.w	r2, r3, #15
 81032f0:	693b      	ldr	r3, [r7, #16]
 81032f2:	f003 0307 	and.w	r3, r3, #7
 81032f6:	009b      	lsls	r3, r3, #2
 81032f8:	fa02 f303 	lsl.w	r3, r2, r3
 81032fc:	697a      	ldr	r2, [r7, #20]
 81032fe:	4313      	orrs	r3, r2
 8103300:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8103302:	693b      	ldr	r3, [r7, #16]
 8103304:	08da      	lsrs	r2, r3, #3
 8103306:	687b      	ldr	r3, [r7, #4]
 8103308:	3208      	adds	r2, #8
 810330a:	6979      	ldr	r1, [r7, #20]
 810330c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8103310:	687b      	ldr	r3, [r7, #4]
 8103312:	681b      	ldr	r3, [r3, #0]
 8103314:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8103316:	693b      	ldr	r3, [r7, #16]
 8103318:	005b      	lsls	r3, r3, #1
 810331a:	2203      	movs	r2, #3
 810331c:	fa02 f303 	lsl.w	r3, r2, r3
 8103320:	43db      	mvns	r3, r3
 8103322:	697a      	ldr	r2, [r7, #20]
 8103324:	4013      	ands	r3, r2
 8103326:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8103328:	683b      	ldr	r3, [r7, #0]
 810332a:	685b      	ldr	r3, [r3, #4]
 810332c:	f003 0203 	and.w	r2, r3, #3
 8103330:	693b      	ldr	r3, [r7, #16]
 8103332:	005b      	lsls	r3, r3, #1
 8103334:	fa02 f303 	lsl.w	r3, r2, r3
 8103338:	697a      	ldr	r2, [r7, #20]
 810333a:	4313      	orrs	r3, r2
 810333c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 810333e:	687b      	ldr	r3, [r7, #4]
 8103340:	697a      	ldr	r2, [r7, #20]
 8103342:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8103344:	683b      	ldr	r3, [r7, #0]
 8103346:	685b      	ldr	r3, [r3, #4]
 8103348:	2b01      	cmp	r3, #1
 810334a:	d00b      	beq.n	8103364 <HAL_GPIO_Init+0xd8>
 810334c:	683b      	ldr	r3, [r7, #0]
 810334e:	685b      	ldr	r3, [r3, #4]
 8103350:	2b02      	cmp	r3, #2
 8103352:	d007      	beq.n	8103364 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8103354:	683b      	ldr	r3, [r7, #0]
 8103356:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8103358:	2b11      	cmp	r3, #17
 810335a:	d003      	beq.n	8103364 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 810335c:	683b      	ldr	r3, [r7, #0]
 810335e:	685b      	ldr	r3, [r3, #4]
 8103360:	2b12      	cmp	r3, #18
 8103362:	d130      	bne.n	81033c6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8103364:	687b      	ldr	r3, [r7, #4]
 8103366:	689b      	ldr	r3, [r3, #8]
 8103368:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 810336a:	693b      	ldr	r3, [r7, #16]
 810336c:	005b      	lsls	r3, r3, #1
 810336e:	2203      	movs	r2, #3
 8103370:	fa02 f303 	lsl.w	r3, r2, r3
 8103374:	43db      	mvns	r3, r3
 8103376:	697a      	ldr	r2, [r7, #20]
 8103378:	4013      	ands	r3, r2
 810337a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 810337c:	683b      	ldr	r3, [r7, #0]
 810337e:	68da      	ldr	r2, [r3, #12]
 8103380:	693b      	ldr	r3, [r7, #16]
 8103382:	005b      	lsls	r3, r3, #1
 8103384:	fa02 f303 	lsl.w	r3, r2, r3
 8103388:	697a      	ldr	r2, [r7, #20]
 810338a:	4313      	orrs	r3, r2
 810338c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 810338e:	687b      	ldr	r3, [r7, #4]
 8103390:	697a      	ldr	r2, [r7, #20]
 8103392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8103394:	687b      	ldr	r3, [r7, #4]
 8103396:	685b      	ldr	r3, [r3, #4]
 8103398:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 810339a:	2201      	movs	r2, #1
 810339c:	693b      	ldr	r3, [r7, #16]
 810339e:	fa02 f303 	lsl.w	r3, r2, r3
 81033a2:	43db      	mvns	r3, r3
 81033a4:	697a      	ldr	r2, [r7, #20]
 81033a6:	4013      	ands	r3, r2
 81033a8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 81033aa:	683b      	ldr	r3, [r7, #0]
 81033ac:	685b      	ldr	r3, [r3, #4]
 81033ae:	091b      	lsrs	r3, r3, #4
 81033b0:	f003 0201 	and.w	r2, r3, #1
 81033b4:	693b      	ldr	r3, [r7, #16]
 81033b6:	fa02 f303 	lsl.w	r3, r2, r3
 81033ba:	697a      	ldr	r2, [r7, #20]
 81033bc:	4313      	orrs	r3, r2
 81033be:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 81033c0:	687b      	ldr	r3, [r7, #4]
 81033c2:	697a      	ldr	r2, [r7, #20]
 81033c4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 81033c6:	683b      	ldr	r3, [r7, #0]
 81033c8:	685b      	ldr	r3, [r3, #4]
 81033ca:	2b03      	cmp	r3, #3
 81033cc:	d017      	beq.n	81033fe <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 81033ce:	687b      	ldr	r3, [r7, #4]
 81033d0:	68db      	ldr	r3, [r3, #12]
 81033d2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 81033d4:	693b      	ldr	r3, [r7, #16]
 81033d6:	005b      	lsls	r3, r3, #1
 81033d8:	2203      	movs	r2, #3
 81033da:	fa02 f303 	lsl.w	r3, r2, r3
 81033de:	43db      	mvns	r3, r3
 81033e0:	697a      	ldr	r2, [r7, #20]
 81033e2:	4013      	ands	r3, r2
 81033e4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 81033e6:	683b      	ldr	r3, [r7, #0]
 81033e8:	689a      	ldr	r2, [r3, #8]
 81033ea:	693b      	ldr	r3, [r7, #16]
 81033ec:	005b      	lsls	r3, r3, #1
 81033ee:	fa02 f303 	lsl.w	r3, r2, r3
 81033f2:	697a      	ldr	r2, [r7, #20]
 81033f4:	4313      	orrs	r3, r2
 81033f6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 81033f8:	687b      	ldr	r3, [r7, #4]
 81033fa:	697a      	ldr	r2, [r7, #20]
 81033fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 81033fe:	683b      	ldr	r3, [r7, #0]
 8103400:	685b      	ldr	r3, [r3, #4]
 8103402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8103406:	2b00      	cmp	r3, #0
 8103408:	d07c      	beq.n	8103504 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 810340a:	4a47      	ldr	r2, [pc, #284]	@ (8103528 <HAL_GPIO_Init+0x29c>)
 810340c:	693b      	ldr	r3, [r7, #16]
 810340e:	089b      	lsrs	r3, r3, #2
 8103410:	3318      	adds	r3, #24
 8103412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103416:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8103418:	693b      	ldr	r3, [r7, #16]
 810341a:	f003 0303 	and.w	r3, r3, #3
 810341e:	00db      	lsls	r3, r3, #3
 8103420:	220f      	movs	r2, #15
 8103422:	fa02 f303 	lsl.w	r3, r2, r3
 8103426:	43db      	mvns	r3, r3
 8103428:	697a      	ldr	r2, [r7, #20]
 810342a:	4013      	ands	r3, r2
 810342c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 810342e:	687b      	ldr	r3, [r7, #4]
 8103430:	0a9a      	lsrs	r2, r3, #10
 8103432:	4b3e      	ldr	r3, [pc, #248]	@ (810352c <HAL_GPIO_Init+0x2a0>)
 8103434:	4013      	ands	r3, r2
 8103436:	693a      	ldr	r2, [r7, #16]
 8103438:	f002 0203 	and.w	r2, r2, #3
 810343c:	00d2      	lsls	r2, r2, #3
 810343e:	4093      	lsls	r3, r2
 8103440:	697a      	ldr	r2, [r7, #20]
 8103442:	4313      	orrs	r3, r2
 8103444:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8103446:	4938      	ldr	r1, [pc, #224]	@ (8103528 <HAL_GPIO_Init+0x29c>)
 8103448:	693b      	ldr	r3, [r7, #16]
 810344a:	089b      	lsrs	r3, r3, #2
 810344c:	3318      	adds	r3, #24
 810344e:	697a      	ldr	r2, [r7, #20]
 8103450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8103454:	4b34      	ldr	r3, [pc, #208]	@ (8103528 <HAL_GPIO_Init+0x29c>)
 8103456:	681b      	ldr	r3, [r3, #0]
 8103458:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 810345a:	68fb      	ldr	r3, [r7, #12]
 810345c:	43db      	mvns	r3, r3
 810345e:	697a      	ldr	r2, [r7, #20]
 8103460:	4013      	ands	r3, r2
 8103462:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8103464:	683b      	ldr	r3, [r7, #0]
 8103466:	685b      	ldr	r3, [r3, #4]
 8103468:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810346c:	2b00      	cmp	r3, #0
 810346e:	d003      	beq.n	8103478 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8103470:	697a      	ldr	r2, [r7, #20]
 8103472:	68fb      	ldr	r3, [r7, #12]
 8103474:	4313      	orrs	r3, r2
 8103476:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8103478:	4a2b      	ldr	r2, [pc, #172]	@ (8103528 <HAL_GPIO_Init+0x29c>)
 810347a:	697b      	ldr	r3, [r7, #20]
 810347c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 810347e:	4b2a      	ldr	r3, [pc, #168]	@ (8103528 <HAL_GPIO_Init+0x29c>)
 8103480:	685b      	ldr	r3, [r3, #4]
 8103482:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8103484:	68fb      	ldr	r3, [r7, #12]
 8103486:	43db      	mvns	r3, r3
 8103488:	697a      	ldr	r2, [r7, #20]
 810348a:	4013      	ands	r3, r2
 810348c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 810348e:	683b      	ldr	r3, [r7, #0]
 8103490:	685b      	ldr	r3, [r3, #4]
 8103492:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8103496:	2b00      	cmp	r3, #0
 8103498:	d003      	beq.n	81034a2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 810349a:	697a      	ldr	r2, [r7, #20]
 810349c:	68fb      	ldr	r3, [r7, #12]
 810349e:	4313      	orrs	r3, r2
 81034a0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 81034a2:	4a21      	ldr	r2, [pc, #132]	@ (8103528 <HAL_GPIO_Init+0x29c>)
 81034a4:	697b      	ldr	r3, [r7, #20]
 81034a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 81034a8:	4b1f      	ldr	r3, [pc, #124]	@ (8103528 <HAL_GPIO_Init+0x29c>)
 81034aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81034ae:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 81034b0:	68fb      	ldr	r3, [r7, #12]
 81034b2:	43db      	mvns	r3, r3
 81034b4:	697a      	ldr	r2, [r7, #20]
 81034b6:	4013      	ands	r3, r2
 81034b8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81034ba:	683b      	ldr	r3, [r7, #0]
 81034bc:	685b      	ldr	r3, [r3, #4]
 81034be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81034c2:	2b00      	cmp	r3, #0
 81034c4:	d003      	beq.n	81034ce <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 81034c6:	697a      	ldr	r2, [r7, #20]
 81034c8:	68fb      	ldr	r3, [r7, #12]
 81034ca:	4313      	orrs	r3, r2
 81034cc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 81034ce:	4a16      	ldr	r2, [pc, #88]	@ (8103528 <HAL_GPIO_Init+0x29c>)
 81034d0:	697b      	ldr	r3, [r7, #20]
 81034d2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 81034d6:	4b14      	ldr	r3, [pc, #80]	@ (8103528 <HAL_GPIO_Init+0x29c>)
 81034d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81034dc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 81034de:	68fb      	ldr	r3, [r7, #12]
 81034e0:	43db      	mvns	r3, r3
 81034e2:	697a      	ldr	r2, [r7, #20]
 81034e4:	4013      	ands	r3, r2
 81034e6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 81034e8:	683b      	ldr	r3, [r7, #0]
 81034ea:	685b      	ldr	r3, [r3, #4]
 81034ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81034f0:	2b00      	cmp	r3, #0
 81034f2:	d003      	beq.n	81034fc <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 81034f4:	697a      	ldr	r2, [r7, #20]
 81034f6:	68fb      	ldr	r3, [r7, #12]
 81034f8:	4313      	orrs	r3, r2
 81034fa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 81034fc:	4a0a      	ldr	r2, [pc, #40]	@ (8103528 <HAL_GPIO_Init+0x29c>)
 81034fe:	697b      	ldr	r3, [r7, #20]
 8103500:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8103504:	693b      	ldr	r3, [r7, #16]
 8103506:	3301      	adds	r3, #1
 8103508:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 810350a:	683b      	ldr	r3, [r7, #0]
 810350c:	681a      	ldr	r2, [r3, #0]
 810350e:	693b      	ldr	r3, [r7, #16]
 8103510:	fa22 f303 	lsr.w	r3, r2, r3
 8103514:	2b00      	cmp	r3, #0
 8103516:	f47f aec1 	bne.w	810329c <HAL_GPIO_Init+0x10>
  }
}
 810351a:	bf00      	nop
 810351c:	bf00      	nop
 810351e:	371c      	adds	r7, #28
 8103520:	46bd      	mov	sp, r7
 8103522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103526:	4770      	bx	lr
 8103528:	44022000 	.word	0x44022000
 810352c:	002f7f7f 	.word	0x002f7f7f

08103530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8103530:	b580      	push	{r7, lr}
 8103532:	b088      	sub	sp, #32
 8103534:	af00      	add	r7, sp, #0
 8103536:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8103538:	687b      	ldr	r3, [r7, #4]
 810353a:	2b00      	cmp	r3, #0
 810353c:	d102      	bne.n	8103544 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 810353e:	2301      	movs	r3, #1
 8103540:	f000 bc28 	b.w	8103d94 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8103544:	4b94      	ldr	r3, [pc, #592]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 8103546:	69db      	ldr	r3, [r3, #28]
 8103548:	f003 0318 	and.w	r3, r3, #24
 810354c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 810354e:	4b92      	ldr	r3, [pc, #584]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 8103550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103552:	f003 0303 	and.w	r3, r3, #3
 8103556:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8103558:	687b      	ldr	r3, [r7, #4]
 810355a:	681b      	ldr	r3, [r3, #0]
 810355c:	f003 0310 	and.w	r3, r3, #16
 8103560:	2b00      	cmp	r3, #0
 8103562:	d05b      	beq.n	810361c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8103564:	69fb      	ldr	r3, [r7, #28]
 8103566:	2b08      	cmp	r3, #8
 8103568:	d005      	beq.n	8103576 <HAL_RCC_OscConfig+0x46>
 810356a:	69fb      	ldr	r3, [r7, #28]
 810356c:	2b18      	cmp	r3, #24
 810356e:	d114      	bne.n	810359a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8103570:	69bb      	ldr	r3, [r7, #24]
 8103572:	2b02      	cmp	r3, #2
 8103574:	d111      	bne.n	810359a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8103576:	687b      	ldr	r3, [r7, #4]
 8103578:	69db      	ldr	r3, [r3, #28]
 810357a:	2b00      	cmp	r3, #0
 810357c:	d102      	bne.n	8103584 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 810357e:	2301      	movs	r3, #1
 8103580:	f000 bc08 	b.w	8103d94 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8103584:	4b84      	ldr	r3, [pc, #528]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 8103586:	699b      	ldr	r3, [r3, #24]
 8103588:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	6a1b      	ldr	r3, [r3, #32]
 8103590:	041b      	lsls	r3, r3, #16
 8103592:	4981      	ldr	r1, [pc, #516]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 8103594:	4313      	orrs	r3, r2
 8103596:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8103598:	e040      	b.n	810361c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	69db      	ldr	r3, [r3, #28]
 810359e:	2b00      	cmp	r3, #0
 81035a0:	d023      	beq.n	81035ea <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 81035a2:	4b7d      	ldr	r3, [pc, #500]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81035a4:	681b      	ldr	r3, [r3, #0]
 81035a6:	4a7c      	ldr	r2, [pc, #496]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81035a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81035ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81035ae:	f7fd ff7d 	bl	81014ac <HAL_GetTick>
 81035b2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 81035b4:	e008      	b.n	81035c8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 81035b6:	f7fd ff79 	bl	81014ac <HAL_GetTick>
 81035ba:	4602      	mov	r2, r0
 81035bc:	697b      	ldr	r3, [r7, #20]
 81035be:	1ad3      	subs	r3, r2, r3
 81035c0:	2b02      	cmp	r3, #2
 81035c2:	d901      	bls.n	81035c8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 81035c4:	2303      	movs	r3, #3
 81035c6:	e3e5      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 81035c8:	4b73      	ldr	r3, [pc, #460]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81035ca:	681b      	ldr	r3, [r3, #0]
 81035cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81035d0:	2b00      	cmp	r3, #0
 81035d2:	d0f0      	beq.n	81035b6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 81035d4:	4b70      	ldr	r3, [pc, #448]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81035d6:	699b      	ldr	r3, [r3, #24]
 81035d8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	6a1b      	ldr	r3, [r3, #32]
 81035e0:	041b      	lsls	r3, r3, #16
 81035e2:	496d      	ldr	r1, [pc, #436]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81035e4:	4313      	orrs	r3, r2
 81035e6:	618b      	str	r3, [r1, #24]
 81035e8:	e018      	b.n	810361c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 81035ea:	4b6b      	ldr	r3, [pc, #428]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81035ec:	681b      	ldr	r3, [r3, #0]
 81035ee:	4a6a      	ldr	r2, [pc, #424]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81035f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81035f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81035f6:	f7fd ff59 	bl	81014ac <HAL_GetTick>
 81035fa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 81035fc:	e008      	b.n	8103610 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 81035fe:	f7fd ff55 	bl	81014ac <HAL_GetTick>
 8103602:	4602      	mov	r2, r0
 8103604:	697b      	ldr	r3, [r7, #20]
 8103606:	1ad3      	subs	r3, r2, r3
 8103608:	2b02      	cmp	r3, #2
 810360a:	d901      	bls.n	8103610 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 810360c:	2303      	movs	r3, #3
 810360e:	e3c1      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8103610:	4b61      	ldr	r3, [pc, #388]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 8103612:	681b      	ldr	r3, [r3, #0]
 8103614:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8103618:	2b00      	cmp	r3, #0
 810361a:	d1f0      	bne.n	81035fe <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	681b      	ldr	r3, [r3, #0]
 8103620:	f003 0301 	and.w	r3, r3, #1
 8103624:	2b00      	cmp	r3, #0
 8103626:	f000 80a0 	beq.w	810376a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 810362a:	69fb      	ldr	r3, [r7, #28]
 810362c:	2b10      	cmp	r3, #16
 810362e:	d005      	beq.n	810363c <HAL_RCC_OscConfig+0x10c>
 8103630:	69fb      	ldr	r3, [r7, #28]
 8103632:	2b18      	cmp	r3, #24
 8103634:	d109      	bne.n	810364a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8103636:	69bb      	ldr	r3, [r7, #24]
 8103638:	2b03      	cmp	r3, #3
 810363a:	d106      	bne.n	810364a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 810363c:	687b      	ldr	r3, [r7, #4]
 810363e:	685b      	ldr	r3, [r3, #4]
 8103640:	2b00      	cmp	r3, #0
 8103642:	f040 8092 	bne.w	810376a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8103646:	2301      	movs	r3, #1
 8103648:	e3a4      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 810364a:	687b      	ldr	r3, [r7, #4]
 810364c:	685b      	ldr	r3, [r3, #4]
 810364e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103652:	d106      	bne.n	8103662 <HAL_RCC_OscConfig+0x132>
 8103654:	4b50      	ldr	r3, [pc, #320]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 8103656:	681b      	ldr	r3, [r3, #0]
 8103658:	4a4f      	ldr	r2, [pc, #316]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 810365a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810365e:	6013      	str	r3, [r2, #0]
 8103660:	e058      	b.n	8103714 <HAL_RCC_OscConfig+0x1e4>
 8103662:	687b      	ldr	r3, [r7, #4]
 8103664:	685b      	ldr	r3, [r3, #4]
 8103666:	2b00      	cmp	r3, #0
 8103668:	d112      	bne.n	8103690 <HAL_RCC_OscConfig+0x160>
 810366a:	4b4b      	ldr	r3, [pc, #300]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 810366c:	681b      	ldr	r3, [r3, #0]
 810366e:	4a4a      	ldr	r2, [pc, #296]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 8103670:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8103674:	6013      	str	r3, [r2, #0]
 8103676:	4b48      	ldr	r3, [pc, #288]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 8103678:	681b      	ldr	r3, [r3, #0]
 810367a:	4a47      	ldr	r2, [pc, #284]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 810367c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8103680:	6013      	str	r3, [r2, #0]
 8103682:	4b45      	ldr	r3, [pc, #276]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 8103684:	681b      	ldr	r3, [r3, #0]
 8103686:	4a44      	ldr	r2, [pc, #272]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 8103688:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810368c:	6013      	str	r3, [r2, #0]
 810368e:	e041      	b.n	8103714 <HAL_RCC_OscConfig+0x1e4>
 8103690:	687b      	ldr	r3, [r7, #4]
 8103692:	685b      	ldr	r3, [r3, #4]
 8103694:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103698:	d112      	bne.n	81036c0 <HAL_RCC_OscConfig+0x190>
 810369a:	4b3f      	ldr	r3, [pc, #252]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 810369c:	681b      	ldr	r3, [r3, #0]
 810369e:	4a3e      	ldr	r2, [pc, #248]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81036a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 81036a4:	6013      	str	r3, [r2, #0]
 81036a6:	4b3c      	ldr	r3, [pc, #240]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81036a8:	681b      	ldr	r3, [r3, #0]
 81036aa:	4a3b      	ldr	r2, [pc, #236]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81036ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 81036b0:	6013      	str	r3, [r2, #0]
 81036b2:	4b39      	ldr	r3, [pc, #228]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81036b4:	681b      	ldr	r3, [r3, #0]
 81036b6:	4a38      	ldr	r2, [pc, #224]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81036b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81036bc:	6013      	str	r3, [r2, #0]
 81036be:	e029      	b.n	8103714 <HAL_RCC_OscConfig+0x1e4>
 81036c0:	687b      	ldr	r3, [r7, #4]
 81036c2:	685b      	ldr	r3, [r3, #4]
 81036c4:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 81036c8:	d112      	bne.n	81036f0 <HAL_RCC_OscConfig+0x1c0>
 81036ca:	4b33      	ldr	r3, [pc, #204]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81036cc:	681b      	ldr	r3, [r3, #0]
 81036ce:	4a32      	ldr	r2, [pc, #200]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81036d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 81036d4:	6013      	str	r3, [r2, #0]
 81036d6:	4b30      	ldr	r3, [pc, #192]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81036d8:	681b      	ldr	r3, [r3, #0]
 81036da:	4a2f      	ldr	r2, [pc, #188]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81036dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81036e0:	6013      	str	r3, [r2, #0]
 81036e2:	4b2d      	ldr	r3, [pc, #180]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81036e4:	681b      	ldr	r3, [r3, #0]
 81036e6:	4a2c      	ldr	r2, [pc, #176]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81036e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81036ec:	6013      	str	r3, [r2, #0]
 81036ee:	e011      	b.n	8103714 <HAL_RCC_OscConfig+0x1e4>
 81036f0:	4b29      	ldr	r3, [pc, #164]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81036f2:	681b      	ldr	r3, [r3, #0]
 81036f4:	4a28      	ldr	r2, [pc, #160]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81036f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81036fa:	6013      	str	r3, [r2, #0]
 81036fc:	4b26      	ldr	r3, [pc, #152]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 81036fe:	681b      	ldr	r3, [r3, #0]
 8103700:	4a25      	ldr	r2, [pc, #148]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 8103702:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8103706:	6013      	str	r3, [r2, #0]
 8103708:	4b23      	ldr	r3, [pc, #140]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 810370a:	681b      	ldr	r3, [r3, #0]
 810370c:	4a22      	ldr	r2, [pc, #136]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 810370e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8103712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8103714:	687b      	ldr	r3, [r7, #4]
 8103716:	685b      	ldr	r3, [r3, #4]
 8103718:	2b00      	cmp	r3, #0
 810371a:	d013      	beq.n	8103744 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810371c:	f7fd fec6 	bl	81014ac <HAL_GetTick>
 8103720:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8103722:	e008      	b.n	8103736 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8103724:	f7fd fec2 	bl	81014ac <HAL_GetTick>
 8103728:	4602      	mov	r2, r0
 810372a:	697b      	ldr	r3, [r7, #20]
 810372c:	1ad3      	subs	r3, r2, r3
 810372e:	2b64      	cmp	r3, #100	@ 0x64
 8103730:	d901      	bls.n	8103736 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8103732:	2303      	movs	r3, #3
 8103734:	e32e      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8103736:	4b18      	ldr	r3, [pc, #96]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 8103738:	681b      	ldr	r3, [r3, #0]
 810373a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810373e:	2b00      	cmp	r3, #0
 8103740:	d0f0      	beq.n	8103724 <HAL_RCC_OscConfig+0x1f4>
 8103742:	e012      	b.n	810376a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103744:	f7fd feb2 	bl	81014ac <HAL_GetTick>
 8103748:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 810374a:	e008      	b.n	810375e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 810374c:	f7fd feae 	bl	81014ac <HAL_GetTick>
 8103750:	4602      	mov	r2, r0
 8103752:	697b      	ldr	r3, [r7, #20]
 8103754:	1ad3      	subs	r3, r2, r3
 8103756:	2b64      	cmp	r3, #100	@ 0x64
 8103758:	d901      	bls.n	810375e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 810375a:	2303      	movs	r3, #3
 810375c:	e31a      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 810375e:	4b0e      	ldr	r3, [pc, #56]	@ (8103798 <HAL_RCC_OscConfig+0x268>)
 8103760:	681b      	ldr	r3, [r3, #0]
 8103762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103766:	2b00      	cmp	r3, #0
 8103768:	d1f0      	bne.n	810374c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 810376a:	687b      	ldr	r3, [r7, #4]
 810376c:	681b      	ldr	r3, [r3, #0]
 810376e:	f003 0302 	and.w	r3, r3, #2
 8103772:	2b00      	cmp	r3, #0
 8103774:	f000 809a 	beq.w	81038ac <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8103778:	69fb      	ldr	r3, [r7, #28]
 810377a:	2b00      	cmp	r3, #0
 810377c:	d005      	beq.n	810378a <HAL_RCC_OscConfig+0x25a>
 810377e:	69fb      	ldr	r3, [r7, #28]
 8103780:	2b18      	cmp	r3, #24
 8103782:	d149      	bne.n	8103818 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8103784:	69bb      	ldr	r3, [r7, #24]
 8103786:	2b01      	cmp	r3, #1
 8103788:	d146      	bne.n	8103818 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 810378a:	687b      	ldr	r3, [r7, #4]
 810378c:	68db      	ldr	r3, [r3, #12]
 810378e:	2b00      	cmp	r3, #0
 8103790:	d104      	bne.n	810379c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8103792:	2301      	movs	r3, #1
 8103794:	e2fe      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
 8103796:	bf00      	nop
 8103798:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 810379c:	69fb      	ldr	r3, [r7, #28]
 810379e:	2b00      	cmp	r3, #0
 81037a0:	d11c      	bne.n	81037dc <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 81037a2:	4b9a      	ldr	r3, [pc, #616]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81037a4:	681b      	ldr	r3, [r3, #0]
 81037a6:	f003 0218 	and.w	r2, r3, #24
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	691b      	ldr	r3, [r3, #16]
 81037ae:	429a      	cmp	r2, r3
 81037b0:	d014      	beq.n	81037dc <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 81037b2:	4b96      	ldr	r3, [pc, #600]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81037b4:	681b      	ldr	r3, [r3, #0]
 81037b6:	f023 0218 	bic.w	r2, r3, #24
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	691b      	ldr	r3, [r3, #16]
 81037be:	4993      	ldr	r1, [pc, #588]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81037c0:	4313      	orrs	r3, r2
 81037c2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 81037c4:	f000 fdd0 	bl	8104368 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 81037c8:	4b91      	ldr	r3, [pc, #580]	@ (8103a10 <HAL_RCC_OscConfig+0x4e0>)
 81037ca:	681b      	ldr	r3, [r3, #0]
 81037cc:	4618      	mov	r0, r3
 81037ce:	f7fd fba1 	bl	8100f14 <HAL_InitTick>
 81037d2:	4603      	mov	r3, r0
 81037d4:	2b00      	cmp	r3, #0
 81037d6:	d001      	beq.n	81037dc <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 81037d8:	2301      	movs	r3, #1
 81037da:	e2db      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81037dc:	f7fd fe66 	bl	81014ac <HAL_GetTick>
 81037e0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 81037e2:	e008      	b.n	81037f6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 81037e4:	f7fd fe62 	bl	81014ac <HAL_GetTick>
 81037e8:	4602      	mov	r2, r0
 81037ea:	697b      	ldr	r3, [r7, #20]
 81037ec:	1ad3      	subs	r3, r2, r3
 81037ee:	2b02      	cmp	r3, #2
 81037f0:	d901      	bls.n	81037f6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 81037f2:	2303      	movs	r3, #3
 81037f4:	e2ce      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 81037f6:	4b85      	ldr	r3, [pc, #532]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81037f8:	681b      	ldr	r3, [r3, #0]
 81037fa:	f003 0302 	and.w	r3, r3, #2
 81037fe:	2b00      	cmp	r3, #0
 8103800:	d0f0      	beq.n	81037e4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8103802:	4b82      	ldr	r3, [pc, #520]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 8103804:	691b      	ldr	r3, [r3, #16]
 8103806:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 810380a:	687b      	ldr	r3, [r7, #4]
 810380c:	695b      	ldr	r3, [r3, #20]
 810380e:	041b      	lsls	r3, r3, #16
 8103810:	497e      	ldr	r1, [pc, #504]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 8103812:	4313      	orrs	r3, r2
 8103814:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8103816:	e049      	b.n	81038ac <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8103818:	687b      	ldr	r3, [r7, #4]
 810381a:	68db      	ldr	r3, [r3, #12]
 810381c:	2b00      	cmp	r3, #0
 810381e:	d02c      	beq.n	810387a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8103820:	4b7a      	ldr	r3, [pc, #488]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 8103822:	681b      	ldr	r3, [r3, #0]
 8103824:	f023 0218 	bic.w	r2, r3, #24
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	691b      	ldr	r3, [r3, #16]
 810382c:	4977      	ldr	r1, [pc, #476]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 810382e:	4313      	orrs	r3, r2
 8103830:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8103832:	4b76      	ldr	r3, [pc, #472]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 8103834:	681b      	ldr	r3, [r3, #0]
 8103836:	4a75      	ldr	r2, [pc, #468]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 8103838:	f043 0301 	orr.w	r3, r3, #1
 810383c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810383e:	f7fd fe35 	bl	81014ac <HAL_GetTick>
 8103842:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8103844:	e008      	b.n	8103858 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8103846:	f7fd fe31 	bl	81014ac <HAL_GetTick>
 810384a:	4602      	mov	r2, r0
 810384c:	697b      	ldr	r3, [r7, #20]
 810384e:	1ad3      	subs	r3, r2, r3
 8103850:	2b02      	cmp	r3, #2
 8103852:	d901      	bls.n	8103858 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8103854:	2303      	movs	r3, #3
 8103856:	e29d      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8103858:	4b6c      	ldr	r3, [pc, #432]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 810385a:	681b      	ldr	r3, [r3, #0]
 810385c:	f003 0302 	and.w	r3, r3, #2
 8103860:	2b00      	cmp	r3, #0
 8103862:	d0f0      	beq.n	8103846 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8103864:	4b69      	ldr	r3, [pc, #420]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 8103866:	691b      	ldr	r3, [r3, #16]
 8103868:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	695b      	ldr	r3, [r3, #20]
 8103870:	041b      	lsls	r3, r3, #16
 8103872:	4966      	ldr	r1, [pc, #408]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 8103874:	4313      	orrs	r3, r2
 8103876:	610b      	str	r3, [r1, #16]
 8103878:	e018      	b.n	81038ac <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 810387a:	4b64      	ldr	r3, [pc, #400]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 810387c:	681b      	ldr	r3, [r3, #0]
 810387e:	4a63      	ldr	r2, [pc, #396]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 8103880:	f023 0301 	bic.w	r3, r3, #1
 8103884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103886:	f7fd fe11 	bl	81014ac <HAL_GetTick>
 810388a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 810388c:	e008      	b.n	81038a0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 810388e:	f7fd fe0d 	bl	81014ac <HAL_GetTick>
 8103892:	4602      	mov	r2, r0
 8103894:	697b      	ldr	r3, [r7, #20]
 8103896:	1ad3      	subs	r3, r2, r3
 8103898:	2b02      	cmp	r3, #2
 810389a:	d901      	bls.n	81038a0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 810389c:	2303      	movs	r3, #3
 810389e:	e279      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 81038a0:	4b5a      	ldr	r3, [pc, #360]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81038a2:	681b      	ldr	r3, [r3, #0]
 81038a4:	f003 0302 	and.w	r3, r3, #2
 81038a8:	2b00      	cmp	r3, #0
 81038aa:	d1f0      	bne.n	810388e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 81038ac:	687b      	ldr	r3, [r7, #4]
 81038ae:	681b      	ldr	r3, [r3, #0]
 81038b0:	f003 0308 	and.w	r3, r3, #8
 81038b4:	2b00      	cmp	r3, #0
 81038b6:	d03c      	beq.n	8103932 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 81038b8:	687b      	ldr	r3, [r7, #4]
 81038ba:	699b      	ldr	r3, [r3, #24]
 81038bc:	2b00      	cmp	r3, #0
 81038be:	d01c      	beq.n	81038fa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 81038c0:	4b52      	ldr	r3, [pc, #328]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81038c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81038c6:	4a51      	ldr	r2, [pc, #324]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81038c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81038cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 81038d0:	f7fd fdec 	bl	81014ac <HAL_GetTick>
 81038d4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 81038d6:	e008      	b.n	81038ea <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 81038d8:	f7fd fde8 	bl	81014ac <HAL_GetTick>
 81038dc:	4602      	mov	r2, r0
 81038de:	697b      	ldr	r3, [r7, #20]
 81038e0:	1ad3      	subs	r3, r2, r3
 81038e2:	2b02      	cmp	r3, #2
 81038e4:	d901      	bls.n	81038ea <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 81038e6:	2303      	movs	r3, #3
 81038e8:	e254      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 81038ea:	4b48      	ldr	r3, [pc, #288]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81038ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81038f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81038f4:	2b00      	cmp	r3, #0
 81038f6:	d0ef      	beq.n	81038d8 <HAL_RCC_OscConfig+0x3a8>
 81038f8:	e01b      	b.n	8103932 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 81038fa:	4b44      	ldr	r3, [pc, #272]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81038fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103900:	4a42      	ldr	r2, [pc, #264]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 8103902:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8103906:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 810390a:	f7fd fdcf 	bl	81014ac <HAL_GetTick>
 810390e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8103910:	e008      	b.n	8103924 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8103912:	f7fd fdcb 	bl	81014ac <HAL_GetTick>
 8103916:	4602      	mov	r2, r0
 8103918:	697b      	ldr	r3, [r7, #20]
 810391a:	1ad3      	subs	r3, r2, r3
 810391c:	2b02      	cmp	r3, #2
 810391e:	d901      	bls.n	8103924 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8103920:	2303      	movs	r3, #3
 8103922:	e237      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8103924:	4b39      	ldr	r3, [pc, #228]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 8103926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810392a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810392e:	2b00      	cmp	r3, #0
 8103930:	d1ef      	bne.n	8103912 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8103932:	687b      	ldr	r3, [r7, #4]
 8103934:	681b      	ldr	r3, [r3, #0]
 8103936:	f003 0304 	and.w	r3, r3, #4
 810393a:	2b00      	cmp	r3, #0
 810393c:	f000 80d2 	beq.w	8103ae4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8103940:	4b34      	ldr	r3, [pc, #208]	@ (8103a14 <HAL_RCC_OscConfig+0x4e4>)
 8103942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103944:	f003 0301 	and.w	r3, r3, #1
 8103948:	2b00      	cmp	r3, #0
 810394a:	d118      	bne.n	810397e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 810394c:	4b31      	ldr	r3, [pc, #196]	@ (8103a14 <HAL_RCC_OscConfig+0x4e4>)
 810394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103950:	4a30      	ldr	r2, [pc, #192]	@ (8103a14 <HAL_RCC_OscConfig+0x4e4>)
 8103952:	f043 0301 	orr.w	r3, r3, #1
 8103956:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8103958:	f7fd fda8 	bl	81014ac <HAL_GetTick>
 810395c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 810395e:	e008      	b.n	8103972 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103960:	f7fd fda4 	bl	81014ac <HAL_GetTick>
 8103964:	4602      	mov	r2, r0
 8103966:	697b      	ldr	r3, [r7, #20]
 8103968:	1ad3      	subs	r3, r2, r3
 810396a:	2b02      	cmp	r3, #2
 810396c:	d901      	bls.n	8103972 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 810396e:	2303      	movs	r3, #3
 8103970:	e210      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8103972:	4b28      	ldr	r3, [pc, #160]	@ (8103a14 <HAL_RCC_OscConfig+0x4e4>)
 8103974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103976:	f003 0301 	and.w	r3, r3, #1
 810397a:	2b00      	cmp	r3, #0
 810397c:	d0f0      	beq.n	8103960 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 810397e:	687b      	ldr	r3, [r7, #4]
 8103980:	689b      	ldr	r3, [r3, #8]
 8103982:	2b01      	cmp	r3, #1
 8103984:	d108      	bne.n	8103998 <HAL_RCC_OscConfig+0x468>
 8103986:	4b21      	ldr	r3, [pc, #132]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 8103988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810398c:	4a1f      	ldr	r2, [pc, #124]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 810398e:	f043 0301 	orr.w	r3, r3, #1
 8103992:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8103996:	e074      	b.n	8103a82 <HAL_RCC_OscConfig+0x552>
 8103998:	687b      	ldr	r3, [r7, #4]
 810399a:	689b      	ldr	r3, [r3, #8]
 810399c:	2b00      	cmp	r3, #0
 810399e:	d118      	bne.n	81039d2 <HAL_RCC_OscConfig+0x4a2>
 81039a0:	4b1a      	ldr	r3, [pc, #104]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81039a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81039a6:	4a19      	ldr	r2, [pc, #100]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81039a8:	f023 0301 	bic.w	r3, r3, #1
 81039ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81039b0:	4b16      	ldr	r3, [pc, #88]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81039b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81039b6:	4a15      	ldr	r2, [pc, #84]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81039b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81039bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81039c0:	4b12      	ldr	r3, [pc, #72]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81039c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81039c6:	4a11      	ldr	r2, [pc, #68]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81039c8:	f023 0304 	bic.w	r3, r3, #4
 81039cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81039d0:	e057      	b.n	8103a82 <HAL_RCC_OscConfig+0x552>
 81039d2:	687b      	ldr	r3, [r7, #4]
 81039d4:	689b      	ldr	r3, [r3, #8]
 81039d6:	2b05      	cmp	r3, #5
 81039d8:	d11e      	bne.n	8103a18 <HAL_RCC_OscConfig+0x4e8>
 81039da:	4b0c      	ldr	r3, [pc, #48]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81039dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81039e0:	4a0a      	ldr	r2, [pc, #40]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81039e2:	f043 0304 	orr.w	r3, r3, #4
 81039e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81039ea:	4b08      	ldr	r3, [pc, #32]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81039ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81039f0:	4a06      	ldr	r2, [pc, #24]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81039f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81039f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81039fa:	4b04      	ldr	r3, [pc, #16]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 81039fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103a00:	4a02      	ldr	r2, [pc, #8]	@ (8103a0c <HAL_RCC_OscConfig+0x4dc>)
 8103a02:	f043 0301 	orr.w	r3, r3, #1
 8103a06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8103a0a:	e03a      	b.n	8103a82 <HAL_RCC_OscConfig+0x552>
 8103a0c:	44020c00 	.word	0x44020c00
 8103a10:	20050004 	.word	0x20050004
 8103a14:	44020800 	.word	0x44020800
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	689b      	ldr	r3, [r3, #8]
 8103a1c:	2b85      	cmp	r3, #133	@ 0x85
 8103a1e:	d118      	bne.n	8103a52 <HAL_RCC_OscConfig+0x522>
 8103a20:	4ba2      	ldr	r3, [pc, #648]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103a22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103a26:	4aa1      	ldr	r2, [pc, #644]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103a28:	f043 0304 	orr.w	r3, r3, #4
 8103a2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8103a30:	4b9e      	ldr	r3, [pc, #632]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103a32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103a36:	4a9d      	ldr	r2, [pc, #628]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8103a3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8103a40:	4b9a      	ldr	r3, [pc, #616]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103a46:	4a99      	ldr	r2, [pc, #612]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103a48:	f043 0301 	orr.w	r3, r3, #1
 8103a4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8103a50:	e017      	b.n	8103a82 <HAL_RCC_OscConfig+0x552>
 8103a52:	4b96      	ldr	r3, [pc, #600]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103a58:	4a94      	ldr	r2, [pc, #592]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103a5a:	f023 0301 	bic.w	r3, r3, #1
 8103a5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8103a62:	4b92      	ldr	r3, [pc, #584]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103a68:	4a90      	ldr	r2, [pc, #576]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103a6a:	f023 0304 	bic.w	r3, r3, #4
 8103a6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8103a72:	4b8e      	ldr	r3, [pc, #568]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103a74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103a78:	4a8c      	ldr	r2, [pc, #560]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103a7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8103a7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	689b      	ldr	r3, [r3, #8]
 8103a86:	2b00      	cmp	r3, #0
 8103a88:	d016      	beq.n	8103ab8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8103a8a:	f7fd fd0f 	bl	81014ac <HAL_GetTick>
 8103a8e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8103a90:	e00a      	b.n	8103aa8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103a92:	f7fd fd0b 	bl	81014ac <HAL_GetTick>
 8103a96:	4602      	mov	r2, r0
 8103a98:	697b      	ldr	r3, [r7, #20]
 8103a9a:	1ad3      	subs	r3, r2, r3
 8103a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8103aa0:	4293      	cmp	r3, r2
 8103aa2:	d901      	bls.n	8103aa8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8103aa4:	2303      	movs	r3, #3
 8103aa6:	e175      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8103aa8:	4b80      	ldr	r3, [pc, #512]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103aae:	f003 0302 	and.w	r3, r3, #2
 8103ab2:	2b00      	cmp	r3, #0
 8103ab4:	d0ed      	beq.n	8103a92 <HAL_RCC_OscConfig+0x562>
 8103ab6:	e015      	b.n	8103ae4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8103ab8:	f7fd fcf8 	bl	81014ac <HAL_GetTick>
 8103abc:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8103abe:	e00a      	b.n	8103ad6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103ac0:	f7fd fcf4 	bl	81014ac <HAL_GetTick>
 8103ac4:	4602      	mov	r2, r0
 8103ac6:	697b      	ldr	r3, [r7, #20]
 8103ac8:	1ad3      	subs	r3, r2, r3
 8103aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8103ace:	4293      	cmp	r3, r2
 8103ad0:	d901      	bls.n	8103ad6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8103ad2:	2303      	movs	r3, #3
 8103ad4:	e15e      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8103ad6:	4b75      	ldr	r3, [pc, #468]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103adc:	f003 0302 	and.w	r3, r3, #2
 8103ae0:	2b00      	cmp	r3, #0
 8103ae2:	d1ed      	bne.n	8103ac0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8103ae4:	687b      	ldr	r3, [r7, #4]
 8103ae6:	681b      	ldr	r3, [r3, #0]
 8103ae8:	f003 0320 	and.w	r3, r3, #32
 8103aec:	2b00      	cmp	r3, #0
 8103aee:	d036      	beq.n	8103b5e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103af4:	2b00      	cmp	r3, #0
 8103af6:	d019      	beq.n	8103b2c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8103af8:	4b6c      	ldr	r3, [pc, #432]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103afa:	681b      	ldr	r3, [r3, #0]
 8103afc:	4a6b      	ldr	r2, [pc, #428]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103afe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8103b02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8103b04:	f7fd fcd2 	bl	81014ac <HAL_GetTick>
 8103b08:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8103b0a:	e008      	b.n	8103b1e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8103b0c:	f7fd fcce 	bl	81014ac <HAL_GetTick>
 8103b10:	4602      	mov	r2, r0
 8103b12:	697b      	ldr	r3, [r7, #20]
 8103b14:	1ad3      	subs	r3, r2, r3
 8103b16:	2b02      	cmp	r3, #2
 8103b18:	d901      	bls.n	8103b1e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8103b1a:	2303      	movs	r3, #3
 8103b1c:	e13a      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8103b1e:	4b63      	ldr	r3, [pc, #396]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103b20:	681b      	ldr	r3, [r3, #0]
 8103b22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8103b26:	2b00      	cmp	r3, #0
 8103b28:	d0f0      	beq.n	8103b0c <HAL_RCC_OscConfig+0x5dc>
 8103b2a:	e018      	b.n	8103b5e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8103b2c:	4b5f      	ldr	r3, [pc, #380]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103b2e:	681b      	ldr	r3, [r3, #0]
 8103b30:	4a5e      	ldr	r2, [pc, #376]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103b32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8103b36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8103b38:	f7fd fcb8 	bl	81014ac <HAL_GetTick>
 8103b3c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8103b3e:	e008      	b.n	8103b52 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8103b40:	f7fd fcb4 	bl	81014ac <HAL_GetTick>
 8103b44:	4602      	mov	r2, r0
 8103b46:	697b      	ldr	r3, [r7, #20]
 8103b48:	1ad3      	subs	r3, r2, r3
 8103b4a:	2b02      	cmp	r3, #2
 8103b4c:	d901      	bls.n	8103b52 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8103b4e:	2303      	movs	r3, #3
 8103b50:	e120      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8103b52:	4b56      	ldr	r3, [pc, #344]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103b54:	681b      	ldr	r3, [r3, #0]
 8103b56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8103b5a:	2b00      	cmp	r3, #0
 8103b5c:	d1f0      	bne.n	8103b40 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8103b5e:	687b      	ldr	r3, [r7, #4]
 8103b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103b62:	2b00      	cmp	r3, #0
 8103b64:	f000 8115 	beq.w	8103d92 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8103b68:	69fb      	ldr	r3, [r7, #28]
 8103b6a:	2b18      	cmp	r3, #24
 8103b6c:	f000 80af 	beq.w	8103cce <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8103b70:	687b      	ldr	r3, [r7, #4]
 8103b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103b74:	2b02      	cmp	r3, #2
 8103b76:	f040 8086 	bne.w	8103c86 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8103b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103b7c:	681b      	ldr	r3, [r3, #0]
 8103b7e:	4a4b      	ldr	r2, [pc, #300]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103b80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8103b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103b86:	f7fd fc91 	bl	81014ac <HAL_GetTick>
 8103b8a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8103b8c:	e008      	b.n	8103ba0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8103b8e:	f7fd fc8d 	bl	81014ac <HAL_GetTick>
 8103b92:	4602      	mov	r2, r0
 8103b94:	697b      	ldr	r3, [r7, #20]
 8103b96:	1ad3      	subs	r3, r2, r3
 8103b98:	2b02      	cmp	r3, #2
 8103b9a:	d901      	bls.n	8103ba0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8103b9c:	2303      	movs	r3, #3
 8103b9e:	e0f9      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8103ba0:	4b42      	ldr	r3, [pc, #264]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103ba2:	681b      	ldr	r3, [r3, #0]
 8103ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103ba8:	2b00      	cmp	r3, #0
 8103baa:	d1f0      	bne.n	8103b8e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8103bac:	4b3f      	ldr	r3, [pc, #252]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103bb0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8103bb4:	f023 0303 	bic.w	r3, r3, #3
 8103bb8:	687a      	ldr	r2, [r7, #4]
 8103bba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8103bbc:	687a      	ldr	r2, [r7, #4]
 8103bbe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8103bc0:	0212      	lsls	r2, r2, #8
 8103bc2:	430a      	orrs	r2, r1
 8103bc4:	4939      	ldr	r1, [pc, #228]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103bc6:	4313      	orrs	r3, r2
 8103bc8:	628b      	str	r3, [r1, #40]	@ 0x28
 8103bca:	687b      	ldr	r3, [r7, #4]
 8103bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103bce:	3b01      	subs	r3, #1
 8103bd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103bd4:	687b      	ldr	r3, [r7, #4]
 8103bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103bd8:	3b01      	subs	r3, #1
 8103bda:	025b      	lsls	r3, r3, #9
 8103bdc:	b29b      	uxth	r3, r3
 8103bde:	431a      	orrs	r2, r3
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103be4:	3b01      	subs	r3, #1
 8103be6:	041b      	lsls	r3, r3, #16
 8103be8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8103bec:	431a      	orrs	r2, r3
 8103bee:	687b      	ldr	r3, [r7, #4]
 8103bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103bf2:	3b01      	subs	r3, #1
 8103bf4:	061b      	lsls	r3, r3, #24
 8103bf6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8103bfa:	492c      	ldr	r1, [pc, #176]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103bfc:	4313      	orrs	r3, r2
 8103bfe:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8103c00:	4b2a      	ldr	r3, [pc, #168]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103c04:	4a29      	ldr	r2, [pc, #164]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103c06:	f023 0310 	bic.w	r3, r3, #16
 8103c0a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8103c0c:	687b      	ldr	r3, [r7, #4]
 8103c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103c10:	4a26      	ldr	r2, [pc, #152]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103c12:	00db      	lsls	r3, r3, #3
 8103c14:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8103c16:	4b25      	ldr	r3, [pc, #148]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103c1a:	4a24      	ldr	r2, [pc, #144]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103c1c:	f043 0310 	orr.w	r3, r3, #16
 8103c20:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8103c22:	4b22      	ldr	r3, [pc, #136]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103c26:	f023 020c 	bic.w	r2, r3, #12
 8103c2a:	687b      	ldr	r3, [r7, #4]
 8103c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103c2e:	491f      	ldr	r1, [pc, #124]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103c30:	4313      	orrs	r3, r2
 8103c32:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8103c34:	4b1d      	ldr	r3, [pc, #116]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103c38:	f023 0220 	bic.w	r2, r3, #32
 8103c3c:	687b      	ldr	r3, [r7, #4]
 8103c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103c40:	491a      	ldr	r1, [pc, #104]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103c42:	4313      	orrs	r3, r2
 8103c44:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8103c46:	4b19      	ldr	r3, [pc, #100]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103c4a:	4a18      	ldr	r2, [pc, #96]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8103c50:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8103c52:	4b16      	ldr	r3, [pc, #88]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103c54:	681b      	ldr	r3, [r3, #0]
 8103c56:	4a15      	ldr	r2, [pc, #84]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103c58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8103c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103c5e:	f7fd fc25 	bl	81014ac <HAL_GetTick>
 8103c62:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8103c64:	e008      	b.n	8103c78 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8103c66:	f7fd fc21 	bl	81014ac <HAL_GetTick>
 8103c6a:	4602      	mov	r2, r0
 8103c6c:	697b      	ldr	r3, [r7, #20]
 8103c6e:	1ad3      	subs	r3, r2, r3
 8103c70:	2b02      	cmp	r3, #2
 8103c72:	d901      	bls.n	8103c78 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8103c74:	2303      	movs	r3, #3
 8103c76:	e08d      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8103c78:	4b0c      	ldr	r3, [pc, #48]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103c7a:	681b      	ldr	r3, [r3, #0]
 8103c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103c80:	2b00      	cmp	r3, #0
 8103c82:	d0f0      	beq.n	8103c66 <HAL_RCC_OscConfig+0x736>
 8103c84:	e085      	b.n	8103d92 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8103c86:	4b09      	ldr	r3, [pc, #36]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103c88:	681b      	ldr	r3, [r3, #0]
 8103c8a:	4a08      	ldr	r2, [pc, #32]	@ (8103cac <HAL_RCC_OscConfig+0x77c>)
 8103c8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8103c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103c92:	f7fd fc0b 	bl	81014ac <HAL_GetTick>
 8103c96:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8103c98:	e00a      	b.n	8103cb0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8103c9a:	f7fd fc07 	bl	81014ac <HAL_GetTick>
 8103c9e:	4602      	mov	r2, r0
 8103ca0:	697b      	ldr	r3, [r7, #20]
 8103ca2:	1ad3      	subs	r3, r2, r3
 8103ca4:	2b02      	cmp	r3, #2
 8103ca6:	d903      	bls.n	8103cb0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8103ca8:	2303      	movs	r3, #3
 8103caa:	e073      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
 8103cac:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8103cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8103d9c <HAL_RCC_OscConfig+0x86c>)
 8103cb2:	681b      	ldr	r3, [r3, #0]
 8103cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103cb8:	2b00      	cmp	r3, #0
 8103cba:	d1ee      	bne.n	8103c9a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8103cbc:	4b37      	ldr	r3, [pc, #220]	@ (8103d9c <HAL_RCC_OscConfig+0x86c>)
 8103cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103cc0:	4a36      	ldr	r2, [pc, #216]	@ (8103d9c <HAL_RCC_OscConfig+0x86c>)
 8103cc2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8103cc6:	f023 0303 	bic.w	r3, r3, #3
 8103cca:	6293      	str	r3, [r2, #40]	@ 0x28
 8103ccc:	e061      	b.n	8103d92 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8103cce:	4b33      	ldr	r3, [pc, #204]	@ (8103d9c <HAL_RCC_OscConfig+0x86c>)
 8103cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103cd2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8103cd4:	4b31      	ldr	r3, [pc, #196]	@ (8103d9c <HAL_RCC_OscConfig+0x86c>)
 8103cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103cd8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8103cda:	687b      	ldr	r3, [r7, #4]
 8103cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103cde:	2b01      	cmp	r3, #1
 8103ce0:	d031      	beq.n	8103d46 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8103ce2:	693b      	ldr	r3, [r7, #16]
 8103ce4:	f003 0203 	and.w	r2, r3, #3
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8103cec:	429a      	cmp	r2, r3
 8103cee:	d12a      	bne.n	8103d46 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8103cf0:	693b      	ldr	r3, [r7, #16]
 8103cf2:	0a1b      	lsrs	r3, r3, #8
 8103cf4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8103cf8:	687b      	ldr	r3, [r7, #4]
 8103cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8103cfc:	429a      	cmp	r2, r3
 8103cfe:	d122      	bne.n	8103d46 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8103d00:	68fb      	ldr	r3, [r7, #12]
 8103d02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103d06:	687b      	ldr	r3, [r7, #4]
 8103d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103d0a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8103d0c:	429a      	cmp	r2, r3
 8103d0e:	d11a      	bne.n	8103d46 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8103d10:	68fb      	ldr	r3, [r7, #12]
 8103d12:	0a5b      	lsrs	r3, r3, #9
 8103d14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103d1c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8103d1e:	429a      	cmp	r2, r3
 8103d20:	d111      	bne.n	8103d46 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8103d22:	68fb      	ldr	r3, [r7, #12]
 8103d24:	0c1b      	lsrs	r3, r3, #16
 8103d26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103d2e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8103d30:	429a      	cmp	r2, r3
 8103d32:	d108      	bne.n	8103d46 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8103d34:	68fb      	ldr	r3, [r7, #12]
 8103d36:	0e1b      	lsrs	r3, r3, #24
 8103d38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8103d3c:	687b      	ldr	r3, [r7, #4]
 8103d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103d40:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8103d42:	429a      	cmp	r2, r3
 8103d44:	d001      	beq.n	8103d4a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8103d46:	2301      	movs	r3, #1
 8103d48:	e024      	b.n	8103d94 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8103d4a:	4b14      	ldr	r3, [pc, #80]	@ (8103d9c <HAL_RCC_OscConfig+0x86c>)
 8103d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103d4e:	08db      	lsrs	r3, r3, #3
 8103d50:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8103d54:	687b      	ldr	r3, [r7, #4]
 8103d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8103d58:	429a      	cmp	r2, r3
 8103d5a:	d01a      	beq.n	8103d92 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8103d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8103d9c <HAL_RCC_OscConfig+0x86c>)
 8103d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103d60:	4a0e      	ldr	r2, [pc, #56]	@ (8103d9c <HAL_RCC_OscConfig+0x86c>)
 8103d62:	f023 0310 	bic.w	r3, r3, #16
 8103d66:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103d68:	f7fd fba0 	bl	81014ac <HAL_GetTick>
 8103d6c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8103d6e:	bf00      	nop
 8103d70:	f7fd fb9c 	bl	81014ac <HAL_GetTick>
 8103d74:	4602      	mov	r2, r0
 8103d76:	697b      	ldr	r3, [r7, #20]
 8103d78:	4293      	cmp	r3, r2
 8103d7a:	d0f9      	beq.n	8103d70 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8103d7c:	687b      	ldr	r3, [r7, #4]
 8103d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103d80:	4a06      	ldr	r2, [pc, #24]	@ (8103d9c <HAL_RCC_OscConfig+0x86c>)
 8103d82:	00db      	lsls	r3, r3, #3
 8103d84:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8103d86:	4b05      	ldr	r3, [pc, #20]	@ (8103d9c <HAL_RCC_OscConfig+0x86c>)
 8103d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103d8a:	4a04      	ldr	r2, [pc, #16]	@ (8103d9c <HAL_RCC_OscConfig+0x86c>)
 8103d8c:	f043 0310 	orr.w	r3, r3, #16
 8103d90:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8103d92:	2300      	movs	r3, #0
}
 8103d94:	4618      	mov	r0, r3
 8103d96:	3720      	adds	r7, #32
 8103d98:	46bd      	mov	sp, r7
 8103d9a:	bd80      	pop	{r7, pc}
 8103d9c:	44020c00 	.word	0x44020c00

08103da0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8103da0:	b580      	push	{r7, lr}
 8103da2:	b084      	sub	sp, #16
 8103da4:	af00      	add	r7, sp, #0
 8103da6:	6078      	str	r0, [r7, #4]
 8103da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8103daa:	687b      	ldr	r3, [r7, #4]
 8103dac:	2b00      	cmp	r3, #0
 8103dae:	d101      	bne.n	8103db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8103db0:	2301      	movs	r3, #1
 8103db2:	e19e      	b.n	81040f2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8103db4:	4b83      	ldr	r3, [pc, #524]	@ (8103fc4 <HAL_RCC_ClockConfig+0x224>)
 8103db6:	681b      	ldr	r3, [r3, #0]
 8103db8:	f003 030f 	and.w	r3, r3, #15
 8103dbc:	683a      	ldr	r2, [r7, #0]
 8103dbe:	429a      	cmp	r2, r3
 8103dc0:	d910      	bls.n	8103de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8103dc2:	4b80      	ldr	r3, [pc, #512]	@ (8103fc4 <HAL_RCC_ClockConfig+0x224>)
 8103dc4:	681b      	ldr	r3, [r3, #0]
 8103dc6:	f023 020f 	bic.w	r2, r3, #15
 8103dca:	497e      	ldr	r1, [pc, #504]	@ (8103fc4 <HAL_RCC_ClockConfig+0x224>)
 8103dcc:	683b      	ldr	r3, [r7, #0]
 8103dce:	4313      	orrs	r3, r2
 8103dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8103dd2:	4b7c      	ldr	r3, [pc, #496]	@ (8103fc4 <HAL_RCC_ClockConfig+0x224>)
 8103dd4:	681b      	ldr	r3, [r3, #0]
 8103dd6:	f003 030f 	and.w	r3, r3, #15
 8103dda:	683a      	ldr	r2, [r7, #0]
 8103ddc:	429a      	cmp	r2, r3
 8103dde:	d001      	beq.n	8103de4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8103de0:	2301      	movs	r3, #1
 8103de2:	e186      	b.n	81040f2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8103de4:	687b      	ldr	r3, [r7, #4]
 8103de6:	681b      	ldr	r3, [r3, #0]
 8103de8:	f003 0310 	and.w	r3, r3, #16
 8103dec:	2b00      	cmp	r3, #0
 8103dee:	d012      	beq.n	8103e16 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8103df0:	687b      	ldr	r3, [r7, #4]
 8103df2:	695a      	ldr	r2, [r3, #20]
 8103df4:	4b74      	ldr	r3, [pc, #464]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103df6:	6a1b      	ldr	r3, [r3, #32]
 8103df8:	0a1b      	lsrs	r3, r3, #8
 8103dfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8103dfe:	429a      	cmp	r2, r3
 8103e00:	d909      	bls.n	8103e16 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8103e02:	4b71      	ldr	r3, [pc, #452]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103e04:	6a1b      	ldr	r3, [r3, #32]
 8103e06:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8103e0a:	687b      	ldr	r3, [r7, #4]
 8103e0c:	695b      	ldr	r3, [r3, #20]
 8103e0e:	021b      	lsls	r3, r3, #8
 8103e10:	496d      	ldr	r1, [pc, #436]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103e12:	4313      	orrs	r3, r2
 8103e14:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8103e16:	687b      	ldr	r3, [r7, #4]
 8103e18:	681b      	ldr	r3, [r3, #0]
 8103e1a:	f003 0308 	and.w	r3, r3, #8
 8103e1e:	2b00      	cmp	r3, #0
 8103e20:	d012      	beq.n	8103e48 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8103e22:	687b      	ldr	r3, [r7, #4]
 8103e24:	691a      	ldr	r2, [r3, #16]
 8103e26:	4b68      	ldr	r3, [pc, #416]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103e28:	6a1b      	ldr	r3, [r3, #32]
 8103e2a:	091b      	lsrs	r3, r3, #4
 8103e2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8103e30:	429a      	cmp	r2, r3
 8103e32:	d909      	bls.n	8103e48 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8103e34:	4b64      	ldr	r3, [pc, #400]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103e36:	6a1b      	ldr	r3, [r3, #32]
 8103e38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8103e3c:	687b      	ldr	r3, [r7, #4]
 8103e3e:	691b      	ldr	r3, [r3, #16]
 8103e40:	011b      	lsls	r3, r3, #4
 8103e42:	4961      	ldr	r1, [pc, #388]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103e44:	4313      	orrs	r3, r2
 8103e46:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8103e48:	687b      	ldr	r3, [r7, #4]
 8103e4a:	681b      	ldr	r3, [r3, #0]
 8103e4c:	f003 0304 	and.w	r3, r3, #4
 8103e50:	2b00      	cmp	r3, #0
 8103e52:	d010      	beq.n	8103e76 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8103e54:	687b      	ldr	r3, [r7, #4]
 8103e56:	68da      	ldr	r2, [r3, #12]
 8103e58:	4b5b      	ldr	r3, [pc, #364]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103e5a:	6a1b      	ldr	r3, [r3, #32]
 8103e5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8103e60:	429a      	cmp	r2, r3
 8103e62:	d908      	bls.n	8103e76 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8103e64:	4b58      	ldr	r3, [pc, #352]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103e66:	6a1b      	ldr	r3, [r3, #32]
 8103e68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	68db      	ldr	r3, [r3, #12]
 8103e70:	4955      	ldr	r1, [pc, #340]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103e72:	4313      	orrs	r3, r2
 8103e74:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8103e76:	687b      	ldr	r3, [r7, #4]
 8103e78:	681b      	ldr	r3, [r3, #0]
 8103e7a:	f003 0302 	and.w	r3, r3, #2
 8103e7e:	2b00      	cmp	r3, #0
 8103e80:	d010      	beq.n	8103ea4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8103e82:	687b      	ldr	r3, [r7, #4]
 8103e84:	689a      	ldr	r2, [r3, #8]
 8103e86:	4b50      	ldr	r3, [pc, #320]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103e88:	6a1b      	ldr	r3, [r3, #32]
 8103e8a:	f003 030f 	and.w	r3, r3, #15
 8103e8e:	429a      	cmp	r2, r3
 8103e90:	d908      	bls.n	8103ea4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8103e92:	4b4d      	ldr	r3, [pc, #308]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103e94:	6a1b      	ldr	r3, [r3, #32]
 8103e96:	f023 020f 	bic.w	r2, r3, #15
 8103e9a:	687b      	ldr	r3, [r7, #4]
 8103e9c:	689b      	ldr	r3, [r3, #8]
 8103e9e:	494a      	ldr	r1, [pc, #296]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103ea0:	4313      	orrs	r3, r2
 8103ea2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8103ea4:	687b      	ldr	r3, [r7, #4]
 8103ea6:	681b      	ldr	r3, [r3, #0]
 8103ea8:	f003 0301 	and.w	r3, r3, #1
 8103eac:	2b00      	cmp	r3, #0
 8103eae:	f000 8093 	beq.w	8103fd8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8103eb2:	687b      	ldr	r3, [r7, #4]
 8103eb4:	685b      	ldr	r3, [r3, #4]
 8103eb6:	2b03      	cmp	r3, #3
 8103eb8:	d107      	bne.n	8103eca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8103eba:	4b43      	ldr	r3, [pc, #268]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103ebc:	681b      	ldr	r3, [r3, #0]
 8103ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103ec2:	2b00      	cmp	r3, #0
 8103ec4:	d121      	bne.n	8103f0a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8103ec6:	2301      	movs	r3, #1
 8103ec8:	e113      	b.n	81040f2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8103eca:	687b      	ldr	r3, [r7, #4]
 8103ecc:	685b      	ldr	r3, [r3, #4]
 8103ece:	2b02      	cmp	r3, #2
 8103ed0:	d107      	bne.n	8103ee2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8103ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103ed4:	681b      	ldr	r3, [r3, #0]
 8103ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103eda:	2b00      	cmp	r3, #0
 8103edc:	d115      	bne.n	8103f0a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8103ede:	2301      	movs	r3, #1
 8103ee0:	e107      	b.n	81040f2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8103ee2:	687b      	ldr	r3, [r7, #4]
 8103ee4:	685b      	ldr	r3, [r3, #4]
 8103ee6:	2b01      	cmp	r3, #1
 8103ee8:	d107      	bne.n	8103efa <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8103eea:	4b37      	ldr	r3, [pc, #220]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103eec:	681b      	ldr	r3, [r3, #0]
 8103eee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8103ef2:	2b00      	cmp	r3, #0
 8103ef4:	d109      	bne.n	8103f0a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8103ef6:	2301      	movs	r3, #1
 8103ef8:	e0fb      	b.n	81040f2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8103efa:	4b33      	ldr	r3, [pc, #204]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103efc:	681b      	ldr	r3, [r3, #0]
 8103efe:	f003 0302 	and.w	r3, r3, #2
 8103f02:	2b00      	cmp	r3, #0
 8103f04:	d101      	bne.n	8103f0a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8103f06:	2301      	movs	r3, #1
 8103f08:	e0f3      	b.n	81040f2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8103f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103f0c:	69db      	ldr	r3, [r3, #28]
 8103f0e:	f023 0203 	bic.w	r2, r3, #3
 8103f12:	687b      	ldr	r3, [r7, #4]
 8103f14:	685b      	ldr	r3, [r3, #4]
 8103f16:	492c      	ldr	r1, [pc, #176]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103f18:	4313      	orrs	r3, r2
 8103f1a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103f1c:	f7fd fac6 	bl	81014ac <HAL_GetTick>
 8103f20:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8103f22:	687b      	ldr	r3, [r7, #4]
 8103f24:	685b      	ldr	r3, [r3, #4]
 8103f26:	2b03      	cmp	r3, #3
 8103f28:	d112      	bne.n	8103f50 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8103f2a:	e00a      	b.n	8103f42 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8103f2c:	f7fd fabe 	bl	81014ac <HAL_GetTick>
 8103f30:	4602      	mov	r2, r0
 8103f32:	68fb      	ldr	r3, [r7, #12]
 8103f34:	1ad3      	subs	r3, r2, r3
 8103f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8103f3a:	4293      	cmp	r3, r2
 8103f3c:	d901      	bls.n	8103f42 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8103f3e:	2303      	movs	r3, #3
 8103f40:	e0d7      	b.n	81040f2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8103f42:	4b21      	ldr	r3, [pc, #132]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103f44:	69db      	ldr	r3, [r3, #28]
 8103f46:	f003 0318 	and.w	r3, r3, #24
 8103f4a:	2b18      	cmp	r3, #24
 8103f4c:	d1ee      	bne.n	8103f2c <HAL_RCC_ClockConfig+0x18c>
 8103f4e:	e043      	b.n	8103fd8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8103f50:	687b      	ldr	r3, [r7, #4]
 8103f52:	685b      	ldr	r3, [r3, #4]
 8103f54:	2b02      	cmp	r3, #2
 8103f56:	d112      	bne.n	8103f7e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8103f58:	e00a      	b.n	8103f70 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8103f5a:	f7fd faa7 	bl	81014ac <HAL_GetTick>
 8103f5e:	4602      	mov	r2, r0
 8103f60:	68fb      	ldr	r3, [r7, #12]
 8103f62:	1ad3      	subs	r3, r2, r3
 8103f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8103f68:	4293      	cmp	r3, r2
 8103f6a:	d901      	bls.n	8103f70 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8103f6c:	2303      	movs	r3, #3
 8103f6e:	e0c0      	b.n	81040f2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8103f70:	4b15      	ldr	r3, [pc, #84]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103f72:	69db      	ldr	r3, [r3, #28]
 8103f74:	f003 0318 	and.w	r3, r3, #24
 8103f78:	2b10      	cmp	r3, #16
 8103f7a:	d1ee      	bne.n	8103f5a <HAL_RCC_ClockConfig+0x1ba>
 8103f7c:	e02c      	b.n	8103fd8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8103f7e:	687b      	ldr	r3, [r7, #4]
 8103f80:	685b      	ldr	r3, [r3, #4]
 8103f82:	2b01      	cmp	r3, #1
 8103f84:	d122      	bne.n	8103fcc <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8103f86:	e00a      	b.n	8103f9e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8103f88:	f7fd fa90 	bl	81014ac <HAL_GetTick>
 8103f8c:	4602      	mov	r2, r0
 8103f8e:	68fb      	ldr	r3, [r7, #12]
 8103f90:	1ad3      	subs	r3, r2, r3
 8103f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8103f96:	4293      	cmp	r3, r2
 8103f98:	d901      	bls.n	8103f9e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8103f9a:	2303      	movs	r3, #3
 8103f9c:	e0a9      	b.n	81040f2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8103f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8103fc8 <HAL_RCC_ClockConfig+0x228>)
 8103fa0:	69db      	ldr	r3, [r3, #28]
 8103fa2:	f003 0318 	and.w	r3, r3, #24
 8103fa6:	2b08      	cmp	r3, #8
 8103fa8:	d1ee      	bne.n	8103f88 <HAL_RCC_ClockConfig+0x1e8>
 8103faa:	e015      	b.n	8103fd8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8103fac:	f7fd fa7e 	bl	81014ac <HAL_GetTick>
 8103fb0:	4602      	mov	r2, r0
 8103fb2:	68fb      	ldr	r3, [r7, #12]
 8103fb4:	1ad3      	subs	r3, r2, r3
 8103fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8103fba:	4293      	cmp	r3, r2
 8103fbc:	d906      	bls.n	8103fcc <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8103fbe:	2303      	movs	r3, #3
 8103fc0:	e097      	b.n	81040f2 <HAL_RCC_ClockConfig+0x352>
 8103fc2:	bf00      	nop
 8103fc4:	40022000 	.word	0x40022000
 8103fc8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8103fcc:	4b4b      	ldr	r3, [pc, #300]	@ (81040fc <HAL_RCC_ClockConfig+0x35c>)
 8103fce:	69db      	ldr	r3, [r3, #28]
 8103fd0:	f003 0318 	and.w	r3, r3, #24
 8103fd4:	2b00      	cmp	r3, #0
 8103fd6:	d1e9      	bne.n	8103fac <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8103fd8:	687b      	ldr	r3, [r7, #4]
 8103fda:	681b      	ldr	r3, [r3, #0]
 8103fdc:	f003 0302 	and.w	r3, r3, #2
 8103fe0:	2b00      	cmp	r3, #0
 8103fe2:	d010      	beq.n	8104006 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	689a      	ldr	r2, [r3, #8]
 8103fe8:	4b44      	ldr	r3, [pc, #272]	@ (81040fc <HAL_RCC_ClockConfig+0x35c>)
 8103fea:	6a1b      	ldr	r3, [r3, #32]
 8103fec:	f003 030f 	and.w	r3, r3, #15
 8103ff0:	429a      	cmp	r2, r3
 8103ff2:	d208      	bcs.n	8104006 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8103ff4:	4b41      	ldr	r3, [pc, #260]	@ (81040fc <HAL_RCC_ClockConfig+0x35c>)
 8103ff6:	6a1b      	ldr	r3, [r3, #32]
 8103ff8:	f023 020f 	bic.w	r2, r3, #15
 8103ffc:	687b      	ldr	r3, [r7, #4]
 8103ffe:	689b      	ldr	r3, [r3, #8]
 8104000:	493e      	ldr	r1, [pc, #248]	@ (81040fc <HAL_RCC_ClockConfig+0x35c>)
 8104002:	4313      	orrs	r3, r2
 8104004:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8104006:	4b3e      	ldr	r3, [pc, #248]	@ (8104100 <HAL_RCC_ClockConfig+0x360>)
 8104008:	681b      	ldr	r3, [r3, #0]
 810400a:	f003 030f 	and.w	r3, r3, #15
 810400e:	683a      	ldr	r2, [r7, #0]
 8104010:	429a      	cmp	r2, r3
 8104012:	d210      	bcs.n	8104036 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8104014:	4b3a      	ldr	r3, [pc, #232]	@ (8104100 <HAL_RCC_ClockConfig+0x360>)
 8104016:	681b      	ldr	r3, [r3, #0]
 8104018:	f023 020f 	bic.w	r2, r3, #15
 810401c:	4938      	ldr	r1, [pc, #224]	@ (8104100 <HAL_RCC_ClockConfig+0x360>)
 810401e:	683b      	ldr	r3, [r7, #0]
 8104020:	4313      	orrs	r3, r2
 8104022:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8104024:	4b36      	ldr	r3, [pc, #216]	@ (8104100 <HAL_RCC_ClockConfig+0x360>)
 8104026:	681b      	ldr	r3, [r3, #0]
 8104028:	f003 030f 	and.w	r3, r3, #15
 810402c:	683a      	ldr	r2, [r7, #0]
 810402e:	429a      	cmp	r2, r3
 8104030:	d001      	beq.n	8104036 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8104032:	2301      	movs	r3, #1
 8104034:	e05d      	b.n	81040f2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8104036:	687b      	ldr	r3, [r7, #4]
 8104038:	681b      	ldr	r3, [r3, #0]
 810403a:	f003 0304 	and.w	r3, r3, #4
 810403e:	2b00      	cmp	r3, #0
 8104040:	d010      	beq.n	8104064 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8104042:	687b      	ldr	r3, [r7, #4]
 8104044:	68da      	ldr	r2, [r3, #12]
 8104046:	4b2d      	ldr	r3, [pc, #180]	@ (81040fc <HAL_RCC_ClockConfig+0x35c>)
 8104048:	6a1b      	ldr	r3, [r3, #32]
 810404a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 810404e:	429a      	cmp	r2, r3
 8104050:	d208      	bcs.n	8104064 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8104052:	4b2a      	ldr	r3, [pc, #168]	@ (81040fc <HAL_RCC_ClockConfig+0x35c>)
 8104054:	6a1b      	ldr	r3, [r3, #32]
 8104056:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 810405a:	687b      	ldr	r3, [r7, #4]
 810405c:	68db      	ldr	r3, [r3, #12]
 810405e:	4927      	ldr	r1, [pc, #156]	@ (81040fc <HAL_RCC_ClockConfig+0x35c>)
 8104060:	4313      	orrs	r3, r2
 8104062:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8104064:	687b      	ldr	r3, [r7, #4]
 8104066:	681b      	ldr	r3, [r3, #0]
 8104068:	f003 0308 	and.w	r3, r3, #8
 810406c:	2b00      	cmp	r3, #0
 810406e:	d012      	beq.n	8104096 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8104070:	687b      	ldr	r3, [r7, #4]
 8104072:	691a      	ldr	r2, [r3, #16]
 8104074:	4b21      	ldr	r3, [pc, #132]	@ (81040fc <HAL_RCC_ClockConfig+0x35c>)
 8104076:	6a1b      	ldr	r3, [r3, #32]
 8104078:	091b      	lsrs	r3, r3, #4
 810407a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 810407e:	429a      	cmp	r2, r3
 8104080:	d209      	bcs.n	8104096 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8104082:	4b1e      	ldr	r3, [pc, #120]	@ (81040fc <HAL_RCC_ClockConfig+0x35c>)
 8104084:	6a1b      	ldr	r3, [r3, #32]
 8104086:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 810408a:	687b      	ldr	r3, [r7, #4]
 810408c:	691b      	ldr	r3, [r3, #16]
 810408e:	011b      	lsls	r3, r3, #4
 8104090:	491a      	ldr	r1, [pc, #104]	@ (81040fc <HAL_RCC_ClockConfig+0x35c>)
 8104092:	4313      	orrs	r3, r2
 8104094:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8104096:	687b      	ldr	r3, [r7, #4]
 8104098:	681b      	ldr	r3, [r3, #0]
 810409a:	f003 0310 	and.w	r3, r3, #16
 810409e:	2b00      	cmp	r3, #0
 81040a0:	d012      	beq.n	81040c8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 81040a2:	687b      	ldr	r3, [r7, #4]
 81040a4:	695a      	ldr	r2, [r3, #20]
 81040a6:	4b15      	ldr	r3, [pc, #84]	@ (81040fc <HAL_RCC_ClockConfig+0x35c>)
 81040a8:	6a1b      	ldr	r3, [r3, #32]
 81040aa:	0a1b      	lsrs	r3, r3, #8
 81040ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 81040b0:	429a      	cmp	r2, r3
 81040b2:	d209      	bcs.n	81040c8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 81040b4:	4b11      	ldr	r3, [pc, #68]	@ (81040fc <HAL_RCC_ClockConfig+0x35c>)
 81040b6:	6a1b      	ldr	r3, [r3, #32]
 81040b8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 81040bc:	687b      	ldr	r3, [r7, #4]
 81040be:	695b      	ldr	r3, [r3, #20]
 81040c0:	021b      	lsls	r3, r3, #8
 81040c2:	490e      	ldr	r1, [pc, #56]	@ (81040fc <HAL_RCC_ClockConfig+0x35c>)
 81040c4:	4313      	orrs	r3, r2
 81040c6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 81040c8:	f000 f822 	bl	8104110 <HAL_RCC_GetSysClockFreq>
 81040cc:	4602      	mov	r2, r0
 81040ce:	4b0b      	ldr	r3, [pc, #44]	@ (81040fc <HAL_RCC_ClockConfig+0x35c>)
 81040d0:	6a1b      	ldr	r3, [r3, #32]
 81040d2:	f003 030f 	and.w	r3, r3, #15
 81040d6:	490b      	ldr	r1, [pc, #44]	@ (8104104 <HAL_RCC_ClockConfig+0x364>)
 81040d8:	5ccb      	ldrb	r3, [r1, r3]
 81040da:	fa22 f303 	lsr.w	r3, r2, r3
 81040de:	4a0a      	ldr	r2, [pc, #40]	@ (8104108 <HAL_RCC_ClockConfig+0x368>)
 81040e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 81040e2:	4b0a      	ldr	r3, [pc, #40]	@ (810410c <HAL_RCC_ClockConfig+0x36c>)
 81040e4:	681b      	ldr	r3, [r3, #0]
 81040e6:	4618      	mov	r0, r3
 81040e8:	f7fc ff14 	bl	8100f14 <HAL_InitTick>
 81040ec:	4603      	mov	r3, r0
 81040ee:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 81040f0:	7afb      	ldrb	r3, [r7, #11]
}
 81040f2:	4618      	mov	r0, r3
 81040f4:	3710      	adds	r7, #16
 81040f6:	46bd      	mov	sp, r7
 81040f8:	bd80      	pop	{r7, pc}
 81040fa:	bf00      	nop
 81040fc:	44020c00 	.word	0x44020c00
 8104100:	40022000 	.word	0x40022000
 8104104:	08117df4 	.word	0x08117df4
 8104108:	20050000 	.word	0x20050000
 810410c:	20050004 	.word	0x20050004

08104110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104110:	b480      	push	{r7}
 8104112:	b089      	sub	sp, #36	@ 0x24
 8104114:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8104116:	4b8c      	ldr	r3, [pc, #560]	@ (8104348 <HAL_RCC_GetSysClockFreq+0x238>)
 8104118:	69db      	ldr	r3, [r3, #28]
 810411a:	f003 0318 	and.w	r3, r3, #24
 810411e:	2b08      	cmp	r3, #8
 8104120:	d102      	bne.n	8104128 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8104122:	4b8a      	ldr	r3, [pc, #552]	@ (810434c <HAL_RCC_GetSysClockFreq+0x23c>)
 8104124:	61fb      	str	r3, [r7, #28]
 8104126:	e107      	b.n	8104338 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8104128:	4b87      	ldr	r3, [pc, #540]	@ (8104348 <HAL_RCC_GetSysClockFreq+0x238>)
 810412a:	69db      	ldr	r3, [r3, #28]
 810412c:	f003 0318 	and.w	r3, r3, #24
 8104130:	2b00      	cmp	r3, #0
 8104132:	d112      	bne.n	810415a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8104134:	4b84      	ldr	r3, [pc, #528]	@ (8104348 <HAL_RCC_GetSysClockFreq+0x238>)
 8104136:	681b      	ldr	r3, [r3, #0]
 8104138:	f003 0320 	and.w	r3, r3, #32
 810413c:	2b00      	cmp	r3, #0
 810413e:	d009      	beq.n	8104154 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8104140:	4b81      	ldr	r3, [pc, #516]	@ (8104348 <HAL_RCC_GetSysClockFreq+0x238>)
 8104142:	681b      	ldr	r3, [r3, #0]
 8104144:	08db      	lsrs	r3, r3, #3
 8104146:	f003 0303 	and.w	r3, r3, #3
 810414a:	4a81      	ldr	r2, [pc, #516]	@ (8104350 <HAL_RCC_GetSysClockFreq+0x240>)
 810414c:	fa22 f303 	lsr.w	r3, r2, r3
 8104150:	61fb      	str	r3, [r7, #28]
 8104152:	e0f1      	b.n	8104338 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8104154:	4b7e      	ldr	r3, [pc, #504]	@ (8104350 <HAL_RCC_GetSysClockFreq+0x240>)
 8104156:	61fb      	str	r3, [r7, #28]
 8104158:	e0ee      	b.n	8104338 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 810415a:	4b7b      	ldr	r3, [pc, #492]	@ (8104348 <HAL_RCC_GetSysClockFreq+0x238>)
 810415c:	69db      	ldr	r3, [r3, #28]
 810415e:	f003 0318 	and.w	r3, r3, #24
 8104162:	2b10      	cmp	r3, #16
 8104164:	d102      	bne.n	810416c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8104166:	4b7b      	ldr	r3, [pc, #492]	@ (8104354 <HAL_RCC_GetSysClockFreq+0x244>)
 8104168:	61fb      	str	r3, [r7, #28]
 810416a:	e0e5      	b.n	8104338 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 810416c:	4b76      	ldr	r3, [pc, #472]	@ (8104348 <HAL_RCC_GetSysClockFreq+0x238>)
 810416e:	69db      	ldr	r3, [r3, #28]
 8104170:	f003 0318 	and.w	r3, r3, #24
 8104174:	2b18      	cmp	r3, #24
 8104176:	f040 80dd 	bne.w	8104334 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 810417a:	4b73      	ldr	r3, [pc, #460]	@ (8104348 <HAL_RCC_GetSysClockFreq+0x238>)
 810417c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810417e:	f003 0303 	and.w	r3, r3, #3
 8104182:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8104184:	4b70      	ldr	r3, [pc, #448]	@ (8104348 <HAL_RCC_GetSysClockFreq+0x238>)
 8104186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104188:	0a1b      	lsrs	r3, r3, #8
 810418a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810418e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8104190:	4b6d      	ldr	r3, [pc, #436]	@ (8104348 <HAL_RCC_GetSysClockFreq+0x238>)
 8104192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104194:	091b      	lsrs	r3, r3, #4
 8104196:	f003 0301 	and.w	r3, r3, #1
 810419a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 810419c:	4b6a      	ldr	r3, [pc, #424]	@ (8104348 <HAL_RCC_GetSysClockFreq+0x238>)
 810419e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 81041a0:	08db      	lsrs	r3, r3, #3
 81041a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 81041a6:	68fa      	ldr	r2, [r7, #12]
 81041a8:	fb02 f303 	mul.w	r3, r2, r3
 81041ac:	ee07 3a90 	vmov	s15, r3
 81041b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81041b4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81041b8:	693b      	ldr	r3, [r7, #16]
 81041ba:	2b00      	cmp	r3, #0
 81041bc:	f000 80b7 	beq.w	810432e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 81041c0:	697b      	ldr	r3, [r7, #20]
 81041c2:	2b01      	cmp	r3, #1
 81041c4:	d003      	beq.n	81041ce <HAL_RCC_GetSysClockFreq+0xbe>
 81041c6:	697b      	ldr	r3, [r7, #20]
 81041c8:	2b03      	cmp	r3, #3
 81041ca:	d056      	beq.n	810427a <HAL_RCC_GetSysClockFreq+0x16a>
 81041cc:	e077      	b.n	81042be <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 81041ce:	4b5e      	ldr	r3, [pc, #376]	@ (8104348 <HAL_RCC_GetSysClockFreq+0x238>)
 81041d0:	681b      	ldr	r3, [r3, #0]
 81041d2:	f003 0320 	and.w	r3, r3, #32
 81041d6:	2b00      	cmp	r3, #0
 81041d8:	d02d      	beq.n	8104236 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 81041da:	4b5b      	ldr	r3, [pc, #364]	@ (8104348 <HAL_RCC_GetSysClockFreq+0x238>)
 81041dc:	681b      	ldr	r3, [r3, #0]
 81041de:	08db      	lsrs	r3, r3, #3
 81041e0:	f003 0303 	and.w	r3, r3, #3
 81041e4:	4a5a      	ldr	r2, [pc, #360]	@ (8104350 <HAL_RCC_GetSysClockFreq+0x240>)
 81041e6:	fa22 f303 	lsr.w	r3, r2, r3
 81041ea:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	ee07 3a90 	vmov	s15, r3
 81041f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81041f6:	693b      	ldr	r3, [r7, #16]
 81041f8:	ee07 3a90 	vmov	s15, r3
 81041fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104204:	4b50      	ldr	r3, [pc, #320]	@ (8104348 <HAL_RCC_GetSysClockFreq+0x238>)
 8104206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810420c:	ee07 3a90 	vmov	s15, r3
 8104210:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8104214:	ed97 6a02 	vldr	s12, [r7, #8]
 8104218:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8104358 <HAL_RCC_GetSysClockFreq+0x248>
 810421c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8104220:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8104224:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104228:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 810422c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104230:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8104234:	e065      	b.n	8104302 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8104236:	693b      	ldr	r3, [r7, #16]
 8104238:	ee07 3a90 	vmov	s15, r3
 810423c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104240:	eddf 6a46 	vldr	s13, [pc, #280]	@ 810435c <HAL_RCC_GetSysClockFreq+0x24c>
 8104244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104248:	4b3f      	ldr	r3, [pc, #252]	@ (8104348 <HAL_RCC_GetSysClockFreq+0x238>)
 810424a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810424c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104250:	ee07 3a90 	vmov	s15, r3
 8104254:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8104258:	ed97 6a02 	vldr	s12, [r7, #8]
 810425c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8104358 <HAL_RCC_GetSysClockFreq+0x248>
 8104260:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8104264:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8104268:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810426c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8104270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104274:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8104278:	e043      	b.n	8104302 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 810427a:	693b      	ldr	r3, [r7, #16]
 810427c:	ee07 3a90 	vmov	s15, r3
 8104280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104284:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8104360 <HAL_RCC_GetSysClockFreq+0x250>
 8104288:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810428c:	4b2e      	ldr	r3, [pc, #184]	@ (8104348 <HAL_RCC_GetSysClockFreq+0x238>)
 810428e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104294:	ee07 3a90 	vmov	s15, r3
 8104298:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 810429c:	ed97 6a02 	vldr	s12, [r7, #8]
 81042a0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8104358 <HAL_RCC_GetSysClockFreq+0x248>
 81042a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81042a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 81042ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81042b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81042b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81042b8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 81042bc:	e021      	b.n	8104302 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81042be:	693b      	ldr	r3, [r7, #16]
 81042c0:	ee07 3a90 	vmov	s15, r3
 81042c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81042c8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8104364 <HAL_RCC_GetSysClockFreq+0x254>
 81042cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81042d0:	4b1d      	ldr	r3, [pc, #116]	@ (8104348 <HAL_RCC_GetSysClockFreq+0x238>)
 81042d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81042d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81042d8:	ee07 3a90 	vmov	s15, r3
 81042dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 81042e0:	ed97 6a02 	vldr	s12, [r7, #8]
 81042e4:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8104358 <HAL_RCC_GetSysClockFreq+0x248>
 81042e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81042ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 81042f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81042f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81042f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81042fc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8104300:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8104302:	4b11      	ldr	r3, [pc, #68]	@ (8104348 <HAL_RCC_GetSysClockFreq+0x238>)
 8104304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104306:	0a5b      	lsrs	r3, r3, #9
 8104308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810430c:	3301      	adds	r3, #1
 810430e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8104310:	683b      	ldr	r3, [r7, #0]
 8104312:	ee07 3a90 	vmov	s15, r3
 8104316:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810431a:	edd7 6a06 	vldr	s13, [r7, #24]
 810431e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104326:	ee17 3a90 	vmov	r3, s15
 810432a:	61fb      	str	r3, [r7, #28]
 810432c:	e004      	b.n	8104338 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 810432e:	2300      	movs	r3, #0
 8104330:	61fb      	str	r3, [r7, #28]
 8104332:	e001      	b.n	8104338 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8104334:	4b06      	ldr	r3, [pc, #24]	@ (8104350 <HAL_RCC_GetSysClockFreq+0x240>)
 8104336:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8104338:	69fb      	ldr	r3, [r7, #28]
}
 810433a:	4618      	mov	r0, r3
 810433c:	3724      	adds	r7, #36	@ 0x24
 810433e:	46bd      	mov	sp, r7
 8104340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104344:	4770      	bx	lr
 8104346:	bf00      	nop
 8104348:	44020c00 	.word	0x44020c00
 810434c:	003d0900 	.word	0x003d0900
 8104350:	03d09000 	.word	0x03d09000
 8104354:	007a1200 	.word	0x007a1200
 8104358:	46000000 	.word	0x46000000
 810435c:	4c742400 	.word	0x4c742400
 8104360:	4af42400 	.word	0x4af42400
 8104364:	4a742400 	.word	0x4a742400

08104368 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104368:	b580      	push	{r7, lr}
 810436a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 810436c:	f7ff fed0 	bl	8104110 <HAL_RCC_GetSysClockFreq>
 8104370:	4602      	mov	r2, r0
 8104372:	4b08      	ldr	r3, [pc, #32]	@ (8104394 <HAL_RCC_GetHCLKFreq+0x2c>)
 8104374:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8104376:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 810437a:	4907      	ldr	r1, [pc, #28]	@ (8104398 <HAL_RCC_GetHCLKFreq+0x30>)
 810437c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 810437e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8104382:	fa22 f303 	lsr.w	r3, r2, r3
 8104386:	4a05      	ldr	r2, [pc, #20]	@ (810439c <HAL_RCC_GetHCLKFreq+0x34>)
 8104388:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 810438a:	4b04      	ldr	r3, [pc, #16]	@ (810439c <HAL_RCC_GetHCLKFreq+0x34>)
 810438c:	681b      	ldr	r3, [r3, #0]
}
 810438e:	4618      	mov	r0, r3
 8104390:	bd80      	pop	{r7, pc}
 8104392:	bf00      	nop
 8104394:	44020c00 	.word	0x44020c00
 8104398:	08117df4 	.word	0x08117df4
 810439c:	20050000 	.word	0x20050000

081043a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81043a0:	b580      	push	{r7, lr}
 81043a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 81043a4:	f7ff ffe0 	bl	8104368 <HAL_RCC_GetHCLKFreq>
 81043a8:	4602      	mov	r2, r0
 81043aa:	4b06      	ldr	r3, [pc, #24]	@ (81043c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 81043ac:	6a1b      	ldr	r3, [r3, #32]
 81043ae:	091b      	lsrs	r3, r3, #4
 81043b0:	f003 0307 	and.w	r3, r3, #7
 81043b4:	4904      	ldr	r1, [pc, #16]	@ (81043c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 81043b6:	5ccb      	ldrb	r3, [r1, r3]
 81043b8:	f003 031f 	and.w	r3, r3, #31
 81043bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 81043c0:	4618      	mov	r0, r3
 81043c2:	bd80      	pop	{r7, pc}
 81043c4:	44020c00 	.word	0x44020c00
 81043c8:	08117e04 	.word	0x08117e04

081043cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81043cc:	b580      	push	{r7, lr}
 81043ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 81043d0:	f7ff ffca 	bl	8104368 <HAL_RCC_GetHCLKFreq>
 81043d4:	4602      	mov	r2, r0
 81043d6:	4b06      	ldr	r3, [pc, #24]	@ (81043f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 81043d8:	6a1b      	ldr	r3, [r3, #32]
 81043da:	0a1b      	lsrs	r3, r3, #8
 81043dc:	f003 0307 	and.w	r3, r3, #7
 81043e0:	4904      	ldr	r1, [pc, #16]	@ (81043f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 81043e2:	5ccb      	ldrb	r3, [r1, r3]
 81043e4:	f003 031f 	and.w	r3, r3, #31
 81043e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 81043ec:	4618      	mov	r0, r3
 81043ee:	bd80      	pop	{r7, pc}
 81043f0:	44020c00 	.word	0x44020c00
 81043f4:	08117e04 	.word	0x08117e04

081043f8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 81043f8:	b580      	push	{r7, lr}
 81043fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 81043fc:	f7ff ffb4 	bl	8104368 <HAL_RCC_GetHCLKFreq>
 8104400:	4602      	mov	r2, r0
 8104402:	4b06      	ldr	r3, [pc, #24]	@ (810441c <HAL_RCC_GetPCLK3Freq+0x24>)
 8104404:	6a1b      	ldr	r3, [r3, #32]
 8104406:	0b1b      	lsrs	r3, r3, #12
 8104408:	f003 0307 	and.w	r3, r3, #7
 810440c:	4904      	ldr	r1, [pc, #16]	@ (8104420 <HAL_RCC_GetPCLK3Freq+0x28>)
 810440e:	5ccb      	ldrb	r3, [r1, r3]
 8104410:	f003 031f 	and.w	r3, r3, #31
 8104414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8104418:	4618      	mov	r0, r3
 810441a:	bd80      	pop	{r7, pc}
 810441c:	44020c00 	.word	0x44020c00
 8104420:	08117e04 	.word	0x08117e04

08104424 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8104424:	b480      	push	{r7}
 8104426:	b085      	sub	sp, #20
 8104428:	af00      	add	r7, sp, #0
 810442a:	6078      	str	r0, [r7, #4]
 810442c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 810442e:	687b      	ldr	r3, [r7, #4]
 8104430:	221f      	movs	r2, #31
 8104432:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8104434:	4b15      	ldr	r3, [pc, #84]	@ (810448c <HAL_RCC_GetClockConfig+0x68>)
 8104436:	69db      	ldr	r3, [r3, #28]
 8104438:	f003 0203 	and.w	r2, r3, #3
 810443c:	687b      	ldr	r3, [r7, #4]
 810443e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8104440:	4b12      	ldr	r3, [pc, #72]	@ (810448c <HAL_RCC_GetClockConfig+0x68>)
 8104442:	6a1b      	ldr	r3, [r3, #32]
 8104444:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8104446:	68fb      	ldr	r3, [r7, #12]
 8104448:	f003 020f 	and.w	r2, r3, #15
 810444c:	687b      	ldr	r3, [r7, #4]
 810444e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8104450:	68fb      	ldr	r3, [r7, #12]
 8104452:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8104456:	687b      	ldr	r3, [r7, #4]
 8104458:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 810445a:	68fb      	ldr	r3, [r7, #12]
 810445c:	091b      	lsrs	r3, r3, #4
 810445e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8104462:	687b      	ldr	r3, [r7, #4]
 8104464:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8104466:	68fb      	ldr	r3, [r7, #12]
 8104468:	0a1b      	lsrs	r3, r3, #8
 810446a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810446e:	687b      	ldr	r3, [r7, #4]
 8104470:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8104472:	4b07      	ldr	r3, [pc, #28]	@ (8104490 <HAL_RCC_GetClockConfig+0x6c>)
 8104474:	681b      	ldr	r3, [r3, #0]
 8104476:	f003 020f 	and.w	r2, r3, #15
 810447a:	683b      	ldr	r3, [r7, #0]
 810447c:	601a      	str	r2, [r3, #0]
}
 810447e:	bf00      	nop
 8104480:	3714      	adds	r7, #20
 8104482:	46bd      	mov	sp, r7
 8104484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104488:	4770      	bx	lr
 810448a:	bf00      	nop
 810448c:	44020c00 	.word	0x44020c00
 8104490:	40022000 	.word	0x40022000

08104494 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8104494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8104498:	b0d8      	sub	sp, #352	@ 0x160
 810449a:	af00      	add	r7, sp, #0
 810449c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81044a0:	2300      	movs	r3, #0
 81044a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81044a6:	2300      	movs	r3, #0
 81044a8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81044ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81044b4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 81044b8:	2500      	movs	r5, #0
 81044ba:	ea54 0305 	orrs.w	r3, r4, r5
 81044be:	d00b      	beq.n	81044d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 81044c0:	4bcd      	ldr	r3, [pc, #820]	@ (81047f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 81044c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81044c6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 81044ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81044ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81044d0:	4ac9      	ldr	r2, [pc, #804]	@ (81047f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 81044d2:	430b      	orrs	r3, r1
 81044d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 81044d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81044e0:	f002 0801 	and.w	r8, r2, #1
 81044e4:	f04f 0900 	mov.w	r9, #0
 81044e8:	ea58 0309 	orrs.w	r3, r8, r9
 81044ec:	d042      	beq.n	8104574 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 81044ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81044f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81044f4:	2b05      	cmp	r3, #5
 81044f6:	d823      	bhi.n	8104540 <HAL_RCCEx_PeriphCLKConfig+0xac>
 81044f8:	a201      	add	r2, pc, #4	@ (adr r2, 8104500 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 81044fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81044fe:	bf00      	nop
 8104500:	08104549 	.word	0x08104549
 8104504:	08104519 	.word	0x08104519
 8104508:	0810452d 	.word	0x0810452d
 810450c:	08104549 	.word	0x08104549
 8104510:	08104549 	.word	0x08104549
 8104514:	08104549 	.word	0x08104549
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8104518:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810451c:	3308      	adds	r3, #8
 810451e:	4618      	mov	r0, r3
 8104520:	f004 feda 	bl	81092d8 <RCCEx_PLL2_Config>
 8104524:	4603      	mov	r3, r0
 8104526:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 810452a:	e00e      	b.n	810454a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 810452c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104530:	3330      	adds	r3, #48	@ 0x30
 8104532:	4618      	mov	r0, r3
 8104534:	f004 ff68 	bl	8109408 <RCCEx_PLL3_Config>
 8104538:	4603      	mov	r3, r0
 810453a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 810453e:	e004      	b.n	810454a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104540:	2301      	movs	r3, #1
 8104542:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8104546:	e000      	b.n	810454a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8104548:	bf00      	nop
    }

    if (ret == HAL_OK)
 810454a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 810454e:	2b00      	cmp	r3, #0
 8104550:	d10c      	bne.n	810456c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8104552:	4ba9      	ldr	r3, [pc, #676]	@ (81047f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8104554:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104558:	f023 0107 	bic.w	r1, r3, #7
 810455c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104562:	4aa5      	ldr	r2, [pc, #660]	@ (81047f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8104564:	430b      	orrs	r3, r1
 8104566:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810456a:	e003      	b.n	8104574 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810456c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104570:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8104574:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104578:	e9d3 2300 	ldrd	r2, r3, [r3]
 810457c:	f002 0a02 	and.w	sl, r2, #2
 8104580:	f04f 0b00 	mov.w	fp, #0
 8104584:	ea5a 030b 	orrs.w	r3, sl, fp
 8104588:	f000 8088 	beq.w	810469c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 810458c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104592:	2b28      	cmp	r3, #40	@ 0x28
 8104594:	d868      	bhi.n	8104668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8104596:	a201      	add	r2, pc, #4	@ (adr r2, 810459c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8104598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810459c:	08104671 	.word	0x08104671
 81045a0:	08104669 	.word	0x08104669
 81045a4:	08104669 	.word	0x08104669
 81045a8:	08104669 	.word	0x08104669
 81045ac:	08104669 	.word	0x08104669
 81045b0:	08104669 	.word	0x08104669
 81045b4:	08104669 	.word	0x08104669
 81045b8:	08104669 	.word	0x08104669
 81045bc:	08104641 	.word	0x08104641
 81045c0:	08104669 	.word	0x08104669
 81045c4:	08104669 	.word	0x08104669
 81045c8:	08104669 	.word	0x08104669
 81045cc:	08104669 	.word	0x08104669
 81045d0:	08104669 	.word	0x08104669
 81045d4:	08104669 	.word	0x08104669
 81045d8:	08104669 	.word	0x08104669
 81045dc:	08104655 	.word	0x08104655
 81045e0:	08104669 	.word	0x08104669
 81045e4:	08104669 	.word	0x08104669
 81045e8:	08104669 	.word	0x08104669
 81045ec:	08104669 	.word	0x08104669
 81045f0:	08104669 	.word	0x08104669
 81045f4:	08104669 	.word	0x08104669
 81045f8:	08104669 	.word	0x08104669
 81045fc:	08104671 	.word	0x08104671
 8104600:	08104669 	.word	0x08104669
 8104604:	08104669 	.word	0x08104669
 8104608:	08104669 	.word	0x08104669
 810460c:	08104669 	.word	0x08104669
 8104610:	08104669 	.word	0x08104669
 8104614:	08104669 	.word	0x08104669
 8104618:	08104669 	.word	0x08104669
 810461c:	08104671 	.word	0x08104671
 8104620:	08104669 	.word	0x08104669
 8104624:	08104669 	.word	0x08104669
 8104628:	08104669 	.word	0x08104669
 810462c:	08104669 	.word	0x08104669
 8104630:	08104669 	.word	0x08104669
 8104634:	08104669 	.word	0x08104669
 8104638:	08104669 	.word	0x08104669
 810463c:	08104671 	.word	0x08104671
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8104640:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104644:	3308      	adds	r3, #8
 8104646:	4618      	mov	r0, r3
 8104648:	f004 fe46 	bl	81092d8 <RCCEx_PLL2_Config>
 810464c:	4603      	mov	r3, r0
 810464e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8104652:	e00e      	b.n	8104672 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8104654:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104658:	3330      	adds	r3, #48	@ 0x30
 810465a:	4618      	mov	r0, r3
 810465c:	f004 fed4 	bl	8109408 <RCCEx_PLL3_Config>
 8104660:	4603      	mov	r3, r0
 8104662:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8104666:	e004      	b.n	8104672 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104668:	2301      	movs	r3, #1
 810466a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 810466e:	e000      	b.n	8104672 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8104670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104672:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104676:	2b00      	cmp	r3, #0
 8104678:	d10c      	bne.n	8104694 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 810467a:	4b5f      	ldr	r3, [pc, #380]	@ (81047f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 810467c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104680:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8104684:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810468a:	4a5b      	ldr	r2, [pc, #364]	@ (81047f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 810468c:	430b      	orrs	r3, r1
 810468e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8104692:	e003      	b.n	810469c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104694:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104698:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 810469c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81046a4:	f002 0304 	and.w	r3, r2, #4
 81046a8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 81046ac:	2300      	movs	r3, #0
 81046ae:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 81046b2:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 81046b6:	460b      	mov	r3, r1
 81046b8:	4313      	orrs	r3, r2
 81046ba:	d04e      	beq.n	810475a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 81046bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81046c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81046c2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 81046c6:	d02c      	beq.n	8104722 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 81046c8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 81046cc:	d825      	bhi.n	810471a <HAL_RCCEx_PeriphCLKConfig+0x286>
 81046ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81046d2:	d028      	beq.n	8104726 <HAL_RCCEx_PeriphCLKConfig+0x292>
 81046d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81046d8:	d81f      	bhi.n	810471a <HAL_RCCEx_PeriphCLKConfig+0x286>
 81046da:	2bc0      	cmp	r3, #192	@ 0xc0
 81046dc:	d025      	beq.n	810472a <HAL_RCCEx_PeriphCLKConfig+0x296>
 81046de:	2bc0      	cmp	r3, #192	@ 0xc0
 81046e0:	d81b      	bhi.n	810471a <HAL_RCCEx_PeriphCLKConfig+0x286>
 81046e2:	2b80      	cmp	r3, #128	@ 0x80
 81046e4:	d00f      	beq.n	8104706 <HAL_RCCEx_PeriphCLKConfig+0x272>
 81046e6:	2b80      	cmp	r3, #128	@ 0x80
 81046e8:	d817      	bhi.n	810471a <HAL_RCCEx_PeriphCLKConfig+0x286>
 81046ea:	2b00      	cmp	r3, #0
 81046ec:	d01f      	beq.n	810472e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 81046ee:	2b40      	cmp	r3, #64	@ 0x40
 81046f0:	d113      	bne.n	810471a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 81046f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81046f6:	3308      	adds	r3, #8
 81046f8:	4618      	mov	r0, r3
 81046fa:	f004 fded 	bl	81092d8 <RCCEx_PLL2_Config>
 81046fe:	4603      	mov	r3, r0
 8104700:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8104704:	e014      	b.n	8104730 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8104706:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810470a:	3330      	adds	r3, #48	@ 0x30
 810470c:	4618      	mov	r0, r3
 810470e:	f004 fe7b 	bl	8109408 <RCCEx_PLL3_Config>
 8104712:	4603      	mov	r3, r0
 8104714:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8104718:	e00a      	b.n	8104730 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810471a:	2301      	movs	r3, #1
 810471c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8104720:	e006      	b.n	8104730 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8104722:	bf00      	nop
 8104724:	e004      	b.n	8104730 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8104726:	bf00      	nop
 8104728:	e002      	b.n	8104730 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 810472a:	bf00      	nop
 810472c:	e000      	b.n	8104730 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 810472e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104730:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104734:	2b00      	cmp	r3, #0
 8104736:	d10c      	bne.n	8104752 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8104738:	4b2f      	ldr	r3, [pc, #188]	@ (81047f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 810473a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810473e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8104742:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104748:	4a2b      	ldr	r2, [pc, #172]	@ (81047f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 810474a:	430b      	orrs	r3, r1
 810474c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8104750:	e003      	b.n	810475a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104752:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104756:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 810475a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104762:	f002 0308 	and.w	r3, r2, #8
 8104766:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 810476a:	2300      	movs	r3, #0
 810476c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8104770:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8104774:	460b      	mov	r3, r1
 8104776:	4313      	orrs	r3, r2
 8104778:	d056      	beq.n	8104828 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 810477a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810477e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104780:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8104784:	d031      	beq.n	81047ea <HAL_RCCEx_PeriphCLKConfig+0x356>
 8104786:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 810478a:	d82a      	bhi.n	81047e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 810478c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8104790:	d02d      	beq.n	81047ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8104792:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8104796:	d824      	bhi.n	81047e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8104798:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 810479c:	d029      	beq.n	81047f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 810479e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 81047a2:	d81e      	bhi.n	81047e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 81047a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81047a8:	d011      	beq.n	81047ce <HAL_RCCEx_PeriphCLKConfig+0x33a>
 81047aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81047ae:	d818      	bhi.n	81047e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 81047b0:	2b00      	cmp	r3, #0
 81047b2:	d023      	beq.n	81047fc <HAL_RCCEx_PeriphCLKConfig+0x368>
 81047b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81047b8:	d113      	bne.n	81047e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 81047ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81047be:	3308      	adds	r3, #8
 81047c0:	4618      	mov	r0, r3
 81047c2:	f004 fd89 	bl	81092d8 <RCCEx_PLL2_Config>
 81047c6:	4603      	mov	r3, r0
 81047c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 81047cc:	e017      	b.n	81047fe <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 81047ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81047d2:	3330      	adds	r3, #48	@ 0x30
 81047d4:	4618      	mov	r0, r3
 81047d6:	f004 fe17 	bl	8109408 <RCCEx_PLL3_Config>
 81047da:	4603      	mov	r3, r0
 81047dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 81047e0:	e00d      	b.n	81047fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81047e2:	2301      	movs	r3, #1
 81047e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 81047e8:	e009      	b.n	81047fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 81047ea:	bf00      	nop
 81047ec:	e007      	b.n	81047fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 81047ee:	bf00      	nop
 81047f0:	e005      	b.n	81047fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 81047f2:	bf00      	nop
 81047f4:	e003      	b.n	81047fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
 81047f6:	bf00      	nop
 81047f8:	44020c00 	.word	0x44020c00
        break;
 81047fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81047fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104802:	2b00      	cmp	r3, #0
 8104804:	d10c      	bne.n	8104820 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8104806:	4bbb      	ldr	r3, [pc, #748]	@ (8104af4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8104808:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810480c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8104810:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104814:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104816:	4ab7      	ldr	r2, [pc, #732]	@ (8104af4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8104818:	430b      	orrs	r3, r1
 810481a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810481e:	e003      	b.n	8104828 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104820:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104824:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8104828:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104830:	f002 0310 	and.w	r3, r2, #16
 8104834:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8104838:	2300      	movs	r3, #0
 810483a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 810483e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8104842:	460b      	mov	r3, r1
 8104844:	4313      	orrs	r3, r2
 8104846:	d053      	beq.n	81048f0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8104848:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810484c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810484e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8104852:	d031      	beq.n	81048b8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8104854:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8104858:	d82a      	bhi.n	81048b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 810485a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810485e:	d02d      	beq.n	81048bc <HAL_RCCEx_PeriphCLKConfig+0x428>
 8104860:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104864:	d824      	bhi.n	81048b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8104866:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810486a:	d029      	beq.n	81048c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 810486c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104870:	d81e      	bhi.n	81048b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8104872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104876:	d011      	beq.n	810489c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8104878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810487c:	d818      	bhi.n	81048b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 810487e:	2b00      	cmp	r3, #0
 8104880:	d020      	beq.n	81048c4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8104882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104886:	d113      	bne.n	81048b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8104888:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810488c:	3308      	adds	r3, #8
 810488e:	4618      	mov	r0, r3
 8104890:	f004 fd22 	bl	81092d8 <RCCEx_PLL2_Config>
 8104894:	4603      	mov	r3, r0
 8104896:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 810489a:	e014      	b.n	81048c6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 810489c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81048a0:	3330      	adds	r3, #48	@ 0x30
 81048a2:	4618      	mov	r0, r3
 81048a4:	f004 fdb0 	bl	8109408 <RCCEx_PLL3_Config>
 81048a8:	4603      	mov	r3, r0
 81048aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 81048ae:	e00a      	b.n	81048c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81048b0:	2301      	movs	r3, #1
 81048b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 81048b6:	e006      	b.n	81048c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 81048b8:	bf00      	nop
 81048ba:	e004      	b.n	81048c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 81048bc:	bf00      	nop
 81048be:	e002      	b.n	81048c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 81048c0:	bf00      	nop
 81048c2:	e000      	b.n	81048c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 81048c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81048c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81048ca:	2b00      	cmp	r3, #0
 81048cc:	d10c      	bne.n	81048e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 81048ce:	4b89      	ldr	r3, [pc, #548]	@ (8104af4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 81048d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81048d4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 81048d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81048dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81048de:	4a85      	ldr	r2, [pc, #532]	@ (8104af4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 81048e0:	430b      	orrs	r3, r1
 81048e2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81048e6:	e003      	b.n	81048f0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81048e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81048ec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 81048f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81048f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048f8:	f002 0320 	and.w	r3, r2, #32
 81048fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8104900:	2300      	movs	r3, #0
 8104902:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8104906:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 810490a:	460b      	mov	r3, r1
 810490c:	4313      	orrs	r3, r2
 810490e:	d053      	beq.n	81049b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8104910:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104916:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 810491a:	d031      	beq.n	8104980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 810491c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8104920:	d82a      	bhi.n	8104978 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8104922:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104926:	d02d      	beq.n	8104984 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8104928:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810492c:	d824      	bhi.n	8104978 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 810492e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8104932:	d029      	beq.n	8104988 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8104934:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8104938:	d81e      	bhi.n	8104978 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 810493a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810493e:	d011      	beq.n	8104964 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8104940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104944:	d818      	bhi.n	8104978 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8104946:	2b00      	cmp	r3, #0
 8104948:	d020      	beq.n	810498c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 810494a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810494e:	d113      	bne.n	8104978 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8104950:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104954:	3308      	adds	r3, #8
 8104956:	4618      	mov	r0, r3
 8104958:	f004 fcbe 	bl	81092d8 <RCCEx_PLL2_Config>
 810495c:	4603      	mov	r3, r0
 810495e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8104962:	e014      	b.n	810498e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8104964:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104968:	3330      	adds	r3, #48	@ 0x30
 810496a:	4618      	mov	r0, r3
 810496c:	f004 fd4c 	bl	8109408 <RCCEx_PLL3_Config>
 8104970:	4603      	mov	r3, r0
 8104972:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8104976:	e00a      	b.n	810498e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104978:	2301      	movs	r3, #1
 810497a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 810497e:	e006      	b.n	810498e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8104980:	bf00      	nop
 8104982:	e004      	b.n	810498e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8104984:	bf00      	nop
 8104986:	e002      	b.n	810498e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8104988:	bf00      	nop
 810498a:	e000      	b.n	810498e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 810498c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810498e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104992:	2b00      	cmp	r3, #0
 8104994:	d10c      	bne.n	81049b0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8104996:	4b57      	ldr	r3, [pc, #348]	@ (8104af4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8104998:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810499c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 81049a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81049a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81049a6:	4a53      	ldr	r2, [pc, #332]	@ (8104af4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 81049a8:	430b      	orrs	r3, r1
 81049aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81049ae:	e003      	b.n	81049b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81049b0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81049b4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 81049b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81049bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81049c0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81049c4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 81049c8:	2300      	movs	r3, #0
 81049ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 81049ce:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 81049d2:	460b      	mov	r3, r1
 81049d4:	4313      	orrs	r3, r2
 81049d6:	d053      	beq.n	8104a80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 81049d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81049dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81049de:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 81049e2:	d031      	beq.n	8104a48 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 81049e4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 81049e8:	d82a      	bhi.n	8104a40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 81049ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81049ee:	d02d      	beq.n	8104a4c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 81049f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81049f4:	d824      	bhi.n	8104a40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 81049f6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 81049fa:	d029      	beq.n	8104a50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 81049fc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8104a00:	d81e      	bhi.n	8104a40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8104a02:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8104a06:	d011      	beq.n	8104a2c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8104a08:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8104a0c:	d818      	bhi.n	8104a40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8104a0e:	2b00      	cmp	r3, #0
 8104a10:	d020      	beq.n	8104a54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8104a12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104a16:	d113      	bne.n	8104a40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8104a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104a1c:	3308      	adds	r3, #8
 8104a1e:	4618      	mov	r0, r3
 8104a20:	f004 fc5a 	bl	81092d8 <RCCEx_PLL2_Config>
 8104a24:	4603      	mov	r3, r0
 8104a26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8104a2a:	e014      	b.n	8104a56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8104a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104a30:	3330      	adds	r3, #48	@ 0x30
 8104a32:	4618      	mov	r0, r3
 8104a34:	f004 fce8 	bl	8109408 <RCCEx_PLL3_Config>
 8104a38:	4603      	mov	r3, r0
 8104a3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8104a3e:	e00a      	b.n	8104a56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104a40:	2301      	movs	r3, #1
 8104a42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8104a46:	e006      	b.n	8104a56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8104a48:	bf00      	nop
 8104a4a:	e004      	b.n	8104a56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8104a4c:	bf00      	nop
 8104a4e:	e002      	b.n	8104a56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8104a50:	bf00      	nop
 8104a52:	e000      	b.n	8104a56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8104a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104a56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104a5a:	2b00      	cmp	r3, #0
 8104a5c:	d10c      	bne.n	8104a78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8104a5e:	4b25      	ldr	r3, [pc, #148]	@ (8104af4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8104a60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104a64:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8104a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8104a6e:	4a21      	ldr	r2, [pc, #132]	@ (8104af4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8104a70:	430b      	orrs	r3, r1
 8104a72:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8104a76:	e003      	b.n	8104a80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a78:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104a7c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8104a80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a88:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8104a8c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8104a90:	2300      	movs	r3, #0
 8104a92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8104a96:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8104a9a:	460b      	mov	r3, r1
 8104a9c:	4313      	orrs	r3, r2
 8104a9e:	d055      	beq.n	8104b4c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8104aa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104aa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8104aa6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8104aaa:	d033      	beq.n	8104b14 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8104aac:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8104ab0:	d82c      	bhi.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8104ab2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104ab6:	d02f      	beq.n	8104b18 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8104ab8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104abc:	d826      	bhi.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8104abe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104ac2:	d02b      	beq.n	8104b1c <HAL_RCCEx_PeriphCLKConfig+0x688>
 8104ac4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104ac8:	d820      	bhi.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8104aca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104ace:	d013      	beq.n	8104af8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8104ad0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104ad4:	d81a      	bhi.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8104ad6:	2b00      	cmp	r3, #0
 8104ad8:	d022      	beq.n	8104b20 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8104ada:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104ade:	d115      	bne.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8104ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104ae4:	3308      	adds	r3, #8
 8104ae6:	4618      	mov	r0, r3
 8104ae8:	f004 fbf6 	bl	81092d8 <RCCEx_PLL2_Config>
 8104aec:	4603      	mov	r3, r0
 8104aee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8104af2:	e016      	b.n	8104b22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8104af4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8104af8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104afc:	3330      	adds	r3, #48	@ 0x30
 8104afe:	4618      	mov	r0, r3
 8104b00:	f004 fc82 	bl	8109408 <RCCEx_PLL3_Config>
 8104b04:	4603      	mov	r3, r0
 8104b06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8104b0a:	e00a      	b.n	8104b22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104b0c:	2301      	movs	r3, #1
 8104b0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8104b12:	e006      	b.n	8104b22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8104b14:	bf00      	nop
 8104b16:	e004      	b.n	8104b22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8104b18:	bf00      	nop
 8104b1a:	e002      	b.n	8104b22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8104b1c:	bf00      	nop
 8104b1e:	e000      	b.n	8104b22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8104b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104b22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104b26:	2b00      	cmp	r3, #0
 8104b28:	d10c      	bne.n	8104b44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8104b2a:	4bbb      	ldr	r3, [pc, #748]	@ (8104e18 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8104b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104b30:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8104b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104b38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8104b3a:	4ab7      	ldr	r2, [pc, #732]	@ (8104e18 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8104b3c:	430b      	orrs	r3, r1
 8104b3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8104b42:	e003      	b.n	8104b4c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104b48:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8104b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b54:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8104b58:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8104b5c:	2300      	movs	r3, #0
 8104b5e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8104b62:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8104b66:	460b      	mov	r3, r1
 8104b68:	4313      	orrs	r3, r2
 8104b6a:	d053      	beq.n	8104c14 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8104b6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104b70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8104b72:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8104b76:	d031      	beq.n	8104bdc <HAL_RCCEx_PeriphCLKConfig+0x748>
 8104b78:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8104b7c:	d82a      	bhi.n	8104bd4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8104b7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104b82:	d02d      	beq.n	8104be0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8104b84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104b88:	d824      	bhi.n	8104bd4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8104b8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104b8e:	d029      	beq.n	8104be4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8104b90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104b94:	d81e      	bhi.n	8104bd4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8104b96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104b9a:	d011      	beq.n	8104bc0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8104b9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104ba0:	d818      	bhi.n	8104bd4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8104ba2:	2b00      	cmp	r3, #0
 8104ba4:	d020      	beq.n	8104be8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8104ba6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104baa:	d113      	bne.n	8104bd4 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8104bac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104bb0:	3308      	adds	r3, #8
 8104bb2:	4618      	mov	r0, r3
 8104bb4:	f004 fb90 	bl	81092d8 <RCCEx_PLL2_Config>
 8104bb8:	4603      	mov	r3, r0
 8104bba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8104bbe:	e014      	b.n	8104bea <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8104bc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104bc4:	3330      	adds	r3, #48	@ 0x30
 8104bc6:	4618      	mov	r0, r3
 8104bc8:	f004 fc1e 	bl	8109408 <RCCEx_PLL3_Config>
 8104bcc:	4603      	mov	r3, r0
 8104bce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8104bd2:	e00a      	b.n	8104bea <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104bd4:	2301      	movs	r3, #1
 8104bd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8104bda:	e006      	b.n	8104bea <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8104bdc:	bf00      	nop
 8104bde:	e004      	b.n	8104bea <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8104be0:	bf00      	nop
 8104be2:	e002      	b.n	8104bea <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8104be4:	bf00      	nop
 8104be6:	e000      	b.n	8104bea <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8104be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104bea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104bee:	2b00      	cmp	r3, #0
 8104bf0:	d10c      	bne.n	8104c0c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8104bf2:	4b89      	ldr	r3, [pc, #548]	@ (8104e18 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8104bf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104bf8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8104bfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104c00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8104c02:	4a85      	ldr	r2, [pc, #532]	@ (8104e18 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8104c04:	430b      	orrs	r3, r1
 8104c06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8104c0a:	e003      	b.n	8104c14 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c0c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104c10:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8104c14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c1c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8104c20:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8104c24:	2300      	movs	r3, #0
 8104c26:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8104c2a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8104c2e:	460b      	mov	r3, r1
 8104c30:	4313      	orrs	r3, r2
 8104c32:	d055      	beq.n	8104ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8104c34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104c3c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8104c40:	d031      	beq.n	8104ca6 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8104c42:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8104c46:	d82a      	bhi.n	8104c9e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8104c48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104c4c:	d02d      	beq.n	8104caa <HAL_RCCEx_PeriphCLKConfig+0x816>
 8104c4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104c52:	d824      	bhi.n	8104c9e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8104c54:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8104c58:	d029      	beq.n	8104cae <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8104c5a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8104c5e:	d81e      	bhi.n	8104c9e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8104c60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104c64:	d011      	beq.n	8104c8a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8104c66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104c6a:	d818      	bhi.n	8104c9e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8104c6c:	2b00      	cmp	r3, #0
 8104c6e:	d020      	beq.n	8104cb2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8104c70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104c74:	d113      	bne.n	8104c9e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8104c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104c7a:	3308      	adds	r3, #8
 8104c7c:	4618      	mov	r0, r3
 8104c7e:	f004 fb2b 	bl	81092d8 <RCCEx_PLL2_Config>
 8104c82:	4603      	mov	r3, r0
 8104c84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8104c88:	e014      	b.n	8104cb4 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8104c8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104c8e:	3330      	adds	r3, #48	@ 0x30
 8104c90:	4618      	mov	r0, r3
 8104c92:	f004 fbb9 	bl	8109408 <RCCEx_PLL3_Config>
 8104c96:	4603      	mov	r3, r0
 8104c98:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8104c9c:	e00a      	b.n	8104cb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104c9e:	2301      	movs	r3, #1
 8104ca0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8104ca4:	e006      	b.n	8104cb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8104ca6:	bf00      	nop
 8104ca8:	e004      	b.n	8104cb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8104caa:	bf00      	nop
 8104cac:	e002      	b.n	8104cb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8104cae:	bf00      	nop
 8104cb0:	e000      	b.n	8104cb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8104cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104cb4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104cb8:	2b00      	cmp	r3, #0
 8104cba:	d10d      	bne.n	8104cd8 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8104cbc:	4b56      	ldr	r3, [pc, #344]	@ (8104e18 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8104cbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104cc2:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8104cc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104cce:	4a52      	ldr	r2, [pc, #328]	@ (8104e18 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8104cd0:	430b      	orrs	r3, r1
 8104cd2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8104cd6:	e003      	b.n	8104ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104cd8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104cdc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8104ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ce8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8104cec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8104cf0:	2300      	movs	r3, #0
 8104cf2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8104cf6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8104cfa:	460b      	mov	r3, r1
 8104cfc:	4313      	orrs	r3, r2
 8104cfe:	d044      	beq.n	8104d8a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8104d00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104d08:	2b05      	cmp	r3, #5
 8104d0a:	d823      	bhi.n	8104d54 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8104d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8104d14 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8104d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104d12:	bf00      	nop
 8104d14:	08104d5d 	.word	0x08104d5d
 8104d18:	08104d2d 	.word	0x08104d2d
 8104d1c:	08104d41 	.word	0x08104d41
 8104d20:	08104d5d 	.word	0x08104d5d
 8104d24:	08104d5d 	.word	0x08104d5d
 8104d28:	08104d5d 	.word	0x08104d5d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8104d2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104d30:	3308      	adds	r3, #8
 8104d32:	4618      	mov	r0, r3
 8104d34:	f004 fad0 	bl	81092d8 <RCCEx_PLL2_Config>
 8104d38:	4603      	mov	r3, r0
 8104d3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8104d3e:	e00e      	b.n	8104d5e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8104d40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104d44:	3330      	adds	r3, #48	@ 0x30
 8104d46:	4618      	mov	r0, r3
 8104d48:	f004 fb5e 	bl	8109408 <RCCEx_PLL3_Config>
 8104d4c:	4603      	mov	r3, r0
 8104d4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8104d52:	e004      	b.n	8104d5e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104d54:	2301      	movs	r3, #1
 8104d56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8104d5a:	e000      	b.n	8104d5e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8104d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104d5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104d62:	2b00      	cmp	r3, #0
 8104d64:	d10d      	bne.n	8104d82 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8104d66:	4b2c      	ldr	r3, [pc, #176]	@ (8104e18 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8104d68:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8104d6c:	f023 0107 	bic.w	r1, r3, #7
 8104d70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104d78:	4a27      	ldr	r2, [pc, #156]	@ (8104e18 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8104d7a:	430b      	orrs	r3, r1
 8104d7c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8104d80:	e003      	b.n	8104d8a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104d86:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8104d8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d92:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8104d96:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8104d9a:	2300      	movs	r3, #0
 8104d9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8104da0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8104da4:	460b      	mov	r3, r1
 8104da6:	4313      	orrs	r3, r2
 8104da8:	d04f      	beq.n	8104e4a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8104daa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104db2:	2b50      	cmp	r3, #80	@ 0x50
 8104db4:	d029      	beq.n	8104e0a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8104db6:	2b50      	cmp	r3, #80	@ 0x50
 8104db8:	d823      	bhi.n	8104e02 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8104dba:	2b40      	cmp	r3, #64	@ 0x40
 8104dbc:	d027      	beq.n	8104e0e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8104dbe:	2b40      	cmp	r3, #64	@ 0x40
 8104dc0:	d81f      	bhi.n	8104e02 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8104dc2:	2b30      	cmp	r3, #48	@ 0x30
 8104dc4:	d025      	beq.n	8104e12 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8104dc6:	2b30      	cmp	r3, #48	@ 0x30
 8104dc8:	d81b      	bhi.n	8104e02 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8104dca:	2b20      	cmp	r3, #32
 8104dcc:	d00f      	beq.n	8104dee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8104dce:	2b20      	cmp	r3, #32
 8104dd0:	d817      	bhi.n	8104e02 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8104dd2:	2b00      	cmp	r3, #0
 8104dd4:	d022      	beq.n	8104e1c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8104dd6:	2b10      	cmp	r3, #16
 8104dd8:	d113      	bne.n	8104e02 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8104dda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104dde:	3308      	adds	r3, #8
 8104de0:	4618      	mov	r0, r3
 8104de2:	f004 fa79 	bl	81092d8 <RCCEx_PLL2_Config>
 8104de6:	4603      	mov	r3, r0
 8104de8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8104dec:	e017      	b.n	8104e1e <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8104dee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104df2:	3330      	adds	r3, #48	@ 0x30
 8104df4:	4618      	mov	r0, r3
 8104df6:	f004 fb07 	bl	8109408 <RCCEx_PLL3_Config>
 8104dfa:	4603      	mov	r3, r0
 8104dfc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8104e00:	e00d      	b.n	8104e1e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104e02:	2301      	movs	r3, #1
 8104e04:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8104e08:	e009      	b.n	8104e1e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8104e0a:	bf00      	nop
 8104e0c:	e007      	b.n	8104e1e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8104e0e:	bf00      	nop
 8104e10:	e005      	b.n	8104e1e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8104e12:	bf00      	nop
 8104e14:	e003      	b.n	8104e1e <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8104e16:	bf00      	nop
 8104e18:	44020c00 	.word	0x44020c00
        break;
 8104e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104e1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104e22:	2b00      	cmp	r3, #0
 8104e24:	d10d      	bne.n	8104e42 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8104e26:	4baf      	ldr	r3, [pc, #700]	@ (81050e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8104e28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8104e2c:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8104e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104e38:	4aaa      	ldr	r2, [pc, #680]	@ (81050e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8104e3a:	430b      	orrs	r3, r1
 8104e3c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8104e40:	e003      	b.n	8104e4a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e42:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104e46:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104e4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e52:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8104e56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8104e5a:	2300      	movs	r3, #0
 8104e5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8104e60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8104e64:	460b      	mov	r3, r1
 8104e66:	4313      	orrs	r3, r2
 8104e68:	d055      	beq.n	8104f16 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8104e6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8104e72:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8104e76:	d031      	beq.n	8104edc <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8104e78:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8104e7c:	d82a      	bhi.n	8104ed4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8104e7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104e82:	d02d      	beq.n	8104ee0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8104e84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104e88:	d824      	bhi.n	8104ed4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8104e8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104e8e:	d029      	beq.n	8104ee4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8104e90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104e94:	d81e      	bhi.n	8104ed4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8104e96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104e9a:	d011      	beq.n	8104ec0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8104e9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104ea0:	d818      	bhi.n	8104ed4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8104ea2:	2b00      	cmp	r3, #0
 8104ea4:	d020      	beq.n	8104ee8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8104ea6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104eaa:	d113      	bne.n	8104ed4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8104eac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104eb0:	3308      	adds	r3, #8
 8104eb2:	4618      	mov	r0, r3
 8104eb4:	f004 fa10 	bl	81092d8 <RCCEx_PLL2_Config>
 8104eb8:	4603      	mov	r3, r0
 8104eba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8104ebe:	e014      	b.n	8104eea <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8104ec0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104ec4:	3330      	adds	r3, #48	@ 0x30
 8104ec6:	4618      	mov	r0, r3
 8104ec8:	f004 fa9e 	bl	8109408 <RCCEx_PLL3_Config>
 8104ecc:	4603      	mov	r3, r0
 8104ece:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8104ed2:	e00a      	b.n	8104eea <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104ed4:	2301      	movs	r3, #1
 8104ed6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8104eda:	e006      	b.n	8104eea <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8104edc:	bf00      	nop
 8104ede:	e004      	b.n	8104eea <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8104ee0:	bf00      	nop
 8104ee2:	e002      	b.n	8104eea <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8104ee4:	bf00      	nop
 8104ee6:	e000      	b.n	8104eea <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8104ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104eea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104eee:	2b00      	cmp	r3, #0
 8104ef0:	d10d      	bne.n	8104f0e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8104ef2:	4b7c      	ldr	r3, [pc, #496]	@ (81050e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8104ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104ef8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8104efc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8104f04:	4a77      	ldr	r2, [pc, #476]	@ (81050e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8104f06:	430b      	orrs	r3, r1
 8104f08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104f0c:	e003      	b.n	8104f16 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104f12:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8104f16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f1e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8104f22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8104f26:	2300      	movs	r3, #0
 8104f28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8104f2c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8104f30:	460b      	mov	r3, r1
 8104f32:	4313      	orrs	r3, r2
 8104f34:	d03d      	beq.n	8104fb2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8104f36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104f3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104f42:	d01b      	beq.n	8104f7c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8104f44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104f48:	d814      	bhi.n	8104f74 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8104f4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104f4e:	d017      	beq.n	8104f80 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8104f50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104f54:	d80e      	bhi.n	8104f74 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8104f56:	2b00      	cmp	r3, #0
 8104f58:	d014      	beq.n	8104f84 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8104f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104f5e:	d109      	bne.n	8104f74 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8104f60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104f64:	3330      	adds	r3, #48	@ 0x30
 8104f66:	4618      	mov	r0, r3
 8104f68:	f004 fa4e 	bl	8109408 <RCCEx_PLL3_Config>
 8104f6c:	4603      	mov	r3, r0
 8104f6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8104f72:	e008      	b.n	8104f86 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104f74:	2301      	movs	r3, #1
 8104f76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8104f7a:	e004      	b.n	8104f86 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8104f7c:	bf00      	nop
 8104f7e:	e002      	b.n	8104f86 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8104f80:	bf00      	nop
 8104f82:	e000      	b.n	8104f86 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8104f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104f86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104f8a:	2b00      	cmp	r3, #0
 8104f8c:	d10d      	bne.n	8104faa <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8104f8e:	4b55      	ldr	r3, [pc, #340]	@ (81050e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8104f90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8104f94:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8104f98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104fa0:	4a50      	ldr	r2, [pc, #320]	@ (81050e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8104fa2:	430b      	orrs	r3, r1
 8104fa4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8104fa8:	e003      	b.n	8104fb2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104faa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8104fae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8104fb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104fba:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8104fbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8104fc2:	2300      	movs	r3, #0
 8104fc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8104fc8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8104fcc:	460b      	mov	r3, r1
 8104fce:	4313      	orrs	r3, r2
 8104fd0:	d03d      	beq.n	810504e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8104fd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8104fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8104fda:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8104fde:	d01b      	beq.n	8105018 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8104fe0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8104fe4:	d814      	bhi.n	8105010 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8104fe6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8104fea:	d017      	beq.n	810501c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8104fec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8104ff0:	d80e      	bhi.n	8105010 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8104ff2:	2b00      	cmp	r3, #0
 8104ff4:	d014      	beq.n	8105020 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8104ff6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104ffa:	d109      	bne.n	8105010 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8104ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105000:	3330      	adds	r3, #48	@ 0x30
 8105002:	4618      	mov	r0, r3
 8105004:	f004 fa00 	bl	8109408 <RCCEx_PLL3_Config>
 8105008:	4603      	mov	r3, r0
 810500a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 810500e:	e008      	b.n	8105022 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105010:	2301      	movs	r3, #1
 8105012:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8105016:	e004      	b.n	8105022 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8105018:	bf00      	nop
 810501a:	e002      	b.n	8105022 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 810501c:	bf00      	nop
 810501e:	e000      	b.n	8105022 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8105020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105022:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105026:	2b00      	cmp	r3, #0
 8105028:	d10d      	bne.n	8105046 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 810502a:	4b2e      	ldr	r3, [pc, #184]	@ (81050e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 810502c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8105030:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8105034:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810503c:	4a29      	ldr	r2, [pc, #164]	@ (81050e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 810503e:	430b      	orrs	r3, r1
 8105040:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8105044:	e003      	b.n	810504e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105046:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 810504a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 810504e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105056:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 810505a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 810505e:	2300      	movs	r3, #0
 8105060:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8105064:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8105068:	460b      	mov	r3, r1
 810506a:	4313      	orrs	r3, r2
 810506c:	d040      	beq.n	81050f0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 810506e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105072:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8105076:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810507a:	d01b      	beq.n	81050b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 810507c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105080:	d814      	bhi.n	81050ac <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8105082:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105086:	d017      	beq.n	81050b8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8105088:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810508c:	d80e      	bhi.n	81050ac <HAL_RCCEx_PeriphCLKConfig+0xc18>
 810508e:	2b00      	cmp	r3, #0
 8105090:	d014      	beq.n	81050bc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8105092:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105096:	d109      	bne.n	81050ac <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8105098:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810509c:	3330      	adds	r3, #48	@ 0x30
 810509e:	4618      	mov	r0, r3
 81050a0:	f004 f9b2 	bl	8109408 <RCCEx_PLL3_Config>
 81050a4:	4603      	mov	r3, r0
 81050a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 81050aa:	e008      	b.n	81050be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81050ac:	2301      	movs	r3, #1
 81050ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 81050b2:	e004      	b.n	81050be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 81050b4:	bf00      	nop
 81050b6:	e002      	b.n	81050be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 81050b8:	bf00      	nop
 81050ba:	e000      	b.n	81050be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 81050bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81050be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81050c2:	2b00      	cmp	r3, #0
 81050c4:	d110      	bne.n	81050e8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 81050c6:	4b07      	ldr	r3, [pc, #28]	@ (81050e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 81050c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 81050cc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81050d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81050d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81050d8:	4a02      	ldr	r2, [pc, #8]	@ (81050e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 81050da:	430b      	orrs	r3, r1
 81050dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 81050e0:	e006      	b.n	81050f0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 81050e2:	bf00      	nop
 81050e4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 81050e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81050ec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81050f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81050f8:	2100      	movs	r1, #0
 81050fa:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 81050fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8105102:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8105106:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810510a:	460b      	mov	r3, r1
 810510c:	4313      	orrs	r3, r2
 810510e:	d03d      	beq.n	810518c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8105110:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105114:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8105118:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 810511c:	d01b      	beq.n	8105156 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 810511e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8105122:	d814      	bhi.n	810514e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8105124:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8105128:	d017      	beq.n	810515a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 810512a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810512e:	d80e      	bhi.n	810514e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8105130:	2b00      	cmp	r3, #0
 8105132:	d014      	beq.n	810515e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8105134:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8105138:	d109      	bne.n	810514e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 810513a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810513e:	3330      	adds	r3, #48	@ 0x30
 8105140:	4618      	mov	r0, r3
 8105142:	f004 f961 	bl	8109408 <RCCEx_PLL3_Config>
 8105146:	4603      	mov	r3, r0
 8105148:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 810514c:	e008      	b.n	8105160 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810514e:	2301      	movs	r3, #1
 8105150:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8105154:	e004      	b.n	8105160 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8105156:	bf00      	nop
 8105158:	e002      	b.n	8105160 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 810515a:	bf00      	nop
 810515c:	e000      	b.n	8105160 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 810515e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105160:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105164:	2b00      	cmp	r3, #0
 8105166:	d10d      	bne.n	8105184 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8105168:	4bbe      	ldr	r3, [pc, #760]	@ (8105464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 810516a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 810516e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8105172:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105176:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810517a:	4aba      	ldr	r2, [pc, #744]	@ (8105464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 810517c:	430b      	orrs	r3, r1
 810517e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8105182:	e003      	b.n	810518c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105184:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105188:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 810518c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105194:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8105198:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810519c:	2300      	movs	r3, #0
 810519e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81051a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81051a6:	460b      	mov	r3, r1
 81051a8:	4313      	orrs	r3, r2
 81051aa:	d035      	beq.n	8105218 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 81051ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81051b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81051b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81051b8:	d015      	beq.n	81051e6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 81051ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81051be:	d80e      	bhi.n	81051de <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 81051c0:	2b00      	cmp	r3, #0
 81051c2:	d012      	beq.n	81051ea <HAL_RCCEx_PeriphCLKConfig+0xd56>
 81051c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81051c8:	d109      	bne.n	81051de <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 81051ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81051ce:	3330      	adds	r3, #48	@ 0x30
 81051d0:	4618      	mov	r0, r3
 81051d2:	f004 f919 	bl	8109408 <RCCEx_PLL3_Config>
 81051d6:	4603      	mov	r3, r0
 81051d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 81051dc:	e006      	b.n	81051ec <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81051de:	2301      	movs	r3, #1
 81051e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 81051e4:	e002      	b.n	81051ec <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 81051e6:	bf00      	nop
 81051e8:	e000      	b.n	81051ec <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 81051ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 81051ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81051f0:	2b00      	cmp	r3, #0
 81051f2:	d10d      	bne.n	8105210 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 81051f4:	4b9b      	ldr	r3, [pc, #620]	@ (8105464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 81051f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 81051fa:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 81051fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105202:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8105206:	4a97      	ldr	r2, [pc, #604]	@ (8105464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8105208:	430b      	orrs	r3, r1
 810520a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 810520e:	e003      	b.n	8105218 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105210:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105214:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8105218:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810521c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105220:	2100      	movs	r1, #0
 8105222:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8105226:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810522a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810522e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8105232:	460b      	mov	r3, r1
 8105234:	4313      	orrs	r3, r2
 8105236:	d00e      	beq.n	8105256 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8105238:	4b8a      	ldr	r3, [pc, #552]	@ (8105464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 810523a:	69db      	ldr	r3, [r3, #28]
 810523c:	4a89      	ldr	r2, [pc, #548]	@ (8105464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 810523e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8105242:	61d3      	str	r3, [r2, #28]
 8105244:	4b87      	ldr	r3, [pc, #540]	@ (8105464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8105246:	69d9      	ldr	r1, [r3, #28]
 8105248:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810524c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8105250:	4a84      	ldr	r2, [pc, #528]	@ (8105464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8105252:	430b      	orrs	r3, r1
 8105254:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105256:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810525e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8105262:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8105266:	2300      	movs	r3, #0
 8105268:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810526c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8105270:	460b      	mov	r3, r1
 8105272:	4313      	orrs	r3, r2
 8105274:	d055      	beq.n	8105322 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8105276:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810527a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810527e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8105282:	d031      	beq.n	81052e8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8105284:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8105288:	d82a      	bhi.n	81052e0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 810528a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810528e:	d02d      	beq.n	81052ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8105290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8105294:	d824      	bhi.n	81052e0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8105296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810529a:	d029      	beq.n	81052f0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 810529c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81052a0:	d81e      	bhi.n	81052e0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 81052a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81052a6:	d011      	beq.n	81052cc <HAL_RCCEx_PeriphCLKConfig+0xe38>
 81052a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81052ac:	d818      	bhi.n	81052e0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 81052ae:	2b00      	cmp	r3, #0
 81052b0:	d020      	beq.n	81052f4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 81052b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81052b6:	d113      	bne.n	81052e0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 81052b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81052bc:	3308      	adds	r3, #8
 81052be:	4618      	mov	r0, r3
 81052c0:	f004 f80a 	bl	81092d8 <RCCEx_PLL2_Config>
 81052c4:	4603      	mov	r3, r0
 81052c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 81052ca:	e014      	b.n	81052f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 81052cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81052d0:	3330      	adds	r3, #48	@ 0x30
 81052d2:	4618      	mov	r0, r3
 81052d4:	f004 f898 	bl	8109408 <RCCEx_PLL3_Config>
 81052d8:	4603      	mov	r3, r0
 81052da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 81052de:	e00a      	b.n	81052f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81052e0:	2301      	movs	r3, #1
 81052e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 81052e6:	e006      	b.n	81052f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 81052e8:	bf00      	nop
 81052ea:	e004      	b.n	81052f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 81052ec:	bf00      	nop
 81052ee:	e002      	b.n	81052f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 81052f0:	bf00      	nop
 81052f2:	e000      	b.n	81052f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 81052f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81052f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81052fa:	2b00      	cmp	r3, #0
 81052fc:	d10d      	bne.n	810531a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 81052fe:	4b59      	ldr	r3, [pc, #356]	@ (8105464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8105300:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8105304:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8105308:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810530c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8105310:	4a54      	ldr	r2, [pc, #336]	@ (8105464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8105312:	430b      	orrs	r3, r1
 8105314:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8105318:	e003      	b.n	8105322 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810531a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 810531e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8105322:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105326:	e9d3 2300 	ldrd	r2, r3, [r3]
 810532a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810532e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8105332:	2300      	movs	r3, #0
 8105334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8105338:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810533c:	460b      	mov	r3, r1
 810533e:	4313      	orrs	r3, r2
 8105340:	d055      	beq.n	81053ee <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8105342:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105346:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810534a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 810534e:	d031      	beq.n	81053b4 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8105350:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8105354:	d82a      	bhi.n	81053ac <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8105356:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810535a:	d02d      	beq.n	81053b8 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 810535c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105360:	d824      	bhi.n	81053ac <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8105362:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8105366:	d029      	beq.n	81053bc <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8105368:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810536c:	d81e      	bhi.n	81053ac <HAL_RCCEx_PeriphCLKConfig+0xf18>
 810536e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105372:	d011      	beq.n	8105398 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8105374:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105378:	d818      	bhi.n	81053ac <HAL_RCCEx_PeriphCLKConfig+0xf18>
 810537a:	2b00      	cmp	r3, #0
 810537c:	d020      	beq.n	81053c0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 810537e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105382:	d113      	bne.n	81053ac <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8105384:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105388:	3308      	adds	r3, #8
 810538a:	4618      	mov	r0, r3
 810538c:	f003 ffa4 	bl	81092d8 <RCCEx_PLL2_Config>
 8105390:	4603      	mov	r3, r0
 8105392:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8105396:	e014      	b.n	81053c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8105398:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810539c:	3330      	adds	r3, #48	@ 0x30
 810539e:	4618      	mov	r0, r3
 81053a0:	f004 f832 	bl	8109408 <RCCEx_PLL3_Config>
 81053a4:	4603      	mov	r3, r0
 81053a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 81053aa:	e00a      	b.n	81053c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81053ac:	2301      	movs	r3, #1
 81053ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 81053b2:	e006      	b.n	81053c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 81053b4:	bf00      	nop
 81053b6:	e004      	b.n	81053c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 81053b8:	bf00      	nop
 81053ba:	e002      	b.n	81053c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 81053bc:	bf00      	nop
 81053be:	e000      	b.n	81053c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 81053c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81053c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81053c6:	2b00      	cmp	r3, #0
 81053c8:	d10d      	bne.n	81053e6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 81053ca:	4b26      	ldr	r3, [pc, #152]	@ (8105464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 81053cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 81053d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 81053d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81053d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81053dc:	4a21      	ldr	r2, [pc, #132]	@ (8105464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 81053de:	430b      	orrs	r3, r1
 81053e0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 81053e4:	e003      	b.n	81053ee <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81053e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81053ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 81053ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81053f6:	2100      	movs	r1, #0
 81053f8:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 81053fc:	f003 0320 	and.w	r3, r3, #32
 8105400:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8105404:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8105408:	460b      	mov	r3, r1
 810540a:	4313      	orrs	r3, r2
 810540c:	d057      	beq.n	81054be <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 810540e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105412:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8105416:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810541a:	d033      	beq.n	8105484 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 810541c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8105420:	d82c      	bhi.n	810547c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8105422:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8105426:	d02f      	beq.n	8105488 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8105428:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810542c:	d826      	bhi.n	810547c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 810542e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105432:	d02b      	beq.n	810548c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8105434:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105438:	d820      	bhi.n	810547c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 810543a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810543e:	d013      	beq.n	8105468 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8105440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105444:	d81a      	bhi.n	810547c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8105446:	2b00      	cmp	r3, #0
 8105448:	d022      	beq.n	8105490 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 810544a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810544e:	d115      	bne.n	810547c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8105450:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105454:	3308      	adds	r3, #8
 8105456:	4618      	mov	r0, r3
 8105458:	f003 ff3e 	bl	81092d8 <RCCEx_PLL2_Config>
 810545c:	4603      	mov	r3, r0
 810545e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8105462:	e016      	b.n	8105492 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8105464:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8105468:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810546c:	3330      	adds	r3, #48	@ 0x30
 810546e:	4618      	mov	r0, r3
 8105470:	f003 ffca 	bl	8109408 <RCCEx_PLL3_Config>
 8105474:	4603      	mov	r3, r0
 8105476:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 810547a:	e00a      	b.n	8105492 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810547c:	2301      	movs	r3, #1
 810547e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8105482:	e006      	b.n	8105492 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8105484:	bf00      	nop
 8105486:	e004      	b.n	8105492 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8105488:	bf00      	nop
 810548a:	e002      	b.n	8105492 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 810548c:	bf00      	nop
 810548e:	e000      	b.n	8105492 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8105490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105492:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105496:	2b00      	cmp	r3, #0
 8105498:	d10d      	bne.n	81054b6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 810549a:	4bbb      	ldr	r3, [pc, #748]	@ (8105788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 810549c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 81054a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81054a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81054a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81054ac:	4ab6      	ldr	r2, [pc, #728]	@ (8105788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 81054ae:	430b      	orrs	r3, r1
 81054b0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 81054b4:	e003      	b.n	81054be <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81054b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81054ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 81054be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81054c6:	2100      	movs	r1, #0
 81054c8:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 81054cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81054d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81054d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81054d8:	460b      	mov	r3, r1
 81054da:	4313      	orrs	r3, r2
 81054dc:	d055      	beq.n	810558a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 81054de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81054e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81054e6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 81054ea:	d031      	beq.n	8105550 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 81054ec:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 81054f0:	d82a      	bhi.n	8105548 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 81054f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81054f6:	d02d      	beq.n	8105554 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 81054f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81054fc:	d824      	bhi.n	8105548 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 81054fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105502:	d029      	beq.n	8105558 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8105504:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105508:	d81e      	bhi.n	8105548 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 810550a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810550e:	d011      	beq.n	8105534 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8105510:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105514:	d818      	bhi.n	8105548 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8105516:	2b00      	cmp	r3, #0
 8105518:	d020      	beq.n	810555c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 810551a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810551e:	d113      	bne.n	8105548 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8105520:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105524:	3308      	adds	r3, #8
 8105526:	4618      	mov	r0, r3
 8105528:	f003 fed6 	bl	81092d8 <RCCEx_PLL2_Config>
 810552c:	4603      	mov	r3, r0
 810552e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8105532:	e014      	b.n	810555e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8105534:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105538:	3330      	adds	r3, #48	@ 0x30
 810553a:	4618      	mov	r0, r3
 810553c:	f003 ff64 	bl	8109408 <RCCEx_PLL3_Config>
 8105540:	4603      	mov	r3, r0
 8105542:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8105546:	e00a      	b.n	810555e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105548:	2301      	movs	r3, #1
 810554a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 810554e:	e006      	b.n	810555e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8105550:	bf00      	nop
 8105552:	e004      	b.n	810555e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8105554:	bf00      	nop
 8105556:	e002      	b.n	810555e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8105558:	bf00      	nop
 810555a:	e000      	b.n	810555e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 810555c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810555e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105562:	2b00      	cmp	r3, #0
 8105564:	d10d      	bne.n	8105582 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8105566:	4b88      	ldr	r3, [pc, #544]	@ (8105788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8105568:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 810556c:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8105570:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105574:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8105578:	4a83      	ldr	r2, [pc, #524]	@ (8105788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 810557a:	430b      	orrs	r3, r1
 810557c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8105580:	e003      	b.n	810558a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105582:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105586:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 810558a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810558e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105592:	2100      	movs	r1, #0
 8105594:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8105598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810559c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 81055a0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81055a4:	460b      	mov	r3, r1
 81055a6:	4313      	orrs	r3, r2
 81055a8:	d055      	beq.n	8105656 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 81055aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81055ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81055b2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 81055b6:	d031      	beq.n	810561c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 81055b8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 81055bc:	d82a      	bhi.n	8105614 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 81055be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81055c2:	d02d      	beq.n	8105620 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 81055c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81055c8:	d824      	bhi.n	8105614 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 81055ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81055ce:	d029      	beq.n	8105624 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 81055d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81055d4:	d81e      	bhi.n	8105614 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 81055d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81055da:	d011      	beq.n	8105600 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 81055dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81055e0:	d818      	bhi.n	8105614 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 81055e2:	2b00      	cmp	r3, #0
 81055e4:	d020      	beq.n	8105628 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 81055e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81055ea:	d113      	bne.n	8105614 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 81055ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81055f0:	3308      	adds	r3, #8
 81055f2:	4618      	mov	r0, r3
 81055f4:	f003 fe70 	bl	81092d8 <RCCEx_PLL2_Config>
 81055f8:	4603      	mov	r3, r0
 81055fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 81055fe:	e014      	b.n	810562a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8105600:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105604:	3330      	adds	r3, #48	@ 0x30
 8105606:	4618      	mov	r0, r3
 8105608:	f003 fefe 	bl	8109408 <RCCEx_PLL3_Config>
 810560c:	4603      	mov	r3, r0
 810560e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8105612:	e00a      	b.n	810562a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105614:	2301      	movs	r3, #1
 8105616:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 810561a:	e006      	b.n	810562a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 810561c:	bf00      	nop
 810561e:	e004      	b.n	810562a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8105620:	bf00      	nop
 8105622:	e002      	b.n	810562a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8105624:	bf00      	nop
 8105626:	e000      	b.n	810562a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8105628:	bf00      	nop
    }

    if (ret == HAL_OK)
 810562a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 810562e:	2b00      	cmp	r3, #0
 8105630:	d10d      	bne.n	810564e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8105632:	4b55      	ldr	r3, [pc, #340]	@ (8105788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8105634:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8105638:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 810563c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105640:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105644:	4a50      	ldr	r2, [pc, #320]	@ (8105788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8105646:	430b      	orrs	r3, r1
 8105648:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 810564c:	e003      	b.n	8105656 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810564e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105652:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8105656:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810565e:	2100      	movs	r1, #0
 8105660:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8105664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105668:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810566c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8105670:	460b      	mov	r3, r1
 8105672:	4313      	orrs	r3, r2
 8105674:	d055      	beq.n	8105722 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8105676:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810567a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810567e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105682:	d031      	beq.n	81056e8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8105684:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105688:	d82a      	bhi.n	81056e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 810568a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810568e:	d02d      	beq.n	81056ec <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8105690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105694:	d824      	bhi.n	81056e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8105696:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810569a:	d029      	beq.n	81056f0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 810569c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81056a0:	d81e      	bhi.n	81056e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 81056a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81056a6:	d011      	beq.n	81056cc <HAL_RCCEx_PeriphCLKConfig+0x1238>
 81056a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81056ac:	d818      	bhi.n	81056e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 81056ae:	2b00      	cmp	r3, #0
 81056b0:	d020      	beq.n	81056f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 81056b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81056b6:	d113      	bne.n	81056e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 81056b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81056bc:	3308      	adds	r3, #8
 81056be:	4618      	mov	r0, r3
 81056c0:	f003 fe0a 	bl	81092d8 <RCCEx_PLL2_Config>
 81056c4:	4603      	mov	r3, r0
 81056c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 81056ca:	e014      	b.n	81056f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 81056cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81056d0:	3330      	adds	r3, #48	@ 0x30
 81056d2:	4618      	mov	r0, r3
 81056d4:	f003 fe98 	bl	8109408 <RCCEx_PLL3_Config>
 81056d8:	4603      	mov	r3, r0
 81056da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 81056de:	e00a      	b.n	81056f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81056e0:	2301      	movs	r3, #1
 81056e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 81056e6:	e006      	b.n	81056f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 81056e8:	bf00      	nop
 81056ea:	e004      	b.n	81056f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 81056ec:	bf00      	nop
 81056ee:	e002      	b.n	81056f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 81056f0:	bf00      	nop
 81056f2:	e000      	b.n	81056f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 81056f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81056f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81056fa:	2b00      	cmp	r3, #0
 81056fc:	d10d      	bne.n	810571a <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 81056fe:	4b22      	ldr	r3, [pc, #136]	@ (8105788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8105700:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8105704:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8105708:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810570c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8105710:	4a1d      	ldr	r2, [pc, #116]	@ (8105788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8105712:	430b      	orrs	r3, r1
 8105714:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8105718:	e003      	b.n	8105722 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810571a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 810571e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8105722:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105726:	e9d3 2300 	ldrd	r2, r3, [r3]
 810572a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810572e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8105732:	2300      	movs	r3, #0
 8105734:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8105738:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 810573c:	460b      	mov	r3, r1
 810573e:	4313      	orrs	r3, r2
 8105740:	d055      	beq.n	81057ee <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8105742:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105746:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810574a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810574e:	d035      	beq.n	81057bc <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8105750:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8105754:	d82e      	bhi.n	81057b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8105756:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810575a:	d031      	beq.n	81057c0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 810575c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105760:	d828      	bhi.n	81057b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8105762:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105766:	d01b      	beq.n	81057a0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8105768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810576c:	d822      	bhi.n	81057b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 810576e:	2b00      	cmp	r3, #0
 8105770:	d003      	beq.n	810577a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8105772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105776:	d009      	beq.n	810578c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8105778:	e01c      	b.n	81057b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810577a:	4b03      	ldr	r3, [pc, #12]	@ (8105788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 810577c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810577e:	4a02      	ldr	r2, [pc, #8]	@ (8105788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8105780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105784:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8105786:	e01c      	b.n	81057c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8105788:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 810578c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105790:	3308      	adds	r3, #8
 8105792:	4618      	mov	r0, r3
 8105794:	f003 fda0 	bl	81092d8 <RCCEx_PLL2_Config>
 8105798:	4603      	mov	r3, r0
 810579a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 810579e:	e010      	b.n	81057c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 81057a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81057a4:	3330      	adds	r3, #48	@ 0x30
 81057a6:	4618      	mov	r0, r3
 81057a8:	f003 fe2e 	bl	8109408 <RCCEx_PLL3_Config>
 81057ac:	4603      	mov	r3, r0
 81057ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 81057b2:	e006      	b.n	81057c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81057b4:	2301      	movs	r3, #1
 81057b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 81057ba:	e002      	b.n	81057c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 81057bc:	bf00      	nop
 81057be:	e000      	b.n	81057c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 81057c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81057c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81057c6:	2b00      	cmp	r3, #0
 81057c8:	d10d      	bne.n	81057e6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 81057ca:	4bc3      	ldr	r3, [pc, #780]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 81057cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81057d0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81057d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81057d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 81057dc:	4abe      	ldr	r2, [pc, #760]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 81057de:	430b      	orrs	r3, r1
 81057e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81057e4:	e003      	b.n	81057ee <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81057e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81057ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 81057ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81057f6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81057fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 81057fe:	2300      	movs	r3, #0
 8105800:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8105804:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8105808:	460b      	mov	r3, r1
 810580a:	4313      	orrs	r3, r2
 810580c:	d051      	beq.n	81058b2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 810580e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105812:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8105816:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810581a:	d033      	beq.n	8105884 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 810581c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105820:	d82c      	bhi.n	810587c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8105822:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8105826:	d02d      	beq.n	8105884 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8105828:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 810582c:	d826      	bhi.n	810587c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 810582e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105832:	d019      	beq.n	8105868 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8105834:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105838:	d820      	bhi.n	810587c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 810583a:	2b00      	cmp	r3, #0
 810583c:	d003      	beq.n	8105846 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 810583e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8105842:	d007      	beq.n	8105854 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8105844:	e01a      	b.n	810587c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105846:	4ba4      	ldr	r3, [pc, #656]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8105848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810584a:	4aa3      	ldr	r2, [pc, #652]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 810584c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105850:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8105852:	e018      	b.n	8105886 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8105854:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105858:	3308      	adds	r3, #8
 810585a:	4618      	mov	r0, r3
 810585c:	f003 fd3c 	bl	81092d8 <RCCEx_PLL2_Config>
 8105860:	4603      	mov	r3, r0
 8105862:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8105866:	e00e      	b.n	8105886 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8105868:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810586c:	3330      	adds	r3, #48	@ 0x30
 810586e:	4618      	mov	r0, r3
 8105870:	f003 fdca 	bl	8109408 <RCCEx_PLL3_Config>
 8105874:	4603      	mov	r3, r0
 8105876:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 810587a:	e004      	b.n	8105886 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810587c:	2301      	movs	r3, #1
 810587e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8105882:	e000      	b.n	8105886 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8105884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105886:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 810588a:	2b00      	cmp	r3, #0
 810588c:	d10d      	bne.n	81058aa <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 810588e:	4b92      	ldr	r3, [pc, #584]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8105890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8105894:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8105898:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810589c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 81058a0:	4a8d      	ldr	r2, [pc, #564]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 81058a2:	430b      	orrs	r3, r1
 81058a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81058a8:	e003      	b.n	81058b2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81058aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81058ae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 81058b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81058b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81058ba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 81058be:	67bb      	str	r3, [r7, #120]	@ 0x78
 81058c0:	2300      	movs	r3, #0
 81058c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81058c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 81058c8:	460b      	mov	r3, r1
 81058ca:	4313      	orrs	r3, r2
 81058cc:	d032      	beq.n	8105934 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 81058ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81058d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81058d6:	2b05      	cmp	r3, #5
 81058d8:	d80f      	bhi.n	81058fa <HAL_RCCEx_PeriphCLKConfig+0x1466>
 81058da:	2b03      	cmp	r3, #3
 81058dc:	d211      	bcs.n	8105902 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 81058de:	2b01      	cmp	r3, #1
 81058e0:	d911      	bls.n	8105906 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 81058e2:	2b02      	cmp	r3, #2
 81058e4:	d109      	bne.n	81058fa <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 81058e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81058ea:	3308      	adds	r3, #8
 81058ec:	4618      	mov	r0, r3
 81058ee:	f003 fcf3 	bl	81092d8 <RCCEx_PLL2_Config>
 81058f2:	4603      	mov	r3, r0
 81058f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 81058f8:	e006      	b.n	8105908 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 81058fa:	2301      	movs	r3, #1
 81058fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8105900:	e002      	b.n	8105908 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8105902:	bf00      	nop
 8105904:	e000      	b.n	8105908 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8105906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105908:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 810590c:	2b00      	cmp	r3, #0
 810590e:	d10d      	bne.n	810592c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8105910:	4b71      	ldr	r3, [pc, #452]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8105912:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8105916:	f023 0107 	bic.w	r1, r3, #7
 810591a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810591e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8105922:	4a6d      	ldr	r2, [pc, #436]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8105924:	430b      	orrs	r3, r1
 8105926:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810592a:	e003      	b.n	8105934 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810592c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105930:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8105934:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105938:	e9d3 2300 	ldrd	r2, r3, [r3]
 810593c:	2100      	movs	r1, #0
 810593e:	6739      	str	r1, [r7, #112]	@ 0x70
 8105940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8105944:	677b      	str	r3, [r7, #116]	@ 0x74
 8105946:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 810594a:	460b      	mov	r3, r1
 810594c:	4313      	orrs	r3, r2
 810594e:	d024      	beq.n	810599a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8105950:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105954:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8105958:	2b00      	cmp	r3, #0
 810595a:	d005      	beq.n	8105968 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 810595c:	2b08      	cmp	r3, #8
 810595e:	d005      	beq.n	810596c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105960:	2301      	movs	r3, #1
 8105962:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8105966:	e002      	b.n	810596e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8105968:	bf00      	nop
 810596a:	e000      	b.n	810596e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 810596c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810596e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105972:	2b00      	cmp	r3, #0
 8105974:	d10d      	bne.n	8105992 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8105976:	4b58      	ldr	r3, [pc, #352]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8105978:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810597c:	f023 0108 	bic.w	r1, r3, #8
 8105980:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105984:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8105988:	4a53      	ldr	r2, [pc, #332]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 810598a:	430b      	orrs	r3, r1
 810598c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8105990:	e003      	b.n	810599a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105992:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105996:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810599a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81059a2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 81059a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 81059a8:	2300      	movs	r3, #0
 81059aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 81059ac:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 81059b0:	460b      	mov	r3, r1
 81059b2:	4313      	orrs	r3, r2
 81059b4:	f000 80b9 	beq.w	8105b2a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 81059b8:	4b48      	ldr	r3, [pc, #288]	@ (8105adc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 81059ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81059bc:	4a47      	ldr	r2, [pc, #284]	@ (8105adc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 81059be:	f043 0301 	orr.w	r3, r3, #1
 81059c2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81059c4:	f7fb fd72 	bl	81014ac <HAL_GetTick>
 81059c8:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 81059cc:	e00b      	b.n	81059e6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81059ce:	f7fb fd6d 	bl	81014ac <HAL_GetTick>
 81059d2:	4602      	mov	r2, r0
 81059d4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 81059d8:	1ad3      	subs	r3, r2, r3
 81059da:	2b02      	cmp	r3, #2
 81059dc:	d903      	bls.n	81059e6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 81059de:	2303      	movs	r3, #3
 81059e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 81059e4:	e005      	b.n	81059f2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 81059e6:	4b3d      	ldr	r3, [pc, #244]	@ (8105adc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 81059e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81059ea:	f003 0301 	and.w	r3, r3, #1
 81059ee:	2b00      	cmp	r3, #0
 81059f0:	d0ed      	beq.n	81059ce <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 81059f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81059f6:	2b00      	cmp	r3, #0
 81059f8:	f040 8093 	bne.w	8105b22 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 81059fc:	4b36      	ldr	r3, [pc, #216]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 81059fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8105a06:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8105a0a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8105a0e:	2b00      	cmp	r3, #0
 8105a10:	d023      	beq.n	8105a5a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8105a12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105a16:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8105a1a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8105a1e:	4293      	cmp	r3, r2
 8105a20:	d01b      	beq.n	8105a5a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8105a22:	4b2d      	ldr	r3, [pc, #180]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8105a24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105a28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8105a2c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8105a30:	4b29      	ldr	r3, [pc, #164]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8105a32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105a36:	4a28      	ldr	r2, [pc, #160]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8105a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8105a3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105a40:	4b25      	ldr	r3, [pc, #148]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8105a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105a46:	4a24      	ldr	r2, [pc, #144]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8105a48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8105a4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8105a50:	4a21      	ldr	r2, [pc, #132]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8105a52:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8105a56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8105a5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8105a5e:	f003 0301 	and.w	r3, r3, #1
 8105a62:	2b00      	cmp	r3, #0
 8105a64:	d019      	beq.n	8105a9a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105a66:	f7fb fd21 	bl	81014ac <HAL_GetTick>
 8105a6a:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8105a6e:	e00d      	b.n	8105a8c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105a70:	f7fb fd1c 	bl	81014ac <HAL_GetTick>
 8105a74:	4602      	mov	r2, r0
 8105a76:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8105a7a:	1ad2      	subs	r2, r2, r3
 8105a7c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8105a80:	429a      	cmp	r2, r3
 8105a82:	d903      	bls.n	8105a8c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8105a84:	2303      	movs	r3, #3
 8105a86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8105a8a:	e006      	b.n	8105a9a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8105a8c:	4b12      	ldr	r3, [pc, #72]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8105a8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105a92:	f003 0302 	and.w	r3, r3, #2
 8105a96:	2b00      	cmp	r3, #0
 8105a98:	d0ea      	beq.n	8105a70 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8105a9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105a9e:	2b00      	cmp	r3, #0
 8105aa0:	d13a      	bne.n	8105b18 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8105aa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105aa6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8105aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8105aae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105ab2:	d115      	bne.n	8105ae0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8105ab4:	4b08      	ldr	r3, [pc, #32]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8105ab6:	69db      	ldr	r3, [r3, #28]
 8105ab8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8105abc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105ac0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8105ac4:	091b      	lsrs	r3, r3, #4
 8105ac6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8105aca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8105ace:	4a02      	ldr	r2, [pc, #8]	@ (8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8105ad0:	430b      	orrs	r3, r1
 8105ad2:	61d3      	str	r3, [r2, #28]
 8105ad4:	e00a      	b.n	8105aec <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8105ad6:	bf00      	nop
 8105ad8:	44020c00 	.word	0x44020c00
 8105adc:	44020800 	.word	0x44020800
 8105ae0:	4b9f      	ldr	r3, [pc, #636]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105ae2:	69db      	ldr	r3, [r3, #28]
 8105ae4:	4a9e      	ldr	r2, [pc, #632]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105ae6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8105aea:	61d3      	str	r3, [r2, #28]
 8105aec:	4b9c      	ldr	r3, [pc, #624]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105af2:	4a9b      	ldr	r2, [pc, #620]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105af4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8105af8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8105afc:	4b98      	ldr	r3, [pc, #608]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105afe:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8105b02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105b06:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8105b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8105b0e:	4a94      	ldr	r2, [pc, #592]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105b10:	430b      	orrs	r3, r1
 8105b12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8105b16:	e008      	b.n	8105b2a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8105b18:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105b1c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8105b20:	e003      	b.n	8105b2a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105b26:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8105b2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b32:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8105b36:	663b      	str	r3, [r7, #96]	@ 0x60
 8105b38:	2300      	movs	r3, #0
 8105b3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8105b3c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8105b40:	460b      	mov	r3, r1
 8105b42:	4313      	orrs	r3, r2
 8105b44:	d035      	beq.n	8105bb2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8105b46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105b4a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8105b4e:	2b30      	cmp	r3, #48	@ 0x30
 8105b50:	d014      	beq.n	8105b7c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8105b52:	2b30      	cmp	r3, #48	@ 0x30
 8105b54:	d80e      	bhi.n	8105b74 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8105b56:	2b20      	cmp	r3, #32
 8105b58:	d012      	beq.n	8105b80 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8105b5a:	2b20      	cmp	r3, #32
 8105b5c:	d80a      	bhi.n	8105b74 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8105b5e:	2b00      	cmp	r3, #0
 8105b60:	d010      	beq.n	8105b84 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8105b62:	2b10      	cmp	r3, #16
 8105b64:	d106      	bne.n	8105b74 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b66:	4b7e      	ldr	r3, [pc, #504]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105b6a:	4a7d      	ldr	r2, [pc, #500]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105b70:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8105b72:	e008      	b.n	8105b86 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105b74:	2301      	movs	r3, #1
 8105b76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8105b7a:	e004      	b.n	8105b86 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8105b7c:	bf00      	nop
 8105b7e:	e002      	b.n	8105b86 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8105b80:	bf00      	nop
 8105b82:	e000      	b.n	8105b86 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8105b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105b86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105b8a:	2b00      	cmp	r3, #0
 8105b8c:	d10d      	bne.n	8105baa <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8105b8e:	4b74      	ldr	r3, [pc, #464]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105b90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8105b94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8105b98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105b9c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8105ba0:	4a6f      	ldr	r2, [pc, #444]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105ba2:	430b      	orrs	r3, r1
 8105ba4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8105ba8:	e003      	b.n	8105bb2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105baa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105bae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8105bb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105bba:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8105bbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8105bc0:	2300      	movs	r3, #0
 8105bc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8105bc4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8105bc8:	460b      	mov	r3, r1
 8105bca:	4313      	orrs	r3, r2
 8105bcc:	d033      	beq.n	8105c36 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8105bce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105bd2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8105bd6:	2b00      	cmp	r3, #0
 8105bd8:	d002      	beq.n	8105be0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8105bda:	2b40      	cmp	r3, #64	@ 0x40
 8105bdc:	d007      	beq.n	8105bee <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8105bde:	e010      	b.n	8105c02 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105be0:	4b5f      	ldr	r3, [pc, #380]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105be4:	4a5e      	ldr	r2, [pc, #376]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105bea:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8105bec:	e00d      	b.n	8105c0a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8105bee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105bf2:	3308      	adds	r3, #8
 8105bf4:	4618      	mov	r0, r3
 8105bf6:	f003 fb6f 	bl	81092d8 <RCCEx_PLL2_Config>
 8105bfa:	4603      	mov	r3, r0
 8105bfc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8105c00:	e003      	b.n	8105c0a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8105c02:	2301      	movs	r3, #1
 8105c04:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8105c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105c0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105c0e:	2b00      	cmp	r3, #0
 8105c10:	d10d      	bne.n	8105c2e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8105c12:	4b53      	ldr	r3, [pc, #332]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105c14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8105c18:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8105c1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105c20:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8105c24:	4a4e      	ldr	r2, [pc, #312]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105c26:	430b      	orrs	r3, r1
 8105c28:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8105c2c:	e003      	b.n	8105c36 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105c32:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8105c36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c3e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8105c42:	653b      	str	r3, [r7, #80]	@ 0x50
 8105c44:	2300      	movs	r3, #0
 8105c46:	657b      	str	r3, [r7, #84]	@ 0x54
 8105c48:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8105c4c:	460b      	mov	r3, r1
 8105c4e:	4313      	orrs	r3, r2
 8105c50:	d033      	beq.n	8105cba <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8105c52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105c56:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8105c5a:	2b00      	cmp	r3, #0
 8105c5c:	d002      	beq.n	8105c64 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8105c5e:	2b80      	cmp	r3, #128	@ 0x80
 8105c60:	d007      	beq.n	8105c72 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8105c62:	e010      	b.n	8105c86 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c64:	4b3e      	ldr	r3, [pc, #248]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105c68:	4a3d      	ldr	r2, [pc, #244]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105c6e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8105c70:	e00d      	b.n	8105c8e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8105c72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105c76:	3308      	adds	r3, #8
 8105c78:	4618      	mov	r0, r3
 8105c7a:	f003 fb2d 	bl	81092d8 <RCCEx_PLL2_Config>
 8105c7e:	4603      	mov	r3, r0
 8105c80:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8105c84:	e003      	b.n	8105c8e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8105c86:	2301      	movs	r3, #1
 8105c88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8105c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105c8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105c92:	2b00      	cmp	r3, #0
 8105c94:	d10d      	bne.n	8105cb2 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8105c96:	4b32      	ldr	r3, [pc, #200]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105c98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8105c9c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8105ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105ca4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8105ca8:	4a2d      	ldr	r2, [pc, #180]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105caa:	430b      	orrs	r3, r1
 8105cac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8105cb0:	e003      	b.n	8105cba <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105cb2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105cb6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8105cba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105cc2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8105cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8105cc8:	2300      	movs	r3, #0
 8105cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8105ccc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8105cd0:	460b      	mov	r3, r1
 8105cd2:	4313      	orrs	r3, r2
 8105cd4:	d04a      	beq.n	8105d6c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8105cd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8105cde:	2b04      	cmp	r3, #4
 8105ce0:	d827      	bhi.n	8105d32 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8105ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8105ce8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8105ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105ce8:	08105cfd 	.word	0x08105cfd
 8105cec:	08105d0b 	.word	0x08105d0b
 8105cf0:	08105d1f 	.word	0x08105d1f
 8105cf4:	08105d3b 	.word	0x08105d3b
 8105cf8:	08105d3b 	.word	0x08105d3b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105cfc:	4b18      	ldr	r3, [pc, #96]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105d00:	4a17      	ldr	r2, [pc, #92]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105d06:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8105d08:	e018      	b.n	8105d3c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8105d0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105d0e:	3308      	adds	r3, #8
 8105d10:	4618      	mov	r0, r3
 8105d12:	f003 fae1 	bl	81092d8 <RCCEx_PLL2_Config>
 8105d16:	4603      	mov	r3, r0
 8105d18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8105d1c:	e00e      	b.n	8105d3c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8105d1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105d22:	3330      	adds	r3, #48	@ 0x30
 8105d24:	4618      	mov	r0, r3
 8105d26:	f003 fb6f 	bl	8109408 <RCCEx_PLL3_Config>
 8105d2a:	4603      	mov	r3, r0
 8105d2c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8105d30:	e004      	b.n	8105d3c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105d32:	2301      	movs	r3, #1
 8105d34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8105d38:	e000      	b.n	8105d3c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8105d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105d3c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105d40:	2b00      	cmp	r3, #0
 8105d42:	d10f      	bne.n	8105d64 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8105d44:	4b06      	ldr	r3, [pc, #24]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8105d4a:	f023 0107 	bic.w	r1, r3, #7
 8105d4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8105d56:	4a02      	ldr	r2, [pc, #8]	@ (8105d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8105d58:	430b      	orrs	r3, r1
 8105d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8105d5e:	e005      	b.n	8105d6c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8105d60:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d64:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105d68:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8105d6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d74:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8105d78:	643b      	str	r3, [r7, #64]	@ 0x40
 8105d7a:	2300      	movs	r3, #0
 8105d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8105d7e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8105d82:	460b      	mov	r3, r1
 8105d84:	4313      	orrs	r3, r2
 8105d86:	f000 8081 	beq.w	8105e8c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8105d8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105d8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8105d92:	2b20      	cmp	r3, #32
 8105d94:	d85f      	bhi.n	8105e56 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8105d96:	a201      	add	r2, pc, #4	@ (adr r2, 8105d9c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8105d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d9c:	08105e21 	.word	0x08105e21
 8105da0:	08105e57 	.word	0x08105e57
 8105da4:	08105e57 	.word	0x08105e57
 8105da8:	08105e57 	.word	0x08105e57
 8105dac:	08105e57 	.word	0x08105e57
 8105db0:	08105e57 	.word	0x08105e57
 8105db4:	08105e57 	.word	0x08105e57
 8105db8:	08105e57 	.word	0x08105e57
 8105dbc:	08105e2f 	.word	0x08105e2f
 8105dc0:	08105e57 	.word	0x08105e57
 8105dc4:	08105e57 	.word	0x08105e57
 8105dc8:	08105e57 	.word	0x08105e57
 8105dcc:	08105e57 	.word	0x08105e57
 8105dd0:	08105e57 	.word	0x08105e57
 8105dd4:	08105e57 	.word	0x08105e57
 8105dd8:	08105e57 	.word	0x08105e57
 8105ddc:	08105e43 	.word	0x08105e43
 8105de0:	08105e57 	.word	0x08105e57
 8105de4:	08105e57 	.word	0x08105e57
 8105de8:	08105e57 	.word	0x08105e57
 8105dec:	08105e57 	.word	0x08105e57
 8105df0:	08105e57 	.word	0x08105e57
 8105df4:	08105e57 	.word	0x08105e57
 8105df8:	08105e57 	.word	0x08105e57
 8105dfc:	08105e5f 	.word	0x08105e5f
 8105e00:	08105e57 	.word	0x08105e57
 8105e04:	08105e57 	.word	0x08105e57
 8105e08:	08105e57 	.word	0x08105e57
 8105e0c:	08105e57 	.word	0x08105e57
 8105e10:	08105e57 	.word	0x08105e57
 8105e14:	08105e57 	.word	0x08105e57
 8105e18:	08105e57 	.word	0x08105e57
 8105e1c:	08105e5f 	.word	0x08105e5f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105e20:	4bab      	ldr	r3, [pc, #684]	@ (81060d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8105e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105e24:	4aaa      	ldr	r2, [pc, #680]	@ (81060d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8105e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105e2a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8105e2c:	e018      	b.n	8105e60 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8105e2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105e32:	3308      	adds	r3, #8
 8105e34:	4618      	mov	r0, r3
 8105e36:	f003 fa4f 	bl	81092d8 <RCCEx_PLL2_Config>
 8105e3a:	4603      	mov	r3, r0
 8105e3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8105e40:	e00e      	b.n	8105e60 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8105e42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105e46:	3330      	adds	r3, #48	@ 0x30
 8105e48:	4618      	mov	r0, r3
 8105e4a:	f003 fadd 	bl	8109408 <RCCEx_PLL3_Config>
 8105e4e:	4603      	mov	r3, r0
 8105e50:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8105e54:	e004      	b.n	8105e60 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105e56:	2301      	movs	r3, #1
 8105e58:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8105e5c:	e000      	b.n	8105e60 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8105e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105e60:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105e64:	2b00      	cmp	r3, #0
 8105e66:	d10d      	bne.n	8105e84 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8105e68:	4b99      	ldr	r3, [pc, #612]	@ (81060d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8105e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8105e6e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8105e72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105e76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8105e7a:	4a95      	ldr	r2, [pc, #596]	@ (81060d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8105e7c:	430b      	orrs	r3, r1
 8105e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8105e82:	e003      	b.n	8105e8c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e84:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105e88:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8105e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8105e98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8105e9a:	2300      	movs	r3, #0
 8105e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105e9e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8105ea2:	460b      	mov	r3, r1
 8105ea4:	4313      	orrs	r3, r2
 8105ea6:	d04e      	beq.n	8105f46 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8105ea8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8105eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105eb4:	d02e      	beq.n	8105f14 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8105eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105eba:	d827      	bhi.n	8105f0c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8105ebc:	2bc0      	cmp	r3, #192	@ 0xc0
 8105ebe:	d02b      	beq.n	8105f18 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8105ec0:	2bc0      	cmp	r3, #192	@ 0xc0
 8105ec2:	d823      	bhi.n	8105f0c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8105ec4:	2b80      	cmp	r3, #128	@ 0x80
 8105ec6:	d017      	beq.n	8105ef8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8105ec8:	2b80      	cmp	r3, #128	@ 0x80
 8105eca:	d81f      	bhi.n	8105f0c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8105ecc:	2b00      	cmp	r3, #0
 8105ece:	d002      	beq.n	8105ed6 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8105ed0:	2b40      	cmp	r3, #64	@ 0x40
 8105ed2:	d007      	beq.n	8105ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8105ed4:	e01a      	b.n	8105f0c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ed6:	4b7e      	ldr	r3, [pc, #504]	@ (81060d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8105ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105eda:	4a7d      	ldr	r2, [pc, #500]	@ (81060d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8105edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105ee0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8105ee2:	e01a      	b.n	8105f1a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8105ee4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105ee8:	3308      	adds	r3, #8
 8105eea:	4618      	mov	r0, r3
 8105eec:	f003 f9f4 	bl	81092d8 <RCCEx_PLL2_Config>
 8105ef0:	4603      	mov	r3, r0
 8105ef2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8105ef6:	e010      	b.n	8105f1a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8105ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105efc:	3330      	adds	r3, #48	@ 0x30
 8105efe:	4618      	mov	r0, r3
 8105f00:	f003 fa82 	bl	8109408 <RCCEx_PLL3_Config>
 8105f04:	4603      	mov	r3, r0
 8105f06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8105f0a:	e006      	b.n	8105f1a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105f0c:	2301      	movs	r3, #1
 8105f0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8105f12:	e002      	b.n	8105f1a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8105f14:	bf00      	nop
 8105f16:	e000      	b.n	8105f1a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8105f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105f1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105f1e:	2b00      	cmp	r3, #0
 8105f20:	d10d      	bne.n	8105f3e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8105f22:	4b6b      	ldr	r3, [pc, #428]	@ (81060d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8105f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8105f28:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8105f2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8105f34:	4a66      	ldr	r2, [pc, #408]	@ (81060d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8105f36:	430b      	orrs	r3, r1
 8105f38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8105f3c:	e003      	b.n	8105f46 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105f42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8105f46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f4e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8105f52:	633b      	str	r3, [r7, #48]	@ 0x30
 8105f54:	2300      	movs	r3, #0
 8105f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8105f58:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8105f5c:	460b      	mov	r3, r1
 8105f5e:	4313      	orrs	r3, r2
 8105f60:	d055      	beq.n	810600e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8105f62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105f66:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8105f6a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8105f6e:	d031      	beq.n	8105fd4 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8105f70:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8105f74:	d82a      	bhi.n	8105fcc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8105f76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8105f7a:	d02d      	beq.n	8105fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8105f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8105f80:	d824      	bhi.n	8105fcc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8105f82:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8105f86:	d029      	beq.n	8105fdc <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8105f88:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8105f8c:	d81e      	bhi.n	8105fcc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8105f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8105f92:	d011      	beq.n	8105fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8105f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8105f98:	d818      	bhi.n	8105fcc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8105f9a:	2b00      	cmp	r3, #0
 8105f9c:	d020      	beq.n	8105fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8105f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8105fa2:	d113      	bne.n	8105fcc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8105fa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105fa8:	3308      	adds	r3, #8
 8105faa:	4618      	mov	r0, r3
 8105fac:	f003 f994 	bl	81092d8 <RCCEx_PLL2_Config>
 8105fb0:	4603      	mov	r3, r0
 8105fb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8105fb6:	e014      	b.n	8105fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8105fb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105fbc:	3330      	adds	r3, #48	@ 0x30
 8105fbe:	4618      	mov	r0, r3
 8105fc0:	f003 fa22 	bl	8109408 <RCCEx_PLL3_Config>
 8105fc4:	4603      	mov	r3, r0
 8105fc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8105fca:	e00a      	b.n	8105fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105fcc:	2301      	movs	r3, #1
 8105fce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8105fd2:	e006      	b.n	8105fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8105fd4:	bf00      	nop
 8105fd6:	e004      	b.n	8105fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8105fd8:	bf00      	nop
 8105fda:	e002      	b.n	8105fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8105fdc:	bf00      	nop
 8105fde:	e000      	b.n	8105fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8105fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105fe2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8105fe6:	2b00      	cmp	r3, #0
 8105fe8:	d10d      	bne.n	8106006 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8105fea:	4b39      	ldr	r3, [pc, #228]	@ (81060d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8105fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8105ff0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8105ff4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8105ff8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8105ffc:	4a34      	ldr	r2, [pc, #208]	@ (81060d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8105ffe:	430b      	orrs	r3, r1
 8106000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8106004:	e003      	b.n	810600e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106006:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 810600a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 810600e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8106012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106016:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810601a:	62bb      	str	r3, [r7, #40]	@ 0x28
 810601c:	2300      	movs	r3, #0
 810601e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8106020:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8106024:	460b      	mov	r3, r1
 8106026:	4313      	orrs	r3, r2
 8106028:	d058      	beq.n	81060dc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 810602a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810602e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106032:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8106036:	d031      	beq.n	810609c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8106038:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 810603c:	d82a      	bhi.n	8106094 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 810603e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106042:	d02d      	beq.n	81060a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8106044:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106048:	d824      	bhi.n	8106094 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 810604a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810604e:	d029      	beq.n	81060a4 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8106050:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8106054:	d81e      	bhi.n	8106094 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8106056:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810605a:	d011      	beq.n	8106080 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 810605c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106060:	d818      	bhi.n	8106094 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8106062:	2b00      	cmp	r3, #0
 8106064:	d020      	beq.n	81060a8 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8106066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810606a:	d113      	bne.n	8106094 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 810606c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8106070:	3308      	adds	r3, #8
 8106072:	4618      	mov	r0, r3
 8106074:	f003 f930 	bl	81092d8 <RCCEx_PLL2_Config>
 8106078:	4603      	mov	r3, r0
 810607a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 810607e:	e014      	b.n	81060aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8106080:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8106084:	3330      	adds	r3, #48	@ 0x30
 8106086:	4618      	mov	r0, r3
 8106088:	f003 f9be 	bl	8109408 <RCCEx_PLL3_Config>
 810608c:	4603      	mov	r3, r0
 810608e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8106092:	e00a      	b.n	81060aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106094:	2301      	movs	r3, #1
 8106096:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 810609a:	e006      	b.n	81060aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 810609c:	bf00      	nop
 810609e:	e004      	b.n	81060aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 81060a0:	bf00      	nop
 81060a2:	e002      	b.n	81060aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 81060a4:	bf00      	nop
 81060a6:	e000      	b.n	81060aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 81060a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81060aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81060ae:	2b00      	cmp	r3, #0
 81060b0:	d110      	bne.n	81060d4 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 81060b2:	4b07      	ldr	r3, [pc, #28]	@ (81060d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 81060b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81060b8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 81060bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81060c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81060c4:	4902      	ldr	r1, [pc, #8]	@ (81060d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 81060c6:	4313      	orrs	r3, r2
 81060c8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 81060cc:	e006      	b.n	81060dc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 81060ce:	bf00      	nop
 81060d0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 81060d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81060d8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81060dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81060e4:	2100      	movs	r1, #0
 81060e6:	6239      	str	r1, [r7, #32]
 81060e8:	f003 0301 	and.w	r3, r3, #1
 81060ec:	627b      	str	r3, [r7, #36]	@ 0x24
 81060ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81060f2:	460b      	mov	r3, r1
 81060f4:	4313      	orrs	r3, r2
 81060f6:	d055      	beq.n	81061a4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 81060f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81060fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106100:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8106104:	d031      	beq.n	810616a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8106106:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 810610a:	d82a      	bhi.n	8106162 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 810610c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106110:	d02d      	beq.n	810616e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8106112:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106116:	d824      	bhi.n	8106162 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8106118:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 810611c:	d029      	beq.n	8106172 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 810611e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8106122:	d81e      	bhi.n	8106162 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8106124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106128:	d011      	beq.n	810614e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 810612a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810612e:	d818      	bhi.n	8106162 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8106130:	2b00      	cmp	r3, #0
 8106132:	d020      	beq.n	8106176 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8106134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106138:	d113      	bne.n	8106162 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 810613a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810613e:	3308      	adds	r3, #8
 8106140:	4618      	mov	r0, r3
 8106142:	f003 f8c9 	bl	81092d8 <RCCEx_PLL2_Config>
 8106146:	4603      	mov	r3, r0
 8106148:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810614c:	e014      	b.n	8106178 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 810614e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8106152:	3330      	adds	r3, #48	@ 0x30
 8106154:	4618      	mov	r0, r3
 8106156:	f003 f957 	bl	8109408 <RCCEx_PLL3_Config>
 810615a:	4603      	mov	r3, r0
 810615c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106160:	e00a      	b.n	8106178 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106162:	2301      	movs	r3, #1
 8106164:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8106168:	e006      	b.n	8106178 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 810616a:	bf00      	nop
 810616c:	e004      	b.n	8106178 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 810616e:	bf00      	nop
 8106170:	e002      	b.n	8106178 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8106172:	bf00      	nop
 8106174:	e000      	b.n	8106178 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8106176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106178:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 810617c:	2b00      	cmp	r3, #0
 810617e:	d10d      	bne.n	810619c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8106180:	4b88      	ldr	r3, [pc, #544]	@ (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8106182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8106186:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 810618a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810618e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106192:	4984      	ldr	r1, [pc, #528]	@ (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8106194:	4313      	orrs	r3, r2
 8106196:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 810619a:	e003      	b.n	81061a4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810619c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81061a0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 81061a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81061ac:	2100      	movs	r1, #0
 81061ae:	61b9      	str	r1, [r7, #24]
 81061b0:	f003 0302 	and.w	r3, r3, #2
 81061b4:	61fb      	str	r3, [r7, #28]
 81061b6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81061ba:	460b      	mov	r3, r1
 81061bc:	4313      	orrs	r3, r2
 81061be:	d03d      	beq.n	810623c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 81061c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81061c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 81061c8:	2b03      	cmp	r3, #3
 81061ca:	d81c      	bhi.n	8106206 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 81061cc:	a201      	add	r2, pc, #4	@ (adr r2, 81061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 81061ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81061d2:	bf00      	nop
 81061d4:	0810620f 	.word	0x0810620f
 81061d8:	081061e5 	.word	0x081061e5
 81061dc:	081061f3 	.word	0x081061f3
 81061e0:	0810620f 	.word	0x0810620f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81061e4:	4b6f      	ldr	r3, [pc, #444]	@ (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 81061e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81061e8:	4a6e      	ldr	r2, [pc, #440]	@ (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 81061ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81061ee:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 81061f0:	e00e      	b.n	8106210 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 81061f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81061f6:	3308      	adds	r3, #8
 81061f8:	4618      	mov	r0, r3
 81061fa:	f003 f86d 	bl	81092d8 <RCCEx_PLL2_Config>
 81061fe:	4603      	mov	r3, r0
 8106200:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8106204:	e004      	b.n	8106210 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106206:	2301      	movs	r3, #1
 8106208:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 810620c:	e000      	b.n	8106210 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 810620e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106210:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8106214:	2b00      	cmp	r3, #0
 8106216:	d10d      	bne.n	8106234 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8106218:	4b62      	ldr	r3, [pc, #392]	@ (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 810621a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 810621e:	f023 0203 	bic.w	r2, r3, #3
 8106222:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8106226:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 810622a:	495e      	ldr	r1, [pc, #376]	@ (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 810622c:	4313      	orrs	r3, r2
 810622e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8106232:	e003      	b.n	810623c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106234:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8106238:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810623c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8106240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106244:	2100      	movs	r1, #0
 8106246:	6139      	str	r1, [r7, #16]
 8106248:	f003 0304 	and.w	r3, r3, #4
 810624c:	617b      	str	r3, [r7, #20]
 810624e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8106252:	460b      	mov	r3, r1
 8106254:	4313      	orrs	r3, r2
 8106256:	d03a      	beq.n	81062ce <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8106258:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 810625c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8106260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8106264:	d00e      	beq.n	8106284 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8106266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810626a:	d815      	bhi.n	8106298 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 810626c:	2b00      	cmp	r3, #0
 810626e:	d017      	beq.n	81062a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8106270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106274:	d110      	bne.n	8106298 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106276:	4b4b      	ldr	r3, [pc, #300]	@ (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8106278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810627a:	4a4a      	ldr	r2, [pc, #296]	@ (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 810627c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106280:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8106282:	e00e      	b.n	81062a2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8106284:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8106288:	3308      	adds	r3, #8
 810628a:	4618      	mov	r0, r3
 810628c:	f003 f824 	bl	81092d8 <RCCEx_PLL2_Config>
 8106290:	4603      	mov	r3, r0
 8106292:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8106296:	e004      	b.n	81062a2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8106298:	2301      	movs	r3, #1
 810629a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 810629e:	e000      	b.n	81062a2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 81062a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81062a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81062a6:	2b00      	cmp	r3, #0
 81062a8:	d10d      	bne.n	81062c6 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 81062aa:	4b3e      	ldr	r3, [pc, #248]	@ (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 81062ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81062b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81062b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81062b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81062bc:	4939      	ldr	r1, [pc, #228]	@ (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 81062be:	4313      	orrs	r3, r2
 81062c0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 81062c4:	e003      	b.n	81062ce <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81062c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 81062ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81062ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81062d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81062d6:	2100      	movs	r1, #0
 81062d8:	60b9      	str	r1, [r7, #8]
 81062da:	f003 0310 	and.w	r3, r3, #16
 81062de:	60fb      	str	r3, [r7, #12]
 81062e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81062e4:	460b      	mov	r3, r1
 81062e6:	4313      	orrs	r3, r2
 81062e8:	d038      	beq.n	810635c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 81062ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 81062ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 81062f2:	2b30      	cmp	r3, #48	@ 0x30
 81062f4:	d01b      	beq.n	810632e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 81062f6:	2b30      	cmp	r3, #48	@ 0x30
 81062f8:	d815      	bhi.n	8106326 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 81062fa:	2b10      	cmp	r3, #16
 81062fc:	d002      	beq.n	8106304 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 81062fe:	2b20      	cmp	r3, #32
 8106300:	d007      	beq.n	8106312 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8106302:	e010      	b.n	8106326 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106304:	4b27      	ldr	r3, [pc, #156]	@ (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8106306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106308:	4a26      	ldr	r2, [pc, #152]	@ (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 810630a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810630e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8106310:	e00e      	b.n	8106330 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8106312:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8106316:	3330      	adds	r3, #48	@ 0x30
 8106318:	4618      	mov	r0, r3
 810631a:	f003 f875 	bl	8109408 <RCCEx_PLL3_Config>
 810631e:	4603      	mov	r3, r0
 8106320:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8106324:	e004      	b.n	8106330 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106326:	2301      	movs	r3, #1
 8106328:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 810632c:	e000      	b.n	8106330 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 810632e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106330:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8106334:	2b00      	cmp	r3, #0
 8106336:	d10d      	bne.n	8106354 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8106338:	4b1a      	ldr	r3, [pc, #104]	@ (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 810633a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 810633e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8106342:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8106346:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 810634a:	4916      	ldr	r1, [pc, #88]	@ (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 810634c:	4313      	orrs	r3, r2
 810634e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8106352:	e003      	b.n	810635c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106354:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8106358:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810635c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8106360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106364:	2100      	movs	r1, #0
 8106366:	6039      	str	r1, [r7, #0]
 8106368:	f003 0308 	and.w	r3, r3, #8
 810636c:	607b      	str	r3, [r7, #4]
 810636e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8106372:	460b      	mov	r3, r1
 8106374:	4313      	orrs	r3, r2
 8106376:	d00c      	beq.n	8106392 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8106378:	4b0a      	ldr	r3, [pc, #40]	@ (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 810637a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810637e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8106382:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8106386:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 810638a:	4906      	ldr	r1, [pc, #24]	@ (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 810638c:	4313      	orrs	r3, r2
 810638e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8106392:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8106396:	4618      	mov	r0, r3
 8106398:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 810639c:	46bd      	mov	sp, r7
 810639e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81063a2:	bf00      	nop
 81063a4:	44020c00 	.word	0x44020c00

081063a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 81063a8:	b480      	push	{r7}
 81063aa:	b08b      	sub	sp, #44	@ 0x2c
 81063ac:	af00      	add	r7, sp, #0
 81063ae:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 81063b0:	4bad      	ldr	r3, [pc, #692]	@ (8106668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 81063b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81063b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81063b8:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 81063ba:	4bab      	ldr	r3, [pc, #684]	@ (8106668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 81063bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81063be:	f003 0303 	and.w	r3, r3, #3
 81063c2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 81063c4:	4ba8      	ldr	r3, [pc, #672]	@ (8106668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 81063c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81063c8:	0a1b      	lsrs	r3, r3, #8
 81063ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81063ce:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 81063d0:	4ba5      	ldr	r3, [pc, #660]	@ (8106668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 81063d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81063d4:	f003 0310 	and.w	r3, r3, #16
 81063d8:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 81063da:	4ba3      	ldr	r3, [pc, #652]	@ (8106668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 81063dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81063de:	08db      	lsrs	r3, r3, #3
 81063e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81063e4:	697a      	ldr	r2, [r7, #20]
 81063e6:	fb02 f303 	mul.w	r3, r2, r3
 81063ea:	ee07 3a90 	vmov	s15, r3
 81063ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063f2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 81063f6:	69bb      	ldr	r3, [r7, #24]
 81063f8:	2b00      	cmp	r3, #0
 81063fa:	f000 8126 	beq.w	810664a <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 81063fe:	69fb      	ldr	r3, [r7, #28]
 8106400:	2b03      	cmp	r3, #3
 8106402:	d053      	beq.n	81064ac <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8106404:	69fb      	ldr	r3, [r7, #28]
 8106406:	2b03      	cmp	r3, #3
 8106408:	d86f      	bhi.n	81064ea <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 810640a:	69fb      	ldr	r3, [r7, #28]
 810640c:	2b01      	cmp	r3, #1
 810640e:	d003      	beq.n	8106418 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8106410:	69fb      	ldr	r3, [r7, #28]
 8106412:	2b02      	cmp	r3, #2
 8106414:	d02b      	beq.n	810646e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8106416:	e068      	b.n	81064ea <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8106418:	4b93      	ldr	r3, [pc, #588]	@ (8106668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 810641a:	681b      	ldr	r3, [r3, #0]
 810641c:	08db      	lsrs	r3, r3, #3
 810641e:	f003 0303 	and.w	r3, r3, #3
 8106422:	4a92      	ldr	r2, [pc, #584]	@ (810666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8106424:	fa22 f303 	lsr.w	r3, r2, r3
 8106428:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 810642a:	68fb      	ldr	r3, [r7, #12]
 810642c:	ee07 3a90 	vmov	s15, r3
 8106430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106434:	69bb      	ldr	r3, [r7, #24]
 8106436:	ee07 3a90 	vmov	s15, r3
 810643a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810643e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106442:	6a3b      	ldr	r3, [r7, #32]
 8106444:	ee07 3a90 	vmov	s15, r3
 8106448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810644c:	ed97 6a04 	vldr	s12, [r7, #16]
 8106450:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8106670 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8106454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810645c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106468:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 810646c:	e068      	b.n	8106540 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 810646e:	69bb      	ldr	r3, [r7, #24]
 8106470:	ee07 3a90 	vmov	s15, r3
 8106474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106478:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8106674 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 810647c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106480:	6a3b      	ldr	r3, [r7, #32]
 8106482:	ee07 3a90 	vmov	s15, r3
 8106486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810648a:	ed97 6a04 	vldr	s12, [r7, #16]
 810648e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8106670 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8106492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810649a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810649e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81064a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81064a6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 81064aa:	e049      	b.n	8106540 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 81064ac:	69bb      	ldr	r3, [r7, #24]
 81064ae:	ee07 3a90 	vmov	s15, r3
 81064b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81064b6:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8106678 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 81064ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81064be:	6a3b      	ldr	r3, [r7, #32]
 81064c0:	ee07 3a90 	vmov	s15, r3
 81064c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064c8:	ed97 6a04 	vldr	s12, [r7, #16]
 81064cc:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8106670 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 81064d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81064dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81064e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81064e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 81064e8:	e02a      	b.n	8106540 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 81064ea:	4b5f      	ldr	r3, [pc, #380]	@ (8106668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 81064ec:	681b      	ldr	r3, [r3, #0]
 81064ee:	08db      	lsrs	r3, r3, #3
 81064f0:	f003 0303 	and.w	r3, r3, #3
 81064f4:	4a5d      	ldr	r2, [pc, #372]	@ (810666c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 81064f6:	fa22 f303 	lsr.w	r3, r2, r3
 81064fa:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 81064fc:	68fb      	ldr	r3, [r7, #12]
 81064fe:	ee07 3a90 	vmov	s15, r3
 8106502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106506:	69bb      	ldr	r3, [r7, #24]
 8106508:	ee07 3a90 	vmov	s15, r3
 810650c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106510:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106514:	6a3b      	ldr	r3, [r7, #32]
 8106516:	ee07 3a90 	vmov	s15, r3
 810651a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810651e:	ed97 6a04 	vldr	s12, [r7, #16]
 8106522:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8106670 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8106526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810652a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810652e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106536:	ee67 7a27 	vmul.f32	s15, s14, s15
 810653a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 810653e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106540:	4b49      	ldr	r3, [pc, #292]	@ (8106668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8106542:	681b      	ldr	r3, [r3, #0]
 8106544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106548:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810654c:	d121      	bne.n	8106592 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 810654e:	4b46      	ldr	r3, [pc, #280]	@ (8106668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8106550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106552:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8106556:	2b00      	cmp	r3, #0
 8106558:	d017      	beq.n	810658a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 810655a:	4b43      	ldr	r3, [pc, #268]	@ (8106668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 810655c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810655e:	0a5b      	lsrs	r3, r3, #9
 8106560:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106564:	ee07 3a90 	vmov	s15, r3
 8106568:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 810656c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106570:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8106574:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8106578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810657c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106580:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8106584:	687b      	ldr	r3, [r7, #4]
 8106586:	601a      	str	r2, [r3, #0]
 8106588:	e006      	b.n	8106598 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 810658a:	687b      	ldr	r3, [r7, #4]
 810658c:	2200      	movs	r2, #0
 810658e:	601a      	str	r2, [r3, #0]
 8106590:	e002      	b.n	8106598 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8106592:	687b      	ldr	r3, [r7, #4]
 8106594:	2200      	movs	r2, #0
 8106596:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106598:	4b33      	ldr	r3, [pc, #204]	@ (8106668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 810659a:	681b      	ldr	r3, [r3, #0]
 810659c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81065a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81065a4:	d121      	bne.n	81065ea <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 81065a6:	4b30      	ldr	r3, [pc, #192]	@ (8106668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 81065a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81065aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81065ae:	2b00      	cmp	r3, #0
 81065b0:	d017      	beq.n	81065e2 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 81065b2:	4b2d      	ldr	r3, [pc, #180]	@ (8106668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 81065b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81065b6:	0c1b      	lsrs	r3, r3, #16
 81065b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81065bc:	ee07 3a90 	vmov	s15, r3
 81065c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 81065c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81065c8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 81065cc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 81065d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81065d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81065d8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 81065dc:	687b      	ldr	r3, [r7, #4]
 81065de:	605a      	str	r2, [r3, #4]
 81065e0:	e006      	b.n	81065f0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 81065e2:	687b      	ldr	r3, [r7, #4]
 81065e4:	2200      	movs	r2, #0
 81065e6:	605a      	str	r2, [r3, #4]
 81065e8:	e002      	b.n	81065f0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 81065ea:	687b      	ldr	r3, [r7, #4]
 81065ec:	2200      	movs	r2, #0
 81065ee:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81065f0:	4b1d      	ldr	r3, [pc, #116]	@ (8106668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 81065f2:	681b      	ldr	r3, [r3, #0]
 81065f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81065f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81065fc:	d121      	bne.n	8106642 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 81065fe:	4b1a      	ldr	r3, [pc, #104]	@ (8106668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8106600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106602:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8106606:	2b00      	cmp	r3, #0
 8106608:	d017      	beq.n	810663a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 810660a:	4b17      	ldr	r3, [pc, #92]	@ (8106668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 810660c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810660e:	0e1b      	lsrs	r3, r3, #24
 8106610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106614:	ee07 3a90 	vmov	s15, r3
 8106618:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 810661c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106620:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8106624:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8106628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810662c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106630:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8106634:	687b      	ldr	r3, [r7, #4]
 8106636:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8106638:	e010      	b.n	810665c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 810663a:	687b      	ldr	r3, [r7, #4]
 810663c:	2200      	movs	r2, #0
 810663e:	609a      	str	r2, [r3, #8]
}
 8106640:	e00c      	b.n	810665c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8106642:	687b      	ldr	r3, [r7, #4]
 8106644:	2200      	movs	r2, #0
 8106646:	609a      	str	r2, [r3, #8]
}
 8106648:	e008      	b.n	810665c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 810664a:	687b      	ldr	r3, [r7, #4]
 810664c:	2200      	movs	r2, #0
 810664e:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8106650:	687b      	ldr	r3, [r7, #4]
 8106652:	2200      	movs	r2, #0
 8106654:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8106656:	687b      	ldr	r3, [r7, #4]
 8106658:	2200      	movs	r2, #0
 810665a:	609a      	str	r2, [r3, #8]
}
 810665c:	bf00      	nop
 810665e:	372c      	adds	r7, #44	@ 0x2c
 8106660:	46bd      	mov	sp, r7
 8106662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106666:	4770      	bx	lr
 8106668:	44020c00 	.word	0x44020c00
 810666c:	03d09000 	.word	0x03d09000
 8106670:	46000000 	.word	0x46000000
 8106674:	4a742400 	.word	0x4a742400
 8106678:	4af42400 	.word	0x4af42400

0810667c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 810667c:	b480      	push	{r7}
 810667e:	b08b      	sub	sp, #44	@ 0x2c
 8106680:	af00      	add	r7, sp, #0
 8106682:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8106684:	4bad      	ldr	r3, [pc, #692]	@ (810693c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8106686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810668c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 810668e:	4bab      	ldr	r3, [pc, #684]	@ (810693c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8106690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106692:	f003 0303 	and.w	r3, r3, #3
 8106696:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8106698:	4ba8      	ldr	r3, [pc, #672]	@ (810693c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 810669a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810669c:	0a1b      	lsrs	r3, r3, #8
 810669e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81066a2:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 81066a4:	4ba5      	ldr	r3, [pc, #660]	@ (810693c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 81066a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81066a8:	f003 0310 	and.w	r3, r3, #16
 81066ac:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 81066ae:	4ba3      	ldr	r3, [pc, #652]	@ (810693c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 81066b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81066b2:	08db      	lsrs	r3, r3, #3
 81066b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81066b8:	697a      	ldr	r2, [r7, #20]
 81066ba:	fb02 f303 	mul.w	r3, r2, r3
 81066be:	ee07 3a90 	vmov	s15, r3
 81066c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81066c6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 81066ca:	69bb      	ldr	r3, [r7, #24]
 81066cc:	2b00      	cmp	r3, #0
 81066ce:	f000 8126 	beq.w	810691e <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 81066d2:	69fb      	ldr	r3, [r7, #28]
 81066d4:	2b03      	cmp	r3, #3
 81066d6:	d053      	beq.n	8106780 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 81066d8:	69fb      	ldr	r3, [r7, #28]
 81066da:	2b03      	cmp	r3, #3
 81066dc:	d86f      	bhi.n	81067be <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 81066de:	69fb      	ldr	r3, [r7, #28]
 81066e0:	2b01      	cmp	r3, #1
 81066e2:	d003      	beq.n	81066ec <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 81066e4:	69fb      	ldr	r3, [r7, #28]
 81066e6:	2b02      	cmp	r3, #2
 81066e8:	d02b      	beq.n	8106742 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 81066ea:	e068      	b.n	81067be <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 81066ec:	4b93      	ldr	r3, [pc, #588]	@ (810693c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 81066ee:	681b      	ldr	r3, [r3, #0]
 81066f0:	08db      	lsrs	r3, r3, #3
 81066f2:	f003 0303 	and.w	r3, r3, #3
 81066f6:	4a92      	ldr	r2, [pc, #584]	@ (8106940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 81066f8:	fa22 f303 	lsr.w	r3, r2, r3
 81066fc:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 81066fe:	68fb      	ldr	r3, [r7, #12]
 8106700:	ee07 3a90 	vmov	s15, r3
 8106704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106708:	69bb      	ldr	r3, [r7, #24]
 810670a:	ee07 3a90 	vmov	s15, r3
 810670e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106716:	6a3b      	ldr	r3, [r7, #32]
 8106718:	ee07 3a90 	vmov	s15, r3
 810671c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106720:	ed97 6a04 	vldr	s12, [r7, #16]
 8106724:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8106944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8106728:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810672c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106730:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106738:	ee67 7a27 	vmul.f32	s15, s14, s15
 810673c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8106740:	e068      	b.n	8106814 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8106742:	69bb      	ldr	r3, [r7, #24]
 8106744:	ee07 3a90 	vmov	s15, r3
 8106748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810674c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8106948 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8106750:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106754:	6a3b      	ldr	r3, [r7, #32]
 8106756:	ee07 3a90 	vmov	s15, r3
 810675a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810675e:	ed97 6a04 	vldr	s12, [r7, #16]
 8106762:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8106944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8106766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810676a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810676e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106776:	ee67 7a27 	vmul.f32	s15, s14, s15
 810677a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 810677e:	e049      	b.n	8106814 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8106780:	69bb      	ldr	r3, [r7, #24]
 8106782:	ee07 3a90 	vmov	s15, r3
 8106786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810678a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 810694c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 810678e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106792:	6a3b      	ldr	r3, [r7, #32]
 8106794:	ee07 3a90 	vmov	s15, r3
 8106798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810679c:	ed97 6a04 	vldr	s12, [r7, #16]
 81067a0:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8106944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 81067a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81067a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81067ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81067b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81067b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81067b8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 81067bc:	e02a      	b.n	8106814 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 81067be:	4b5f      	ldr	r3, [pc, #380]	@ (810693c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 81067c0:	681b      	ldr	r3, [r3, #0]
 81067c2:	08db      	lsrs	r3, r3, #3
 81067c4:	f003 0303 	and.w	r3, r3, #3
 81067c8:	4a5d      	ldr	r2, [pc, #372]	@ (8106940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 81067ca:	fa22 f303 	lsr.w	r3, r2, r3
 81067ce:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 81067d0:	68fb      	ldr	r3, [r7, #12]
 81067d2:	ee07 3a90 	vmov	s15, r3
 81067d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81067da:	69bb      	ldr	r3, [r7, #24]
 81067dc:	ee07 3a90 	vmov	s15, r3
 81067e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81067e8:	6a3b      	ldr	r3, [r7, #32]
 81067ea:	ee07 3a90 	vmov	s15, r3
 81067ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81067f2:	ed97 6a04 	vldr	s12, [r7, #16]
 81067f6:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8106944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 81067fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81067fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810680a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810680e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8106812:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106814:	4b49      	ldr	r3, [pc, #292]	@ (810693c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8106816:	681b      	ldr	r3, [r3, #0]
 8106818:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810681c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106820:	d121      	bne.n	8106866 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8106822:	4b46      	ldr	r3, [pc, #280]	@ (810693c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8106824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810682a:	2b00      	cmp	r3, #0
 810682c:	d017      	beq.n	810685e <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 810682e:	4b43      	ldr	r3, [pc, #268]	@ (810693c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8106830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106832:	0a5b      	lsrs	r3, r3, #9
 8106834:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106838:	ee07 3a90 	vmov	s15, r3
 810683c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8106840:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106844:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8106848:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 810684c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106854:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8106858:	687b      	ldr	r3, [r7, #4]
 810685a:	601a      	str	r2, [r3, #0]
 810685c:	e006      	b.n	810686c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 810685e:	687b      	ldr	r3, [r7, #4]
 8106860:	2200      	movs	r2, #0
 8106862:	601a      	str	r2, [r3, #0]
 8106864:	e002      	b.n	810686c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8106866:	687b      	ldr	r3, [r7, #4]
 8106868:	2200      	movs	r2, #0
 810686a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810686c:	4b33      	ldr	r3, [pc, #204]	@ (810693c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 810686e:	681b      	ldr	r3, [r3, #0]
 8106870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106874:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106878:	d121      	bne.n	81068be <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 810687a:	4b30      	ldr	r3, [pc, #192]	@ (810693c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 810687c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810687e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106882:	2b00      	cmp	r3, #0
 8106884:	d017      	beq.n	81068b6 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8106886:	4b2d      	ldr	r3, [pc, #180]	@ (810693c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8106888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810688a:	0c1b      	lsrs	r3, r3, #16
 810688c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106890:	ee07 3a90 	vmov	s15, r3
 8106894:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8106898:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810689c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 81068a0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 81068a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81068a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81068ac:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 81068b0:	687b      	ldr	r3, [r7, #4]
 81068b2:	605a      	str	r2, [r3, #4]
 81068b4:	e006      	b.n	81068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 81068b6:	687b      	ldr	r3, [r7, #4]
 81068b8:	2200      	movs	r2, #0
 81068ba:	605a      	str	r2, [r3, #4]
 81068bc:	e002      	b.n	81068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 81068be:	687b      	ldr	r3, [r7, #4]
 81068c0:	2200      	movs	r2, #0
 81068c2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81068c4:	4b1d      	ldr	r3, [pc, #116]	@ (810693c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 81068c6:	681b      	ldr	r3, [r3, #0]
 81068c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81068cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81068d0:	d121      	bne.n	8106916 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 81068d2:	4b1a      	ldr	r3, [pc, #104]	@ (810693c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 81068d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81068d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81068da:	2b00      	cmp	r3, #0
 81068dc:	d017      	beq.n	810690e <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 81068de:	4b17      	ldr	r3, [pc, #92]	@ (810693c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 81068e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81068e2:	0e1b      	lsrs	r3, r3, #24
 81068e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81068e8:	ee07 3a90 	vmov	s15, r3
 81068ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 81068f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81068f4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 81068f8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 81068fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106904:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8106908:	687b      	ldr	r3, [r7, #4]
 810690a:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810690c:	e010      	b.n	8106930 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 810690e:	687b      	ldr	r3, [r7, #4]
 8106910:	2200      	movs	r2, #0
 8106912:	609a      	str	r2, [r3, #8]
}
 8106914:	e00c      	b.n	8106930 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8106916:	687b      	ldr	r3, [r7, #4]
 8106918:	2200      	movs	r2, #0
 810691a:	609a      	str	r2, [r3, #8]
}
 810691c:	e008      	b.n	8106930 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 810691e:	687b      	ldr	r3, [r7, #4]
 8106920:	2200      	movs	r2, #0
 8106922:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8106924:	687b      	ldr	r3, [r7, #4]
 8106926:	2200      	movs	r2, #0
 8106928:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 810692a:	687b      	ldr	r3, [r7, #4]
 810692c:	2200      	movs	r2, #0
 810692e:	609a      	str	r2, [r3, #8]
}
 8106930:	bf00      	nop
 8106932:	372c      	adds	r7, #44	@ 0x2c
 8106934:	46bd      	mov	sp, r7
 8106936:	f85d 7b04 	ldr.w	r7, [sp], #4
 810693a:	4770      	bx	lr
 810693c:	44020c00 	.word	0x44020c00
 8106940:	03d09000 	.word	0x03d09000
 8106944:	46000000 	.word	0x46000000
 8106948:	4a742400 	.word	0x4a742400
 810694c:	4af42400 	.word	0x4af42400

08106950 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8106950:	b480      	push	{r7}
 8106952:	b08b      	sub	sp, #44	@ 0x2c
 8106954:	af00      	add	r7, sp, #0
 8106956:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8106958:	4bad      	ldr	r3, [pc, #692]	@ (8106c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 810695a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810695c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106960:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8106962:	4bab      	ldr	r3, [pc, #684]	@ (8106c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8106964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106966:	f003 0303 	and.w	r3, r3, #3
 810696a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 810696c:	4ba8      	ldr	r3, [pc, #672]	@ (8106c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 810696e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106970:	0a1b      	lsrs	r3, r3, #8
 8106972:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106976:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8106978:	4ba5      	ldr	r3, [pc, #660]	@ (8106c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 810697a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810697c:	f003 0310 	and.w	r3, r3, #16
 8106980:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8106982:	4ba3      	ldr	r3, [pc, #652]	@ (8106c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8106984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106986:	08db      	lsrs	r3, r3, #3
 8106988:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810698c:	697a      	ldr	r2, [r7, #20]
 810698e:	fb02 f303 	mul.w	r3, r2, r3
 8106992:	ee07 3a90 	vmov	s15, r3
 8106996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810699a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 810699e:	69bb      	ldr	r3, [r7, #24]
 81069a0:	2b00      	cmp	r3, #0
 81069a2:	f000 8126 	beq.w	8106bf2 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 81069a6:	69fb      	ldr	r3, [r7, #28]
 81069a8:	2b03      	cmp	r3, #3
 81069aa:	d053      	beq.n	8106a54 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 81069ac:	69fb      	ldr	r3, [r7, #28]
 81069ae:	2b03      	cmp	r3, #3
 81069b0:	d86f      	bhi.n	8106a92 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 81069b2:	69fb      	ldr	r3, [r7, #28]
 81069b4:	2b01      	cmp	r3, #1
 81069b6:	d003      	beq.n	81069c0 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 81069b8:	69fb      	ldr	r3, [r7, #28]
 81069ba:	2b02      	cmp	r3, #2
 81069bc:	d02b      	beq.n	8106a16 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 81069be:	e068      	b.n	8106a92 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 81069c0:	4b93      	ldr	r3, [pc, #588]	@ (8106c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 81069c2:	681b      	ldr	r3, [r3, #0]
 81069c4:	08db      	lsrs	r3, r3, #3
 81069c6:	f003 0303 	and.w	r3, r3, #3
 81069ca:	4a92      	ldr	r2, [pc, #584]	@ (8106c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 81069cc:	fa22 f303 	lsr.w	r3, r2, r3
 81069d0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 81069d2:	68fb      	ldr	r3, [r7, #12]
 81069d4:	ee07 3a90 	vmov	s15, r3
 81069d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81069dc:	69bb      	ldr	r3, [r7, #24]
 81069de:	ee07 3a90 	vmov	s15, r3
 81069e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81069ea:	6a3b      	ldr	r3, [r7, #32]
 81069ec:	ee07 3a90 	vmov	s15, r3
 81069f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81069f4:	ed97 6a04 	vldr	s12, [r7, #16]
 81069f8:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8106c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 81069fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106a08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a10:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8106a14:	e068      	b.n	8106ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8106a16:	69bb      	ldr	r3, [r7, #24]
 8106a18:	ee07 3a90 	vmov	s15, r3
 8106a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a20:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8106c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8106a24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a28:	6a3b      	ldr	r3, [r7, #32]
 8106a2a:	ee07 3a90 	vmov	s15, r3
 8106a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a32:	ed97 6a04 	vldr	s12, [r7, #16]
 8106a36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8106c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8106a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a4e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8106a52:	e049      	b.n	8106ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8106a54:	69bb      	ldr	r3, [r7, #24]
 8106a56:	ee07 3a90 	vmov	s15, r3
 8106a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a5e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8106c20 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8106a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a66:	6a3b      	ldr	r3, [r7, #32]
 8106a68:	ee07 3a90 	vmov	s15, r3
 8106a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a70:	ed97 6a04 	vldr	s12, [r7, #16]
 8106a74:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8106c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8106a78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106a84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a8c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8106a90:	e02a      	b.n	8106ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8106a92:	4b5f      	ldr	r3, [pc, #380]	@ (8106c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8106a94:	681b      	ldr	r3, [r3, #0]
 8106a96:	08db      	lsrs	r3, r3, #3
 8106a98:	f003 0303 	and.w	r3, r3, #3
 8106a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8106c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8106a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8106aa2:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8106aa4:	68fb      	ldr	r3, [r7, #12]
 8106aa6:	ee07 3a90 	vmov	s15, r3
 8106aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106aae:	69bb      	ldr	r3, [r7, #24]
 8106ab0:	ee07 3a90 	vmov	s15, r3
 8106ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106abc:	6a3b      	ldr	r3, [r7, #32]
 8106abe:	ee07 3a90 	vmov	s15, r3
 8106ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106ac6:	ed97 6a04 	vldr	s12, [r7, #16]
 8106aca:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8106c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8106ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106ae2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8106ae6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106ae8:	4b49      	ldr	r3, [pc, #292]	@ (8106c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8106aea:	681b      	ldr	r3, [r3, #0]
 8106aec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106af4:	d121      	bne.n	8106b3a <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8106af6:	4b46      	ldr	r3, [pc, #280]	@ (8106c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8106af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8106afe:	2b00      	cmp	r3, #0
 8106b00:	d017      	beq.n	8106b32 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8106b02:	4b43      	ldr	r3, [pc, #268]	@ (8106c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8106b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106b06:	0a5b      	lsrs	r3, r3, #9
 8106b08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106b0c:	ee07 3a90 	vmov	s15, r3
 8106b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8106b14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106b18:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8106b1c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8106b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106b28:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8106b2c:	687b      	ldr	r3, [r7, #4]
 8106b2e:	601a      	str	r2, [r3, #0]
 8106b30:	e006      	b.n	8106b40 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8106b32:	687b      	ldr	r3, [r7, #4]
 8106b34:	2200      	movs	r2, #0
 8106b36:	601a      	str	r2, [r3, #0]
 8106b38:	e002      	b.n	8106b40 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8106b3a:	687b      	ldr	r3, [r7, #4]
 8106b3c:	2200      	movs	r2, #0
 8106b3e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106b40:	4b33      	ldr	r3, [pc, #204]	@ (8106c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8106b42:	681b      	ldr	r3, [r3, #0]
 8106b44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106b4c:	d121      	bne.n	8106b92 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8106b4e:	4b30      	ldr	r3, [pc, #192]	@ (8106c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8106b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106b56:	2b00      	cmp	r3, #0
 8106b58:	d017      	beq.n	8106b8a <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8106b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8106c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8106b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106b5e:	0c1b      	lsrs	r3, r3, #16
 8106b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106b64:	ee07 3a90 	vmov	s15, r3
 8106b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8106b6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106b70:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8106b74:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8106b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106b80:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8106b84:	687b      	ldr	r3, [r7, #4]
 8106b86:	605a      	str	r2, [r3, #4]
 8106b88:	e006      	b.n	8106b98 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106b8a:	687b      	ldr	r3, [r7, #4]
 8106b8c:	2200      	movs	r2, #0
 8106b8e:	605a      	str	r2, [r3, #4]
 8106b90:	e002      	b.n	8106b98 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106b92:	687b      	ldr	r3, [r7, #4]
 8106b94:	2200      	movs	r2, #0
 8106b96:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106b98:	4b1d      	ldr	r3, [pc, #116]	@ (8106c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8106b9a:	681b      	ldr	r3, [r3, #0]
 8106b9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106ba0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106ba4:	d121      	bne.n	8106bea <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8106ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8106c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8106ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106baa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8106bae:	2b00      	cmp	r3, #0
 8106bb0:	d017      	beq.n	8106be2 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8106bb2:	4b17      	ldr	r3, [pc, #92]	@ (8106c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8106bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106bb6:	0e1b      	lsrs	r3, r3, #24
 8106bb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106bbc:	ee07 3a90 	vmov	s15, r3
 8106bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8106bc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106bc8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8106bcc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8106bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106bd8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8106bdc:	687b      	ldr	r3, [r7, #4]
 8106bde:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8106be0:	e010      	b.n	8106c04 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8106be2:	687b      	ldr	r3, [r7, #4]
 8106be4:	2200      	movs	r2, #0
 8106be6:	609a      	str	r2, [r3, #8]
}
 8106be8:	e00c      	b.n	8106c04 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8106bea:	687b      	ldr	r3, [r7, #4]
 8106bec:	2200      	movs	r2, #0
 8106bee:	609a      	str	r2, [r3, #8]
}
 8106bf0:	e008      	b.n	8106c04 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8106bf2:	687b      	ldr	r3, [r7, #4]
 8106bf4:	2200      	movs	r2, #0
 8106bf6:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106bf8:	687b      	ldr	r3, [r7, #4]
 8106bfa:	2200      	movs	r2, #0
 8106bfc:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8106bfe:	687b      	ldr	r3, [r7, #4]
 8106c00:	2200      	movs	r2, #0
 8106c02:	609a      	str	r2, [r3, #8]
}
 8106c04:	bf00      	nop
 8106c06:	372c      	adds	r7, #44	@ 0x2c
 8106c08:	46bd      	mov	sp, r7
 8106c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c0e:	4770      	bx	lr
 8106c10:	44020c00 	.word	0x44020c00
 8106c14:	03d09000 	.word	0x03d09000
 8106c18:	46000000 	.word	0x46000000
 8106c1c:	4a742400 	.word	0x4a742400
 8106c20:	4af42400 	.word	0x4af42400

08106c24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8106c24:	b590      	push	{r4, r7, lr}
 8106c26:	b08f      	sub	sp, #60	@ 0x3c
 8106c28:	af00      	add	r7, sp, #0
 8106c2a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8106c2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106c32:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8106c36:	4321      	orrs	r1, r4
 8106c38:	d150      	bne.n	8106cdc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8106c3a:	4b26      	ldr	r3, [pc, #152]	@ (8106cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8106c3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106c40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106c44:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8106c46:	4b23      	ldr	r3, [pc, #140]	@ (8106cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8106c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106c4c:	f003 0302 	and.w	r3, r3, #2
 8106c50:	2b02      	cmp	r3, #2
 8106c52:	d108      	bne.n	8106c66 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8106c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106c5a:	d104      	bne.n	8106c66 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8106c5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8106c60:	637b      	str	r3, [r7, #52]	@ 0x34
 8106c62:	f002 bb2a 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8106c66:	4b1b      	ldr	r3, [pc, #108]	@ (8106cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8106c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106c6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106c70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106c74:	d108      	bne.n	8106c88 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8106c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106c78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8106c7c:	d104      	bne.n	8106c88 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8106c7e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8106c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8106c84:	f002 bb19 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8106c88:	4b12      	ldr	r3, [pc, #72]	@ (8106cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8106c8a:	681b      	ldr	r3, [r3, #0]
 8106c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106c90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106c94:	d119      	bne.n	8106cca <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8106c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106c98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106c9c:	d115      	bne.n	8106cca <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8106c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8106cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8106ca0:	69db      	ldr	r3, [r3, #28]
 8106ca2:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8106ca6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8106caa:	d30a      	bcc.n	8106cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8106cac:	4b09      	ldr	r3, [pc, #36]	@ (8106cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8106cae:	69db      	ldr	r3, [r3, #28]
 8106cb0:	0a1b      	lsrs	r3, r3, #8
 8106cb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106cb6:	4a08      	ldr	r2, [pc, #32]	@ (8106cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8106cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8106cbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8106cbe:	f002 bafc 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8106cc2:	2300      	movs	r3, #0
 8106cc4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8106cc6:	f002 baf8 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8106cca:	2300      	movs	r3, #0
 8106ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8106cce:	f002 baf4 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8106cd2:	bf00      	nop
 8106cd4:	44020c00 	.word	0x44020c00
 8106cd8:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8106cdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106ce0:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8106ce4:	ea50 0104 	orrs.w	r1, r0, r4
 8106ce8:	f001 8275 	beq.w	81081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8106cec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106cf0:	2801      	cmp	r0, #1
 8106cf2:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8106cf6:	f082 82dd 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106cfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106cfe:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8106d02:	ea50 0104 	orrs.w	r1, r0, r4
 8106d06:	f001 816c 	beq.w	8107fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8106d0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106d0e:	2801      	cmp	r0, #1
 8106d10:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8106d14:	f082 82ce 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106d18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106d1c:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8106d20:	ea50 0104 	orrs.w	r1, r0, r4
 8106d24:	f001 8602 	beq.w	810892c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8106d28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106d2c:	2801      	cmp	r0, #1
 8106d2e:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8106d32:	f082 82bf 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106d36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106d3a:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8106d3e:	ea50 0104 	orrs.w	r1, r0, r4
 8106d42:	f001 854c 	beq.w	81087de <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8106d46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106d4a:	2801      	cmp	r0, #1
 8106d4c:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8106d50:	f082 82b0 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106d54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106d58:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8106d5c:	ea50 0104 	orrs.w	r1, r0, r4
 8106d60:	f001 849e 	beq.w	81086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8106d64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106d68:	2801      	cmp	r0, #1
 8106d6a:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8106d6e:	f082 82a1 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106d72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106d76:	f1a1 0420 	sub.w	r4, r1, #32
 8106d7a:	ea50 0104 	orrs.w	r1, r0, r4
 8106d7e:	f001 83e8 	beq.w	8108552 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8106d82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106d86:	2801      	cmp	r0, #1
 8106d88:	f171 0120 	sbcs.w	r1, r1, #32
 8106d8c:	f082 8292 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106d90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106d94:	f1a1 0410 	sub.w	r4, r1, #16
 8106d98:	ea50 0104 	orrs.w	r1, r0, r4
 8106d9c:	f002 8256 	beq.w	810924c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8106da0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106da4:	2801      	cmp	r0, #1
 8106da6:	f171 0110 	sbcs.w	r1, r1, #16
 8106daa:	f082 8283 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106dae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106db2:	f1a1 0408 	sub.w	r4, r1, #8
 8106db6:	ea50 0104 	orrs.w	r1, r0, r4
 8106dba:	f002 81cc 	beq.w	8109156 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8106dbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106dc2:	2801      	cmp	r0, #1
 8106dc4:	f171 0108 	sbcs.w	r1, r1, #8
 8106dc8:	f082 8274 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106dcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106dd0:	1f0c      	subs	r4, r1, #4
 8106dd2:	ea50 0104 	orrs.w	r1, r0, r4
 8106dd6:	f001 8648 	beq.w	8108a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8106dda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106dde:	2801      	cmp	r0, #1
 8106de0:	f171 0104 	sbcs.w	r1, r1, #4
 8106de4:	f082 8266 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106de8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106dec:	1e8c      	subs	r4, r1, #2
 8106dee:	ea50 0104 	orrs.w	r1, r0, r4
 8106df2:	f002 8143 	beq.w	810907c <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8106df6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106dfa:	2801      	cmp	r0, #1
 8106dfc:	f171 0102 	sbcs.w	r1, r1, #2
 8106e00:	f082 8258 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106e04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106e08:	1e4c      	subs	r4, r1, #1
 8106e0a:	ea50 0104 	orrs.w	r1, r0, r4
 8106e0e:	f002 80ce 	beq.w	8108fae <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8106e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106e16:	2801      	cmp	r0, #1
 8106e18:	f171 0101 	sbcs.w	r1, r1, #1
 8106e1c:	f082 824a 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106e20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106e24:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8106e28:	4321      	orrs	r1, r4
 8106e2a:	f002 8059 	beq.w	8108ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8106e2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106e32:	4cd9      	ldr	r4, [pc, #868]	@ (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8106e34:	42a0      	cmp	r0, r4
 8106e36:	f171 0100 	sbcs.w	r1, r1, #0
 8106e3a:	f082 823b 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106e3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106e42:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8106e46:	4321      	orrs	r1, r4
 8106e48:	f001 87d9 	beq.w	8108dfe <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8106e4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106e50:	4cd2      	ldr	r4, [pc, #840]	@ (810719c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8106e52:	42a0      	cmp	r0, r4
 8106e54:	f171 0100 	sbcs.w	r1, r1, #0
 8106e58:	f082 822c 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106e5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106e60:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8106e64:	4321      	orrs	r1, r4
 8106e66:	f001 8751 	beq.w	8108d0c <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8106e6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106e6e:	4ccc      	ldr	r4, [pc, #816]	@ (81071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8106e70:	42a0      	cmp	r0, r4
 8106e72:	f171 0100 	sbcs.w	r1, r1, #0
 8106e76:	f082 821d 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106e7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106e7e:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8106e82:	4321      	orrs	r1, r4
 8106e84:	f001 869a 	beq.w	8108bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8106e88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106e8c:	4cc5      	ldr	r4, [pc, #788]	@ (81071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8106e8e:	42a0      	cmp	r0, r4
 8106e90:	f171 0100 	sbcs.w	r1, r1, #0
 8106e94:	f082 820e 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106e98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106e9c:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8106ea0:	4321      	orrs	r1, r4
 8106ea2:	f001 8612 	beq.w	8108aca <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8106ea6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106eaa:	4cbf      	ldr	r4, [pc, #764]	@ (81071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8106eac:	42a0      	cmp	r0, r4
 8106eae:	f171 0100 	sbcs.w	r1, r1, #0
 8106eb2:	f082 81ff 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106eb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106eba:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8106ebe:	4321      	orrs	r1, r4
 8106ec0:	f002 817e 	beq.w	81091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8106ec4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106ec8:	4cb8      	ldr	r4, [pc, #736]	@ (81071ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8106eca:	42a0      	cmp	r0, r4
 8106ecc:	f171 0100 	sbcs.w	r1, r1, #0
 8106ed0:	f082 81f0 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106ed4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106ed8:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8106edc:	4321      	orrs	r1, r4
 8106ede:	f000 829e 	beq.w	810741e <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8106ee2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106ee6:	4cb2      	ldr	r4, [pc, #712]	@ (81071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106ee8:	42a0      	cmp	r0, r4
 8106eea:	f171 0100 	sbcs.w	r1, r1, #0
 8106eee:	f082 81e1 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106ef2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106ef6:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8106efa:	4321      	orrs	r1, r4
 8106efc:	f000 826d 	beq.w	81073da <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8106f00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106f04:	4cab      	ldr	r4, [pc, #684]	@ (81071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8106f06:	42a0      	cmp	r0, r4
 8106f08:	f171 0100 	sbcs.w	r1, r1, #0
 8106f0c:	f082 81d2 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106f10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106f14:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8106f18:	4321      	orrs	r1, r4
 8106f1a:	f001 800d 	beq.w	8107f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8106f1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106f22:	4ca5      	ldr	r4, [pc, #660]	@ (81071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8106f24:	42a0      	cmp	r0, r4
 8106f26:	f171 0100 	sbcs.w	r1, r1, #0
 8106f2a:	f082 81c3 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106f2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106f32:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8106f36:	4321      	orrs	r1, r4
 8106f38:	f000 81d0 	beq.w	81072dc <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8106f3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106f40:	4c9e      	ldr	r4, [pc, #632]	@ (81071bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8106f42:	42a0      	cmp	r0, r4
 8106f44:	f171 0100 	sbcs.w	r1, r1, #0
 8106f48:	f082 81b4 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106f4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106f50:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8106f54:	4321      	orrs	r1, r4
 8106f56:	f000 8142 	beq.w	81071de <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8106f5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106f5e:	4c98      	ldr	r4, [pc, #608]	@ (81071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8106f60:	42a0      	cmp	r0, r4
 8106f62:	f171 0100 	sbcs.w	r1, r1, #0
 8106f66:	f082 81a5 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106f6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106f6e:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8106f72:	4321      	orrs	r1, r4
 8106f74:	f001 824e 	beq.w	8108414 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8106f78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106f7c:	4c91      	ldr	r4, [pc, #580]	@ (81071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8106f7e:	42a0      	cmp	r0, r4
 8106f80:	f171 0100 	sbcs.w	r1, r1, #0
 8106f84:	f082 8196 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106f88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106f8c:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8106f90:	4321      	orrs	r1, r4
 8106f92:	f001 8197 	beq.w	81082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8106f96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106f9a:	4c8b      	ldr	r4, [pc, #556]	@ (81071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8106f9c:	42a0      	cmp	r0, r4
 8106f9e:	f171 0100 	sbcs.w	r1, r1, #0
 8106fa2:	f082 8187 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106fa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106faa:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8106fae:	4321      	orrs	r1, r4
 8106fb0:	f001 8154 	beq.w	810825c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8106fb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106fb8:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8106fbc:	f171 0100 	sbcs.w	r1, r1, #0
 8106fc0:	f082 8178 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106fc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106fc8:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8106fcc:	4321      	orrs	r1, r4
 8106fce:	f001 80b7 	beq.w	8108140 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8106fd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106fd6:	f248 0401 	movw	r4, #32769	@ 0x8001
 8106fda:	42a0      	cmp	r0, r4
 8106fdc:	f171 0100 	sbcs.w	r1, r1, #0
 8106fe0:	f082 8168 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8106fe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106fe8:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8106fec:	4321      	orrs	r1, r4
 8106fee:	f001 8064 	beq.w	81080ba <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8106ff2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8106ff6:	f244 0401 	movw	r4, #16385	@ 0x4001
 8106ffa:	42a0      	cmp	r0, r4
 8106ffc:	f171 0100 	sbcs.w	r1, r1, #0
 8107000:	f082 8158 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8107004:	e9d7 0100 	ldrd	r0, r1, [r7]
 8107008:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 810700c:	4321      	orrs	r1, r4
 810700e:	f001 8011 	beq.w	8108034 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8107012:	e9d7 0100 	ldrd	r0, r1, [r7]
 8107016:	f242 0401 	movw	r4, #8193	@ 0x2001
 810701a:	42a0      	cmp	r0, r4
 810701c:	f171 0100 	sbcs.w	r1, r1, #0
 8107020:	f082 8148 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8107024:	e9d7 0100 	ldrd	r0, r1, [r7]
 8107028:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 810702c:	4321      	orrs	r1, r4
 810702e:	f000 871e 	beq.w	8107e6e <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8107032:	e9d7 0100 	ldrd	r0, r1, [r7]
 8107036:	f241 0401 	movw	r4, #4097	@ 0x1001
 810703a:	42a0      	cmp	r0, r4
 810703c:	f171 0100 	sbcs.w	r1, r1, #0
 8107040:	f082 8138 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8107044:	e9d7 0100 	ldrd	r0, r1, [r7]
 8107048:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 810704c:	4321      	orrs	r1, r4
 810704e:	f000 86a8 	beq.w	8107da2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8107052:	e9d7 0100 	ldrd	r0, r1, [r7]
 8107056:	f640 0401 	movw	r4, #2049	@ 0x801
 810705a:	42a0      	cmp	r0, r4
 810705c:	f171 0100 	sbcs.w	r1, r1, #0
 8107060:	f082 8128 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8107064:	e9d7 0100 	ldrd	r0, r1, [r7]
 8107068:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 810706c:	4321      	orrs	r1, r4
 810706e:	f000 8632 	beq.w	8107cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8107072:	e9d7 0100 	ldrd	r0, r1, [r7]
 8107076:	f240 4401 	movw	r4, #1025	@ 0x401
 810707a:	42a0      	cmp	r0, r4
 810707c:	f171 0100 	sbcs.w	r1, r1, #0
 8107080:	f082 8118 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8107084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8107088:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 810708c:	4321      	orrs	r1, r4
 810708e:	f000 85b0 	beq.w	8107bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8107092:	e9d7 0100 	ldrd	r0, r1, [r7]
 8107096:	f240 2401 	movw	r4, #513	@ 0x201
 810709a:	42a0      	cmp	r0, r4
 810709c:	f171 0100 	sbcs.w	r1, r1, #0
 81070a0:	f082 8108 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 81070a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 81070a8:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 81070ac:	4321      	orrs	r1, r4
 81070ae:	f000 8535 	beq.w	8107b1c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 81070b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 81070b6:	f240 1401 	movw	r4, #257	@ 0x101
 81070ba:	42a0      	cmp	r0, r4
 81070bc:	f171 0100 	sbcs.w	r1, r1, #0
 81070c0:	f082 80f8 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 81070c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 81070c8:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 81070cc:	4321      	orrs	r1, r4
 81070ce:	f000 84ba 	beq.w	8107a46 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 81070d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 81070d6:	2881      	cmp	r0, #129	@ 0x81
 81070d8:	f171 0100 	sbcs.w	r1, r1, #0
 81070dc:	f082 80ea 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 81070e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 81070e4:	2821      	cmp	r0, #33	@ 0x21
 81070e6:	f171 0100 	sbcs.w	r1, r1, #0
 81070ea:	d26f      	bcs.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 81070ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 81070f0:	4301      	orrs	r1, r0
 81070f2:	f002 80df 	beq.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 81070f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 81070fa:	1e42      	subs	r2, r0, #1
 81070fc:	f141 33ff 	adc.w	r3, r1, #4294967295
 8107100:	2a20      	cmp	r2, #32
 8107102:	f173 0100 	sbcs.w	r1, r3, #0
 8107106:	f082 80d5 	bcs.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 810710a:	2a1f      	cmp	r2, #31
 810710c:	f202 80d2 	bhi.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8107110:	a101      	add	r1, pc, #4	@ (adr r1, 8107118 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8107112:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8107116:	bf00      	nop
 8107118:	08107479 	.word	0x08107479
 810711c:	08107545 	.word	0x08107545
 8107120:	081092b5 	.word	0x081092b5
 8107124:	08107605 	.word	0x08107605
 8107128:	081092b5 	.word	0x081092b5
 810712c:	081092b5 	.word	0x081092b5
 8107130:	081092b5 	.word	0x081092b5
 8107134:	081076d5 	.word	0x081076d5
 8107138:	081092b5 	.word	0x081092b5
 810713c:	081092b5 	.word	0x081092b5
 8107140:	081092b5 	.word	0x081092b5
 8107144:	081092b5 	.word	0x081092b5
 8107148:	081092b5 	.word	0x081092b5
 810714c:	081092b5 	.word	0x081092b5
 8107150:	081092b5 	.word	0x081092b5
 8107154:	081077b7 	.word	0x081077b7
 8107158:	081092b5 	.word	0x081092b5
 810715c:	081092b5 	.word	0x081092b5
 8107160:	081092b5 	.word	0x081092b5
 8107164:	081092b5 	.word	0x081092b5
 8107168:	081092b5 	.word	0x081092b5
 810716c:	081092b5 	.word	0x081092b5
 8107170:	081092b5 	.word	0x081092b5
 8107174:	081092b5 	.word	0x081092b5
 8107178:	081092b5 	.word	0x081092b5
 810717c:	081092b5 	.word	0x081092b5
 8107180:	081092b5 	.word	0x081092b5
 8107184:	081092b5 	.word	0x081092b5
 8107188:	081092b5 	.word	0x081092b5
 810718c:	081092b5 	.word	0x081092b5
 8107190:	081092b5 	.word	0x081092b5
 8107194:	0810788d 	.word	0x0810788d
 8107198:	80000001 	.word	0x80000001
 810719c:	40000001 	.word	0x40000001
 81071a0:	20000001 	.word	0x20000001
 81071a4:	10000001 	.word	0x10000001
 81071a8:	08000001 	.word	0x08000001
 81071ac:	04000001 	.word	0x04000001
 81071b0:	00800001 	.word	0x00800001
 81071b4:	00400001 	.word	0x00400001
 81071b8:	00200001 	.word	0x00200001
 81071bc:	00100001 	.word	0x00100001
 81071c0:	00080001 	.word	0x00080001
 81071c4:	00040001 	.word	0x00040001
 81071c8:	00020001 	.word	0x00020001
 81071cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 81071d0:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 81071d4:	430b      	orrs	r3, r1
 81071d6:	f000 83c4 	beq.w	8107962 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 81071da:	f002 b86b 	b.w	81092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 81071de:	4ba1      	ldr	r3, [pc, #644]	@ (8107464 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 81071e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81071e4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 81071e8:	633b      	str	r3, [r7, #48]	@ 0x30
 81071ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81071f0:	d036      	beq.n	8107260 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 81071f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81071f8:	d86b      	bhi.n	81072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 81071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8107200:	d02b      	beq.n	810725a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8107202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107204:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8107208:	d863      	bhi.n	81072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 810720a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810720c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107210:	d01b      	beq.n	810724a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8107212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107214:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107218:	d85b      	bhi.n	81072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 810721a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810721c:	2b00      	cmp	r3, #0
 810721e:	d004      	beq.n	810722a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8107220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107226:	d008      	beq.n	810723a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8107228:	e053      	b.n	81072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810722a:	f107 0320 	add.w	r3, r7, #32
 810722e:	4618      	mov	r0, r3
 8107230:	f7ff f8ba 	bl	81063a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8107234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107236:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8107238:	e04e      	b.n	81072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810723a:	f107 0314 	add.w	r3, r7, #20
 810723e:	4618      	mov	r0, r3
 8107240:	f7ff fa1c 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8107244:	697b      	ldr	r3, [r7, #20]
 8107246:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8107248:	e046      	b.n	81072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810724a:	f107 0308 	add.w	r3, r7, #8
 810724e:	4618      	mov	r0, r3
 8107250:	f7ff fb7e 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8107254:	68bb      	ldr	r3, [r7, #8]
 8107256:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8107258:	e03e      	b.n	81072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 810725a:	4b83      	ldr	r3, [pc, #524]	@ (8107468 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 810725c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 810725e:	e03b      	b.n	81072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107260:	4b80      	ldr	r3, [pc, #512]	@ (8107464 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8107262:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8107266:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 810726a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810726c:	4b7d      	ldr	r3, [pc, #500]	@ (8107464 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 810726e:	681b      	ldr	r3, [r3, #0]
 8107270:	f003 0302 	and.w	r3, r3, #2
 8107274:	2b02      	cmp	r3, #2
 8107276:	d10c      	bne.n	8107292 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8107278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810727a:	2b00      	cmp	r3, #0
 810727c:	d109      	bne.n	8107292 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 810727e:	4b79      	ldr	r3, [pc, #484]	@ (8107464 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8107280:	681b      	ldr	r3, [r3, #0]
 8107282:	08db      	lsrs	r3, r3, #3
 8107284:	f003 0303 	and.w	r3, r3, #3
 8107288:	4a78      	ldr	r2, [pc, #480]	@ (810746c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 810728a:	fa22 f303 	lsr.w	r3, r2, r3
 810728e:	637b      	str	r3, [r7, #52]	@ 0x34
 8107290:	e01e      	b.n	81072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107292:	4b74      	ldr	r3, [pc, #464]	@ (8107464 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8107294:	681b      	ldr	r3, [r3, #0]
 8107296:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810729a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810729e:	d106      	bne.n	81072ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81072a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81072a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81072a6:	d102      	bne.n	81072ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 81072a8:	4b71      	ldr	r3, [pc, #452]	@ (8107470 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 81072aa:	637b      	str	r3, [r7, #52]	@ 0x34
 81072ac:	e010      	b.n	81072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81072ae:	4b6d      	ldr	r3, [pc, #436]	@ (8107464 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 81072b0:	681b      	ldr	r3, [r3, #0]
 81072b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81072b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81072ba:	d106      	bne.n	81072ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 81072bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81072be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 81072c2:	d102      	bne.n	81072ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 81072c4:	4b6b      	ldr	r3, [pc, #428]	@ (8107474 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 81072c6:	637b      	str	r3, [r7, #52]	@ 0x34
 81072c8:	e002      	b.n	81072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 81072ca:	2300      	movs	r3, #0
 81072cc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 81072ce:	e003      	b.n	81072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 81072d0:	e002      	b.n	81072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 81072d2:	2300      	movs	r3, #0
 81072d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 81072d6:	bf00      	nop
          }
        }
        break;
 81072d8:	f001 bfef 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 81072dc:	4b61      	ldr	r3, [pc, #388]	@ (8107464 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 81072de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81072e2:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 81072e6:	633b      	str	r3, [r7, #48]	@ 0x30
 81072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81072ee:	d036      	beq.n	810735e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 81072f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81072f6:	d86b      	bhi.n	81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 81072f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072fa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 81072fe:	d02b      	beq.n	8107358 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8107300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107302:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8107306:	d863      	bhi.n	81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8107308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810730a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810730e:	d01b      	beq.n	8107348 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8107310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107316:	d85b      	bhi.n	81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8107318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810731a:	2b00      	cmp	r3, #0
 810731c:	d004      	beq.n	8107328 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 810731e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107320:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8107324:	d008      	beq.n	8107338 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8107326:	e053      	b.n	81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107328:	f107 0320 	add.w	r3, r7, #32
 810732c:	4618      	mov	r0, r3
 810732e:	f7ff f83b 	bl	81063a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8107332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107334:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8107336:	e04e      	b.n	81073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107338:	f107 0314 	add.w	r3, r7, #20
 810733c:	4618      	mov	r0, r3
 810733e:	f7ff f99d 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8107342:	697b      	ldr	r3, [r7, #20]
 8107344:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8107346:	e046      	b.n	81073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107348:	f107 0308 	add.w	r3, r7, #8
 810734c:	4618      	mov	r0, r3
 810734e:	f7ff faff 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8107352:	68bb      	ldr	r3, [r7, #8]
 8107354:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8107356:	e03e      	b.n	81073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8107358:	4b43      	ldr	r3, [pc, #268]	@ (8107468 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 810735a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 810735c:	e03b      	b.n	81073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810735e:	4b41      	ldr	r3, [pc, #260]	@ (8107464 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8107360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8107364:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8107368:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810736a:	4b3e      	ldr	r3, [pc, #248]	@ (8107464 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 810736c:	681b      	ldr	r3, [r3, #0]
 810736e:	f003 0302 	and.w	r3, r3, #2
 8107372:	2b02      	cmp	r3, #2
 8107374:	d10c      	bne.n	8107390 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8107376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107378:	2b00      	cmp	r3, #0
 810737a:	d109      	bne.n	8107390 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 810737c:	4b39      	ldr	r3, [pc, #228]	@ (8107464 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 810737e:	681b      	ldr	r3, [r3, #0]
 8107380:	08db      	lsrs	r3, r3, #3
 8107382:	f003 0303 	and.w	r3, r3, #3
 8107386:	4a39      	ldr	r2, [pc, #228]	@ (810746c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8107388:	fa22 f303 	lsr.w	r3, r2, r3
 810738c:	637b      	str	r3, [r7, #52]	@ 0x34
 810738e:	e01e      	b.n	81073ce <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107390:	4b34      	ldr	r3, [pc, #208]	@ (8107464 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8107392:	681b      	ldr	r3, [r3, #0]
 8107394:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8107398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810739c:	d106      	bne.n	81073ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 810739e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81073a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81073a4:	d102      	bne.n	81073ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 81073a6:	4b32      	ldr	r3, [pc, #200]	@ (8107470 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 81073a8:	637b      	str	r3, [r7, #52]	@ 0x34
 81073aa:	e010      	b.n	81073ce <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81073ac:	4b2d      	ldr	r3, [pc, #180]	@ (8107464 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 81073ae:	681b      	ldr	r3, [r3, #0]
 81073b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81073b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81073b8:	d106      	bne.n	81073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 81073ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81073bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 81073c0:	d102      	bne.n	81073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 81073c2:	4b2c      	ldr	r3, [pc, #176]	@ (8107474 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 81073c4:	637b      	str	r3, [r7, #52]	@ 0x34
 81073c6:	e002      	b.n	81073ce <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 81073c8:	2300      	movs	r3, #0
 81073ca:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 81073cc:	e003      	b.n	81073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 81073ce:	e002      	b.n	81073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 81073d0:	2300      	movs	r3, #0
 81073d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 81073d4:	bf00      	nop
          }
        }
        break;
 81073d6:	f001 bf70 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 81073da:	4b22      	ldr	r3, [pc, #136]	@ (8107464 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 81073dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 81073e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81073e4:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 81073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81073e8:	2b00      	cmp	r3, #0
 81073ea:	d108      	bne.n	81073fe <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81073ec:	f107 0320 	add.w	r3, r7, #32
 81073f0:	4618      	mov	r0, r3
 81073f2:	f7fe ffd9 	bl	81063a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81073f8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 81073fa:	f001 bf5e 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 81073fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107400:	2b40      	cmp	r3, #64	@ 0x40
 8107402:	d108      	bne.n	8107416 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107404:	f107 0314 	add.w	r3, r7, #20
 8107408:	4618      	mov	r0, r3
 810740a:	f7ff f937 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810740e:	69fb      	ldr	r3, [r7, #28]
 8107410:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8107412:	f001 bf52 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8107416:	2300      	movs	r3, #0
 8107418:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 810741a:	f001 bf4e 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 810741e:	4b11      	ldr	r3, [pc, #68]	@ (8107464 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8107420:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8107424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8107428:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 810742a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810742c:	2b00      	cmp	r3, #0
 810742e:	d108      	bne.n	8107442 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107430:	f107 0320 	add.w	r3, r7, #32
 8107434:	4618      	mov	r0, r3
 8107436:	f7fe ffb7 	bl	81063a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810743c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 810743e:	f001 bf3c 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8107442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107444:	2b80      	cmp	r3, #128	@ 0x80
 8107446:	d108      	bne.n	810745a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107448:	f107 0314 	add.w	r3, r7, #20
 810744c:	4618      	mov	r0, r3
 810744e:	f7ff f915 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8107452:	69fb      	ldr	r3, [r7, #28]
 8107454:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8107456:	f001 bf30 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 810745a:	2300      	movs	r3, #0
 810745c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 810745e:	f001 bf2c 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8107462:	bf00      	nop
 8107464:	44020c00 	.word	0x44020c00
 8107468:	00bb8000 	.word	0x00bb8000
 810746c:	03d09000 	.word	0x03d09000
 8107470:	003d0900 	.word	0x003d0900
 8107474:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8107478:	4b9d      	ldr	r3, [pc, #628]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 810747a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810747e:	f003 0307 	and.w	r3, r3, #7
 8107482:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8107484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107486:	2b00      	cmp	r3, #0
 8107488:	d104      	bne.n	8107494 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 810748a:	f7fc ff9f 	bl	81043cc <HAL_RCC_GetPCLK2Freq>
 810748e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8107490:	f001 bf13 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8107494:	4b96      	ldr	r3, [pc, #600]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8107496:	681b      	ldr	r3, [r3, #0]
 8107498:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810749c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81074a0:	d10a      	bne.n	81074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 81074a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81074a4:	2b01      	cmp	r3, #1
 81074a6:	d107      	bne.n	81074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81074a8:	f107 0314 	add.w	r3, r7, #20
 81074ac:	4618      	mov	r0, r3
 81074ae:	f7ff f8e5 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81074b2:	69bb      	ldr	r3, [r7, #24]
 81074b4:	637b      	str	r3, [r7, #52]	@ 0x34
 81074b6:	e043      	b.n	8107540 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 81074b8:	4b8d      	ldr	r3, [pc, #564]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 81074ba:	681b      	ldr	r3, [r3, #0]
 81074bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81074c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81074c4:	d10a      	bne.n	81074dc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 81074c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81074c8:	2b02      	cmp	r3, #2
 81074ca:	d107      	bne.n	81074dc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81074cc:	f107 0308 	add.w	r3, r7, #8
 81074d0:	4618      	mov	r0, r3
 81074d2:	f7ff fa3d 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81074d6:	68fb      	ldr	r3, [r7, #12]
 81074d8:	637b      	str	r3, [r7, #52]	@ 0x34
 81074da:	e031      	b.n	8107540 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 81074dc:	4b84      	ldr	r3, [pc, #528]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 81074de:	681b      	ldr	r3, [r3, #0]
 81074e0:	f003 0302 	and.w	r3, r3, #2
 81074e4:	2b02      	cmp	r3, #2
 81074e6:	d10c      	bne.n	8107502 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 81074e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81074ea:	2b03      	cmp	r3, #3
 81074ec:	d109      	bne.n	8107502 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 81074ee:	4b80      	ldr	r3, [pc, #512]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 81074f0:	681b      	ldr	r3, [r3, #0]
 81074f2:	08db      	lsrs	r3, r3, #3
 81074f4:	f003 0303 	and.w	r3, r3, #3
 81074f8:	4a7e      	ldr	r2, [pc, #504]	@ (81076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 81074fa:	fa22 f303 	lsr.w	r3, r2, r3
 81074fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8107500:	e01e      	b.n	8107540 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8107502:	4b7b      	ldr	r3, [pc, #492]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8107504:	681b      	ldr	r3, [r3, #0]
 8107506:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810750a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810750e:	d105      	bne.n	810751c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8107510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107512:	2b04      	cmp	r3, #4
 8107514:	d102      	bne.n	810751c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8107516:	4b78      	ldr	r3, [pc, #480]	@ (81076f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8107518:	637b      	str	r3, [r7, #52]	@ 0x34
 810751a:	e011      	b.n	8107540 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 810751c:	4b74      	ldr	r3, [pc, #464]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 810751e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8107522:	f003 0302 	and.w	r3, r3, #2
 8107526:	2b02      	cmp	r3, #2
 8107528:	d106      	bne.n	8107538 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 810752a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810752c:	2b05      	cmp	r3, #5
 810752e:	d103      	bne.n	8107538 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8107530:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8107534:	637b      	str	r3, [r7, #52]	@ 0x34
 8107536:	e003      	b.n	8107540 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8107538:	2300      	movs	r3, #0
 810753a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 810753c:	f001 bebd 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8107540:	f001 bebb 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8107544:	4b6a      	ldr	r3, [pc, #424]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8107546:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810754a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810754e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8107550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107552:	2b00      	cmp	r3, #0
 8107554:	d104      	bne.n	8107560 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8107556:	f7fc ff23 	bl	81043a0 <HAL_RCC_GetPCLK1Freq>
 810755a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 810755c:	f001 bead 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8107560:	4b63      	ldr	r3, [pc, #396]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8107562:	681b      	ldr	r3, [r3, #0]
 8107564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107568:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810756c:	d10a      	bne.n	8107584 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 810756e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107570:	2b08      	cmp	r3, #8
 8107572:	d107      	bne.n	8107584 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107574:	f107 0314 	add.w	r3, r7, #20
 8107578:	4618      	mov	r0, r3
 810757a:	f7ff f87f 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810757e:	69bb      	ldr	r3, [r7, #24]
 8107580:	637b      	str	r3, [r7, #52]	@ 0x34
 8107582:	e03d      	b.n	8107600 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8107584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107586:	2b10      	cmp	r3, #16
 8107588:	d108      	bne.n	810759c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810758a:	f107 0308 	add.w	r3, r7, #8
 810758e:	4618      	mov	r0, r3
 8107590:	f7ff f9de 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107594:	68fb      	ldr	r3, [r7, #12]
 8107596:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8107598:	f001 be8f 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 810759c:	4b54      	ldr	r3, [pc, #336]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 810759e:	681b      	ldr	r3, [r3, #0]
 81075a0:	f003 0302 	and.w	r3, r3, #2
 81075a4:	2b02      	cmp	r3, #2
 81075a6:	d10c      	bne.n	81075c2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 81075a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81075aa:	2b18      	cmp	r3, #24
 81075ac:	d109      	bne.n	81075c2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 81075ae:	4b50      	ldr	r3, [pc, #320]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 81075b0:	681b      	ldr	r3, [r3, #0]
 81075b2:	08db      	lsrs	r3, r3, #3
 81075b4:	f003 0303 	and.w	r3, r3, #3
 81075b8:	4a4e      	ldr	r2, [pc, #312]	@ (81076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 81075ba:	fa22 f303 	lsr.w	r3, r2, r3
 81075be:	637b      	str	r3, [r7, #52]	@ 0x34
 81075c0:	e01e      	b.n	8107600 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 81075c2:	4b4b      	ldr	r3, [pc, #300]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 81075c4:	681b      	ldr	r3, [r3, #0]
 81075c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81075ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81075ce:	d105      	bne.n	81075dc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 81075d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81075d2:	2b20      	cmp	r3, #32
 81075d4:	d102      	bne.n	81075dc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 81075d6:	4b48      	ldr	r3, [pc, #288]	@ (81076f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 81075d8:	637b      	str	r3, [r7, #52]	@ 0x34
 81075da:	e011      	b.n	8107600 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 81075dc:	4b44      	ldr	r3, [pc, #272]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 81075de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81075e2:	f003 0302 	and.w	r3, r3, #2
 81075e6:	2b02      	cmp	r3, #2
 81075e8:	d106      	bne.n	81075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 81075ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81075ec:	2b28      	cmp	r3, #40	@ 0x28
 81075ee:	d103      	bne.n	81075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 81075f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81075f4:	637b      	str	r3, [r7, #52]	@ 0x34
 81075f6:	e003      	b.n	8107600 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 81075f8:	2300      	movs	r3, #0
 81075fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 81075fc:	f001 be5d 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8107600:	f001 be5b 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8107604:	4b3a      	ldr	r3, [pc, #232]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8107606:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810760a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 810760e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8107610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107612:	2b00      	cmp	r3, #0
 8107614:	d104      	bne.n	8107620 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8107616:	f7fc fec3 	bl	81043a0 <HAL_RCC_GetPCLK1Freq>
 810761a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 810761c:	f001 be4d 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8107620:	4b33      	ldr	r3, [pc, #204]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8107622:	681b      	ldr	r3, [r3, #0]
 8107624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107628:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810762c:	d10a      	bne.n	8107644 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 810762e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107630:	2b40      	cmp	r3, #64	@ 0x40
 8107632:	d107      	bne.n	8107644 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107634:	f107 0314 	add.w	r3, r7, #20
 8107638:	4618      	mov	r0, r3
 810763a:	f7ff f81f 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810763e:	69bb      	ldr	r3, [r7, #24]
 8107640:	637b      	str	r3, [r7, #52]	@ 0x34
 8107642:	e045      	b.n	81076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8107644:	4b2a      	ldr	r3, [pc, #168]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8107646:	681b      	ldr	r3, [r3, #0]
 8107648:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810764c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107650:	d10a      	bne.n	8107668 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8107652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107654:	2b80      	cmp	r3, #128	@ 0x80
 8107656:	d107      	bne.n	8107668 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107658:	f107 0308 	add.w	r3, r7, #8
 810765c:	4618      	mov	r0, r3
 810765e:	f7ff f977 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107662:	68fb      	ldr	r3, [r7, #12]
 8107664:	637b      	str	r3, [r7, #52]	@ 0x34
 8107666:	e033      	b.n	81076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8107668:	4b21      	ldr	r3, [pc, #132]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 810766a:	681b      	ldr	r3, [r3, #0]
 810766c:	f003 0302 	and.w	r3, r3, #2
 8107670:	2b02      	cmp	r3, #2
 8107672:	d10c      	bne.n	810768e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8107674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107676:	2bc0      	cmp	r3, #192	@ 0xc0
 8107678:	d109      	bne.n	810768e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 810767a:	4b1d      	ldr	r3, [pc, #116]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 810767c:	681b      	ldr	r3, [r3, #0]
 810767e:	08db      	lsrs	r3, r3, #3
 8107680:	f003 0303 	and.w	r3, r3, #3
 8107684:	4a1b      	ldr	r2, [pc, #108]	@ (81076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8107686:	fa22 f303 	lsr.w	r3, r2, r3
 810768a:	637b      	str	r3, [r7, #52]	@ 0x34
 810768c:	e020      	b.n	81076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 810768e:	4b18      	ldr	r3, [pc, #96]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8107690:	681b      	ldr	r3, [r3, #0]
 8107692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8107696:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810769a:	d106      	bne.n	81076aa <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 810769c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810769e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81076a2:	d102      	bne.n	81076aa <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 81076a4:	4b14      	ldr	r3, [pc, #80]	@ (81076f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 81076a6:	637b      	str	r3, [r7, #52]	@ 0x34
 81076a8:	e012      	b.n	81076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 81076aa:	4b11      	ldr	r3, [pc, #68]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 81076ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81076b0:	f003 0302 	and.w	r3, r3, #2
 81076b4:	2b02      	cmp	r3, #2
 81076b6:	d107      	bne.n	81076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 81076b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81076ba:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 81076be:	d103      	bne.n	81076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 81076c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81076c4:	637b      	str	r3, [r7, #52]	@ 0x34
 81076c6:	e003      	b.n	81076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 81076c8:	2300      	movs	r3, #0
 81076ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 81076cc:	f001 bdf5 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 81076d0:	f001 bdf3 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 81076d4:	4b06      	ldr	r3, [pc, #24]	@ (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 81076d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81076da:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 81076de:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 81076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81076e2:	2b00      	cmp	r3, #0
 81076e4:	d10a      	bne.n	81076fc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 81076e6:	f7fc fe5b 	bl	81043a0 <HAL_RCC_GetPCLK1Freq>
 81076ea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 81076ec:	f001 bde5 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 81076f0:	44020c00 	.word	0x44020c00
 81076f4:	03d09000 	.word	0x03d09000
 81076f8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 81076fc:	4ba0      	ldr	r3, [pc, #640]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 81076fe:	681b      	ldr	r3, [r3, #0]
 8107700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107704:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107708:	d10b      	bne.n	8107722 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 810770a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810770c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107710:	d107      	bne.n	8107722 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107712:	f107 0314 	add.w	r3, r7, #20
 8107716:	4618      	mov	r0, r3
 8107718:	f7fe ffb0 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810771c:	69bb      	ldr	r3, [r7, #24]
 810771e:	637b      	str	r3, [r7, #52]	@ 0x34
 8107720:	e047      	b.n	81077b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8107722:	4b97      	ldr	r3, [pc, #604]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8107724:	681b      	ldr	r3, [r3, #0]
 8107726:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810772a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810772e:	d10b      	bne.n	8107748 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8107730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8107736:	d107      	bne.n	8107748 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107738:	f107 0308 	add.w	r3, r7, #8
 810773c:	4618      	mov	r0, r3
 810773e:	f7ff f907 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107742:	68fb      	ldr	r3, [r7, #12]
 8107744:	637b      	str	r3, [r7, #52]	@ 0x34
 8107746:	e034      	b.n	81077b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8107748:	4b8d      	ldr	r3, [pc, #564]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 810774a:	681b      	ldr	r3, [r3, #0]
 810774c:	f003 0302 	and.w	r3, r3, #2
 8107750:	2b02      	cmp	r3, #2
 8107752:	d10d      	bne.n	8107770 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8107754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107756:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 810775a:	d109      	bne.n	8107770 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 810775c:	4b88      	ldr	r3, [pc, #544]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 810775e:	681b      	ldr	r3, [r3, #0]
 8107760:	08db      	lsrs	r3, r3, #3
 8107762:	f003 0303 	and.w	r3, r3, #3
 8107766:	4a87      	ldr	r2, [pc, #540]	@ (8107984 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8107768:	fa22 f303 	lsr.w	r3, r2, r3
 810776c:	637b      	str	r3, [r7, #52]	@ 0x34
 810776e:	e020      	b.n	81077b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8107770:	4b83      	ldr	r3, [pc, #524]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8107772:	681b      	ldr	r3, [r3, #0]
 8107774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8107778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810777c:	d106      	bne.n	810778c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 810777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107780:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107784:	d102      	bne.n	810778c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8107786:	4b80      	ldr	r3, [pc, #512]	@ (8107988 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8107788:	637b      	str	r3, [r7, #52]	@ 0x34
 810778a:	e012      	b.n	81077b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 810778c:	4b7c      	ldr	r3, [pc, #496]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 810778e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8107792:	f003 0302 	and.w	r3, r3, #2
 8107796:	2b02      	cmp	r3, #2
 8107798:	d107      	bne.n	81077aa <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 810779a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810779c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 81077a0:	d103      	bne.n	81077aa <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 81077a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81077a6:	637b      	str	r3, [r7, #52]	@ 0x34
 81077a8:	e003      	b.n	81077b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 81077aa:	2300      	movs	r3, #0
 81077ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 81077ae:	f001 bd84 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 81077b2:	f001 bd82 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 81077b6:	4b72      	ldr	r3, [pc, #456]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 81077b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81077bc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 81077c0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 81077c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81077c4:	2b00      	cmp	r3, #0
 81077c6:	d104      	bne.n	81077d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 81077c8:	f7fc fdea 	bl	81043a0 <HAL_RCC_GetPCLK1Freq>
 81077cc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 81077ce:	f001 bd74 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 81077d2:	4b6b      	ldr	r3, [pc, #428]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 81077d4:	681b      	ldr	r3, [r3, #0]
 81077d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81077da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81077de:	d10b      	bne.n	81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 81077e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81077e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81077e6:	d107      	bne.n	81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81077e8:	f107 0314 	add.w	r3, r7, #20
 81077ec:	4618      	mov	r0, r3
 81077ee:	f7fe ff45 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81077f2:	69bb      	ldr	r3, [r7, #24]
 81077f4:	637b      	str	r3, [r7, #52]	@ 0x34
 81077f6:	e047      	b.n	8107888 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 81077f8:	4b61      	ldr	r3, [pc, #388]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 81077fa:	681b      	ldr	r3, [r3, #0]
 81077fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107804:	d10b      	bne.n	810781e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8107806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107808:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810780c:	d107      	bne.n	810781e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810780e:	f107 0308 	add.w	r3, r7, #8
 8107812:	4618      	mov	r0, r3
 8107814:	f7ff f89c 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107818:	68fb      	ldr	r3, [r7, #12]
 810781a:	637b      	str	r3, [r7, #52]	@ 0x34
 810781c:	e034      	b.n	8107888 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 810781e:	4b58      	ldr	r3, [pc, #352]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8107820:	681b      	ldr	r3, [r3, #0]
 8107822:	f003 0302 	and.w	r3, r3, #2
 8107826:	2b02      	cmp	r3, #2
 8107828:	d10d      	bne.n	8107846 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 810782a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810782c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8107830:	d109      	bne.n	8107846 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8107832:	4b53      	ldr	r3, [pc, #332]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8107834:	681b      	ldr	r3, [r3, #0]
 8107836:	08db      	lsrs	r3, r3, #3
 8107838:	f003 0303 	and.w	r3, r3, #3
 810783c:	4a51      	ldr	r2, [pc, #324]	@ (8107984 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 810783e:	fa22 f303 	lsr.w	r3, r2, r3
 8107842:	637b      	str	r3, [r7, #52]	@ 0x34
 8107844:	e020      	b.n	8107888 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8107846:	4b4e      	ldr	r3, [pc, #312]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8107848:	681b      	ldr	r3, [r3, #0]
 810784a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810784e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107852:	d106      	bne.n	8107862 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8107854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107856:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810785a:	d102      	bne.n	8107862 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 810785c:	4b4a      	ldr	r3, [pc, #296]	@ (8107988 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 810785e:	637b      	str	r3, [r7, #52]	@ 0x34
 8107860:	e012      	b.n	8107888 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8107862:	4b47      	ldr	r3, [pc, #284]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8107864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8107868:	f003 0302 	and.w	r3, r3, #2
 810786c:	2b02      	cmp	r3, #2
 810786e:	d107      	bne.n	8107880 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8107870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107872:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8107876:	d103      	bne.n	8107880 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8107878:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810787c:	637b      	str	r3, [r7, #52]	@ 0x34
 810787e:	e003      	b.n	8107888 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8107880:	2300      	movs	r3, #0
 8107882:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8107884:	f001 bd19 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8107888:	f001 bd17 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 810788c:	4b3c      	ldr	r3, [pc, #240]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 810788e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8107892:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8107896:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8107898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810789a:	2b00      	cmp	r3, #0
 810789c:	d104      	bne.n	81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 810789e:	f7fc fd7f 	bl	81043a0 <HAL_RCC_GetPCLK1Freq>
 81078a2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 81078a4:	f001 bd09 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 81078a8:	4b35      	ldr	r3, [pc, #212]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 81078aa:	681b      	ldr	r3, [r3, #0]
 81078ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81078b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81078b4:	d10b      	bne.n	81078ce <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 81078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81078b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81078bc:	d107      	bne.n	81078ce <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81078be:	f107 0314 	add.w	r3, r7, #20
 81078c2:	4618      	mov	r0, r3
 81078c4:	f7fe feda 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81078c8:	69bb      	ldr	r3, [r7, #24]
 81078ca:	637b      	str	r3, [r7, #52]	@ 0x34
 81078cc:	e047      	b.n	810795e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 81078ce:	4b2c      	ldr	r3, [pc, #176]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 81078d0:	681b      	ldr	r3, [r3, #0]
 81078d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81078d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81078da:	d10b      	bne.n	81078f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 81078dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81078de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81078e2:	d107      	bne.n	81078f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81078e4:	f107 0308 	add.w	r3, r7, #8
 81078e8:	4618      	mov	r0, r3
 81078ea:	f7ff f831 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81078ee:	68fb      	ldr	r3, [r7, #12]
 81078f0:	637b      	str	r3, [r7, #52]	@ 0x34
 81078f2:	e034      	b.n	810795e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 81078f4:	4b22      	ldr	r3, [pc, #136]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 81078f6:	681b      	ldr	r3, [r3, #0]
 81078f8:	f003 0302 	and.w	r3, r3, #2
 81078fc:	2b02      	cmp	r3, #2
 81078fe:	d10d      	bne.n	810791c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8107900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107902:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8107906:	d109      	bne.n	810791c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8107908:	4b1d      	ldr	r3, [pc, #116]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 810790a:	681b      	ldr	r3, [r3, #0]
 810790c:	08db      	lsrs	r3, r3, #3
 810790e:	f003 0303 	and.w	r3, r3, #3
 8107912:	4a1c      	ldr	r2, [pc, #112]	@ (8107984 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8107914:	fa22 f303 	lsr.w	r3, r2, r3
 8107918:	637b      	str	r3, [r7, #52]	@ 0x34
 810791a:	e020      	b.n	810795e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 810791c:	4b18      	ldr	r3, [pc, #96]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 810791e:	681b      	ldr	r3, [r3, #0]
 8107920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8107924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107928:	d106      	bne.n	8107938 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 810792a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810792c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107930:	d102      	bne.n	8107938 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8107932:	4b15      	ldr	r3, [pc, #84]	@ (8107988 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8107934:	637b      	str	r3, [r7, #52]	@ 0x34
 8107936:	e012      	b.n	810795e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8107938:	4b11      	ldr	r3, [pc, #68]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 810793a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810793e:	f003 0302 	and.w	r3, r3, #2
 8107942:	2b02      	cmp	r3, #2
 8107944:	d107      	bne.n	8107956 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8107946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107948:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 810794c:	d103      	bne.n	8107956 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 810794e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8107952:	637b      	str	r3, [r7, #52]	@ 0x34
 8107954:	e003      	b.n	810795e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8107956:	2300      	movs	r3, #0
 8107958:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 810795a:	f001 bcae 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 810795e:	f001 bcac 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8107962:	4b07      	ldr	r3, [pc, #28]	@ (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8107964:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8107968:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 810796c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 810796e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107970:	2b00      	cmp	r3, #0
 8107972:	d10b      	bne.n	810798c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8107974:	f7fc fd14 	bl	81043a0 <HAL_RCC_GetPCLK1Freq>
 8107978:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 810797a:	f001 bc9e 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 810797e:	bf00      	nop
 8107980:	44020c00 	.word	0x44020c00
 8107984:	03d09000 	.word	0x03d09000
 8107988:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 810798c:	4ba0      	ldr	r3, [pc, #640]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 810798e:	681b      	ldr	r3, [r3, #0]
 8107990:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107994:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107998:	d10b      	bne.n	81079b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 810799a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810799c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81079a0:	d107      	bne.n	81079b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81079a2:	f107 0314 	add.w	r3, r7, #20
 81079a6:	4618      	mov	r0, r3
 81079a8:	f7fe fe68 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81079ac:	69bb      	ldr	r3, [r7, #24]
 81079ae:	637b      	str	r3, [r7, #52]	@ 0x34
 81079b0:	e047      	b.n	8107a42 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 81079b2:	4b97      	ldr	r3, [pc, #604]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 81079b4:	681b      	ldr	r3, [r3, #0]
 81079b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81079ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81079be:	d10b      	bne.n	81079d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 81079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81079c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 81079c6:	d107      	bne.n	81079d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81079c8:	f107 0308 	add.w	r3, r7, #8
 81079cc:	4618      	mov	r0, r3
 81079ce:	f7fe ffbf 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81079d2:	68fb      	ldr	r3, [r7, #12]
 81079d4:	637b      	str	r3, [r7, #52]	@ 0x34
 81079d6:	e034      	b.n	8107a42 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 81079d8:	4b8d      	ldr	r3, [pc, #564]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 81079da:	681b      	ldr	r3, [r3, #0]
 81079dc:	f003 0302 	and.w	r3, r3, #2
 81079e0:	2b02      	cmp	r3, #2
 81079e2:	d10d      	bne.n	8107a00 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 81079e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81079e6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 81079ea:	d109      	bne.n	8107a00 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 81079ec:	4b88      	ldr	r3, [pc, #544]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 81079ee:	681b      	ldr	r3, [r3, #0]
 81079f0:	08db      	lsrs	r3, r3, #3
 81079f2:	f003 0303 	and.w	r3, r3, #3
 81079f6:	4a87      	ldr	r2, [pc, #540]	@ (8107c14 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 81079f8:	fa22 f303 	lsr.w	r3, r2, r3
 81079fc:	637b      	str	r3, [r7, #52]	@ 0x34
 81079fe:	e020      	b.n	8107a42 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8107a00:	4b83      	ldr	r3, [pc, #524]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8107a02:	681b      	ldr	r3, [r3, #0]
 8107a04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8107a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107a0c:	d106      	bne.n	8107a1c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8107a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107a10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107a14:	d102      	bne.n	8107a1c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8107a16:	4b80      	ldr	r3, [pc, #512]	@ (8107c18 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8107a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8107a1a:	e012      	b.n	8107a42 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8107a1c:	4b7c      	ldr	r3, [pc, #496]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8107a1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8107a22:	f003 0302 	and.w	r3, r3, #2
 8107a26:	2b02      	cmp	r3, #2
 8107a28:	d107      	bne.n	8107a3a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8107a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107a2c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8107a30:	d103      	bne.n	8107a3a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8107a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8107a36:	637b      	str	r3, [r7, #52]	@ 0x34
 8107a38:	e003      	b.n	8107a42 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8107a3a:	2300      	movs	r3, #0
 8107a3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8107a3e:	f001 bc3c 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8107a42:	f001 bc3a 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8107a46:	4b72      	ldr	r3, [pc, #456]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8107a48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8107a4c:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8107a50:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8107a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107a54:	2b00      	cmp	r3, #0
 8107a56:	d104      	bne.n	8107a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8107a58:	f7fc fca2 	bl	81043a0 <HAL_RCC_GetPCLK1Freq>
 8107a5c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8107a5e:	f001 bc2c 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8107a62:	4b6b      	ldr	r3, [pc, #428]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8107a64:	681b      	ldr	r3, [r3, #0]
 8107a66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107a6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107a6e:	d10b      	bne.n	8107a88 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8107a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107a72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107a76:	d107      	bne.n	8107a88 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107a78:	f107 0314 	add.w	r3, r7, #20
 8107a7c:	4618      	mov	r0, r3
 8107a7e:	f7fe fdfd 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107a82:	69bb      	ldr	r3, [r7, #24]
 8107a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8107a86:	e047      	b.n	8107b18 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8107a88:	4b61      	ldr	r3, [pc, #388]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8107a8a:	681b      	ldr	r3, [r3, #0]
 8107a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107a94:	d10b      	bne.n	8107aae <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8107a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107a98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107a9c:	d107      	bne.n	8107aae <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107a9e:	f107 0308 	add.w	r3, r7, #8
 8107aa2:	4618      	mov	r0, r3
 8107aa4:	f7fe ff54 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107aa8:	68fb      	ldr	r3, [r7, #12]
 8107aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8107aac:	e034      	b.n	8107b18 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8107aae:	4b58      	ldr	r3, [pc, #352]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8107ab0:	681b      	ldr	r3, [r3, #0]
 8107ab2:	f003 0302 	and.w	r3, r3, #2
 8107ab6:	2b02      	cmp	r3, #2
 8107ab8:	d10d      	bne.n	8107ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8107aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107abc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107ac0:	d109      	bne.n	8107ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8107ac2:	4b53      	ldr	r3, [pc, #332]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8107ac4:	681b      	ldr	r3, [r3, #0]
 8107ac6:	08db      	lsrs	r3, r3, #3
 8107ac8:	f003 0303 	and.w	r3, r3, #3
 8107acc:	4a51      	ldr	r2, [pc, #324]	@ (8107c14 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8107ace:	fa22 f303 	lsr.w	r3, r2, r3
 8107ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8107ad4:	e020      	b.n	8107b18 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8107ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8107ad8:	681b      	ldr	r3, [r3, #0]
 8107ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8107ade:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107ae2:	d106      	bne.n	8107af2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8107ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ae6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107aea:	d102      	bne.n	8107af2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8107aec:	4b4a      	ldr	r3, [pc, #296]	@ (8107c18 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8107aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8107af0:	e012      	b.n	8107b18 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8107af2:	4b47      	ldr	r3, [pc, #284]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8107af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8107af8:	f003 0302 	and.w	r3, r3, #2
 8107afc:	2b02      	cmp	r3, #2
 8107afe:	d107      	bne.n	8107b10 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8107b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107b02:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8107b06:	d103      	bne.n	8107b10 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8107b08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8107b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8107b0e:	e003      	b.n	8107b18 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8107b10:	2300      	movs	r3, #0
 8107b12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8107b14:	f001 bbd1 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8107b18:	f001 bbcf 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8107b1c:	4b3c      	ldr	r3, [pc, #240]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8107b1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8107b22:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8107b26:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8107b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107b2a:	2b00      	cmp	r3, #0
 8107b2c:	d104      	bne.n	8107b38 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8107b2e:	f7fc fc37 	bl	81043a0 <HAL_RCC_GetPCLK1Freq>
 8107b32:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8107b34:	f001 bbc1 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8107b38:	4b35      	ldr	r3, [pc, #212]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8107b3a:	681b      	ldr	r3, [r3, #0]
 8107b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107b40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107b44:	d10b      	bne.n	8107b5e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8107b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8107b4c:	d107      	bne.n	8107b5e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107b4e:	f107 0314 	add.w	r3, r7, #20
 8107b52:	4618      	mov	r0, r3
 8107b54:	f7fe fd92 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107b58:	69bb      	ldr	r3, [r7, #24]
 8107b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8107b5c:	e047      	b.n	8107bee <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8107b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8107b60:	681b      	ldr	r3, [r3, #0]
 8107b62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107b6a:	d10b      	bne.n	8107b84 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8107b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107b6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107b72:	d107      	bne.n	8107b84 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107b74:	f107 0308 	add.w	r3, r7, #8
 8107b78:	4618      	mov	r0, r3
 8107b7a:	f7fe fee9 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107b7e:	68fb      	ldr	r3, [r7, #12]
 8107b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8107b82:	e034      	b.n	8107bee <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8107b84:	4b22      	ldr	r3, [pc, #136]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8107b86:	681b      	ldr	r3, [r3, #0]
 8107b88:	f003 0302 	and.w	r3, r3, #2
 8107b8c:	2b02      	cmp	r3, #2
 8107b8e:	d10d      	bne.n	8107bac <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8107b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107b92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107b96:	d109      	bne.n	8107bac <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8107b98:	4b1d      	ldr	r3, [pc, #116]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8107b9a:	681b      	ldr	r3, [r3, #0]
 8107b9c:	08db      	lsrs	r3, r3, #3
 8107b9e:	f003 0303 	and.w	r3, r3, #3
 8107ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8107c14 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8107ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8107ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8107baa:	e020      	b.n	8107bee <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8107bac:	4b18      	ldr	r3, [pc, #96]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8107bae:	681b      	ldr	r3, [r3, #0]
 8107bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8107bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107bb8:	d106      	bne.n	8107bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8107bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107bbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107bc0:	d102      	bne.n	8107bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8107bc2:	4b15      	ldr	r3, [pc, #84]	@ (8107c18 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8107bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8107bc6:	e012      	b.n	8107bee <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8107bc8:	4b11      	ldr	r3, [pc, #68]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8107bca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8107bce:	f003 0302 	and.w	r3, r3, #2
 8107bd2:	2b02      	cmp	r3, #2
 8107bd4:	d107      	bne.n	8107be6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8107bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107bd8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8107bdc:	d103      	bne.n	8107be6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8107bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8107be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8107be4:	e003      	b.n	8107bee <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8107be6:	2300      	movs	r3, #0
 8107be8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8107bea:	f001 bb66 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8107bee:	f001 bb64 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8107bf2:	4b07      	ldr	r3, [pc, #28]	@ (8107c10 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8107bf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8107bf8:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8107bfc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8107bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c00:	2b00      	cmp	r3, #0
 8107c02:	d10b      	bne.n	8107c1c <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8107c04:	f7fc fbcc 	bl	81043a0 <HAL_RCC_GetPCLK1Freq>
 8107c08:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8107c0a:	f001 bb56 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8107c0e:	bf00      	nop
 8107c10:	44020c00 	.word	0x44020c00
 8107c14:	03d09000 	.word	0x03d09000
 8107c18:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8107c1c:	4ba1      	ldr	r3, [pc, #644]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107c1e:	681b      	ldr	r3, [r3, #0]
 8107c20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107c24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107c28:	d10b      	bne.n	8107c42 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8107c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107c30:	d107      	bne.n	8107c42 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107c32:	f107 0314 	add.w	r3, r7, #20
 8107c36:	4618      	mov	r0, r3
 8107c38:	f7fe fd20 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107c3c:	69bb      	ldr	r3, [r7, #24]
 8107c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8107c40:	e047      	b.n	8107cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8107c42:	4b98      	ldr	r3, [pc, #608]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107c44:	681b      	ldr	r3, [r3, #0]
 8107c46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107c4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107c4e:	d10b      	bne.n	8107c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8107c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107c56:	d107      	bne.n	8107c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107c58:	f107 0308 	add.w	r3, r7, #8
 8107c5c:	4618      	mov	r0, r3
 8107c5e:	f7fe fe77 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107c62:	68fb      	ldr	r3, [r7, #12]
 8107c64:	637b      	str	r3, [r7, #52]	@ 0x34
 8107c66:	e034      	b.n	8107cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8107c68:	4b8e      	ldr	r3, [pc, #568]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107c6a:	681b      	ldr	r3, [r3, #0]
 8107c6c:	f003 0302 	and.w	r3, r3, #2
 8107c70:	2b02      	cmp	r3, #2
 8107c72:	d10d      	bne.n	8107c90 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8107c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c76:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8107c7a:	d109      	bne.n	8107c90 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8107c7c:	4b89      	ldr	r3, [pc, #548]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107c7e:	681b      	ldr	r3, [r3, #0]
 8107c80:	08db      	lsrs	r3, r3, #3
 8107c82:	f003 0303 	and.w	r3, r3, #3
 8107c86:	4a88      	ldr	r2, [pc, #544]	@ (8107ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8107c88:	fa22 f303 	lsr.w	r3, r2, r3
 8107c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8107c8e:	e020      	b.n	8107cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8107c90:	4b84      	ldr	r3, [pc, #528]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107c92:	681b      	ldr	r3, [r3, #0]
 8107c94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8107c98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107c9c:	d106      	bne.n	8107cac <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8107c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107ca4:	d102      	bne.n	8107cac <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8107ca6:	4b81      	ldr	r3, [pc, #516]	@ (8107eac <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8107ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8107caa:	e012      	b.n	8107cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8107cac:	4b7d      	ldr	r3, [pc, #500]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8107cb2:	f003 0302 	and.w	r3, r3, #2
 8107cb6:	2b02      	cmp	r3, #2
 8107cb8:	d107      	bne.n	8107cca <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8107cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107cbc:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8107cc0:	d103      	bne.n	8107cca <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8107cc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8107cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8107cc8:	e003      	b.n	8107cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8107cca:	2300      	movs	r3, #0
 8107ccc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8107cce:	f001 baf4 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8107cd2:	f001 baf2 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8107cd6:	4b73      	ldr	r3, [pc, #460]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107cd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8107cdc:	f003 0307 	and.w	r3, r3, #7
 8107ce0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8107ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ce4:	2b00      	cmp	r3, #0
 8107ce6:	d104      	bne.n	8107cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8107ce8:	f7fc fb5a 	bl	81043a0 <HAL_RCC_GetPCLK1Freq>
 8107cec:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8107cee:	f001 bae4 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8107cf2:	4b6c      	ldr	r3, [pc, #432]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107cf4:	681b      	ldr	r3, [r3, #0]
 8107cf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107cfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107cfe:	d10a      	bne.n	8107d16 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8107d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107d02:	2b01      	cmp	r3, #1
 8107d04:	d107      	bne.n	8107d16 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107d06:	f107 0314 	add.w	r3, r7, #20
 8107d0a:	4618      	mov	r0, r3
 8107d0c:	f7fe fcb6 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107d10:	69bb      	ldr	r3, [r7, #24]
 8107d12:	637b      	str	r3, [r7, #52]	@ 0x34
 8107d14:	e043      	b.n	8107d9e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8107d16:	4b63      	ldr	r3, [pc, #396]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107d18:	681b      	ldr	r3, [r3, #0]
 8107d1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107d1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107d22:	d10a      	bne.n	8107d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8107d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107d26:	2b02      	cmp	r3, #2
 8107d28:	d107      	bne.n	8107d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107d2a:	f107 0308 	add.w	r3, r7, #8
 8107d2e:	4618      	mov	r0, r3
 8107d30:	f7fe fe0e 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107d34:	68fb      	ldr	r3, [r7, #12]
 8107d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8107d38:	e031      	b.n	8107d9e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8107d3a:	4b5a      	ldr	r3, [pc, #360]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107d3c:	681b      	ldr	r3, [r3, #0]
 8107d3e:	f003 0302 	and.w	r3, r3, #2
 8107d42:	2b02      	cmp	r3, #2
 8107d44:	d10c      	bne.n	8107d60 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8107d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107d48:	2b03      	cmp	r3, #3
 8107d4a:	d109      	bne.n	8107d60 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8107d4c:	4b55      	ldr	r3, [pc, #340]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107d4e:	681b      	ldr	r3, [r3, #0]
 8107d50:	08db      	lsrs	r3, r3, #3
 8107d52:	f003 0303 	and.w	r3, r3, #3
 8107d56:	4a54      	ldr	r2, [pc, #336]	@ (8107ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8107d58:	fa22 f303 	lsr.w	r3, r2, r3
 8107d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8107d5e:	e01e      	b.n	8107d9e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8107d60:	4b50      	ldr	r3, [pc, #320]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107d62:	681b      	ldr	r3, [r3, #0]
 8107d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8107d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107d6c:	d105      	bne.n	8107d7a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8107d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107d70:	2b04      	cmp	r3, #4
 8107d72:	d102      	bne.n	8107d7a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8107d74:	4b4d      	ldr	r3, [pc, #308]	@ (8107eac <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8107d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8107d78:	e011      	b.n	8107d9e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8107d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8107d80:	f003 0302 	and.w	r3, r3, #2
 8107d84:	2b02      	cmp	r3, #2
 8107d86:	d106      	bne.n	8107d96 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8107d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107d8a:	2b05      	cmp	r3, #5
 8107d8c:	d103      	bne.n	8107d96 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8107d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8107d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8107d94:	e003      	b.n	8107d9e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8107d96:	2300      	movs	r3, #0
 8107d98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8107d9a:	f001 ba8e 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8107d9e:	f001 ba8c 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8107da2:	4b40      	ldr	r3, [pc, #256]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107da4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8107da8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8107dac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8107dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107db0:	2b00      	cmp	r3, #0
 8107db2:	d104      	bne.n	8107dbe <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8107db4:	f7fc faf4 	bl	81043a0 <HAL_RCC_GetPCLK1Freq>
 8107db8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8107dba:	f001 ba7e 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8107dbe:	4b39      	ldr	r3, [pc, #228]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107dc0:	681b      	ldr	r3, [r3, #0]
 8107dc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107dc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107dca:	d10a      	bne.n	8107de2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8107dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107dce:	2b10      	cmp	r3, #16
 8107dd0:	d107      	bne.n	8107de2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107dd2:	f107 0314 	add.w	r3, r7, #20
 8107dd6:	4618      	mov	r0, r3
 8107dd8:	f7fe fc50 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107ddc:	69bb      	ldr	r3, [r7, #24]
 8107dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8107de0:	e043      	b.n	8107e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8107de2:	4b30      	ldr	r3, [pc, #192]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107de4:	681b      	ldr	r3, [r3, #0]
 8107de6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107dea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107dee:	d10a      	bne.n	8107e06 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8107df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107df2:	2b20      	cmp	r3, #32
 8107df4:	d107      	bne.n	8107e06 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107df6:	f107 0308 	add.w	r3, r7, #8
 8107dfa:	4618      	mov	r0, r3
 8107dfc:	f7fe fda8 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107e00:	68fb      	ldr	r3, [r7, #12]
 8107e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8107e04:	e031      	b.n	8107e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8107e06:	4b27      	ldr	r3, [pc, #156]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107e08:	681b      	ldr	r3, [r3, #0]
 8107e0a:	f003 0302 	and.w	r3, r3, #2
 8107e0e:	2b02      	cmp	r3, #2
 8107e10:	d10c      	bne.n	8107e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8107e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107e14:	2b30      	cmp	r3, #48	@ 0x30
 8107e16:	d109      	bne.n	8107e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8107e18:	4b22      	ldr	r3, [pc, #136]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107e1a:	681b      	ldr	r3, [r3, #0]
 8107e1c:	08db      	lsrs	r3, r3, #3
 8107e1e:	f003 0303 	and.w	r3, r3, #3
 8107e22:	4a21      	ldr	r2, [pc, #132]	@ (8107ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8107e24:	fa22 f303 	lsr.w	r3, r2, r3
 8107e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8107e2a:	e01e      	b.n	8107e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8107e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107e2e:	681b      	ldr	r3, [r3, #0]
 8107e30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8107e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107e38:	d105      	bne.n	8107e46 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8107e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107e3c:	2b40      	cmp	r3, #64	@ 0x40
 8107e3e:	d102      	bne.n	8107e46 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8107e40:	4b1a      	ldr	r3, [pc, #104]	@ (8107eac <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8107e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8107e44:	e011      	b.n	8107e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8107e46:	4b17      	ldr	r3, [pc, #92]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8107e4c:	f003 0302 	and.w	r3, r3, #2
 8107e50:	2b02      	cmp	r3, #2
 8107e52:	d106      	bne.n	8107e62 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8107e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107e56:	2b50      	cmp	r3, #80	@ 0x50
 8107e58:	d103      	bne.n	8107e62 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8107e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8107e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8107e60:	e003      	b.n	8107e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8107e62:	2300      	movs	r3, #0
 8107e64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8107e66:	f001 ba28 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8107e6a:	f001 ba26 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8107e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8107e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8107e74:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8107e78:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8107e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107e7c:	2b00      	cmp	r3, #0
 8107e7e:	d104      	bne.n	8107e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8107e80:	f7fc faba 	bl	81043f8 <HAL_RCC_GetPCLK3Freq>
 8107e84:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8107e86:	f001 ba18 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8107e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8107e90:	d10e      	bne.n	8107eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107e92:	f107 0314 	add.w	r3, r7, #20
 8107e96:	4618      	mov	r0, r3
 8107e98:	f7fe fbf0 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107e9c:	69bb      	ldr	r3, [r7, #24]
 8107e9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8107ea0:	f001 ba0b 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8107ea4:	44020c00 	.word	0x44020c00
 8107ea8:	03d09000 	.word	0x03d09000
 8107eac:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8107eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107eb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107eb6:	d108      	bne.n	8107eca <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107eb8:	f107 0308 	add.w	r3, r7, #8
 8107ebc:	4618      	mov	r0, r3
 8107ebe:	f7fe fd47 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107ec2:	68fb      	ldr	r3, [r7, #12]
 8107ec4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8107ec6:	f001 b9f8 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8107eca:	4ba4      	ldr	r3, [pc, #656]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8107ecc:	681b      	ldr	r3, [r3, #0]
 8107ece:	f003 0302 	and.w	r3, r3, #2
 8107ed2:	2b02      	cmp	r3, #2
 8107ed4:	d10d      	bne.n	8107ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8107ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ed8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107edc:	d109      	bne.n	8107ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8107ede:	4b9f      	ldr	r3, [pc, #636]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8107ee0:	681b      	ldr	r3, [r3, #0]
 8107ee2:	08db      	lsrs	r3, r3, #3
 8107ee4:	f003 0303 	and.w	r3, r3, #3
 8107ee8:	4a9d      	ldr	r2, [pc, #628]	@ (8108160 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8107eea:	fa22 f303 	lsr.w	r3, r2, r3
 8107eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8107ef0:	e020      	b.n	8107f34 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8107ef2:	4b9a      	ldr	r3, [pc, #616]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8107ef4:	681b      	ldr	r3, [r3, #0]
 8107ef6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8107efa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107efe:	d106      	bne.n	8107f0e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8107f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107f02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107f06:	d102      	bne.n	8107f0e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8107f08:	4b96      	ldr	r3, [pc, #600]	@ (8108164 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8107f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8107f0c:	e012      	b.n	8107f34 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8107f0e:	4b93      	ldr	r3, [pc, #588]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8107f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8107f14:	f003 0302 	and.w	r3, r3, #2
 8107f18:	2b02      	cmp	r3, #2
 8107f1a:	d107      	bne.n	8107f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8107f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107f1e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8107f22:	d103      	bne.n	8107f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8107f24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8107f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8107f2a:	e003      	b.n	8107f34 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8107f2c:	2300      	movs	r3, #0
 8107f2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8107f30:	f001 b9c3 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8107f34:	f001 b9c1 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8107f38:	4b88      	ldr	r3, [pc, #544]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8107f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8107f3e:	f003 0307 	and.w	r3, r3, #7
 8107f42:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8107f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107f46:	2b00      	cmp	r3, #0
 8107f48:	d104      	bne.n	8107f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8107f4a:	f7fc fa0d 	bl	8104368 <HAL_RCC_GetHCLKFreq>
 8107f4e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8107f50:	f001 b9b3 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8107f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107f56:	2b01      	cmp	r3, #1
 8107f58:	d104      	bne.n	8107f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8107f5a:	f7fc f8d9 	bl	8104110 <HAL_RCC_GetSysClockFreq>
 8107f5e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8107f60:	f001 b9ab 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8107f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107f66:	2b02      	cmp	r3, #2
 8107f68:	d108      	bne.n	8107f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107f6a:	f107 0314 	add.w	r3, r7, #20
 8107f6e:	4618      	mov	r0, r3
 8107f70:	f7fe fb84 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8107f74:	69fb      	ldr	r3, [r7, #28]
 8107f76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8107f78:	f001 b99f 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8107f7c:	4b77      	ldr	r3, [pc, #476]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8107f7e:	681b      	ldr	r3, [r3, #0]
 8107f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107f84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107f88:	d105      	bne.n	8107f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8107f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107f8c:	2b03      	cmp	r3, #3
 8107f8e:	d102      	bne.n	8107f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8107f90:	4b75      	ldr	r3, [pc, #468]	@ (8108168 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8107f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8107f94:	e023      	b.n	8107fde <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8107f96:	4b71      	ldr	r3, [pc, #452]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8107f98:	681b      	ldr	r3, [r3, #0]
 8107f9a:	f003 0302 	and.w	r3, r3, #2
 8107f9e:	2b02      	cmp	r3, #2
 8107fa0:	d10c      	bne.n	8107fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8107fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107fa4:	2b04      	cmp	r3, #4
 8107fa6:	d109      	bne.n	8107fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8107fa8:	4b6c      	ldr	r3, [pc, #432]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8107faa:	681b      	ldr	r3, [r3, #0]
 8107fac:	08db      	lsrs	r3, r3, #3
 8107fae:	f003 0303 	and.w	r3, r3, #3
 8107fb2:	4a6b      	ldr	r2, [pc, #428]	@ (8108160 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8107fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8107fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8107fba:	e010      	b.n	8107fde <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8107fbc:	4b67      	ldr	r3, [pc, #412]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8107fbe:	681b      	ldr	r3, [r3, #0]
 8107fc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8107fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107fc8:	d105      	bne.n	8107fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8107fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107fcc:	2b05      	cmp	r3, #5
 8107fce:	d102      	bne.n	8107fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8107fd0:	4b64      	ldr	r3, [pc, #400]	@ (8108164 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8107fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8107fd4:	e003      	b.n	8107fde <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8107fd6:	2300      	movs	r3, #0
 8107fd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8107fda:	f001 b96e 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8107fde:	f001 b96c 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8107fe2:	4b5e      	ldr	r3, [pc, #376]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8107fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8107fe8:	f003 0308 	and.w	r3, r3, #8
 8107fec:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8107fee:	4b5b      	ldr	r3, [pc, #364]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8107ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8107ff4:	f003 0302 	and.w	r3, r3, #2
 8107ff8:	2b02      	cmp	r3, #2
 8107ffa:	d106      	bne.n	810800a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8107ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ffe:	2b00      	cmp	r3, #0
 8108000:	d103      	bne.n	810800a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8108002:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8108006:	637b      	str	r3, [r7, #52]	@ 0x34
 8108008:	e012      	b.n	8108030 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 810800a:	4b54      	ldr	r3, [pc, #336]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 810800c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8108010:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108014:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108018:	d106      	bne.n	8108028 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 810801a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810801c:	2b08      	cmp	r3, #8
 810801e:	d103      	bne.n	8108028 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8108020:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8108024:	637b      	str	r3, [r7, #52]	@ 0x34
 8108026:	e003      	b.n	8108030 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8108028:	2300      	movs	r3, #0
 810802a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 810802c:	f001 b945 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8108030:	f001 b943 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8108034:	4b49      	ldr	r3, [pc, #292]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8108036:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 810803a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810803e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8108040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108042:	2b00      	cmp	r3, #0
 8108044:	d104      	bne.n	8108050 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8108046:	f7fc f9ab 	bl	81043a0 <HAL_RCC_GetPCLK1Freq>
 810804a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 810804c:	f001 b935 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8108050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108052:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108056:	d108      	bne.n	810806a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108058:	f107 0308 	add.w	r3, r7, #8
 810805c:	4618      	mov	r0, r3
 810805e:	f7fe fc77 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8108062:	693b      	ldr	r3, [r7, #16]
 8108064:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8108066:	f001 b928 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 810806a:	4b3c      	ldr	r3, [pc, #240]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 810806c:	681b      	ldr	r3, [r3, #0]
 810806e:	f003 0302 	and.w	r3, r3, #2
 8108072:	2b02      	cmp	r3, #2
 8108074:	d10d      	bne.n	8108092 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8108076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108078:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810807c:	d109      	bne.n	8108092 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 810807e:	4b37      	ldr	r3, [pc, #220]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8108080:	681b      	ldr	r3, [r3, #0]
 8108082:	08db      	lsrs	r3, r3, #3
 8108084:	f003 0303 	and.w	r3, r3, #3
 8108088:	4a35      	ldr	r2, [pc, #212]	@ (8108160 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 810808a:	fa22 f303 	lsr.w	r3, r2, r3
 810808e:	637b      	str	r3, [r7, #52]	@ 0x34
 8108090:	e011      	b.n	81080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8108092:	4b32      	ldr	r3, [pc, #200]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8108094:	681b      	ldr	r3, [r3, #0]
 8108096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810809a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810809e:	d106      	bne.n	81080ae <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 81080a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81080a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81080a6:	d102      	bne.n	81080ae <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 81080a8:	4b2e      	ldr	r3, [pc, #184]	@ (8108164 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 81080aa:	637b      	str	r3, [r7, #52]	@ 0x34
 81080ac:	e003      	b.n	81080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 81080ae:	2300      	movs	r3, #0
 81080b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 81080b2:	f001 b902 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 81080b6:	f001 b900 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 81080ba:	4b28      	ldr	r3, [pc, #160]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 81080bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 81080c0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 81080c4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 81080c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81080c8:	2b00      	cmp	r3, #0
 81080ca:	d104      	bne.n	81080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 81080cc:	f7fc f968 	bl	81043a0 <HAL_RCC_GetPCLK1Freq>
 81080d0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 81080d2:	f001 b8f2 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 81080d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81080d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81080dc:	d108      	bne.n	81080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81080de:	f107 0308 	add.w	r3, r7, #8
 81080e2:	4618      	mov	r0, r3
 81080e4:	f7fe fc34 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 81080e8:	693b      	ldr	r3, [r7, #16]
 81080ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 81080ec:	f001 b8e5 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 81080f0:	4b1a      	ldr	r3, [pc, #104]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 81080f2:	681b      	ldr	r3, [r3, #0]
 81080f4:	f003 0302 	and.w	r3, r3, #2
 81080f8:	2b02      	cmp	r3, #2
 81080fa:	d10d      	bne.n	8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 81080fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81080fe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8108102:	d109      	bne.n	8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8108104:	4b15      	ldr	r3, [pc, #84]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8108106:	681b      	ldr	r3, [r3, #0]
 8108108:	08db      	lsrs	r3, r3, #3
 810810a:	f003 0303 	and.w	r3, r3, #3
 810810e:	4a14      	ldr	r2, [pc, #80]	@ (8108160 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8108110:	fa22 f303 	lsr.w	r3, r2, r3
 8108114:	637b      	str	r3, [r7, #52]	@ 0x34
 8108116:	e011      	b.n	810813c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8108118:	4b10      	ldr	r3, [pc, #64]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 810811a:	681b      	ldr	r3, [r3, #0]
 810811c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8108120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108124:	d106      	bne.n	8108134 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8108126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108128:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 810812c:	d102      	bne.n	8108134 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 810812e:	4b0d      	ldr	r3, [pc, #52]	@ (8108164 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8108130:	637b      	str	r3, [r7, #52]	@ 0x34
 8108132:	e003      	b.n	810813c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8108134:	2300      	movs	r3, #0
 8108136:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8108138:	f001 b8bf 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 810813c:	f001 b8bd 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8108140:	4b06      	ldr	r3, [pc, #24]	@ (810815c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8108142:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8108146:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 810814a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 810814c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810814e:	2b00      	cmp	r3, #0
 8108150:	d10c      	bne.n	810816c <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8108152:	f7fc f951 	bl	81043f8 <HAL_RCC_GetPCLK3Freq>
 8108156:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8108158:	f001 b8af 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 810815c:	44020c00 	.word	0x44020c00
 8108160:	03d09000 	.word	0x03d09000
 8108164:	003d0900 	.word	0x003d0900
 8108168:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 810816c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810816e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8108172:	d108      	bne.n	8108186 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108174:	f107 0308 	add.w	r3, r7, #8
 8108178:	4618      	mov	r0, r3
 810817a:	f7fe fbe9 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810817e:	693b      	ldr	r3, [r7, #16]
 8108180:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8108182:	f001 b89a 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8108186:	4b9f      	ldr	r3, [pc, #636]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8108188:	681b      	ldr	r3, [r3, #0]
 810818a:	f003 0302 	and.w	r3, r3, #2
 810818e:	2b02      	cmp	r3, #2
 8108190:	d10d      	bne.n	81081ae <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8108192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108194:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8108198:	d109      	bne.n	81081ae <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 810819a:	4b9a      	ldr	r3, [pc, #616]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 810819c:	681b      	ldr	r3, [r3, #0]
 810819e:	08db      	lsrs	r3, r3, #3
 81081a0:	f003 0303 	and.w	r3, r3, #3
 81081a4:	4a98      	ldr	r2, [pc, #608]	@ (8108408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 81081a6:	fa22 f303 	lsr.w	r3, r2, r3
 81081aa:	637b      	str	r3, [r7, #52]	@ 0x34
 81081ac:	e011      	b.n	81081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 81081ae:	4b95      	ldr	r3, [pc, #596]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 81081b0:	681b      	ldr	r3, [r3, #0]
 81081b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81081b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81081ba:	d106      	bne.n	81081ca <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 81081bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81081be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81081c2:	d102      	bne.n	81081ca <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 81081c4:	4b91      	ldr	r3, [pc, #580]	@ (810840c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 81081c6:	637b      	str	r3, [r7, #52]	@ 0x34
 81081c8:	e003      	b.n	81081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 81081ca:	2300      	movs	r3, #0
 81081cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 81081ce:	f001 b874 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 81081d2:	f001 b872 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 81081d6:	4b8b      	ldr	r3, [pc, #556]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 81081d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 81081dc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 81081e0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 81081e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81081e4:	2b00      	cmp	r3, #0
 81081e6:	d104      	bne.n	81081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 81081e8:	f7fc f906 	bl	81043f8 <HAL_RCC_GetPCLK3Freq>
 81081ec:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 81081ee:	f001 b864 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 81081f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81081f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81081f8:	d108      	bne.n	810820c <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81081fa:	f107 0308 	add.w	r3, r7, #8
 81081fe:	4618      	mov	r0, r3
 8108200:	f7fe fba6 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8108204:	693b      	ldr	r3, [r7, #16]
 8108206:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8108208:	f001 b857 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 810820c:	4b7d      	ldr	r3, [pc, #500]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 810820e:	681b      	ldr	r3, [r3, #0]
 8108210:	f003 0302 	and.w	r3, r3, #2
 8108214:	2b02      	cmp	r3, #2
 8108216:	d10d      	bne.n	8108234 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8108218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810821a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810821e:	d109      	bne.n	8108234 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8108220:	4b78      	ldr	r3, [pc, #480]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8108222:	681b      	ldr	r3, [r3, #0]
 8108224:	08db      	lsrs	r3, r3, #3
 8108226:	f003 0303 	and.w	r3, r3, #3
 810822a:	4a77      	ldr	r2, [pc, #476]	@ (8108408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 810822c:	fa22 f303 	lsr.w	r3, r2, r3
 8108230:	637b      	str	r3, [r7, #52]	@ 0x34
 8108232:	e011      	b.n	8108258 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8108234:	4b73      	ldr	r3, [pc, #460]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8108236:	681b      	ldr	r3, [r3, #0]
 8108238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810823c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108240:	d106      	bne.n	8108250 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8108242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108244:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8108248:	d102      	bne.n	8108250 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 810824a:	4b70      	ldr	r3, [pc, #448]	@ (810840c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 810824c:	637b      	str	r3, [r7, #52]	@ 0x34
 810824e:	e003      	b.n	8108258 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8108250:	2300      	movs	r3, #0
 8108252:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8108254:	f001 b831 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8108258:	f001 b82f 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 810825c:	4b69      	ldr	r3, [pc, #420]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 810825e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8108262:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8108266:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8108268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810826a:	2b00      	cmp	r3, #0
 810826c:	d104      	bne.n	8108278 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 810826e:	f7fc f897 	bl	81043a0 <HAL_RCC_GetPCLK1Freq>
 8108272:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8108274:	f001 b821 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8108278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810827a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810827e:	d108      	bne.n	8108292 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108280:	f107 0308 	add.w	r3, r7, #8
 8108284:	4618      	mov	r0, r3
 8108286:	f7fe fb63 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810828a:	693b      	ldr	r3, [r7, #16]
 810828c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 810828e:	f001 b814 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8108292:	4b5c      	ldr	r3, [pc, #368]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8108294:	681b      	ldr	r3, [r3, #0]
 8108296:	f003 0302 	and.w	r3, r3, #2
 810829a:	2b02      	cmp	r3, #2
 810829c:	d10e      	bne.n	81082bc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 810829e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81082a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81082a4:	d10a      	bne.n	81082bc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 81082a6:	4b57      	ldr	r3, [pc, #348]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 81082a8:	681b      	ldr	r3, [r3, #0]
 81082aa:	08db      	lsrs	r3, r3, #3
 81082ac:	f003 0303 	and.w	r3, r3, #3
 81082b0:	4a55      	ldr	r2, [pc, #340]	@ (8108408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 81082b2:	fa22 f303 	lsr.w	r3, r2, r3
 81082b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 81082b8:	f000 bfff 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 81082bc:	2300      	movs	r3, #0
 81082be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 81082c0:	f000 bffb 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 81082c4:	4b4f      	ldr	r3, [pc, #316]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 81082c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 81082ca:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 81082ce:	633b      	str	r3, [r7, #48]	@ 0x30
 81082d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81082d2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 81082d6:	d056      	beq.n	8108386 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 81082d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81082da:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 81082de:	f200 808b 	bhi.w	81083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 81082e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81082e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81082e8:	d03e      	beq.n	8108368 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 81082ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81082ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81082f0:	f200 8082 	bhi.w	81083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 81082f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81082f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81082fa:	d027      	beq.n	810834c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 81082fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81082fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8108302:	d879      	bhi.n	81083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8108304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108306:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810830a:	d017      	beq.n	810833c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 810830c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810830e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108312:	d871      	bhi.n	81083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8108314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108316:	2b00      	cmp	r3, #0
 8108318:	d004      	beq.n	8108324 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 810831a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810831c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108320:	d004      	beq.n	810832c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8108322:	e069      	b.n	81083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8108324:	f7fc f868 	bl	81043f8 <HAL_RCC_GetPCLK3Freq>
 8108328:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 810832a:	e068      	b.n	81083fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810832c:	f107 0314 	add.w	r3, r7, #20
 8108330:	4618      	mov	r0, r3
 8108332:	f7fe f9a3 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8108336:	697b      	ldr	r3, [r7, #20]
 8108338:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 810833a:	e060      	b.n	81083fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810833c:	f107 0308 	add.w	r3, r7, #8
 8108340:	4618      	mov	r0, r3
 8108342:	f7fe fb05 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8108346:	693b      	ldr	r3, [r7, #16]
 8108348:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 810834a:	e058      	b.n	81083fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 810834c:	4b2d      	ldr	r3, [pc, #180]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 810834e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8108352:	f003 0302 	and.w	r3, r3, #2
 8108356:	2b02      	cmp	r3, #2
 8108358:	d103      	bne.n	8108362 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 810835a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810835e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8108360:	e04d      	b.n	81083fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8108362:	2300      	movs	r3, #0
 8108364:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108366:	e04a      	b.n	81083fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8108368:	4b26      	ldr	r3, [pc, #152]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 810836a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810836e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108372:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108376:	d103      	bne.n	8108380 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8108378:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 810837c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 810837e:	e03e      	b.n	81083fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8108380:	2300      	movs	r3, #0
 8108382:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108384:	e03b      	b.n	81083fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8108386:	4b1f      	ldr	r3, [pc, #124]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8108388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810838c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8108390:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108392:	4b1c      	ldr	r3, [pc, #112]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8108394:	681b      	ldr	r3, [r3, #0]
 8108396:	f003 0302 	and.w	r3, r3, #2
 810839a:	2b02      	cmp	r3, #2
 810839c:	d10c      	bne.n	81083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 810839e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81083a0:	2b00      	cmp	r3, #0
 81083a2:	d109      	bne.n	81083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 81083a4:	4b17      	ldr	r3, [pc, #92]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 81083a6:	681b      	ldr	r3, [r3, #0]
 81083a8:	08db      	lsrs	r3, r3, #3
 81083aa:	f003 0303 	and.w	r3, r3, #3
 81083ae:	4a16      	ldr	r2, [pc, #88]	@ (8108408 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 81083b0:	fa22 f303 	lsr.w	r3, r2, r3
 81083b4:	637b      	str	r3, [r7, #52]	@ 0x34
 81083b6:	e01e      	b.n	81083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81083b8:	4b12      	ldr	r3, [pc, #72]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 81083ba:	681b      	ldr	r3, [r3, #0]
 81083bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81083c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81083c4:	d106      	bne.n	81083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 81083c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81083c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81083cc:	d102      	bne.n	81083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 81083ce:	4b0f      	ldr	r3, [pc, #60]	@ (810840c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 81083d0:	637b      	str	r3, [r7, #52]	@ 0x34
 81083d2:	e010      	b.n	81083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81083d4:	4b0b      	ldr	r3, [pc, #44]	@ (8108404 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 81083d6:	681b      	ldr	r3, [r3, #0]
 81083d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81083dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81083e0:	d106      	bne.n	81083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 81083e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81083e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 81083e8:	d102      	bne.n	81083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 81083ea:	4b09      	ldr	r3, [pc, #36]	@ (8108410 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 81083ec:	637b      	str	r3, [r7, #52]	@ 0x34
 81083ee:	e002      	b.n	81083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 81083f0:	2300      	movs	r3, #0
 81083f2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 81083f4:	e003      	b.n	81083fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 81083f6:	e002      	b.n	81083fe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 81083f8:	2300      	movs	r3, #0
 81083fa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 81083fc:	bf00      	nop
          }
        }
        break;
 81083fe:	f000 bf5c 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8108402:	bf00      	nop
 8108404:	44020c00 	.word	0x44020c00
 8108408:	03d09000 	.word	0x03d09000
 810840c:	003d0900 	.word	0x003d0900
 8108410:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8108414:	4b9e      	ldr	r3, [pc, #632]	@ (8108690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8108416:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 810841a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 810841e:	633b      	str	r3, [r7, #48]	@ 0x30
 8108420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108422:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8108426:	d056      	beq.n	81084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8108428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810842a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 810842e:	f200 808b 	bhi.w	8108548 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8108432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108438:	d03e      	beq.n	81084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 810843a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810843c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108440:	f200 8082 	bhi.w	8108548 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8108444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108446:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810844a:	d027      	beq.n	810849c <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 810844c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810844e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8108452:	d879      	bhi.n	8108548 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8108454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108456:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810845a:	d017      	beq.n	810848c <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 810845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810845e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8108462:	d871      	bhi.n	8108548 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8108464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108466:	2b00      	cmp	r3, #0
 8108468:	d004      	beq.n	8108474 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 810846a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810846c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108470:	d004      	beq.n	810847c <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8108472:	e069      	b.n	8108548 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8108474:	f7fb ff94 	bl	81043a0 <HAL_RCC_GetPCLK1Freq>
 8108478:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 810847a:	e068      	b.n	810854e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810847c:	f107 0314 	add.w	r3, r7, #20
 8108480:	4618      	mov	r0, r3
 8108482:	f7fe f8fb 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8108486:	697b      	ldr	r3, [r7, #20]
 8108488:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 810848a:	e060      	b.n	810854e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810848c:	f107 0308 	add.w	r3, r7, #8
 8108490:	4618      	mov	r0, r3
 8108492:	f7fe fa5d 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8108496:	693b      	ldr	r3, [r7, #16]
 8108498:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 810849a:	e058      	b.n	810854e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 810849c:	4b7c      	ldr	r3, [pc, #496]	@ (8108690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 810849e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81084a2:	f003 0302 	and.w	r3, r3, #2
 81084a6:	2b02      	cmp	r3, #2
 81084a8:	d103      	bne.n	81084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 81084aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81084ae:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 81084b0:	e04d      	b.n	810854e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 81084b2:	2300      	movs	r3, #0
 81084b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 81084b6:	e04a      	b.n	810854e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 81084b8:	4b75      	ldr	r3, [pc, #468]	@ (8108690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 81084ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81084be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81084c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81084c6:	d103      	bne.n	81084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 81084c8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 81084cc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 81084ce:	e03e      	b.n	810854e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 81084d0:	2300      	movs	r3, #0
 81084d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 81084d4:	e03b      	b.n	810854e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81084d6:	4b6e      	ldr	r3, [pc, #440]	@ (8108690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 81084d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81084dc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 81084e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81084e2:	4b6b      	ldr	r3, [pc, #428]	@ (8108690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 81084e4:	681b      	ldr	r3, [r3, #0]
 81084e6:	f003 0302 	and.w	r3, r3, #2
 81084ea:	2b02      	cmp	r3, #2
 81084ec:	d10c      	bne.n	8108508 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 81084ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81084f0:	2b00      	cmp	r3, #0
 81084f2:	d109      	bne.n	8108508 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 81084f4:	4b66      	ldr	r3, [pc, #408]	@ (8108690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 81084f6:	681b      	ldr	r3, [r3, #0]
 81084f8:	08db      	lsrs	r3, r3, #3
 81084fa:	f003 0303 	and.w	r3, r3, #3
 81084fe:	4a65      	ldr	r2, [pc, #404]	@ (8108694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8108500:	fa22 f303 	lsr.w	r3, r2, r3
 8108504:	637b      	str	r3, [r7, #52]	@ 0x34
 8108506:	e01e      	b.n	8108546 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108508:	4b61      	ldr	r3, [pc, #388]	@ (8108690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 810850a:	681b      	ldr	r3, [r3, #0]
 810850c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8108510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108514:	d106      	bne.n	8108524 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8108516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810851c:	d102      	bne.n	8108524 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 810851e:	4b5e      	ldr	r3, [pc, #376]	@ (8108698 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8108520:	637b      	str	r3, [r7, #52]	@ 0x34
 8108522:	e010      	b.n	8108546 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108524:	4b5a      	ldr	r3, [pc, #360]	@ (8108690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8108526:	681b      	ldr	r3, [r3, #0]
 8108528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810852c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108530:	d106      	bne.n	8108540 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8108532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108534:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8108538:	d102      	bne.n	8108540 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 810853a:	4b58      	ldr	r3, [pc, #352]	@ (810869c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 810853c:	637b      	str	r3, [r7, #52]	@ 0x34
 810853e:	e002      	b.n	8108546 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8108540:	2300      	movs	r3, #0
 8108542:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8108544:	e003      	b.n	810854e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8108546:	e002      	b.n	810854e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8108548:	2300      	movs	r3, #0
 810854a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 810854c:	bf00      	nop
          }
        }
        break;
 810854e:	f000 beb4 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8108552:	4b4f      	ldr	r3, [pc, #316]	@ (8108690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8108554:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8108558:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 810855c:	633b      	str	r3, [r7, #48]	@ 0x30
 810855e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108560:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8108564:	d056      	beq.n	8108614 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8108566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108568:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810856c:	f200 808b 	bhi.w	8108686 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8108570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108572:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8108576:	d03e      	beq.n	81085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8108578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810857a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810857e:	f200 8082 	bhi.w	8108686 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8108582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108584:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8108588:	d027      	beq.n	81085da <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 810858a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810858c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8108590:	d879      	bhi.n	8108686 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8108592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108594:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108598:	d017      	beq.n	81085ca <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 810859a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810859c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81085a0:	d871      	bhi.n	8108686 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 81085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81085a4:	2b00      	cmp	r3, #0
 81085a6:	d004      	beq.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 81085a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81085aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81085ae:	d004      	beq.n	81085ba <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 81085b0:	e069      	b.n	8108686 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 81085b2:	f7fb ff21 	bl	81043f8 <HAL_RCC_GetPCLK3Freq>
 81085b6:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 81085b8:	e068      	b.n	810868c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81085ba:	f107 0314 	add.w	r3, r7, #20
 81085be:	4618      	mov	r0, r3
 81085c0:	f7fe f85c 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 81085c4:	697b      	ldr	r3, [r7, #20]
 81085c6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 81085c8:	e060      	b.n	810868c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81085ca:	f107 0308 	add.w	r3, r7, #8
 81085ce:	4618      	mov	r0, r3
 81085d0:	f7fe f9be 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 81085d4:	693b      	ldr	r3, [r7, #16]
 81085d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 81085d8:	e058      	b.n	810868c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 81085da:	4b2d      	ldr	r3, [pc, #180]	@ (8108690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 81085dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81085e0:	f003 0302 	and.w	r3, r3, #2
 81085e4:	2b02      	cmp	r3, #2
 81085e6:	d103      	bne.n	81085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 81085e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81085ec:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 81085ee:	e04d      	b.n	810868c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 81085f0:	2300      	movs	r3, #0
 81085f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 81085f4:	e04a      	b.n	810868c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 81085f6:	4b26      	ldr	r3, [pc, #152]	@ (8108690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 81085f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81085fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108600:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108604:	d103      	bne.n	810860e <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8108606:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 810860a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 810860c:	e03e      	b.n	810868c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 810860e:	2300      	movs	r3, #0
 8108610:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108612:	e03b      	b.n	810868c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8108614:	4b1e      	ldr	r3, [pc, #120]	@ (8108690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8108616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810861a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 810861e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108620:	4b1b      	ldr	r3, [pc, #108]	@ (8108690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8108622:	681b      	ldr	r3, [r3, #0]
 8108624:	f003 0302 	and.w	r3, r3, #2
 8108628:	2b02      	cmp	r3, #2
 810862a:	d10c      	bne.n	8108646 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 810862c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810862e:	2b00      	cmp	r3, #0
 8108630:	d109      	bne.n	8108646 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8108632:	4b17      	ldr	r3, [pc, #92]	@ (8108690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8108634:	681b      	ldr	r3, [r3, #0]
 8108636:	08db      	lsrs	r3, r3, #3
 8108638:	f003 0303 	and.w	r3, r3, #3
 810863c:	4a15      	ldr	r2, [pc, #84]	@ (8108694 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 810863e:	fa22 f303 	lsr.w	r3, r2, r3
 8108642:	637b      	str	r3, [r7, #52]	@ 0x34
 8108644:	e01e      	b.n	8108684 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108646:	4b12      	ldr	r3, [pc, #72]	@ (8108690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8108648:	681b      	ldr	r3, [r3, #0]
 810864a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810864e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108652:	d106      	bne.n	8108662 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8108654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810865a:	d102      	bne.n	8108662 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 810865c:	4b0e      	ldr	r3, [pc, #56]	@ (8108698 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 810865e:	637b      	str	r3, [r7, #52]	@ 0x34
 8108660:	e010      	b.n	8108684 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108662:	4b0b      	ldr	r3, [pc, #44]	@ (8108690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8108664:	681b      	ldr	r3, [r3, #0]
 8108666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810866a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810866e:	d106      	bne.n	810867e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8108670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108672:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8108676:	d102      	bne.n	810867e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8108678:	4b08      	ldr	r3, [pc, #32]	@ (810869c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 810867a:	637b      	str	r3, [r7, #52]	@ 0x34
 810867c:	e002      	b.n	8108684 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 810867e:	2300      	movs	r3, #0
 8108680:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8108682:	e003      	b.n	810868c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8108684:	e002      	b.n	810868c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8108686:	2300      	movs	r3, #0
 8108688:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 810868a:	bf00      	nop
          }
        }
        break;
 810868c:	f000 be15 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8108690:	44020c00 	.word	0x44020c00
 8108694:	03d09000 	.word	0x03d09000
 8108698:	003d0900 	.word	0x003d0900
 810869c:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 81086a0:	4b9e      	ldr	r3, [pc, #632]	@ (810891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 81086a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 81086a6:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 81086aa:	633b      	str	r3, [r7, #48]	@ 0x30
 81086ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81086ae:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 81086b2:	d056      	beq.n	8108762 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 81086b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81086b6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 81086ba:	f200 808b 	bhi.w	81087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 81086be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81086c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81086c4:	d03e      	beq.n	8108744 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 81086c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81086c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81086cc:	f200 8082 	bhi.w	81087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 81086d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81086d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81086d6:	d027      	beq.n	8108728 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 81086d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81086da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81086de:	d879      	bhi.n	81087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 81086e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81086e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81086e6:	d017      	beq.n	8108718 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 81086e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81086ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81086ee:	d871      	bhi.n	81087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 81086f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81086f2:	2b00      	cmp	r3, #0
 81086f4:	d004      	beq.n	8108700 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 81086f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81086f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81086fc:	d004      	beq.n	8108708 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 81086fe:	e069      	b.n	81087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8108700:	f7fb fe7a 	bl	81043f8 <HAL_RCC_GetPCLK3Freq>
 8108704:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8108706:	e068      	b.n	81087da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108708:	f107 0314 	add.w	r3, r7, #20
 810870c:	4618      	mov	r0, r3
 810870e:	f7fd ffb5 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8108712:	697b      	ldr	r3, [r7, #20]
 8108714:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108716:	e060      	b.n	81087da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108718:	f107 0308 	add.w	r3, r7, #8
 810871c:	4618      	mov	r0, r3
 810871e:	f7fe f917 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8108722:	693b      	ldr	r3, [r7, #16]
 8108724:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108726:	e058      	b.n	81087da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8108728:	4b7c      	ldr	r3, [pc, #496]	@ (810891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 810872a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810872e:	f003 0302 	and.w	r3, r3, #2
 8108732:	2b02      	cmp	r3, #2
 8108734:	d103      	bne.n	810873e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8108736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810873a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 810873c:	e04d      	b.n	81087da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 810873e:	2300      	movs	r3, #0
 8108740:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108742:	e04a      	b.n	81087da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8108744:	4b75      	ldr	r3, [pc, #468]	@ (810891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8108746:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810874a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810874e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108752:	d103      	bne.n	810875c <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8108754:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8108758:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 810875a:	e03e      	b.n	81087da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 810875c:	2300      	movs	r3, #0
 810875e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108760:	e03b      	b.n	81087da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8108762:	4b6e      	ldr	r3, [pc, #440]	@ (810891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8108764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8108768:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 810876c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810876e:	4b6b      	ldr	r3, [pc, #428]	@ (810891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8108770:	681b      	ldr	r3, [r3, #0]
 8108772:	f003 0302 	and.w	r3, r3, #2
 8108776:	2b02      	cmp	r3, #2
 8108778:	d10c      	bne.n	8108794 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 810877a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810877c:	2b00      	cmp	r3, #0
 810877e:	d109      	bne.n	8108794 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8108780:	4b66      	ldr	r3, [pc, #408]	@ (810891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8108782:	681b      	ldr	r3, [r3, #0]
 8108784:	08db      	lsrs	r3, r3, #3
 8108786:	f003 0303 	and.w	r3, r3, #3
 810878a:	4a65      	ldr	r2, [pc, #404]	@ (8108920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 810878c:	fa22 f303 	lsr.w	r3, r2, r3
 8108790:	637b      	str	r3, [r7, #52]	@ 0x34
 8108792:	e01e      	b.n	81087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108794:	4b61      	ldr	r3, [pc, #388]	@ (810891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8108796:	681b      	ldr	r3, [r3, #0]
 8108798:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810879c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81087a0:	d106      	bne.n	81087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 81087a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81087a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81087a8:	d102      	bne.n	81087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 81087aa:	4b5e      	ldr	r3, [pc, #376]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 81087ac:	637b      	str	r3, [r7, #52]	@ 0x34
 81087ae:	e010      	b.n	81087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81087b0:	4b5a      	ldr	r3, [pc, #360]	@ (810891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 81087b2:	681b      	ldr	r3, [r3, #0]
 81087b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81087b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81087bc:	d106      	bne.n	81087cc <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 81087be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81087c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 81087c4:	d102      	bne.n	81087cc <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 81087c6:	4b58      	ldr	r3, [pc, #352]	@ (8108928 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 81087c8:	637b      	str	r3, [r7, #52]	@ 0x34
 81087ca:	e002      	b.n	81087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 81087cc:	2300      	movs	r3, #0
 81087ce:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 81087d0:	e003      	b.n	81087da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 81087d2:	e002      	b.n	81087da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 81087d4:	2300      	movs	r3, #0
 81087d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 81087d8:	bf00      	nop
          }
        }
        break;
 81087da:	f000 bd6e 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 81087de:	4b4f      	ldr	r3, [pc, #316]	@ (810891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 81087e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 81087e4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 81087e8:	633b      	str	r3, [r7, #48]	@ 0x30
 81087ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81087ec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 81087f0:	d056      	beq.n	81088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 81087f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81087f4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 81087f8:	f200 808b 	bhi.w	8108912 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 81087fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81087fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8108802:	d03e      	beq.n	8108882 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8108804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108806:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810880a:	f200 8082 	bhi.w	8108912 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 810880e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108810:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8108814:	d027      	beq.n	8108866 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8108816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108818:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810881c:	d879      	bhi.n	8108912 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 810881e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108820:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108824:	d017      	beq.n	8108856 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8108826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108828:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810882c:	d871      	bhi.n	8108912 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 810882e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108830:	2b00      	cmp	r3, #0
 8108832:	d004      	beq.n	810883e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8108834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108836:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810883a:	d004      	beq.n	8108846 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 810883c:	e069      	b.n	8108912 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 810883e:	f7fb fddb 	bl	81043f8 <HAL_RCC_GetPCLK3Freq>
 8108842:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8108844:	e068      	b.n	8108918 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108846:	f107 0314 	add.w	r3, r7, #20
 810884a:	4618      	mov	r0, r3
 810884c:	f7fd ff16 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8108850:	697b      	ldr	r3, [r7, #20]
 8108852:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108854:	e060      	b.n	8108918 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108856:	f107 0308 	add.w	r3, r7, #8
 810885a:	4618      	mov	r0, r3
 810885c:	f7fe f878 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8108860:	693b      	ldr	r3, [r7, #16]
 8108862:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108864:	e058      	b.n	8108918 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8108866:	4b2d      	ldr	r3, [pc, #180]	@ (810891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8108868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810886c:	f003 0302 	and.w	r3, r3, #2
 8108870:	2b02      	cmp	r3, #2
 8108872:	d103      	bne.n	810887c <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8108874:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8108878:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 810887a:	e04d      	b.n	8108918 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 810887c:	2300      	movs	r3, #0
 810887e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108880:	e04a      	b.n	8108918 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8108882:	4b26      	ldr	r3, [pc, #152]	@ (810891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8108884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8108888:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810888c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108890:	d103      	bne.n	810889a <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8108892:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8108896:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8108898:	e03e      	b.n	8108918 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 810889a:	2300      	movs	r3, #0
 810889c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 810889e:	e03b      	b.n	8108918 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81088a0:	4b1e      	ldr	r3, [pc, #120]	@ (810891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 81088a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81088a6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 81088aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81088ac:	4b1b      	ldr	r3, [pc, #108]	@ (810891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 81088ae:	681b      	ldr	r3, [r3, #0]
 81088b0:	f003 0302 	and.w	r3, r3, #2
 81088b4:	2b02      	cmp	r3, #2
 81088b6:	d10c      	bne.n	81088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 81088b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81088ba:	2b00      	cmp	r3, #0
 81088bc:	d109      	bne.n	81088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 81088be:	4b17      	ldr	r3, [pc, #92]	@ (810891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 81088c0:	681b      	ldr	r3, [r3, #0]
 81088c2:	08db      	lsrs	r3, r3, #3
 81088c4:	f003 0303 	and.w	r3, r3, #3
 81088c8:	4a15      	ldr	r2, [pc, #84]	@ (8108920 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 81088ca:	fa22 f303 	lsr.w	r3, r2, r3
 81088ce:	637b      	str	r3, [r7, #52]	@ 0x34
 81088d0:	e01e      	b.n	8108910 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81088d2:	4b12      	ldr	r3, [pc, #72]	@ (810891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 81088d4:	681b      	ldr	r3, [r3, #0]
 81088d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81088da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81088de:	d106      	bne.n	81088ee <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 81088e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81088e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81088e6:	d102      	bne.n	81088ee <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 81088e8:	4b0e      	ldr	r3, [pc, #56]	@ (8108924 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 81088ea:	637b      	str	r3, [r7, #52]	@ 0x34
 81088ec:	e010      	b.n	8108910 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81088ee:	4b0b      	ldr	r3, [pc, #44]	@ (810891c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 81088f0:	681b      	ldr	r3, [r3, #0]
 81088f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81088f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81088fa:	d106      	bne.n	810890a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 81088fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81088fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8108902:	d102      	bne.n	810890a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8108904:	4b08      	ldr	r3, [pc, #32]	@ (8108928 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8108906:	637b      	str	r3, [r7, #52]	@ 0x34
 8108908:	e002      	b.n	8108910 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 810890a:	2300      	movs	r3, #0
 810890c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 810890e:	e003      	b.n	8108918 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8108910:	e002      	b.n	8108918 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8108912:	2300      	movs	r3, #0
 8108914:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108916:	bf00      	nop
          }
        }
        break;
 8108918:	f000 bccf 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 810891c:	44020c00 	.word	0x44020c00
 8108920:	03d09000 	.word	0x03d09000
 8108924:	003d0900 	.word	0x003d0900
 8108928:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 810892c:	4b9e      	ldr	r3, [pc, #632]	@ (8108ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 810892e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8108932:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8108936:	633b      	str	r3, [r7, #48]	@ 0x30
 8108938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810893a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810893e:	d056      	beq.n	81089ee <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8108940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108942:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108946:	f200 808b 	bhi.w	8108a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 810894a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810894c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108950:	d03e      	beq.n	81089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8108952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108958:	f200 8082 	bhi.w	8108a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 810895c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810895e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108962:	d027      	beq.n	81089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8108964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108966:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810896a:	d879      	bhi.n	8108a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 810896c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810896e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108972:	d017      	beq.n	81089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8108974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108976:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810897a:	d871      	bhi.n	8108a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 810897c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810897e:	2b00      	cmp	r3, #0
 8108980:	d004      	beq.n	810898c <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8108982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108984:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108988:	d004      	beq.n	8108994 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 810898a:	e069      	b.n	8108a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 810898c:	f7fb fd34 	bl	81043f8 <HAL_RCC_GetPCLK3Freq>
 8108990:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8108992:	e068      	b.n	8108a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108994:	f107 0314 	add.w	r3, r7, #20
 8108998:	4618      	mov	r0, r3
 810899a:	f7fd fe6f 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 810899e:	697b      	ldr	r3, [r7, #20]
 81089a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 81089a2:	e060      	b.n	8108a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81089a4:	f107 0308 	add.w	r3, r7, #8
 81089a8:	4618      	mov	r0, r3
 81089aa:	f7fd ffd1 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 81089ae:	693b      	ldr	r3, [r7, #16]
 81089b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 81089b2:	e058      	b.n	8108a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 81089b4:	4b7c      	ldr	r3, [pc, #496]	@ (8108ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 81089b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81089ba:	f003 0302 	and.w	r3, r3, #2
 81089be:	2b02      	cmp	r3, #2
 81089c0:	d103      	bne.n	81089ca <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 81089c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81089c6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 81089c8:	e04d      	b.n	8108a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 81089ca:	2300      	movs	r3, #0
 81089cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 81089ce:	e04a      	b.n	8108a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 81089d0:	4b75      	ldr	r3, [pc, #468]	@ (8108ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 81089d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81089d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81089da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81089de:	d103      	bne.n	81089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 81089e0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 81089e4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 81089e6:	e03e      	b.n	8108a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 81089e8:	2300      	movs	r3, #0
 81089ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 81089ec:	e03b      	b.n	8108a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81089ee:	4b6e      	ldr	r3, [pc, #440]	@ (8108ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 81089f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81089f4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 81089f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81089fa:	4b6b      	ldr	r3, [pc, #428]	@ (8108ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 81089fc:	681b      	ldr	r3, [r3, #0]
 81089fe:	f003 0302 	and.w	r3, r3, #2
 8108a02:	2b02      	cmp	r3, #2
 8108a04:	d10c      	bne.n	8108a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8108a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108a08:	2b00      	cmp	r3, #0
 8108a0a:	d109      	bne.n	8108a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8108a0c:	4b66      	ldr	r3, [pc, #408]	@ (8108ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8108a0e:	681b      	ldr	r3, [r3, #0]
 8108a10:	08db      	lsrs	r3, r3, #3
 8108a12:	f003 0303 	and.w	r3, r3, #3
 8108a16:	4a65      	ldr	r2, [pc, #404]	@ (8108bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8108a18:	fa22 f303 	lsr.w	r3, r2, r3
 8108a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8108a1e:	e01e      	b.n	8108a5e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108a20:	4b61      	ldr	r3, [pc, #388]	@ (8108ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8108a22:	681b      	ldr	r3, [r3, #0]
 8108a24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8108a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108a2c:	d106      	bne.n	8108a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8108a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108a34:	d102      	bne.n	8108a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8108a36:	4b5e      	ldr	r3, [pc, #376]	@ (8108bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8108a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8108a3a:	e010      	b.n	8108a5e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108a3c:	4b5a      	ldr	r3, [pc, #360]	@ (8108ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8108a3e:	681b      	ldr	r3, [r3, #0]
 8108a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108a44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108a48:	d106      	bne.n	8108a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8108a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8108a50:	d102      	bne.n	8108a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8108a52:	4b58      	ldr	r3, [pc, #352]	@ (8108bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8108a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8108a56:	e002      	b.n	8108a5e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8108a58:	2300      	movs	r3, #0
 8108a5a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8108a5c:	e003      	b.n	8108a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8108a5e:	e002      	b.n	8108a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8108a60:	2300      	movs	r3, #0
 8108a62:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108a64:	bf00      	nop
          }
        }
        break;
 8108a66:	f000 bc28 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8108a6a:	4b4f      	ldr	r3, [pc, #316]	@ (8108ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8108a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8108a70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8108a74:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8108a76:	4b4c      	ldr	r3, [pc, #304]	@ (8108ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8108a78:	681b      	ldr	r3, [r3, #0]
 8108a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108a7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108a82:	d106      	bne.n	8108a92 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8108a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a86:	2b00      	cmp	r3, #0
 8108a88:	d103      	bne.n	8108a92 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8108a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8108bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8108a8c:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8108a8e:	f000 bc14 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8108a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108a98:	d108      	bne.n	8108aac <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108a9a:	f107 0320 	add.w	r3, r7, #32
 8108a9e:	4618      	mov	r0, r3
 8108aa0:	f7fd fc82 	bl	81063a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108aa6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8108aa8:	f000 bc07 	b.w	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8108aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108ab2:	d107      	bne.n	8108ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108ab4:	f107 0314 	add.w	r3, r7, #20
 8108ab8:	4618      	mov	r0, r3
 8108aba:	f7fd fddf 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8108abe:	69bb      	ldr	r3, [r7, #24]
 8108ac0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8108ac2:	e3fa      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8108ac4:	2300      	movs	r3, #0
 8108ac6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8108ac8:	e3f7      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8108aca:	4b37      	ldr	r3, [pc, #220]	@ (8108ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8108acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8108ad0:	f003 0307 	and.w	r3, r3, #7
 8108ad4:	633b      	str	r3, [r7, #48]	@ 0x30
 8108ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ad8:	2b04      	cmp	r3, #4
 8108ada:	d861      	bhi.n	8108ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8108adc:	a201      	add	r2, pc, #4	@ (adr r2, 8108ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8108ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108ae2:	bf00      	nop
 8108ae4:	08108af9 	.word	0x08108af9
 8108ae8:	08108b09 	.word	0x08108b09
 8108aec:	08108b19 	.word	0x08108b19
 8108af0:	08108b29 	.word	0x08108b29
 8108af4:	08108b2f 	.word	0x08108b2f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108af8:	f107 0320 	add.w	r3, r7, #32
 8108afc:	4618      	mov	r0, r3
 8108afe:	f7fd fc53 	bl	81063a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8108b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108b04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108b06:	e04e      	b.n	8108ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108b08:	f107 0314 	add.w	r3, r7, #20
 8108b0c:	4618      	mov	r0, r3
 8108b0e:	f7fd fdb5 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8108b12:	697b      	ldr	r3, [r7, #20]
 8108b14:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108b16:	e046      	b.n	8108ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108b18:	f107 0308 	add.w	r3, r7, #8
 8108b1c:	4618      	mov	r0, r3
 8108b1e:	f7fd ff17 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8108b22:	68bb      	ldr	r3, [r7, #8]
 8108b24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108b26:	e03e      	b.n	8108ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8108b28:	4b23      	ldr	r3, [pc, #140]	@ (8108bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8108b2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108b2c:	e03b      	b.n	8108ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8108b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8108ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8108b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8108b34:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8108b38:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8108ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8108b3c:	681b      	ldr	r3, [r3, #0]
 8108b3e:	f003 0302 	and.w	r3, r3, #2
 8108b42:	2b02      	cmp	r3, #2
 8108b44:	d10c      	bne.n	8108b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8108b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108b48:	2b00      	cmp	r3, #0
 8108b4a:	d109      	bne.n	8108b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8108b4c:	4b16      	ldr	r3, [pc, #88]	@ (8108ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8108b4e:	681b      	ldr	r3, [r3, #0]
 8108b50:	08db      	lsrs	r3, r3, #3
 8108b52:	f003 0303 	and.w	r3, r3, #3
 8108b56:	4a15      	ldr	r2, [pc, #84]	@ (8108bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8108b58:	fa22 f303 	lsr.w	r3, r2, r3
 8108b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8108b5e:	e01e      	b.n	8108b9e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108b60:	4b11      	ldr	r3, [pc, #68]	@ (8108ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8108b62:	681b      	ldr	r3, [r3, #0]
 8108b64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8108b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108b6c:	d106      	bne.n	8108b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8108b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108b74:	d102      	bne.n	8108b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8108b76:	4b0e      	ldr	r3, [pc, #56]	@ (8108bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8108b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8108b7a:	e010      	b.n	8108b9e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8108ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8108b7e:	681b      	ldr	r3, [r3, #0]
 8108b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108b84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108b88:	d106      	bne.n	8108b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8108b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8108b90:	d102      	bne.n	8108b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8108b92:	4b08      	ldr	r3, [pc, #32]	@ (8108bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8108b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8108b96:	e002      	b.n	8108b9e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8108b98:	2300      	movs	r3, #0
 8108b9a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8108b9c:	e003      	b.n	8108ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8108b9e:	e002      	b.n	8108ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8108ba0:	2300      	movs	r3, #0
 8108ba2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108ba4:	bf00      	nop
          }
        }
        break;
 8108ba6:	e388      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8108ba8:	44020c00 	.word	0x44020c00
 8108bac:	03d09000 	.word	0x03d09000
 8108bb0:	003d0900 	.word	0x003d0900
 8108bb4:	007a1200 	.word	0x007a1200
 8108bb8:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8108bbc:	4ba9      	ldr	r3, [pc, #676]	@ (8108e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8108bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8108bc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8108bc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8108bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108bca:	2b20      	cmp	r3, #32
 8108bcc:	f200 809a 	bhi.w	8108d04 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8108bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8108bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8108bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108bd6:	bf00      	nop
 8108bd8:	08108c5d 	.word	0x08108c5d
 8108bdc:	08108d05 	.word	0x08108d05
 8108be0:	08108d05 	.word	0x08108d05
 8108be4:	08108d05 	.word	0x08108d05
 8108be8:	08108d05 	.word	0x08108d05
 8108bec:	08108d05 	.word	0x08108d05
 8108bf0:	08108d05 	.word	0x08108d05
 8108bf4:	08108d05 	.word	0x08108d05
 8108bf8:	08108c6d 	.word	0x08108c6d
 8108bfc:	08108d05 	.word	0x08108d05
 8108c00:	08108d05 	.word	0x08108d05
 8108c04:	08108d05 	.word	0x08108d05
 8108c08:	08108d05 	.word	0x08108d05
 8108c0c:	08108d05 	.word	0x08108d05
 8108c10:	08108d05 	.word	0x08108d05
 8108c14:	08108d05 	.word	0x08108d05
 8108c18:	08108c7d 	.word	0x08108c7d
 8108c1c:	08108d05 	.word	0x08108d05
 8108c20:	08108d05 	.word	0x08108d05
 8108c24:	08108d05 	.word	0x08108d05
 8108c28:	08108d05 	.word	0x08108d05
 8108c2c:	08108d05 	.word	0x08108d05
 8108c30:	08108d05 	.word	0x08108d05
 8108c34:	08108d05 	.word	0x08108d05
 8108c38:	08108c8d 	.word	0x08108c8d
 8108c3c:	08108d05 	.word	0x08108d05
 8108c40:	08108d05 	.word	0x08108d05
 8108c44:	08108d05 	.word	0x08108d05
 8108c48:	08108d05 	.word	0x08108d05
 8108c4c:	08108d05 	.word	0x08108d05
 8108c50:	08108d05 	.word	0x08108d05
 8108c54:	08108d05 	.word	0x08108d05
 8108c58:	08108c93 	.word	0x08108c93
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108c5c:	f107 0320 	add.w	r3, r7, #32
 8108c60:	4618      	mov	r0, r3
 8108c62:	f7fd fba1 	bl	81063a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8108c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108c68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108c6a:	e04e      	b.n	8108d0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108c6c:	f107 0314 	add.w	r3, r7, #20
 8108c70:	4618      	mov	r0, r3
 8108c72:	f7fd fd03 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8108c76:	697b      	ldr	r3, [r7, #20]
 8108c78:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108c7a:	e046      	b.n	8108d0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108c7c:	f107 0308 	add.w	r3, r7, #8
 8108c80:	4618      	mov	r0, r3
 8108c82:	f7fd fe65 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8108c86:	68bb      	ldr	r3, [r7, #8]
 8108c88:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108c8a:	e03e      	b.n	8108d0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8108c8c:	4b76      	ldr	r3, [pc, #472]	@ (8108e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8108c8e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108c90:	e03b      	b.n	8108d0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8108c92:	4b74      	ldr	r3, [pc, #464]	@ (8108e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8108c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8108c98:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8108c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108c9e:	4b71      	ldr	r3, [pc, #452]	@ (8108e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8108ca0:	681b      	ldr	r3, [r3, #0]
 8108ca2:	f003 0302 	and.w	r3, r3, #2
 8108ca6:	2b02      	cmp	r3, #2
 8108ca8:	d10c      	bne.n	8108cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8108caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108cac:	2b00      	cmp	r3, #0
 8108cae:	d109      	bne.n	8108cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8108cb0:	4b6c      	ldr	r3, [pc, #432]	@ (8108e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8108cb2:	681b      	ldr	r3, [r3, #0]
 8108cb4:	08db      	lsrs	r3, r3, #3
 8108cb6:	f003 0303 	and.w	r3, r3, #3
 8108cba:	4a6c      	ldr	r2, [pc, #432]	@ (8108e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8108cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8108cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8108cc2:	e01e      	b.n	8108d02 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108cc4:	4b67      	ldr	r3, [pc, #412]	@ (8108e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8108cc6:	681b      	ldr	r3, [r3, #0]
 8108cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8108ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108cd0:	d106      	bne.n	8108ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8108cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108cd8:	d102      	bne.n	8108ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8108cda:	4b65      	ldr	r3, [pc, #404]	@ (8108e70 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8108cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8108cde:	e010      	b.n	8108d02 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108ce0:	4b60      	ldr	r3, [pc, #384]	@ (8108e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8108ce2:	681b      	ldr	r3, [r3, #0]
 8108ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108ce8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108cec:	d106      	bne.n	8108cfc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8108cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8108cf4:	d102      	bne.n	8108cfc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8108cf6:	4b5f      	ldr	r3, [pc, #380]	@ (8108e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8108cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8108cfa:	e002      	b.n	8108d02 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8108cfc:	2300      	movs	r3, #0
 8108cfe:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8108d00:	e003      	b.n	8108d0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8108d02:	e002      	b.n	8108d0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8108d04:	2300      	movs	r3, #0
 8108d06:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108d08:	bf00      	nop
          }
        }
        break;
 8108d0a:	e2d6      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8108d0c:	4b55      	ldr	r3, [pc, #340]	@ (8108e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8108d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8108d12:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8108d16:	633b      	str	r3, [r7, #48]	@ 0x30
 8108d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108d1e:	d031      	beq.n	8108d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8108d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108d26:	d866      	bhi.n	8108df6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8108d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8108d2c:	d027      	beq.n	8108d7e <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8108d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d30:	2bc0      	cmp	r3, #192	@ 0xc0
 8108d32:	d860      	bhi.n	8108df6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8108d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d36:	2b80      	cmp	r3, #128	@ 0x80
 8108d38:	d019      	beq.n	8108d6e <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8108d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d3c:	2b80      	cmp	r3, #128	@ 0x80
 8108d3e:	d85a      	bhi.n	8108df6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8108d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d42:	2b00      	cmp	r3, #0
 8108d44:	d003      	beq.n	8108d4e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8108d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d48:	2b40      	cmp	r3, #64	@ 0x40
 8108d4a:	d008      	beq.n	8108d5e <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8108d4c:	e053      	b.n	8108df6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108d4e:	f107 0320 	add.w	r3, r7, #32
 8108d52:	4618      	mov	r0, r3
 8108d54:	f7fd fb28 	bl	81063a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8108d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108d5a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108d5c:	e04e      	b.n	8108dfc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108d5e:	f107 0314 	add.w	r3, r7, #20
 8108d62:	4618      	mov	r0, r3
 8108d64:	f7fd fc8a 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8108d68:	697b      	ldr	r3, [r7, #20]
 8108d6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108d6c:	e046      	b.n	8108dfc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108d6e:	f107 0308 	add.w	r3, r7, #8
 8108d72:	4618      	mov	r0, r3
 8108d74:	f7fd fdec 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8108d78:	68bb      	ldr	r3, [r7, #8]
 8108d7a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108d7c:	e03e      	b.n	8108dfc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8108d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8108e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8108d80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108d82:	e03b      	b.n	8108dfc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8108d84:	4b37      	ldr	r3, [pc, #220]	@ (8108e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8108d86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8108d8a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8108d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108d90:	4b34      	ldr	r3, [pc, #208]	@ (8108e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8108d92:	681b      	ldr	r3, [r3, #0]
 8108d94:	f003 0302 	and.w	r3, r3, #2
 8108d98:	2b02      	cmp	r3, #2
 8108d9a:	d10c      	bne.n	8108db6 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8108d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108d9e:	2b00      	cmp	r3, #0
 8108da0:	d109      	bne.n	8108db6 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8108da2:	4b30      	ldr	r3, [pc, #192]	@ (8108e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8108da4:	681b      	ldr	r3, [r3, #0]
 8108da6:	08db      	lsrs	r3, r3, #3
 8108da8:	f003 0303 	and.w	r3, r3, #3
 8108dac:	4a2f      	ldr	r2, [pc, #188]	@ (8108e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8108dae:	fa22 f303 	lsr.w	r3, r2, r3
 8108db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8108db4:	e01e      	b.n	8108df4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108db6:	4b2b      	ldr	r3, [pc, #172]	@ (8108e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8108db8:	681b      	ldr	r3, [r3, #0]
 8108dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8108dbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108dc2:	d106      	bne.n	8108dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8108dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108dca:	d102      	bne.n	8108dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8108dcc:	4b28      	ldr	r3, [pc, #160]	@ (8108e70 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8108dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8108dd0:	e010      	b.n	8108df4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108dd2:	4b24      	ldr	r3, [pc, #144]	@ (8108e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8108dd4:	681b      	ldr	r3, [r3, #0]
 8108dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108dda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108dde:	d106      	bne.n	8108dee <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8108de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108de2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8108de6:	d102      	bne.n	8108dee <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8108de8:	4b22      	ldr	r3, [pc, #136]	@ (8108e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8108dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8108dec:	e002      	b.n	8108df4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8108dee:	2300      	movs	r3, #0
 8108df0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8108df2:	e003      	b.n	8108dfc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8108df4:	e002      	b.n	8108dfc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8108df6:	2300      	movs	r3, #0
 8108df8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8108dfa:	bf00      	nop
          }
        }
        break;
 8108dfc:	e25d      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8108dfe:	4b19      	ldr	r3, [pc, #100]	@ (8108e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8108e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8108e04:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8108e08:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8108e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e0c:	2b00      	cmp	r3, #0
 8108e0e:	d103      	bne.n	8108e18 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8108e10:	f7fb fadc 	bl	81043cc <HAL_RCC_GetPCLK2Freq>
 8108e14:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8108e16:	e250      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8108e18:	4b12      	ldr	r3, [pc, #72]	@ (8108e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8108e1a:	681b      	ldr	r3, [r3, #0]
 8108e1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108e20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108e24:	d10b      	bne.n	8108e3e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8108e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108e2c:	d107      	bne.n	8108e3e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108e2e:	f107 0314 	add.w	r3, r7, #20
 8108e32:	4618      	mov	r0, r3
 8108e34:	f7fd fc22 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8108e38:	69bb      	ldr	r3, [r7, #24]
 8108e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8108e3c:	e04f      	b.n	8108ede <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8108e3e:	4b09      	ldr	r3, [pc, #36]	@ (8108e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8108e40:	681b      	ldr	r3, [r3, #0]
 8108e42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108e4a:	d115      	bne.n	8108e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8108e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8108e52:	d111      	bne.n	8108e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108e54:	f107 0308 	add.w	r3, r7, #8
 8108e58:	4618      	mov	r0, r3
 8108e5a:	f7fd fd79 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8108e5e:	68fb      	ldr	r3, [r7, #12]
 8108e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8108e62:	e03c      	b.n	8108ede <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8108e64:	44020c00 	.word	0x44020c00
 8108e68:	00bb8000 	.word	0x00bb8000
 8108e6c:	03d09000 	.word	0x03d09000
 8108e70:	003d0900 	.word	0x003d0900
 8108e74:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8108e78:	4b94      	ldr	r3, [pc, #592]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8108e7a:	681b      	ldr	r3, [r3, #0]
 8108e7c:	f003 0302 	and.w	r3, r3, #2
 8108e80:	2b02      	cmp	r3, #2
 8108e82:	d10d      	bne.n	8108ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8108e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e86:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8108e8a:	d109      	bne.n	8108ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8108e8c:	4b8f      	ldr	r3, [pc, #572]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8108e8e:	681b      	ldr	r3, [r3, #0]
 8108e90:	08db      	lsrs	r3, r3, #3
 8108e92:	f003 0303 	and.w	r3, r3, #3
 8108e96:	4a8e      	ldr	r2, [pc, #568]	@ (81090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8108e98:	fa22 f303 	lsr.w	r3, r2, r3
 8108e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8108e9e:	e01e      	b.n	8108ede <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8108ea0:	4b8a      	ldr	r3, [pc, #552]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8108ea2:	681b      	ldr	r3, [r3, #0]
 8108ea4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8108ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108eac:	d106      	bne.n	8108ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8108eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108eb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8108eb4:	d102      	bne.n	8108ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8108eb6:	4b87      	ldr	r3, [pc, #540]	@ (81090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8108eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8108eba:	e010      	b.n	8108ede <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8108ebc:	4b83      	ldr	r3, [pc, #524]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8108ebe:	681b      	ldr	r3, [r3, #0]
 8108ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108ec4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108ec8:	d106      	bne.n	8108ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8108eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ecc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8108ed0:	d102      	bne.n	8108ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8108ed2:	4b81      	ldr	r3, [pc, #516]	@ (81090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8108ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8108ed6:	e002      	b.n	8108ede <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8108ed8:	2300      	movs	r3, #0
 8108eda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8108edc:	e1ed      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8108ede:	e1ec      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8108ee0:	4b7a      	ldr	r3, [pc, #488]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8108ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8108ee6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8108eea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8108eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108eee:	2b00      	cmp	r3, #0
 8108ef0:	d103      	bne.n	8108efa <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8108ef2:	f7fb fa81 	bl	81043f8 <HAL_RCC_GetPCLK3Freq>
 8108ef6:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8108ef8:	e1df      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8108efa:	4b74      	ldr	r3, [pc, #464]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8108efc:	681b      	ldr	r3, [r3, #0]
 8108efe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108f02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108f06:	d10b      	bne.n	8108f20 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8108f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108f0e:	d107      	bne.n	8108f20 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108f10:	f107 0314 	add.w	r3, r7, #20
 8108f14:	4618      	mov	r0, r3
 8108f16:	f7fd fbb1 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8108f1a:	69bb      	ldr	r3, [r7, #24]
 8108f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8108f1e:	e045      	b.n	8108fac <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8108f20:	4b6a      	ldr	r3, [pc, #424]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8108f22:	681b      	ldr	r3, [r3, #0]
 8108f24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108f2c:	d10b      	bne.n	8108f46 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8108f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108f30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8108f34:	d107      	bne.n	8108f46 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108f36:	f107 0308 	add.w	r3, r7, #8
 8108f3a:	4618      	mov	r0, r3
 8108f3c:	f7fd fd08 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8108f40:	68fb      	ldr	r3, [r7, #12]
 8108f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8108f44:	e032      	b.n	8108fac <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8108f46:	4b61      	ldr	r3, [pc, #388]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8108f48:	681b      	ldr	r3, [r3, #0]
 8108f4a:	f003 0302 	and.w	r3, r3, #2
 8108f4e:	2b02      	cmp	r3, #2
 8108f50:	d10d      	bne.n	8108f6e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8108f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108f54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8108f58:	d109      	bne.n	8108f6e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8108f5a:	4b5c      	ldr	r3, [pc, #368]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8108f5c:	681b      	ldr	r3, [r3, #0]
 8108f5e:	08db      	lsrs	r3, r3, #3
 8108f60:	f003 0303 	and.w	r3, r3, #3
 8108f64:	4a5a      	ldr	r2, [pc, #360]	@ (81090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8108f66:	fa22 f303 	lsr.w	r3, r2, r3
 8108f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8108f6c:	e01e      	b.n	8108fac <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8108f6e:	4b57      	ldr	r3, [pc, #348]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8108f70:	681b      	ldr	r3, [r3, #0]
 8108f72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8108f76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108f7a:	d106      	bne.n	8108f8a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8108f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108f7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108f82:	d102      	bne.n	8108f8a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8108f84:	4b53      	ldr	r3, [pc, #332]	@ (81090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8108f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8108f88:	e010      	b.n	8108fac <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8108f8a:	4b50      	ldr	r3, [pc, #320]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8108f8c:	681b      	ldr	r3, [r3, #0]
 8108f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108f92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108f96:	d106      	bne.n	8108fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8108f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108f9a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8108f9e:	d102      	bne.n	8108fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8108fa0:	4b4d      	ldr	r3, [pc, #308]	@ (81090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8108fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8108fa4:	e002      	b.n	8108fac <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8108fa6:	2300      	movs	r3, #0
 8108fa8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8108faa:	e186      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8108fac:	e185      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8108fae:	4b47      	ldr	r3, [pc, #284]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8108fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8108fb4:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8108fb8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8108fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108fbc:	2b00      	cmp	r3, #0
 8108fbe:	d103      	bne.n	8108fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8108fc0:	f7fb fa04 	bl	81043cc <HAL_RCC_GetPCLK2Freq>
 8108fc4:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8108fc6:	e178      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8108fc8:	4b40      	ldr	r3, [pc, #256]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8108fca:	681b      	ldr	r3, [r3, #0]
 8108fcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108fd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108fd4:	d10b      	bne.n	8108fee <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8108fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8108fdc:	d107      	bne.n	8108fee <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108fde:	f107 0314 	add.w	r3, r7, #20
 8108fe2:	4618      	mov	r0, r3
 8108fe4:	f7fd fb4a 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8108fe8:	69bb      	ldr	r3, [r7, #24]
 8108fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8108fec:	e045      	b.n	810907a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8108fee:	4b37      	ldr	r3, [pc, #220]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8108ff0:	681b      	ldr	r3, [r3, #0]
 8108ff2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108ff6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108ffa:	d10b      	bne.n	8109014 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8108ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109002:	d107      	bne.n	8109014 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109004:	f107 0308 	add.w	r3, r7, #8
 8109008:	4618      	mov	r0, r3
 810900a:	f7fd fca1 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810900e:	68fb      	ldr	r3, [r7, #12]
 8109010:	637b      	str	r3, [r7, #52]	@ 0x34
 8109012:	e032      	b.n	810907a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8109014:	4b2d      	ldr	r3, [pc, #180]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8109016:	681b      	ldr	r3, [r3, #0]
 8109018:	f003 0302 	and.w	r3, r3, #2
 810901c:	2b02      	cmp	r3, #2
 810901e:	d10d      	bne.n	810903c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8109020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109022:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8109026:	d109      	bne.n	810903c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8109028:	4b28      	ldr	r3, [pc, #160]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 810902a:	681b      	ldr	r3, [r3, #0]
 810902c:	08db      	lsrs	r3, r3, #3
 810902e:	f003 0303 	and.w	r3, r3, #3
 8109032:	4a27      	ldr	r2, [pc, #156]	@ (81090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8109034:	fa22 f303 	lsr.w	r3, r2, r3
 8109038:	637b      	str	r3, [r7, #52]	@ 0x34
 810903a:	e01e      	b.n	810907a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 810903c:	4b23      	ldr	r3, [pc, #140]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 810903e:	681b      	ldr	r3, [r3, #0]
 8109040:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8109044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8109048:	d106      	bne.n	8109058 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 810904a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810904c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109050:	d102      	bne.n	8109058 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8109052:	4b20      	ldr	r3, [pc, #128]	@ (81090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8109054:	637b      	str	r3, [r7, #52]	@ 0x34
 8109056:	e010      	b.n	810907a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8109058:	4b1c      	ldr	r3, [pc, #112]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 810905a:	681b      	ldr	r3, [r3, #0]
 810905c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109060:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109064:	d106      	bne.n	8109074 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8109066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109068:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 810906c:	d102      	bne.n	8109074 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 810906e:	4b1a      	ldr	r3, [pc, #104]	@ (81090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8109070:	637b      	str	r3, [r7, #52]	@ 0x34
 8109072:	e002      	b.n	810907a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8109074:	2300      	movs	r3, #0
 8109076:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8109078:	e11f      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 810907a:	e11e      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 810907c:	4b13      	ldr	r3, [pc, #76]	@ (81090cc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 810907e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8109082:	f003 0303 	and.w	r3, r3, #3
 8109086:	633b      	str	r3, [r7, #48]	@ 0x30
 8109088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810908a:	2b03      	cmp	r3, #3
 810908c:	d85f      	bhi.n	810914e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 810908e:	a201      	add	r2, pc, #4	@ (adr r2, 8109094 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8109090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109094:	081090a5 	.word	0x081090a5
 8109098:	081090ad 	.word	0x081090ad
 810909c:	081090bd 	.word	0x081090bd
 81090a0:	081090dd 	.word	0x081090dd

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 81090a4:	f7fb f960 	bl	8104368 <HAL_RCC_GetHCLKFreq>
 81090a8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 81090aa:	e053      	b.n	8109154 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81090ac:	f107 0320 	add.w	r3, r7, #32
 81090b0:	4618      	mov	r0, r3
 81090b2:	f7fd f979 	bl	81063a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 81090b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81090b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 81090ba:	e04b      	b.n	8109154 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81090bc:	f107 0314 	add.w	r3, r7, #20
 81090c0:	4618      	mov	r0, r3
 81090c2:	f7fd fadb 	bl	810667c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 81090c6:	69fb      	ldr	r3, [r7, #28]
 81090c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 81090ca:	e043      	b.n	8109154 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 81090cc:	44020c00 	.word	0x44020c00
 81090d0:	03d09000 	.word	0x03d09000
 81090d4:	003d0900 	.word	0x003d0900
 81090d8:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81090dc:	4b79      	ldr	r3, [pc, #484]	@ (81092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 81090de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81090e2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 81090e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81090e8:	4b76      	ldr	r3, [pc, #472]	@ (81092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 81090ea:	681b      	ldr	r3, [r3, #0]
 81090ec:	f003 0302 	and.w	r3, r3, #2
 81090f0:	2b02      	cmp	r3, #2
 81090f2:	d10c      	bne.n	810910e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 81090f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81090f6:	2b00      	cmp	r3, #0
 81090f8:	d109      	bne.n	810910e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 81090fa:	4b72      	ldr	r3, [pc, #456]	@ (81092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 81090fc:	681b      	ldr	r3, [r3, #0]
 81090fe:	08db      	lsrs	r3, r3, #3
 8109100:	f003 0303 	and.w	r3, r3, #3
 8109104:	4a70      	ldr	r2, [pc, #448]	@ (81092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8109106:	fa22 f303 	lsr.w	r3, r2, r3
 810910a:	637b      	str	r3, [r7, #52]	@ 0x34
 810910c:	e01e      	b.n	810914c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810910e:	4b6d      	ldr	r3, [pc, #436]	@ (81092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8109110:	681b      	ldr	r3, [r3, #0]
 8109112:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8109116:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810911a:	d106      	bne.n	810912a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 810911c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810911e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109122:	d102      	bne.n	810912a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8109124:	4b69      	ldr	r3, [pc, #420]	@ (81092cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8109126:	637b      	str	r3, [r7, #52]	@ 0x34
 8109128:	e010      	b.n	810914c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810912a:	4b66      	ldr	r3, [pc, #408]	@ (81092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 810912c:	681b      	ldr	r3, [r3, #0]
 810912e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109132:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109136:	d106      	bne.n	8109146 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8109138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810913a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810913e:	d102      	bne.n	8109146 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8109140:	4b63      	ldr	r3, [pc, #396]	@ (81092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8109142:	637b      	str	r3, [r7, #52]	@ 0x34
 8109144:	e002      	b.n	810914c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8109146:	2300      	movs	r3, #0
 8109148:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 810914a:	e003      	b.n	8109154 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 810914c:	e002      	b.n	8109154 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 810914e:	2300      	movs	r3, #0
 8109150:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8109152:	bf00      	nop
          }
        }
        break;
 8109154:	e0b1      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8109156:	4b5b      	ldr	r3, [pc, #364]	@ (81092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8109158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810915c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8109160:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8109162:	4b58      	ldr	r3, [pc, #352]	@ (81092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8109164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8109168:	f003 0302 	and.w	r3, r3, #2
 810916c:	2b02      	cmp	r3, #2
 810916e:	d106      	bne.n	810917e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8109170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109172:	2b00      	cmp	r3, #0
 8109174:	d103      	bne.n	810917e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8109176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810917a:	637b      	str	r3, [r7, #52]	@ 0x34
 810917c:	e01f      	b.n	81091be <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 810917e:	4b51      	ldr	r3, [pc, #324]	@ (81092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8109180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8109184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109188:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810918c:	d106      	bne.n	810919c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 810918e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109190:	2b40      	cmp	r3, #64	@ 0x40
 8109192:	d103      	bne.n	810919c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8109194:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8109198:	637b      	str	r3, [r7, #52]	@ 0x34
 810919a:	e010      	b.n	81091be <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 810919c:	4b49      	ldr	r3, [pc, #292]	@ (81092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 810919e:	681b      	ldr	r3, [r3, #0]
 81091a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81091a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81091a8:	d106      	bne.n	81091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 81091aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81091ac:	2b80      	cmp	r3, #128	@ 0x80
 81091ae:	d103      	bne.n	81091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 81091b0:	f248 0312 	movw	r3, #32786	@ 0x8012
 81091b4:	637b      	str	r3, [r7, #52]	@ 0x34
 81091b6:	e002      	b.n	81091be <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 81091b8:	2300      	movs	r3, #0
 81091ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 81091bc:	e07d      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 81091be:	e07c      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 81091c0:	4b40      	ldr	r3, [pc, #256]	@ (81092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 81091c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81091c6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 81091ca:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 81091cc:	4b3d      	ldr	r3, [pc, #244]	@ (81092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 81091ce:	681b      	ldr	r3, [r3, #0]
 81091d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81091d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81091d8:	d105      	bne.n	81091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 81091da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81091dc:	2b00      	cmp	r3, #0
 81091de:	d102      	bne.n	81091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 81091e0:	4b3c      	ldr	r3, [pc, #240]	@ (81092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 81091e2:	637b      	str	r3, [r7, #52]	@ 0x34
 81091e4:	e031      	b.n	810924a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 81091e6:	4b37      	ldr	r3, [pc, #220]	@ (81092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 81091e8:	681b      	ldr	r3, [r3, #0]
 81091ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81091ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81091f2:	d10a      	bne.n	810920a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 81091f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81091f6:	2b10      	cmp	r3, #16
 81091f8:	d107      	bne.n	810920a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81091fa:	f107 0320 	add.w	r3, r7, #32
 81091fe:	4618      	mov	r0, r3
 8109200:	f7fd f8d2 	bl	81063a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8109204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109206:	637b      	str	r3, [r7, #52]	@ 0x34
 8109208:	e01f      	b.n	810924a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 810920a:	4b2e      	ldr	r3, [pc, #184]	@ (81092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 810920c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8109210:	f003 0302 	and.w	r3, r3, #2
 8109214:	2b02      	cmp	r3, #2
 8109216:	d106      	bne.n	8109226 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8109218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810921a:	2b20      	cmp	r3, #32
 810921c:	d103      	bne.n	8109226 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 810921e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8109222:	637b      	str	r3, [r7, #52]	@ 0x34
 8109224:	e011      	b.n	810924a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8109226:	4b27      	ldr	r3, [pc, #156]	@ (81092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8109228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810922c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109230:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109234:	d106      	bne.n	8109244 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8109236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109238:	2b30      	cmp	r3, #48	@ 0x30
 810923a:	d103      	bne.n	8109244 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 810923c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8109240:	637b      	str	r3, [r7, #52]	@ 0x34
 8109242:	e002      	b.n	810924a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8109244:	2300      	movs	r3, #0
 8109246:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8109248:	e037      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 810924a:	e036      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 810924c:	4b1d      	ldr	r3, [pc, #116]	@ (81092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 810924e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8109252:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8109256:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8109258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810925a:	2b10      	cmp	r3, #16
 810925c:	d107      	bne.n	810926e <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810925e:	f107 0320 	add.w	r3, r7, #32
 8109262:	4618      	mov	r0, r3
 8109264:	f7fd f8a0 	bl	81063a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8109268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810926a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 810926c:	e025      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 810926e:	4b15      	ldr	r3, [pc, #84]	@ (81092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8109270:	681b      	ldr	r3, [r3, #0]
 8109272:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810927a:	d10a      	bne.n	8109292 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 810927c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810927e:	2b20      	cmp	r3, #32
 8109280:	d107      	bne.n	8109292 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109282:	f107 0308 	add.w	r3, r7, #8
 8109286:	4618      	mov	r0, r3
 8109288:	f7fd fb62 	bl	8106950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810928c:	68fb      	ldr	r3, [r7, #12]
 810928e:	637b      	str	r3, [r7, #52]	@ 0x34
 8109290:	e00f      	b.n	81092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8109292:	4b0c      	ldr	r3, [pc, #48]	@ (81092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8109294:	681b      	ldr	r3, [r3, #0]
 8109296:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810929a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810929e:	d105      	bne.n	81092ac <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 81092a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81092a2:	2b30      	cmp	r3, #48	@ 0x30
 81092a4:	d102      	bne.n	81092ac <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 81092a6:	4b0b      	ldr	r3, [pc, #44]	@ (81092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 81092a8:	637b      	str	r3, [r7, #52]	@ 0x34
 81092aa:	e002      	b.n	81092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 81092ac:	2300      	movs	r3, #0
 81092ae:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 81092b0:	e003      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 81092b2:	e002      	b.n	81092ba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 81092b4:	2300      	movs	r3, #0
 81092b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 81092b8:	bf00      	nop
    }
  }

  return (frequency);
 81092ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 81092bc:	4618      	mov	r0, r3
 81092be:	373c      	adds	r7, #60	@ 0x3c
 81092c0:	46bd      	mov	sp, r7
 81092c2:	bd90      	pop	{r4, r7, pc}
 81092c4:	44020c00 	.word	0x44020c00
 81092c8:	03d09000 	.word	0x03d09000
 81092cc:	003d0900 	.word	0x003d0900
 81092d0:	007a1200 	.word	0x007a1200
 81092d4:	02dc6c00 	.word	0x02dc6c00

081092d8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 81092d8:	b580      	push	{r7, lr}
 81092da:	b084      	sub	sp, #16
 81092dc:	af00      	add	r7, sp, #0
 81092de:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 81092e0:	4b48      	ldr	r3, [pc, #288]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 81092e2:	681b      	ldr	r3, [r3, #0]
 81092e4:	4a47      	ldr	r2, [pc, #284]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 81092e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81092ea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 81092ec:	f7f8 f8de 	bl	81014ac <HAL_GetTick>
 81092f0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81092f2:	e008      	b.n	8109306 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81092f4:	f7f8 f8da 	bl	81014ac <HAL_GetTick>
 81092f8:	4602      	mov	r2, r0
 81092fa:	68fb      	ldr	r3, [r7, #12]
 81092fc:	1ad3      	subs	r3, r2, r3
 81092fe:	2b02      	cmp	r3, #2
 8109300:	d901      	bls.n	8109306 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8109302:	2303      	movs	r3, #3
 8109304:	e07a      	b.n	81093fc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8109306:	4b3f      	ldr	r3, [pc, #252]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 8109308:	681b      	ldr	r3, [r3, #0]
 810930a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810930e:	2b00      	cmp	r3, #0
 8109310:	d1f0      	bne.n	81092f4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8109312:	4b3c      	ldr	r3, [pc, #240]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 8109314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109316:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 810931a:	f023 0303 	bic.w	r3, r3, #3
 810931e:	687a      	ldr	r2, [r7, #4]
 8109320:	6811      	ldr	r1, [r2, #0]
 8109322:	687a      	ldr	r2, [r7, #4]
 8109324:	6852      	ldr	r2, [r2, #4]
 8109326:	0212      	lsls	r2, r2, #8
 8109328:	430a      	orrs	r2, r1
 810932a:	4936      	ldr	r1, [pc, #216]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 810932c:	4313      	orrs	r3, r2
 810932e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8109330:	687b      	ldr	r3, [r7, #4]
 8109332:	689b      	ldr	r3, [r3, #8]
 8109334:	3b01      	subs	r3, #1
 8109336:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810933a:	687b      	ldr	r3, [r7, #4]
 810933c:	68db      	ldr	r3, [r3, #12]
 810933e:	3b01      	subs	r3, #1
 8109340:	025b      	lsls	r3, r3, #9
 8109342:	b29b      	uxth	r3, r3
 8109344:	431a      	orrs	r2, r3
 8109346:	687b      	ldr	r3, [r7, #4]
 8109348:	691b      	ldr	r3, [r3, #16]
 810934a:	3b01      	subs	r3, #1
 810934c:	041b      	lsls	r3, r3, #16
 810934e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8109352:	431a      	orrs	r2, r3
 8109354:	687b      	ldr	r3, [r7, #4]
 8109356:	695b      	ldr	r3, [r3, #20]
 8109358:	3b01      	subs	r3, #1
 810935a:	061b      	lsls	r3, r3, #24
 810935c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8109360:	4928      	ldr	r1, [pc, #160]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 8109362:	4313      	orrs	r3, r2
 8109364:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8109366:	4b27      	ldr	r3, [pc, #156]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 8109368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810936a:	f023 020c 	bic.w	r2, r3, #12
 810936e:	687b      	ldr	r3, [r7, #4]
 8109370:	699b      	ldr	r3, [r3, #24]
 8109372:	4924      	ldr	r1, [pc, #144]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 8109374:	4313      	orrs	r3, r2
 8109376:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8109378:	4b22      	ldr	r3, [pc, #136]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 810937a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810937c:	f023 0220 	bic.w	r2, r3, #32
 8109380:	687b      	ldr	r3, [r7, #4]
 8109382:	69db      	ldr	r3, [r3, #28]
 8109384:	491f      	ldr	r1, [pc, #124]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 8109386:	4313      	orrs	r3, r2
 8109388:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 810938a:	4b1e      	ldr	r3, [pc, #120]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 810938c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810938e:	687b      	ldr	r3, [r7, #4]
 8109390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109392:	491c      	ldr	r1, [pc, #112]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 8109394:	4313      	orrs	r3, r2
 8109396:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8109398:	4b1a      	ldr	r3, [pc, #104]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 810939a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810939c:	4a19      	ldr	r2, [pc, #100]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 810939e:	f023 0310 	bic.w	r3, r3, #16
 81093a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 81093a4:	4b17      	ldr	r3, [pc, #92]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 81093a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81093a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81093ac:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81093b0:	687a      	ldr	r2, [r7, #4]
 81093b2:	6a12      	ldr	r2, [r2, #32]
 81093b4:	00d2      	lsls	r2, r2, #3
 81093b6:	4913      	ldr	r1, [pc, #76]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 81093b8:	4313      	orrs	r3, r2
 81093ba:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 81093bc:	4b11      	ldr	r3, [pc, #68]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 81093be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81093c0:	4a10      	ldr	r2, [pc, #64]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 81093c2:	f043 0310 	orr.w	r3, r3, #16
 81093c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 81093c8:	4b0e      	ldr	r3, [pc, #56]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 81093ca:	681b      	ldr	r3, [r3, #0]
 81093cc:	4a0d      	ldr	r2, [pc, #52]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 81093ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81093d2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 81093d4:	f7f8 f86a 	bl	81014ac <HAL_GetTick>
 81093d8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81093da:	e008      	b.n	81093ee <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81093dc:	f7f8 f866 	bl	81014ac <HAL_GetTick>
 81093e0:	4602      	mov	r2, r0
 81093e2:	68fb      	ldr	r3, [r7, #12]
 81093e4:	1ad3      	subs	r3, r2, r3
 81093e6:	2b02      	cmp	r3, #2
 81093e8:	d901      	bls.n	81093ee <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 81093ea:	2303      	movs	r3, #3
 81093ec:	e006      	b.n	81093fc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81093ee:	4b05      	ldr	r3, [pc, #20]	@ (8109404 <RCCEx_PLL2_Config+0x12c>)
 81093f0:	681b      	ldr	r3, [r3, #0]
 81093f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81093f6:	2b00      	cmp	r3, #0
 81093f8:	d0f0      	beq.n	81093dc <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 81093fa:	2300      	movs	r3, #0

}
 81093fc:	4618      	mov	r0, r3
 81093fe:	3710      	adds	r7, #16
 8109400:	46bd      	mov	sp, r7
 8109402:	bd80      	pop	{r7, pc}
 8109404:	44020c00 	.word	0x44020c00

08109408 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8109408:	b580      	push	{r7, lr}
 810940a:	b084      	sub	sp, #16
 810940c:	af00      	add	r7, sp, #0
 810940e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8109410:	4b48      	ldr	r3, [pc, #288]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 8109412:	681b      	ldr	r3, [r3, #0]
 8109414:	4a47      	ldr	r2, [pc, #284]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 8109416:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810941a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 810941c:	f7f8 f846 	bl	81014ac <HAL_GetTick>
 8109420:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8109422:	e008      	b.n	8109436 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8109424:	f7f8 f842 	bl	81014ac <HAL_GetTick>
 8109428:	4602      	mov	r2, r0
 810942a:	68fb      	ldr	r3, [r7, #12]
 810942c:	1ad3      	subs	r3, r2, r3
 810942e:	2b02      	cmp	r3, #2
 8109430:	d901      	bls.n	8109436 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8109432:	2303      	movs	r3, #3
 8109434:	e07a      	b.n	810952c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8109436:	4b3f      	ldr	r3, [pc, #252]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 8109438:	681b      	ldr	r3, [r3, #0]
 810943a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810943e:	2b00      	cmp	r3, #0
 8109440:	d1f0      	bne.n	8109424 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8109442:	4b3c      	ldr	r3, [pc, #240]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 8109444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109446:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 810944a:	f023 0303 	bic.w	r3, r3, #3
 810944e:	687a      	ldr	r2, [r7, #4]
 8109450:	6811      	ldr	r1, [r2, #0]
 8109452:	687a      	ldr	r2, [r7, #4]
 8109454:	6852      	ldr	r2, [r2, #4]
 8109456:	0212      	lsls	r2, r2, #8
 8109458:	430a      	orrs	r2, r1
 810945a:	4936      	ldr	r1, [pc, #216]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 810945c:	4313      	orrs	r3, r2
 810945e:	630b      	str	r3, [r1, #48]	@ 0x30
 8109460:	687b      	ldr	r3, [r7, #4]
 8109462:	689b      	ldr	r3, [r3, #8]
 8109464:	3b01      	subs	r3, #1
 8109466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810946a:	687b      	ldr	r3, [r7, #4]
 810946c:	68db      	ldr	r3, [r3, #12]
 810946e:	3b01      	subs	r3, #1
 8109470:	025b      	lsls	r3, r3, #9
 8109472:	b29b      	uxth	r3, r3
 8109474:	431a      	orrs	r2, r3
 8109476:	687b      	ldr	r3, [r7, #4]
 8109478:	691b      	ldr	r3, [r3, #16]
 810947a:	3b01      	subs	r3, #1
 810947c:	041b      	lsls	r3, r3, #16
 810947e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8109482:	431a      	orrs	r2, r3
 8109484:	687b      	ldr	r3, [r7, #4]
 8109486:	695b      	ldr	r3, [r3, #20]
 8109488:	3b01      	subs	r3, #1
 810948a:	061b      	lsls	r3, r3, #24
 810948c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8109490:	4928      	ldr	r1, [pc, #160]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 8109492:	4313      	orrs	r3, r2
 8109494:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8109496:	4b27      	ldr	r3, [pc, #156]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 8109498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810949a:	f023 020c 	bic.w	r2, r3, #12
 810949e:	687b      	ldr	r3, [r7, #4]
 81094a0:	699b      	ldr	r3, [r3, #24]
 81094a2:	4924      	ldr	r1, [pc, #144]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 81094a4:	4313      	orrs	r3, r2
 81094a6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 81094a8:	4b22      	ldr	r3, [pc, #136]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 81094aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81094ac:	f023 0220 	bic.w	r2, r3, #32
 81094b0:	687b      	ldr	r3, [r7, #4]
 81094b2:	69db      	ldr	r3, [r3, #28]
 81094b4:	491f      	ldr	r1, [pc, #124]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 81094b6:	4313      	orrs	r3, r2
 81094b8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 81094ba:	4b1e      	ldr	r3, [pc, #120]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 81094bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81094be:	687b      	ldr	r3, [r7, #4]
 81094c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81094c2:	491c      	ldr	r1, [pc, #112]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 81094c4:	4313      	orrs	r3, r2
 81094c6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 81094c8:	4b1a      	ldr	r3, [pc, #104]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 81094ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81094cc:	4a19      	ldr	r2, [pc, #100]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 81094ce:	f023 0310 	bic.w	r3, r3, #16
 81094d2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 81094d4:	4b17      	ldr	r3, [pc, #92]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 81094d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81094d8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81094dc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81094e0:	687a      	ldr	r2, [r7, #4]
 81094e2:	6a12      	ldr	r2, [r2, #32]
 81094e4:	00d2      	lsls	r2, r2, #3
 81094e6:	4913      	ldr	r1, [pc, #76]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 81094e8:	4313      	orrs	r3, r2
 81094ea:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 81094ec:	4b11      	ldr	r3, [pc, #68]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 81094ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81094f0:	4a10      	ldr	r2, [pc, #64]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 81094f2:	f043 0310 	orr.w	r3, r3, #16
 81094f6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 81094f8:	4b0e      	ldr	r3, [pc, #56]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 81094fa:	681b      	ldr	r3, [r3, #0]
 81094fc:	4a0d      	ldr	r2, [pc, #52]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 81094fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8109502:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8109504:	f7f7 ffd2 	bl	81014ac <HAL_GetTick>
 8109508:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810950a:	e008      	b.n	810951e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810950c:	f7f7 ffce 	bl	81014ac <HAL_GetTick>
 8109510:	4602      	mov	r2, r0
 8109512:	68fb      	ldr	r3, [r7, #12]
 8109514:	1ad3      	subs	r3, r2, r3
 8109516:	2b02      	cmp	r3, #2
 8109518:	d901      	bls.n	810951e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 810951a:	2303      	movs	r3, #3
 810951c:	e006      	b.n	810952c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810951e:	4b05      	ldr	r3, [pc, #20]	@ (8109534 <RCCEx_PLL3_Config+0x12c>)
 8109520:	681b      	ldr	r3, [r3, #0]
 8109522:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109526:	2b00      	cmp	r3, #0
 8109528:	d0f0      	beq.n	810950c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 810952a:	2300      	movs	r3, #0
}
 810952c:	4618      	mov	r0, r3
 810952e:	3710      	adds	r7, #16
 8109530:	46bd      	mov	sp, r7
 8109532:	bd80      	pop	{r7, pc}
 8109534:	44020c00 	.word	0x44020c00

08109538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8109538:	b580      	push	{r7, lr}
 810953a:	b082      	sub	sp, #8
 810953c:	af00      	add	r7, sp, #0
 810953e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109540:	687b      	ldr	r3, [r7, #4]
 8109542:	2b00      	cmp	r3, #0
 8109544:	d101      	bne.n	810954a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8109546:	2301      	movs	r3, #1
 8109548:	e049      	b.n	81095de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810954a:	687b      	ldr	r3, [r7, #4]
 810954c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8109550:	b2db      	uxtb	r3, r3
 8109552:	2b00      	cmp	r3, #0
 8109554:	d106      	bne.n	8109564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8109556:	687b      	ldr	r3, [r7, #4]
 8109558:	2200      	movs	r2, #0
 810955a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810955e:	6878      	ldr	r0, [r7, #4]
 8109560:	f000 f841 	bl	81095e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109564:	687b      	ldr	r3, [r7, #4]
 8109566:	2202      	movs	r2, #2
 8109568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810956c:	687b      	ldr	r3, [r7, #4]
 810956e:	681a      	ldr	r2, [r3, #0]
 8109570:	687b      	ldr	r3, [r7, #4]
 8109572:	3304      	adds	r3, #4
 8109574:	4619      	mov	r1, r3
 8109576:	4610      	mov	r0, r2
 8109578:	f000 fa66 	bl	8109a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810957c:	687b      	ldr	r3, [r7, #4]
 810957e:	2201      	movs	r2, #1
 8109580:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109584:	687b      	ldr	r3, [r7, #4]
 8109586:	2201      	movs	r2, #1
 8109588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810958c:	687b      	ldr	r3, [r7, #4]
 810958e:	2201      	movs	r2, #1
 8109590:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8109594:	687b      	ldr	r3, [r7, #4]
 8109596:	2201      	movs	r2, #1
 8109598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810959c:	687b      	ldr	r3, [r7, #4]
 810959e:	2201      	movs	r2, #1
 81095a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81095a4:	687b      	ldr	r3, [r7, #4]
 81095a6:	2201      	movs	r2, #1
 81095a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 81095ac:	687b      	ldr	r3, [r7, #4]
 81095ae:	2201      	movs	r2, #1
 81095b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81095b4:	687b      	ldr	r3, [r7, #4]
 81095b6:	2201      	movs	r2, #1
 81095b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81095bc:	687b      	ldr	r3, [r7, #4]
 81095be:	2201      	movs	r2, #1
 81095c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81095c4:	687b      	ldr	r3, [r7, #4]
 81095c6:	2201      	movs	r2, #1
 81095c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 81095cc:	687b      	ldr	r3, [r7, #4]
 81095ce:	2201      	movs	r2, #1
 81095d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81095d4:	687b      	ldr	r3, [r7, #4]
 81095d6:	2201      	movs	r2, #1
 81095d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 81095dc:	2300      	movs	r3, #0
}
 81095de:	4618      	mov	r0, r3
 81095e0:	3708      	adds	r7, #8
 81095e2:	46bd      	mov	sp, r7
 81095e4:	bd80      	pop	{r7, pc}

081095e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 81095e6:	b480      	push	{r7}
 81095e8:	b083      	sub	sp, #12
 81095ea:	af00      	add	r7, sp, #0
 81095ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 81095ee:	bf00      	nop
 81095f0:	370c      	adds	r7, #12
 81095f2:	46bd      	mov	sp, r7
 81095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81095f8:	4770      	bx	lr
	...

081095fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81095fc:	b480      	push	{r7}
 81095fe:	b085      	sub	sp, #20
 8109600:	af00      	add	r7, sp, #0
 8109602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8109604:	687b      	ldr	r3, [r7, #4]
 8109606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810960a:	b2db      	uxtb	r3, r3
 810960c:	2b01      	cmp	r3, #1
 810960e:	d001      	beq.n	8109614 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8109610:	2301      	movs	r3, #1
 8109612:	e07c      	b.n	810970e <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109614:	687b      	ldr	r3, [r7, #4]
 8109616:	2202      	movs	r2, #2
 8109618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810961c:	687b      	ldr	r3, [r7, #4]
 810961e:	681b      	ldr	r3, [r3, #0]
 8109620:	68da      	ldr	r2, [r3, #12]
 8109622:	687b      	ldr	r3, [r7, #4]
 8109624:	681b      	ldr	r3, [r3, #0]
 8109626:	f042 0201 	orr.w	r2, r2, #1
 810962a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810962c:	687b      	ldr	r3, [r7, #4]
 810962e:	681b      	ldr	r3, [r3, #0]
 8109630:	4a3a      	ldr	r2, [pc, #232]	@ (810971c <HAL_TIM_Base_Start_IT+0x120>)
 8109632:	4293      	cmp	r3, r2
 8109634:	d04a      	beq.n	81096cc <HAL_TIM_Base_Start_IT+0xd0>
 8109636:	687b      	ldr	r3, [r7, #4]
 8109638:	681b      	ldr	r3, [r3, #0]
 810963a:	4a39      	ldr	r2, [pc, #228]	@ (8109720 <HAL_TIM_Base_Start_IT+0x124>)
 810963c:	4293      	cmp	r3, r2
 810963e:	d045      	beq.n	81096cc <HAL_TIM_Base_Start_IT+0xd0>
 8109640:	687b      	ldr	r3, [r7, #4]
 8109642:	681b      	ldr	r3, [r3, #0]
 8109644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109648:	d040      	beq.n	81096cc <HAL_TIM_Base_Start_IT+0xd0>
 810964a:	687b      	ldr	r3, [r7, #4]
 810964c:	681b      	ldr	r3, [r3, #0]
 810964e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8109652:	d03b      	beq.n	81096cc <HAL_TIM_Base_Start_IT+0xd0>
 8109654:	687b      	ldr	r3, [r7, #4]
 8109656:	681b      	ldr	r3, [r3, #0]
 8109658:	4a32      	ldr	r2, [pc, #200]	@ (8109724 <HAL_TIM_Base_Start_IT+0x128>)
 810965a:	4293      	cmp	r3, r2
 810965c:	d036      	beq.n	81096cc <HAL_TIM_Base_Start_IT+0xd0>
 810965e:	687b      	ldr	r3, [r7, #4]
 8109660:	681b      	ldr	r3, [r3, #0]
 8109662:	4a31      	ldr	r2, [pc, #196]	@ (8109728 <HAL_TIM_Base_Start_IT+0x12c>)
 8109664:	4293      	cmp	r3, r2
 8109666:	d031      	beq.n	81096cc <HAL_TIM_Base_Start_IT+0xd0>
 8109668:	687b      	ldr	r3, [r7, #4]
 810966a:	681b      	ldr	r3, [r3, #0]
 810966c:	4a2f      	ldr	r2, [pc, #188]	@ (810972c <HAL_TIM_Base_Start_IT+0x130>)
 810966e:	4293      	cmp	r3, r2
 8109670:	d02c      	beq.n	81096cc <HAL_TIM_Base_Start_IT+0xd0>
 8109672:	687b      	ldr	r3, [r7, #4]
 8109674:	681b      	ldr	r3, [r3, #0]
 8109676:	4a2e      	ldr	r2, [pc, #184]	@ (8109730 <HAL_TIM_Base_Start_IT+0x134>)
 8109678:	4293      	cmp	r3, r2
 810967a:	d027      	beq.n	81096cc <HAL_TIM_Base_Start_IT+0xd0>
 810967c:	687b      	ldr	r3, [r7, #4]
 810967e:	681b      	ldr	r3, [r3, #0]
 8109680:	4a2c      	ldr	r2, [pc, #176]	@ (8109734 <HAL_TIM_Base_Start_IT+0x138>)
 8109682:	4293      	cmp	r3, r2
 8109684:	d022      	beq.n	81096cc <HAL_TIM_Base_Start_IT+0xd0>
 8109686:	687b      	ldr	r3, [r7, #4]
 8109688:	681b      	ldr	r3, [r3, #0]
 810968a:	4a2b      	ldr	r2, [pc, #172]	@ (8109738 <HAL_TIM_Base_Start_IT+0x13c>)
 810968c:	4293      	cmp	r3, r2
 810968e:	d01d      	beq.n	81096cc <HAL_TIM_Base_Start_IT+0xd0>
 8109690:	687b      	ldr	r3, [r7, #4]
 8109692:	681b      	ldr	r3, [r3, #0]
 8109694:	4a29      	ldr	r2, [pc, #164]	@ (810973c <HAL_TIM_Base_Start_IT+0x140>)
 8109696:	4293      	cmp	r3, r2
 8109698:	d018      	beq.n	81096cc <HAL_TIM_Base_Start_IT+0xd0>
 810969a:	687b      	ldr	r3, [r7, #4]
 810969c:	681b      	ldr	r3, [r3, #0]
 810969e:	4a28      	ldr	r2, [pc, #160]	@ (8109740 <HAL_TIM_Base_Start_IT+0x144>)
 81096a0:	4293      	cmp	r3, r2
 81096a2:	d013      	beq.n	81096cc <HAL_TIM_Base_Start_IT+0xd0>
 81096a4:	687b      	ldr	r3, [r7, #4]
 81096a6:	681b      	ldr	r3, [r3, #0]
 81096a8:	4a26      	ldr	r2, [pc, #152]	@ (8109744 <HAL_TIM_Base_Start_IT+0x148>)
 81096aa:	4293      	cmp	r3, r2
 81096ac:	d00e      	beq.n	81096cc <HAL_TIM_Base_Start_IT+0xd0>
 81096ae:	687b      	ldr	r3, [r7, #4]
 81096b0:	681b      	ldr	r3, [r3, #0]
 81096b2:	4a25      	ldr	r2, [pc, #148]	@ (8109748 <HAL_TIM_Base_Start_IT+0x14c>)
 81096b4:	4293      	cmp	r3, r2
 81096b6:	d009      	beq.n	81096cc <HAL_TIM_Base_Start_IT+0xd0>
 81096b8:	687b      	ldr	r3, [r7, #4]
 81096ba:	681b      	ldr	r3, [r3, #0]
 81096bc:	4a23      	ldr	r2, [pc, #140]	@ (810974c <HAL_TIM_Base_Start_IT+0x150>)
 81096be:	4293      	cmp	r3, r2
 81096c0:	d004      	beq.n	81096cc <HAL_TIM_Base_Start_IT+0xd0>
 81096c2:	687b      	ldr	r3, [r7, #4]
 81096c4:	681b      	ldr	r3, [r3, #0]
 81096c6:	4a22      	ldr	r2, [pc, #136]	@ (8109750 <HAL_TIM_Base_Start_IT+0x154>)
 81096c8:	4293      	cmp	r3, r2
 81096ca:	d115      	bne.n	81096f8 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81096cc:	687b      	ldr	r3, [r7, #4]
 81096ce:	681b      	ldr	r3, [r3, #0]
 81096d0:	689a      	ldr	r2, [r3, #8]
 81096d2:	4b20      	ldr	r3, [pc, #128]	@ (8109754 <HAL_TIM_Base_Start_IT+0x158>)
 81096d4:	4013      	ands	r3, r2
 81096d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81096d8:	68fb      	ldr	r3, [r7, #12]
 81096da:	2b06      	cmp	r3, #6
 81096dc:	d015      	beq.n	810970a <HAL_TIM_Base_Start_IT+0x10e>
 81096de:	68fb      	ldr	r3, [r7, #12]
 81096e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81096e4:	d011      	beq.n	810970a <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 81096e6:	687b      	ldr	r3, [r7, #4]
 81096e8:	681b      	ldr	r3, [r3, #0]
 81096ea:	681a      	ldr	r2, [r3, #0]
 81096ec:	687b      	ldr	r3, [r7, #4]
 81096ee:	681b      	ldr	r3, [r3, #0]
 81096f0:	f042 0201 	orr.w	r2, r2, #1
 81096f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81096f6:	e008      	b.n	810970a <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81096f8:	687b      	ldr	r3, [r7, #4]
 81096fa:	681b      	ldr	r3, [r3, #0]
 81096fc:	681a      	ldr	r2, [r3, #0]
 81096fe:	687b      	ldr	r3, [r7, #4]
 8109700:	681b      	ldr	r3, [r3, #0]
 8109702:	f042 0201 	orr.w	r2, r2, #1
 8109706:	601a      	str	r2, [r3, #0]
 8109708:	e000      	b.n	810970c <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810970a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810970c:	2300      	movs	r3, #0
}
 810970e:	4618      	mov	r0, r3
 8109710:	3714      	adds	r7, #20
 8109712:	46bd      	mov	sp, r7
 8109714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109718:	4770      	bx	lr
 810971a:	bf00      	nop
 810971c:	40012c00 	.word	0x40012c00
 8109720:	50012c00 	.word	0x50012c00
 8109724:	40000400 	.word	0x40000400
 8109728:	50000400 	.word	0x50000400
 810972c:	40000800 	.word	0x40000800
 8109730:	50000800 	.word	0x50000800
 8109734:	40000c00 	.word	0x40000c00
 8109738:	50000c00 	.word	0x50000c00
 810973c:	40013400 	.word	0x40013400
 8109740:	50013400 	.word	0x50013400
 8109744:	40001800 	.word	0x40001800
 8109748:	50001800 	.word	0x50001800
 810974c:	40014000 	.word	0x40014000
 8109750:	50014000 	.word	0x50014000
 8109754:	00010007 	.word	0x00010007

08109758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8109758:	b580      	push	{r7, lr}
 810975a:	b084      	sub	sp, #16
 810975c:	af00      	add	r7, sp, #0
 810975e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8109760:	687b      	ldr	r3, [r7, #4]
 8109762:	681b      	ldr	r3, [r3, #0]
 8109764:	68db      	ldr	r3, [r3, #12]
 8109766:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8109768:	687b      	ldr	r3, [r7, #4]
 810976a:	681b      	ldr	r3, [r3, #0]
 810976c:	691b      	ldr	r3, [r3, #16]
 810976e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8109770:	68bb      	ldr	r3, [r7, #8]
 8109772:	f003 0302 	and.w	r3, r3, #2
 8109776:	2b00      	cmp	r3, #0
 8109778:	d020      	beq.n	81097bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810977a:	68fb      	ldr	r3, [r7, #12]
 810977c:	f003 0302 	and.w	r3, r3, #2
 8109780:	2b00      	cmp	r3, #0
 8109782:	d01b      	beq.n	81097bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8109784:	687b      	ldr	r3, [r7, #4]
 8109786:	681b      	ldr	r3, [r3, #0]
 8109788:	f06f 0202 	mvn.w	r2, #2
 810978c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810978e:	687b      	ldr	r3, [r7, #4]
 8109790:	2201      	movs	r2, #1
 8109792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8109794:	687b      	ldr	r3, [r7, #4]
 8109796:	681b      	ldr	r3, [r3, #0]
 8109798:	699b      	ldr	r3, [r3, #24]
 810979a:	f003 0303 	and.w	r3, r3, #3
 810979e:	2b00      	cmp	r3, #0
 81097a0:	d003      	beq.n	81097aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81097a2:	6878      	ldr	r0, [r7, #4]
 81097a4:	f000 f931 	bl	8109a0a <HAL_TIM_IC_CaptureCallback>
 81097a8:	e005      	b.n	81097b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81097aa:	6878      	ldr	r0, [r7, #4]
 81097ac:	f000 f923 	bl	81099f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81097b0:	6878      	ldr	r0, [r7, #4]
 81097b2:	f000 f934 	bl	8109a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81097b6:	687b      	ldr	r3, [r7, #4]
 81097b8:	2200      	movs	r2, #0
 81097ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 81097bc:	68bb      	ldr	r3, [r7, #8]
 81097be:	f003 0304 	and.w	r3, r3, #4
 81097c2:	2b00      	cmp	r3, #0
 81097c4:	d020      	beq.n	8109808 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 81097c6:	68fb      	ldr	r3, [r7, #12]
 81097c8:	f003 0304 	and.w	r3, r3, #4
 81097cc:	2b00      	cmp	r3, #0
 81097ce:	d01b      	beq.n	8109808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 81097d0:	687b      	ldr	r3, [r7, #4]
 81097d2:	681b      	ldr	r3, [r3, #0]
 81097d4:	f06f 0204 	mvn.w	r2, #4
 81097d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81097da:	687b      	ldr	r3, [r7, #4]
 81097dc:	2202      	movs	r2, #2
 81097de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81097e0:	687b      	ldr	r3, [r7, #4]
 81097e2:	681b      	ldr	r3, [r3, #0]
 81097e4:	699b      	ldr	r3, [r3, #24]
 81097e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81097ea:	2b00      	cmp	r3, #0
 81097ec:	d003      	beq.n	81097f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81097ee:	6878      	ldr	r0, [r7, #4]
 81097f0:	f000 f90b 	bl	8109a0a <HAL_TIM_IC_CaptureCallback>
 81097f4:	e005      	b.n	8109802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81097f6:	6878      	ldr	r0, [r7, #4]
 81097f8:	f000 f8fd 	bl	81099f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81097fc:	6878      	ldr	r0, [r7, #4]
 81097fe:	f000 f90e 	bl	8109a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109802:	687b      	ldr	r3, [r7, #4]
 8109804:	2200      	movs	r2, #0
 8109806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8109808:	68bb      	ldr	r3, [r7, #8]
 810980a:	f003 0308 	and.w	r3, r3, #8
 810980e:	2b00      	cmp	r3, #0
 8109810:	d020      	beq.n	8109854 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8109812:	68fb      	ldr	r3, [r7, #12]
 8109814:	f003 0308 	and.w	r3, r3, #8
 8109818:	2b00      	cmp	r3, #0
 810981a:	d01b      	beq.n	8109854 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810981c:	687b      	ldr	r3, [r7, #4]
 810981e:	681b      	ldr	r3, [r3, #0]
 8109820:	f06f 0208 	mvn.w	r2, #8
 8109824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8109826:	687b      	ldr	r3, [r7, #4]
 8109828:	2204      	movs	r2, #4
 810982a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810982c:	687b      	ldr	r3, [r7, #4]
 810982e:	681b      	ldr	r3, [r3, #0]
 8109830:	69db      	ldr	r3, [r3, #28]
 8109832:	f003 0303 	and.w	r3, r3, #3
 8109836:	2b00      	cmp	r3, #0
 8109838:	d003      	beq.n	8109842 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810983a:	6878      	ldr	r0, [r7, #4]
 810983c:	f000 f8e5 	bl	8109a0a <HAL_TIM_IC_CaptureCallback>
 8109840:	e005      	b.n	810984e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109842:	6878      	ldr	r0, [r7, #4]
 8109844:	f000 f8d7 	bl	81099f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109848:	6878      	ldr	r0, [r7, #4]
 810984a:	f000 f8e8 	bl	8109a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810984e:	687b      	ldr	r3, [r7, #4]
 8109850:	2200      	movs	r2, #0
 8109852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8109854:	68bb      	ldr	r3, [r7, #8]
 8109856:	f003 0310 	and.w	r3, r3, #16
 810985a:	2b00      	cmp	r3, #0
 810985c:	d020      	beq.n	81098a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810985e:	68fb      	ldr	r3, [r7, #12]
 8109860:	f003 0310 	and.w	r3, r3, #16
 8109864:	2b00      	cmp	r3, #0
 8109866:	d01b      	beq.n	81098a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8109868:	687b      	ldr	r3, [r7, #4]
 810986a:	681b      	ldr	r3, [r3, #0]
 810986c:	f06f 0210 	mvn.w	r2, #16
 8109870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8109872:	687b      	ldr	r3, [r7, #4]
 8109874:	2208      	movs	r2, #8
 8109876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8109878:	687b      	ldr	r3, [r7, #4]
 810987a:	681b      	ldr	r3, [r3, #0]
 810987c:	69db      	ldr	r3, [r3, #28]
 810987e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8109882:	2b00      	cmp	r3, #0
 8109884:	d003      	beq.n	810988e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8109886:	6878      	ldr	r0, [r7, #4]
 8109888:	f000 f8bf 	bl	8109a0a <HAL_TIM_IC_CaptureCallback>
 810988c:	e005      	b.n	810989a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810988e:	6878      	ldr	r0, [r7, #4]
 8109890:	f000 f8b1 	bl	81099f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109894:	6878      	ldr	r0, [r7, #4]
 8109896:	f000 f8c2 	bl	8109a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810989a:	687b      	ldr	r3, [r7, #4]
 810989c:	2200      	movs	r2, #0
 810989e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 81098a0:	68bb      	ldr	r3, [r7, #8]
 81098a2:	f003 0301 	and.w	r3, r3, #1
 81098a6:	2b00      	cmp	r3, #0
 81098a8:	d00c      	beq.n	81098c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 81098aa:	68fb      	ldr	r3, [r7, #12]
 81098ac:	f003 0301 	and.w	r3, r3, #1
 81098b0:	2b00      	cmp	r3, #0
 81098b2:	d007      	beq.n	81098c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 81098b4:	687b      	ldr	r3, [r7, #4]
 81098b6:	681b      	ldr	r3, [r3, #0]
 81098b8:	f06f 0201 	mvn.w	r2, #1
 81098bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81098be:	6878      	ldr	r0, [r7, #4]
 81098c0:	f7f7 f9a4 	bl	8100c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 81098c4:	68bb      	ldr	r3, [r7, #8]
 81098c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81098ca:	2b00      	cmp	r3, #0
 81098cc:	d104      	bne.n	81098d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 81098ce:	68bb      	ldr	r3, [r7, #8]
 81098d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 81098d4:	2b00      	cmp	r3, #0
 81098d6:	d00c      	beq.n	81098f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 81098d8:	68fb      	ldr	r3, [r7, #12]
 81098da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81098de:	2b00      	cmp	r3, #0
 81098e0:	d007      	beq.n	81098f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 81098e2:	687b      	ldr	r3, [r7, #4]
 81098e4:	681b      	ldr	r3, [r3, #0]
 81098e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 81098ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81098ec:	6878      	ldr	r0, [r7, #4]
 81098ee:	f000 f9df 	bl	8109cb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 81098f2:	68bb      	ldr	r3, [r7, #8]
 81098f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81098f8:	2b00      	cmp	r3, #0
 81098fa:	d00c      	beq.n	8109916 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 81098fc:	68fb      	ldr	r3, [r7, #12]
 81098fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109902:	2b00      	cmp	r3, #0
 8109904:	d007      	beq.n	8109916 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8109906:	687b      	ldr	r3, [r7, #4]
 8109908:	681b      	ldr	r3, [r3, #0]
 810990a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810990e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8109910:	6878      	ldr	r0, [r7, #4]
 8109912:	f000 f9d7 	bl	8109cc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8109916:	68bb      	ldr	r3, [r7, #8]
 8109918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810991c:	2b00      	cmp	r3, #0
 810991e:	d00c      	beq.n	810993a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8109920:	68fb      	ldr	r3, [r7, #12]
 8109922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109926:	2b00      	cmp	r3, #0
 8109928:	d007      	beq.n	810993a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810992a:	687b      	ldr	r3, [r7, #4]
 810992c:	681b      	ldr	r3, [r3, #0]
 810992e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8109932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8109934:	6878      	ldr	r0, [r7, #4]
 8109936:	f000 f87c 	bl	8109a32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810993a:	68bb      	ldr	r3, [r7, #8]
 810993c:	f003 0320 	and.w	r3, r3, #32
 8109940:	2b00      	cmp	r3, #0
 8109942:	d00c      	beq.n	810995e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8109944:	68fb      	ldr	r3, [r7, #12]
 8109946:	f003 0320 	and.w	r3, r3, #32
 810994a:	2b00      	cmp	r3, #0
 810994c:	d007      	beq.n	810995e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810994e:	687b      	ldr	r3, [r7, #4]
 8109950:	681b      	ldr	r3, [r3, #0]
 8109952:	f06f 0220 	mvn.w	r2, #32
 8109956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8109958:	6878      	ldr	r0, [r7, #4]
 810995a:	f000 f99f 	bl	8109c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 810995e:	68bb      	ldr	r3, [r7, #8]
 8109960:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8109964:	2b00      	cmp	r3, #0
 8109966:	d00c      	beq.n	8109982 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8109968:	68fb      	ldr	r3, [r7, #12]
 810996a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810996e:	2b00      	cmp	r3, #0
 8109970:	d007      	beq.n	8109982 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8109972:	687b      	ldr	r3, [r7, #4]
 8109974:	681b      	ldr	r3, [r3, #0]
 8109976:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 810997a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 810997c:	6878      	ldr	r0, [r7, #4]
 810997e:	f000 f9ab 	bl	8109cd8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8109982:	68bb      	ldr	r3, [r7, #8]
 8109984:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8109988:	2b00      	cmp	r3, #0
 810998a:	d00c      	beq.n	81099a6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 810998c:	68fb      	ldr	r3, [r7, #12]
 810998e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8109992:	2b00      	cmp	r3, #0
 8109994:	d007      	beq.n	81099a6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8109996:	687b      	ldr	r3, [r7, #4]
 8109998:	681b      	ldr	r3, [r3, #0]
 810999a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 810999e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 81099a0:	6878      	ldr	r0, [r7, #4]
 81099a2:	f000 f9a3 	bl	8109cec <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 81099a6:	68bb      	ldr	r3, [r7, #8]
 81099a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81099ac:	2b00      	cmp	r3, #0
 81099ae:	d00c      	beq.n	81099ca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 81099b0:	68fb      	ldr	r3, [r7, #12]
 81099b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81099b6:	2b00      	cmp	r3, #0
 81099b8:	d007      	beq.n	81099ca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 81099ba:	687b      	ldr	r3, [r7, #4]
 81099bc:	681b      	ldr	r3, [r3, #0]
 81099be:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 81099c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 81099c4:	6878      	ldr	r0, [r7, #4]
 81099c6:	f000 f99b 	bl	8109d00 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 81099ca:	68bb      	ldr	r3, [r7, #8]
 81099cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81099d0:	2b00      	cmp	r3, #0
 81099d2:	d00c      	beq.n	81099ee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 81099d4:	68fb      	ldr	r3, [r7, #12]
 81099d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81099da:	2b00      	cmp	r3, #0
 81099dc:	d007      	beq.n	81099ee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 81099de:	687b      	ldr	r3, [r7, #4]
 81099e0:	681b      	ldr	r3, [r3, #0]
 81099e2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 81099e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 81099e8:	6878      	ldr	r0, [r7, #4]
 81099ea:	f000 f993 	bl	8109d14 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81099ee:	bf00      	nop
 81099f0:	3710      	adds	r7, #16
 81099f2:	46bd      	mov	sp, r7
 81099f4:	bd80      	pop	{r7, pc}

081099f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81099f6:	b480      	push	{r7}
 81099f8:	b083      	sub	sp, #12
 81099fa:	af00      	add	r7, sp, #0
 81099fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81099fe:	bf00      	nop
 8109a00:	370c      	adds	r7, #12
 8109a02:	46bd      	mov	sp, r7
 8109a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a08:	4770      	bx	lr

08109a0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8109a0a:	b480      	push	{r7}
 8109a0c:	b083      	sub	sp, #12
 8109a0e:	af00      	add	r7, sp, #0
 8109a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8109a12:	bf00      	nop
 8109a14:	370c      	adds	r7, #12
 8109a16:	46bd      	mov	sp, r7
 8109a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a1c:	4770      	bx	lr

08109a1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8109a1e:	b480      	push	{r7}
 8109a20:	b083      	sub	sp, #12
 8109a22:	af00      	add	r7, sp, #0
 8109a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8109a26:	bf00      	nop
 8109a28:	370c      	adds	r7, #12
 8109a2a:	46bd      	mov	sp, r7
 8109a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a30:	4770      	bx	lr

08109a32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8109a32:	b480      	push	{r7}
 8109a34:	b083      	sub	sp, #12
 8109a36:	af00      	add	r7, sp, #0
 8109a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8109a3a:	bf00      	nop
 8109a3c:	370c      	adds	r7, #12
 8109a3e:	46bd      	mov	sp, r7
 8109a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a44:	4770      	bx	lr
	...

08109a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8109a48:	b480      	push	{r7}
 8109a4a:	b085      	sub	sp, #20
 8109a4c:	af00      	add	r7, sp, #0
 8109a4e:	6078      	str	r0, [r7, #4]
 8109a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8109a52:	687b      	ldr	r3, [r7, #4]
 8109a54:	681b      	ldr	r3, [r3, #0]
 8109a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8109a58:	687b      	ldr	r3, [r7, #4]
 8109a5a:	4a7a      	ldr	r2, [pc, #488]	@ (8109c44 <TIM_Base_SetConfig+0x1fc>)
 8109a5c:	4293      	cmp	r3, r2
 8109a5e:	d02b      	beq.n	8109ab8 <TIM_Base_SetConfig+0x70>
 8109a60:	687b      	ldr	r3, [r7, #4]
 8109a62:	4a79      	ldr	r2, [pc, #484]	@ (8109c48 <TIM_Base_SetConfig+0x200>)
 8109a64:	4293      	cmp	r3, r2
 8109a66:	d027      	beq.n	8109ab8 <TIM_Base_SetConfig+0x70>
 8109a68:	687b      	ldr	r3, [r7, #4]
 8109a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109a6e:	d023      	beq.n	8109ab8 <TIM_Base_SetConfig+0x70>
 8109a70:	687b      	ldr	r3, [r7, #4]
 8109a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8109a76:	d01f      	beq.n	8109ab8 <TIM_Base_SetConfig+0x70>
 8109a78:	687b      	ldr	r3, [r7, #4]
 8109a7a:	4a74      	ldr	r2, [pc, #464]	@ (8109c4c <TIM_Base_SetConfig+0x204>)
 8109a7c:	4293      	cmp	r3, r2
 8109a7e:	d01b      	beq.n	8109ab8 <TIM_Base_SetConfig+0x70>
 8109a80:	687b      	ldr	r3, [r7, #4]
 8109a82:	4a73      	ldr	r2, [pc, #460]	@ (8109c50 <TIM_Base_SetConfig+0x208>)
 8109a84:	4293      	cmp	r3, r2
 8109a86:	d017      	beq.n	8109ab8 <TIM_Base_SetConfig+0x70>
 8109a88:	687b      	ldr	r3, [r7, #4]
 8109a8a:	4a72      	ldr	r2, [pc, #456]	@ (8109c54 <TIM_Base_SetConfig+0x20c>)
 8109a8c:	4293      	cmp	r3, r2
 8109a8e:	d013      	beq.n	8109ab8 <TIM_Base_SetConfig+0x70>
 8109a90:	687b      	ldr	r3, [r7, #4]
 8109a92:	4a71      	ldr	r2, [pc, #452]	@ (8109c58 <TIM_Base_SetConfig+0x210>)
 8109a94:	4293      	cmp	r3, r2
 8109a96:	d00f      	beq.n	8109ab8 <TIM_Base_SetConfig+0x70>
 8109a98:	687b      	ldr	r3, [r7, #4]
 8109a9a:	4a70      	ldr	r2, [pc, #448]	@ (8109c5c <TIM_Base_SetConfig+0x214>)
 8109a9c:	4293      	cmp	r3, r2
 8109a9e:	d00b      	beq.n	8109ab8 <TIM_Base_SetConfig+0x70>
 8109aa0:	687b      	ldr	r3, [r7, #4]
 8109aa2:	4a6f      	ldr	r2, [pc, #444]	@ (8109c60 <TIM_Base_SetConfig+0x218>)
 8109aa4:	4293      	cmp	r3, r2
 8109aa6:	d007      	beq.n	8109ab8 <TIM_Base_SetConfig+0x70>
 8109aa8:	687b      	ldr	r3, [r7, #4]
 8109aaa:	4a6e      	ldr	r2, [pc, #440]	@ (8109c64 <TIM_Base_SetConfig+0x21c>)
 8109aac:	4293      	cmp	r3, r2
 8109aae:	d003      	beq.n	8109ab8 <TIM_Base_SetConfig+0x70>
 8109ab0:	687b      	ldr	r3, [r7, #4]
 8109ab2:	4a6d      	ldr	r2, [pc, #436]	@ (8109c68 <TIM_Base_SetConfig+0x220>)
 8109ab4:	4293      	cmp	r3, r2
 8109ab6:	d108      	bne.n	8109aca <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8109ab8:	68fb      	ldr	r3, [r7, #12]
 8109aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8109abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8109ac0:	683b      	ldr	r3, [r7, #0]
 8109ac2:	685b      	ldr	r3, [r3, #4]
 8109ac4:	68fa      	ldr	r2, [r7, #12]
 8109ac6:	4313      	orrs	r3, r2
 8109ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8109aca:	687b      	ldr	r3, [r7, #4]
 8109acc:	4a5d      	ldr	r2, [pc, #372]	@ (8109c44 <TIM_Base_SetConfig+0x1fc>)
 8109ace:	4293      	cmp	r3, r2
 8109ad0:	d05b      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109ad2:	687b      	ldr	r3, [r7, #4]
 8109ad4:	4a5c      	ldr	r2, [pc, #368]	@ (8109c48 <TIM_Base_SetConfig+0x200>)
 8109ad6:	4293      	cmp	r3, r2
 8109ad8:	d057      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109ada:	687b      	ldr	r3, [r7, #4]
 8109adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109ae0:	d053      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109ae2:	687b      	ldr	r3, [r7, #4]
 8109ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8109ae8:	d04f      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109aea:	687b      	ldr	r3, [r7, #4]
 8109aec:	4a57      	ldr	r2, [pc, #348]	@ (8109c4c <TIM_Base_SetConfig+0x204>)
 8109aee:	4293      	cmp	r3, r2
 8109af0:	d04b      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109af2:	687b      	ldr	r3, [r7, #4]
 8109af4:	4a56      	ldr	r2, [pc, #344]	@ (8109c50 <TIM_Base_SetConfig+0x208>)
 8109af6:	4293      	cmp	r3, r2
 8109af8:	d047      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109afa:	687b      	ldr	r3, [r7, #4]
 8109afc:	4a55      	ldr	r2, [pc, #340]	@ (8109c54 <TIM_Base_SetConfig+0x20c>)
 8109afe:	4293      	cmp	r3, r2
 8109b00:	d043      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109b02:	687b      	ldr	r3, [r7, #4]
 8109b04:	4a54      	ldr	r2, [pc, #336]	@ (8109c58 <TIM_Base_SetConfig+0x210>)
 8109b06:	4293      	cmp	r3, r2
 8109b08:	d03f      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109b0a:	687b      	ldr	r3, [r7, #4]
 8109b0c:	4a53      	ldr	r2, [pc, #332]	@ (8109c5c <TIM_Base_SetConfig+0x214>)
 8109b0e:	4293      	cmp	r3, r2
 8109b10:	d03b      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109b12:	687b      	ldr	r3, [r7, #4]
 8109b14:	4a52      	ldr	r2, [pc, #328]	@ (8109c60 <TIM_Base_SetConfig+0x218>)
 8109b16:	4293      	cmp	r3, r2
 8109b18:	d037      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109b1a:	687b      	ldr	r3, [r7, #4]
 8109b1c:	4a51      	ldr	r2, [pc, #324]	@ (8109c64 <TIM_Base_SetConfig+0x21c>)
 8109b1e:	4293      	cmp	r3, r2
 8109b20:	d033      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109b22:	687b      	ldr	r3, [r7, #4]
 8109b24:	4a50      	ldr	r2, [pc, #320]	@ (8109c68 <TIM_Base_SetConfig+0x220>)
 8109b26:	4293      	cmp	r3, r2
 8109b28:	d02f      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109b2a:	687b      	ldr	r3, [r7, #4]
 8109b2c:	4a4f      	ldr	r2, [pc, #316]	@ (8109c6c <TIM_Base_SetConfig+0x224>)
 8109b2e:	4293      	cmp	r3, r2
 8109b30:	d02b      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109b32:	687b      	ldr	r3, [r7, #4]
 8109b34:	4a4e      	ldr	r2, [pc, #312]	@ (8109c70 <TIM_Base_SetConfig+0x228>)
 8109b36:	4293      	cmp	r3, r2
 8109b38:	d027      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109b3a:	687b      	ldr	r3, [r7, #4]
 8109b3c:	4a4d      	ldr	r2, [pc, #308]	@ (8109c74 <TIM_Base_SetConfig+0x22c>)
 8109b3e:	4293      	cmp	r3, r2
 8109b40:	d023      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109b42:	687b      	ldr	r3, [r7, #4]
 8109b44:	4a4c      	ldr	r2, [pc, #304]	@ (8109c78 <TIM_Base_SetConfig+0x230>)
 8109b46:	4293      	cmp	r3, r2
 8109b48:	d01f      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109b4a:	687b      	ldr	r3, [r7, #4]
 8109b4c:	4a4b      	ldr	r2, [pc, #300]	@ (8109c7c <TIM_Base_SetConfig+0x234>)
 8109b4e:	4293      	cmp	r3, r2
 8109b50:	d01b      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109b52:	687b      	ldr	r3, [r7, #4]
 8109b54:	4a4a      	ldr	r2, [pc, #296]	@ (8109c80 <TIM_Base_SetConfig+0x238>)
 8109b56:	4293      	cmp	r3, r2
 8109b58:	d017      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109b5a:	687b      	ldr	r3, [r7, #4]
 8109b5c:	4a49      	ldr	r2, [pc, #292]	@ (8109c84 <TIM_Base_SetConfig+0x23c>)
 8109b5e:	4293      	cmp	r3, r2
 8109b60:	d013      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109b62:	687b      	ldr	r3, [r7, #4]
 8109b64:	4a48      	ldr	r2, [pc, #288]	@ (8109c88 <TIM_Base_SetConfig+0x240>)
 8109b66:	4293      	cmp	r3, r2
 8109b68:	d00f      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109b6a:	687b      	ldr	r3, [r7, #4]
 8109b6c:	4a47      	ldr	r2, [pc, #284]	@ (8109c8c <TIM_Base_SetConfig+0x244>)
 8109b6e:	4293      	cmp	r3, r2
 8109b70:	d00b      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109b72:	687b      	ldr	r3, [r7, #4]
 8109b74:	4a46      	ldr	r2, [pc, #280]	@ (8109c90 <TIM_Base_SetConfig+0x248>)
 8109b76:	4293      	cmp	r3, r2
 8109b78:	d007      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109b7a:	687b      	ldr	r3, [r7, #4]
 8109b7c:	4a45      	ldr	r2, [pc, #276]	@ (8109c94 <TIM_Base_SetConfig+0x24c>)
 8109b7e:	4293      	cmp	r3, r2
 8109b80:	d003      	beq.n	8109b8a <TIM_Base_SetConfig+0x142>
 8109b82:	687b      	ldr	r3, [r7, #4]
 8109b84:	4a44      	ldr	r2, [pc, #272]	@ (8109c98 <TIM_Base_SetConfig+0x250>)
 8109b86:	4293      	cmp	r3, r2
 8109b88:	d108      	bne.n	8109b9c <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8109b8a:	68fb      	ldr	r3, [r7, #12]
 8109b8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8109b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8109b92:	683b      	ldr	r3, [r7, #0]
 8109b94:	68db      	ldr	r3, [r3, #12]
 8109b96:	68fa      	ldr	r2, [r7, #12]
 8109b98:	4313      	orrs	r3, r2
 8109b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8109b9c:	68fb      	ldr	r3, [r7, #12]
 8109b9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8109ba2:	683b      	ldr	r3, [r7, #0]
 8109ba4:	695b      	ldr	r3, [r3, #20]
 8109ba6:	4313      	orrs	r3, r2
 8109ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8109baa:	687b      	ldr	r3, [r7, #4]
 8109bac:	68fa      	ldr	r2, [r7, #12]
 8109bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8109bb0:	683b      	ldr	r3, [r7, #0]
 8109bb2:	689a      	ldr	r2, [r3, #8]
 8109bb4:	687b      	ldr	r3, [r7, #4]
 8109bb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8109bb8:	683b      	ldr	r3, [r7, #0]
 8109bba:	681a      	ldr	r2, [r3, #0]
 8109bbc:	687b      	ldr	r3, [r7, #4]
 8109bbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8109bc0:	687b      	ldr	r3, [r7, #4]
 8109bc2:	4a20      	ldr	r2, [pc, #128]	@ (8109c44 <TIM_Base_SetConfig+0x1fc>)
 8109bc4:	4293      	cmp	r3, r2
 8109bc6:	d023      	beq.n	8109c10 <TIM_Base_SetConfig+0x1c8>
 8109bc8:	687b      	ldr	r3, [r7, #4]
 8109bca:	4a1f      	ldr	r2, [pc, #124]	@ (8109c48 <TIM_Base_SetConfig+0x200>)
 8109bcc:	4293      	cmp	r3, r2
 8109bce:	d01f      	beq.n	8109c10 <TIM_Base_SetConfig+0x1c8>
 8109bd0:	687b      	ldr	r3, [r7, #4]
 8109bd2:	4a24      	ldr	r2, [pc, #144]	@ (8109c64 <TIM_Base_SetConfig+0x21c>)
 8109bd4:	4293      	cmp	r3, r2
 8109bd6:	d01b      	beq.n	8109c10 <TIM_Base_SetConfig+0x1c8>
 8109bd8:	687b      	ldr	r3, [r7, #4]
 8109bda:	4a23      	ldr	r2, [pc, #140]	@ (8109c68 <TIM_Base_SetConfig+0x220>)
 8109bdc:	4293      	cmp	r3, r2
 8109bde:	d017      	beq.n	8109c10 <TIM_Base_SetConfig+0x1c8>
 8109be0:	687b      	ldr	r3, [r7, #4]
 8109be2:	4a28      	ldr	r2, [pc, #160]	@ (8109c84 <TIM_Base_SetConfig+0x23c>)
 8109be4:	4293      	cmp	r3, r2
 8109be6:	d013      	beq.n	8109c10 <TIM_Base_SetConfig+0x1c8>
 8109be8:	687b      	ldr	r3, [r7, #4]
 8109bea:	4a27      	ldr	r2, [pc, #156]	@ (8109c88 <TIM_Base_SetConfig+0x240>)
 8109bec:	4293      	cmp	r3, r2
 8109bee:	d00f      	beq.n	8109c10 <TIM_Base_SetConfig+0x1c8>
 8109bf0:	687b      	ldr	r3, [r7, #4]
 8109bf2:	4a26      	ldr	r2, [pc, #152]	@ (8109c8c <TIM_Base_SetConfig+0x244>)
 8109bf4:	4293      	cmp	r3, r2
 8109bf6:	d00b      	beq.n	8109c10 <TIM_Base_SetConfig+0x1c8>
 8109bf8:	687b      	ldr	r3, [r7, #4]
 8109bfa:	4a25      	ldr	r2, [pc, #148]	@ (8109c90 <TIM_Base_SetConfig+0x248>)
 8109bfc:	4293      	cmp	r3, r2
 8109bfe:	d007      	beq.n	8109c10 <TIM_Base_SetConfig+0x1c8>
 8109c00:	687b      	ldr	r3, [r7, #4]
 8109c02:	4a24      	ldr	r2, [pc, #144]	@ (8109c94 <TIM_Base_SetConfig+0x24c>)
 8109c04:	4293      	cmp	r3, r2
 8109c06:	d003      	beq.n	8109c10 <TIM_Base_SetConfig+0x1c8>
 8109c08:	687b      	ldr	r3, [r7, #4]
 8109c0a:	4a23      	ldr	r2, [pc, #140]	@ (8109c98 <TIM_Base_SetConfig+0x250>)
 8109c0c:	4293      	cmp	r3, r2
 8109c0e:	d103      	bne.n	8109c18 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8109c10:	683b      	ldr	r3, [r7, #0]
 8109c12:	691a      	ldr	r2, [r3, #16]
 8109c14:	687b      	ldr	r3, [r7, #4]
 8109c16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8109c18:	687b      	ldr	r3, [r7, #4]
 8109c1a:	2201      	movs	r2, #1
 8109c1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8109c1e:	687b      	ldr	r3, [r7, #4]
 8109c20:	691b      	ldr	r3, [r3, #16]
 8109c22:	f003 0301 	and.w	r3, r3, #1
 8109c26:	2b01      	cmp	r3, #1
 8109c28:	d105      	bne.n	8109c36 <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8109c2a:	687b      	ldr	r3, [r7, #4]
 8109c2c:	691b      	ldr	r3, [r3, #16]
 8109c2e:	f023 0201 	bic.w	r2, r3, #1
 8109c32:	687b      	ldr	r3, [r7, #4]
 8109c34:	611a      	str	r2, [r3, #16]
  }
}
 8109c36:	bf00      	nop
 8109c38:	3714      	adds	r7, #20
 8109c3a:	46bd      	mov	sp, r7
 8109c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c40:	4770      	bx	lr
 8109c42:	bf00      	nop
 8109c44:	40012c00 	.word	0x40012c00
 8109c48:	50012c00 	.word	0x50012c00
 8109c4c:	40000400 	.word	0x40000400
 8109c50:	50000400 	.word	0x50000400
 8109c54:	40000800 	.word	0x40000800
 8109c58:	50000800 	.word	0x50000800
 8109c5c:	40000c00 	.word	0x40000c00
 8109c60:	50000c00 	.word	0x50000c00
 8109c64:	40013400 	.word	0x40013400
 8109c68:	50013400 	.word	0x50013400
 8109c6c:	40001800 	.word	0x40001800
 8109c70:	50001800 	.word	0x50001800
 8109c74:	40001c00 	.word	0x40001c00
 8109c78:	50001c00 	.word	0x50001c00
 8109c7c:	40002000 	.word	0x40002000
 8109c80:	50002000 	.word	0x50002000
 8109c84:	40014000 	.word	0x40014000
 8109c88:	50014000 	.word	0x50014000
 8109c8c:	40014400 	.word	0x40014400
 8109c90:	50014400 	.word	0x50014400
 8109c94:	40014800 	.word	0x40014800
 8109c98:	50014800 	.word	0x50014800

08109c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8109c9c:	b480      	push	{r7}
 8109c9e:	b083      	sub	sp, #12
 8109ca0:	af00      	add	r7, sp, #0
 8109ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8109ca4:	bf00      	nop
 8109ca6:	370c      	adds	r7, #12
 8109ca8:	46bd      	mov	sp, r7
 8109caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cae:	4770      	bx	lr

08109cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8109cb0:	b480      	push	{r7}
 8109cb2:	b083      	sub	sp, #12
 8109cb4:	af00      	add	r7, sp, #0
 8109cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8109cb8:	bf00      	nop
 8109cba:	370c      	adds	r7, #12
 8109cbc:	46bd      	mov	sp, r7
 8109cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cc2:	4770      	bx	lr

08109cc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8109cc4:	b480      	push	{r7}
 8109cc6:	b083      	sub	sp, #12
 8109cc8:	af00      	add	r7, sp, #0
 8109cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8109ccc:	bf00      	nop
 8109cce:	370c      	adds	r7, #12
 8109cd0:	46bd      	mov	sp, r7
 8109cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cd6:	4770      	bx	lr

08109cd8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8109cd8:	b480      	push	{r7}
 8109cda:	b083      	sub	sp, #12
 8109cdc:	af00      	add	r7, sp, #0
 8109cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8109ce0:	bf00      	nop
 8109ce2:	370c      	adds	r7, #12
 8109ce4:	46bd      	mov	sp, r7
 8109ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cea:	4770      	bx	lr

08109cec <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8109cec:	b480      	push	{r7}
 8109cee:	b083      	sub	sp, #12
 8109cf0:	af00      	add	r7, sp, #0
 8109cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8109cf4:	bf00      	nop
 8109cf6:	370c      	adds	r7, #12
 8109cf8:	46bd      	mov	sp, r7
 8109cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cfe:	4770      	bx	lr

08109d00 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8109d00:	b480      	push	{r7}
 8109d02:	b083      	sub	sp, #12
 8109d04:	af00      	add	r7, sp, #0
 8109d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8109d08:	bf00      	nop
 8109d0a:	370c      	adds	r7, #12
 8109d0c:	46bd      	mov	sp, r7
 8109d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d12:	4770      	bx	lr

08109d14 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8109d14:	b480      	push	{r7}
 8109d16:	b083      	sub	sp, #12
 8109d18:	af00      	add	r7, sp, #0
 8109d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8109d1c:	bf00      	nop
 8109d1e:	370c      	adds	r7, #12
 8109d20:	46bd      	mov	sp, r7
 8109d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d26:	4770      	bx	lr

08109d28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8109d28:	b580      	push	{r7, lr}
 8109d2a:	b082      	sub	sp, #8
 8109d2c:	af00      	add	r7, sp, #0
 8109d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8109d30:	687b      	ldr	r3, [r7, #4]
 8109d32:	2b00      	cmp	r3, #0
 8109d34:	d101      	bne.n	8109d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8109d36:	2301      	movs	r3, #1
 8109d38:	e042      	b.n	8109dc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8109d3a:	687b      	ldr	r3, [r7, #4]
 8109d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8109d40:	2b00      	cmp	r3, #0
 8109d42:	d106      	bne.n	8109d52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8109d44:	687b      	ldr	r3, [r7, #4]
 8109d46:	2200      	movs	r2, #0
 8109d48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8109d4c:	6878      	ldr	r0, [r7, #4]
 8109d4e:	f7f7 f853 	bl	8100df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8109d52:	687b      	ldr	r3, [r7, #4]
 8109d54:	2224      	movs	r2, #36	@ 0x24
 8109d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8109d5a:	687b      	ldr	r3, [r7, #4]
 8109d5c:	681b      	ldr	r3, [r3, #0]
 8109d5e:	681a      	ldr	r2, [r3, #0]
 8109d60:	687b      	ldr	r3, [r7, #4]
 8109d62:	681b      	ldr	r3, [r3, #0]
 8109d64:	f022 0201 	bic.w	r2, r2, #1
 8109d68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8109d6a:	687b      	ldr	r3, [r7, #4]
 8109d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109d6e:	2b00      	cmp	r3, #0
 8109d70:	d002      	beq.n	8109d78 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8109d72:	6878      	ldr	r0, [r7, #4]
 8109d74:	f000 fab4 	bl	810a2e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8109d78:	6878      	ldr	r0, [r7, #4]
 8109d7a:	f000 f8c3 	bl	8109f04 <UART_SetConfig>
 8109d7e:	4603      	mov	r3, r0
 8109d80:	2b01      	cmp	r3, #1
 8109d82:	d101      	bne.n	8109d88 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8109d84:	2301      	movs	r3, #1
 8109d86:	e01b      	b.n	8109dc0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8109d88:	687b      	ldr	r3, [r7, #4]
 8109d8a:	681b      	ldr	r3, [r3, #0]
 8109d8c:	685a      	ldr	r2, [r3, #4]
 8109d8e:	687b      	ldr	r3, [r7, #4]
 8109d90:	681b      	ldr	r3, [r3, #0]
 8109d92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8109d96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8109d98:	687b      	ldr	r3, [r7, #4]
 8109d9a:	681b      	ldr	r3, [r3, #0]
 8109d9c:	689a      	ldr	r2, [r3, #8]
 8109d9e:	687b      	ldr	r3, [r7, #4]
 8109da0:	681b      	ldr	r3, [r3, #0]
 8109da2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8109da6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8109da8:	687b      	ldr	r3, [r7, #4]
 8109daa:	681b      	ldr	r3, [r3, #0]
 8109dac:	681a      	ldr	r2, [r3, #0]
 8109dae:	687b      	ldr	r3, [r7, #4]
 8109db0:	681b      	ldr	r3, [r3, #0]
 8109db2:	f042 0201 	orr.w	r2, r2, #1
 8109db6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8109db8:	6878      	ldr	r0, [r7, #4]
 8109dba:	f000 fb33 	bl	810a424 <UART_CheckIdleState>
 8109dbe:	4603      	mov	r3, r0
}
 8109dc0:	4618      	mov	r0, r3
 8109dc2:	3708      	adds	r7, #8
 8109dc4:	46bd      	mov	sp, r7
 8109dc6:	bd80      	pop	{r7, pc}

08109dc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8109dc8:	b580      	push	{r7, lr}
 8109dca:	b08a      	sub	sp, #40	@ 0x28
 8109dcc:	af02      	add	r7, sp, #8
 8109dce:	60f8      	str	r0, [r7, #12]
 8109dd0:	60b9      	str	r1, [r7, #8]
 8109dd2:	603b      	str	r3, [r7, #0]
 8109dd4:	4613      	mov	r3, r2
 8109dd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8109dd8:	68fb      	ldr	r3, [r7, #12]
 8109dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8109dde:	2b20      	cmp	r3, #32
 8109de0:	f040 808b 	bne.w	8109efa <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8109de4:	68bb      	ldr	r3, [r7, #8]
 8109de6:	2b00      	cmp	r3, #0
 8109de8:	d002      	beq.n	8109df0 <HAL_UART_Transmit+0x28>
 8109dea:	88fb      	ldrh	r3, [r7, #6]
 8109dec:	2b00      	cmp	r3, #0
 8109dee:	d101      	bne.n	8109df4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8109df0:	2301      	movs	r3, #1
 8109df2:	e083      	b.n	8109efc <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8109df4:	68fb      	ldr	r3, [r7, #12]
 8109df6:	681b      	ldr	r3, [r3, #0]
 8109df8:	689b      	ldr	r3, [r3, #8]
 8109dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109dfe:	2b80      	cmp	r3, #128	@ 0x80
 8109e00:	d107      	bne.n	8109e12 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8109e02:	68fb      	ldr	r3, [r7, #12]
 8109e04:	681b      	ldr	r3, [r3, #0]
 8109e06:	689a      	ldr	r2, [r3, #8]
 8109e08:	68fb      	ldr	r3, [r7, #12]
 8109e0a:	681b      	ldr	r3, [r3, #0]
 8109e0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8109e10:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109e12:	68fb      	ldr	r3, [r7, #12]
 8109e14:	2200      	movs	r2, #0
 8109e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8109e1a:	68fb      	ldr	r3, [r7, #12]
 8109e1c:	2221      	movs	r2, #33	@ 0x21
 8109e1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8109e22:	f7f7 fb43 	bl	81014ac <HAL_GetTick>
 8109e26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8109e28:	68fb      	ldr	r3, [r7, #12]
 8109e2a:	88fa      	ldrh	r2, [r7, #6]
 8109e2c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8109e30:	68fb      	ldr	r3, [r7, #12]
 8109e32:	88fa      	ldrh	r2, [r7, #6]
 8109e34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8109e38:	68fb      	ldr	r3, [r7, #12]
 8109e3a:	689b      	ldr	r3, [r3, #8]
 8109e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8109e40:	d108      	bne.n	8109e54 <HAL_UART_Transmit+0x8c>
 8109e42:	68fb      	ldr	r3, [r7, #12]
 8109e44:	691b      	ldr	r3, [r3, #16]
 8109e46:	2b00      	cmp	r3, #0
 8109e48:	d104      	bne.n	8109e54 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8109e4a:	2300      	movs	r3, #0
 8109e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8109e4e:	68bb      	ldr	r3, [r7, #8]
 8109e50:	61bb      	str	r3, [r7, #24]
 8109e52:	e003      	b.n	8109e5c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8109e54:	68bb      	ldr	r3, [r7, #8]
 8109e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8109e58:	2300      	movs	r3, #0
 8109e5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8109e5c:	e030      	b.n	8109ec0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8109e5e:	683b      	ldr	r3, [r7, #0]
 8109e60:	9300      	str	r3, [sp, #0]
 8109e62:	697b      	ldr	r3, [r7, #20]
 8109e64:	2200      	movs	r2, #0
 8109e66:	2180      	movs	r1, #128	@ 0x80
 8109e68:	68f8      	ldr	r0, [r7, #12]
 8109e6a:	f000 fb85 	bl	810a578 <UART_WaitOnFlagUntilTimeout>
 8109e6e:	4603      	mov	r3, r0
 8109e70:	2b00      	cmp	r3, #0
 8109e72:	d005      	beq.n	8109e80 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8109e74:	68fb      	ldr	r3, [r7, #12]
 8109e76:	2220      	movs	r2, #32
 8109e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8109e7c:	2303      	movs	r3, #3
 8109e7e:	e03d      	b.n	8109efc <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8109e80:	69fb      	ldr	r3, [r7, #28]
 8109e82:	2b00      	cmp	r3, #0
 8109e84:	d10b      	bne.n	8109e9e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8109e86:	69bb      	ldr	r3, [r7, #24]
 8109e88:	881b      	ldrh	r3, [r3, #0]
 8109e8a:	461a      	mov	r2, r3
 8109e8c:	68fb      	ldr	r3, [r7, #12]
 8109e8e:	681b      	ldr	r3, [r3, #0]
 8109e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8109e94:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8109e96:	69bb      	ldr	r3, [r7, #24]
 8109e98:	3302      	adds	r3, #2
 8109e9a:	61bb      	str	r3, [r7, #24]
 8109e9c:	e007      	b.n	8109eae <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8109e9e:	69fb      	ldr	r3, [r7, #28]
 8109ea0:	781a      	ldrb	r2, [r3, #0]
 8109ea2:	68fb      	ldr	r3, [r7, #12]
 8109ea4:	681b      	ldr	r3, [r3, #0]
 8109ea6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8109ea8:	69fb      	ldr	r3, [r7, #28]
 8109eaa:	3301      	adds	r3, #1
 8109eac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8109eae:	68fb      	ldr	r3, [r7, #12]
 8109eb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8109eb4:	b29b      	uxth	r3, r3
 8109eb6:	3b01      	subs	r3, #1
 8109eb8:	b29a      	uxth	r2, r3
 8109eba:	68fb      	ldr	r3, [r7, #12]
 8109ebc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8109ec0:	68fb      	ldr	r3, [r7, #12]
 8109ec2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8109ec6:	b29b      	uxth	r3, r3
 8109ec8:	2b00      	cmp	r3, #0
 8109eca:	d1c8      	bne.n	8109e5e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8109ecc:	683b      	ldr	r3, [r7, #0]
 8109ece:	9300      	str	r3, [sp, #0]
 8109ed0:	697b      	ldr	r3, [r7, #20]
 8109ed2:	2200      	movs	r2, #0
 8109ed4:	2140      	movs	r1, #64	@ 0x40
 8109ed6:	68f8      	ldr	r0, [r7, #12]
 8109ed8:	f000 fb4e 	bl	810a578 <UART_WaitOnFlagUntilTimeout>
 8109edc:	4603      	mov	r3, r0
 8109ede:	2b00      	cmp	r3, #0
 8109ee0:	d005      	beq.n	8109eee <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8109ee2:	68fb      	ldr	r3, [r7, #12]
 8109ee4:	2220      	movs	r2, #32
 8109ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8109eea:	2303      	movs	r3, #3
 8109eec:	e006      	b.n	8109efc <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8109eee:	68fb      	ldr	r3, [r7, #12]
 8109ef0:	2220      	movs	r2, #32
 8109ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8109ef6:	2300      	movs	r3, #0
 8109ef8:	e000      	b.n	8109efc <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8109efa:	2302      	movs	r3, #2
  }
}
 8109efc:	4618      	mov	r0, r3
 8109efe:	3720      	adds	r7, #32
 8109f00:	46bd      	mov	sp, r7
 8109f02:	bd80      	pop	{r7, pc}

08109f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8109f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8109f08:	b094      	sub	sp, #80	@ 0x50
 8109f0a:	af00      	add	r7, sp, #0
 8109f0c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8109f0e:	2300      	movs	r3, #0
 8109f10:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8109f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109f16:	681a      	ldr	r2, [r3, #0]
 8109f18:	4b78      	ldr	r3, [pc, #480]	@ (810a0fc <UART_SetConfig+0x1f8>)
 8109f1a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8109f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109f1e:	689a      	ldr	r2, [r3, #8]
 8109f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109f22:	691b      	ldr	r3, [r3, #16]
 8109f24:	431a      	orrs	r2, r3
 8109f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109f28:	695b      	ldr	r3, [r3, #20]
 8109f2a:	431a      	orrs	r2, r3
 8109f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109f2e:	69db      	ldr	r3, [r3, #28]
 8109f30:	4313      	orrs	r3, r2
 8109f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8109f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109f36:	681b      	ldr	r3, [r3, #0]
 8109f38:	681b      	ldr	r3, [r3, #0]
 8109f3a:	4971      	ldr	r1, [pc, #452]	@ (810a100 <UART_SetConfig+0x1fc>)
 8109f3c:	4019      	ands	r1, r3
 8109f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109f40:	681a      	ldr	r2, [r3, #0]
 8109f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109f44:	430b      	orrs	r3, r1
 8109f46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8109f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109f4a:	681b      	ldr	r3, [r3, #0]
 8109f4c:	685b      	ldr	r3, [r3, #4]
 8109f4e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8109f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109f54:	68d9      	ldr	r1, [r3, #12]
 8109f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109f58:	681a      	ldr	r2, [r3, #0]
 8109f5a:	ea40 0301 	orr.w	r3, r0, r1
 8109f5e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8109f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109f62:	699b      	ldr	r3, [r3, #24]
 8109f64:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8109f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109f68:	681a      	ldr	r2, [r3, #0]
 8109f6a:	4b64      	ldr	r3, [pc, #400]	@ (810a0fc <UART_SetConfig+0x1f8>)
 8109f6c:	429a      	cmp	r2, r3
 8109f6e:	d009      	beq.n	8109f84 <UART_SetConfig+0x80>
 8109f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109f72:	681a      	ldr	r2, [r3, #0]
 8109f74:	4b63      	ldr	r3, [pc, #396]	@ (810a104 <UART_SetConfig+0x200>)
 8109f76:	429a      	cmp	r2, r3
 8109f78:	d004      	beq.n	8109f84 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8109f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109f7c:	6a1a      	ldr	r2, [r3, #32]
 8109f7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109f80:	4313      	orrs	r3, r2
 8109f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8109f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109f86:	681b      	ldr	r3, [r3, #0]
 8109f88:	689b      	ldr	r3, [r3, #8]
 8109f8a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8109f8e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8109f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109f94:	681a      	ldr	r2, [r3, #0]
 8109f96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109f98:	430b      	orrs	r3, r1
 8109f9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8109f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109f9e:	681b      	ldr	r3, [r3, #0]
 8109fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109fa2:	f023 000f 	bic.w	r0, r3, #15
 8109fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109fa8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8109faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109fac:	681a      	ldr	r2, [r3, #0]
 8109fae:	ea40 0301 	orr.w	r3, r0, r1
 8109fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8109fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109fb6:	681a      	ldr	r2, [r3, #0]
 8109fb8:	4b53      	ldr	r3, [pc, #332]	@ (810a108 <UART_SetConfig+0x204>)
 8109fba:	429a      	cmp	r2, r3
 8109fbc:	d102      	bne.n	8109fc4 <UART_SetConfig+0xc0>
 8109fbe:	2301      	movs	r3, #1
 8109fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8109fc2:	e066      	b.n	810a092 <UART_SetConfig+0x18e>
 8109fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109fc6:	681a      	ldr	r2, [r3, #0]
 8109fc8:	4b50      	ldr	r3, [pc, #320]	@ (810a10c <UART_SetConfig+0x208>)
 8109fca:	429a      	cmp	r2, r3
 8109fcc:	d102      	bne.n	8109fd4 <UART_SetConfig+0xd0>
 8109fce:	2302      	movs	r3, #2
 8109fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8109fd2:	e05e      	b.n	810a092 <UART_SetConfig+0x18e>
 8109fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109fd6:	681a      	ldr	r2, [r3, #0]
 8109fd8:	4b4d      	ldr	r3, [pc, #308]	@ (810a110 <UART_SetConfig+0x20c>)
 8109fda:	429a      	cmp	r2, r3
 8109fdc:	d102      	bne.n	8109fe4 <UART_SetConfig+0xe0>
 8109fde:	2304      	movs	r3, #4
 8109fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8109fe2:	e056      	b.n	810a092 <UART_SetConfig+0x18e>
 8109fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109fe6:	681a      	ldr	r2, [r3, #0]
 8109fe8:	4b4a      	ldr	r3, [pc, #296]	@ (810a114 <UART_SetConfig+0x210>)
 8109fea:	429a      	cmp	r2, r3
 8109fec:	d102      	bne.n	8109ff4 <UART_SetConfig+0xf0>
 8109fee:	2308      	movs	r3, #8
 8109ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8109ff2:	e04e      	b.n	810a092 <UART_SetConfig+0x18e>
 8109ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109ff6:	681a      	ldr	r2, [r3, #0]
 8109ff8:	4b47      	ldr	r3, [pc, #284]	@ (810a118 <UART_SetConfig+0x214>)
 8109ffa:	429a      	cmp	r2, r3
 8109ffc:	d102      	bne.n	810a004 <UART_SetConfig+0x100>
 8109ffe:	2310      	movs	r3, #16
 810a000:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a002:	e046      	b.n	810a092 <UART_SetConfig+0x18e>
 810a004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a006:	681a      	ldr	r2, [r3, #0]
 810a008:	4b44      	ldr	r3, [pc, #272]	@ (810a11c <UART_SetConfig+0x218>)
 810a00a:	429a      	cmp	r2, r3
 810a00c:	d102      	bne.n	810a014 <UART_SetConfig+0x110>
 810a00e:	2320      	movs	r3, #32
 810a010:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a012:	e03e      	b.n	810a092 <UART_SetConfig+0x18e>
 810a014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a016:	681a      	ldr	r2, [r3, #0]
 810a018:	4b41      	ldr	r3, [pc, #260]	@ (810a120 <UART_SetConfig+0x21c>)
 810a01a:	429a      	cmp	r2, r3
 810a01c:	d102      	bne.n	810a024 <UART_SetConfig+0x120>
 810a01e:	2340      	movs	r3, #64	@ 0x40
 810a020:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a022:	e036      	b.n	810a092 <UART_SetConfig+0x18e>
 810a024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a026:	681a      	ldr	r2, [r3, #0]
 810a028:	4b3e      	ldr	r3, [pc, #248]	@ (810a124 <UART_SetConfig+0x220>)
 810a02a:	429a      	cmp	r2, r3
 810a02c:	d102      	bne.n	810a034 <UART_SetConfig+0x130>
 810a02e:	2380      	movs	r3, #128	@ 0x80
 810a030:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a032:	e02e      	b.n	810a092 <UART_SetConfig+0x18e>
 810a034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a036:	681a      	ldr	r2, [r3, #0]
 810a038:	4b3b      	ldr	r3, [pc, #236]	@ (810a128 <UART_SetConfig+0x224>)
 810a03a:	429a      	cmp	r2, r3
 810a03c:	d103      	bne.n	810a046 <UART_SetConfig+0x142>
 810a03e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810a042:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a044:	e025      	b.n	810a092 <UART_SetConfig+0x18e>
 810a046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a048:	681a      	ldr	r2, [r3, #0]
 810a04a:	4b38      	ldr	r3, [pc, #224]	@ (810a12c <UART_SetConfig+0x228>)
 810a04c:	429a      	cmp	r2, r3
 810a04e:	d103      	bne.n	810a058 <UART_SetConfig+0x154>
 810a050:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810a054:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a056:	e01c      	b.n	810a092 <UART_SetConfig+0x18e>
 810a058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a05a:	681a      	ldr	r2, [r3, #0]
 810a05c:	4b34      	ldr	r3, [pc, #208]	@ (810a130 <UART_SetConfig+0x22c>)
 810a05e:	429a      	cmp	r2, r3
 810a060:	d103      	bne.n	810a06a <UART_SetConfig+0x166>
 810a062:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810a066:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a068:	e013      	b.n	810a092 <UART_SetConfig+0x18e>
 810a06a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a06c:	681a      	ldr	r2, [r3, #0]
 810a06e:	4b31      	ldr	r3, [pc, #196]	@ (810a134 <UART_SetConfig+0x230>)
 810a070:	429a      	cmp	r2, r3
 810a072:	d103      	bne.n	810a07c <UART_SetConfig+0x178>
 810a074:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810a078:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a07a:	e00a      	b.n	810a092 <UART_SetConfig+0x18e>
 810a07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a07e:	681a      	ldr	r2, [r3, #0]
 810a080:	4b1e      	ldr	r3, [pc, #120]	@ (810a0fc <UART_SetConfig+0x1f8>)
 810a082:	429a      	cmp	r2, r3
 810a084:	d103      	bne.n	810a08e <UART_SetConfig+0x18a>
 810a086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810a08a:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a08c:	e001      	b.n	810a092 <UART_SetConfig+0x18e>
 810a08e:	2300      	movs	r3, #0
 810a090:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810a092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a094:	681a      	ldr	r2, [r3, #0]
 810a096:	4b19      	ldr	r3, [pc, #100]	@ (810a0fc <UART_SetConfig+0x1f8>)
 810a098:	429a      	cmp	r2, r3
 810a09a:	d005      	beq.n	810a0a8 <UART_SetConfig+0x1a4>
 810a09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a09e:	681a      	ldr	r2, [r3, #0]
 810a0a0:	4b18      	ldr	r3, [pc, #96]	@ (810a104 <UART_SetConfig+0x200>)
 810a0a2:	429a      	cmp	r2, r3
 810a0a4:	f040 8094 	bne.w	810a1d0 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 810a0a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810a0aa:	2200      	movs	r2, #0
 810a0ac:	623b      	str	r3, [r7, #32]
 810a0ae:	627a      	str	r2, [r7, #36]	@ 0x24
 810a0b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 810a0b4:	f7fc fdb6 	bl	8106c24 <HAL_RCCEx_GetPeriphCLKFreq>
 810a0b8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 810a0ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810a0bc:	2b00      	cmp	r3, #0
 810a0be:	f000 80f7 	beq.w	810a2b0 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810a0c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a0c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a0c6:	4a1c      	ldr	r2, [pc, #112]	@ (810a138 <UART_SetConfig+0x234>)
 810a0c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a0cc:	461a      	mov	r2, r3
 810a0ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810a0d0:	fbb3 f3f2 	udiv	r3, r3, r2
 810a0d4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a0d8:	685a      	ldr	r2, [r3, #4]
 810a0da:	4613      	mov	r3, r2
 810a0dc:	005b      	lsls	r3, r3, #1
 810a0de:	4413      	add	r3, r2
 810a0e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810a0e2:	429a      	cmp	r2, r3
 810a0e4:	d305      	bcc.n	810a0f2 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810a0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a0e8:	685b      	ldr	r3, [r3, #4]
 810a0ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a0ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810a0ee:	429a      	cmp	r2, r3
 810a0f0:	d924      	bls.n	810a13c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 810a0f2:	2301      	movs	r3, #1
 810a0f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 810a0f8:	e069      	b.n	810a1ce <UART_SetConfig+0x2ca>
 810a0fa:	bf00      	nop
 810a0fc:	44002400 	.word	0x44002400
 810a100:	cfff69f3 	.word	0xcfff69f3
 810a104:	54002400 	.word	0x54002400
 810a108:	40013800 	.word	0x40013800
 810a10c:	40004400 	.word	0x40004400
 810a110:	40004800 	.word	0x40004800
 810a114:	40004c00 	.word	0x40004c00
 810a118:	40005000 	.word	0x40005000
 810a11c:	40006400 	.word	0x40006400
 810a120:	40007800 	.word	0x40007800
 810a124:	40007c00 	.word	0x40007c00
 810a128:	40008000 	.word	0x40008000
 810a12c:	40006800 	.word	0x40006800
 810a130:	40006c00 	.word	0x40006c00
 810a134:	40008400 	.word	0x40008400
 810a138:	08117e0c 	.word	0x08117e0c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a13c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810a13e:	2200      	movs	r2, #0
 810a140:	61bb      	str	r3, [r7, #24]
 810a142:	61fa      	str	r2, [r7, #28]
 810a144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a148:	4a64      	ldr	r2, [pc, #400]	@ (810a2dc <UART_SetConfig+0x3d8>)
 810a14a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a14e:	b29b      	uxth	r3, r3
 810a150:	2200      	movs	r2, #0
 810a152:	613b      	str	r3, [r7, #16]
 810a154:	617a      	str	r2, [r7, #20]
 810a156:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 810a15a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 810a15e:	f7f6 f9fb 	bl	8100558 <__aeabi_uldivmod>
 810a162:	4602      	mov	r2, r0
 810a164:	460b      	mov	r3, r1
 810a166:	4610      	mov	r0, r2
 810a168:	4619      	mov	r1, r3
 810a16a:	f04f 0200 	mov.w	r2, #0
 810a16e:	f04f 0300 	mov.w	r3, #0
 810a172:	020b      	lsls	r3, r1, #8
 810a174:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810a178:	0202      	lsls	r2, r0, #8
 810a17a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810a17c:	6849      	ldr	r1, [r1, #4]
 810a17e:	0849      	lsrs	r1, r1, #1
 810a180:	2000      	movs	r0, #0
 810a182:	460c      	mov	r4, r1
 810a184:	4605      	mov	r5, r0
 810a186:	eb12 0804 	adds.w	r8, r2, r4
 810a18a:	eb43 0905 	adc.w	r9, r3, r5
 810a18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a190:	685b      	ldr	r3, [r3, #4]
 810a192:	2200      	movs	r2, #0
 810a194:	60bb      	str	r3, [r7, #8]
 810a196:	60fa      	str	r2, [r7, #12]
 810a198:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 810a19c:	4640      	mov	r0, r8
 810a19e:	4649      	mov	r1, r9
 810a1a0:	f7f6 f9da 	bl	8100558 <__aeabi_uldivmod>
 810a1a4:	4602      	mov	r2, r0
 810a1a6:	460b      	mov	r3, r1
 810a1a8:	4613      	mov	r3, r2
 810a1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810a1ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a1ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810a1b2:	d308      	bcc.n	810a1c6 <UART_SetConfig+0x2c2>
 810a1b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a1b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a1ba:	d204      	bcs.n	810a1c6 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 810a1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a1be:	681b      	ldr	r3, [r3, #0]
 810a1c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810a1c2:	60da      	str	r2, [r3, #12]
 810a1c4:	e003      	b.n	810a1ce <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 810a1c6:	2301      	movs	r3, #1
 810a1c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 810a1cc:	e070      	b.n	810a2b0 <UART_SetConfig+0x3ac>
 810a1ce:	e06f      	b.n	810a2b0 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810a1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a1d2:	69db      	ldr	r3, [r3, #28]
 810a1d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810a1d8:	d13c      	bne.n	810a254 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 810a1da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810a1dc:	2200      	movs	r2, #0
 810a1de:	603b      	str	r3, [r7, #0]
 810a1e0:	607a      	str	r2, [r7, #4]
 810a1e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 810a1e6:	f7fc fd1d 	bl	8106c24 <HAL_RCCEx_GetPeriphCLKFreq>
 810a1ea:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810a1ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810a1ee:	2b00      	cmp	r3, #0
 810a1f0:	d05e      	beq.n	810a2b0 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a1f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a1f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a1f6:	4a39      	ldr	r2, [pc, #228]	@ (810a2dc <UART_SetConfig+0x3d8>)
 810a1f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a1fc:	461a      	mov	r2, r3
 810a1fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810a200:	fbb3 f3f2 	udiv	r3, r3, r2
 810a204:	005a      	lsls	r2, r3, #1
 810a206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a208:	685b      	ldr	r3, [r3, #4]
 810a20a:	085b      	lsrs	r3, r3, #1
 810a20c:	441a      	add	r2, r3
 810a20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a210:	685b      	ldr	r3, [r3, #4]
 810a212:	fbb2 f3f3 	udiv	r3, r2, r3
 810a216:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a21a:	2b0f      	cmp	r3, #15
 810a21c:	d916      	bls.n	810a24c <UART_SetConfig+0x348>
 810a21e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a224:	d212      	bcs.n	810a24c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810a226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a228:	b29b      	uxth	r3, r3
 810a22a:	f023 030f 	bic.w	r3, r3, #15
 810a22e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810a230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a232:	085b      	lsrs	r3, r3, #1
 810a234:	b29b      	uxth	r3, r3
 810a236:	f003 0307 	and.w	r3, r3, #7
 810a23a:	b29a      	uxth	r2, r3
 810a23c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 810a23e:	4313      	orrs	r3, r2
 810a240:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 810a242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a244:	681b      	ldr	r3, [r3, #0]
 810a246:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 810a248:	60da      	str	r2, [r3, #12]
 810a24a:	e031      	b.n	810a2b0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 810a24c:	2301      	movs	r3, #1
 810a24e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 810a252:	e02d      	b.n	810a2b0 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 810a254:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810a256:	2200      	movs	r2, #0
 810a258:	469a      	mov	sl, r3
 810a25a:	4693      	mov	fp, r2
 810a25c:	4650      	mov	r0, sl
 810a25e:	4659      	mov	r1, fp
 810a260:	f7fc fce0 	bl	8106c24 <HAL_RCCEx_GetPeriphCLKFreq>
 810a264:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 810a266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810a268:	2b00      	cmp	r3, #0
 810a26a:	d021      	beq.n	810a2b0 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a270:	4a1a      	ldr	r2, [pc, #104]	@ (810a2dc <UART_SetConfig+0x3d8>)
 810a272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a276:	461a      	mov	r2, r3
 810a278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810a27a:	fbb3 f2f2 	udiv	r2, r3, r2
 810a27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a280:	685b      	ldr	r3, [r3, #4]
 810a282:	085b      	lsrs	r3, r3, #1
 810a284:	441a      	add	r2, r3
 810a286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a288:	685b      	ldr	r3, [r3, #4]
 810a28a:	fbb2 f3f3 	udiv	r3, r2, r3
 810a28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a292:	2b0f      	cmp	r3, #15
 810a294:	d909      	bls.n	810a2aa <UART_SetConfig+0x3a6>
 810a296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a29c:	d205      	bcs.n	810a2aa <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810a29e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a2a0:	b29a      	uxth	r2, r3
 810a2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a2a4:	681b      	ldr	r3, [r3, #0]
 810a2a6:	60da      	str	r2, [r3, #12]
 810a2a8:	e002      	b.n	810a2b0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 810a2aa:	2301      	movs	r3, #1
 810a2ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810a2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a2b2:	2201      	movs	r2, #1
 810a2b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810a2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a2ba:	2201      	movs	r2, #1
 810a2bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810a2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a2c2:	2200      	movs	r2, #0
 810a2c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810a2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a2c8:	2200      	movs	r2, #0
 810a2ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810a2cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 810a2d0:	4618      	mov	r0, r3
 810a2d2:	3750      	adds	r7, #80	@ 0x50
 810a2d4:	46bd      	mov	sp, r7
 810a2d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810a2da:	bf00      	nop
 810a2dc:	08117e0c 	.word	0x08117e0c

0810a2e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810a2e0:	b480      	push	{r7}
 810a2e2:	b083      	sub	sp, #12
 810a2e4:	af00      	add	r7, sp, #0
 810a2e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810a2e8:	687b      	ldr	r3, [r7, #4]
 810a2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a2ec:	f003 0308 	and.w	r3, r3, #8
 810a2f0:	2b00      	cmp	r3, #0
 810a2f2:	d00a      	beq.n	810a30a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810a2f4:	687b      	ldr	r3, [r7, #4]
 810a2f6:	681b      	ldr	r3, [r3, #0]
 810a2f8:	685b      	ldr	r3, [r3, #4]
 810a2fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810a2fe:	687b      	ldr	r3, [r7, #4]
 810a300:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810a302:	687b      	ldr	r3, [r7, #4]
 810a304:	681b      	ldr	r3, [r3, #0]
 810a306:	430a      	orrs	r2, r1
 810a308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810a30a:	687b      	ldr	r3, [r7, #4]
 810a30c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a30e:	f003 0301 	and.w	r3, r3, #1
 810a312:	2b00      	cmp	r3, #0
 810a314:	d00a      	beq.n	810a32c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810a316:	687b      	ldr	r3, [r7, #4]
 810a318:	681b      	ldr	r3, [r3, #0]
 810a31a:	685b      	ldr	r3, [r3, #4]
 810a31c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810a320:	687b      	ldr	r3, [r7, #4]
 810a322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a324:	687b      	ldr	r3, [r7, #4]
 810a326:	681b      	ldr	r3, [r3, #0]
 810a328:	430a      	orrs	r2, r1
 810a32a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810a32c:	687b      	ldr	r3, [r7, #4]
 810a32e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a330:	f003 0302 	and.w	r3, r3, #2
 810a334:	2b00      	cmp	r3, #0
 810a336:	d00a      	beq.n	810a34e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810a338:	687b      	ldr	r3, [r7, #4]
 810a33a:	681b      	ldr	r3, [r3, #0]
 810a33c:	685b      	ldr	r3, [r3, #4]
 810a33e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810a342:	687b      	ldr	r3, [r7, #4]
 810a344:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810a346:	687b      	ldr	r3, [r7, #4]
 810a348:	681b      	ldr	r3, [r3, #0]
 810a34a:	430a      	orrs	r2, r1
 810a34c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810a34e:	687b      	ldr	r3, [r7, #4]
 810a350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a352:	f003 0304 	and.w	r3, r3, #4
 810a356:	2b00      	cmp	r3, #0
 810a358:	d00a      	beq.n	810a370 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810a35a:	687b      	ldr	r3, [r7, #4]
 810a35c:	681b      	ldr	r3, [r3, #0]
 810a35e:	685b      	ldr	r3, [r3, #4]
 810a360:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810a364:	687b      	ldr	r3, [r7, #4]
 810a366:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810a368:	687b      	ldr	r3, [r7, #4]
 810a36a:	681b      	ldr	r3, [r3, #0]
 810a36c:	430a      	orrs	r2, r1
 810a36e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810a370:	687b      	ldr	r3, [r7, #4]
 810a372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a374:	f003 0310 	and.w	r3, r3, #16
 810a378:	2b00      	cmp	r3, #0
 810a37a:	d00a      	beq.n	810a392 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810a37c:	687b      	ldr	r3, [r7, #4]
 810a37e:	681b      	ldr	r3, [r3, #0]
 810a380:	689b      	ldr	r3, [r3, #8]
 810a382:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810a386:	687b      	ldr	r3, [r7, #4]
 810a388:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810a38a:	687b      	ldr	r3, [r7, #4]
 810a38c:	681b      	ldr	r3, [r3, #0]
 810a38e:	430a      	orrs	r2, r1
 810a390:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810a392:	687b      	ldr	r3, [r7, #4]
 810a394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a396:	f003 0320 	and.w	r3, r3, #32
 810a39a:	2b00      	cmp	r3, #0
 810a39c:	d00a      	beq.n	810a3b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810a39e:	687b      	ldr	r3, [r7, #4]
 810a3a0:	681b      	ldr	r3, [r3, #0]
 810a3a2:	689b      	ldr	r3, [r3, #8]
 810a3a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810a3a8:	687b      	ldr	r3, [r7, #4]
 810a3aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810a3ac:	687b      	ldr	r3, [r7, #4]
 810a3ae:	681b      	ldr	r3, [r3, #0]
 810a3b0:	430a      	orrs	r2, r1
 810a3b2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810a3b4:	687b      	ldr	r3, [r7, #4]
 810a3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a3b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810a3bc:	2b00      	cmp	r3, #0
 810a3be:	d01a      	beq.n	810a3f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810a3c0:	687b      	ldr	r3, [r7, #4]
 810a3c2:	681b      	ldr	r3, [r3, #0]
 810a3c4:	685b      	ldr	r3, [r3, #4]
 810a3c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810a3ca:	687b      	ldr	r3, [r7, #4]
 810a3cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810a3ce:	687b      	ldr	r3, [r7, #4]
 810a3d0:	681b      	ldr	r3, [r3, #0]
 810a3d2:	430a      	orrs	r2, r1
 810a3d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810a3d6:	687b      	ldr	r3, [r7, #4]
 810a3d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a3da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a3de:	d10a      	bne.n	810a3f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810a3e0:	687b      	ldr	r3, [r7, #4]
 810a3e2:	681b      	ldr	r3, [r3, #0]
 810a3e4:	685b      	ldr	r3, [r3, #4]
 810a3e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810a3ea:	687b      	ldr	r3, [r7, #4]
 810a3ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810a3ee:	687b      	ldr	r3, [r7, #4]
 810a3f0:	681b      	ldr	r3, [r3, #0]
 810a3f2:	430a      	orrs	r2, r1
 810a3f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810a3f6:	687b      	ldr	r3, [r7, #4]
 810a3f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a3fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810a3fe:	2b00      	cmp	r3, #0
 810a400:	d00a      	beq.n	810a418 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810a402:	687b      	ldr	r3, [r7, #4]
 810a404:	681b      	ldr	r3, [r3, #0]
 810a406:	685b      	ldr	r3, [r3, #4]
 810a408:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810a40c:	687b      	ldr	r3, [r7, #4]
 810a40e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810a410:	687b      	ldr	r3, [r7, #4]
 810a412:	681b      	ldr	r3, [r3, #0]
 810a414:	430a      	orrs	r2, r1
 810a416:	605a      	str	r2, [r3, #4]
  }
}
 810a418:	bf00      	nop
 810a41a:	370c      	adds	r7, #12
 810a41c:	46bd      	mov	sp, r7
 810a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a422:	4770      	bx	lr

0810a424 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810a424:	b580      	push	{r7, lr}
 810a426:	b098      	sub	sp, #96	@ 0x60
 810a428:	af02      	add	r7, sp, #8
 810a42a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a42c:	687b      	ldr	r3, [r7, #4]
 810a42e:	2200      	movs	r2, #0
 810a430:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810a434:	f7f7 f83a 	bl	81014ac <HAL_GetTick>
 810a438:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810a43a:	687b      	ldr	r3, [r7, #4]
 810a43c:	681b      	ldr	r3, [r3, #0]
 810a43e:	681b      	ldr	r3, [r3, #0]
 810a440:	f003 0308 	and.w	r3, r3, #8
 810a444:	2b08      	cmp	r3, #8
 810a446:	d12f      	bne.n	810a4a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a448:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810a44c:	9300      	str	r3, [sp, #0]
 810a44e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810a450:	2200      	movs	r2, #0
 810a452:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810a456:	6878      	ldr	r0, [r7, #4]
 810a458:	f000 f88e 	bl	810a578 <UART_WaitOnFlagUntilTimeout>
 810a45c:	4603      	mov	r3, r0
 810a45e:	2b00      	cmp	r3, #0
 810a460:	d022      	beq.n	810a4a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810a462:	687b      	ldr	r3, [r7, #4]
 810a464:	681b      	ldr	r3, [r3, #0]
 810a466:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a46a:	e853 3f00 	ldrex	r3, [r3]
 810a46e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810a470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a472:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810a476:	653b      	str	r3, [r7, #80]	@ 0x50
 810a478:	687b      	ldr	r3, [r7, #4]
 810a47a:	681b      	ldr	r3, [r3, #0]
 810a47c:	461a      	mov	r2, r3
 810a47e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810a480:	647b      	str	r3, [r7, #68]	@ 0x44
 810a482:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a484:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810a486:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810a488:	e841 2300 	strex	r3, r2, [r1]
 810a48c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810a48e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a490:	2b00      	cmp	r3, #0
 810a492:	d1e6      	bne.n	810a462 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810a494:	687b      	ldr	r3, [r7, #4]
 810a496:	2220      	movs	r2, #32
 810a498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810a49c:	687b      	ldr	r3, [r7, #4]
 810a49e:	2200      	movs	r2, #0
 810a4a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a4a4:	2303      	movs	r3, #3
 810a4a6:	e063      	b.n	810a570 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810a4a8:	687b      	ldr	r3, [r7, #4]
 810a4aa:	681b      	ldr	r3, [r3, #0]
 810a4ac:	681b      	ldr	r3, [r3, #0]
 810a4ae:	f003 0304 	and.w	r3, r3, #4
 810a4b2:	2b04      	cmp	r3, #4
 810a4b4:	d149      	bne.n	810a54a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a4b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810a4ba:	9300      	str	r3, [sp, #0]
 810a4bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810a4be:	2200      	movs	r2, #0
 810a4c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810a4c4:	6878      	ldr	r0, [r7, #4]
 810a4c6:	f000 f857 	bl	810a578 <UART_WaitOnFlagUntilTimeout>
 810a4ca:	4603      	mov	r3, r0
 810a4cc:	2b00      	cmp	r3, #0
 810a4ce:	d03c      	beq.n	810a54a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810a4d0:	687b      	ldr	r3, [r7, #4]
 810a4d2:	681b      	ldr	r3, [r3, #0]
 810a4d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a4d8:	e853 3f00 	ldrex	r3, [r3]
 810a4dc:	623b      	str	r3, [r7, #32]
   return(result);
 810a4de:	6a3b      	ldr	r3, [r7, #32]
 810a4e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810a4e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810a4e6:	687b      	ldr	r3, [r7, #4]
 810a4e8:	681b      	ldr	r3, [r3, #0]
 810a4ea:	461a      	mov	r2, r3
 810a4ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810a4ee:	633b      	str	r3, [r7, #48]	@ 0x30
 810a4f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a4f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810a4f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a4f6:	e841 2300 	strex	r3, r2, [r1]
 810a4fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810a4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a4fe:	2b00      	cmp	r3, #0
 810a500:	d1e6      	bne.n	810a4d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a502:	687b      	ldr	r3, [r7, #4]
 810a504:	681b      	ldr	r3, [r3, #0]
 810a506:	3308      	adds	r3, #8
 810a508:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a50a:	693b      	ldr	r3, [r7, #16]
 810a50c:	e853 3f00 	ldrex	r3, [r3]
 810a510:	60fb      	str	r3, [r7, #12]
   return(result);
 810a512:	68fb      	ldr	r3, [r7, #12]
 810a514:	f023 0301 	bic.w	r3, r3, #1
 810a518:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a51a:	687b      	ldr	r3, [r7, #4]
 810a51c:	681b      	ldr	r3, [r3, #0]
 810a51e:	3308      	adds	r3, #8
 810a520:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810a522:	61fa      	str	r2, [r7, #28]
 810a524:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a526:	69b9      	ldr	r1, [r7, #24]
 810a528:	69fa      	ldr	r2, [r7, #28]
 810a52a:	e841 2300 	strex	r3, r2, [r1]
 810a52e:	617b      	str	r3, [r7, #20]
   return(result);
 810a530:	697b      	ldr	r3, [r7, #20]
 810a532:	2b00      	cmp	r3, #0
 810a534:	d1e5      	bne.n	810a502 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810a536:	687b      	ldr	r3, [r7, #4]
 810a538:	2220      	movs	r2, #32
 810a53a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810a53e:	687b      	ldr	r3, [r7, #4]
 810a540:	2200      	movs	r2, #0
 810a542:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a546:	2303      	movs	r3, #3
 810a548:	e012      	b.n	810a570 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810a54a:	687b      	ldr	r3, [r7, #4]
 810a54c:	2220      	movs	r2, #32
 810a54e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810a552:	687b      	ldr	r3, [r7, #4]
 810a554:	2220      	movs	r2, #32
 810a556:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a55a:	687b      	ldr	r3, [r7, #4]
 810a55c:	2200      	movs	r2, #0
 810a55e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810a560:	687b      	ldr	r3, [r7, #4]
 810a562:	2200      	movs	r2, #0
 810a564:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810a566:	687b      	ldr	r3, [r7, #4]
 810a568:	2200      	movs	r2, #0
 810a56a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810a56e:	2300      	movs	r3, #0
}
 810a570:	4618      	mov	r0, r3
 810a572:	3758      	adds	r7, #88	@ 0x58
 810a574:	46bd      	mov	sp, r7
 810a576:	bd80      	pop	{r7, pc}

0810a578 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810a578:	b580      	push	{r7, lr}
 810a57a:	b084      	sub	sp, #16
 810a57c:	af00      	add	r7, sp, #0
 810a57e:	60f8      	str	r0, [r7, #12]
 810a580:	60b9      	str	r1, [r7, #8]
 810a582:	603b      	str	r3, [r7, #0]
 810a584:	4613      	mov	r3, r2
 810a586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a588:	e04f      	b.n	810a62a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810a58a:	69bb      	ldr	r3, [r7, #24]
 810a58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a590:	d04b      	beq.n	810a62a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810a592:	f7f6 ff8b 	bl	81014ac <HAL_GetTick>
 810a596:	4602      	mov	r2, r0
 810a598:	683b      	ldr	r3, [r7, #0]
 810a59a:	1ad3      	subs	r3, r2, r3
 810a59c:	69ba      	ldr	r2, [r7, #24]
 810a59e:	429a      	cmp	r2, r3
 810a5a0:	d302      	bcc.n	810a5a8 <UART_WaitOnFlagUntilTimeout+0x30>
 810a5a2:	69bb      	ldr	r3, [r7, #24]
 810a5a4:	2b00      	cmp	r3, #0
 810a5a6:	d101      	bne.n	810a5ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810a5a8:	2303      	movs	r3, #3
 810a5aa:	e04e      	b.n	810a64a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810a5ac:	68fb      	ldr	r3, [r7, #12]
 810a5ae:	681b      	ldr	r3, [r3, #0]
 810a5b0:	681b      	ldr	r3, [r3, #0]
 810a5b2:	f003 0304 	and.w	r3, r3, #4
 810a5b6:	2b00      	cmp	r3, #0
 810a5b8:	d037      	beq.n	810a62a <UART_WaitOnFlagUntilTimeout+0xb2>
 810a5ba:	68bb      	ldr	r3, [r7, #8]
 810a5bc:	2b80      	cmp	r3, #128	@ 0x80
 810a5be:	d034      	beq.n	810a62a <UART_WaitOnFlagUntilTimeout+0xb2>
 810a5c0:	68bb      	ldr	r3, [r7, #8]
 810a5c2:	2b40      	cmp	r3, #64	@ 0x40
 810a5c4:	d031      	beq.n	810a62a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810a5c6:	68fb      	ldr	r3, [r7, #12]
 810a5c8:	681b      	ldr	r3, [r3, #0]
 810a5ca:	69db      	ldr	r3, [r3, #28]
 810a5cc:	f003 0308 	and.w	r3, r3, #8
 810a5d0:	2b08      	cmp	r3, #8
 810a5d2:	d110      	bne.n	810a5f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810a5d4:	68fb      	ldr	r3, [r7, #12]
 810a5d6:	681b      	ldr	r3, [r3, #0]
 810a5d8:	2208      	movs	r2, #8
 810a5da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810a5dc:	68f8      	ldr	r0, [r7, #12]
 810a5de:	f000 f838 	bl	810a652 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810a5e2:	68fb      	ldr	r3, [r7, #12]
 810a5e4:	2208      	movs	r2, #8
 810a5e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810a5ea:	68fb      	ldr	r3, [r7, #12]
 810a5ec:	2200      	movs	r2, #0
 810a5ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810a5f2:	2301      	movs	r3, #1
 810a5f4:	e029      	b.n	810a64a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810a5f6:	68fb      	ldr	r3, [r7, #12]
 810a5f8:	681b      	ldr	r3, [r3, #0]
 810a5fa:	69db      	ldr	r3, [r3, #28]
 810a5fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810a600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810a604:	d111      	bne.n	810a62a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810a606:	68fb      	ldr	r3, [r7, #12]
 810a608:	681b      	ldr	r3, [r3, #0]
 810a60a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810a60e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810a610:	68f8      	ldr	r0, [r7, #12]
 810a612:	f000 f81e 	bl	810a652 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810a616:	68fb      	ldr	r3, [r7, #12]
 810a618:	2220      	movs	r2, #32
 810a61a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810a61e:	68fb      	ldr	r3, [r7, #12]
 810a620:	2200      	movs	r2, #0
 810a622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810a626:	2303      	movs	r3, #3
 810a628:	e00f      	b.n	810a64a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a62a:	68fb      	ldr	r3, [r7, #12]
 810a62c:	681b      	ldr	r3, [r3, #0]
 810a62e:	69da      	ldr	r2, [r3, #28]
 810a630:	68bb      	ldr	r3, [r7, #8]
 810a632:	4013      	ands	r3, r2
 810a634:	68ba      	ldr	r2, [r7, #8]
 810a636:	429a      	cmp	r2, r3
 810a638:	bf0c      	ite	eq
 810a63a:	2301      	moveq	r3, #1
 810a63c:	2300      	movne	r3, #0
 810a63e:	b2db      	uxtb	r3, r3
 810a640:	461a      	mov	r2, r3
 810a642:	79fb      	ldrb	r3, [r7, #7]
 810a644:	429a      	cmp	r2, r3
 810a646:	d0a0      	beq.n	810a58a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810a648:	2300      	movs	r3, #0
}
 810a64a:	4618      	mov	r0, r3
 810a64c:	3710      	adds	r7, #16
 810a64e:	46bd      	mov	sp, r7
 810a650:	bd80      	pop	{r7, pc}

0810a652 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810a652:	b480      	push	{r7}
 810a654:	b095      	sub	sp, #84	@ 0x54
 810a656:	af00      	add	r7, sp, #0
 810a658:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810a65a:	687b      	ldr	r3, [r7, #4]
 810a65c:	681b      	ldr	r3, [r3, #0]
 810a65e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a662:	e853 3f00 	ldrex	r3, [r3]
 810a666:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810a668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a66a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810a66e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810a670:	687b      	ldr	r3, [r7, #4]
 810a672:	681b      	ldr	r3, [r3, #0]
 810a674:	461a      	mov	r2, r3
 810a676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810a678:	643b      	str	r3, [r7, #64]	@ 0x40
 810a67a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a67c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810a67e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810a680:	e841 2300 	strex	r3, r2, [r1]
 810a684:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810a686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a688:	2b00      	cmp	r3, #0
 810a68a:	d1e6      	bne.n	810a65a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810a68c:	687b      	ldr	r3, [r7, #4]
 810a68e:	681b      	ldr	r3, [r3, #0]
 810a690:	3308      	adds	r3, #8
 810a692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a694:	6a3b      	ldr	r3, [r7, #32]
 810a696:	e853 3f00 	ldrex	r3, [r3]
 810a69a:	61fb      	str	r3, [r7, #28]
   return(result);
 810a69c:	69fb      	ldr	r3, [r7, #28]
 810a69e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810a6a2:	f023 0301 	bic.w	r3, r3, #1
 810a6a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a6a8:	687b      	ldr	r3, [r7, #4]
 810a6aa:	681b      	ldr	r3, [r3, #0]
 810a6ac:	3308      	adds	r3, #8
 810a6ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810a6b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810a6b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a6b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810a6b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810a6b8:	e841 2300 	strex	r3, r2, [r1]
 810a6bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810a6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a6c0:	2b00      	cmp	r3, #0
 810a6c2:	d1e3      	bne.n	810a68c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810a6c4:	687b      	ldr	r3, [r7, #4]
 810a6c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810a6c8:	2b01      	cmp	r3, #1
 810a6ca:	d118      	bne.n	810a6fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810a6cc:	687b      	ldr	r3, [r7, #4]
 810a6ce:	681b      	ldr	r3, [r3, #0]
 810a6d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a6d2:	68fb      	ldr	r3, [r7, #12]
 810a6d4:	e853 3f00 	ldrex	r3, [r3]
 810a6d8:	60bb      	str	r3, [r7, #8]
   return(result);
 810a6da:	68bb      	ldr	r3, [r7, #8]
 810a6dc:	f023 0310 	bic.w	r3, r3, #16
 810a6e0:	647b      	str	r3, [r7, #68]	@ 0x44
 810a6e2:	687b      	ldr	r3, [r7, #4]
 810a6e4:	681b      	ldr	r3, [r3, #0]
 810a6e6:	461a      	mov	r2, r3
 810a6e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a6ea:	61bb      	str	r3, [r7, #24]
 810a6ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a6ee:	6979      	ldr	r1, [r7, #20]
 810a6f0:	69ba      	ldr	r2, [r7, #24]
 810a6f2:	e841 2300 	strex	r3, r2, [r1]
 810a6f6:	613b      	str	r3, [r7, #16]
   return(result);
 810a6f8:	693b      	ldr	r3, [r7, #16]
 810a6fa:	2b00      	cmp	r3, #0
 810a6fc:	d1e6      	bne.n	810a6cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810a6fe:	687b      	ldr	r3, [r7, #4]
 810a700:	2220      	movs	r2, #32
 810a702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a706:	687b      	ldr	r3, [r7, #4]
 810a708:	2200      	movs	r2, #0
 810a70a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810a70c:	687b      	ldr	r3, [r7, #4]
 810a70e:	2200      	movs	r2, #0
 810a710:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810a712:	bf00      	nop
 810a714:	3754      	adds	r7, #84	@ 0x54
 810a716:	46bd      	mov	sp, r7
 810a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a71c:	4770      	bx	lr

0810a71e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810a71e:	b480      	push	{r7}
 810a720:	b085      	sub	sp, #20
 810a722:	af00      	add	r7, sp, #0
 810a724:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a726:	687b      	ldr	r3, [r7, #4]
 810a728:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810a72c:	2b01      	cmp	r3, #1
 810a72e:	d101      	bne.n	810a734 <HAL_UARTEx_DisableFifoMode+0x16>
 810a730:	2302      	movs	r3, #2
 810a732:	e027      	b.n	810a784 <HAL_UARTEx_DisableFifoMode+0x66>
 810a734:	687b      	ldr	r3, [r7, #4]
 810a736:	2201      	movs	r2, #1
 810a738:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810a73c:	687b      	ldr	r3, [r7, #4]
 810a73e:	2224      	movs	r2, #36	@ 0x24
 810a740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a744:	687b      	ldr	r3, [r7, #4]
 810a746:	681b      	ldr	r3, [r3, #0]
 810a748:	681b      	ldr	r3, [r3, #0]
 810a74a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a74c:	687b      	ldr	r3, [r7, #4]
 810a74e:	681b      	ldr	r3, [r3, #0]
 810a750:	681a      	ldr	r2, [r3, #0]
 810a752:	687b      	ldr	r3, [r7, #4]
 810a754:	681b      	ldr	r3, [r3, #0]
 810a756:	f022 0201 	bic.w	r2, r2, #1
 810a75a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810a75c:	68fb      	ldr	r3, [r7, #12]
 810a75e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810a762:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810a764:	687b      	ldr	r3, [r7, #4]
 810a766:	2200      	movs	r2, #0
 810a768:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a76a:	687b      	ldr	r3, [r7, #4]
 810a76c:	681b      	ldr	r3, [r3, #0]
 810a76e:	68fa      	ldr	r2, [r7, #12]
 810a770:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a772:	687b      	ldr	r3, [r7, #4]
 810a774:	2220      	movs	r2, #32
 810a776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a77a:	687b      	ldr	r3, [r7, #4]
 810a77c:	2200      	movs	r2, #0
 810a77e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810a782:	2300      	movs	r3, #0
}
 810a784:	4618      	mov	r0, r3
 810a786:	3714      	adds	r7, #20
 810a788:	46bd      	mov	sp, r7
 810a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a78e:	4770      	bx	lr

0810a790 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810a790:	b580      	push	{r7, lr}
 810a792:	b084      	sub	sp, #16
 810a794:	af00      	add	r7, sp, #0
 810a796:	6078      	str	r0, [r7, #4]
 810a798:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a79a:	687b      	ldr	r3, [r7, #4]
 810a79c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810a7a0:	2b01      	cmp	r3, #1
 810a7a2:	d101      	bne.n	810a7a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810a7a4:	2302      	movs	r3, #2
 810a7a6:	e02d      	b.n	810a804 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810a7a8:	687b      	ldr	r3, [r7, #4]
 810a7aa:	2201      	movs	r2, #1
 810a7ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810a7b0:	687b      	ldr	r3, [r7, #4]
 810a7b2:	2224      	movs	r2, #36	@ 0x24
 810a7b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a7b8:	687b      	ldr	r3, [r7, #4]
 810a7ba:	681b      	ldr	r3, [r3, #0]
 810a7bc:	681b      	ldr	r3, [r3, #0]
 810a7be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a7c0:	687b      	ldr	r3, [r7, #4]
 810a7c2:	681b      	ldr	r3, [r3, #0]
 810a7c4:	681a      	ldr	r2, [r3, #0]
 810a7c6:	687b      	ldr	r3, [r7, #4]
 810a7c8:	681b      	ldr	r3, [r3, #0]
 810a7ca:	f022 0201 	bic.w	r2, r2, #1
 810a7ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810a7d0:	687b      	ldr	r3, [r7, #4]
 810a7d2:	681b      	ldr	r3, [r3, #0]
 810a7d4:	689b      	ldr	r3, [r3, #8]
 810a7d6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810a7da:	687b      	ldr	r3, [r7, #4]
 810a7dc:	681b      	ldr	r3, [r3, #0]
 810a7de:	683a      	ldr	r2, [r7, #0]
 810a7e0:	430a      	orrs	r2, r1
 810a7e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810a7e4:	6878      	ldr	r0, [r7, #4]
 810a7e6:	f000 f84f 	bl	810a888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a7ea:	687b      	ldr	r3, [r7, #4]
 810a7ec:	681b      	ldr	r3, [r3, #0]
 810a7ee:	68fa      	ldr	r2, [r7, #12]
 810a7f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a7f2:	687b      	ldr	r3, [r7, #4]
 810a7f4:	2220      	movs	r2, #32
 810a7f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a7fa:	687b      	ldr	r3, [r7, #4]
 810a7fc:	2200      	movs	r2, #0
 810a7fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810a802:	2300      	movs	r3, #0
}
 810a804:	4618      	mov	r0, r3
 810a806:	3710      	adds	r7, #16
 810a808:	46bd      	mov	sp, r7
 810a80a:	bd80      	pop	{r7, pc}

0810a80c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810a80c:	b580      	push	{r7, lr}
 810a80e:	b084      	sub	sp, #16
 810a810:	af00      	add	r7, sp, #0
 810a812:	6078      	str	r0, [r7, #4]
 810a814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a816:	687b      	ldr	r3, [r7, #4]
 810a818:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810a81c:	2b01      	cmp	r3, #1
 810a81e:	d101      	bne.n	810a824 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810a820:	2302      	movs	r3, #2
 810a822:	e02d      	b.n	810a880 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810a824:	687b      	ldr	r3, [r7, #4]
 810a826:	2201      	movs	r2, #1
 810a828:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810a82c:	687b      	ldr	r3, [r7, #4]
 810a82e:	2224      	movs	r2, #36	@ 0x24
 810a830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a834:	687b      	ldr	r3, [r7, #4]
 810a836:	681b      	ldr	r3, [r3, #0]
 810a838:	681b      	ldr	r3, [r3, #0]
 810a83a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a83c:	687b      	ldr	r3, [r7, #4]
 810a83e:	681b      	ldr	r3, [r3, #0]
 810a840:	681a      	ldr	r2, [r3, #0]
 810a842:	687b      	ldr	r3, [r7, #4]
 810a844:	681b      	ldr	r3, [r3, #0]
 810a846:	f022 0201 	bic.w	r2, r2, #1
 810a84a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810a84c:	687b      	ldr	r3, [r7, #4]
 810a84e:	681b      	ldr	r3, [r3, #0]
 810a850:	689b      	ldr	r3, [r3, #8]
 810a852:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810a856:	687b      	ldr	r3, [r7, #4]
 810a858:	681b      	ldr	r3, [r3, #0]
 810a85a:	683a      	ldr	r2, [r7, #0]
 810a85c:	430a      	orrs	r2, r1
 810a85e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810a860:	6878      	ldr	r0, [r7, #4]
 810a862:	f000 f811 	bl	810a888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a866:	687b      	ldr	r3, [r7, #4]
 810a868:	681b      	ldr	r3, [r3, #0]
 810a86a:	68fa      	ldr	r2, [r7, #12]
 810a86c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a86e:	687b      	ldr	r3, [r7, #4]
 810a870:	2220      	movs	r2, #32
 810a872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a876:	687b      	ldr	r3, [r7, #4]
 810a878:	2200      	movs	r2, #0
 810a87a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810a87e:	2300      	movs	r3, #0
}
 810a880:	4618      	mov	r0, r3
 810a882:	3710      	adds	r7, #16
 810a884:	46bd      	mov	sp, r7
 810a886:	bd80      	pop	{r7, pc}

0810a888 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810a888:	b480      	push	{r7}
 810a88a:	b085      	sub	sp, #20
 810a88c:	af00      	add	r7, sp, #0
 810a88e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810a890:	687b      	ldr	r3, [r7, #4]
 810a892:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810a894:	2b00      	cmp	r3, #0
 810a896:	d108      	bne.n	810a8aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810a898:	687b      	ldr	r3, [r7, #4]
 810a89a:	2201      	movs	r2, #1
 810a89c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810a8a0:	687b      	ldr	r3, [r7, #4]
 810a8a2:	2201      	movs	r2, #1
 810a8a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810a8a8:	e031      	b.n	810a90e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810a8aa:	2308      	movs	r3, #8
 810a8ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810a8ae:	2308      	movs	r3, #8
 810a8b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810a8b2:	687b      	ldr	r3, [r7, #4]
 810a8b4:	681b      	ldr	r3, [r3, #0]
 810a8b6:	689b      	ldr	r3, [r3, #8]
 810a8b8:	0e5b      	lsrs	r3, r3, #25
 810a8ba:	b2db      	uxtb	r3, r3
 810a8bc:	f003 0307 	and.w	r3, r3, #7
 810a8c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810a8c2:	687b      	ldr	r3, [r7, #4]
 810a8c4:	681b      	ldr	r3, [r3, #0]
 810a8c6:	689b      	ldr	r3, [r3, #8]
 810a8c8:	0f5b      	lsrs	r3, r3, #29
 810a8ca:	b2db      	uxtb	r3, r3
 810a8cc:	f003 0307 	and.w	r3, r3, #7
 810a8d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810a8d2:	7bbb      	ldrb	r3, [r7, #14]
 810a8d4:	7b3a      	ldrb	r2, [r7, #12]
 810a8d6:	4911      	ldr	r1, [pc, #68]	@ (810a91c <UARTEx_SetNbDataToProcess+0x94>)
 810a8d8:	5c8a      	ldrb	r2, [r1, r2]
 810a8da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810a8de:	7b3a      	ldrb	r2, [r7, #12]
 810a8e0:	490f      	ldr	r1, [pc, #60]	@ (810a920 <UARTEx_SetNbDataToProcess+0x98>)
 810a8e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810a8e4:	fb93 f3f2 	sdiv	r3, r3, r2
 810a8e8:	b29a      	uxth	r2, r3
 810a8ea:	687b      	ldr	r3, [r7, #4]
 810a8ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810a8f0:	7bfb      	ldrb	r3, [r7, #15]
 810a8f2:	7b7a      	ldrb	r2, [r7, #13]
 810a8f4:	4909      	ldr	r1, [pc, #36]	@ (810a91c <UARTEx_SetNbDataToProcess+0x94>)
 810a8f6:	5c8a      	ldrb	r2, [r1, r2]
 810a8f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810a8fc:	7b7a      	ldrb	r2, [r7, #13]
 810a8fe:	4908      	ldr	r1, [pc, #32]	@ (810a920 <UARTEx_SetNbDataToProcess+0x98>)
 810a900:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810a902:	fb93 f3f2 	sdiv	r3, r3, r2
 810a906:	b29a      	uxth	r2, r3
 810a908:	687b      	ldr	r3, [r7, #4]
 810a90a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810a90e:	bf00      	nop
 810a910:	3714      	adds	r7, #20
 810a912:	46bd      	mov	sp, r7
 810a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a918:	4770      	bx	lr
 810a91a:	bf00      	nop
 810a91c:	08117e24 	.word	0x08117e24
 810a920:	08117e2c 	.word	0x08117e2c

0810a924 <nx_stm32_eth_driver>:
/*                                                                        */
/**************************************************************************/
/****** DRIVER SPECIFIC ****** Start of part/vendor specific global driver entry function name.  */
VOID  nx_stm32_eth_driver(NX_IP_DRIVER *driver_req_ptr)
/****** DRIVER SPECIFIC ****** End of part/vendor specific global driver entry function name.  */
{
 810a924:	b580      	push	{r7, lr}
 810a926:	b082      	sub	sp, #8
 810a928:	af00      	add	r7, sp, #0
 810a92a:	6078      	str	r0, [r7, #4]

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 810a92c:	687b      	ldr	r3, [r7, #4]
 810a92e:	2200      	movs	r2, #0
 810a930:	605a      	str	r2, [r3, #4]

  /* Process according to the driver request type in the IP control
  block.  */
  switch (driver_req_ptr -> nx_ip_driver_command)
 810a932:	687b      	ldr	r3, [r7, #4]
 810a934:	681b      	ldr	r3, [r3, #0]
 810a936:	2b13      	cmp	r3, #19
 810a938:	d84e      	bhi.n	810a9d8 <nx_stm32_eth_driver+0xb4>
 810a93a:	a201      	add	r2, pc, #4	@ (adr r2, 810a940 <nx_stm32_eth_driver+0x1c>)
 810a93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a940:	0810a9b1 	.word	0x0810a9b1
 810a944:	0810a999 	.word	0x0810a999
 810a948:	0810a9a1 	.word	0x0810a9a1
 810a94c:	0810a9a9 	.word	0x0810a9a9
 810a950:	0810a9b1 	.word	0x0810a9b1
 810a954:	0810a9b1 	.word	0x0810a9b1
 810a958:	0810a9b1 	.word	0x0810a9b1
 810a95c:	0810a9b1 	.word	0x0810a9b1
 810a960:	0810a9b9 	.word	0x0810a9b9
 810a964:	0810a9c1 	.word	0x0810a9c1
 810a968:	0810a9c9 	.word	0x0810a9c9
 810a96c:	0810a9d9 	.word	0x0810a9d9
 810a970:	0810a9d9 	.word	0x0810a9d9
 810a974:	0810a9d9 	.word	0x0810a9d9
 810a978:	0810a9d9 	.word	0x0810a9d9
 810a97c:	0810a9d9 	.word	0x0810a9d9
 810a980:	0810a9d9 	.word	0x0810a9d9
 810a984:	0810a9d9 	.word	0x0810a9d9
 810a988:	0810a9d1 	.word	0x0810a9d1
 810a98c:	0810a991 	.word	0x0810a991
  {

  case NX_LINK_INTERFACE_ATTACH:

    /* Process link interface attach requests.  */
    _nx_driver_interface_attach(driver_req_ptr);
 810a990:	6878      	ldr	r0, [r7, #4]
 810a992:	f000 f82d 	bl	810a9f0 <_nx_driver_interface_attach>
    break;
 810a996:	e026      	b.n	810a9e6 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_INITIALIZE:
    {

      /* Process link initialize requests.  */
      _nx_driver_initialize(driver_req_ptr);
 810a998:	6878      	ldr	r0, [r7, #4]
 810a99a:	f000 f83d 	bl	810aa18 <_nx_driver_initialize>
      break;
 810a99e:	e022      	b.n	810a9e6 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_ENABLE:
    {

      /* Process link enable requests.  */
      _nx_driver_enable(driver_req_ptr);
 810a9a0:	6878      	ldr	r0, [r7, #4]
 810a9a2:	f000 f8ad 	bl	810ab00 <_nx_driver_enable>
      break;
 810a9a6:	e01e      	b.n	810a9e6 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_DISABLE:
    {

      /* Process link disable requests.  */
      _nx_driver_disable(driver_req_ptr);
 810a9a8:	6878      	ldr	r0, [r7, #4]
 810a9aa:	f000 f931 	bl	810ac10 <_nx_driver_disable>
      break;
 810a9ae:	e01a      	b.n	810a9e6 <nx_stm32_eth_driver+0xc2>
  case NX_LINK_RARP_SEND:
  case NX_LINK_PACKET_SEND:
    {

      /* Process packet send requests.  */
      _nx_driver_packet_send(driver_req_ptr);
 810a9b0:	6878      	ldr	r0, [r7, #4]
 810a9b2:	f000 f957 	bl	810ac64 <_nx_driver_packet_send>
      break;
 810a9b6:	e016      	b.n	810a9e6 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_MULTICAST_JOIN:
    {

      /* Process multicast join requests.  */
      _nx_driver_multicast_join(driver_req_ptr);
 810a9b8:	6878      	ldr	r0, [r7, #4]
 810a9ba:	f000 fa15 	bl	810ade8 <_nx_driver_multicast_join>
      break;
 810a9be:	e012      	b.n	810a9e6 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_MULTICAST_LEAVE:
    {

      /* Process multicast leave requests.  */
      _nx_driver_multicast_leave(driver_req_ptr);
 810a9c0:	6878      	ldr	r0, [r7, #4]
 810a9c2:	f000 fa27 	bl	810ae14 <_nx_driver_multicast_leave>
      break;
 810a9c6:	e00e      	b.n	810a9e6 <nx_stm32_eth_driver+0xc2>

  case NX_LINK_GET_STATUS:
    {

      /* Process get status requests.  */
      _nx_driver_get_status(driver_req_ptr);
 810a9c8:	6878      	ldr	r0, [r7, #4]
 810a9ca:	f000 fa39 	bl	810ae40 <_nx_driver_get_status>
      break;
 810a9ce:	e00a      	b.n	810a9e6 <nx_stm32_eth_driver+0xc2>
    {

      /* Process driver deferred requests.  */

      /* Process a device driver function on behave of the IP thread. */
      _nx_driver_deferred_processing(driver_req_ptr);
 810a9d0:	6878      	ldr	r0, [r7, #4]
 810a9d2:	f000 fa4b 	bl	810ae6c <_nx_driver_deferred_processing>

      break;
 810a9d6:	e006      	b.n	810a9e6 <nx_stm32_eth_driver+0xc2>


    /* Invalid driver request.  */

    /* Return the unhandled command status.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_UNHANDLED_COMMAND;
 810a9d8:	687b      	ldr	r3, [r7, #4]
 810a9da:	2244      	movs	r2, #68	@ 0x44
 810a9dc:	605a      	str	r2, [r3, #4]

    /* Default to successful return.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 810a9de:	687b      	ldr	r3, [r7, #4]
 810a9e0:	225a      	movs	r2, #90	@ 0x5a
 810a9e2:	605a      	str	r2, [r3, #4]
  }
}
 810a9e4:	bf00      	nop
 810a9e6:	bf00      	nop
 810a9e8:	3708      	adds	r7, #8
 810a9ea:	46bd      	mov	sp, r7
 810a9ec:	bd80      	pop	{r7, pc}
 810a9ee:	bf00      	nop

0810a9f0 <_nx_driver_interface_attach>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_interface_attach(NX_IP_DRIVER *driver_req_ptr)
{
 810a9f0:	b480      	push	{r7}
 810a9f2:	b083      	sub	sp, #12
 810a9f4:	af00      	add	r7, sp, #0
 810a9f6:	6078      	str	r0, [r7, #4]


  /* Setup the driver's interface.  This example is for a simple one-interface
  Ethernet driver. Additional logic is necessary for multiple port devices.  */
  nx_driver_information.nx_driver_information_interface =  driver_req_ptr -> nx_ip_driver_interface;
 810a9f8:	687b      	ldr	r3, [r7, #4]
 810a9fa:	69db      	ldr	r3, [r3, #28]
 810a9fc:	4a05      	ldr	r2, [pc, #20]	@ (810aa14 <_nx_driver_interface_attach+0x24>)
 810a9fe:	60d3      	str	r3, [r2, #12]
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  driver_req_ptr -> nx_ip_driver_interface -> nx_interface_capability_flag = NX_DRIVER_CAPABILITY;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  /* Return successful status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 810aa00:	687b      	ldr	r3, [r7, #4]
 810aa02:	2200      	movs	r2, #0
 810aa04:	605a      	str	r2, [r3, #4]
}
 810aa06:	bf00      	nop
 810aa08:	370c      	adds	r7, #12
 810aa0a:	46bd      	mov	sp, r7
 810aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa10:	4770      	bx	lr
 810aa12:	bf00      	nop
 810aa14:	20058004 	.word	0x20058004

0810aa18 <_nx_driver_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 810aa18:	b580      	push	{r7, lr}
 810aa1a:	b088      	sub	sp, #32
 810aa1c:	af00      	add	r7, sp, #0
 810aa1e:	6078      	str	r0, [r7, #4]
  UINT            status;
  CHAR           *payload_address;       /* Address of the first payload*/
  VOID           *rounded_pool_start;    /* Rounded stating address     */

  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 810aa20:	687b      	ldr	r3, [r7, #4]
 810aa22:	699b      	ldr	r3, [r3, #24]
 810aa24:	61fb      	str	r3, [r7, #28]

  /* Setup interface pointer.  */
  interface_ptr = driver_req_ptr -> nx_ip_driver_interface;
 810aa26:	687b      	ldr	r3, [r7, #4]
 810aa28:	69db      	ldr	r3, [r3, #28]
 810aa2a:	61bb      	str	r3, [r7, #24]

  /* Initialize the driver's information structure.  */

  /* Default IP pointer to NULL.  */
  nx_driver_information.nx_driver_information_ip_ptr =               NX_NULL;
 810aa2c:	4b31      	ldr	r3, [pc, #196]	@ (810aaf4 <_nx_driver_initialize+0xdc>)
 810aa2e:	2200      	movs	r2, #0
 810aa30:	601a      	str	r2, [r3, #0]

  /* Setup the driver state to not initialized.  */
  nx_driver_information.nx_driver_information_state =                NX_DRIVER_STATE_NOT_INITIALIZED;
 810aa32:	4b30      	ldr	r3, [pc, #192]	@ (810aaf4 <_nx_driver_initialize+0xdc>)
 810aa34:	2201      	movs	r2, #1
 810aa36:	605a      	str	r2, [r3, #4]

  /* Setup the default packet pool for the driver's received packets.  */
  nx_driver_information.nx_driver_information_packet_pool_ptr = ip_ptr -> nx_ip_default_packet_pool;
 810aa38:	69fb      	ldr	r3, [r7, #28]
 810aa3a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 810aa3e:	4a2d      	ldr	r2, [pc, #180]	@ (810aaf4 <_nx_driver_initialize+0xdc>)
 810aa40:	6093      	str	r3, [r2, #8]

  /* Get the rounded start pool start. */
  rounded_pool_start = nx_driver_information.nx_driver_information_packet_pool_ptr->nx_packet_pool_start;
 810aa42:	4b2c      	ldr	r3, [pc, #176]	@ (810aaf4 <_nx_driver_initialize+0xdc>)
 810aa44:	689b      	ldr	r3, [r3, #8]
 810aa46:	6a1b      	ldr	r3, [r3, #32]
 810aa48:	617b      	str	r3, [r7, #20]

  /* Calculate the address of payload. */
  payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 810aa4a:	697b      	ldr	r3, [r7, #20]
 810aa4c:	3338      	adds	r3, #56	@ 0x38
 810aa4e:	613b      	str	r3, [r7, #16]

  /* Align the address of payload. */
  payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 810aa50:	693b      	ldr	r3, [r7, #16]
 810aa52:	3303      	adds	r3, #3
 810aa54:	f023 0303 	bic.w	r3, r3, #3
 810aa58:	613b      	str	r3, [r7, #16]

  /* Calculate the header size. */
  header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 810aa5a:	693a      	ldr	r2, [r7, #16]
 810aa5c:	697b      	ldr	r3, [r7, #20]
 810aa5e:	1ad3      	subs	r3, r2, r3
 810aa60:	4a25      	ldr	r2, [pc, #148]	@ (810aaf8 <_nx_driver_initialize+0xe0>)
 810aa62:	6013      	str	r3, [r2, #0]

  /* Clear the deferred events for the driver.  */
  nx_driver_information.nx_driver_information_deferred_events =       0;
 810aa64:	4b23      	ldr	r3, [pc, #140]	@ (810aaf4 <_nx_driver_initialize+0xdc>)
 810aa66:	2200      	movs	r2, #0
 810aa68:	611a      	str	r2, [r3, #16]

  /* Call the hardware-specific ethernet controller initialization.  */
  status =  _nx_driver_hardware_initialize(driver_req_ptr);
 810aa6a:	6878      	ldr	r0, [r7, #4]
 810aa6c:	f000 fa92 	bl	810af94 <_nx_driver_hardware_initialize>
 810aa70:	60f8      	str	r0, [r7, #12]

  /* Determine if the request was successful.  */
  if (status == NX_SUCCESS)
 810aa72:	68fb      	ldr	r3, [r7, #12]
 810aa74:	2b00      	cmp	r3, #0
 810aa76:	d136      	bne.n	810aae6 <_nx_driver_initialize+0xce>
  {

    /* Successful hardware initialization.  */

    /* Setup driver information to point to IP pointer.  */
    nx_driver_information.nx_driver_information_ip_ptr = driver_req_ptr -> nx_ip_driver_ptr;
 810aa78:	687b      	ldr	r3, [r7, #4]
 810aa7a:	699b      	ldr	r3, [r3, #24]
 810aa7c:	4a1d      	ldr	r2, [pc, #116]	@ (810aaf4 <_nx_driver_initialize+0xdc>)
 810aa7e:	6013      	str	r3, [r2, #0]

    /* Setup the link maximum transfer unit. */
    interface_ptr -> nx_interface_ip_mtu_size =  NX_DRIVER_ETHERNET_MTU - NX_DRIVER_ETHERNET_FRAME_SIZE;
 810aa80:	69bb      	ldr	r3, [r7, #24]
 810aa82:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 810aa86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Setup the physical address of this IP instance.  Increment the
    physical address lsw to simulate multiple nodes hanging on the
    ethernet.  */
    interface_ptr -> nx_interface_physical_address_msw =
      (ULONG)(( eth_handle.Init.MACAddr[0] << 8) | ( eth_handle.Init.MACAddr[1]));
 810aa88:	4b1c      	ldr	r3, [pc, #112]	@ (810aafc <_nx_driver_initialize+0xe4>)
 810aa8a:	685b      	ldr	r3, [r3, #4]
 810aa8c:	781b      	ldrb	r3, [r3, #0]
 810aa8e:	021b      	lsls	r3, r3, #8
 810aa90:	4a1a      	ldr	r2, [pc, #104]	@ (810aafc <_nx_driver_initialize+0xe4>)
 810aa92:	6852      	ldr	r2, [r2, #4]
 810aa94:	3201      	adds	r2, #1
 810aa96:	7812      	ldrb	r2, [r2, #0]
 810aa98:	4313      	orrs	r3, r2
 810aa9a:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_msw =
 810aa9c:	69bb      	ldr	r3, [r7, #24]
 810aa9e:	60da      	str	r2, [r3, #12]
    interface_ptr -> nx_interface_physical_address_lsw =
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 810aaa0:	4b16      	ldr	r3, [pc, #88]	@ (810aafc <_nx_driver_initialize+0xe4>)
 810aaa2:	685b      	ldr	r3, [r3, #4]
 810aaa4:	3302      	adds	r3, #2
 810aaa6:	781b      	ldrb	r3, [r3, #0]
 810aaa8:	061a      	lsls	r2, r3, #24
 810aaaa:	4b14      	ldr	r3, [pc, #80]	@ (810aafc <_nx_driver_initialize+0xe4>)
 810aaac:	685b      	ldr	r3, [r3, #4]
 810aaae:	3303      	adds	r3, #3
 810aab0:	781b      	ldrb	r3, [r3, #0]
 810aab2:	041b      	lsls	r3, r3, #16
 810aab4:	431a      	orrs	r2, r3
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 810aab6:	4b11      	ldr	r3, [pc, #68]	@ (810aafc <_nx_driver_initialize+0xe4>)
 810aab8:	685b      	ldr	r3, [r3, #4]
 810aaba:	3304      	adds	r3, #4
 810aabc:	781b      	ldrb	r3, [r3, #0]
 810aabe:	021b      	lsls	r3, r3, #8
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 810aac0:	4313      	orrs	r3, r2
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 810aac2:	4a0e      	ldr	r2, [pc, #56]	@ (810aafc <_nx_driver_initialize+0xe4>)
 810aac4:	6852      	ldr	r2, [r2, #4]
 810aac6:	3205      	adds	r2, #5
 810aac8:	7812      	ldrb	r2, [r2, #0]
 810aaca:	4313      	orrs	r3, r2
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 810aacc:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_lsw =
 810aace:	69bb      	ldr	r3, [r7, #24]
 810aad0:	611a      	str	r2, [r3, #16]

    /* Indicate to the IP software that IP to physical mapping
    is required.  */
    interface_ptr -> nx_interface_address_mapping_needed =  NX_TRUE;
 810aad2:	69bb      	ldr	r3, [r7, #24]
 810aad4:	2201      	movs	r2, #1
 810aad6:	715a      	strb	r2, [r3, #5]

    /* Move the driver's state to initialized.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_INITIALIZED;
 810aad8:	4b06      	ldr	r3, [pc, #24]	@ (810aaf4 <_nx_driver_initialize+0xdc>)
 810aada:	2203      	movs	r2, #3
 810aadc:	605a      	str	r2, [r3, #4]

    /* Indicate successful initialize.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 810aade:	687b      	ldr	r3, [r7, #4]
 810aae0:	2200      	movs	r2, #0
 810aae2:	605a      	str	r2, [r3, #4]
  {

    /* Initialization failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
  }
}
 810aae4:	e002      	b.n	810aaec <_nx_driver_initialize+0xd4>
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 810aae6:	687b      	ldr	r3, [r7, #4]
 810aae8:	225a      	movs	r2, #90	@ 0x5a
 810aaea:	605a      	str	r2, [r3, #4]
}
 810aaec:	bf00      	nop
 810aaee:	3720      	adds	r7, #32
 810aaf0:	46bd      	mov	sp, r7
 810aaf2:	bd80      	pop	{r7, pc}
 810aaf4:	20058004 	.word	0x20058004
 810aaf8:	20058050 	.word	0x20058050
 810aafc:	20057e64 	.word	0x20057e64

0810ab00 <_nx_driver_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_enable(NX_IP_DRIVER *driver_req_ptr)
{
 810ab00:	b580      	push	{r7, lr}
 810ab02:	b0a0      	sub	sp, #128	@ 0x80
 810ab04:	af00      	add	r7, sp, #0
 810ab06:	6078      	str	r0, [r7, #4]

  NX_IP           *ip_ptr;
  ETH_MACConfigTypeDef MACConf;
  UINT            status, duplex, speed = 0;
 810ab08:	2300      	movs	r3, #0
 810ab0a:	67bb      	str	r3, [r7, #120]	@ 0x78
  INT             PHYLinkState;

  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 810ab0c:	687b      	ldr	r3, [r7, #4]
 810ab0e:	699b      	ldr	r3, [r3, #24]
 810ab10:	677b      	str	r3, [r7, #116]	@ 0x74

  /* See if we can honor the NX_LINK_ENABLE request.  */
  if (nx_driver_information.nx_driver_information_state < NX_DRIVER_STATE_INITIALIZED)
 810ab12:	4b3d      	ldr	r3, [pc, #244]	@ (810ac08 <_nx_driver_enable+0x108>)
 810ab14:	685b      	ldr	r3, [r3, #4]
 810ab16:	2b02      	cmp	r3, #2
 810ab18:	d803      	bhi.n	810ab22 <_nx_driver_enable+0x22>
  {

    /* Mark the request as not successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 810ab1a:	687b      	ldr	r3, [r7, #4]
 810ab1c:	225a      	movs	r2, #90	@ 0x5a
 810ab1e:	605a      	str	r2, [r3, #4]
    return;
 810ab20:	e06e      	b.n	810ac00 <_nx_driver_enable+0x100>
  }

  /* Check if it is enabled by someone already */
  if (nx_driver_information.nx_driver_information_state >=  NX_DRIVER_STATE_LINK_ENABLED)
 810ab22:	4b39      	ldr	r3, [pc, #228]	@ (810ac08 <_nx_driver_enable+0x108>)
 810ab24:	685b      	ldr	r3, [r3, #4]
 810ab26:	2b03      	cmp	r3, #3
 810ab28:	d903      	bls.n	810ab32 <_nx_driver_enable+0x32>
  {

    /* Yes, the request has already been made.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_ALREADY_ENABLED;
 810ab2a:	687b      	ldr	r3, [r7, #4]
 810ab2c:	2215      	movs	r2, #21
 810ab2e:	605a      	str	r2, [r3, #4]
    return;
 810ab30:	e066      	b.n	810ac00 <_nx_driver_enable+0x100>
  }

  if (nx_eth_phy_init() != ETH_PHY_STATUS_OK)
 810ab32:	f000 fc63 	bl	810b3fc <nx_eth_phy_init>
 810ab36:	4603      	mov	r3, r0
 810ab38:	2b00      	cmp	r3, #0
 810ab3a:	d003      	beq.n	810ab44 <_nx_driver_enable+0x44>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 810ab3c:	687b      	ldr	r3, [r7, #4]
 810ab3e:	225a      	movs	r2, #90	@ 0x5a
 810ab40:	605a      	str	r2, [r3, #4]
    return;
 810ab42:	e05d      	b.n	810ac00 <_nx_driver_enable+0x100>
  }

  PHYLinkState = nx_eth_phy_get_link_state();
 810ab44:	f000 fc76 	bl	810b434 <nx_eth_phy_get_link_state>
 810ab48:	6738      	str	r0, [r7, #112]	@ 0x70

  /* Get link state */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 810ab4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810ab4c:	2b01      	cmp	r3, #1
 810ab4e:	dc03      	bgt.n	810ab58 <_nx_driver_enable+0x58>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 810ab50:	687b      	ldr	r3, [r7, #4]
 810ab52:	225a      	movs	r2, #90	@ 0x5a
 810ab54:	605a      	str	r2, [r3, #4]
    return;
 810ab56:	e053      	b.n	810ac00 <_nx_driver_enable+0x100>
  }
  else
  {
    switch (PHYLinkState)
 810ab58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810ab5a:	3b02      	subs	r3, #2
 810ab5c:	2b03      	cmp	r3, #3
 810ab5e:	d823      	bhi.n	810aba8 <_nx_driver_enable+0xa8>
 810ab60:	a201      	add	r2, pc, #4	@ (adr r2, 810ab68 <_nx_driver_enable+0x68>)
 810ab62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ab66:	bf00      	nop
 810ab68:	0810ab79 	.word	0x0810ab79
 810ab6c:	0810ab87 	.word	0x0810ab87
 810ab70:	0810ab93 	.word	0x0810ab93
 810ab74:	0810ab9f 	.word	0x0810ab9f
      duplex = ETH_HALFDUPLEX_MODE;
      speed = ETH_SPEED_1000M;
      break;
#endif
case ETH_PHY_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 810ab78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810ab7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      speed = ETH_SPEED_100M;
 810ab7e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810ab82:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 810ab84:	e017      	b.n	810abb6 <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 810ab86:	2300      	movs	r3, #0
 810ab88:	67fb      	str	r3, [r7, #124]	@ 0x7c
      speed = ETH_SPEED_100M;
 810ab8a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810ab8e:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 810ab90:	e011      	b.n	810abb6 <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 810ab92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810ab96:	67fb      	str	r3, [r7, #124]	@ 0x7c
      speed = ETH_SPEED_10M;
 810ab98:	2300      	movs	r3, #0
 810ab9a:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 810ab9c:	e00b      	b.n	810abb6 <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 810ab9e:	2300      	movs	r3, #0
 810aba0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      speed = ETH_SPEED_10M;
 810aba2:	2300      	movs	r3, #0
 810aba4:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 810aba6:	e006      	b.n	810abb6 <_nx_driver_enable+0xb6>
    default:
      duplex = ETH_FULLDUPLEX_MODE;
 810aba8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810abac:	67fb      	str	r3, [r7, #124]	@ 0x7c
      speed = ETH_SPEED_100M;
 810abae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810abb2:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 810abb4:	bf00      	nop
    }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&eth_handle, &MACConf);
 810abb6:	f107 0308 	add.w	r3, r7, #8
 810abba:	4619      	mov	r1, r3
 810abbc:	4813      	ldr	r0, [pc, #76]	@ (810ac0c <_nx_driver_enable+0x10c>)
 810abbe:	f7f7 fb41 	bl	8102244 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 810abc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 810abc4:	623b      	str	r3, [r7, #32]
    MACConf.Speed = speed;
 810abc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810abc8:	61fb      	str	r3, [r7, #28]
    MACConf.PortSelect = 0;
#else
    MACConf.PortSelect = 1;
#endif
#endif
    HAL_ETH_SetMACConfig(&eth_handle, &MACConf);
 810abca:	f107 0308 	add.w	r3, r7, #8
 810abce:	4619      	mov	r1, r3
 810abd0:	480e      	ldr	r0, [pc, #56]	@ (810ac0c <_nx_driver_enable+0x10c>)
 810abd2:	f7f7 fd0b 	bl	81025ec <HAL_ETH_SetMACConfig>
  }

  /* Call hardware specific enable.  */
  status =  _nx_driver_hardware_enable(driver_req_ptr);
 810abd6:	6878      	ldr	r0, [r7, #4]
 810abd8:	f000 fa54 	bl	810b084 <_nx_driver_hardware_enable>
 810abdc:	66f8      	str	r0, [r7, #108]	@ 0x6c

  /* Was the hardware enable successful?  */
  if (status == NX_SUCCESS)
 810abde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810abe0:	2b00      	cmp	r3, #0
 810abe2:	d10a      	bne.n	810abfa <_nx_driver_enable+0xfa>
  {

    /* Update the driver state to link enabled.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_LINK_ENABLED;
 810abe4:	4b08      	ldr	r3, [pc, #32]	@ (810ac08 <_nx_driver_enable+0x108>)
 810abe6:	2204      	movs	r2, #4
 810abe8:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 810abea:	687b      	ldr	r3, [r7, #4]
 810abec:	2200      	movs	r2, #0
 810abee:	605a      	str	r2, [r3, #4]

    /* Mark the IP instance as link up.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_TRUE;
 810abf0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810abf2:	2201      	movs	r2, #1
 810abf4:	f883 272a 	strb.w	r2, [r3, #1834]	@ 0x72a
 810abf8:	e002      	b.n	810ac00 <_nx_driver_enable+0x100>
  }
  else
  {

    /* Enable failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 810abfa:	687b      	ldr	r3, [r7, #4]
 810abfc:	225a      	movs	r2, #90	@ 0x5a
 810abfe:	605a      	str	r2, [r3, #4]
  }
}
 810ac00:	3780      	adds	r7, #128	@ 0x80
 810ac02:	46bd      	mov	sp, r7
 810ac04:	bd80      	pop	{r7, pc}
 810ac06:	bf00      	nop
 810ac08:	20058004 	.word	0x20058004
 810ac0c:	20057e64 	.word	0x20057e64

0810ac10 <_nx_driver_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_disable(NX_IP_DRIVER *driver_req_ptr)
{
 810ac10:	b580      	push	{r7, lr}
 810ac12:	b084      	sub	sp, #16
 810ac14:	af00      	add	r7, sp, #0
 810ac16:	6078      	str	r0, [r7, #4]
  NX_IP           *ip_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 810ac18:	687b      	ldr	r3, [r7, #4]
 810ac1a:	699b      	ldr	r3, [r3, #24]
 810ac1c:	60fb      	str	r3, [r7, #12]

  /* Check if the link is enabled.  */
  if (nx_driver_information.nx_driver_information_state !=  NX_DRIVER_STATE_LINK_ENABLED)
 810ac1e:	4b10      	ldr	r3, [pc, #64]	@ (810ac60 <_nx_driver_disable+0x50>)
 810ac20:	685b      	ldr	r3, [r3, #4]
 810ac22:	2b04      	cmp	r3, #4
 810ac24:	d003      	beq.n	810ac2e <_nx_driver_disable+0x1e>
  {

    /* The link is not enabled, so just return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 810ac26:	687b      	ldr	r3, [r7, #4]
 810ac28:	225a      	movs	r2, #90	@ 0x5a
 810ac2a:	605a      	str	r2, [r3, #4]
    return;
 810ac2c:	e014      	b.n	810ac58 <_nx_driver_disable+0x48>
  }

  /* Call hardware specific disable.  */
  status =  _nx_driver_hardware_disable(driver_req_ptr);
 810ac2e:	6878      	ldr	r0, [r7, #4]
 810ac30:	f000 fa36 	bl	810b0a0 <_nx_driver_hardware_disable>
 810ac34:	60b8      	str	r0, [r7, #8]

  /* Was the hardware disable successful?  */
  if (status == NX_SUCCESS)
 810ac36:	68bb      	ldr	r3, [r7, #8]
 810ac38:	2b00      	cmp	r3, #0
 810ac3a:	d10a      	bne.n	810ac52 <_nx_driver_disable+0x42>
  {

    /* Mark the IP instance as link down.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_FALSE;
 810ac3c:	68fb      	ldr	r3, [r7, #12]
 810ac3e:	2200      	movs	r2, #0
 810ac40:	f883 272a 	strb.w	r2, [r3, #1834]	@ 0x72a

    /* Update the driver state back to initialized.  */
    nx_driver_information.nx_driver_information_state =  NX_DRIVER_STATE_INITIALIZED;
 810ac44:	4b06      	ldr	r3, [pc, #24]	@ (810ac60 <_nx_driver_disable+0x50>)
 810ac46:	2203      	movs	r2, #3
 810ac48:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 810ac4a:	687b      	ldr	r3, [r7, #4]
 810ac4c:	2200      	movs	r2, #0
 810ac4e:	605a      	str	r2, [r3, #4]
 810ac50:	e002      	b.n	810ac58 <_nx_driver_disable+0x48>
  }
  else
  {

    /* Disable failed, return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 810ac52:	687b      	ldr	r3, [r7, #4]
 810ac54:	225a      	movs	r2, #90	@ 0x5a
 810ac56:	605a      	str	r2, [r3, #4]
  }
}
 810ac58:	3710      	adds	r7, #16
 810ac5a:	46bd      	mov	sp, r7
 810ac5c:	bd80      	pop	{r7, pc}
 810ac5e:	bf00      	nop
 810ac60:	20058004 	.word	0x20058004

0810ac64 <_nx_driver_packet_send>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_packet_send(NX_IP_DRIVER *driver_req_ptr)
{
 810ac64:	b580      	push	{r7, lr}
 810ac66:	b086      	sub	sp, #24
 810ac68:	af00      	add	r7, sp, #0
 810ac6a:	6078      	str	r0, [r7, #4]
  ULONG           *ethernet_frame_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 810ac6c:	687b      	ldr	r3, [r7, #4]
 810ac6e:	699b      	ldr	r3, [r3, #24]
 810ac70:	617b      	str	r3, [r7, #20]

  /* Check to make sure the link is up.  */
  if (nx_driver_information.nx_driver_information_state != NX_DRIVER_STATE_LINK_ENABLED)
 810ac72:	4b5c      	ldr	r3, [pc, #368]	@ (810ade4 <_nx_driver_packet_send+0x180>)
 810ac74:	685b      	ldr	r3, [r3, #4]
 810ac76:	2b04      	cmp	r3, #4
 810ac78:	d008      	beq.n	810ac8c <_nx_driver_packet_send+0x28>
  {

    /* Inidate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 810ac7a:	687b      	ldr	r3, [r7, #4]
 810ac7c:	225a      	movs	r2, #90	@ 0x5a
 810ac7e:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(driver_req_ptr -> nx_ip_driver_packet);
 810ac80:	687b      	ldr	r3, [r7, #4]
 810ac82:	3310      	adds	r3, #16
 810ac84:	4618      	mov	r0, r3
 810ac86:	f008 fd79 	bl	811377c <_nxe_packet_transmit_release>
    return;
 810ac8a:	e0a7      	b.n	810addc <_nx_driver_packet_send+0x178>
  }

  /* Process driver send packet.  */

  /* Place the ethernet frame at the front of the packet.  */
  packet_ptr =  driver_req_ptr -> nx_ip_driver_packet;
 810ac8c:	687b      	ldr	r3, [r7, #4]
 810ac8e:	691b      	ldr	r3, [r3, #16]
 810ac90:	60bb      	str	r3, [r7, #8]

  /* Adjust the prepend pointer.  */
  packet_ptr -> nx_packet_prepend_ptr =
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 810ac92:	68bb      	ldr	r3, [r7, #8]
 810ac94:	689a      	ldr	r2, [r3, #8]
  packet_ptr -> nx_packet_prepend_ptr =
 810ac96:	68bb      	ldr	r3, [r7, #8]
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 810ac98:	3a0e      	subs	r2, #14
  packet_ptr -> nx_packet_prepend_ptr =
 810ac9a:	609a      	str	r2, [r3, #8]

  /* Adjust the packet length.  */
  packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + NX_DRIVER_ETHERNET_FRAME_SIZE;
 810ac9c:	68bb      	ldr	r3, [r7, #8]
 810ac9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810aca0:	68bb      	ldr	r3, [r7, #8]
 810aca2:	320e      	adds	r2, #14
 810aca4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Setup the ethernet frame pointer to build the ethernet frame.  Backup another 2
  * bytes to get 32-bit word alignment.  */
  ethernet_frame_ptr =  (ULONG *) (packet_ptr -> nx_packet_prepend_ptr - 2);
 810aca6:	68bb      	ldr	r3, [r7, #8]
 810aca8:	689b      	ldr	r3, [r3, #8]
 810acaa:	3b02      	subs	r3, #2
 810acac:	613b      	str	r3, [r7, #16]

  /* Set up the hardware addresses in the Ethernet header. */
  *ethernet_frame_ptr       =  driver_req_ptr -> nx_ip_driver_physical_address_msw;
 810acae:	687b      	ldr	r3, [r7, #4]
 810acb0:	689a      	ldr	r2, [r3, #8]
 810acb2:	693b      	ldr	r3, [r7, #16]
 810acb4:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 1) =  driver_req_ptr -> nx_ip_driver_physical_address_lsw;
 810acb6:	693b      	ldr	r3, [r7, #16]
 810acb8:	3304      	adds	r3, #4
 810acba:	687a      	ldr	r2, [r7, #4]
 810acbc:	68d2      	ldr	r2, [r2, #12]
 810acbe:	601a      	str	r2, [r3, #0]

  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 810acc0:	697b      	ldr	r3, [r7, #20]
 810acc2:	f8d3 3730 	ldr.w	r3, [r3, #1840]	@ 0x730
 810acc6:	0419      	lsls	r1, r3, #16
    (ip_ptr -> nx_ip_arp_physical_address_lsw >> 16);
 810acc8:	697b      	ldr	r3, [r7, #20]
 810acca:	f8d3 3734 	ldr.w	r3, [r3, #1844]	@ 0x734
 810acce:	0c1a      	lsrs	r2, r3, #16
  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 810acd0:	693b      	ldr	r3, [r7, #16]
 810acd2:	3308      	adds	r3, #8
 810acd4:	430a      	orrs	r2, r1
 810acd6:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 3) =  (ip_ptr -> nx_ip_arp_physical_address_lsw << 16);
 810acd8:	697b      	ldr	r3, [r7, #20]
 810acda:	f8d3 2734 	ldr.w	r2, [r3, #1844]	@ 0x734
 810acde:	693b      	ldr	r3, [r7, #16]
 810ace0:	330c      	adds	r3, #12
 810ace2:	0412      	lsls	r2, r2, #16
 810ace4:	601a      	str	r2, [r3, #0]

  /* Set up the frame type field in the Ethernet harder. */
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 810ace6:	687b      	ldr	r3, [r7, #4]
 810ace8:	681b      	ldr	r3, [r3, #0]
 810acea:	2b05      	cmp	r3, #5
 810acec:	d003      	beq.n	810acf6 <_nx_driver_packet_send+0x92>
      (driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_RESPONSE_SEND))
 810acee:	687b      	ldr	r3, [r7, #4]
 810acf0:	681b      	ldr	r3, [r3, #0]
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 810acf2:	2b06      	cmp	r3, #6
 810acf4:	d10a      	bne.n	810ad0c <_nx_driver_packet_send+0xa8>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_ARP;
 810acf6:	693b      	ldr	r3, [r7, #16]
 810acf8:	330c      	adds	r3, #12
 810acfa:	681b      	ldr	r3, [r3, #0]
 810acfc:	693a      	ldr	r2, [r7, #16]
 810acfe:	320c      	adds	r2, #12
 810ad00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 810ad04:	f043 0306 	orr.w	r3, r3, #6
 810ad08:	6013      	str	r3, [r2, #0]
 810ad0a:	e016      	b.n	810ad3a <_nx_driver_packet_send+0xd6>
  }
  else if(driver_req_ptr -> nx_ip_driver_command == NX_LINK_RARP_SEND)
 810ad0c:	687b      	ldr	r3, [r7, #4]
 810ad0e:	681b      	ldr	r3, [r3, #0]
 810ad10:	2b07      	cmp	r3, #7
 810ad12:	d10a      	bne.n	810ad2a <_nx_driver_packet_send+0xc6>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_RARP;
 810ad14:	693b      	ldr	r3, [r7, #16]
 810ad16:	330c      	adds	r3, #12
 810ad18:	681b      	ldr	r3, [r3, #0]
 810ad1a:	693a      	ldr	r2, [r7, #16]
 810ad1c:	320c      	adds	r2, #12
 810ad1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 810ad22:	f043 0335 	orr.w	r3, r3, #53	@ 0x35
 810ad26:	6013      	str	r3, [r2, #0]
 810ad28:	e007      	b.n	810ad3a <_nx_driver_packet_send+0xd6>
#endif /* FEATURE_NX_IPV6 */

  else
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IP;
 810ad2a:	693b      	ldr	r3, [r7, #16]
 810ad2c:	330c      	adds	r3, #12
 810ad2e:	681a      	ldr	r2, [r3, #0]
 810ad30:	693b      	ldr	r3, [r7, #16]
 810ad32:	330c      	adds	r3, #12
 810ad34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810ad38:	601a      	str	r2, [r3, #0]
  }

  /* Endian swapping if NX_LITTLE_ENDIAN is defined.  */
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr));
 810ad3a:	693b      	ldr	r3, [r7, #16]
 810ad3c:	681b      	ldr	r3, [r3, #0]
 810ad3e:	ba1a      	rev	r2, r3
 810ad40:	693b      	ldr	r3, [r7, #16]
 810ad42:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 1));
 810ad44:	693b      	ldr	r3, [r7, #16]
 810ad46:	3304      	adds	r3, #4
 810ad48:	681a      	ldr	r2, [r3, #0]
 810ad4a:	693b      	ldr	r3, [r7, #16]
 810ad4c:	3304      	adds	r3, #4
 810ad4e:	ba12      	rev	r2, r2
 810ad50:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 2));
 810ad52:	693b      	ldr	r3, [r7, #16]
 810ad54:	3308      	adds	r3, #8
 810ad56:	681a      	ldr	r2, [r3, #0]
 810ad58:	693b      	ldr	r3, [r7, #16]
 810ad5a:	3308      	adds	r3, #8
 810ad5c:	ba12      	rev	r2, r2
 810ad5e:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 3));
 810ad60:	693b      	ldr	r3, [r7, #16]
 810ad62:	330c      	adds	r3, #12
 810ad64:	681a      	ldr	r2, [r3, #0]
 810ad66:	693b      	ldr	r3, [r7, #16]
 810ad68:	330c      	adds	r3, #12
 810ad6a:	ba12      	rev	r2, r2
 810ad6c:	601a      	str	r2, [r3, #0]

  /* Determine if the packet exceeds the driver's MTU.  */
  if (packet_ptr -> nx_packet_length > NX_DRIVER_ETHERNET_MTU)
 810ad6e:	68bb      	ldr	r3, [r7, #8]
 810ad70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ad72:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 810ad76:	4293      	cmp	r3, r2
 810ad78:	d912      	bls.n	810ada0 <_nx_driver_packet_send+0x13c>
  {

    /* This packet exceeds the size of the driver's MTU. Simply throw it away! */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 810ad7a:	68bb      	ldr	r3, [r7, #8]
 810ad7c:	689a      	ldr	r2, [r3, #8]
 810ad7e:	68bb      	ldr	r3, [r7, #8]
 810ad80:	320e      	adds	r2, #14
 810ad82:	609a      	str	r2, [r3, #8]
 810ad84:	68bb      	ldr	r3, [r7, #8]
 810ad86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810ad88:	68bb      	ldr	r3, [r7, #8]
 810ad8a:	3a0e      	subs	r2, #14
 810ad8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 810ad8e:	687b      	ldr	r3, [r7, #4]
 810ad90:	225a      	movs	r2, #90	@ 0x5a
 810ad92:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 810ad94:	f107 0308 	add.w	r3, r7, #8
 810ad98:	4618      	mov	r0, r3
 810ad9a:	f008 fcef 	bl	811377c <_nxe_packet_transmit_release>
    return;
 810ad9e:	e01d      	b.n	810addc <_nx_driver_packet_send+0x178>
  }

  /* Transmit the packet through the Ethernet controller low level access routine. */
  status = _nx_driver_hardware_packet_send(packet_ptr);
 810ada0:	68bb      	ldr	r3, [r7, #8]
 810ada2:	4618      	mov	r0, r3
 810ada4:	f000 f98a 	bl	810b0bc <_nx_driver_hardware_packet_send>
 810ada8:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 810adaa:	68fb      	ldr	r3, [r7, #12]
 810adac:	2b00      	cmp	r3, #0
 810adae:	d012      	beq.n	810add6 <_nx_driver_packet_send+0x172>
  {

    /* Driver's hardware send packet routine failed to send the packet.  */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 810adb0:	68bb      	ldr	r3, [r7, #8]
 810adb2:	689a      	ldr	r2, [r3, #8]
 810adb4:	68bb      	ldr	r3, [r7, #8]
 810adb6:	320e      	adds	r2, #14
 810adb8:	609a      	str	r2, [r3, #8]
 810adba:	68bb      	ldr	r3, [r7, #8]
 810adbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810adbe:	68bb      	ldr	r3, [r7, #8]
 810adc0:	3a0e      	subs	r2, #14
 810adc2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 810adc4:	687b      	ldr	r3, [r7, #4]
 810adc6:	225a      	movs	r2, #90	@ 0x5a
 810adc8:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 810adca:	f107 0308 	add.w	r3, r7, #8
 810adce:	4618      	mov	r0, r3
 810add0:	f008 fcd4 	bl	811377c <_nxe_packet_transmit_release>
 810add4:	e002      	b.n	810addc <_nx_driver_packet_send+0x178>
  }
  else
  {

    /* Set the status of the request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 810add6:	687b      	ldr	r3, [r7, #4]
 810add8:	2200      	movs	r2, #0
 810adda:	605a      	str	r2, [r3, #4]
  }
}
 810addc:	3718      	adds	r7, #24
 810adde:	46bd      	mov	sp, r7
 810ade0:	bd80      	pop	{r7, pc}
 810ade2:	bf00      	nop
 810ade4:	20058004 	.word	0x20058004

0810ade8 <_nx_driver_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 810ade8:	b580      	push	{r7, lr}
 810adea:	b084      	sub	sp, #16
 810adec:	af00      	add	r7, sp, #0
 810adee:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast join function. */
  status =  _nx_driver_hardware_multicast_join(driver_req_ptr);
 810adf0:	6878      	ldr	r0, [r7, #4]
 810adf2:	f000 f9e9 	bl	810b1c8 <_nx_driver_hardware_multicast_join>
 810adf6:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 810adf8:	68fb      	ldr	r3, [r7, #12]
 810adfa:	2b00      	cmp	r3, #0
 810adfc:	d003      	beq.n	810ae06 <_nx_driver_multicast_join+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 810adfe:	687b      	ldr	r3, [r7, #4]
 810ae00:	225a      	movs	r2, #90	@ 0x5a
 810ae02:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 810ae04:	e002      	b.n	810ae0c <_nx_driver_multicast_join+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 810ae06:	687b      	ldr	r3, [r7, #4]
 810ae08:	2200      	movs	r2, #0
 810ae0a:	605a      	str	r2, [r3, #4]
}
 810ae0c:	bf00      	nop
 810ae0e:	3710      	adds	r7, #16
 810ae10:	46bd      	mov	sp, r7
 810ae12:	bd80      	pop	{r7, pc}

0810ae14 <_nx_driver_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 810ae14:	b580      	push	{r7, lr}
 810ae16:	b084      	sub	sp, #16
 810ae18:	af00      	add	r7, sp, #0
 810ae1a:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast leave function. */
  status =  _nx_driver_hardware_multicast_leave(driver_req_ptr);
 810ae1c:	6878      	ldr	r0, [r7, #4]
 810ae1e:	f000 f9ef 	bl	810b200 <_nx_driver_hardware_multicast_leave>
 810ae22:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 810ae24:	68fb      	ldr	r3, [r7, #12]
 810ae26:	2b00      	cmp	r3, #0
 810ae28:	d003      	beq.n	810ae32 <_nx_driver_multicast_leave+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 810ae2a:	687b      	ldr	r3, [r7, #4]
 810ae2c:	225a      	movs	r2, #90	@ 0x5a
 810ae2e:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 810ae30:	e002      	b.n	810ae38 <_nx_driver_multicast_leave+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 810ae32:	687b      	ldr	r3, [r7, #4]
 810ae34:	2200      	movs	r2, #0
 810ae36:	605a      	str	r2, [r3, #4]
}
 810ae38:	bf00      	nop
 810ae3a:	3710      	adds	r7, #16
 810ae3c:	46bd      	mov	sp, r7
 810ae3e:	bd80      	pop	{r7, pc}

0810ae40 <_nx_driver_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 810ae40:	b580      	push	{r7, lr}
 810ae42:	b084      	sub	sp, #16
 810ae44:	af00      	add	r7, sp, #0
 810ae46:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_get_status(driver_req_ptr);
 810ae48:	6878      	ldr	r0, [r7, #4]
 810ae4a:	f000 f9f9 	bl	810b240 <_nx_driver_hardware_get_status>
 810ae4e:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 810ae50:	68fb      	ldr	r3, [r7, #12]
 810ae52:	2b00      	cmp	r3, #0
 810ae54:	d003      	beq.n	810ae5e <_nx_driver_get_status+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 810ae56:	687b      	ldr	r3, [r7, #4]
 810ae58:	225a      	movs	r2, #90	@ 0x5a
 810ae5a:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 810ae5c:	e002      	b.n	810ae64 <_nx_driver_get_status+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 810ae5e:	687b      	ldr	r3, [r7, #4]
 810ae60:	2200      	movs	r2, #0
 810ae62:	605a      	str	r2, [r3, #4]
}
 810ae64:	bf00      	nop
 810ae66:	3710      	adds	r7, #16
 810ae68:	46bd      	mov	sp, r7
 810ae6a:	bd80      	pop	{r7, pc}

0810ae6c <_nx_driver_deferred_processing>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_deferred_processing(NX_IP_DRIVER *driver_req_ptr)
{
 810ae6c:	b580      	push	{r7, lr}
 810ae6e:	b088      	sub	sp, #32
 810ae70:	af00      	add	r7, sp, #0
 810ae72:	6078      	str	r0, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810ae74:	f3ef 8310 	mrs	r3, PRIMASK
 810ae78:	613b      	str	r3, [r7, #16]
#endif
    return(posture);
 810ae7a:	693b      	ldr	r3, [r7, #16]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 810ae7c:	60fb      	str	r3, [r7, #12]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 810ae7e:	b672      	cpsid	i
#endif
    return(int_posture);
 810ae80:	68fb      	ldr	r3, [r7, #12]

    ULONG       deferred_events;


  /* Disable interrupts.  */
  TX_DISABLE
 810ae82:	61fb      	str	r3, [r7, #28]

    /* Pickup deferred events.  */
    deferred_events =  nx_driver_information.nx_driver_information_deferred_events;
 810ae84:	4b10      	ldr	r3, [pc, #64]	@ (810aec8 <_nx_driver_deferred_processing+0x5c>)
 810ae86:	691b      	ldr	r3, [r3, #16]
 810ae88:	61bb      	str	r3, [r7, #24]
  nx_driver_information.nx_driver_information_deferred_events =  0;
 810ae8a:	4b0f      	ldr	r3, [pc, #60]	@ (810aec8 <_nx_driver_deferred_processing+0x5c>)
 810ae8c:	2200      	movs	r2, #0
 810ae8e:	611a      	str	r2, [r3, #16]
 810ae90:	69fb      	ldr	r3, [r7, #28]
 810ae92:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810ae94:	697b      	ldr	r3, [r7, #20]
 810ae96:	f383 8810 	msr	PRIMASK, r3
}
 810ae9a:	bf00      	nop

  /* Restore interrupts.  */
  TX_RESTORE
    /* Check for a transmit complete event.  */
    if(deferred_events & NX_DRIVER_DEFERRED_PACKET_TRANSMITTED)
 810ae9c:	69bb      	ldr	r3, [r7, #24]
 810ae9e:	f003 0304 	and.w	r3, r3, #4
 810aea2:	2b00      	cmp	r3, #0
 810aea4:	d002      	beq.n	810aeac <_nx_driver_deferred_processing+0x40>
    {

      /* Process transmitted packet(s).  */
      HAL_ETH_ReleaseTxPacket(&eth_handle);
 810aea6:	4809      	ldr	r0, [pc, #36]	@ (810aecc <_nx_driver_deferred_processing+0x60>)
 810aea8:	f7f6 ffa4 	bl	8101df4 <HAL_ETH_ReleaseTxPacket>
    }
  /* Check for received packet.  */
  if(deferred_events & NX_DRIVER_DEFERRED_PACKET_RECEIVED)
 810aeac:	69bb      	ldr	r3, [r7, #24]
 810aeae:	f003 0301 	and.w	r3, r3, #1
 810aeb2:	2b00      	cmp	r3, #0
 810aeb4:	d001      	beq.n	810aeba <_nx_driver_deferred_processing+0x4e>
  {

    /* Process received packet(s).  */
    _nx_driver_hardware_packet_received();
 810aeb6:	f000 f9f5 	bl	810b2a4 <_nx_driver_hardware_packet_received>
  }

  /* Mark request as successful.  */
  driver_req_ptr->nx_ip_driver_status =  NX_SUCCESS;
 810aeba:	687b      	ldr	r3, [r7, #4]
 810aebc:	2200      	movs	r2, #0
 810aebe:	605a      	str	r2, [r3, #4]
}
 810aec0:	bf00      	nop
 810aec2:	3720      	adds	r7, #32
 810aec4:	46bd      	mov	sp, r7
 810aec6:	bd80      	pop	{r7, pc}
 810aec8:	20058004 	.word	0x20058004
 810aecc:	20057e64 	.word	0x20057e64

0810aed0 <_nx_driver_transfer_to_netx>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID _nx_driver_transfer_to_netx(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 810aed0:	b580      	push	{r7, lr}
 810aed2:	b084      	sub	sp, #16
 810aed4:	af00      	add	r7, sp, #0
 810aed6:	6078      	str	r0, [r7, #4]
 810aed8:	6039      	str	r1, [r7, #0]

  USHORT    packet_type;


  /* Set the interface for the incoming packet.  */
  packet_ptr -> nx_packet_ip_interface = nx_driver_information.nx_driver_information_interface;
 810aeda:	683b      	ldr	r3, [r7, #0]
 810aedc:	4a2c      	ldr	r2, [pc, #176]	@ (810af90 <_nx_driver_transfer_to_netx+0xc0>)
 810aede:	68d2      	ldr	r2, [r2, #12]
 810aee0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Pickup the packet header to determine where the packet needs to be
  sent.  */
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 810aee2:	683b      	ldr	r3, [r7, #0]
 810aee4:	689b      	ldr	r3, [r3, #8]
 810aee6:	330c      	adds	r3, #12
 810aee8:	781b      	ldrb	r3, [r3, #0]
 810aeea:	021b      	lsls	r3, r3, #8
 810aeec:	b29b      	uxth	r3, r3
    ((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+13)));
 810aeee:	683a      	ldr	r2, [r7, #0]
 810aef0:	6892      	ldr	r2, [r2, #8]
 810aef2:	320d      	adds	r2, #13
 810aef4:	7812      	ldrb	r2, [r2, #0]
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 810aef6:	4313      	orrs	r3, r2
 810aef8:	81fb      	strh	r3, [r7, #14]

  /* Route the incoming packet according to its ethernet type.  */
  if (packet_type == NX_DRIVER_ETHERNET_IP || packet_type == NX_DRIVER_ETHERNET_IPV6)
 810aefa:	89fb      	ldrh	r3, [r7, #14]
 810aefc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810af00:	d004      	beq.n	810af0c <_nx_driver_transfer_to_netx+0x3c>
 810af02:	89fb      	ldrh	r3, [r7, #14]
 810af04:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 810af08:	4293      	cmp	r3, r2
 810af0a:	d10f      	bne.n	810af2c <_nx_driver_transfer_to_netx+0x5c>
    cases, the actual packet length after the Ethernet header should
    be derived from the length in the IP header (lower 16 bits of
    the first 32-bit word).  */

    /* Clean off the Ethernet header.  */
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 810af0c:	683b      	ldr	r3, [r7, #0]
 810af0e:	689a      	ldr	r2, [r3, #8]
 810af10:	683b      	ldr	r3, [r7, #0]
 810af12:	320e      	adds	r2, #14
 810af14:	609a      	str	r2, [r3, #8]

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 810af16:	683b      	ldr	r3, [r7, #0]
 810af18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810af1a:	683b      	ldr	r3, [r7, #0]
 810af1c:	3a0e      	subs	r2, #14
 810af1e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Route to the ip receive function.  */
    _nx_ip_packet_deferred_receive(ip_ptr, packet_ptr);
 810af20:	683b      	ldr	r3, [r7, #0]
 810af22:	4619      	mov	r1, r3
 810af24:	6878      	ldr	r0, [r7, #4]
 810af26:	f002 fb7b 	bl	810d620 <_nx_ip_packet_deferred_receive>
  else
  {
    /* Invalid ethernet header... release the packet.  */
    nx_packet_release(packet_ptr);
  }
}
 810af2a:	e02d      	b.n	810af88 <_nx_driver_transfer_to_netx+0xb8>
  else if (packet_type == NX_DRIVER_ETHERNET_ARP)
 810af2c:	89fb      	ldrh	r3, [r7, #14]
 810af2e:	f640 0206 	movw	r2, #2054	@ 0x806
 810af32:	4293      	cmp	r3, r2
 810af34:	d10f      	bne.n	810af56 <_nx_driver_transfer_to_netx+0x86>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 810af36:	683b      	ldr	r3, [r7, #0]
 810af38:	689a      	ldr	r2, [r3, #8]
 810af3a:	683b      	ldr	r3, [r7, #0]
 810af3c:	320e      	adds	r2, #14
 810af3e:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 810af40:	683b      	ldr	r3, [r7, #0]
 810af42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810af44:	683b      	ldr	r3, [r7, #0]
 810af46:	3a0e      	subs	r2, #14
 810af48:	625a      	str	r2, [r3, #36]	@ 0x24
    _nx_arp_packet_deferred_receive(ip_ptr, packet_ptr);
 810af4a:	683b      	ldr	r3, [r7, #0]
 810af4c:	4619      	mov	r1, r3
 810af4e:	6878      	ldr	r0, [r7, #4]
 810af50:	f000 fc65 	bl	810b81e <_nx_arp_packet_deferred_receive>
}
 810af54:	e018      	b.n	810af88 <_nx_driver_transfer_to_netx+0xb8>
  else if (packet_type == NX_DRIVER_ETHERNET_RARP)
 810af56:	89fb      	ldrh	r3, [r7, #14]
 810af58:	f248 0235 	movw	r2, #32821	@ 0x8035
 810af5c:	4293      	cmp	r3, r2
 810af5e:	d10f      	bne.n	810af80 <_nx_driver_transfer_to_netx+0xb0>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 810af60:	683b      	ldr	r3, [r7, #0]
 810af62:	689a      	ldr	r2, [r3, #8]
 810af64:	683b      	ldr	r3, [r7, #0]
 810af66:	320e      	adds	r2, #14
 810af68:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 810af6a:	683b      	ldr	r3, [r7, #0]
 810af6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810af6e:	683b      	ldr	r3, [r7, #0]
 810af70:	3a0e      	subs	r2, #14
 810af72:	625a      	str	r2, [r3, #36]	@ 0x24
    _nx_rarp_packet_deferred_receive(ip_ptr, packet_ptr);
 810af74:	683b      	ldr	r3, [r7, #0]
 810af76:	4619      	mov	r1, r3
 810af78:	6878      	ldr	r0, [r7, #4]
 810af7a:	f003 ff79 	bl	810ee70 <_nx_rarp_packet_deferred_receive>
}
 810af7e:	e003      	b.n	810af88 <_nx_driver_transfer_to_netx+0xb8>
    nx_packet_release(packet_ptr);
 810af80:	463b      	mov	r3, r7
 810af82:	4618      	mov	r0, r3
 810af84:	f008 fbc2 	bl	811370c <_nxe_packet_release>
}
 810af88:	bf00      	nop
 810af8a:	3710      	adds	r7, #16
 810af8c:	46bd      	mov	sp, r7
 810af8e:	bd80      	pop	{r7, pc}
 810af90:	20058004 	.word	0x20058004

0810af94 <_nx_driver_hardware_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 810af94:	b580      	push	{r7, lr}
 810af96:	b08c      	sub	sp, #48	@ 0x30
 810af98:	af00      	add	r7, sp, #0
 810af9a:	6078      	str	r0, [r7, #4]
  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 810af9c:	687b      	ldr	r3, [r7, #4]
 810af9e:	2200      	movs	r2, #0
 810afa0:	605a      	str	r2, [r3, #4]

  /* Setup indices.  */
  nx_driver_information.nx_driver_information_receive_current_index = 0;
 810afa2:	4b34      	ldr	r3, [pc, #208]	@ (810b074 <_nx_driver_hardware_initialize+0xe0>)
 810afa4:	2200      	movs	r2, #0
 810afa6:	615a      	str	r2, [r3, #20]
  nx_driver_information.nx_driver_information_transmit_current_index = 0;
 810afa8:	4b32      	ldr	r3, [pc, #200]	@ (810b074 <_nx_driver_hardware_initialize+0xe0>)
 810afaa:	2200      	movs	r2, #0
 810afac:	619a      	str	r2, [r3, #24]
  nx_driver_information.nx_driver_information_transmit_release_index = 0;
 810afae:	4b31      	ldr	r3, [pc, #196]	@ (810b074 <_nx_driver_hardware_initialize+0xe0>)
 810afb0:	2200      	movs	r2, #0
 810afb2:	61da      	str	r2, [r3, #28]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use = 0;
 810afb4:	4b2f      	ldr	r3, [pc, #188]	@ (810b074 <_nx_driver_hardware_initialize+0xe0>)
 810afb6:	2200      	movs	r2, #0
 810afb8:	621a      	str	r2, [r3, #32]

  /* Make sure there are receive packets... otherwise, return an error.  */
  if (nx_driver_information.nx_driver_information_packet_pool_ptr == NULL)
 810afba:	4b2e      	ldr	r3, [pc, #184]	@ (810b074 <_nx_driver_hardware_initialize+0xe0>)
 810afbc:	689b      	ldr	r3, [r3, #8]
 810afbe:	2b00      	cmp	r3, #0
 810afc0:	d101      	bne.n	810afc6 <_nx_driver_hardware_initialize+0x32>
  {

    /* There must be receive packets. If not, return an error!  */
    return(NX_DRIVER_ERROR);
 810afc2:	235a      	movs	r3, #90	@ 0x5a
 810afc4:	e052      	b.n	810b06c <_nx_driver_hardware_initialize+0xd8>
#ifdef NX_DRIVER_ETH_HW_IP_INIT
  nx_eth_init();
#endif /* NX_DRIVER_ETH_HW_IP_INIT */

  ETH_DMAConfigTypeDef dmaDefaultConf;
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 810afc6:	2300      	movs	r3, #0
 810afc8:	60fb      	str	r3, [r7, #12]
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 810afca:	2301      	movs	r3, #1
 810afcc:	743b      	strb	r3, [r7, #16]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 810afce:	2301      	movs	r3, #1
 810afd0:	617b      	str	r3, [r7, #20]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 810afd2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810afd6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 810afd8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810afdc:	627b      	str	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.FlushRxPacket = DISABLE;
 810afde:	2300      	movs	r3, #0
 810afe0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
#ifndef STM32_ETH_HAL_LEGACY
  dmaDefaultConf.PBLx8Mode = DISABLE;
 810afe4:	2300      	movs	r3, #0
 810afe6:	767b      	strb	r3, [r7, #25]
#if defined(ETH_DMASBMR_BLEN4) /* ETH AXI support*/
  dmaDefaultConf.RxOSRLimit = ETH_RX_OSR_LIMIT_3;
  dmaDefaultConf.TxOSRLimit = ETH_TX_OSR_LIMIT_3;
  dmaDefaultConf.AXIBLENMaxSize = ETH_BLEN_MAX_SIZE_16;
#else
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 810afe8:	2300      	movs	r3, #0
 810afea:	763b      	strb	r3, [r7, #24]
#endif
  dmaDefaultConf.SecondPacketOperate = ENABLE;
 810afec:	2301      	movs	r3, #1
 810afee:	f887 3020 	strb.w	r3, [r7, #32]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 810aff2:	2300      	movs	r3, #0
 810aff4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  dmaDefaultConf.MaximumSegmentSize = 536;
 810aff8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 810affc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.SecondFrameOperate =  DISABLE;
  dmaDefaultConf.EnhancedDescriptorFormat =  DISABLE;
  dmaDefaultConf.DescriptorSkipLength =  DISABLE;
#endif
  /* enable OSF bit to enhance throughput */
  HAL_ETH_SetDMAConfig(&eth_handle, &dmaDefaultConf);
 810affe:	f107 030c 	add.w	r3, r7, #12
 810b002:	4619      	mov	r1, r3
 810b004:	481c      	ldr	r0, [pc, #112]	@ (810b078 <_nx_driver_hardware_initialize+0xe4>)
 810b006:	f7f7 fb0b 	bl	8102620 <HAL_ETH_SetDMAConfig>
#ifdef STM32_ETH_PROMISCUOUS_ENABLE
  FilterConfig.PromiscuousMode = ENABLE;
#else
  FilterConfig.PromiscuousMode = DISABLE;
 810b00a:	4b1c      	ldr	r3, [pc, #112]	@ (810b07c <_nx_driver_hardware_initialize+0xe8>)
 810b00c:	2200      	movs	r2, #0
 810b00e:	701a      	strb	r2, [r3, #0]
#endif
  FilterConfig.HashUnicast = DISABLE;
 810b010:	4b1a      	ldr	r3, [pc, #104]	@ (810b07c <_nx_driver_hardware_initialize+0xe8>)
 810b012:	2200      	movs	r2, #0
 810b014:	70da      	strb	r2, [r3, #3]
  FilterConfig.HashMulticast = DISABLE;
 810b016:	4b19      	ldr	r3, [pc, #100]	@ (810b07c <_nx_driver_hardware_initialize+0xe8>)
 810b018:	2200      	movs	r2, #0
 810b01a:	711a      	strb	r2, [r3, #4]
  FilterConfig.DestAddrInverseFiltering = DISABLE;
 810b01c:	4b17      	ldr	r3, [pc, #92]	@ (810b07c <_nx_driver_hardware_initialize+0xe8>)
 810b01e:	2200      	movs	r2, #0
 810b020:	721a      	strb	r2, [r3, #8]
  FilterConfig.PassAllMulticast = DISABLE;
 810b022:	4b16      	ldr	r3, [pc, #88]	@ (810b07c <_nx_driver_hardware_initialize+0xe8>)
 810b024:	2200      	movs	r2, #0
 810b026:	715a      	strb	r2, [r3, #5]
  FilterConfig.BroadcastFilter = ENABLE;
 810b028:	4b14      	ldr	r3, [pc, #80]	@ (810b07c <_nx_driver_hardware_initialize+0xe8>)
 810b02a:	2201      	movs	r2, #1
 810b02c:	725a      	strb	r2, [r3, #9]
  FilterConfig.SrcAddrInverseFiltering = DISABLE;
 810b02e:	4b13      	ldr	r3, [pc, #76]	@ (810b07c <_nx_driver_hardware_initialize+0xe8>)
 810b030:	2200      	movs	r2, #0
 810b032:	71da      	strb	r2, [r3, #7]
  FilterConfig.SrcAddrFiltering = DISABLE;
 810b034:	4b11      	ldr	r3, [pc, #68]	@ (810b07c <_nx_driver_hardware_initialize+0xe8>)
 810b036:	2200      	movs	r2, #0
 810b038:	719a      	strb	r2, [r3, #6]
  FilterConfig.HachOrPerfectFilter = DISABLE;
 810b03a:	4b10      	ldr	r3, [pc, #64]	@ (810b07c <_nx_driver_hardware_initialize+0xe8>)
 810b03c:	2200      	movs	r2, #0
 810b03e:	709a      	strb	r2, [r3, #2]
  FilterConfig.ReceiveAllMode = DISABLE;
 810b040:	4b0e      	ldr	r3, [pc, #56]	@ (810b07c <_nx_driver_hardware_initialize+0xe8>)
 810b042:	2200      	movs	r2, #0
 810b044:	705a      	strb	r2, [r3, #1]
  FilterConfig.ControlPacketsFilter = 0x00;
 810b046:	4b0d      	ldr	r3, [pc, #52]	@ (810b07c <_nx_driver_hardware_initialize+0xe8>)
 810b048:	2200      	movs	r2, #0
 810b04a:	60da      	str	r2, [r3, #12]

  /* Set Tx packet config common parameters */
  memset(&TxPacketCfg, 0, sizeof(ETH_TxPacketConfig));
 810b04c:	2238      	movs	r2, #56	@ 0x38
 810b04e:	2100      	movs	r1, #0
 810b050:	480b      	ldr	r0, [pc, #44]	@ (810b080 <_nx_driver_hardware_initialize+0xec>)
 810b052:	f00c f809 	bl	8117068 <memset>
  TxPacketCfg.Attributes = ETH_TX_PACKETS_FEATURES_CSUM ;
 810b056:	4b0a      	ldr	r3, [pc, #40]	@ (810b080 <_nx_driver_hardware_initialize+0xec>)
 810b058:	2201      	movs	r2, #1
 810b05a:	601a      	str	r2, [r3, #0]
  TxPacketCfg.CRCPadCtrl = ETH_CRC_PAD_DISABLE;
 810b05c:	4b08      	ldr	r3, [pc, #32]	@ (810b080 <_nx_driver_hardware_initialize+0xec>)
 810b05e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 810b062:	611a      	str	r2, [r3, #16]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_multicast_count = 0;
 810b064:	4b03      	ldr	r3, [pc, #12]	@ (810b074 <_nx_driver_hardware_initialize+0xe0>)
 810b066:	2200      	movs	r2, #0
 810b068:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Return success!  */
  return(NX_SUCCESS);
 810b06a:	2300      	movs	r3, #0
}
 810b06c:	4618      	mov	r0, r3
 810b06e:	3730      	adds	r7, #48	@ 0x30
 810b070:	46bd      	mov	sp, r7
 810b072:	bd80      	pop	{r7, pc}
 810b074:	20058004 	.word	0x20058004
 810b078:	20057e64 	.word	0x20057e64
 810b07c:	2005808c 	.word	0x2005808c
 810b080:	20058054 	.word	0x20058054

0810b084 <_nx_driver_hardware_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_enable(NX_IP_DRIVER *driver_req_ptr)
{
 810b084:	b580      	push	{r7, lr}
 810b086:	b082      	sub	sp, #8
 810b088:	af00      	add	r7, sp, #0
 810b08a:	6078      	str	r0, [r7, #4]

  /* Call STM32 library to start Ethernet operation.  */
  HAL_ETH_Start_IT(&eth_handle);
 810b08c:	4803      	ldr	r0, [pc, #12]	@ (810b09c <_nx_driver_hardware_enable+0x18>)
 810b08e:	f7f6 fc65 	bl	810195c <HAL_ETH_Start_IT>

  /* Return success!  */
  return(NX_SUCCESS);
 810b092:	2300      	movs	r3, #0
}
 810b094:	4618      	mov	r0, r3
 810b096:	3708      	adds	r7, #8
 810b098:	46bd      	mov	sp, r7
 810b09a:	bd80      	pop	{r7, pc}
 810b09c:	20057e64 	.word	0x20057e64

0810b0a0 <_nx_driver_hardware_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_disable(NX_IP_DRIVER *driver_req_ptr)
{
 810b0a0:	b580      	push	{r7, lr}
 810b0a2:	b082      	sub	sp, #8
 810b0a4:	af00      	add	r7, sp, #0
 810b0a6:	6078      	str	r0, [r7, #4]

  HAL_ETH_Stop(&eth_handle);
 810b0a8:	4803      	ldr	r0, [pc, #12]	@ (810b0b8 <_nx_driver_hardware_disable+0x18>)
 810b0aa:	f7f6 fccc 	bl	8101a46 <HAL_ETH_Stop>

  /* Return success!  */
  return(NX_SUCCESS);
 810b0ae:	2300      	movs	r3, #0
}
 810b0b0:	4618      	mov	r0, r3
 810b0b2:	3708      	adds	r7, #8
 810b0b4:	46bd      	mov	sp, r7
 810b0b6:	bd80      	pop	{r7, pc}
 810b0b8:	20057e64 	.word	0x20057e64

0810b0bc <_nx_driver_hardware_packet_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/

static UINT  _nx_driver_hardware_packet_send(NX_PACKET *packet_ptr)
{
 810b0bc:	b580      	push	{r7, lr}
 810b0be:	b092      	sub	sp, #72	@ 0x48
 810b0c0:	af00      	add	r7, sp, #0
 810b0c2:	6078      	str	r0, [r7, #4]

  NX_PACKET       *pktIdx;
  UINT            buffLen = 0;
 810b0c4:	2300      	movs	r3, #0
 810b0c6:	643b      	str	r3, [r7, #64]	@ 0x40

  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 810b0c8:	f107 030c 	add.w	r3, r7, #12
 810b0cc:	2230      	movs	r2, #48	@ 0x30
 810b0ce:	2100      	movs	r1, #0
 810b0d0:	4618      	mov	r0, r3
 810b0d2:	f00b ffc9 	bl	8117068 <memset>


  int i = 0;
 810b0d6:	2300      	movs	r3, #0
 810b0d8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 810b0da:	687b      	ldr	r3, [r7, #4]
 810b0dc:	647b      	str	r3, [r7, #68]	@ 0x44
 810b0de:	e050      	b.n	810b182 <_nx_driver_hardware_packet_send+0xc6>
  {
    if (i >= ETH_TX_DESC_CNT)
 810b0e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b0e2:	2b03      	cmp	r3, #3
 810b0e4:	d901      	bls.n	810b0ea <_nx_driver_hardware_packet_send+0x2e>
    {
      return NX_DRIVER_ERROR;
 810b0e6:	235a      	movs	r3, #90	@ 0x5a
 810b0e8:	e065      	b.n	810b1b6 <_nx_driver_hardware_packet_send+0xfa>
    }

    Txbuffer[i].buffer = pktIdx->nx_packet_prepend_ptr;
 810b0ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b0ec:	6899      	ldr	r1, [r3, #8]
 810b0ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810b0f0:	4613      	mov	r3, r2
 810b0f2:	005b      	lsls	r3, r3, #1
 810b0f4:	4413      	add	r3, r2
 810b0f6:	009b      	lsls	r3, r3, #2
 810b0f8:	3348      	adds	r3, #72	@ 0x48
 810b0fa:	443b      	add	r3, r7
 810b0fc:	3b3c      	subs	r3, #60	@ 0x3c
 810b0fe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 810b100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b102:	68da      	ldr	r2, [r3, #12]
 810b104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b106:	689b      	ldr	r3, [r3, #8]
 810b108:	1ad3      	subs	r3, r2, r3
 810b10a:	4619      	mov	r1, r3
 810b10c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810b10e:	4613      	mov	r3, r2
 810b110:	005b      	lsls	r3, r3, #1
 810b112:	4413      	add	r3, r2
 810b114:	009b      	lsls	r3, r3, #2
 810b116:	3348      	adds	r3, #72	@ 0x48
 810b118:	443b      	add	r3, r7
 810b11a:	3b38      	subs	r3, #56	@ 0x38
 810b11c:	6019      	str	r1, [r3, #0]
    buffLen += (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 810b11e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b120:	68da      	ldr	r2, [r3, #12]
 810b122:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b124:	689b      	ldr	r3, [r3, #8]
 810b126:	1ad3      	subs	r3, r2, r3
 810b128:	461a      	mov	r2, r3
 810b12a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b12c:	4413      	add	r3, r2
 810b12e:	643b      	str	r3, [r7, #64]	@ 0x40

    if(i>0)
 810b130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b132:	2b00      	cmp	r3, #0
 810b134:	dd11      	ble.n	810b15a <_nx_driver_hardware_packet_send+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 810b136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b138:	1e5a      	subs	r2, r3, #1
 810b13a:	f107 000c 	add.w	r0, r7, #12
 810b13e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810b140:	460b      	mov	r3, r1
 810b142:	005b      	lsls	r3, r3, #1
 810b144:	440b      	add	r3, r1
 810b146:	009b      	lsls	r3, r3, #2
 810b148:	18c1      	adds	r1, r0, r3
 810b14a:	4613      	mov	r3, r2
 810b14c:	005b      	lsls	r3, r3, #1
 810b14e:	4413      	add	r3, r2
 810b150:	009b      	lsls	r3, r3, #2
 810b152:	3348      	adds	r3, #72	@ 0x48
 810b154:	443b      	add	r3, r7
 810b156:	3b34      	subs	r3, #52	@ 0x34
 810b158:	6019      	str	r1, [r3, #0]
    }

    if (pktIdx-> nx_packet_next ==NULL)
 810b15a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b15c:	685b      	ldr	r3, [r3, #4]
 810b15e:	2b00      	cmp	r3, #0
 810b160:	d109      	bne.n	810b176 <_nx_driver_hardware_packet_send+0xba>
    {
      Txbuffer[i].next = NULL;
 810b162:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810b164:	4613      	mov	r3, r2
 810b166:	005b      	lsls	r3, r3, #1
 810b168:	4413      	add	r3, r2
 810b16a:	009b      	lsls	r3, r3, #2
 810b16c:	3348      	adds	r3, #72	@ 0x48
 810b16e:	443b      	add	r3, r7
 810b170:	3b34      	subs	r3, #52	@ 0x34
 810b172:	2200      	movs	r2, #0
 810b174:	601a      	str	r2, [r3, #0]
    }

    i++;
 810b176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b178:	3301      	adds	r3, #1
 810b17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 810b17c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b17e:	685b      	ldr	r3, [r3, #4]
 810b180:	647b      	str	r3, [r7, #68]	@ 0x44
 810b182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b184:	2b00      	cmp	r3, #0
 810b186:	d1ab      	bne.n	810b0e0 <_nx_driver_hardware_packet_send+0x24>
  else if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
  {
    TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_IPHDR_INSERT;
  }
#else
  TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
 810b188:	4b0d      	ldr	r3, [pc, #52]	@ (810b1c0 <_nx_driver_hardware_packet_send+0x104>)
 810b18a:	2200      	movs	r2, #0
 810b18c:	615a      	str	r2, [r3, #20]
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  TxPacketCfg.Length = buffLen;
 810b18e:	4a0c      	ldr	r2, [pc, #48]	@ (810b1c0 <_nx_driver_hardware_packet_send+0x104>)
 810b190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b192:	6053      	str	r3, [r2, #4]
  TxPacketCfg.TxBuffer = Txbuffer;
 810b194:	4a0a      	ldr	r2, [pc, #40]	@ (810b1c0 <_nx_driver_hardware_packet_send+0x104>)
 810b196:	f107 030c 	add.w	r3, r7, #12
 810b19a:	6093      	str	r3, [r2, #8]
  TxPacketCfg.pData = (uint32_t *)packet_ptr;
 810b19c:	4a08      	ldr	r2, [pc, #32]	@ (810b1c0 <_nx_driver_hardware_packet_send+0x104>)
 810b19e:	687b      	ldr	r3, [r7, #4]
 810b1a0:	6353      	str	r3, [r2, #52]	@ 0x34

  if(HAL_ETH_Transmit_IT(&eth_handle, &TxPacketCfg))
 810b1a2:	4907      	ldr	r1, [pc, #28]	@ (810b1c0 <_nx_driver_hardware_packet_send+0x104>)
 810b1a4:	4807      	ldr	r0, [pc, #28]	@ (810b1c4 <_nx_driver_hardware_packet_send+0x108>)
 810b1a6:	f7f6 fc9e 	bl	8101ae6 <HAL_ETH_Transmit_IT>
 810b1aa:	4603      	mov	r3, r0
 810b1ac:	2b00      	cmp	r3, #0
 810b1ae:	d001      	beq.n	810b1b4 <_nx_driver_hardware_packet_send+0xf8>
  {
    return(NX_DRIVER_ERROR);
 810b1b0:	235a      	movs	r3, #90	@ 0x5a
 810b1b2:	e000      	b.n	810b1b6 <_nx_driver_hardware_packet_send+0xfa>
  }

  return(NX_SUCCESS);
 810b1b4:	2300      	movs	r3, #0
}
 810b1b6:	4618      	mov	r0, r3
 810b1b8:	3748      	adds	r7, #72	@ 0x48
 810b1ba:	46bd      	mov	sp, r7
 810b1bc:	bd80      	pop	{r7, pc}
 810b1be:	bf00      	nop
 810b1c0:	20058054 	.word	0x20058054
 810b1c4:	20057e64 	.word	0x20057e64

0810b1c8 <_nx_driver_hardware_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 810b1c8:	b580      	push	{r7, lr}
 810b1ca:	b082      	sub	sp, #8
 810b1cc:	af00      	add	r7, sp, #0
 810b1ce:	6078      	str	r0, [r7, #4]


  /* Increase the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count++;
 810b1d0:	4b08      	ldr	r3, [pc, #32]	@ (810b1f4 <_nx_driver_hardware_multicast_join+0x2c>)
 810b1d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810b1d4:	3301      	adds	r3, #1
 810b1d6:	4a07      	ldr	r2, [pc, #28]	@ (810b1f4 <_nx_driver_hardware_multicast_join+0x2c>)
 810b1d8:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Enable multicast frame reception.  */
  FilterConfig.PassAllMulticast = ENABLE;
 810b1da:	4b07      	ldr	r3, [pc, #28]	@ (810b1f8 <_nx_driver_hardware_multicast_join+0x30>)
 810b1dc:	2201      	movs	r2, #1
 810b1de:	715a      	strb	r2, [r3, #5]
  HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 810b1e0:	4905      	ldr	r1, [pc, #20]	@ (810b1f8 <_nx_driver_hardware_multicast_join+0x30>)
 810b1e2:	4806      	ldr	r0, [pc, #24]	@ (810b1fc <_nx_driver_hardware_multicast_join+0x34>)
 810b1e4:	f7f7 fa86 	bl	81026f4 <HAL_ETH_SetMACFilterConfig>

  /* Return success.  */
  return(NX_SUCCESS);
 810b1e8:	2300      	movs	r3, #0
}
 810b1ea:	4618      	mov	r0, r3
 810b1ec:	3708      	adds	r7, #8
 810b1ee:	46bd      	mov	sp, r7
 810b1f0:	bd80      	pop	{r7, pc}
 810b1f2:	bf00      	nop
 810b1f4:	20058004 	.word	0x20058004
 810b1f8:	2005808c 	.word	0x2005808c
 810b1fc:	20057e64 	.word	0x20057e64

0810b200 <_nx_driver_hardware_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 810b200:	b580      	push	{r7, lr}
 810b202:	b082      	sub	sp, #8
 810b204:	af00      	add	r7, sp, #0
 810b206:	6078      	str	r0, [r7, #4]

  /* Decrease the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count--;
 810b208:	4b0a      	ldr	r3, [pc, #40]	@ (810b234 <_nx_driver_hardware_multicast_leave+0x34>)
 810b20a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810b20c:	3b01      	subs	r3, #1
 810b20e:	4a09      	ldr	r2, [pc, #36]	@ (810b234 <_nx_driver_hardware_multicast_leave+0x34>)
 810b210:	6493      	str	r3, [r2, #72]	@ 0x48

  /* If multicast count reaches zero, disable multicast frame reception.  */
  if (nx_driver_information.nx_driver_information_multicast_count == 0)
 810b212:	4b08      	ldr	r3, [pc, #32]	@ (810b234 <_nx_driver_hardware_multicast_leave+0x34>)
 810b214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810b216:	2b00      	cmp	r3, #0
 810b218:	d106      	bne.n	810b228 <_nx_driver_hardware_multicast_leave+0x28>
  {

    /* Disable multicast frame reception.  */
    FilterConfig.PassAllMulticast = DISABLE;
 810b21a:	4b07      	ldr	r3, [pc, #28]	@ (810b238 <_nx_driver_hardware_multicast_leave+0x38>)
 810b21c:	2200      	movs	r2, #0
 810b21e:	715a      	strb	r2, [r3, #5]
    HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 810b220:	4905      	ldr	r1, [pc, #20]	@ (810b238 <_nx_driver_hardware_multicast_leave+0x38>)
 810b222:	4806      	ldr	r0, [pc, #24]	@ (810b23c <_nx_driver_hardware_multicast_leave+0x3c>)
 810b224:	f7f7 fa66 	bl	81026f4 <HAL_ETH_SetMACFilterConfig>
  }

  /* Return success.  */
  return(NX_SUCCESS);
 810b228:	2300      	movs	r3, #0
}
 810b22a:	4618      	mov	r0, r3
 810b22c:	3708      	adds	r7, #8
 810b22e:	46bd      	mov	sp, r7
 810b230:	bd80      	pop	{r7, pc}
 810b232:	bf00      	nop
 810b234:	20058004 	.word	0x20058004
 810b238:	2005808c 	.word	0x2005808c
 810b23c:	20057e64 	.word	0x20057e64

0810b240 <_nx_driver_hardware_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 810b240:	b580      	push	{r7, lr}
 810b242:	b084      	sub	sp, #16
 810b244:	af00      	add	r7, sp, #0
 810b246:	6078      	str	r0, [r7, #4]
  INT PHYLinkState;

  /* Get link status. */
  PHYLinkState = nx_eth_phy_get_link_state();
 810b248:	f000 f8f4 	bl	810b434 <nx_eth_phy_get_link_state>
 810b24c:	60f8      	str	r0, [r7, #12]

  /* Check link status. */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 810b24e:	68fb      	ldr	r3, [r7, #12]
 810b250:	2b01      	cmp	r3, #1
 810b252:	dc04      	bgt.n	810b25e <_nx_driver_hardware_get_status+0x1e>
  {
    /* Update Link status if physical link is down. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_FALSE;
 810b254:	687b      	ldr	r3, [r7, #4]
 810b256:	695b      	ldr	r3, [r3, #20]
 810b258:	2200      	movs	r2, #0
 810b25a:	601a      	str	r2, [r3, #0]
 810b25c:	e003      	b.n	810b266 <_nx_driver_hardware_get_status+0x26>
  }
  else
  {
    /* Update Link status if physical link is up. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_TRUE;
 810b25e:	687b      	ldr	r3, [r7, #4]
 810b260:	695b      	ldr	r3, [r3, #20]
 810b262:	2201      	movs	r2, #1
 810b264:	601a      	str	r2, [r3, #0]
  }

  /* Return success. */
  return NX_SUCCESS;
 810b266:	2300      	movs	r3, #0
}
 810b268:	4618      	mov	r0, r3
 810b26a:	3710      	adds	r7, #16
 810b26c:	46bd      	mov	sp, r7
 810b26e:	bd80      	pop	{r7, pc}

0810b270 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 810b270:	b580      	push	{r7, lr}
 810b272:	b084      	sub	sp, #16
 810b274:	af00      	add	r7, sp, #0
 810b276:	6078      	str	r0, [r7, #4]
  NX_PACKET * release_packet = (NX_PACKET *) buff;
 810b278:	687b      	ldr	r3, [r7, #4]
 810b27a:	60fb      	str	r3, [r7, #12]

  /* Remove the Ethernet header and release the packet.  */
  NX_DRIVER_ETHERNET_HEADER_REMOVE(release_packet);
 810b27c:	68fb      	ldr	r3, [r7, #12]
 810b27e:	689a      	ldr	r2, [r3, #8]
 810b280:	68fb      	ldr	r3, [r7, #12]
 810b282:	320e      	adds	r2, #14
 810b284:	609a      	str	r2, [r3, #8]
 810b286:	68fb      	ldr	r3, [r7, #12]
 810b288:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810b28a:	68fb      	ldr	r3, [r7, #12]
 810b28c:	3a0e      	subs	r2, #14
 810b28e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Release the packet.  */
  nx_packet_transmit_release(release_packet);
 810b290:	f107 030c 	add.w	r3, r7, #12
 810b294:	4618      	mov	r0, r3
 810b296:	f008 fa71 	bl	811377c <_nxe_packet_transmit_release>
}
 810b29a:	bf00      	nop
 810b29c:	3710      	adds	r7, #16
 810b29e:	46bd      	mov	sp, r7
 810b2a0:	bd80      	pop	{r7, pc}
	...

0810b2a4 <_nx_driver_hardware_packet_received>:

static VOID  _nx_driver_hardware_packet_received(VOID)
{
 810b2a4:	b580      	push	{r7, lr}
 810b2a6:	b082      	sub	sp, #8
 810b2a8:	af00      	add	r7, sp, #0
  NX_PACKET  *received_packet_ptr;

  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 810b2aa:	e006      	b.n	810b2ba <_nx_driver_hardware_packet_received+0x16>
  {
      /* Transfer the packet to NetX.  */
      _nx_driver_transfer_to_netx(nx_driver_information.nx_driver_information_ip_ptr, received_packet_ptr);
 810b2ac:	4b09      	ldr	r3, [pc, #36]	@ (810b2d4 <_nx_driver_hardware_packet_received+0x30>)
 810b2ae:	681b      	ldr	r3, [r3, #0]
 810b2b0:	687a      	ldr	r2, [r7, #4]
 810b2b2:	4611      	mov	r1, r2
 810b2b4:	4618      	mov	r0, r3
 810b2b6:	f7ff fe0b 	bl	810aed0 <_nx_driver_transfer_to_netx>
  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 810b2ba:	1d3b      	adds	r3, r7, #4
 810b2bc:	4619      	mov	r1, r3
 810b2be:	4806      	ldr	r0, [pc, #24]	@ (810b2d8 <_nx_driver_hardware_packet_received+0x34>)
 810b2c0:	f7f6 fc62 	bl	8101b88 <HAL_ETH_ReadData>
 810b2c4:	4603      	mov	r3, r0
 810b2c6:	2b00      	cmp	r3, #0
 810b2c8:	d0f0      	beq.n	810b2ac <_nx_driver_hardware_packet_received+0x8>
  }
}
 810b2ca:	bf00      	nop
 810b2cc:	bf00      	nop
 810b2ce:	3708      	adds	r7, #8
 810b2d0:	46bd      	mov	sp, r7
 810b2d2:	bd80      	pop	{r7, pc}
 810b2d4:	20058004 	.word	0x20058004
 810b2d8:	20057e64 	.word	0x20057e64

0810b2dc <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t ** buff)
{
 810b2dc:	b580      	push	{r7, lr}
 810b2de:	b084      	sub	sp, #16
 810b2e0:	af00      	add	r7, sp, #0
 810b2e2:	6078      	str	r0, [r7, #4]
  NX_PACKET     *packet_ptr;
  if (nx_packet_allocate(nx_driver_information.nx_driver_information_packet_pool_ptr, &packet_ptr,
 810b2e4:	4b0d      	ldr	r3, [pc, #52]	@ (810b31c <HAL_ETH_RxAllocateCallback+0x40>)
 810b2e6:	6898      	ldr	r0, [r3, #8]
 810b2e8:	f107 010c 	add.w	r1, r7, #12
 810b2ec:	2300      	movs	r3, #0
 810b2ee:	2200      	movs	r2, #0
 810b2f0:	f008 f8e0 	bl	81134b4 <_nxe_packet_allocate>
 810b2f4:	4603      	mov	r3, r0
 810b2f6:	2b00      	cmp	r3, #0
 810b2f8:	d109      	bne.n	810b30e <HAL_ETH_RxAllocateCallback+0x32>
                         NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
  {
    /* Adjust the packet.  */
    packet_ptr -> nx_packet_prepend_ptr += 2;
 810b2fa:	68fb      	ldr	r3, [r7, #12]
 810b2fc:	689a      	ldr	r2, [r3, #8]
 810b2fe:	68fb      	ldr	r3, [r7, #12]
 810b300:	3202      	adds	r2, #2
 810b302:	609a      	str	r2, [r3, #8]
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    SCB_InvalidateDCache_by_Addr((uint32_t*)packet_ptr -> nx_packet_data_start, packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start);
#endif
    *buff = packet_ptr -> nx_packet_prepend_ptr;
 810b304:	68fb      	ldr	r3, [r7, #12]
 810b306:	689a      	ldr	r2, [r3, #8]
 810b308:	687b      	ldr	r3, [r7, #4]
 810b30a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Rx Buffer Pool is exhausted. */
    *buff = NULL;
  }
}
 810b30c:	e002      	b.n	810b314 <HAL_ETH_RxAllocateCallback+0x38>
    *buff = NULL;
 810b30e:	687b      	ldr	r3, [r7, #4]
 810b310:	2200      	movs	r2, #0
 810b312:	601a      	str	r2, [r3, #0]
}
 810b314:	bf00      	nop
 810b316:	3710      	adds	r7, #16
 810b318:	46bd      	mov	sp, r7
 810b31a:	bd80      	pop	{r7, pc}
 810b31c:	20058004 	.word	0x20058004

0810b320 <HAL_ETH_RxLinkCallback>:
/*                                                                        */
/*    HAL_ETH_ReadData              Read a received packet                */
/*                                                                        */
/**************************************************************************/
void HAL_ETH_RxLinkCallback(void **first_packet_ptr, void **last_packet_ptr, uint8_t *buff, uint16_t Length)
{
 810b320:	b480      	push	{r7}
 810b322:	b089      	sub	sp, #36	@ 0x24
 810b324:	af00      	add	r7, sp, #0
 810b326:	60f8      	str	r0, [r7, #12]
 810b328:	60b9      	str	r1, [r7, #8]
 810b32a:	607a      	str	r2, [r7, #4]
 810b32c:	807b      	strh	r3, [r7, #2]
  NX_PACKET **first_nx_packet_ptr = (NX_PACKET **)first_packet_ptr;
 810b32e:	68fb      	ldr	r3, [r7, #12]
 810b330:	61fb      	str	r3, [r7, #28]
  NX_PACKET **last_nx_packet_ptr = (NX_PACKET **)last_packet_ptr;
 810b332:	68bb      	ldr	r3, [r7, #8]
 810b334:	61bb      	str	r3, [r7, #24]
  NX_PACKET  *received_packet_ptr;

  /* Indicate the offset of the received data.  */
  uint8_t *data_buffer_ptr = buff - 2U - header_size;
 810b336:	4b14      	ldr	r3, [pc, #80]	@ (810b388 <HAL_ETH_RxLinkCallback+0x68>)
 810b338:	681a      	ldr	r2, [r3, #0]
 810b33a:	f06f 0301 	mvn.w	r3, #1
 810b33e:	1a9b      	subs	r3, r3, r2
 810b340:	687a      	ldr	r2, [r7, #4]
 810b342:	4413      	add	r3, r2
 810b344:	617b      	str	r3, [r7, #20]

  received_packet_ptr = (NX_PACKET *)data_buffer_ptr;
 810b346:	697b      	ldr	r3, [r7, #20]
 810b348:	613b      	str	r3, [r7, #16]
  received_packet_ptr->nx_packet_append_ptr = received_packet_ptr->nx_packet_prepend_ptr + Length;
 810b34a:	693b      	ldr	r3, [r7, #16]
 810b34c:	689a      	ldr	r2, [r3, #8]
 810b34e:	887b      	ldrh	r3, [r7, #2]
 810b350:	441a      	add	r2, r3
 810b352:	693b      	ldr	r3, [r7, #16]
 810b354:	60da      	str	r2, [r3, #12]
  received_packet_ptr->nx_packet_length = Length;
 810b356:	887a      	ldrh	r2, [r7, #2]
 810b358:	693b      	ldr	r3, [r7, #16]
 810b35a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check whether this is the first packet. */
  if (*first_nx_packet_ptr == NULL)
 810b35c:	69fb      	ldr	r3, [r7, #28]
 810b35e:	681b      	ldr	r3, [r3, #0]
 810b360:	2b00      	cmp	r3, #0
 810b362:	d103      	bne.n	810b36c <HAL_ETH_RxLinkCallback+0x4c>
  {
    /* Add the first buffer of the packet. */
    *first_nx_packet_ptr = received_packet_ptr;
 810b364:	69fb      	ldr	r3, [r7, #28]
 810b366:	693a      	ldr	r2, [r7, #16]
 810b368:	601a      	str	r2, [r3, #0]
 810b36a:	e003      	b.n	810b374 <HAL_ETH_RxLinkCallback+0x54>
  }
  /* This is not the first packet. */
  else
  {
    /* Add the rest of the buffer to the end of the packet. */
    (*last_nx_packet_ptr)->nx_packet_next = received_packet_ptr;
 810b36c:	69bb      	ldr	r3, [r7, #24]
 810b36e:	681b      	ldr	r3, [r3, #0]
 810b370:	693a      	ldr	r2, [r7, #16]
 810b372:	605a      	str	r2, [r3, #4]
  }
  /* Save the current packet in order to use it in the next iteration. */
  *last_nx_packet_ptr  = received_packet_ptr;
 810b374:	69bb      	ldr	r3, [r7, #24]
 810b376:	693a      	ldr	r2, [r7, #16]
 810b378:	601a      	str	r2, [r3, #0]
}
 810b37a:	bf00      	nop
 810b37c:	3724      	adds	r7, #36	@ 0x24
 810b37e:	46bd      	mov	sp, r7
 810b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b384:	4770      	bx	lr
 810b386:	bf00      	nop
 810b388:	20058050 	.word	0x20058050

0810b38c <HAL_ETH_RxCpltCallback>:
}
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 810b38c:	b580      	push	{r7, lr}
 810b38e:	b084      	sub	sp, #16
 810b390:	af00      	add	r7, sp, #0
 810b392:	6078      	str	r0, [r7, #4]

  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 810b394:	4b0a      	ldr	r3, [pc, #40]	@ (810b3c0 <HAL_ETH_RxCpltCallback+0x34>)
 810b396:	691b      	ldr	r3, [r3, #16]
 810b398:	60fb      	str	r3, [r7, #12]

  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_RECEIVED;
 810b39a:	4b09      	ldr	r3, [pc, #36]	@ (810b3c0 <HAL_ETH_RxCpltCallback+0x34>)
 810b39c:	691b      	ldr	r3, [r3, #16]
 810b39e:	f043 0301 	orr.w	r3, r3, #1
 810b3a2:	4a07      	ldr	r2, [pc, #28]	@ (810b3c0 <HAL_ETH_RxCpltCallback+0x34>)
 810b3a4:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 810b3a6:	68fb      	ldr	r3, [r7, #12]
 810b3a8:	2b00      	cmp	r3, #0
 810b3aa:	d104      	bne.n	810b3b6 <HAL_ETH_RxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 810b3ac:	4b04      	ldr	r3, [pc, #16]	@ (810b3c0 <HAL_ETH_RxCpltCallback+0x34>)
 810b3ae:	681b      	ldr	r3, [r3, #0]
 810b3b0:	4618      	mov	r0, r3
 810b3b2:	f001 fdf3 	bl	810cf9c <_nx_ip_driver_deferred_processing>
  }
}
 810b3b6:	bf00      	nop
 810b3b8:	3710      	adds	r7, #16
 810b3ba:	46bd      	mov	sp, r7
 810b3bc:	bd80      	pop	{r7, pc}
 810b3be:	bf00      	nop
 810b3c0:	20058004 	.word	0x20058004

0810b3c4 <HAL_ETH_TxCpltCallback>:

void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 810b3c4:	b580      	push	{r7, lr}
 810b3c6:	b084      	sub	sp, #16
 810b3c8:	af00      	add	r7, sp, #0
 810b3ca:	6078      	str	r0, [r7, #4]
  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 810b3cc:	4b0a      	ldr	r3, [pc, #40]	@ (810b3f8 <HAL_ETH_TxCpltCallback+0x34>)
 810b3ce:	691b      	ldr	r3, [r3, #16]
 810b3d0:	60fb      	str	r3, [r7, #12]


  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_TRANSMITTED;
 810b3d2:	4b09      	ldr	r3, [pc, #36]	@ (810b3f8 <HAL_ETH_TxCpltCallback+0x34>)
 810b3d4:	691b      	ldr	r3, [r3, #16]
 810b3d6:	f043 0304 	orr.w	r3, r3, #4
 810b3da:	4a07      	ldr	r2, [pc, #28]	@ (810b3f8 <HAL_ETH_TxCpltCallback+0x34>)
 810b3dc:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 810b3de:	68fb      	ldr	r3, [r7, #12]
 810b3e0:	2b00      	cmp	r3, #0
 810b3e2:	d104      	bne.n	810b3ee <HAL_ETH_TxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 810b3e4:	4b04      	ldr	r3, [pc, #16]	@ (810b3f8 <HAL_ETH_TxCpltCallback+0x34>)
 810b3e6:	681b      	ldr	r3, [r3, #0]
 810b3e8:	4618      	mov	r0, r3
 810b3ea:	f001 fdd7 	bl	810cf9c <_nx_ip_driver_deferred_processing>
  }
}
 810b3ee:	bf00      	nop
 810b3f0:	3710      	adds	r7, #16
 810b3f2:	46bd      	mov	sp, r7
 810b3f4:	bd80      	pop	{r7, pc}
 810b3f6:	bf00      	nop
 810b3f8:	20058004 	.word	0x20058004

0810b3fc <nx_eth_phy_init>:
  * @param  none
  * @retval ETH_PHY_STATUS_OK on success, ETH_PHY_STATUS_ERROR otherwise
  */

int32_t nx_eth_phy_init(void)
{
 810b3fc:	b580      	push	{r7, lr}
 810b3fe:	b082      	sub	sp, #8
 810b400:	af00      	add	r7, sp, #0
    int32_t ret = ETH_PHY_STATUS_ERROR;
 810b402:	f04f 33ff 	mov.w	r3, #4294967295
 810b406:	607b      	str	r3, [r7, #4]
    /* Set PHY IO functions */

    LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 810b408:	4908      	ldr	r1, [pc, #32]	@ (810b42c <nx_eth_phy_init+0x30>)
 810b40a:	4809      	ldr	r0, [pc, #36]	@ (810b430 <nx_eth_phy_init+0x34>)
 810b40c:	f7f5 ff0b 	bl	8101226 <LAN8742_RegisterBusIO>
    /* Initialize the LAN8742 ETH PHY */

    if (LAN8742_Init(&LAN8742) == LAN8742_STATUS_OK)
 810b410:	4807      	ldr	r0, [pc, #28]	@ (810b430 <nx_eth_phy_init+0x34>)
 810b412:	f7f5 ff3a 	bl	810128a <LAN8742_Init>
 810b416:	4603      	mov	r3, r0
 810b418:	2b00      	cmp	r3, #0
 810b41a:	d101      	bne.n	810b420 <nx_eth_phy_init+0x24>
    {
        ret = ETH_PHY_STATUS_OK;
 810b41c:	2300      	movs	r3, #0
 810b41e:	607b      	str	r3, [r7, #4]
    }

    return ret;
 810b420:	687b      	ldr	r3, [r7, #4]
}
 810b422:	4618      	mov	r0, r3
 810b424:	3708      	adds	r7, #8
 810b426:	46bd      	mov	sp, r7
 810b428:	bd80      	pop	{r7, pc}
 810b42a:	bf00      	nop
 810b42c:	2005000c 	.word	0x2005000c
 810b430:	2005809c 	.word	0x2005809c

0810b434 <nx_eth_phy_get_link_state>:
  * @param  none
  * @retval the link status.
  */

int32_t nx_eth_phy_get_link_state(void)
{
 810b434:	b580      	push	{r7, lr}
 810b436:	b082      	sub	sp, #8
 810b438:	af00      	add	r7, sp, #0
    int32_t  linkstate = LAN8742_GetLinkState(&LAN8742);
 810b43a:	4804      	ldr	r0, [pc, #16]	@ (810b44c <nx_eth_phy_get_link_state+0x18>)
 810b43c:	f7f5 ff72 	bl	8101324 <LAN8742_GetLinkState>
 810b440:	6078      	str	r0, [r7, #4]

    return linkstate;
 810b442:	687b      	ldr	r3, [r7, #4]
}
 810b444:	4618      	mov	r0, r3
 810b446:	3708      	adds	r7, #8
 810b448:	46bd      	mov	sp, r7
 810b44a:	bd80      	pop	{r7, pc}
 810b44c:	2005809c 	.word	0x2005809c

0810b450 <lan8742_io_init>:
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */

int32_t lan8742_io_init(void)
{
 810b450:	b580      	push	{r7, lr}
 810b452:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&eth_handle);
 810b454:	4802      	ldr	r0, [pc, #8]	@ (810b460 <lan8742_io_init+0x10>)
 810b456:	f7f7 f8fd 	bl	8102654 <HAL_ETH_SetMDIOClockRange>

  return ETH_PHY_STATUS_OK;
 810b45a:	2300      	movs	r3, #0
}
 810b45c:	4618      	mov	r0, r3
 810b45e:	bd80      	pop	{r7, pc}
 810b460:	20057e64 	.word	0x20057e64

0810b464 <lan8742_io_deinit>:
  * @brief  De-Initialize the MDIO interface
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t lan8742_io_deinit (void)
{
 810b464:	b480      	push	{r7}
 810b466:	af00      	add	r7, sp, #0
    return ETH_PHY_STATUS_OK;
 810b468:	2300      	movs	r3, #0
}
 810b46a:	4618      	mov	r0, r3
 810b46c:	46bd      	mov	sp, r7
 810b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b472:	4770      	bx	lr

0810b474 <lan8742_io_read_reg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t lan8742_io_read_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 810b474:	b580      	push	{r7, lr}
 810b476:	b084      	sub	sp, #16
 810b478:	af00      	add	r7, sp, #0
 810b47a:	60f8      	str	r0, [r7, #12]
 810b47c:	60b9      	str	r1, [r7, #8]
 810b47e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&eth_handle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 810b480:	687b      	ldr	r3, [r7, #4]
 810b482:	68ba      	ldr	r2, [r7, #8]
 810b484:	68f9      	ldr	r1, [r7, #12]
 810b486:	4807      	ldr	r0, [pc, #28]	@ (810b4a4 <lan8742_io_read_reg+0x30>)
 810b488:	f7f6 fe34 	bl	81020f4 <HAL_ETH_ReadPHYRegister>
 810b48c:	4603      	mov	r3, r0
 810b48e:	2b00      	cmp	r3, #0
 810b490:	d002      	beq.n	810b498 <lan8742_io_read_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 810b492:	f04f 33ff 	mov.w	r3, #4294967295
 810b496:	e000      	b.n	810b49a <lan8742_io_read_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 810b498:	2300      	movs	r3, #0
}
 810b49a:	4618      	mov	r0, r3
 810b49c:	3710      	adds	r7, #16
 810b49e:	46bd      	mov	sp, r7
 810b4a0:	bd80      	pop	{r7, pc}
 810b4a2:	bf00      	nop
 810b4a4:	20057e64 	.word	0x20057e64

0810b4a8 <lan8742_io_write_reg>:

int32_t lan8742_io_write_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 810b4a8:	b580      	push	{r7, lr}
 810b4aa:	b084      	sub	sp, #16
 810b4ac:	af00      	add	r7, sp, #0
 810b4ae:	60f8      	str	r0, [r7, #12]
 810b4b0:	60b9      	str	r1, [r7, #8]
 810b4b2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&eth_handle, DevAddr, RegAddr, RegVal) != HAL_OK)
 810b4b4:	687b      	ldr	r3, [r7, #4]
 810b4b6:	68ba      	ldr	r2, [r7, #8]
 810b4b8:	68f9      	ldr	r1, [r7, #12]
 810b4ba:	4807      	ldr	r0, [pc, #28]	@ (810b4d8 <lan8742_io_write_reg+0x30>)
 810b4bc:	f7f6 fe6e 	bl	810219c <HAL_ETH_WritePHYRegister>
 810b4c0:	4603      	mov	r3, r0
 810b4c2:	2b00      	cmp	r3, #0
 810b4c4:	d002      	beq.n	810b4cc <lan8742_io_write_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 810b4c6:	f04f 33ff 	mov.w	r3, #4294967295
 810b4ca:	e000      	b.n	810b4ce <lan8742_io_write_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 810b4cc:	2300      	movs	r3, #0
}
 810b4ce:	4618      	mov	r0, r3
 810b4d0:	3710      	adds	r7, #16
 810b4d2:	46bd      	mov	sp, r7
 810b4d4:	bd80      	pop	{r7, pc}
 810b4d6:	bf00      	nop
 810b4d8:	20057e64 	.word	0x20057e64

0810b4dc <lan8742_io_get_tick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t lan8742_io_get_tick(void)
{
 810b4dc:	b580      	push	{r7, lr}
 810b4de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 810b4e0:	f7f5 ffe4 	bl	81014ac <HAL_GetTick>
 810b4e4:	4603      	mov	r3, r0
}
 810b4e6:	4618      	mov	r0, r3
 810b4e8:	bd80      	pop	{r7, pc}

0810b4ea <_nx_arp_dynamic_entry_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_dynamic_entry_delete(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 810b4ea:	b580      	push	{r7, lr}
 810b4ec:	b088      	sub	sp, #32
 810b4ee:	af00      	add	r7, sp, #0
 810b4f0:	6078      	str	r0, [r7, #4]
 810b4f2:	6039      	str	r1, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_PACKET *packet_ptr, *next_packet_ptr;


    /* Determine if this ARP entry is already active.  */
    if (arp_ptr -> nx_arp_active_list_head)
 810b4f4:	683b      	ldr	r3, [r7, #0]
 810b4f6:	69db      	ldr	r3, [r3, #28]
 810b4f8:	2b00      	cmp	r3, #0
 810b4fa:	d050      	beq.n	810b59e <_nx_arp_dynamic_entry_delete+0xb4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810b4fc:	f3ef 8310 	mrs	r3, PRIMASK
 810b500:	613b      	str	r3, [r7, #16]
    return(posture);
 810b502:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 810b504:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 810b506:	b672      	cpsid	i
    return(int_posture);
 810b508:	68fb      	ldr	r3, [r7, #12]
    {

        /* Remove this dynamic ARP entry from the associated list.  */

        /* Disable interrupts.  */
        TX_DISABLE
 810b50a:	61bb      	str	r3, [r7, #24]

        /* Determine if this is the only ARP entry on the list.  */
        if (arp_ptr == arp_ptr -> nx_arp_active_next)
 810b50c:	683b      	ldr	r3, [r7, #0]
 810b50e:	695b      	ldr	r3, [r3, #20]
 810b510:	683a      	ldr	r2, [r7, #0]
 810b512:	429a      	cmp	r2, r3
 810b514:	d104      	bne.n	810b520 <_nx_arp_dynamic_entry_delete+0x36>
        {

            /* Remove the entry from the list.  */
            *(arp_ptr -> nx_arp_active_list_head) =  NX_NULL;
 810b516:	683b      	ldr	r3, [r7, #0]
 810b518:	69db      	ldr	r3, [r3, #28]
 810b51a:	2200      	movs	r2, #0
 810b51c:	601a      	str	r2, [r3, #0]
 810b51e:	e014      	b.n	810b54a <_nx_arp_dynamic_entry_delete+0x60>
        {

            /* Remove the entry from a list of more than one entry.  */

            /* Update the list head pointer.  */
            if (*(arp_ptr -> nx_arp_active_list_head) == arp_ptr)
 810b520:	683b      	ldr	r3, [r7, #0]
 810b522:	69db      	ldr	r3, [r3, #28]
 810b524:	681b      	ldr	r3, [r3, #0]
 810b526:	683a      	ldr	r2, [r7, #0]
 810b528:	429a      	cmp	r2, r3
 810b52a:	d104      	bne.n	810b536 <_nx_arp_dynamic_entry_delete+0x4c>
            {
                *(arp_ptr -> nx_arp_active_list_head) =  arp_ptr -> nx_arp_active_next;
 810b52c:	683b      	ldr	r3, [r7, #0]
 810b52e:	69db      	ldr	r3, [r3, #28]
 810b530:	683a      	ldr	r2, [r7, #0]
 810b532:	6952      	ldr	r2, [r2, #20]
 810b534:	601a      	str	r2, [r3, #0]
            }

            /* Update the links of the adjacent ARP entries.  */
            (arp_ptr -> nx_arp_active_next) -> nx_arp_active_previous = arp_ptr -> nx_arp_active_previous;
 810b536:	683b      	ldr	r3, [r7, #0]
 810b538:	695b      	ldr	r3, [r3, #20]
 810b53a:	683a      	ldr	r2, [r7, #0]
 810b53c:	6992      	ldr	r2, [r2, #24]
 810b53e:	619a      	str	r2, [r3, #24]
            (arp_ptr -> nx_arp_active_previous) -> nx_arp_active_next =  arp_ptr -> nx_arp_active_next;
 810b540:	683b      	ldr	r3, [r7, #0]
 810b542:	699b      	ldr	r3, [r3, #24]
 810b544:	683a      	ldr	r2, [r7, #0]
 810b546:	6952      	ldr	r2, [r2, #20]
 810b548:	615a      	str	r2, [r3, #20]
        }

        /* No longer active, clear the active list head.  */
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;
 810b54a:	683b      	ldr	r3, [r7, #0]
 810b54c:	2200      	movs	r2, #0
 810b54e:	61da      	str	r2, [r3, #28]

        /* Decrease the number of active ARP entries.  */
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 810b550:	687b      	ldr	r3, [r7, #4]
 810b552:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	@ 0x6dc
 810b556:	1e5a      	subs	r2, r3, #1
 810b558:	687b      	ldr	r3, [r7, #4]
 810b55a:	f8c3 26dc 	str.w	r2, [r3, #1756]	@ 0x6dc

        /* Pickup the queued packets head pointer.  */
        next_packet_ptr =  arp_ptr -> nx_arp_packets_waiting;
 810b55e:	683b      	ldr	r3, [r7, #0]
 810b560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810b562:	61fb      	str	r3, [r7, #28]

        /* Clear the queued packets head pointer.  */
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 810b564:	683b      	ldr	r3, [r7, #0]
 810b566:	2200      	movs	r2, #0
 810b568:	631a      	str	r2, [r3, #48]	@ 0x30
 810b56a:	69bb      	ldr	r3, [r7, #24]
 810b56c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810b56e:	68bb      	ldr	r3, [r7, #8]
 810b570:	f383 8810 	msr	PRIMASK, r3
}
 810b574:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Loop to remove all queued packets.  */
        while (next_packet_ptr)
 810b576:	e00f      	b.n	810b598 <_nx_arp_dynamic_entry_delete+0xae>
        {

            /* Pickup the packet pointer at the head of the queue.  */
            packet_ptr =  next_packet_ptr;
 810b578:	69fb      	ldr	r3, [r7, #28]
 810b57a:	617b      	str	r3, [r7, #20]

            /* Move to the next packet in the queue.  */
            next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 810b57c:	69fb      	ldr	r3, [r7, #28]
 810b57e:	69db      	ldr	r3, [r3, #28]
 810b580:	61fb      	str	r3, [r7, #28]

            /* Clear the next packet queue pointer.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 810b582:	697b      	ldr	r3, [r7, #20]
 810b584:	2200      	movs	r2, #0
 810b586:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 810b588:	687b      	ldr	r3, [r7, #4]
 810b58a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b58c:	1c5a      	adds	r2, r3, #1
 810b58e:	687b      	ldr	r3, [r7, #4]
 810b590:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

            /* Release the packet that was queued from the previous ARP entry.  */
            _nx_packet_transmit_release(packet_ptr);
 810b592:	6978      	ldr	r0, [r7, #20]
 810b594:	f003 fc26 	bl	810ede4 <_nx_packet_transmit_release>
        while (next_packet_ptr)
 810b598:	69fb      	ldr	r3, [r7, #28]
 810b59a:	2b00      	cmp	r3, #0
 810b59c:	d1ec      	bne.n	810b578 <_nx_arp_dynamic_entry_delete+0x8e>
        }
    }

    return(NX_SUCCESS);
 810b59e:	2300      	movs	r3, #0
}
 810b5a0:	4618      	mov	r0, r3
 810b5a2:	3720      	adds	r7, #32
 810b5a4:	46bd      	mov	sp, r7
 810b5a6:	bd80      	pop	{r7, pc}

0810b5a8 <_nx_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 810b5a8:	b580      	push	{r7, lr}
 810b5aa:	b088      	sub	sp, #32
 810b5ac:	af00      	add	r7, sp, #0
 810b5ae:	60f8      	str	r0, [r7, #12]
 810b5b0:	60b9      	str	r1, [r7, #8]
 810b5b2:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ARP_ENABLE, ip_ptr, arp_cache_memory, arp_cache_size, 0, NX_TRACE_ARP_EVENTS, 0, 0);

    /* Clear the entire ARP cache.  */
    memset((void *)arp_cache_memory, 0, arp_cache_size);
 810b5b4:	687a      	ldr	r2, [r7, #4]
 810b5b6:	2100      	movs	r1, #0
 810b5b8:	68b8      	ldr	r0, [r7, #8]
 810b5ba:	f00b fd55 	bl	8117068 <memset>

    /* Pickup starting address of ARP entry array.  */
    entry_ptr =  (NX_ARP *)arp_cache_memory;
 810b5be:	68bb      	ldr	r3, [r7, #8]
 810b5c0:	61bb      	str	r3, [r7, #24]

    /* Determine how many ARP entries will fit in this cache area.  */
    arp_entries =  arp_cache_size / sizeof(NX_ARP);
 810b5c2:	687b      	ldr	r3, [r7, #4]
 810b5c4:	4a2d      	ldr	r2, [pc, #180]	@ (810b67c <_nx_arp_enable+0xd4>)
 810b5c6:	fba2 2303 	umull	r2, r3, r2, r3
 810b5ca:	091b      	lsrs	r3, r3, #4
 810b5cc:	617b      	str	r3, [r7, #20]

    /* Initialize the forward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 810b5ce:	2300      	movs	r3, #0
 810b5d0:	61fb      	str	r3, [r7, #28]
 810b5d2:	e00a      	b.n	810b5ea <_nx_arp_enable+0x42>
    {
        /* Setup each entry to point to the next entry.  */
        entry_ptr -> nx_arp_pool_next =  entry_ptr + 1;
 810b5d4:	69bb      	ldr	r3, [r7, #24]
 810b5d6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 810b5da:	69bb      	ldr	r3, [r7, #24]
 810b5dc:	60da      	str	r2, [r3, #12]
        entry_ptr++;
 810b5de:	69bb      	ldr	r3, [r7, #24]
 810b5e0:	3334      	adds	r3, #52	@ 0x34
 810b5e2:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 810b5e4:	69fb      	ldr	r3, [r7, #28]
 810b5e6:	3301      	adds	r3, #1
 810b5e8:	61fb      	str	r3, [r7, #28]
 810b5ea:	697b      	ldr	r3, [r7, #20]
 810b5ec:	3b01      	subs	r3, #1
 810b5ee:	69fa      	ldr	r2, [r7, #28]
 810b5f0:	429a      	cmp	r2, r3
 810b5f2:	d3ef      	bcc.n	810b5d4 <_nx_arp_enable+0x2c>
    }

    /* The entry now points to the last entry in the ARP array.  Set its
       next pointer to the first entry.  */
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;
 810b5f4:	69bb      	ldr	r3, [r7, #24]
 810b5f6:	68ba      	ldr	r2, [r7, #8]
 810b5f8:	60da      	str	r2, [r3, #12]

    /* Initialize the backward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 810b5fa:	2300      	movs	r3, #0
 810b5fc:	61fb      	str	r3, [r7, #28]
 810b5fe:	e00a      	b.n	810b616 <_nx_arp_enable+0x6e>
    {
        /* Setup each entry to point to the previous entry.  */
        entry_ptr -> nx_arp_pool_previous =  entry_ptr - 1;
 810b600:	69bb      	ldr	r3, [r7, #24]
 810b602:	f1a3 0234 	sub.w	r2, r3, #52	@ 0x34
 810b606:	69bb      	ldr	r3, [r7, #24]
 810b608:	611a      	str	r2, [r3, #16]
        entry_ptr--;
 810b60a:	69bb      	ldr	r3, [r7, #24]
 810b60c:	3b34      	subs	r3, #52	@ 0x34
 810b60e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 810b610:	69fb      	ldr	r3, [r7, #28]
 810b612:	3301      	adds	r3, #1
 810b614:	61fb      	str	r3, [r7, #28]
 810b616:	697b      	ldr	r3, [r7, #20]
 810b618:	3b01      	subs	r3, #1
 810b61a:	69fa      	ldr	r2, [r7, #28]
 810b61c:	429a      	cmp	r2, r3
 810b61e:	d3ef      	bcc.n	810b600 <_nx_arp_enable+0x58>
    }

    /* The entry now points to the first entry, set the previous pointer
       to the last entry.  */
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 810b620:	697b      	ldr	r3, [r7, #20]
 810b622:	2234      	movs	r2, #52	@ 0x34
 810b624:	fb02 f303 	mul.w	r3, r2, r3
 810b628:	3b34      	subs	r3, #52	@ 0x34
 810b62a:	69ba      	ldr	r2, [r7, #24]
 810b62c:	441a      	add	r2, r3
 810b62e:	69bb      	ldr	r3, [r7, #24]
 810b630:	611a      	str	r2, [r3, #16]
       information in the IP structure.  */

    /* Setup the list head pointers in the IP instance.  At first all ARP
       entries are associated with the dynamic ARP list.  The static ARP list
       is NULL until static ARP entry calls are made.  */
    ip_ptr -> nx_ip_arp_static_list =   NX_NULL;
 810b632:	68fb      	ldr	r3, [r7, #12]
 810b634:	2200      	movs	r2, #0
 810b636:	f8c3 26d4 	str.w	r2, [r3, #1748]	@ 0x6d4
    ip_ptr -> nx_ip_arp_dynamic_list =  (NX_ARP *)arp_cache_memory;
 810b63a:	68fb      	ldr	r3, [r7, #12]
 810b63c:	68ba      	ldr	r2, [r7, #8]
 810b63e:	f8c3 26d8 	str.w	r2, [r3, #1752]	@ 0x6d8

    /* Store the initial ARP cache information in the IP control block.  */
    ip_ptr -> nx_ip_arp_cache_memory  =  arp_cache_memory;
 810b642:	68fb      	ldr	r3, [r7, #12]
 810b644:	68ba      	ldr	r2, [r7, #8]
 810b646:	f8c3 26fc 	str.w	r2, [r3, #1788]	@ 0x6fc
    ip_ptr -> nx_ip_arp_total_entries =  arp_entries;
 810b64a:	68fb      	ldr	r3, [r7, #12]
 810b64c:	697a      	ldr	r2, [r7, #20]
 810b64e:	f8c3 2700 	str.w	r2, [r3, #1792]	@ 0x700

    /* Setup the ARP periodic update routine.  */
    ip_ptr -> nx_ip_arp_periodic_update =  _nx_arp_periodic_update;
 810b652:	68fb      	ldr	r3, [r7, #12]
 810b654:	4a0a      	ldr	r2, [pc, #40]	@ (810b680 <_nx_arp_enable+0xd8>)
 810b656:	f8c3 26ec 	str.w	r2, [r3, #1772]	@ 0x6ec

    /* Setup the ARP queue process routine.  */
    ip_ptr -> nx_ip_arp_queue_process =  _nx_arp_queue_process;
 810b65a:	68fb      	ldr	r3, [r7, #12]
 810b65c:	4a09      	ldr	r2, [pc, #36]	@ (810b684 <_nx_arp_enable+0xdc>)
 810b65e:	f8c3 26f0 	str.w	r2, [r3, #1776]	@ 0x6f0

    /* Setup the ARP send packet routine.  */
    ip_ptr -> nx_ip_arp_packet_send =  _nx_arp_packet_send;
 810b662:	68fb      	ldr	r3, [r7, #12]
 810b664:	4a08      	ldr	r2, [pc, #32]	@ (810b688 <_nx_arp_enable+0xe0>)
 810b666:	f8c3 26f4 	str.w	r2, [r3, #1780]	@ 0x6f4

    /* Setup the ARP allocate service request pointer.  */
    ip_ptr -> nx_ip_arp_allocate =  _nx_arp_entry_allocate;
 810b66a:	68fb      	ldr	r3, [r7, #12]
 810b66c:	4a07      	ldr	r2, [pc, #28]	@ (810b68c <_nx_arp_enable+0xe4>)
 810b66e:	f8c3 26e8 	str.w	r2, [r3, #1768]	@ 0x6e8

    /* Return successful completion.  */
    return(NX_SUCCESS);
 810b672:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 810b674:	4618      	mov	r0, r3
 810b676:	3720      	adds	r7, #32
 810b678:	46bd      	mov	sp, r7
 810b67a:	bd80      	pop	{r7, pc}
 810b67c:	4ec4ec4f 	.word	0x4ec4ec4f
 810b680:	0810be65 	.word	0x0810be65
 810b684:	0810c05f 	.word	0x0810c05f
 810b688:	0810bd21 	.word	0x0810bd21
 810b68c:	0810b691 	.word	0x0810b691

0810b690 <_nx_arp_entry_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_entry_allocate(NX_IP *ip_ptr, NX_ARP **arp_list_ptr, UINT is_static)
{
 810b690:	b580      	push	{r7, lr}
 810b692:	b08a      	sub	sp, #40	@ 0x28
 810b694:	af00      	add	r7, sp, #0
 810b696:	60f8      	str	r0, [r7, #12]
 810b698:	60b9      	str	r1, [r7, #8]
 810b69a:	607a      	str	r2, [r7, #4]
NX_ARP *arp_entry;
UINT    status;


    /* Determine if there is an ARP entry available in the dynamic list.  */
    if (ip_ptr -> nx_ip_arp_dynamic_list)
 810b69c:	68fb      	ldr	r3, [r7, #12]
 810b69e:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	@ 0x6d8
 810b6a2:	2b00      	cmp	r3, #0
 810b6a4:	f000 80b4 	beq.w	810b810 <_nx_arp_entry_allocate+0x180>
    {

        /* Yes there are one or more free entries.  */

        /* Pickup pointer to last used dynamic ARP entry.  */
        arp_entry =  (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 810b6a8:	68fb      	ldr	r3, [r7, #12]
 810b6aa:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	@ 0x6d8
 810b6ae:	691b      	ldr	r3, [r3, #16]
 810b6b0:	623b      	str	r3, [r7, #32]

        /* Remove from the dynamic list. */
        _nx_arp_dynamic_entry_delete(ip_ptr, arp_entry);
 810b6b2:	6a39      	ldr	r1, [r7, #32]
 810b6b4:	68f8      	ldr	r0, [r7, #12]
 810b6b6:	f7ff ff18 	bl	810b4ea <_nx_arp_dynamic_entry_delete>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810b6ba:	f3ef 8310 	mrs	r3, PRIMASK
 810b6be:	61bb      	str	r3, [r7, #24]
    return(posture);
 810b6c0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 810b6c2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 810b6c4:	b672      	cpsid	i
    return(int_posture);
 810b6c6:	697b      	ldr	r3, [r7, #20]

        /* Disable interrupts temporarily.  */
        TX_DISABLE
 810b6c8:	61fb      	str	r3, [r7, #28]

        /* Link the ARP entry at the head of the IP list.  */

        /* Determine if the ARP entry is being added to an empty list.  */
        if (*arp_list_ptr)
 810b6ca:	68bb      	ldr	r3, [r7, #8]
 810b6cc:	681b      	ldr	r3, [r3, #0]
 810b6ce:	2b00      	cmp	r3, #0
 810b6d0:	d014      	beq.n	810b6fc <_nx_arp_entry_allocate+0x6c>
        {

            /* Add the ARP entry to the beginning of the nonempty ARP
               list.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 810b6d2:	6a3b      	ldr	r3, [r7, #32]
 810b6d4:	68ba      	ldr	r2, [r7, #8]
 810b6d6:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =      *arp_list_ptr;
 810b6d8:	68bb      	ldr	r3, [r7, #8]
 810b6da:	681a      	ldr	r2, [r3, #0]
 810b6dc:	6a3b      	ldr	r3, [r7, #32]
 810b6de:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =  (*arp_list_ptr) -> nx_arp_active_previous;
 810b6e0:	68bb      	ldr	r3, [r7, #8]
 810b6e2:	681b      	ldr	r3, [r3, #0]
 810b6e4:	699a      	ldr	r2, [r3, #24]
 810b6e6:	6a3b      	ldr	r3, [r7, #32]
 810b6e8:	619a      	str	r2, [r3, #24]
            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =  arp_entry;
 810b6ea:	6a3b      	ldr	r3, [r7, #32]
 810b6ec:	699b      	ldr	r3, [r3, #24]
 810b6ee:	6a3a      	ldr	r2, [r7, #32]
 810b6f0:	615a      	str	r2, [r3, #20]
            (*arp_list_ptr) -> nx_arp_active_previous =  arp_entry;
 810b6f2:	68bb      	ldr	r3, [r7, #8]
 810b6f4:	681b      	ldr	r3, [r3, #0]
 810b6f6:	6a3a      	ldr	r2, [r7, #32]
 810b6f8:	619a      	str	r2, [r3, #24]
 810b6fa:	e00b      	b.n	810b714 <_nx_arp_entry_allocate+0x84>
        }
        else
        {
            /* Empty list, just put the ARP entry at the beginning.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 810b6fc:	6a3b      	ldr	r3, [r7, #32]
 810b6fe:	68ba      	ldr	r2, [r7, #8]
 810b700:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =       arp_entry;
 810b702:	6a3b      	ldr	r3, [r7, #32]
 810b704:	6a3a      	ldr	r2, [r7, #32]
 810b706:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =   arp_entry;
 810b708:	6a3b      	ldr	r3, [r7, #32]
 810b70a:	6a3a      	ldr	r2, [r7, #32]
 810b70c:	619a      	str	r2, [r3, #24]

            /* Now setup the list head.  */
            *arp_list_ptr =  arp_entry;
 810b70e:	68bb      	ldr	r3, [r7, #8]
 810b710:	6a3a      	ldr	r2, [r7, #32]
 810b712:	601a      	str	r2, [r3, #0]
        }

        /* Determine if this is a static entry. */
        if (is_static == NX_TRUE)
 810b714:	687b      	ldr	r3, [r7, #4]
 810b716:	2b01      	cmp	r3, #1
 810b718:	d141      	bne.n	810b79e <_nx_arp_entry_allocate+0x10e>
        {

            /* Remove this entry from the ARP dynamic list.  */

            /* Determine if this is the only ARP entry on the dynamic list.  */
            if (arp_entry == arp_entry -> nx_arp_pool_next)
 810b71a:	6a3b      	ldr	r3, [r7, #32]
 810b71c:	68db      	ldr	r3, [r3, #12]
 810b71e:	6a3a      	ldr	r2, [r7, #32]
 810b720:	429a      	cmp	r2, r3
 810b722:	d104      	bne.n	810b72e <_nx_arp_entry_allocate+0x9e>
            {

                /* Remove the sole entry from the dynamic list head.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  NX_NULL;
 810b724:	68fb      	ldr	r3, [r7, #12]
 810b726:	2200      	movs	r2, #0
 810b728:	f8c3 26d8 	str.w	r2, [r3, #1752]	@ 0x6d8
 810b72c:	e009      	b.n	810b742 <_nx_arp_entry_allocate+0xb2>
            {

                /* Remove the entry from a list of more than one entry.  */

                /* Update the links of the adjacent ARP dynamic pool entries.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 810b72e:	6a3b      	ldr	r3, [r7, #32]
 810b730:	68db      	ldr	r3, [r3, #12]
 810b732:	6a3a      	ldr	r2, [r7, #32]
 810b734:	6912      	ldr	r2, [r2, #16]
 810b736:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 810b738:	6a3b      	ldr	r3, [r7, #32]
 810b73a:	691b      	ldr	r3, [r3, #16]
 810b73c:	6a3a      	ldr	r2, [r7, #32]
 810b73e:	68d2      	ldr	r2, [r2, #12]
 810b740:	60da      	str	r2, [r3, #12]
            }

            /* Add the entry to the ARP static list.  */

            /* Determine if the ARP static list is empty.  */
            if (ip_ptr -> nx_ip_arp_static_list == NX_NULL)
 810b742:	68fb      	ldr	r3, [r7, #12]
 810b744:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	@ 0x6d4
 810b748:	2b00      	cmp	r3, #0
 810b74a:	d10a      	bne.n	810b762 <_nx_arp_entry_allocate+0xd2>
            {

                /* Just place this single ARP entry on the list.  */
                arp_entry -> nx_arp_pool_next =     arp_entry;
 810b74c:	6a3b      	ldr	r3, [r7, #32]
 810b74e:	6a3a      	ldr	r2, [r7, #32]
 810b750:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = arp_entry;
 810b752:	6a3b      	ldr	r3, [r7, #32]
 810b754:	6a3a      	ldr	r2, [r7, #32]
 810b756:	611a      	str	r2, [r3, #16]
                ip_ptr -> nx_ip_arp_static_list =   arp_entry;
 810b758:	68fb      	ldr	r3, [r7, #12]
 810b75a:	6a3a      	ldr	r2, [r7, #32]
 810b75c:	f8c3 26d4 	str.w	r2, [r3, #1748]	@ 0x6d4
 810b760:	e015      	b.n	810b78e <_nx_arp_entry_allocate+0xfe>
            }
            else
            {

                /* Add to the end of the ARP static list.  */
                arp_entry -> nx_arp_pool_next = ip_ptr -> nx_ip_arp_static_list;
 810b762:	68fb      	ldr	r3, [r7, #12]
 810b764:	f8d3 26d4 	ldr.w	r2, [r3, #1748]	@ 0x6d4
 810b768:	6a3b      	ldr	r3, [r7, #32]
 810b76a:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous;
 810b76c:	68fb      	ldr	r3, [r7, #12]
 810b76e:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	@ 0x6d4
 810b772:	691a      	ldr	r2, [r3, #16]
 810b774:	6a3b      	ldr	r3, [r7, #32]
 810b776:	611a      	str	r2, [r3, #16]
                ((ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry;
 810b778:	68fb      	ldr	r3, [r7, #12]
 810b77a:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	@ 0x6d4
 810b77e:	691b      	ldr	r3, [r3, #16]
 810b780:	6a3a      	ldr	r2, [r7, #32]
 810b782:	60da      	str	r2, [r3, #12]
                (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous = arp_entry;
 810b784:	68fb      	ldr	r3, [r7, #12]
 810b786:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	@ 0x6d4
 810b78a:	6a3a      	ldr	r2, [r7, #32]
 810b78c:	611a      	str	r2, [r3, #16]
            }

#ifndef NX_DISABLE_ARP_INFO
            /* Increment the ARP static entry count.  */
            ip_ptr -> nx_ip_arp_static_entries++;
 810b78e:	68fb      	ldr	r3, [r7, #12]
 810b790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810b794:	1c5a      	adds	r2, r3, #1
 810b796:	68fb      	ldr	r3, [r7, #12]
 810b798:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 810b79c:	e02c      	b.n	810b7f8 <_nx_arp_entry_allocate+0x168>
        }
        else  /* Allocate entry from dynamic list. */
        {

            /* Move this ARP entry to the front of the general ARP dynamic entry pool.  */
            if (arp_entry != ip_ptr -> nx_ip_arp_dynamic_list)
 810b79e:	68fb      	ldr	r3, [r7, #12]
 810b7a0:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	@ 0x6d8
 810b7a4:	6a3a      	ldr	r2, [r7, #32]
 810b7a6:	429a      	cmp	r2, r3
 810b7a8:	d01f      	beq.n	810b7ea <_nx_arp_entry_allocate+0x15a>

                /* The current ARP entry is not at the front of the list, so it
                   must be moved.  */

                /* Link up the neighbors first.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 810b7aa:	6a3b      	ldr	r3, [r7, #32]
 810b7ac:	68db      	ldr	r3, [r3, #12]
 810b7ae:	6a3a      	ldr	r2, [r7, #32]
 810b7b0:	6912      	ldr	r2, [r2, #16]
 810b7b2:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 810b7b4:	6a3b      	ldr	r3, [r7, #32]
 810b7b6:	691b      	ldr	r3, [r3, #16]
 810b7b8:	6a3a      	ldr	r2, [r7, #32]
 810b7ba:	68d2      	ldr	r2, [r2, #12]
 810b7bc:	60da      	str	r2, [r3, #12]

                /* Now link this ARP entry to the head of the list.  */
                arp_entry -> nx_arp_pool_next =  ip_ptr -> nx_ip_arp_dynamic_list;
 810b7be:	68fb      	ldr	r3, [r7, #12]
 810b7c0:	f8d3 26d8 	ldr.w	r2, [r3, #1752]	@ 0x6d8
 810b7c4:	6a3b      	ldr	r3, [r7, #32]
 810b7c6:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous =    (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous;
 810b7c8:	6a3b      	ldr	r3, [r7, #32]
 810b7ca:	68db      	ldr	r3, [r3, #12]
 810b7cc:	691a      	ldr	r2, [r3, #16]
 810b7ce:	6a3b      	ldr	r3, [r7, #32]
 810b7d0:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =  arp_entry;
 810b7d2:	6a3b      	ldr	r3, [r7, #32]
 810b7d4:	691b      	ldr	r3, [r3, #16]
 810b7d6:	6a3a      	ldr	r2, [r7, #32]
 810b7d8:	60da      	str	r2, [r3, #12]
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =  arp_entry;
 810b7da:	6a3b      	ldr	r3, [r7, #32]
 810b7dc:	68db      	ldr	r3, [r3, #12]
 810b7de:	6a3a      	ldr	r2, [r7, #32]
 810b7e0:	611a      	str	r2, [r3, #16]

                /* Now set the list head to this ARP entry.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry;
 810b7e2:	68fb      	ldr	r3, [r7, #12]
 810b7e4:	6a3a      	ldr	r2, [r7, #32]
 810b7e6:	f8c3 26d8 	str.w	r2, [r3, #1752]	@ 0x6d8
            }

            /* Increment the number of active dynamic entries.  */
            ip_ptr -> nx_ip_arp_dynamic_active_count++;
 810b7ea:	68fb      	ldr	r3, [r7, #12]
 810b7ec:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	@ 0x6dc
 810b7f0:	1c5a      	adds	r2, r3, #1
 810b7f2:	68fb      	ldr	r3, [r7, #12]
 810b7f4:	f8c3 26dc 	str.w	r2, [r3, #1756]	@ 0x6dc
        }

        /* Set the entry type.  */
        arp_entry -> nx_arp_route_static = is_static;
 810b7f8:	6a3b      	ldr	r3, [r7, #32]
 810b7fa:	687a      	ldr	r2, [r7, #4]
 810b7fc:	601a      	str	r2, [r3, #0]
 810b7fe:	69fb      	ldr	r3, [r7, #28]
 810b800:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810b802:	693b      	ldr	r3, [r7, #16]
 810b804:	f383 8810 	msr	PRIMASK, r3
}
 810b808:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Setup a successful status return.  */
        status =  NX_SUCCESS;
 810b80a:	2300      	movs	r3, #0
 810b80c:	627b      	str	r3, [r7, #36]	@ 0x24
 810b80e:	e001      	b.n	810b814 <_nx_arp_entry_allocate+0x184>
    else
    {

        /* No more ARP entries are available, all the ARP entries must be
           allocated on the static list.  */
        status =  NX_NO_MORE_ENTRIES;
 810b810:	2317      	movs	r3, #23
 810b812:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Return status to the caller.  */
    return(status);
 810b814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810b816:	4618      	mov	r0, r3
 810b818:	3728      	adds	r7, #40	@ 0x28
 810b81a:	46bd      	mov	sp, r7
 810b81c:	bd80      	pop	{r7, pc}

0810b81e <_nx_arp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 810b81e:	b580      	push	{r7, lr}
 810b820:	b088      	sub	sp, #32
 810b822:	af00      	add	r7, sp, #0
 810b824:	6078      	str	r0, [r7, #4]
 810b826:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810b828:	f3ef 8310 	mrs	r3, PRIMASK
 810b82c:	61bb      	str	r3, [r7, #24]
    return(posture);
 810b82e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 810b830:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 810b832:	b672      	cpsid	i
    return(int_posture);
 810b834:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 810b836:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if ARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_arp_queue_process)
 810b838:	687b      	ldr	r3, [r7, #4]
 810b83a:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	@ 0x6f0
 810b83e:	2b00      	cmp	r3, #0
 810b840:	d110      	bne.n	810b864 <_nx_arp_packet_deferred_receive+0x46>

        /* ARP is not enabled.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count...  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 810b842:	687b      	ldr	r3, [r7, #4]
 810b844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810b848:	1c5a      	adds	r2, r3, #1
 810b84a:	687b      	ldr	r3, [r7, #4]
 810b84c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 810b850:	69fb      	ldr	r3, [r7, #28]
 810b852:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810b854:	693b      	ldr	r3, [r7, #16]
 810b856:	f383 8810 	msr	PRIMASK, r3
}
 810b85a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since ARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 810b85c:	6838      	ldr	r0, [r7, #0]
 810b85e:	f003 fa0b 	bl	810ec78 <_nx_packet_release>

        /* Return to caller.  */
        return;
 810b862:	e02f      	b.n	810b8c4 <_nx_arp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the ARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 810b864:	687b      	ldr	r3, [r7, #4]
 810b866:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	@ 0x6e0
 810b86a:	2b00      	cmp	r3, #0
 810b86c:	d011      	beq.n	810b892 <_nx_arp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the ARP deferred queue.  */
        (ip_ptr -> nx_ip_arp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 810b86e:	687b      	ldr	r3, [r7, #4]
 810b870:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	@ 0x6e4
 810b874:	683a      	ldr	r2, [r7, #0]
 810b876:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 810b878:	683b      	ldr	r3, [r7, #0]
 810b87a:	2200      	movs	r2, #0
 810b87c:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 810b87e:	687b      	ldr	r3, [r7, #4]
 810b880:	683a      	ldr	r2, [r7, #0]
 810b882:	f8c3 26e4 	str.w	r2, [r3, #1764]	@ 0x6e4
 810b886:	69fb      	ldr	r3, [r7, #28]
 810b888:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810b88a:	68fb      	ldr	r3, [r7, #12]
 810b88c:	f383 8810 	msr	PRIMASK, r3
}
 810b890:	e018      	b.n	810b8c4 <_nx_arp_packet_deferred_receive+0xa6>
    {

        /* Empty ARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the ARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr;
 810b892:	687b      	ldr	r3, [r7, #4]
 810b894:	683a      	ldr	r2, [r7, #0]
 810b896:	f8c3 26e0 	str.w	r2, [r3, #1760]	@ 0x6e0
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 810b89a:	687b      	ldr	r3, [r7, #4]
 810b89c:	683a      	ldr	r2, [r7, #0]
 810b89e:	f8c3 26e4 	str.w	r2, [r3, #1764]	@ 0x6e4
        packet_ptr -> nx_packet_queue_next =                 NX_NULL;
 810b8a2:	683b      	ldr	r3, [r7, #0]
 810b8a4:	2200      	movs	r2, #0
 810b8a6:	61da      	str	r2, [r3, #28]
 810b8a8:	69fb      	ldr	r3, [r7, #28]
 810b8aa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810b8ac:	68bb      	ldr	r3, [r7, #8]
 810b8ae:	f383 8810 	msr	PRIMASK, r3
}
 810b8b2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the ARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
 810b8b4:	687b      	ldr	r3, [r7, #4]
 810b8b6:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 810b8ba:	2200      	movs	r2, #0
 810b8bc:	2110      	movs	r1, #16
 810b8be:	4618      	mov	r0, r3
 810b8c0:	f008 fdc4 	bl	811444c <_tx_event_flags_set>
    }
}
 810b8c4:	3720      	adds	r7, #32
 810b8c6:	46bd      	mov	sp, r7
 810b8c8:	bd80      	pop	{r7, pc}

0810b8ca <_nx_arp_packet_receive>:
/*                                            fixed compiler errors,      */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 810b8ca:	b590      	push	{r4, r7, lr}
 810b8cc:	b097      	sub	sp, #92	@ 0x5c
 810b8ce:	af02      	add	r7, sp, #8
 810b8d0:	6078      	str	r0, [r7, #4]
 810b8d2:	6039      	str	r1, [r7, #0]
ULONG         sender_physical_lsw;
ULONG         sender_ip_address;
ULONG         target_ip_address;
ULONG         message_type;
ULONG         index;
UCHAR         consumed = NX_FALSE;
 810b8d4:	2300      	movs	r3, #0
 810b8d6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
NX_INTERFACE *interface_ptr;


#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Determine if the packet length is valid.  */
    if (packet_ptr -> nx_packet_length < NX_ARP_MESSAGE_SIZE)
 810b8da:	683b      	ldr	r3, [r7, #0]
 810b8dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b8de:	2b1b      	cmp	r3, #27
 810b8e0:	d80a      	bhi.n	810b8f8 <_nx_arp_packet_receive+0x2e>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 810b8e2:	687b      	ldr	r3, [r7, #4]
 810b8e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810b8e8:	1c5a      	adds	r2, r3, #1
 810b8ea:	687b      	ldr	r3, [r7, #4]
 810b8ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 810b8f0:	6838      	ldr	r0, [r7, #0]
 810b8f2:	f003 f9c1 	bl	810ec78 <_nx_packet_release>

        /* Return to caller.  */
        return;
 810b8f6:	e20f      	b.n	810bd18 <_nx_arp_packet_receive+0x44e>
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING  */

    /* Setup a pointer to the ARP message.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 810b8f8:	683b      	ldr	r3, [r7, #0]
 810b8fa:	689b      	ldr	r3, [r3, #8]
 810b8fc:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 810b8fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b900:	3304      	adds	r3, #4
 810b902:	681a      	ldr	r2, [r3, #0]
 810b904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b906:	3304      	adds	r3, #4
 810b908:	ba12      	rev	r2, r2
 810b90a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 810b90c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b90e:	3308      	adds	r3, #8
 810b910:	681a      	ldr	r2, [r3, #0]
 810b912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b914:	3308      	adds	r3, #8
 810b916:	ba12      	rev	r2, r2
 810b918:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 810b91a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b91c:	330c      	adds	r3, #12
 810b91e:	681a      	ldr	r2, [r3, #0]
 810b920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b922:	330c      	adds	r3, #12
 810b924:	ba12      	rev	r2, r2
 810b926:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 810b928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b92a:	3310      	adds	r3, #16
 810b92c:	681a      	ldr	r2, [r3, #0]
 810b92e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b930:	3310      	adds	r3, #16
 810b932:	ba12      	rev	r2, r2
 810b934:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 810b936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b938:	3314      	adds	r3, #20
 810b93a:	681a      	ldr	r2, [r3, #0]
 810b93c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b93e:	3314      	adds	r3, #20
 810b940:	ba12      	rev	r2, r2
 810b942:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 810b944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b946:	3318      	adds	r3, #24
 810b948:	681a      	ldr	r2, [r3, #0]
 810b94a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b94c:	3318      	adds	r3, #24
 810b94e:	ba12      	rev	r2, r2
 810b950:	601a      	str	r2, [r3, #0]

    /* Pickup the ARP message type.  */
    message_type =  (ULONG)(*(message_ptr + 1) & 0xFFFF);
 810b952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b954:	3304      	adds	r3, #4
 810b956:	681b      	ldr	r3, [r3, #0]
 810b958:	b29b      	uxth	r3, r3
 810b95a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Determine if the ARP message type is valid.  */
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 810b95c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b95e:	2b01      	cmp	r3, #1
 810b960:	d00d      	beq.n	810b97e <_nx_arp_packet_receive+0xb4>
 810b962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b964:	2b02      	cmp	r3, #2
 810b966:	d00a      	beq.n	810b97e <_nx_arp_packet_receive+0xb4>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 810b968:	687b      	ldr	r3, [r7, #4]
 810b96a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810b96e:	1c5a      	adds	r2, r3, #1
 810b970:	687b      	ldr	r3, [r7, #4]
 810b972:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 810b976:	6838      	ldr	r0, [r7, #0]
 810b978:	f003 f97e 	bl	810ec78 <_nx_packet_release>

        /* Return to caller.  */
        return;
 810b97c:	e1cc      	b.n	810bd18 <_nx_arp_packet_receive+0x44e>
    }

    /* Pick up the sender's physical address from the message.  */
    sender_physical_msw =  (*(message_ptr + 2) >> 16);
 810b97e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b980:	3308      	adds	r3, #8
 810b982:	681b      	ldr	r3, [r3, #0]
 810b984:	0c1b      	lsrs	r3, r3, #16
 810b986:	63bb      	str	r3, [r7, #56]	@ 0x38
    sender_physical_lsw =  (*(message_ptr + 2) << 16) | (*(message_ptr + 3) >> 16);
 810b988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b98a:	3308      	adds	r3, #8
 810b98c:	681b      	ldr	r3, [r3, #0]
 810b98e:	041a      	lsls	r2, r3, #16
 810b990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b992:	330c      	adds	r3, #12
 810b994:	681b      	ldr	r3, [r3, #0]
 810b996:	0c1b      	lsrs	r3, r3, #16
 810b998:	4313      	orrs	r3, r2
 810b99a:	637b      	str	r3, [r7, #52]	@ 0x34
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
 810b99c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b99e:	330c      	adds	r3, #12
 810b9a0:	681b      	ldr	r3, [r3, #0]
 810b9a2:	041a      	lsls	r2, r3, #16
 810b9a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b9a6:	3310      	adds	r3, #16
 810b9a8:	681b      	ldr	r3, [r3, #0]
 810b9aa:	0c1b      	lsrs	r3, r3, #16
 810b9ac:	4313      	orrs	r3, r2
 810b9ae:	633b      	str	r3, [r7, #48]	@ 0x30
    target_ip_address =    *(message_ptr + 6);
 810b9b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b9b2:	699b      	ldr	r3, [r3, #24]
 810b9b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Does the packet have an interface assigned? */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 810b9b6:	683b      	ldr	r3, [r7, #0]
 810b9b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810b9ba:	2b00      	cmp	r3, #0
 810b9bc:	d104      	bne.n	810b9c8 <_nx_arp_packet_receive+0xfe>
    {

        /* No, so default it to the primary interface. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &ip_ptr -> nx_ip_interface[0];
 810b9be:	687b      	ldr	r3, [r7, #4]
 810b9c0:	f203 7224 	addw	r2, r3, #1828	@ 0x724
 810b9c4:	683b      	ldr	r3, [r7, #0]
 810b9c6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Pickup the interface information from the incoming packet. */
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 810b9c8:	683b      	ldr	r3, [r7, #0]
 810b9ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810b9cc:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if it is an IP address conflict when IP address probing.  */
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 810b9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b9d0:	695b      	ldr	r3, [r3, #20]
 810b9d2:	2b00      	cmp	r3, #0
 810b9d4:	d12e      	bne.n	810ba34 <_nx_arp_packet_receive+0x16a>
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 810b9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b9d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 810b9da:	2b00      	cmp	r3, #0
 810b9dc:	d02a      	beq.n	810ba34 <_nx_arp_packet_receive+0x16a>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 810b9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b9e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 810b9e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b9e4:	429a      	cmp	r2, r3
 810b9e6:	d007      	beq.n	810b9f8 <_nx_arp_packet_receive+0x12e>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 810b9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b9ea:	2b00      	cmp	r3, #0
 810b9ec:	d122      	bne.n	810ba34 <_nx_arp_packet_receive+0x16a>
         ((sender_ip_address == 0) && (target_ip_address == interface_ptr -> nx_interface_ip_probe_address))))
 810b9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b9f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810b9f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b9f4:	429a      	cmp	r2, r3
 810b9f6:	d11d      	bne.n	810ba34 <_nx_arp_packet_receive+0x16a>
    {

        /* Make sure the sender physical address is not ours.  */
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 810b9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b9fa:	68db      	ldr	r3, [r3, #12]
 810b9fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810b9fe:	429a      	cmp	r2, r3
 810ba00:	d104      	bne.n	810ba0c <_nx_arp_packet_receive+0x142>
            (sender_physical_lsw != interface_ptr -> nx_interface_physical_address_lsw))
 810ba02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ba04:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 810ba06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810ba08:	429a      	cmp	r2, r3
 810ba0a:	d00f      	beq.n	810ba2c <_nx_arp_packet_receive+0x162>
        {

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 810ba0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ba0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810ba10:	2b00      	cmp	r3, #0
 810ba12:	d00b      	beq.n	810ba2c <_nx_arp_packet_receive+0x162>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 810ba14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ba16:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 810ba18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ba1a:	79db      	ldrb	r3, [r3, #7]
 810ba1c:	4619      	mov	r1, r3
 810ba1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ba20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810ba22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ba24:	9300      	str	r3, [sp, #0]
 810ba26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ba28:	6878      	ldr	r0, [r7, #4]
 810ba2a:	47a0      	blx	r4
                                                                           sender_physical_msw, sender_physical_lsw);
            }
        }

        /* Release the packet. */
        _nx_packet_release(packet_ptr);
 810ba2c:	6838      	ldr	r0, [r7, #0]
 810ba2e:	f003 f923 	bl	810ec78 <_nx_packet_release>

        return;
 810ba32:	e171      	b.n	810bd18 <_nx_arp_packet_receive+0x44e>
    }

    /* Determine if it is an address conflict packet after set the IP address.  */
    if ((sender_ip_address != 0) && (sender_ip_address == interface_ptr -> nx_interface_ip_address))
 810ba34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ba36:	2b00      	cmp	r3, #0
 810ba38:	d040      	beq.n	810babc <_nx_arp_packet_receive+0x1f2>
 810ba3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ba3c:	695b      	ldr	r3, [r3, #20]
 810ba3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ba40:	429a      	cmp	r2, r3
 810ba42:	d13b      	bne.n	810babc <_nx_arp_packet_receive+0x1f2>
    {

        /* Is it sent from other devices. */
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 810ba44:	683b      	ldr	r3, [r7, #0]
 810ba46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810ba48:	68db      	ldr	r3, [r3, #12]
 810ba4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810ba4c:	429a      	cmp	r2, r3
 810ba4e:	d105      	bne.n	810ba5c <_nx_arp_packet_receive+0x192>
            (sender_physical_lsw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw))
 810ba50:	683b      	ldr	r3, [r7, #0]
 810ba52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810ba54:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 810ba56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810ba58:	429a      	cmp	r2, r3
 810ba5a:	d02b      	beq.n	810bab4 <_nx_arp_packet_receive+0x1ea>
        {

            /* Yes it is.  */
            if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout == 0)
 810ba5c:	683b      	ldr	r3, [r7, #0]
 810ba5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810ba60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810ba62:	2b00      	cmp	r3, #0
 810ba64:	d10a      	bne.n	810ba7c <_nx_arp_packet_receive+0x1b2>
            {

                /* Set defend timeout. */
                packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout = NX_ARP_DEFEND_INTERVAL;
 810ba66:	683b      	ldr	r3, [r7, #0]
 810ba68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810ba6a:	220a      	movs	r2, #10
 810ba6c:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Send the announcement. */
                _nx_arp_packet_send(ip_ptr, sender_ip_address, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 810ba6e:	683b      	ldr	r3, [r7, #0]
 810ba70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810ba72:	461a      	mov	r2, r3
 810ba74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 810ba76:	6878      	ldr	r0, [r7, #4]
 810ba78:	f000 f952 	bl	810bd20 <_nx_arp_packet_send>
            }

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 810ba7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ba7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810ba80:	2b00      	cmp	r3, #0
 810ba82:	d00b      	beq.n	810ba9c <_nx_arp_packet_receive+0x1d2>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 810ba84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ba86:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 810ba88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ba8a:	79db      	ldrb	r3, [r3, #7]
 810ba8c:	4619      	mov	r1, r3
 810ba8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ba90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810ba92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ba94:	9300      	str	r3, [sp, #0]
 810ba96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ba98:	6878      	ldr	r0, [r7, #4]
 810ba9a:	47a0      	blx	r4

            /* This is likely in response to our previous gratuitous ARP from another entity on the
               network has the same IP address.  */

            /* Determine if there is a gratuitous ARP response handler.  */
            if (ip_ptr -> nx_ip_arp_gratuitous_response_handler)
 810ba9c:	687b      	ldr	r3, [r7, #4]
 810ba9e:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 810baa2:	2b00      	cmp	r3, #0
 810baa4:	d006      	beq.n	810bab4 <_nx_arp_packet_receive+0x1ea>
            {

                /* Yes, call the gratuitous ARP response handler. Note that it is responsible
                   for releasing the packet!  */
                (ip_ptr -> nx_ip_arp_gratuitous_response_handler)(ip_ptr, packet_ptr);
 810baa6:	687b      	ldr	r3, [r7, #4]
 810baa8:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 810baac:	6839      	ldr	r1, [r7, #0]
 810baae:	6878      	ldr	r0, [r7, #4]
 810bab0:	4798      	blx	r3

                return;
 810bab2:	e131      	b.n	810bd18 <_nx_arp_packet_receive+0x44e>
            return;
#endif /* NX_ARP_DEFEND_BY_REPLY */
        }

        /* Release the conflict packet. */
        _nx_packet_release(packet_ptr);
 810bab4:	6838      	ldr	r0, [r7, #0]
 810bab6:	f003 f8df 	bl	810ec78 <_nx_packet_release>

        return;
 810baba:	e12d      	b.n	810bd18 <_nx_arp_packet_receive+0x44e>
    }

    /* Determine what type of ARP message this is.  Note that ARP requests must
       also specify this IP instance's IP address.  */
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 810babc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810babe:	2b01      	cmp	r3, #1
 810bac0:	f040 808f 	bne.w	810bbe2 <_nx_arp_packet_receive+0x318>
 810bac4:	683b      	ldr	r3, [r7, #0]
 810bac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810bac8:	695b      	ldr	r3, [r3, #20]
 810baca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810bacc:	429a      	cmp	r2, r3
 810bace:	f040 8088 	bne.w	810bbe2 <_nx_arp_packet_receive+0x318>
    {

#ifndef NX_DISABLE_ARP_INFO

        /* Increment the ARP requests received count.  */
        ip_ptr -> nx_ip_arp_requests_received++;
 810bad2:	687b      	ldr	r3, [r7, #4]
 810bad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810bad6:	1c5a      	adds	r2, r3, #1
 810bad8:	687b      	ldr	r3, [r7, #4]
 810bada:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Increment the ARP responses sent count.  */
        ip_ptr -> nx_ip_arp_responses_sent++;
 810badc:	687b      	ldr	r3, [r7, #4]
 810bade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810bae0:	1c5a      	adds	r2, r3, #1
 810bae2:	687b      	ldr	r3, [r7, #4]
 810bae4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_RESPONSE_SEND, ip_ptr, sender_ip_address, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the ARP message type to ARP response.  */
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 810bae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bae8:	3304      	adds	r3, #4
 810baea:	681b      	ldr	r3, [r3, #0]
 810baec:	0c1b      	lsrs	r3, r3, #16
 810baee:	041b      	lsls	r3, r3, #16
 810baf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810baf2:	3204      	adds	r2, #4
 810baf4:	f043 0302 	orr.w	r3, r3, #2
 810baf8:	6013      	str	r3, [r2, #0]


        /* Now fill in the new source and destination information for the ARP response.  */
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 810bafa:	683b      	ldr	r3, [r7, #0]
 810bafc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810bafe:	68db      	ldr	r3, [r3, #12]
 810bb00:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw >> 16);
 810bb02:	683b      	ldr	r3, [r7, #0]
 810bb04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810bb06:	691b      	ldr	r3, [r3, #16]
 810bb08:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 810bb0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bb0c:	3308      	adds	r3, #8
 810bb0e:	430a      	orrs	r2, r1
 810bb10:	601a      	str	r2, [r3, #0]
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 810bb12:	683b      	ldr	r3, [r7, #0]
 810bb14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810bb16:	691b      	ldr	r3, [r3, #16]
 810bb18:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address >> 16);
 810bb1a:	683b      	ldr	r3, [r7, #0]
 810bb1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810bb1e:	695b      	ldr	r3, [r3, #20]
 810bb20:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 810bb22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bb24:	330c      	adds	r3, #12
 810bb26:	430a      	orrs	r2, r1
 810bb28:	601a      	str	r2, [r3, #0]
        *(message_ptr + 4) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sender_physical_msw;
 810bb2a:	683b      	ldr	r3, [r7, #0]
 810bb2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810bb2e:	695b      	ldr	r3, [r3, #20]
 810bb30:	0419      	lsls	r1, r3, #16
 810bb32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bb34:	3310      	adds	r3, #16
 810bb36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810bb38:	430a      	orrs	r2, r1
 810bb3a:	601a      	str	r2, [r3, #0]
        *(message_ptr + 5) =  (ULONG)sender_physical_lsw;
 810bb3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bb3e:	3314      	adds	r3, #20
 810bb40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810bb42:	601a      	str	r2, [r3, #0]
        *(message_ptr + 6) =  (ULONG)sender_ip_address;
 810bb44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bb46:	3318      	adds	r3, #24
 810bb48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810bb4a:	601a      	str	r2, [r3, #0]

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the ARP message.  */
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 810bb4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bb4e:	3304      	adds	r3, #4
 810bb50:	681a      	ldr	r2, [r3, #0]
 810bb52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bb54:	3304      	adds	r3, #4
 810bb56:	ba12      	rev	r2, r2
 810bb58:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 810bb5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bb5c:	3308      	adds	r3, #8
 810bb5e:	681a      	ldr	r2, [r3, #0]
 810bb60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bb62:	3308      	adds	r3, #8
 810bb64:	ba12      	rev	r2, r2
 810bb66:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 810bb68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bb6a:	330c      	adds	r3, #12
 810bb6c:	681a      	ldr	r2, [r3, #0]
 810bb6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bb70:	330c      	adds	r3, #12
 810bb72:	ba12      	rev	r2, r2
 810bb74:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 810bb76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bb78:	3310      	adds	r3, #16
 810bb7a:	681a      	ldr	r2, [r3, #0]
 810bb7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bb7e:	3310      	adds	r3, #16
 810bb80:	ba12      	rev	r2, r2
 810bb82:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 810bb84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bb86:	3314      	adds	r3, #20
 810bb88:	681a      	ldr	r2, [r3, #0]
 810bb8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bb8c:	3314      	adds	r3, #20
 810bb8e:	ba12      	rev	r2, r2
 810bb90:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 810bb92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bb94:	3318      	adds	r3, #24
 810bb96:	681a      	ldr	r2, [r3, #0]
 810bb98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810bb9a:	3318      	adds	r3, #24
 810bb9c:	ba12      	rev	r2, r2
 810bb9e:	601a      	str	r2, [r3, #0]

        /* Make sure the packet length is set properly.  */
        packet_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 810bba0:	683b      	ldr	r3, [r7, #0]
 810bba2:	221c      	movs	r2, #28
 810bba4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Setup the append pointer, since the received ARP packet can be padded
           with unnecessary bytes.  */
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 810bba6:	683b      	ldr	r3, [r7, #0]
 810bba8:	689b      	ldr	r3, [r3, #8]
 810bbaa:	f103 021c 	add.w	r2, r3, #28
 810bbae:	683b      	ldr	r3, [r7, #0]
 810bbb0:	60da      	str	r2, [r3, #12]

        /* Send the ARP request to the driver.  */
        driver_request.nx_ip_driver_ptr =      ip_ptr;
 810bbb2:	687b      	ldr	r3, [r7, #4]
 810bbb4:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command =  NX_LINK_ARP_RESPONSE_SEND;
 810bbb6:	2306      	movs	r3, #6
 810bbb8:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet =   packet_ptr;
 810bbba:	683b      	ldr	r3, [r7, #0]
 810bbbc:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_physical_address_msw =  sender_physical_msw;
 810bbbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bbc0:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  sender_physical_lsw;
 810bbc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bbc4:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 810bbc6:	683b      	ldr	r3, [r7, #0]
 810bbc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810bbca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_ARP_RESPONSE_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* No need to update interface.  When responding to an ARP request, use the same interface where the request was received. */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 810bbcc:	683b      	ldr	r3, [r7, #0]
 810bbce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810bbd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810bbd2:	f107 0208 	add.w	r2, r7, #8
 810bbd6:	4610      	mov	r0, r2
 810bbd8:	4798      	blx	r3

        /* Set the consumed as NX_TRUE, do not need to release the packet.  */
        consumed = NX_TRUE;
 810bbda:	2301      	movs	r3, #1
 810bbdc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 810bbe0:	e00d      	b.n	810bbfe <_nx_arp_packet_receive+0x334>
        /* We have a response to a previous ARP request or Gratuitous ARP from another network entity.  */

#ifndef NX_DISABLE_ARP_INFO

        /* Check for the message type to see which counter to increment.  */
        if (message_type == NX_ARP_OPTION_REQUEST)
 810bbe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810bbe4:	2b01      	cmp	r3, #1
 810bbe6:	d105      	bne.n	810bbf4 <_nx_arp_packet_receive+0x32a>
        {

            /* Increment the ARP requests received count.  */
            ip_ptr -> nx_ip_arp_requests_received++;
 810bbe8:	687b      	ldr	r3, [r7, #4]
 810bbea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810bbec:	1c5a      	adds	r2, r3, #1
 810bbee:	687b      	ldr	r3, [r7, #4]
 810bbf0:	671a      	str	r2, [r3, #112]	@ 0x70
 810bbf2:	e004      	b.n	810bbfe <_nx_arp_packet_receive+0x334>
        }
        else
        {

            /* Increment the ARP responses received count.  */
            ip_ptr -> nx_ip_arp_responses_received++;
 810bbf4:	687b      	ldr	r3, [r7, #4]
 810bbf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810bbf8:	1c5a      	adds	r2, r3, #1
 810bbfa:	687b      	ldr	r3, [r7, #4]
 810bbfc:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Now we need to search through the active ARP list for the IP address
       to see if there is a matching entry.  */

    /* Calculate the hash index for the sender IP address.  */
    index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 810bbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bc00:	0a1a      	lsrs	r2, r3, #8
 810bc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bc04:	4413      	add	r3, r2
 810bc06:	f003 031f 	and.w	r3, r3, #31
 810bc0a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Pickup the first ARP entry.  */
    arp_ptr = NX_NULL;
 810bc0c:	2300      	movs	r3, #0
 810bc0e:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Ignore anything from any ARP packet with a zero sender IP address. */
    if (sender_ip_address != 0)
 810bc10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bc12:	2b00      	cmp	r3, #0
 810bc14:	d03c      	beq.n	810bc90 <_nx_arp_packet_receive+0x3c6>
    {
        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ROUTE_TABLE_MASK);
 810bc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bc18:	0a1a      	lsrs	r2, r3, #8
 810bc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bc1c:	4413      	add	r3, r2
 810bc1e:	f003 031f 	and.w	r3, r3, #31
 810bc22:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Pickup the first ARP entry.  */
        arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 810bc24:	687a      	ldr	r2, [r7, #4]
 810bc26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810bc28:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 810bc2c:	009b      	lsls	r3, r3, #2
 810bc2e:	4413      	add	r3, r2
 810bc30:	685b      	ldr	r3, [r3, #4]
 810bc32:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    /* Loop to look for an ARP match.  */
    while (arp_ptr)
 810bc34:	e02c      	b.n	810bc90 <_nx_arp_packet_receive+0x3c6>
    {

        /* Check for an IP match.  */
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 810bc36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bc38:	6a1b      	ldr	r3, [r3, #32]
 810bc3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810bc3c:	429a      	cmp	r2, r3
 810bc3e:	d117      	bne.n	810bc70 <_nx_arp_packet_receive+0x3a6>
                }
            }
#endif /* NX_ENABLE_ARP_MAC_CHANGE_NOTIFICATION */

            /* No need to update the static ARP entry. */
            if (arp_ptr -> nx_arp_route_static)
 810bc40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bc42:	681b      	ldr	r3, [r3, #0]
 810bc44:	2b00      	cmp	r3, #0
 810bc46:	d127      	bne.n	810bc98 <_nx_arp_packet_receive+0x3ce>
            {
                break;
            }

            /* Save the physical address found in this ARP response.  */
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 810bc48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bc4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810bc4c:	625a      	str	r2, [r3, #36]	@ 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 810bc4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bc50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810bc52:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Set the update rate to the expiration rate since we now have an ARP
               response.  */
            arp_ptr -> nx_arp_entry_next_update =  NX_ARP_EXPIRATION_RATE;
 810bc54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bc56:	2200      	movs	r2, #0
 810bc58:	605a      	str	r2, [r3, #4]

            /* Reset the retry counter for this ARP entry.  */
            arp_ptr -> nx_arp_retries =  0;
 810bc5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bc5c:	2200      	movs	r2, #0
 810bc5e:	609a      	str	r2, [r3, #8]

            /* Set the interface attached to this packet. */
            arp_ptr -> nx_arp_ip_interface = interface_ptr;
 810bc60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bc62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810bc64:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Call queue send function to send the packet queued up.  */
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 810bc66:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810bc68:	6878      	ldr	r0, [r7, #4]
 810bc6a:	f000 fa2b 	bl	810c0c4 <_nx_arp_queue_send>

            /* Yes, we found a match.  Get out of the loop!  */
            break;
 810bc6e:	e014      	b.n	810bc9a <_nx_arp_packet_receive+0x3d0>
        }

        /* Move to the next active ARP entry.  */
        arp_ptr =  arp_ptr -> nx_arp_active_next;
 810bc70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bc72:	695b      	ldr	r3, [r3, #20]
 810bc74:	647b      	str	r3, [r7, #68]	@ 0x44

        /* Determine if we are at the end of the ARP list.  */
        if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 810bc76:	687a      	ldr	r2, [r7, #4]
 810bc78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810bc7a:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 810bc7e:	009b      	lsls	r3, r3, #2
 810bc80:	4413      	add	r3, r2
 810bc82:	685b      	ldr	r3, [r3, #4]
 810bc84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810bc86:	429a      	cmp	r2, r3
 810bc88:	d102      	bne.n	810bc90 <_nx_arp_packet_receive+0x3c6>
        {

            /* Clear the ARP pointer.  */
            arp_ptr =  NX_NULL;
 810bc8a:	2300      	movs	r3, #0
 810bc8c:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 810bc8e:	e004      	b.n	810bc9a <_nx_arp_packet_receive+0x3d0>
    while (arp_ptr)
 810bc90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bc92:	2b00      	cmp	r3, #0
 810bc94:	d1cf      	bne.n	810bc36 <_nx_arp_packet_receive+0x36c>
 810bc96:	e000      	b.n	810bc9a <_nx_arp_packet_receive+0x3d0>
                break;
 810bc98:	bf00      	nop
        }
    }

    /* Determine if we have a packet to release. */
    if (consumed == NX_FALSE)
 810bc9a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 810bc9e:	2b00      	cmp	r3, #0
 810bca0:	d102      	bne.n	810bca8 <_nx_arp_packet_receive+0x3de>
    {
        _nx_packet_release(packet_ptr);
 810bca2:	6838      	ldr	r0, [r7, #0]
 810bca4:	f002 ffe8 	bl	810ec78 <_nx_packet_release>
    }

#ifndef NX_DISABLE_ARP_AUTO_ENTRY

    /* Determine if anything was found.  Ignore ARP messages with a zero IP sender address.   */
    if ((arp_ptr == NX_NULL) && (sender_ip_address != 0))
 810bca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bcaa:	2b00      	cmp	r3, #0
 810bcac:	d134      	bne.n	810bd18 <_nx_arp_packet_receive+0x44e>
 810bcae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bcb0:	2b00      	cmp	r3, #0
 810bcb2:	d031      	beq.n	810bd18 <_nx_arp_packet_receive+0x44e>
    {

        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 810bcb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bcb6:	0a1a      	lsrs	r2, r3, #8
 810bcb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bcba:	4413      	add	r3, r2
 810bcbc:	f003 031f 	and.w	r3, r3, #31
 810bcc0:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Allocate a new ARP entry in advance of the need to send to the IP
           address.  */
        if (((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)) == NX_SUCCESS)
 810bcc2:	687b      	ldr	r3, [r7, #4]
 810bcc4:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	@ 0x6e8
 810bcc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 810bcca:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 810bcce:	0092      	lsls	r2, r2, #2
 810bcd0:	6879      	ldr	r1, [r7, #4]
 810bcd2:	440a      	add	r2, r1
 810bcd4:	1d11      	adds	r1, r2, #4
 810bcd6:	2200      	movs	r2, #0
 810bcd8:	6878      	ldr	r0, [r7, #4]
 810bcda:	4798      	blx	r3
 810bcdc:	4603      	mov	r3, r0
 810bcde:	2b00      	cmp	r3, #0
 810bce0:	d11a      	bne.n	810bd18 <_nx_arp_packet_receive+0x44e>
        {

            /* Setup a pointer to the new ARP entry.  */
            arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 810bce2:	687a      	ldr	r2, [r7, #4]
 810bce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810bce6:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 810bcea:	009b      	lsls	r3, r3, #2
 810bcec:	4413      	add	r3, r2
 810bcee:	685b      	ldr	r3, [r3, #4]
 810bcf0:	699b      	ldr	r3, [r3, #24]
 810bcf2:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Setup the IP address and clear the physical mapping.  */
            arp_ptr -> nx_arp_ip_address =            sender_ip_address;
 810bcf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bcf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810bcf8:	621a      	str	r2, [r3, #32]
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 810bcfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bcfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810bcfe:	625a      	str	r2, [r3, #36]	@ 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 810bd00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bd02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810bd04:	629a      	str	r2, [r3, #40]	@ 0x28
            arp_ptr -> nx_arp_entry_next_update =     NX_ARP_EXPIRATION_RATE;
 810bd06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bd08:	2200      	movs	r2, #0
 810bd0a:	605a      	str	r2, [r3, #4]
            arp_ptr -> nx_arp_retries =               0;
 810bd0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bd0e:	2200      	movs	r2, #0
 810bd10:	609a      	str	r2, [r3, #8]
            arp_ptr -> nx_arp_ip_interface         =  interface_ptr;
 810bd12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810bd14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810bd16:	62da      	str	r2, [r3, #44]	@ 0x2c
        }
    }
#endif /* NX_DISABLE_ARP_AUTO_ENTRY */
}
 810bd18:	3754      	adds	r7, #84	@ 0x54
 810bd1a:	46bd      	mov	sp, r7
 810bd1c:	bd90      	pop	{r4, r7, pc}
	...

0810bd20 <_nx_arp_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_send(NX_IP *ip_ptr, ULONG destination_ip, NX_INTERFACE *nx_interface)
{
 810bd20:	b580      	push	{r7, lr}
 810bd22:	b08e      	sub	sp, #56	@ 0x38
 810bd24:	af00      	add	r7, sp, #0
 810bd26:	60f8      	str	r0, [r7, #12]
 810bd28:	60b9      	str	r1, [r7, #8]
 810bd2a:	607a      	str	r2, [r7, #4]
NX_PACKET   *request_ptr;
ULONG       *message_ptr;
NX_IP_DRIVER driver_request;

    /* nx_interface must not be NX_NULL. */
    NX_ASSERT(nx_interface != NX_NULL);
 810bd2c:	687b      	ldr	r3, [r7, #4]
 810bd2e:	2b00      	cmp	r3, #0
 810bd30:	d104      	bne.n	810bd3c <_nx_arp_packet_send+0x1c>
 810bd32:	f04f 30ff 	mov.w	r0, #4294967295
 810bd36:	f009 fdd1 	bl	81158dc <_tx_thread_sleep>
 810bd3a:	e7fa      	b.n	810bd32 <_nx_arp_packet_send+0x12>
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
 810bd3c:	68fb      	ldr	r3, [r7, #12]
 810bd3e:	f8d3 0138 	ldr.w	r0, [r3, #312]	@ 0x138
 810bd42:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 810bd46:	2300      	movs	r3, #0
 810bd48:	222c      	movs	r2, #44	@ 0x2c
 810bd4a:	f002 fbff 	bl	810e54c <_nx_packet_allocate>
 810bd4e:	4603      	mov	r3, r0
 810bd50:	2b00      	cmp	r3, #0
 810bd52:	f040 8081 	bne.w	810be58 <_nx_arp_packet_send+0x138>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Stamp the packet with the outgoing interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "request_ptr" was initialized in _nx_packet_allocate. */
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = nx_interface;
 810bd56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bd58:	687a      	ldr	r2, [r7, #4]
 810bd5a:	631a      	str	r2, [r3, #48]	@ 0x30

#ifndef NX_DISABLE_ARP_INFO
    /* Increment the ARP requests sent count.  */
    ip_ptr -> nx_ip_arp_requests_sent++;
 810bd5c:	68fb      	ldr	r3, [r7, #12]
 810bd5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810bd60:	1c5a      	adds	r2, r3, #1
 810bd62:	68fb      	ldr	r3, [r7, #12]
 810bd64:	66da      	str	r2, [r3, #108]	@ 0x6c
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_REQUEST_SEND, ip_ptr, destination_ip, request_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Build the ARP request packet.  */

    /* Setup the size of the ARP message.  */
    request_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 810bd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bd68:	221c      	movs	r2, #28
 810bd6a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Setup the prepend pointer.  */
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 810bd6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bd6e:	689a      	ldr	r2, [r3, #8]
 810bd70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bd72:	3a1c      	subs	r2, #28
 810bd74:	609a      	str	r2, [r3, #8]

    /* Setup the pointer to the message area.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)request_ptr -> nx_packet_prepend_ptr;
 810bd76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bd78:	689b      	ldr	r3, [r3, #8]
 810bd7a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Write the Hardware type into the message.  */
    *message_ptr =      (ULONG)(NX_ARP_HARDWARE_TYPE << 16) | (NX_ARP_PROTOCOL_TYPE);
 810bd7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bd7e:	f44f 3284 	mov.w	r2, #67584	@ 0x10800
 810bd82:	601a      	str	r2, [r3, #0]
    *(message_ptr + 1) =  (ULONG)(NX_ARP_HARDWARE_SIZE << 24) | (NX_ARP_PROTOCOL_SIZE << 16) |
 810bd84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bd86:	3304      	adds	r3, #4
 810bd88:	4a35      	ldr	r2, [pc, #212]	@ (810be60 <_nx_arp_packet_send+0x140>)
 810bd8a:	601a      	str	r2, [r3, #0]
        NX_ARP_OPTION_REQUEST;

    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 810bd8c:	687b      	ldr	r3, [r7, #4]
 810bd8e:	68db      	ldr	r3, [r3, #12]
 810bd90:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_physical_address_lsw >> 16);
 810bd92:	687b      	ldr	r3, [r7, #4]
 810bd94:	691b      	ldr	r3, [r3, #16]
 810bd96:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 810bd98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bd9a:	3308      	adds	r3, #8
 810bd9c:	430a      	orrs	r2, r1
 810bd9e:	601a      	str	r2, [r3, #0]
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 810bda0:	687b      	ldr	r3, [r7, #4]
 810bda2:	691b      	ldr	r3, [r3, #16]
 810bda4:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_ip_address >> 16);
 810bda6:	687b      	ldr	r3, [r7, #4]
 810bda8:	695b      	ldr	r3, [r3, #20]
 810bdaa:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 810bdac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bdae:	330c      	adds	r3, #12
 810bdb0:	430a      	orrs	r2, r1
 810bdb2:	601a      	str	r2, [r3, #0]
    *(message_ptr + 4) =  (ULONG)(nx_interface -> nx_interface_ip_address << 16);
 810bdb4:	687b      	ldr	r3, [r7, #4]
 810bdb6:	695a      	ldr	r2, [r3, #20]
 810bdb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bdba:	3310      	adds	r3, #16
 810bdbc:	0412      	lsls	r2, r2, #16
 810bdbe:	601a      	str	r2, [r3, #0]
    *(message_ptr + 5) =  (ULONG)0;
 810bdc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bdc2:	3314      	adds	r3, #20
 810bdc4:	2200      	movs	r2, #0
 810bdc6:	601a      	str	r2, [r3, #0]
    *(message_ptr + 6) =  (ULONG)destination_ip;
 810bdc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bdca:	3318      	adds	r3, #24
 810bdcc:	68ba      	ldr	r2, [r7, #8]
 810bdce:	601a      	str	r2, [r3, #0]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr));
 810bdd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bdd2:	681b      	ldr	r3, [r3, #0]
 810bdd4:	ba1a      	rev	r2, r3
 810bdd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bdd8:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 810bdda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bddc:	3304      	adds	r3, #4
 810bdde:	681a      	ldr	r2, [r3, #0]
 810bde0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bde2:	3304      	adds	r3, #4
 810bde4:	ba12      	rev	r2, r2
 810bde6:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 810bde8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bdea:	3308      	adds	r3, #8
 810bdec:	681a      	ldr	r2, [r3, #0]
 810bdee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bdf0:	3308      	adds	r3, #8
 810bdf2:	ba12      	rev	r2, r2
 810bdf4:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 810bdf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bdf8:	330c      	adds	r3, #12
 810bdfa:	681a      	ldr	r2, [r3, #0]
 810bdfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bdfe:	330c      	adds	r3, #12
 810be00:	ba12      	rev	r2, r2
 810be02:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 810be04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810be06:	3310      	adds	r3, #16
 810be08:	681a      	ldr	r2, [r3, #0]
 810be0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810be0c:	3310      	adds	r3, #16
 810be0e:	ba12      	rev	r2, r2
 810be10:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 810be12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810be14:	3314      	adds	r3, #20
 810be16:	681a      	ldr	r2, [r3, #0]
 810be18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810be1a:	3314      	adds	r3, #20
 810be1c:	ba12      	rev	r2, r2
 810be1e:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 810be20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810be22:	3318      	adds	r3, #24
 810be24:	681a      	ldr	r2, [r3, #0]
 810be26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810be28:	3318      	adds	r3, #24
 810be2a:	ba12      	rev	r2, r2
 810be2c:	601a      	str	r2, [r3, #0]

    /* Set up the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 810be2e:	68fb      	ldr	r3, [r7, #12]
 810be30:	62bb      	str	r3, [r7, #40]	@ 0x28
    driver_request.nx_ip_driver_command =               NX_LINK_ARP_SEND;
 810be32:	2305      	movs	r3, #5
 810be34:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_packet =                request_ptr;
 810be36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810be38:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 810be3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 810be3e:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 810be40:	f04f 33ff 	mov.w	r3, #4294967295
 810be44:	61fb      	str	r3, [r7, #28]
    driver_request.nx_ip_driver_interface            =  nx_interface;
 810be46:	687b      	ldr	r3, [r7, #4]
 810be48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Send the ARP request to the driver.  */
    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 810be4a:	687b      	ldr	r3, [r7, #4]
 810be4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810be4e:	f107 0210 	add.w	r2, r7, #16
 810be52:	4610      	mov	r0, r2
 810be54:	4798      	blx	r3
 810be56:	e000      	b.n	810be5a <_nx_arp_packet_send+0x13a>
                return;
 810be58:	bf00      	nop
}
 810be5a:	3738      	adds	r7, #56	@ 0x38
 810be5c:	46bd      	mov	sp, r7
 810be5e:	bd80      	pop	{r7, pc}
 810be60:	06040001 	.word	0x06040001

0810be64 <_nx_arp_periodic_update>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_periodic_update(NX_IP *ip_ptr)
{
 810be64:	b580      	push	{r7, lr}
 810be66:	b08a      	sub	sp, #40	@ 0x28
 810be68:	af00      	add	r7, sp, #0
 810be6a:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Pickup pointer to ARP dynamic list.  */
    arp_entry =  ip_ptr -> nx_ip_arp_dynamic_list;
 810be6c:	687b      	ldr	r3, [r7, #4]
 810be6e:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	@ 0x6d8
 810be72:	623b      	str	r3, [r7, #32]

    /* Loop through the active ARP entries to see if they need updating.  */
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 810be74:	2300      	movs	r3, #0
 810be76:	627b      	str	r3, [r7, #36]	@ 0x24
 810be78:	e0af      	b.n	810bfda <_nx_arp_periodic_update+0x176>
    {

        /* Check this ARP entry to see if it need updating.  */
        if (arp_entry -> nx_arp_entry_next_update)
 810be7a:	6a3b      	ldr	r3, [r7, #32]
 810be7c:	685b      	ldr	r3, [r3, #4]
 810be7e:	2b00      	cmp	r3, #0
 810be80:	f000 80a5 	beq.w	810bfce <_nx_arp_periodic_update+0x16a>
        {

            /* Decrement the next update field.  */
            arp_entry -> nx_arp_entry_next_update--;
 810be84:	6a3b      	ldr	r3, [r7, #32]
 810be86:	685b      	ldr	r3, [r3, #4]
 810be88:	1e5a      	subs	r2, r3, #1
 810be8a:	6a3b      	ldr	r3, [r7, #32]
 810be8c:	605a      	str	r2, [r3, #4]

            /* Determine if an ARP expiration is present.  */
            if (!arp_entry -> nx_arp_entry_next_update)
 810be8e:	6a3b      	ldr	r3, [r7, #32]
 810be90:	685b      	ldr	r3, [r3, #4]
 810be92:	2b00      	cmp	r3, #0
 810be94:	f040 809b 	bne.w	810bfce <_nx_arp_periodic_update+0x16a>
            {

                /* Yes, an ARP expiration is present.   */

                /* Determine if the retry counter has been exceeded.  */
                if (arp_entry -> nx_arp_retries == NX_ARP_MAXIMUM_RETRIES)
 810be98:	6a3b      	ldr	r3, [r7, #32]
 810be9a:	689b      	ldr	r3, [r3, #8]
 810be9c:	2b12      	cmp	r3, #18
 810be9e:	f040 8086 	bne.w	810bfae <_nx_arp_periodic_update+0x14a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810bea2:	f3ef 8310 	mrs	r3, PRIMASK
 810bea6:	613b      	str	r3, [r7, #16]
    return(posture);
 810bea8:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 810beaa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 810beac:	b672      	cpsid	i
    return(int_posture);
 810beae:	68fb      	ldr	r3, [r7, #12]

                    /* The number of retries has been exceeded. The entry is removed
                       from the active list and any queued packet is released.  */

                    /* Disable interrupts.  */
                    TX_DISABLE
 810beb0:	61bb      	str	r3, [r7, #24]

                    /* This ARP entry has expired, remove it from the active ARP list.  Check to make
                       sure it is still active.  */
                    if (arp_entry -> nx_arp_active_list_head)
 810beb2:	6a3b      	ldr	r3, [r7, #32]
 810beb4:	69db      	ldr	r3, [r3, #28]
 810beb6:	2b00      	cmp	r3, #0
 810beb8:	d028      	beq.n	810bf0c <_nx_arp_periodic_update+0xa8>
                    {

                        /* Determine if this is the only ARP entry on the list.  */
                        if (arp_entry == arp_entry -> nx_arp_active_next)
 810beba:	6a3b      	ldr	r3, [r7, #32]
 810bebc:	695b      	ldr	r3, [r3, #20]
 810bebe:	6a3a      	ldr	r2, [r7, #32]
 810bec0:	429a      	cmp	r2, r3
 810bec2:	d104      	bne.n	810bece <_nx_arp_periodic_update+0x6a>
                        {

                            /* Remove the entry from the list.  */
                            *(arp_entry -> nx_arp_active_list_head) =  NX_NULL;
 810bec4:	6a3b      	ldr	r3, [r7, #32]
 810bec6:	69db      	ldr	r3, [r3, #28]
 810bec8:	2200      	movs	r2, #0
 810beca:	601a      	str	r2, [r3, #0]
 810becc:	e014      	b.n	810bef8 <_nx_arp_periodic_update+0x94>
                        {

                            /* Remove the entry from a list of more than one entry.  */

                            /* Update the list head pointer.  */
                            if (*(arp_entry -> nx_arp_active_list_head) == arp_entry)
 810bece:	6a3b      	ldr	r3, [r7, #32]
 810bed0:	69db      	ldr	r3, [r3, #28]
 810bed2:	681b      	ldr	r3, [r3, #0]
 810bed4:	6a3a      	ldr	r2, [r7, #32]
 810bed6:	429a      	cmp	r2, r3
 810bed8:	d104      	bne.n	810bee4 <_nx_arp_periodic_update+0x80>
                            {
                                *(arp_entry -> nx_arp_active_list_head) =  arp_entry -> nx_arp_active_next;
 810beda:	6a3b      	ldr	r3, [r7, #32]
 810bedc:	69db      	ldr	r3, [r3, #28]
 810bede:	6a3a      	ldr	r2, [r7, #32]
 810bee0:	6952      	ldr	r2, [r2, #20]
 810bee2:	601a      	str	r2, [r3, #0]
                            }

                            /* Update the links of the adjacent ARP entries.  */
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 810bee4:	6a3b      	ldr	r3, [r7, #32]
 810bee6:	695b      	ldr	r3, [r3, #20]
                                arp_entry -> nx_arp_active_previous;
 810bee8:	6a3a      	ldr	r2, [r7, #32]
 810beea:	6992      	ldr	r2, [r2, #24]
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 810beec:	619a      	str	r2, [r3, #24]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 810beee:	6a3b      	ldr	r3, [r7, #32]
 810bef0:	699b      	ldr	r3, [r3, #24]
                                arp_entry -> nx_arp_active_next;
 810bef2:	6a3a      	ldr	r2, [r7, #32]
 810bef4:	6952      	ldr	r2, [r2, #20]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 810bef6:	615a      	str	r2, [r3, #20]
                        }

                        /* Decrease the number of active ARP entries.  */
                        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 810bef8:	687b      	ldr	r3, [r7, #4]
 810befa:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	@ 0x6dc
 810befe:	1e5a      	subs	r2, r3, #1
 810bf00:	687b      	ldr	r3, [r7, #4]
 810bf02:	f8c3 26dc 	str.w	r2, [r3, #1756]	@ 0x6dc

                        /* Clear the active head pointer.  */
                        arp_entry -> nx_arp_active_list_head =  NX_NULL;
 810bf06:	6a3b      	ldr	r3, [r7, #32]
 810bf08:	2200      	movs	r2, #0
 810bf0a:	61da      	str	r2, [r3, #28]
                    }

                    /* Determine if this is the only ARP entry on the dynamic list.  */
                    if (arp_entry != arp_entry -> nx_arp_pool_next)
 810bf0c:	6a3b      	ldr	r3, [r7, #32]
 810bf0e:	68db      	ldr	r3, [r3, #12]
 810bf10:	6a3a      	ldr	r2, [r7, #32]
 810bf12:	429a      	cmp	r2, r3
 810bf14:	d02a      	beq.n	810bf6c <_nx_arp_periodic_update+0x108>
                        /* No. Place the ARP entry at the end of the dynamic ARP pool, which is where new
                           ARP requests are allocated from.  */

                        /* Remove the entry from a list of more than one entry.  */
                        /* Update the links of the adjacent ARP dynamic pool entries.  */
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 810bf16:	6a3b      	ldr	r3, [r7, #32]
 810bf18:	68db      	ldr	r3, [r3, #12]
                            arp_entry -> nx_arp_pool_previous;
 810bf1a:	6a3a      	ldr	r2, [r7, #32]
 810bf1c:	6912      	ldr	r2, [r2, #16]
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 810bf1e:	611a      	str	r2, [r3, #16]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 810bf20:	6a3b      	ldr	r3, [r7, #32]
 810bf22:	691b      	ldr	r3, [r3, #16]
                            arp_entry -> nx_arp_pool_next;
 810bf24:	6a3a      	ldr	r2, [r7, #32]
 810bf26:	68d2      	ldr	r2, [r2, #12]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 810bf28:	60da      	str	r2, [r3, #12]

                        /* Update the list head pointer.  */
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 810bf2a:	687b      	ldr	r3, [r7, #4]
 810bf2c:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	@ 0x6d8
 810bf30:	6a3a      	ldr	r2, [r7, #32]
 810bf32:	429a      	cmp	r2, r3
 810bf34:	d104      	bne.n	810bf40 <_nx_arp_periodic_update+0xdc>
                        {
                            ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry -> nx_arp_pool_next;
 810bf36:	6a3b      	ldr	r3, [r7, #32]
 810bf38:	68da      	ldr	r2, [r3, #12]
 810bf3a:	687b      	ldr	r3, [r7, #4]
 810bf3c:	f8c3 26d8 	str.w	r2, [r3, #1752]	@ 0x6d8
                        }


                        /* Add ARP entry to the end of the list.  */
                        arp_entry -> nx_arp_pool_next =
                            ip_ptr -> nx_ip_arp_dynamic_list;
 810bf40:	687b      	ldr	r3, [r7, #4]
 810bf42:	f8d3 26d8 	ldr.w	r2, [r3, #1752]	@ 0x6d8
                        arp_entry -> nx_arp_pool_next =
 810bf46:	6a3b      	ldr	r3, [r7, #32]
 810bf48:	60da      	str	r2, [r3, #12]
                        arp_entry -> nx_arp_pool_previous =
                            (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 810bf4a:	687b      	ldr	r3, [r7, #4]
 810bf4c:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	@ 0x6d8
 810bf50:	691a      	ldr	r2, [r3, #16]
                        arp_entry -> nx_arp_pool_previous =
 810bf52:	6a3b      	ldr	r3, [r7, #32]
 810bf54:	611a      	str	r2, [r3, #16]
                        ((ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous) -> nx_arp_pool_next =
 810bf56:	687b      	ldr	r3, [r7, #4]
 810bf58:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	@ 0x6d8
 810bf5c:	691b      	ldr	r3, [r3, #16]
 810bf5e:	6a3a      	ldr	r2, [r7, #32]
 810bf60:	60da      	str	r2, [r3, #12]
                            arp_entry;
                        (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous =   arp_entry;
 810bf62:	687b      	ldr	r3, [r7, #4]
 810bf64:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	@ 0x6d8
 810bf68:	6a3a      	ldr	r2, [r7, #32]
 810bf6a:	611a      	str	r2, [r3, #16]
                    }

                    /* Pickup the queued packets head pointer.  */
                    next_packet_ptr =  arp_entry -> nx_arp_packets_waiting;
 810bf6c:	6a3b      	ldr	r3, [r7, #32]
 810bf6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810bf70:	61fb      	str	r3, [r7, #28]

                    /* Clear the queued packets head pointer.  */
                    arp_entry -> nx_arp_packets_waiting =  NX_NULL;
 810bf72:	6a3b      	ldr	r3, [r7, #32]
 810bf74:	2200      	movs	r2, #0
 810bf76:	631a      	str	r2, [r3, #48]	@ 0x30
 810bf78:	69bb      	ldr	r3, [r7, #24]
 810bf7a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810bf7c:	68bb      	ldr	r3, [r7, #8]
 810bf7e:	f383 8810 	msr	PRIMASK, r3
}
 810bf82:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Loop to remove all queued packets.  */
                    while (next_packet_ptr)
 810bf84:	e00f      	b.n	810bfa6 <_nx_arp_periodic_update+0x142>
                    {

                        /* Pickup the packet pointer at the head of the queue.  */
                        packet_ptr =  next_packet_ptr;
 810bf86:	69fb      	ldr	r3, [r7, #28]
 810bf88:	617b      	str	r3, [r7, #20]

                        /* Move to the next packet in the queue.  */
                        next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 810bf8a:	69fb      	ldr	r3, [r7, #28]
 810bf8c:	69db      	ldr	r3, [r3, #28]
 810bf8e:	61fb      	str	r3, [r7, #28]

                        /* Clear the next packet queue pointer.  */
                        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 810bf90:	697b      	ldr	r3, [r7, #20]
 810bf92:	2200      	movs	r2, #0
 810bf94:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 810bf96:	687b      	ldr	r3, [r7, #4]
 810bf98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810bf9a:	1c5a      	adds	r2, r3, #1
 810bf9c:	687b      	ldr	r3, [r7, #4]
 810bf9e:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

                        /* Release the packet that was queued for the expired ARP entry.  */
                        _nx_packet_transmit_release(packet_ptr);
 810bfa0:	6978      	ldr	r0, [r7, #20]
 810bfa2:	f002 ff1f 	bl	810ede4 <_nx_packet_transmit_release>
                    while (next_packet_ptr)
 810bfa6:	69fb      	ldr	r3, [r7, #28]
 810bfa8:	2b00      	cmp	r3, #0
 810bfaa:	d1ec      	bne.n	810bf86 <_nx_arp_periodic_update+0x122>
 810bfac:	e00f      	b.n	810bfce <_nx_arp_periodic_update+0x16a>
                {

                    /* We haven't yet had a response to this ARP request so send it again!  */

                    /* Increment the ARP retry counter.  */
                    arp_entry -> nx_arp_retries++;
 810bfae:	6a3b      	ldr	r3, [r7, #32]
 810bfb0:	689b      	ldr	r3, [r3, #8]
 810bfb2:	1c5a      	adds	r2, r3, #1
 810bfb4:	6a3b      	ldr	r3, [r7, #32]
 810bfb6:	609a      	str	r2, [r3, #8]

                    /* Setup the ARP update rate to the maximum value again.  */
                    arp_entry -> nx_arp_entry_next_update =  NX_ARP_UPDATE_RATE;
 810bfb8:	6a3b      	ldr	r3, [r7, #32]
 810bfba:	220a      	movs	r2, #10
 810bfbc:	605a      	str	r2, [r3, #4]

                    /* Send the ARP request out.  */
                    _nx_arp_packet_send(ip_ptr, arp_entry -> nx_arp_ip_address, arp_entry -> nx_arp_ip_interface);
 810bfbe:	6a3b      	ldr	r3, [r7, #32]
 810bfc0:	6a19      	ldr	r1, [r3, #32]
 810bfc2:	6a3b      	ldr	r3, [r7, #32]
 810bfc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bfc6:	461a      	mov	r2, r3
 810bfc8:	6878      	ldr	r0, [r7, #4]
 810bfca:	f7ff fea9 	bl	810bd20 <_nx_arp_packet_send>
                }
            }
        }

        /* Move to the next ARP entry.  */
        arp_entry =  arp_entry -> nx_arp_pool_next;
 810bfce:	6a3b      	ldr	r3, [r7, #32]
 810bfd0:	68db      	ldr	r3, [r3, #12]
 810bfd2:	623b      	str	r3, [r7, #32]
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 810bfd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bfd6:	3301      	adds	r3, #1
 810bfd8:	627b      	str	r3, [r7, #36]	@ 0x24
 810bfda:	687b      	ldr	r3, [r7, #4]
 810bfdc:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	@ 0x6dc
 810bfe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810bfe2:	429a      	cmp	r2, r3
 810bfe4:	f4ff af49 	bcc.w	810be7a <_nx_arp_periodic_update+0x16>
    }


    /* Reduce the defend timeout of interfaces.  */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 810bfe8:	2300      	movs	r3, #0
 810bfea:	627b      	str	r3, [r7, #36]	@ 0x24
 810bfec:	e02f      	b.n	810c04e <_nx_arp_periodic_update+0x1ea>
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_FALSE)
 810bfee:	687a      	ldr	r2, [r7, #4]
 810bff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bff2:	214c      	movs	r1, #76	@ 0x4c
 810bff4:	fb01 f303 	mul.w	r3, r1, r3
 810bff8:	4413      	add	r3, r2
 810bffa:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 810bffe:	781b      	ldrb	r3, [r3, #0]
 810c000:	2b00      	cmp	r3, #0
 810c002:	d01e      	beq.n	810c042 <_nx_arp_periodic_update+0x1de>
        {
            continue;
        }

        if (ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout == 0)
 810c004:	687a      	ldr	r2, [r7, #4]
 810c006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c008:	214c      	movs	r1, #76	@ 0x4c
 810c00a:	fb01 f303 	mul.w	r3, r1, r3
 810c00e:	4413      	add	r3, r2
 810c010:	f203 7364 	addw	r3, r3, #1892	@ 0x764
 810c014:	681b      	ldr	r3, [r3, #0]
 810c016:	2b00      	cmp	r3, #0
 810c018:	d015      	beq.n	810c046 <_nx_arp_periodic_update+0x1e2>
        {
            continue;
        }

        ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout--;
 810c01a:	687a      	ldr	r2, [r7, #4]
 810c01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c01e:	214c      	movs	r1, #76	@ 0x4c
 810c020:	fb01 f303 	mul.w	r3, r1, r3
 810c024:	4413      	add	r3, r2
 810c026:	f203 7364 	addw	r3, r3, #1892	@ 0x764
 810c02a:	681b      	ldr	r3, [r3, #0]
 810c02c:	1e5a      	subs	r2, r3, #1
 810c02e:	6879      	ldr	r1, [r7, #4]
 810c030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c032:	204c      	movs	r0, #76	@ 0x4c
 810c034:	fb00 f303 	mul.w	r3, r0, r3
 810c038:	440b      	add	r3, r1
 810c03a:	f203 7364 	addw	r3, r3, #1892	@ 0x764
 810c03e:	601a      	str	r2, [r3, #0]
 810c040:	e002      	b.n	810c048 <_nx_arp_periodic_update+0x1e4>
            continue;
 810c042:	bf00      	nop
 810c044:	e000      	b.n	810c048 <_nx_arp_periodic_update+0x1e4>
            continue;
 810c046:	bf00      	nop
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 810c048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c04a:	3301      	adds	r3, #1
 810c04c:	627b      	str	r3, [r7, #36]	@ 0x24
 810c04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c050:	2b00      	cmp	r3, #0
 810c052:	d0cc      	beq.n	810bfee <_nx_arp_periodic_update+0x18a>
    }
}
 810c054:	bf00      	nop
 810c056:	bf00      	nop
 810c058:	3728      	adds	r7, #40	@ 0x28
 810c05a:	46bd      	mov	sp, r7
 810c05c:	bd80      	pop	{r7, pc}

0810c05e <_nx_arp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_process(NX_IP *ip_ptr)
{
 810c05e:	b580      	push	{r7, lr}
 810c060:	b088      	sub	sp, #32
 810c062:	af00      	add	r7, sp, #0
 810c064:	6078      	str	r0, [r7, #4]

NX_PACKET *packet_ptr;


    /* Loop to process all ARP deferred packet requests.  */
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 810c066:	e023      	b.n	810c0b0 <_nx_arp_queue_process+0x52>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810c068:	f3ef 8310 	mrs	r3, PRIMASK
 810c06c:	617b      	str	r3, [r7, #20]
    return(posture);
 810c06e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 810c070:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 810c072:	b672      	cpsid	i
    return(int_posture);
 810c074:	693b      	ldr	r3, [r7, #16]
    {

        /* Remove the first packet and process it!  */

        /* Disable interrupts.  */
        TX_DISABLE
 810c076:	61fb      	str	r3, [r7, #28]

        /* Pickup the first packet.  */
        packet_ptr =  ip_ptr -> nx_ip_arp_deferred_received_packet_head;
 810c078:	687b      	ldr	r3, [r7, #4]
 810c07a:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	@ 0x6e0
 810c07e:	61bb      	str	r3, [r7, #24]

        /* Move the head pointer to the next packet.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 810c080:	69bb      	ldr	r3, [r7, #24]
 810c082:	69da      	ldr	r2, [r3, #28]
 810c084:	687b      	ldr	r3, [r7, #4]
 810c086:	f8c3 26e0 	str.w	r2, [r3, #1760]	@ 0x6e0

        /* Check for end of ARP deferred processing queue.  */
        if (ip_ptr -> nx_ip_arp_deferred_received_packet_head == NX_NULL)
 810c08a:	687b      	ldr	r3, [r7, #4]
 810c08c:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	@ 0x6e0
 810c090:	2b00      	cmp	r3, #0
 810c092:	d103      	bne.n	810c09c <_nx_arp_queue_process+0x3e>
        {

            /* Yes, the ARP deferred queue is empty.  Set the tail pointer to NULL.  */
            ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  NX_NULL;
 810c094:	687b      	ldr	r3, [r7, #4]
 810c096:	2200      	movs	r2, #0
 810c098:	f8c3 26e4 	str.w	r2, [r3, #1764]	@ 0x6e4
 810c09c:	69fb      	ldr	r3, [r7, #28]
 810c09e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810c0a0:	68fb      	ldr	r3, [r7, #12]
 810c0a2:	f383 8810 	msr	PRIMASK, r3
}
 810c0a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual ARP packet receive function.  */
        _nx_arp_packet_receive(ip_ptr, packet_ptr);
 810c0a8:	69b9      	ldr	r1, [r7, #24]
 810c0aa:	6878      	ldr	r0, [r7, #4]
 810c0ac:	f7ff fc0d 	bl	810b8ca <_nx_arp_packet_receive>
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 810c0b0:	687b      	ldr	r3, [r7, #4]
 810c0b2:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	@ 0x6e0
 810c0b6:	2b00      	cmp	r3, #0
 810c0b8:	d1d6      	bne.n	810c068 <_nx_arp_queue_process+0xa>
    }
}
 810c0ba:	bf00      	nop
 810c0bc:	bf00      	nop
 810c0be:	3720      	adds	r7, #32
 810c0c0:	46bd      	mov	sp, r7
 810c0c2:	bd80      	pop	{r7, pc}

0810c0c4 <_nx_arp_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_send(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 810c0c4:	b580      	push	{r7, lr}
 810c0c6:	b090      	sub	sp, #64	@ 0x40
 810c0c8:	af00      	add	r7, sp, #0
 810c0ca:	6078      	str	r0, [r7, #4]
 810c0cc:	6039      	str	r1, [r7, #0]
NX_PACKET   *queued_list_head;
NX_PACKET   *packet_ptr;
NX_IP_DRIVER driver_request;

    /* Initialize the queued list head to NULL.  */
    queued_list_head =  NX_NULL;
 810c0ce:	2300      	movs	r3, #0
 810c0d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810c0d2:	f3ef 8310 	mrs	r3, PRIMASK
 810c0d6:	633b      	str	r3, [r7, #48]	@ 0x30
    return(posture);
 810c0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    int_posture = __get_interrupt_posture();
 810c0da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 810c0dc:	b672      	cpsid	i
    return(int_posture);
 810c0de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Determine if this ARP entry has a packet queued up for sending.  */

    /* Disable interrupts before checking.  */
    TX_DISABLE
 810c0e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Look at the ARP packet queue pointer.  */
    if (arp_ptr -> nx_arp_packets_waiting)
 810c0e2:	683b      	ldr	r3, [r7, #0]
 810c0e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c0e6:	2b00      	cmp	r3, #0
 810c0e8:	d005      	beq.n	810c0f6 <_nx_arp_queue_send+0x32>
    {

        /* Pickup the packet pointer and clear the ARP queue pointer.  */
        queued_list_head =  arp_ptr -> nx_arp_packets_waiting;
 810c0ea:	683b      	ldr	r3, [r7, #0]
 810c0ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 810c0f0:	683b      	ldr	r3, [r7, #0]
 810c0f2:	2200      	movs	r2, #0
 810c0f4:	631a      	str	r2, [r3, #48]	@ 0x30
 810c0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c0f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810c0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c0fc:	f383 8810 	msr	PRIMASK, r3
}
 810c100:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Are there any packets queued to send?  */
    while (queued_list_head)
 810c102:	e04c      	b.n	810c19e <_nx_arp_queue_send+0xda>
    {

        /* Pickup the first entry on the list.  */
        packet_ptr =  queued_list_head;
 810c104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c106:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Move to the next entry on the ARP packet queue.  */
        queued_list_head =  queued_list_head -> nx_packet_queue_next;
 810c108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c10a:	69db      	ldr	r3, [r3, #28]
 810c10c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Clear the packet's queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 810c10e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c110:	2200      	movs	r2, #0
 810c112:	61da      	str	r2, [r3, #28]

        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = arp_ptr -> nx_arp_ip_interface;
 810c114:	683b      	ldr	r3, [r7, #0]
 810c116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810c118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c11a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Build the driver request packet.  */
        driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 810c11c:	683b      	ldr	r3, [r7, #0]
 810c11e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c120:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 810c122:	683b      	ldr	r3, [r7, #0]
 810c124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c126:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_ptr                  =  ip_ptr;
 810c128:	687b      	ldr	r3, [r7, #4]
 810c12a:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command              =  NX_LINK_PACKET_SEND;
 810c12c:	2300      	movs	r3, #0
 810c12e:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet               =  packet_ptr;
 810c130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c132:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 810c134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c138:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 810c13a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c13c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810c13e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c144:	429a      	cmp	r2, r3
 810c146:	d915      	bls.n	810c174 <_nx_arp_queue_send+0xb0>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Fragmentation is needed, call the fragment routine if available. */
            if (ip_ptr -> nx_ip_fragment_processing)
 810c148:	687b      	ldr	r3, [r7, #4]
 810c14a:	f8d3 329c 	ldr.w	r3, [r3, #668]	@ 0x29c
 810c14e:	2b00      	cmp	r3, #0
 810c150:	d007      	beq.n	810c162 <_nx_arp_queue_send+0x9e>
            {

                /* Call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 810c152:	687b      	ldr	r3, [r7, #4]
 810c154:	f8d3 329c 	ldr.w	r3, [r3, #668]	@ 0x29c
 810c158:	f107 0208 	add.w	r2, r7, #8
 810c15c:	4610      	mov	r0, r2
 810c15e:	4798      	blx	r3
 810c160:	e01d      	b.n	810c19e <_nx_arp_queue_send+0xda>
#endif /* NX_DISABLE_FRAGMENTATION */

#ifndef NX_DISABLE_IP_INFO

                /* Increment the IP send packets dropped count.  */
                ip_ptr -> nx_ip_send_packets_dropped++;
 810c162:	687b      	ldr	r3, [r7, #4]
 810c164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810c166:	1c5a      	adds	r2, r3, #1
 810c168:	687b      	ldr	r3, [r7, #4]
 810c16a:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
 810c16c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 810c16e:	f002 fe39 	bl	810ede4 <_nx_packet_transmit_release>
 810c172:	e014      	b.n	810c19e <_nx_arp_queue_send+0xda>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 810c174:	687b      	ldr	r3, [r7, #4]
 810c176:	695b      	ldr	r3, [r3, #20]
 810c178:	1c5a      	adds	r2, r3, #1
 810c17a:	687b      	ldr	r3, [r7, #4]
 810c17c:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 810c17e:	687b      	ldr	r3, [r7, #4]
 810c180:	699a      	ldr	r2, [r3, #24]
 810c182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c186:	4413      	add	r3, r2
 810c188:	f1a3 0214 	sub.w	r2, r3, #20
 810c18c:	687b      	ldr	r3, [r7, #4]
 810c18e:	619a      	str	r2, [r3, #24]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_PACKET_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Send the queued IP packet out on the network via the attached driver.  */
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 810c190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810c196:	f107 0208 	add.w	r2, r7, #8
 810c19a:	4610      	mov	r0, r2
 810c19c:	4798      	blx	r3
    while (queued_list_head)
 810c19e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c1a0:	2b00      	cmp	r3, #0
 810c1a2:	d1af      	bne.n	810c104 <_nx_arp_queue_send+0x40>
        }
    }
}
 810c1a4:	bf00      	nop
 810c1a6:	bf00      	nop
 810c1a8:	3740      	adds	r7, #64	@ 0x40
 810c1aa:	46bd      	mov	sp, r7
 810c1ac:	bd80      	pop	{r7, pc}
	...

0810c1b0 <_nx_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_icmp_enable(NX_IP *ip_ptr)
{
 810c1b0:	b480      	push	{r7}
 810c1b2:	b083      	sub	sp, #12
 810c1b4:	af00      	add	r7, sp, #0
 810c1b6:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ICMP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_ICMP_EVENTS, 0, 0);

    /* Setup the ICMP packet queue processing routine.  */
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 810c1b8:	687b      	ldr	r3, [r7, #4]
 810c1ba:	4a09      	ldr	r2, [pc, #36]	@ (810c1e0 <_nx_icmp_enable+0x30>)
 810c1bc:	f8c3 2370 	str.w	r2, [r3, #880]	@ 0x370

    /* Setup the ICMP packet receiving routine, thereby enabling ICMP traffic.  */
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 810c1c0:	687b      	ldr	r3, [r7, #4]
 810c1c2:	4a08      	ldr	r2, [pc, #32]	@ (810c1e4 <_nx_icmp_enable+0x34>)
 810c1c4:	f8c3 236c 	str.w	r2, [r3, #876]	@ 0x36c

    /* Setup the ICMPv4 packet process routine */
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 810c1c8:	687b      	ldr	r3, [r7, #4]
 810c1ca:	4a07      	ldr	r2, [pc, #28]	@ (810c1e8 <_nx_icmp_enable+0x38>)
 810c1cc:	f8c3 2374 	str.w	r2, [r3, #884]	@ 0x374

    /* Return a successful status!  */
    return(NX_SUCCESS);
 810c1d0:	2300      	movs	r3, #0
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 810c1d2:	4618      	mov	r0, r3
 810c1d4:	370c      	adds	r7, #12
 810c1d6:	46bd      	mov	sp, r7
 810c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c1dc:	4770      	bx	lr
 810c1de:	bf00      	nop
 810c1e0:	0810c2e9 	.word	0x0810c2e9
 810c1e4:	0810c229 	.word	0x0810c229
 810c1e8:	0810c347 	.word	0x0810c347

0810c1ec <_nx_icmp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 810c1ec:	b580      	push	{r7, lr}
 810c1ee:	b082      	sub	sp, #8
 810c1f0:	af00      	add	r7, sp, #0
 810c1f2:	6078      	str	r0, [r7, #4]
 810c1f4:	6039      	str	r1, [r7, #0]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* FEATURE_NX_IPV6 not defined */
    if (ip_ptr -> nx_ip_icmpv4_packet_process)
 810c1f6:	687b      	ldr	r3, [r7, #4]
 810c1f8:	f8d3 3374 	ldr.w	r3, [r3, #884]	@ 0x374
 810c1fc:	2b00      	cmp	r3, #0
 810c1fe:	d006      	beq.n	810c20e <_nx_icmp_packet_process+0x22>
    {
        ip_ptr -> nx_ip_icmpv4_packet_process(ip_ptr, packet_ptr);
 810c200:	687b      	ldr	r3, [r7, #4]
 810c202:	f8d3 3374 	ldr.w	r3, [r3, #884]	@ 0x374
 810c206:	6839      	ldr	r1, [r7, #0]
 810c208:	6878      	ldr	r0, [r7, #4]
 810c20a:	4798      	blx	r3
        return;
 810c20c:	e009      	b.n	810c222 <_nx_icmp_packet_process+0x36>
    }

#ifndef NX_DISABLE_ICMP_INFO
    ip_ptr -> nx_ip_icmp_invalid_packets++;
 810c20e:	687b      	ldr	r3, [r7, #4]
 810c210:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 810c214:	1c5a      	adds	r2, r3, #1
 810c216:	687b      	ldr	r3, [r7, #4]
 810c218:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
#endif /* NX_DISABLE_ICMP_INFO */

    _nx_packet_release(packet_ptr);
 810c21c:	6838      	ldr	r0, [r7, #0]
 810c21e:	f002 fd2b 	bl	810ec78 <_nx_packet_release>
}
 810c222:	3708      	adds	r7, #8
 810c224:	46bd      	mov	sp, r7
 810c226:	bd80      	pop	{r7, pc}

0810c228 <_nx_icmp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 810c228:	b580      	push	{r7, lr}
 810c22a:	b088      	sub	sp, #32
 810c22c:	af00      	add	r7, sp, #0
 810c22e:	6078      	str	r0, [r7, #4]
 810c230:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP total messages received counter.  */
    ip_ptr -> nx_ip_icmp_total_messages_received++;
 810c232:	687b      	ldr	r3, [r7, #4]
 810c234:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 810c238:	1c5a      	adds	r2, r3, #1
 810c23a:	687b      	ldr	r3, [r7, #4]
 810c23c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_ICMP_HEADER))
 810c240:	683b      	ldr	r3, [r7, #0]
 810c242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c244:	2b07      	cmp	r3, #7
 810c246:	d80a      	bhi.n	810c25e <_nx_icmp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error.  */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 810c248:	687b      	ldr	r3, [r7, #4]
 810c24a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 810c24e:	1c5a      	adds	r2, r3, #1
 810c250:	687b      	ldr	r3, [r7, #4]
 810c252:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 810c256:	6838      	ldr	r0, [r7, #0]
 810c258:	f002 fd0e 	bl	810ec78 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 810c25c:	e03c      	b.n	810c2d8 <_nx_icmp_packet_receive+0xb0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 810c25e:	f3ef 8305 	mrs	r3, IPSR
 810c262:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 810c264:	69ba      	ldr	r2, [r7, #24]
        return;
    }
#endif /* NX_ENABLE_ICMP_ADDRESS_CHECK  */

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 810c266:	4b1e      	ldr	r3, [pc, #120]	@ (810c2e0 <_nx_icmp_packet_receive+0xb8>)
 810c268:	681b      	ldr	r3, [r3, #0]
 810c26a:	4313      	orrs	r3, r2
 810c26c:	2b00      	cmp	r3, #0
 810c26e:	d106      	bne.n	810c27e <_nx_icmp_packet_receive+0x56>
 810c270:	687b      	ldr	r3, [r7, #4]
 810c272:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 810c276:	4b1b      	ldr	r3, [pc, #108]	@ (810c2e4 <_nx_icmp_packet_receive+0xbc>)
 810c278:	681b      	ldr	r3, [r3, #0]
 810c27a:	429a      	cmp	r2, r3
 810c27c:	d028      	beq.n	810c2d0 <_nx_icmp_packet_receive+0xa8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810c27e:	f3ef 8310 	mrs	r3, PRIMASK
 810c282:	617b      	str	r3, [r7, #20]
    return(posture);
 810c284:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 810c286:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 810c288:	b672      	cpsid	i
    return(int_posture);
 810c28a:	693b      	ldr	r3, [r7, #16]
        /* If system state is non-zero, we are in an ISR. If the current thread is not the IP thread,
           we need to prevent unnecessary recursion in loopback. Just place the message at the
           end of the ICMP message queue and wakeup the IP helper thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 810c28c:	61fb      	str	r3, [r7, #28]

        /* Add the packet to the ICMP message queue.  */
        if (ip_ptr -> nx_ip_icmp_queue_head)
 810c28e:	687b      	ldr	r3, [r7, #4]
 810c290:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 810c294:	2b00      	cmp	r3, #0
 810c296:	d005      	beq.n	810c2a4 <_nx_icmp_packet_receive+0x7c>
        {

            /* Link the current packet to the list head.  */
            packet_ptr -> nx_packet_queue_next =  ip_ptr -> nx_ip_icmp_queue_head;
 810c298:	687b      	ldr	r3, [r7, #4]
 810c29a:	f8d3 2378 	ldr.w	r2, [r3, #888]	@ 0x378
 810c29e:	683b      	ldr	r3, [r7, #0]
 810c2a0:	61da      	str	r2, [r3, #28]
 810c2a2:	e002      	b.n	810c2aa <_nx_icmp_packet_receive+0x82>
        }
        else
        {

            /* Empty queue, add to the head of the ICMP message queue.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 810c2a4:	683b      	ldr	r3, [r7, #0]
 810c2a6:	2200      	movs	r2, #0
 810c2a8:	61da      	str	r2, [r3, #28]
        }

        /* Update the queue head pointer.  */
        ip_ptr -> nx_ip_icmp_queue_head =  packet_ptr;
 810c2aa:	687b      	ldr	r3, [r7, #4]
 810c2ac:	683a      	ldr	r2, [r7, #0]
 810c2ae:	f8c3 2378 	str.w	r2, [r3, #888]	@ 0x378
 810c2b2:	69fb      	ldr	r3, [r7, #28]
 810c2b4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810c2b6:	68fb      	ldr	r3, [r7, #12]
 810c2b8:	f383 8810 	msr	PRIMASK, r3
}
 810c2bc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the ICMP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ICMP_EVENT, TX_OR);
 810c2be:	687b      	ldr	r3, [r7, #4]
 810c2c0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 810c2c4:	2200      	movs	r2, #0
 810c2c6:	2104      	movs	r1, #4
 810c2c8:	4618      	mov	r0, r3
 810c2ca:	f008 f8bf 	bl	811444c <_tx_event_flags_set>
 810c2ce:	e003      	b.n	810c2d8 <_nx_icmp_packet_receive+0xb0>
    else
    {

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the ICMP processing directly.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 810c2d0:	6839      	ldr	r1, [r7, #0]
 810c2d2:	6878      	ldr	r0, [r7, #4]
 810c2d4:	f7ff ff8a 	bl	810c1ec <_nx_icmp_packet_process>
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* NX_DISABLE_IPV4 */
}
 810c2d8:	3720      	adds	r7, #32
 810c2da:	46bd      	mov	sp, r7
 810c2dc:	bd80      	pop	{r7, pc}
 810c2de:	bf00      	nop
 810c2e0:	20050088 	.word	0x20050088
 810c2e4:	20058128 	.word	0x20058128

0810c2e8 <_nx_icmp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_queue_process(NX_IP *ip_ptr)
{
 810c2e8:	b580      	push	{r7, lr}
 810c2ea:	b088      	sub	sp, #32
 810c2ec:	af00      	add	r7, sp, #0
 810c2ee:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810c2f0:	f3ef 8310 	mrs	r3, PRIMASK
 810c2f4:	60fb      	str	r3, [r7, #12]
    return(posture);
 810c2f6:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 810c2f8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 810c2fa:	b672      	cpsid	i
    return(int_posture);
 810c2fc:	68bb      	ldr	r3, [r7, #8]
NX_PACKET *queue_head;
NX_PACKET *packet_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 810c2fe:	61bb      	str	r3, [r7, #24]

    /* Remove the ICMP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_icmp_queue_head;
 810c300:	687b      	ldr	r3, [r7, #4]
 810c302:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 810c306:	61fb      	str	r3, [r7, #28]
    ip_ptr -> nx_ip_icmp_queue_head =  NX_NULL;
 810c308:	687b      	ldr	r3, [r7, #4]
 810c30a:	2200      	movs	r2, #0
 810c30c:	f8c3 2378 	str.w	r2, [r3, #888]	@ 0x378
 810c310:	69bb      	ldr	r3, [r7, #24]
 810c312:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810c314:	693b      	ldr	r3, [r7, #16]
 810c316:	f383 8810 	msr	PRIMASK, r3
}
 810c31a:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire ICMP message queue and process packets
       one by one.  */
    while (queue_head)
 810c31c:	e00b      	b.n	810c336 <_nx_icmp_queue_process+0x4e>
    {

        /* Pickup the first queued ICMP message and remove it from the
           ICMP queue.  */
        packet_ptr =  queue_head;
 810c31e:	69fb      	ldr	r3, [r7, #28]
 810c320:	617b      	str	r3, [r7, #20]
        queue_head =  queue_head -> nx_packet_queue_next;
 810c322:	69fb      	ldr	r3, [r7, #28]
 810c324:	69db      	ldr	r3, [r3, #28]
 810c326:	61fb      	str	r3, [r7, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 810c328:	697b      	ldr	r3, [r7, #20]
 810c32a:	2200      	movs	r2, #0
 810c32c:	61da      	str	r2, [r3, #28]

        /* Process the packet.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 810c32e:	6979      	ldr	r1, [r7, #20]
 810c330:	6878      	ldr	r0, [r7, #4]
 810c332:	f7ff ff5b 	bl	810c1ec <_nx_icmp_packet_process>
    while (queue_head)
 810c336:	69fb      	ldr	r3, [r7, #28]
 810c338:	2b00      	cmp	r3, #0
 810c33a:	d1f0      	bne.n	810c31e <_nx_icmp_queue_process+0x36>
    }
}
 810c33c:	bf00      	nop
 810c33e:	bf00      	nop
 810c340:	3720      	adds	r7, #32
 810c342:	46bd      	mov	sp, r7
 810c344:	bd80      	pop	{r7, pc}

0810c346 <_nx_icmpv4_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 810c346:	b580      	push	{r7, lr}
 810c348:	b086      	sub	sp, #24
 810c34a:	af02      	add	r7, sp, #8
 810c34c:	6078      	str	r0, [r7, #4]
 810c34e:	6039      	str	r1, [r7, #0]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 810c350:	683b      	ldr	r3, [r7, #0]
 810c352:	689b      	ldr	r3, [r3, #8]
 810c354:	60fb      	str	r3, [r7, #12]
#endif /* defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Calculate the ICMP message checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
                                            (UINT)packet_ptr -> nx_packet_length,
 810c356:	683b      	ldr	r3, [r7, #0]
 810c358:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 810c35a:	2300      	movs	r3, #0
 810c35c:	9300      	str	r3, [sp, #0]
 810c35e:	2300      	movs	r3, #0
 810c360:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 810c364:	6838      	ldr	r0, [r7, #0]
 810c366:	f000 fae8 	bl	810c93a <_nx_ip_checksum_compute>
 810c36a:	4603      	mov	r3, r0
 810c36c:	817b      	strh	r3, [r7, #10]
                                            /* ICMPv4 checksum does not include
                                               src/dest addresses */
                                            NX_NULL, NX_NULL);

        checksum =  ((USHORT) ~checksum) & NX_LOWER_16_MASK;
 810c36e:	897b      	ldrh	r3, [r7, #10]
 810c370:	43db      	mvns	r3, r3
 810c372:	817b      	strh	r3, [r7, #10]

        /* Determine if the checksum is valid.  */
        if (checksum)
 810c374:	897b      	ldrh	r3, [r7, #10]
 810c376:	2b00      	cmp	r3, #0
 810c378:	d011      	beq.n	810c39e <_nx_icmpv4_packet_process+0x58>
        {

#ifndef NX_DISABLE_ICMP_INFO

            /* Increment the ICMP invalid packet error.  */
            ip_ptr -> nx_ip_icmp_invalid_packets++;
 810c37a:	687b      	ldr	r3, [r7, #4]
 810c37c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 810c380:	1c5a      	adds	r2, r3, #1
 810c382:	687b      	ldr	r3, [r7, #4]
 810c384:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec

            /* Increment the ICMP checksum error count.  */
            ip_ptr -> nx_ip_icmp_checksum_errors++;
 810c388:	687b      	ldr	r3, [r7, #4]
 810c38a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810c38e:	1c5a      	adds	r2, r3, #1
 810c390:	687b      	ldr	r3, [r7, #4]
 810c392:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
#endif

            /* Nope, the checksum is invalid.  Toss this ICMP packet out.  */
            _nx_packet_release(packet_ptr);
 810c396:	6838      	ldr	r0, [r7, #0]
 810c398:	f002 fc6e 	bl	810ec78 <_nx_packet_release>
            return;
 810c39c:	e01b      	b.n	810c3d6 <_nx_icmpv4_packet_process+0x90>
        }
    }

    /* Determine the message type and call the appropriate handler.  */
    if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REPLY_TYPE)
 810c39e:	68fb      	ldr	r3, [r7, #12]
 810c3a0:	781b      	ldrb	r3, [r3, #0]
 810c3a2:	2b00      	cmp	r3, #0
 810c3a4:	d104      	bne.n	810c3b0 <_nx_icmpv4_packet_process+0x6a>
    {
        _nx_icmpv4_process_echo_reply(ip_ptr, packet_ptr);
 810c3a6:	6839      	ldr	r1, [r7, #0]
 810c3a8:	6878      	ldr	r0, [r7, #4]
 810c3aa:	f000 f817 	bl	810c3dc <_nx_icmpv4_process_echo_reply>
 810c3ae:	e012      	b.n	810c3d6 <_nx_icmpv4_packet_process+0x90>
    }
    else if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REQUEST_TYPE)
 810c3b0:	68fb      	ldr	r3, [r7, #12]
 810c3b2:	781b      	ldrb	r3, [r3, #0]
 810c3b4:	2b08      	cmp	r3, #8
 810c3b6:	d104      	bne.n	810c3c2 <_nx_icmpv4_packet_process+0x7c>
    {
        _nx_icmpv4_process_echo_request(ip_ptr, packet_ptr);
 810c3b8:	6839      	ldr	r1, [r7, #0]
 810c3ba:	6878      	ldr	r0, [r7, #4]
 810c3bc:	f000 f8cc 	bl	810c558 <_nx_icmpv4_process_echo_request>
 810c3c0:	e009      	b.n	810c3d6 <_nx_icmpv4_packet_process+0x90>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP unhandled message count.  */
        ip_ptr -> nx_ip_icmp_unhandled_messages++;
 810c3c2:	687b      	ldr	r3, [r7, #4]
 810c3c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810c3c8:	1c5a      	adds	r2, r3, #1
 810c3ca:	687b      	ldr	r3, [r7, #4]
 810c3cc:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);
#endif /* TX_ENABLE_EVENT_TRACE  */

        /* Unhandled ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
 810c3d0:	6838      	ldr	r0, [r7, #0]
 810c3d2:	f002 fc51 	bl	810ec78 <_nx_packet_release>
    }
}
 810c3d6:	3710      	adds	r7, #16
 810c3d8:	46bd      	mov	sp, r7
 810c3da:	bd80      	pop	{r7, pc}

0810c3dc <_nx_icmpv4_process_echo_reply>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_reply(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 810c3dc:	b580      	push	{r7, lr}
 810c3de:	b090      	sub	sp, #64	@ 0x40
 810c3e0:	af00      	add	r7, sp, #0
 810c3e2:	6078      	str	r0, [r7, #4]
 810c3e4:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    echo_ptr =  (NX_ICMPV4_ECHO *)packet_ptr -> nx_packet_prepend_ptr;
 810c3e6:	683b      	ldr	r3, [r7, #0]
 810c3e8:	689b      	ldr	r3, [r3, #8]
 810c3ea:	637b      	str	r3, [r7, #52]	@ 0x34

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP responses received count.  */
    ip_ptr -> nx_ip_ping_responses_received++;
 810c3ec:	687b      	ldr	r3, [r7, #4]
 810c3ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 810c3f2:	1c5a      	adds	r2, r3, #1
 810c3f4:	687b      	ldr	r3, [r7, #4]
 810c3f6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
#endif

    /* Pickup sequence number.  */
    sequence_num = echo_ptr -> nx_icmpv4_echo_sequence_num;
 810c3fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c3fc:	88db      	ldrh	r3, [r3, #6]
 810c3fe:	867b      	strh	r3, [r7, #50]	@ 0x32

    /* Convert to host byte order, if little endian taget. */
    NX_CHANGE_USHORT_ENDIAN(sequence_num);
 810c400:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 810c402:	ba5b      	rev16	r3, r3
 810c404:	867b      	strh	r3, [r7, #50]	@ 0x32
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810c406:	f3ef 8310 	mrs	r3, PRIMASK
 810c40a:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 810c40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 810c40e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 810c410:	b672      	cpsid	i
    return(int_posture);
 810c412:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts.  */
    TX_DISABLE
 810c414:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Pickup the head pointer and the suspended count.  */
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
 810c416:	687b      	ldr	r3, [r7, #4]
 810c418:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 810c41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;
 810c41e:	687b      	ldr	r3, [r7, #4]
 810c420:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 810c424:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 810c426:	4b4b      	ldr	r3, [pc, #300]	@ (810c554 <_nx_icmpv4_process_echo_reply+0x178>)
 810c428:	681b      	ldr	r3, [r3, #0]
 810c42a:	3301      	adds	r3, #1
 810c42c:	4a49      	ldr	r2, [pc, #292]	@ (810c554 <_nx_icmpv4_process_echo_reply+0x178>)
 810c42e:	6013      	str	r3, [r2, #0]
 810c430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c432:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810c434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c436:	f383 8810 	msr	PRIMASK, r3
}
 810c43a:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Search through the suspended threads waiting for a ECHO (ping) response
       in an attempt to find a matching sequence number.  */
    while (suspended--)
 810c43c:	e05e      	b.n	810c4fc <_nx_icmpv4_process_echo_reply+0x120>
    {

        /* Determine if the sequence number matches a suspended thread.  */
        if ((USHORT)(thread_ptr ->  tx_thread_suspend_info) == sequence_num)
 810c43e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c440:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810c442:	b29b      	uxth	r3, r3
 810c444:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 810c446:	429a      	cmp	r2, r3
 810c448:	d155      	bne.n	810c4f6 <_nx_icmpv4_process_echo_reply+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810c44a:	f3ef 8310 	mrs	r3, PRIMASK
 810c44e:	61fb      	str	r3, [r7, #28]
    return(posture);
 810c450:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 810c452:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 810c454:	b672      	cpsid	i
    return(int_posture);
 810c456:	69bb      	ldr	r3, [r7, #24]
        {

            /* Disable interrupts.  */
            TX_DISABLE
 810c458:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 810c45a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c45c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810c45e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810c460:	429a      	cmp	r2, r3
 810c462:	d104      	bne.n	810c46e <_nx_icmpv4_process_echo_reply+0x92>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                ip_ptr -> nx_ip_icmp_ping_suspension_list =  NX_NULL;
 810c464:	687b      	ldr	r3, [r7, #4]
 810c466:	2200      	movs	r2, #0
 810c468:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
 810c46c:	e014      	b.n	810c498 <_nx_icmpv4_process_echo_reply+0xbc>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                if (ip_ptr -> nx_ip_icmp_ping_suspension_list == thread_ptr)
 810c46e:	687b      	ldr	r3, [r7, #4]
 810c470:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 810c474:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810c476:	429a      	cmp	r2, r3
 810c478:	d104      	bne.n	810c484 <_nx_icmpv4_process_echo_reply+0xa8>
                {
                    ip_ptr -> nx_ip_icmp_ping_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 810c47a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c47c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810c47e:	687b      	ldr	r3, [r7, #4]
 810c480:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
                }

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 810c484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 810c488:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810c48a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 810c48c:	675a      	str	r2, [r3, #116]	@ 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 810c48e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
                    thread_ptr -> tx_thread_suspended_next;
 810c492:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810c494:	6f12      	ldr	r2, [r2, #112]	@ 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 810c496:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            /* Decrement the suspension count.  */
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 810c498:	687b      	ldr	r3, [r7, #4]
 810c49a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 810c49e:	1e5a      	subs	r2, r3, #1
 810c4a0:	687b      	ldr	r3, [r7, #4]
 810c4a2:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 810c4a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c4a8:	2200      	movs	r2, #0
 810c4aa:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 810c4ac:	4b29      	ldr	r3, [pc, #164]	@ (810c554 <_nx_icmpv4_process_echo_reply+0x178>)
 810c4ae:	681b      	ldr	r3, [r3, #0]
 810c4b0:	3301      	adds	r3, #1
 810c4b2:	4a28      	ldr	r2, [pc, #160]	@ (810c554 <_nx_icmpv4_process_echo_reply+0x178>)
 810c4b4:	6013      	str	r3, [r2, #0]
 810c4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c4b8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810c4ba:	697b      	ldr	r3, [r7, #20]
 810c4bc:	f383 8810 	msr	PRIMASK, r3
}
 810c4c0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to remove the ICMP header that is still in front of
               the response message.  */
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV4_ECHO);
 810c4c2:	683b      	ldr	r3, [r7, #0]
 810c4c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c4c6:	f1a3 0208 	sub.w	r2, r3, #8
 810c4ca:	683b      	ldr	r3, [r7, #0]
 810c4cc:	625a      	str	r2, [r3, #36]	@ 0x24
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV4_ECHO);
 810c4ce:	683b      	ldr	r3, [r7, #0]
 810c4d0:	689b      	ldr	r3, [r3, #8]
 810c4d2:	f103 0208 	add.w	r2, r3, #8
 810c4d6:	683b      	ldr	r3, [r7, #0]
 810c4d8:	609a      	str	r2, [r3, #8]

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 810c4da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c4dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810c4de:	683a      	ldr	r2, [r7, #0]
 810c4e0:	601a      	str	r2, [r3, #0]

            /* Clear packet pointer so we don't try to release it below.  */
            packet_ptr =  NX_NULL;
 810c4e2:	2300      	movs	r3, #0
 810c4e4:	603b      	str	r3, [r7, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 810c4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c4e8:	2200      	movs	r2, #0
 810c4ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 810c4ee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 810c4f0:	f009 faae 	bl	8115a50 <_tx_thread_system_resume>

            /* Get out of the loop.  */
            break;
 810c4f4:	e007      	b.n	810c506 <_nx_icmpv4_process_echo_reply+0x12a>
        }
        else
        {
            /* Just move to the next suspended thread.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 810c4f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c4f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810c4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (suspended--)
 810c4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c4fe:	1e5a      	subs	r2, r3, #1
 810c500:	63ba      	str	r2, [r7, #56]	@ 0x38
 810c502:	2b00      	cmp	r3, #0
 810c504:	d19b      	bne.n	810c43e <_nx_icmpv4_process_echo_reply+0x62>
        }
    }

    /* Determine if no match was made and we just have to release the packet.  */
    if (packet_ptr)
 810c506:	683b      	ldr	r3, [r7, #0]
 810c508:	2b00      	cmp	r3, #0
 810c50a:	d009      	beq.n	810c520 <_nx_icmpv4_process_echo_reply+0x144>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 810c50c:	687b      	ldr	r3, [r7, #4]
 810c50e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 810c512:	1c5a      	adds	r2, r3, #1
 810c514:	687b      	ldr	r3, [r7, #4]
 810c516:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
#endif /* NX_DISABLE_ICMP_INFO */

        /* Yes, just release the packet.  */
        _nx_packet_release(packet_ptr);
 810c51a:	6838      	ldr	r0, [r7, #0]
 810c51c:	f002 fbac 	bl	810ec78 <_nx_packet_release>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810c520:	f3ef 8310 	mrs	r3, PRIMASK
 810c524:	60fb      	str	r3, [r7, #12]
    return(posture);
 810c526:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 810c528:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 810c52a:	b672      	cpsid	i
    return(int_posture);
 810c52c:	68bb      	ldr	r3, [r7, #8]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 810c52e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Release preemption disable.  */
    _tx_thread_preempt_disable--;
 810c530:	4b08      	ldr	r3, [pc, #32]	@ (810c554 <_nx_icmpv4_process_echo_reply+0x178>)
 810c532:	681b      	ldr	r3, [r3, #0]
 810c534:	3b01      	subs	r3, #1
 810c536:	4a07      	ldr	r2, [pc, #28]	@ (810c554 <_nx_icmpv4_process_echo_reply+0x178>)
 810c538:	6013      	str	r3, [r2, #0]
 810c53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c53c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810c53e:	693b      	ldr	r3, [r7, #16]
 810c540:	f383 8810 	msr	PRIMASK, r3
}
 810c544:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 810c546:	f009 fa49 	bl	81159dc <_tx_thread_system_preempt_check>
}
 810c54a:	bf00      	nop
 810c54c:	3740      	adds	r7, #64	@ 0x40
 810c54e:	46bd      	mov	sp, r7
 810c550:	bd80      	pop	{r7, pc}
 810c552:	bf00      	nop
 810c554:	200581c0 	.word	0x200581c0

0810c558 <_nx_icmpv4_process_echo_request>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_request(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 810c558:	b580      	push	{r7, lr}
 810c55a:	b08c      	sub	sp, #48	@ 0x30
 810c55c:	af04      	add	r7, sp, #16
 810c55e:	6078      	str	r0, [r7, #4]
 810c560:	6039      	str	r1, [r7, #0]
ULONG             old_m;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
ULONG             compute_checksum = 1;
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
NX_IPV4_HEADER   *ipv4_header;
ULONG             next_hop_address = NX_NULL;
 810c562:	2300      	movs	r3, #0
 810c564:	60fb      	str	r3, [r7, #12]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 810c566:	683b      	ldr	r3, [r7, #0]
 810c568:	689b      	ldr	r3, [r3, #8]
 810c56a:	61fb      	str	r3, [r7, #28]

    /* Pickup the return IP address.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 810c56c:	683b      	ldr	r3, [r7, #0]
 810c56e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c570:	61bb      	str	r3, [r7, #24]

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings received count.  */
    ip_ptr -> nx_ip_pings_received++;
 810c572:	687b      	ldr	r3, [r7, #4]
 810c574:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810c578:	1c5a      	adds	r2, r3, #1
 810c57a:	687b      	ldr	r3, [r7, #4]
 810c57c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
#endif

    /* Change the type to Echo Reply and send back the message to the caller.  */
    header_ptr -> nx_icmpv4_header_type = NX_ICMP_ECHO_REPLY_TYPE;
 810c580:	69fb      	ldr	r3, [r7, #28]
 810c582:	2200      	movs	r2, #0
 810c584:	701a      	strb	r2, [r3, #0]
           m'  - new value of a 16-bit field
           HC' = ~(C + (-m) + m')
           = ~(~HC + ~m + m') */

        /* Endian swapping logic.  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 810c586:	69fb      	ldr	r3, [r7, #28]
 810c588:	885b      	ldrh	r3, [r3, #2]
 810c58a:	ba5b      	rev16	r3, r3
 810c58c:	b29a      	uxth	r2, r3
 810c58e:	69fb      	ldr	r3, [r7, #28]
 810c590:	805a      	strh	r2, [r3, #2]

        /* Get the old checksum (HC) in header. */
        checksum = header_ptr -> nx_icmpv4_header_checksum;
 810c592:	69fb      	ldr	r3, [r7, #28]
 810c594:	885b      	ldrh	r3, [r3, #2]
 810c596:	617b      	str	r3, [r7, #20]

        /* Get the old type(m). */
        old_m = (ULONG)(NX_ICMP_ECHO_REQUEST_TYPE << 8);
 810c598:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810c59c:	613b      	str	r3, [r7, #16]

        /* Update the checksum, get the new checksum(HC'). */
        /* The m' is value of echo reply type. It is zero so can be ignored. */
        checksum = ((~checksum) & 0xFFFF) + ((~old_m) & 0xFFFF);
 810c59e:	697b      	ldr	r3, [r7, #20]
 810c5a0:	43db      	mvns	r3, r3
 810c5a2:	b29a      	uxth	r2, r3
 810c5a4:	693b      	ldr	r3, [r7, #16]
 810c5a6:	43db      	mvns	r3, r3
 810c5a8:	b29b      	uxth	r3, r3
 810c5aa:	4413      	add	r3, r2
 810c5ac:	617b      	str	r3, [r7, #20]

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 810c5ae:	697b      	ldr	r3, [r7, #20]
 810c5b0:	0c1a      	lsrs	r2, r3, #16
 810c5b2:	697b      	ldr	r3, [r7, #20]
 810c5b4:	b29b      	uxth	r3, r3
 810c5b6:	4413      	add	r3, r2
 810c5b8:	617b      	str	r3, [r7, #20]

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 810c5ba:	697b      	ldr	r3, [r7, #20]
 810c5bc:	0c1a      	lsrs	r2, r3, #16
 810c5be:	697b      	ldr	r3, [r7, #20]
 810c5c0:	b29b      	uxth	r3, r3
 810c5c2:	4413      	add	r3, r2
 810c5c4:	617b      	str	r3, [r7, #20]

        /* Store the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = (~checksum & NX_LOWER_16_MASK);
 810c5c6:	697b      	ldr	r3, [r7, #20]
 810c5c8:	b29b      	uxth	r3, r3
 810c5ca:	43db      	mvns	r3, r3
 810c5cc:	b29a      	uxth	r2, r3
 810c5ce:	69fb      	ldr	r3, [r7, #28]
 810c5d0:	805a      	strh	r2, [r3, #2]

        /* If NX_LITTLE_ENDIAN is defined, the header need to be swapped back
           for output (network byte order).  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 810c5d2:	69fb      	ldr	r3, [r7, #28]
 810c5d4:	885b      	ldrh	r3, [r3, #2]
 810c5d6:	ba5b      	rev16	r3, r3
 810c5d8:	b29a      	uxth	r2, r3
 810c5da:	69fb      	ldr	r3, [r7, #28]
 810c5dc:	805a      	strh	r2, [r3, #2]
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
    }
#endif

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 810c5de:	69bb      	ldr	r3, [r7, #24]
 810c5e0:	68d9      	ldr	r1, [r3, #12]
                      &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 810c5e2:	683b      	ldr	r3, [r7, #0]
 810c5e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 810c5e8:	f107 030c 	add.w	r3, r7, #12
 810c5ec:	6878      	ldr	r0, [r7, #4]
 810c5ee:	f001 f911 	bl	810d814 <_nx_ip_route_find>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ipv4_header -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings responded to count.  */
    ip_ptr -> nx_ip_pings_responded_to++;
 810c5f2:	687b      	ldr	r3, [r7, #4]
 810c5f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810c5f8:	1c5a      	adds	r2, r3, #1
 810c5fa:	687b      	ldr	r3, [r7, #4]
 810c5fc:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
#endif

    /* Send the ICMP packet to the IP component.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, packet_ptr, ipv4_header -> nx_ip_header_source_ip,
 810c600:	69bb      	ldr	r3, [r7, #24]
 810c602:	68da      	ldr	r2, [r3, #12]
 810c604:	68fb      	ldr	r3, [r7, #12]
 810c606:	9303      	str	r3, [sp, #12]
 810c608:	2300      	movs	r3, #0
 810c60a:	9302      	str	r3, [sp, #8]
 810c60c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 810c610:	9301      	str	r3, [sp, #4]
 810c612:	2380      	movs	r3, #128	@ 0x80
 810c614:	9300      	str	r3, [sp, #0]
 810c616:	2300      	movs	r3, #0
 810c618:	6839      	ldr	r1, [r7, #0]
 810c61a:	6878      	ldr	r0, [r7, #4]
 810c61c:	f001 f884 	bl	810d728 <_nx_ip_packet_send>
                       NX_IP_NORMAL, NX_IP_TIME_TO_LIVE, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);
}
 810c620:	bf00      	nop
 810c622:	3720      	adds	r7, #32
 810c624:	46bd      	mov	sp, r7
 810c626:	bd80      	pop	{r7, pc}

0810c628 <_nx_icmpv4_send_error_message>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv4_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 810c628:	b580      	push	{r7, lr}
 810c62a:	b094      	sub	sp, #80	@ 0x50
 810c62c:	af04      	add	r7, sp, #16
 810c62e:	60f8      	str	r0, [r7, #12]
 810c630:	60b9      	str	r1, [r7, #8]
 810c632:	607a      	str	r2, [r7, #4]
 810c634:	603b      	str	r3, [r7, #0]
NX_ICMPV4_ERROR *icmpv4_error;
NX_IPV4_HEADER  *ip_header_ptr;
UINT             ip_header_size;
UINT             bytes_to_copy, i;
ULONG            src_ip;
ULONG            next_hop_address = NX_NULL;
 810c636:	2300      	movs	r3, #0
 810c638:	613b      	str	r3, [r7, #16]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv4 error message if ICMPv4 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv4_packet_process == NX_NULL)
 810c63a:	68fb      	ldr	r3, [r7, #12]
 810c63c:	f8d3 3374 	ldr.w	r3, [r3, #884]	@ 0x374
 810c640:	2b00      	cmp	r3, #0
 810c642:	f000 8100 	beq.w	810c846 <_nx_icmpv4_send_error_message+0x21e>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(offending_packet -> nx_packet_ip_header);
 810c646:	68bb      	ldr	r3, [r7, #8]
 810c648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c64a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    src_ip = ip_header_ptr -> nx_ip_header_source_ip;
 810c64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c64e:	68db      	ldr	r3, [r3, #12]
 810c650:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get the incoming interface. */
    if_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 810c652:	68bb      	ldr	r3, [r7, #8]
 810c654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c656:	627b      	str	r3, [r7, #36]	@ 0x24

    /* An ICMP error message MUST NOT be sent as the result of receiving:
       RFC1122, Section3.2.2, Page39.  */

    /* A datagram destined to an IP broadcast or IP multicast address.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 810c658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c65a:	691b      	ldr	r3, [r3, #16]
 810c65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c660:	f000 80f3 	beq.w	810c84a <_nx_icmpv4_send_error_message+0x222>
        ((ip_header_ptr -> nx_ip_header_destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 810c664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c666:	691b      	ldr	r3, [r3, #16]
 810c668:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 810c66c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 810c670:	f000 80eb 	beq.w	810c84a <_nx_icmpv4_send_error_message+0x222>
    {
        return;
    }

    /* A datagram sent as a link-layer broadcast.  */
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 810c674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c676:	691a      	ldr	r2, [r3, #16]
 810c678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c67a:	699b      	ldr	r3, [r3, #24]
 810c67c:	401a      	ands	r2, r3
         if_ptr -> nx_interface_ip_network) &&
 810c67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c680:	69db      	ldr	r3, [r3, #28]
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 810c682:	429a      	cmp	r2, r3
 810c684:	d10b      	bne.n	810c69e <_nx_icmpv4_send_error_message+0x76>
        ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 810c686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c688:	691a      	ldr	r2, [r3, #16]
 810c68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c68c:	699b      	ldr	r3, [r3, #24]
 810c68e:	43db      	mvns	r3, r3
 810c690:	401a      	ands	r2, r3
         ~(if_ptr -> nx_interface_ip_network_mask)))
 810c692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c694:	699b      	ldr	r3, [r3, #24]
 810c696:	43db      	mvns	r3, r3
         if_ptr -> nx_interface_ip_network) &&
 810c698:	429a      	cmp	r2, r3
 810c69a:	f000 80d8 	beq.w	810c84e <_nx_icmpv4_send_error_message+0x226>
    {
        return;
    }

    /* A non-initial fragment.  */
    if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_OFFSET_MASK)
 810c69e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c6a0:	685b      	ldr	r3, [r3, #4]
 810c6a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c6a6:	2b00      	cmp	r3, #0
 810c6a8:	f040 80d3 	bne.w	810c852 <_nx_icmpv4_send_error_message+0x22a>
    }

    /* A datagram whose source address does not define a single host,
       e.g., a zero address, a loopback address, a broadcast address,
       a multicast address, or a Class E address.  */
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 810c6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c6ae:	68db      	ldr	r3, [r3, #12]
 810c6b0:	2b00      	cmp	r3, #0
 810c6b2:	f000 80d0 	beq.w	810c856 <_nx_icmpv4_send_error_message+0x22e>
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 810c6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c6b8:	68db      	ldr	r3, [r3, #12]
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 810c6ba:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 810c6be:	d304      	bcc.n	810c6ca <_nx_icmpv4_send_error_message+0xa2>
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 810c6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c6c2:	68db      	ldr	r3, [r3, #12]
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 810c6c4:	2b00      	cmp	r3, #0
 810c6c6:	f280 80c6 	bge.w	810c856 <_nx_icmpv4_send_error_message+0x22e>
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 810c6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c6cc:	68db      	ldr	r3, [r3, #12]
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 810c6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c6d2:	f000 80c0 	beq.w	810c856 <_nx_icmpv4_send_error_message+0x22e>
        ((ip_header_ptr -> nx_ip_header_source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 810c6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c6d8:	68db      	ldr	r3, [r3, #12]
 810c6da:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 810c6de:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 810c6e2:	f000 80b8 	beq.w	810c856 <_nx_icmpv4_send_error_message+0x22e>
    {
        return;
    }

    /* Allocate a packet to build the ICMPv4 error message in.  */
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv4_ICMP_PACKET, NX_NO_WAIT))
 810c6e6:	68fb      	ldr	r3, [r7, #12]
 810c6e8:	f8d3 0138 	ldr.w	r0, [r3, #312]	@ 0x138
 810c6ec:	f107 0114 	add.w	r1, r7, #20
 810c6f0:	2300      	movs	r3, #0
 810c6f2:	2224      	movs	r2, #36	@ 0x24
 810c6f4:	f001 ff2a 	bl	810e54c <_nx_packet_allocate>
 810c6f8:	4603      	mov	r3, r0
 810c6fa:	2b00      	cmp	r3, #0
 810c6fc:	f040 80ad 	bne.w	810c85a <_nx_icmpv4_send_error_message+0x232>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv4. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 810c700:	697b      	ldr	r3, [r7, #20]
 810c702:	2204      	movs	r2, #4
 810c704:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Size of the message is ICMPv4 */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    icmpv4_error = (NX_ICMPV4_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
 810c708:	697b      	ldr	r3, [r7, #20]
 810c70a:	689b      	ldr	r3, [r3, #8]
 810c70c:	623b      	str	r3, [r7, #32]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 810c70e:	687b      	ldr	r3, [r7, #4]
 810c710:	0e1b      	lsrs	r3, r3, #24
 810c712:	b2da      	uxtb	r2, r3
 810c714:	6a3b      	ldr	r3, [r7, #32]
 810c716:	701a      	strb	r2, [r3, #0]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 810c718:	687b      	ldr	r3, [r7, #4]
 810c71a:	0c1b      	lsrs	r3, r3, #16
 810c71c:	b2da      	uxtb	r2, r3
 810c71e:	6a3b      	ldr	r3, [r7, #32]
 810c720:	705a      	strb	r2, [r3, #1]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = 0;
 810c722:	6a3b      	ldr	r3, [r7, #32]
 810c724:	2200      	movs	r2, #0
 810c726:	805a      	strh	r2, [r3, #2]
    icmpv4_error -> nx_icmpv4_error_pointer = (error_pointer << 24);
 810c728:	683b      	ldr	r3, [r7, #0]
 810c72a:	061a      	lsls	r2, r3, #24
 810c72c:	6a3b      	ldr	r3, [r7, #32]
 810c72e:	605a      	str	r2, [r3, #4]

    /* Change to network byte order. */
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 810c730:	6a3b      	ldr	r3, [r7, #32]
 810c732:	685b      	ldr	r3, [r3, #4]
 810c734:	ba1a      	rev	r2, r3
 810c736:	6a3b      	ldr	r3, [r7, #32]
 810c738:	605a      	str	r2, [r3, #4]

    /* IP Header + 64 bits (64 bits = 2 ULONGs) of Data Datagram.  */
    ip_header_size = ((ip_header_ptr -> nx_ip_header_word_0 & 0x0F000000) >> 24);
 810c73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c73c:	681b      	ldr	r3, [r3, #0]
 810c73e:	0e1b      	lsrs	r3, r3, #24
 810c740:	f003 030f 	and.w	r3, r3, #15
 810c744:	61fb      	str	r3, [r7, #28]
    bytes_to_copy = (UINT)((ip_header_size + 2) * sizeof(ULONG));
 810c746:	69fb      	ldr	r3, [r7, #28]
 810c748:	3302      	adds	r3, #2
 810c74a:	009b      	lsls	r3, r3, #2
 810c74c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Set the packet length and pointers.  The length will be increased to include
       the IPv4 header in the IP send function.  The Prepend function will be similarly
       updated in the IP send function. */
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV4_ERROR);
 810c74e:	697b      	ldr	r3, [r7, #20]
 810c750:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810c752:	3208      	adds	r2, #8
 810c754:	625a      	str	r2, [r3, #36]	@ 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 810c756:	697b      	ldr	r3, [r7, #20]
 810c758:	6899      	ldr	r1, [r3, #8]
 810c75a:	697b      	ldr	r3, [r7, #20]
 810c75c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810c75e:	697b      	ldr	r3, [r7, #20]
 810c760:	440a      	add	r2, r1
 810c762:	60da      	str	r2, [r3, #12]

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 810c764:	68bb      	ldr	r3, [r7, #8]
 810c766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c768:	637b      	str	r3, [r7, #52]	@ 0x34

    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    dest_packet = (ULONG *)NX_UCHAR_POINTER_ADD(icmpv4_error, sizeof(NX_ICMPV4_ERROR));
 810c76a:	6a3b      	ldr	r3, [r7, #32]
 810c76c:	3308      	adds	r3, #8
 810c76e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Endian swap the incoming IPv4 normal header to network byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 810c770:	2300      	movs	r3, #0
 810c772:	63bb      	str	r3, [r7, #56]	@ 0x38
 810c774:	e00a      	b.n	810c78c <_nx_icmpv4_send_error_message+0x164>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 810c776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c778:	681b      	ldr	r3, [r3, #0]
 810c77a:	ba1a      	rev	r2, r3
 810c77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c77e:	601a      	str	r2, [r3, #0]
        src_packet++;
 810c780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c782:	3304      	adds	r3, #4
 810c784:	637b      	str	r3, [r7, #52]	@ 0x34
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 810c786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c788:	3301      	adds	r3, #1
 810c78a:	63bb      	str	r3, [r7, #56]	@ 0x38
 810c78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c78e:	2b04      	cmp	r3, #4
 810c790:	d9f1      	bls.n	810c776 <_nx_icmpv4_send_error_message+0x14e>
    }

    /* Reset the packet pointer to the received packet IP header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 810c792:	68bb      	ldr	r3, [r7, #8]
 810c794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c796:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Copy the data from the received packet to the ICMPv4 error packet. */
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 810c798:	e00a      	b.n	810c7b0 <_nx_icmpv4_send_error_message+0x188>
    {

        *dest_packet++ = *src_packet++;
 810c79a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810c79c:	1d13      	adds	r3, r2, #4
 810c79e:	637b      	str	r3, [r7, #52]	@ 0x34
 810c7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c7a2:	1d19      	adds	r1, r3, #4
 810c7a4:	6339      	str	r1, [r7, #48]	@ 0x30
 810c7a6:	6812      	ldr	r2, [r2, #0]
 810c7a8:	601a      	str	r2, [r3, #0]
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 810c7aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c7ac:	3b04      	subs	r3, #4
 810c7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810c7b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810c7b2:	2b00      	cmp	r3, #0
 810c7b4:	d1f1      	bne.n	810c79a <_nx_icmpv4_send_error_message+0x172>
    }

    /* Get the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 810c7b6:	68bb      	ldr	r3, [r7, #8]
 810c7b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c7ba:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Endian swap the IPv4 normal header back to host byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 810c7bc:	2300      	movs	r3, #0
 810c7be:	63bb      	str	r3, [r7, #56]	@ 0x38
 810c7c0:	e00a      	b.n	810c7d8 <_nx_icmpv4_send_error_message+0x1b0>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 810c7c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c7c4:	681b      	ldr	r3, [r3, #0]
 810c7c6:	ba1a      	rev	r2, r3
 810c7c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c7ca:	601a      	str	r2, [r3, #0]
        src_packet++;
 810c7cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c7ce:	3304      	adds	r3, #4
 810c7d0:	637b      	str	r3, [r7, #52]	@ 0x34
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 810c7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c7d4:	3301      	adds	r3, #1
 810c7d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 810c7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c7da:	2b04      	cmp	r3, #4
 810c7dc:	d9f1      	bls.n	810c7c2 <_nx_icmpv4_send_error_message+0x19a>
    }

    /* Use the corresponding interface address as sender's address. */
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 810c7de:	697b      	ldr	r3, [r7, #20]
 810c7e0:	68ba      	ldr	r2, [r7, #8]
 810c7e2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 810c7e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, src_ip,
                      &pkt_ptr -> nx_packet_address.nx_packet_interface_ptr,
 810c7e6:	697b      	ldr	r3, [r7, #20]
 810c7e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
    _nx_ip_route_find(ip_ptr, src_ip,
 810c7ec:	f107 0310 	add.w	r3, r7, #16
 810c7f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810c7f2:	68f8      	ldr	r0, [r7, #12]
 810c7f4:	f001 f80e 	bl	810d814 <_nx_ip_route_find>
    if (compute_checksum)
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Compute the checksum of the ICMP packet.  */
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 810c7f8:	6978      	ldr	r0, [r7, #20]
                                           (UINT)pkt_ptr -> nx_packet_length,
 810c7fa:	697b      	ldr	r3, [r7, #20]
 810c7fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 810c7fe:	2300      	movs	r3, #0
 810c800:	9300      	str	r3, [sp, #0]
 810c802:	2300      	movs	r3, #0
 810c804:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 810c808:	f000 f897 	bl	810c93a <_nx_ip_checksum_compute>
 810c80c:	4603      	mov	r3, r0
 810c80e:	837b      	strh	r3, [r7, #26]
                                           /* ICMPV4 checksum does not include
                                              src/dest addresses */
                                           NX_NULL, NX_NULL);

        icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = (USHORT)(~checksum);
 810c810:	8b7b      	ldrh	r3, [r7, #26]
 810c812:	43db      	mvns	r3, r3
 810c814:	b29a      	uxth	r2, r3
 810c816:	6a3b      	ldr	r3, [r7, #32]
 810c818:	805a      	strh	r2, [r3, #2]

        /* Swap to network byte order. */
        NX_CHANGE_USHORT_ENDIAN(icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum);
 810c81a:	6a3b      	ldr	r3, [r7, #32]
 810c81c:	885b      	ldrh	r3, [r3, #2]
 810c81e:	ba5b      	rev16	r3, r3
 810c820:	b29a      	uxth	r2, r3
 810c822:	6a3b      	ldr	r3, [r7, #32]
 810c824:	805a      	strh	r2, [r3, #2]
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Send the ICMP packet to the IP component. The time to live is set to 255.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, pkt_ptr, src_ip,
 810c826:	6979      	ldr	r1, [r7, #20]
 810c828:	693b      	ldr	r3, [r7, #16]
 810c82a:	9303      	str	r3, [sp, #12]
 810c82c:	2300      	movs	r3, #0
 810c82e:	9302      	str	r3, [sp, #8]
 810c830:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 810c834:	9301      	str	r3, [sp, #4]
 810c836:	23ff      	movs	r3, #255	@ 0xff
 810c838:	9300      	str	r3, [sp, #0]
 810c83a:	2300      	movs	r3, #0
 810c83c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810c83e:	68f8      	ldr	r0, [r7, #12]
 810c840:	f000 ff72 	bl	810d728 <_nx_ip_packet_send>
                       NX_IP_NORMAL, 255, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);

    return;
 810c844:	e00a      	b.n	810c85c <_nx_icmpv4_send_error_message+0x234>
        return;
 810c846:	bf00      	nop
 810c848:	e008      	b.n	810c85c <_nx_icmpv4_send_error_message+0x234>
        return;
 810c84a:	bf00      	nop
 810c84c:	e006      	b.n	810c85c <_nx_icmpv4_send_error_message+0x234>
        return;
 810c84e:	bf00      	nop
 810c850:	e004      	b.n	810c85c <_nx_icmpv4_send_error_message+0x234>
        return;
 810c852:	bf00      	nop
 810c854:	e002      	b.n	810c85c <_nx_icmpv4_send_error_message+0x234>
        return;
 810c856:	bf00      	nop
 810c858:	e000      	b.n	810c85c <_nx_icmpv4_send_error_message+0x234>
        return;
 810c85a:	bf00      	nop
}
 810c85c:	3740      	adds	r7, #64	@ 0x40
 810c85e:	46bd      	mov	sp, r7
 810c860:	bd80      	pop	{r7, pc}
	...

0810c864 <_nx_igmp_multicast_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_igmp_multicast_check(NX_IP *ip_ptr, ULONG group, NX_INTERFACE *nx_interface)
{
 810c864:	b480      	push	{r7}
 810c866:	b087      	sub	sp, #28
 810c868:	af00      	add	r7, sp, #0
 810c86a:	60f8      	str	r0, [r7, #12]
 810c86c:	60b9      	str	r1, [r7, #8]
 810c86e:	607a      	str	r2, [r7, #4]

UINT i;

    /* Check for "all hosts" group.  We always assume all hosts membership.  */
    /*lint -e{835} -e{845} suppress operating on zero. */
    if (group ==  NX_ALL_HOSTS_ADDRESS)
 810c870:	68bb      	ldr	r3, [r7, #8]
 810c872:	4a18      	ldr	r2, [pc, #96]	@ (810c8d4 <_nx_igmp_multicast_check+0x70>)
 810c874:	4293      	cmp	r3, r2
 810c876:	d101      	bne.n	810c87c <_nx_igmp_multicast_check+0x18>
    {
        return(NX_TRUE);
 810c878:	2301      	movs	r3, #1
 810c87a:	e025      	b.n	810c8c8 <_nx_igmp_multicast_check+0x64>
    }

    /* Loop through the IP multicast join list to find the matching group that is being
       responded to by another host on this same network.  */

    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 810c87c:	2300      	movs	r3, #0
 810c87e:	617b      	str	r3, [r7, #20]
 810c880:	e01e      	b.n	810c8c0 <_nx_igmp_multicast_check+0x5c>
    {

        /* Check for a match.  */
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 810c882:	68f9      	ldr	r1, [r7, #12]
 810c884:	697a      	ldr	r2, [r7, #20]
 810c886:	4613      	mov	r3, r2
 810c888:	009b      	lsls	r3, r3, #2
 810c88a:	4413      	add	r3, r2
 810c88c:	009b      	lsls	r3, r3, #2
 810c88e:	440b      	add	r3, r1
 810c890:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 810c894:	681b      	ldr	r3, [r3, #0]
 810c896:	68ba      	ldr	r2, [r7, #8]
 810c898:	429a      	cmp	r2, r3
 810c89a:	d10e      	bne.n	810c8ba <_nx_igmp_multicast_check+0x56>
            (nx_interface == ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_interface_list))
 810c89c:	68f9      	ldr	r1, [r7, #12]
 810c89e:	697a      	ldr	r2, [r7, #20]
 810c8a0:	4613      	mov	r3, r2
 810c8a2:	009b      	lsls	r3, r3, #2
 810c8a4:	4413      	add	r3, r2
 810c8a6:	009b      	lsls	r3, r3, #2
 810c8a8:	440b      	add	r3, r1
 810c8aa:	f503 7333 	add.w	r3, r3, #716	@ 0x2cc
 810c8ae:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 810c8b0:	687a      	ldr	r2, [r7, #4]
 810c8b2:	429a      	cmp	r2, r3
 810c8b4:	d101      	bne.n	810c8ba <_nx_igmp_multicast_check+0x56>
        {
            return(NX_TRUE);
 810c8b6:	2301      	movs	r3, #1
 810c8b8:	e006      	b.n	810c8c8 <_nx_igmp_multicast_check+0x64>
    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 810c8ba:	697b      	ldr	r3, [r7, #20]
 810c8bc:	3301      	adds	r3, #1
 810c8be:	617b      	str	r3, [r7, #20]
 810c8c0:	697b      	ldr	r3, [r7, #20]
 810c8c2:	2b06      	cmp	r3, #6
 810c8c4:	d9dd      	bls.n	810c882 <_nx_igmp_multicast_check+0x1e>
        }
    }

    /* Otherwise, we have searched the entire list, return false.  */
    return(NX_FALSE);
 810c8c6:	2300      	movs	r3, #0
}
 810c8c8:	4618      	mov	r0, r3
 810c8ca:	371c      	adds	r7, #28
 810c8cc:	46bd      	mov	sp, r7
 810c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c8d2:	4770      	bx	lr
 810c8d4:	e0000001 	.word	0xe0000001

0810c8d8 <_nx_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 810c8d8:	b580      	push	{r7, lr}
 810c8da:	b088      	sub	sp, #32
 810c8dc:	af00      	add	r7, sp, #0
 810c8de:	60f8      	str	r0, [r7, #12]
 810c8e0:	60b9      	str	r1, [r7, #8]
 810c8e2:	607a      	str	r2, [r7, #4]

#ifndef NX_DISABLE_IPV4
TX_INTERRUPT_SAVE_AREA

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 810c8e4:	68fb      	ldr	r3, [r7, #12]
 810c8e6:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 810c8ea:	f04f 31ff 	mov.w	r1, #4294967295
 810c8ee:	4618      	mov	r0, r3
 810c8f0:	f008 f946 	bl	8114b80 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810c8f4:	f3ef 8310 	mrs	r3, PRIMASK
 810c8f8:	617b      	str	r3, [r7, #20]
    return(posture);
 810c8fa:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 810c8fc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 810c8fe:	b672      	cpsid	i
    return(int_posture);
 810c900:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 810c902:	61fb      	str	r3, [r7, #28]

    /* Pickup the IP address and the network mask.  This service assumes
       the operation on the primary interface. */
    *ip_address =    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address;
 810c904:	68fb      	ldr	r3, [r7, #12]
 810c906:	f8d3 2738 	ldr.w	r2, [r3, #1848]	@ 0x738
 810c90a:	68bb      	ldr	r3, [r7, #8]
 810c90c:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask;
 810c90e:	68fb      	ldr	r3, [r7, #12]
 810c910:	f8d3 273c 	ldr.w	r2, [r3, #1852]	@ 0x73c
 810c914:	687b      	ldr	r3, [r7, #4]
 810c916:	601a      	str	r2, [r3, #0]
 810c918:	69fb      	ldr	r3, [r7, #28]
 810c91a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810c91c:	69bb      	ldr	r3, [r7, #24]
 810c91e:	f383 8810 	msr	PRIMASK, r3
}
 810c922:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 810c924:	68fb      	ldr	r3, [r7, #12]
 810c926:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 810c92a:	4618      	mov	r0, r3
 810c92c:	f008 fba0 	bl	8115070 <_tx_mutex_put>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_GET, ip_ptr, ip_ptr -> nx_ip_interface[0].nx_interface_ip_address,
                            ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Return completion status.  */
    return(NX_SUCCESS);
 810c930:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 810c932:	4618      	mov	r0, r3
 810c934:	3720      	adds	r7, #32
 810c936:	46bd      	mov	sp, r7
 810c938:	bd80      	pop	{r7, pc}

0810c93a <_nx_ip_checksum_compute>:
/*                                                                        */
/**************************************************************************/
USHORT  _nx_ip_checksum_compute(NX_PACKET *packet_ptr, ULONG protocol,
                                UINT data_length, ULONG *src_ip_addr,
                                ULONG *dest_ip_addr)
{
 810c93a:	b580      	push	{r7, lr}
 810c93c:	b08e      	sub	sp, #56	@ 0x38
 810c93e:	af00      	add	r7, sp, #0
 810c940:	60f8      	str	r0, [r7, #12]
 810c942:	60b9      	str	r1, [r7, #8]
 810c944:	607a      	str	r2, [r7, #4]
 810c946:	603b      	str	r3, [r7, #0]

ULONG      checksum = 0;
 810c948:	2300      	movs	r3, #0
 810c94a:	637b      	str	r3, [r7, #52]	@ 0x34
UINT       i;
#endif

    /* For computing TCP/UDP/ICMPv6, we need to include the pseudo header.
       The ICMPv4 checksum does not cover the pseudo header. */
    if ((protocol == NX_PROTOCOL_UDP) ||
 810c94c:	68bb      	ldr	r3, [r7, #8]
 810c94e:	2b11      	cmp	r3, #17
 810c950:	d002      	beq.n	810c958 <_nx_ip_checksum_compute+0x1e>
 810c952:	68bb      	ldr	r3, [r7, #8]
 810c954:	2b06      	cmp	r3, #6
 810c956:	d143      	bne.n	810c9e0 <_nx_ip_checksum_compute+0xa6>
        (protocol == NX_PROTOCOL_TCP))
    {

    USHORT *src_ip_short, *dest_ip_short;

        checksum = protocol;
 810c958:	68bb      	ldr	r3, [r7, #8]
 810c95a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* The addresses must not be null.  */
        NX_ASSERT((src_ip_addr != NX_NULL) && (dest_ip_addr != NX_NULL));
 810c95c:	683b      	ldr	r3, [r7, #0]
 810c95e:	2b00      	cmp	r3, #0
 810c960:	d100      	bne.n	810c964 <_nx_ip_checksum_compute+0x2a>
 810c962:	e003      	b.n	810c96c <_nx_ip_checksum_compute+0x32>
 810c964:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810c966:	2b00      	cmp	r3, #0
 810c968:	d000      	beq.n	810c96c <_nx_ip_checksum_compute+0x32>
 810c96a:	e004      	b.n	810c976 <_nx_ip_checksum_compute+0x3c>
 810c96c:	f04f 30ff 	mov.w	r0, #4294967295
 810c970:	f008 ffb4 	bl	81158dc <_tx_thread_sleep>
 810c974:	e7fa      	b.n	810c96c <_nx_ip_checksum_compute+0x32>

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        src_ip_short = (USHORT *)src_ip_addr;
 810c976:	683b      	ldr	r3, [r7, #0]
 810c978:	623b      	str	r3, [r7, #32]

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        dest_ip_short = (USHORT *)dest_ip_addr;
 810c97a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810c97c:	61fb      	str	r3, [r7, #28]


        checksum += src_ip_short[0];
 810c97e:	6a3b      	ldr	r3, [r7, #32]
 810c980:	881b      	ldrh	r3, [r3, #0]
 810c982:	461a      	mov	r2, r3
 810c984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c986:	4413      	add	r3, r2
 810c988:	637b      	str	r3, [r7, #52]	@ 0x34
        checksum += src_ip_short[1];
 810c98a:	6a3b      	ldr	r3, [r7, #32]
 810c98c:	3302      	adds	r3, #2
 810c98e:	881b      	ldrh	r3, [r3, #0]
 810c990:	461a      	mov	r2, r3
 810c992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c994:	4413      	add	r3, r2
 810c996:	637b      	str	r3, [r7, #52]	@ 0x34
        checksum += dest_ip_short[0];
 810c998:	69fb      	ldr	r3, [r7, #28]
 810c99a:	881b      	ldrh	r3, [r3, #0]
 810c99c:	461a      	mov	r2, r3
 810c99e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c9a0:	4413      	add	r3, r2
 810c9a2:	637b      	str	r3, [r7, #52]	@ 0x34
        checksum += dest_ip_short[1];
 810c9a4:	69fb      	ldr	r3, [r7, #28]
 810c9a6:	3302      	adds	r3, #2
 810c9a8:	881b      	ldrh	r3, [r3, #0]
 810c9aa:	461a      	mov	r2, r3
 810c9ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c9ae:	4413      	add	r3, r2
 810c9b0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }
#endif /* FEATURE_NX_IPV6 */

        /* Take care of data length */
        checksum += data_length;
 810c9b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810c9b4:	687b      	ldr	r3, [r7, #4]
 810c9b6:	4413      	add	r3, r2
 810c9b8:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 810c9ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c9bc:	0c1a      	lsrs	r2, r3, #16
 810c9be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c9c0:	b29b      	uxth	r3, r3
 810c9c2:	4413      	add	r3, r2
 810c9c4:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 810c9c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c9c8:	0c1a      	lsrs	r2, r3, #16
 810c9ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c9cc:	b29b      	uxth	r3, r3
 810c9ce:	4413      	add	r3, r2
 810c9d0:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Convert to network byte order. */
        tmp = (USHORT)checksum;
 810c9d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c9d4:	837b      	strh	r3, [r7, #26]
        NX_CHANGE_USHORT_ENDIAN(tmp);
 810c9d6:	8b7b      	ldrh	r3, [r7, #26]
 810c9d8:	ba5b      	rev16	r3, r3
 810c9da:	837b      	strh	r3, [r7, #26]
        checksum = tmp;
 810c9dc:	8b7b      	ldrh	r3, [r7, #26]
 810c9de:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Now we need to go through the payloads */

    /* Setup the pointer to the start of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    long_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 810c9e0:	68fb      	ldr	r3, [r7, #12]
 810c9e2:	689b      	ldr	r3, [r3, #8]
 810c9e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Initialize the current packet to the input packet pointer.  */
    current_packet =  packet_ptr;
 810c9e6:	68fb      	ldr	r3, [r7, #12]
 810c9e8:	62bb      	str	r3, [r7, #40]	@ 0x28

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop the packet. */
    while (current_packet)
 810c9ea:	e058      	b.n	810ca9e <_nx_ip_checksum_compute+0x164>
    {

        /* Calculate current packet size. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr);
 810c9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c9ee:	68da      	ldr	r2, [r3, #12]
 810c9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c9f2:	689b      	ldr	r3, [r3, #8]
 810c9f4:	1ad3      	subs	r3, r2, r3
 810c9f6:	617b      	str	r3, [r7, #20]

        /* Calculate the end address in this packet. */
        if (data_length > (UINT)packet_size)
 810c9f8:	687a      	ldr	r2, [r7, #4]
 810c9fa:	697b      	ldr	r3, [r7, #20]
 810c9fc:	429a      	cmp	r2, r3
 810c9fe:	d905      	bls.n	810ca0c <_nx_ip_checksum_compute+0xd2>
        {

            /*lint -e{927} -e{923} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = ((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3);
 810ca00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ca02:	68db      	ldr	r3, [r3, #12]
 810ca04:	f023 0303 	bic.w	r3, r3, #3
 810ca08:	627b      	str	r3, [r7, #36]	@ 0x24
 810ca0a:	e006      	b.n	810ca1a <_nx_ip_checksum_compute+0xe0>
        }
        else
        {
#endif /* NX_DISABLE_PACKET_CHAIN */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr + data_length - 3;
 810ca0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ca0e:	689b      	ldr	r3, [r3, #8]
 810ca10:	461a      	mov	r2, r3
 810ca12:	687b      	ldr	r3, [r7, #4]
 810ca14:	4413      	add	r3, r2
 810ca16:	3b03      	subs	r3, #3
 810ca18:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Set the start address in this packet. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        long_ptr = (ULONG *)current_packet -> nx_packet_prepend_ptr;
 810ca1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ca1c:	689b      	ldr	r3, [r3, #8]
 810ca1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ALIGN_TYPE)long_ptr < end_ptr)
 810ca20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ca22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ca24:	429a      	cmp	r2, r3
 810ca26:	d91c      	bls.n	810ca62 <_nx_ip_checksum_compute+0x128>
        {

            /* Calculate the data_length. */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            data_length -= (UINT)(((end_ptr + 3) & (ALIGN_TYPE)(~3llu)) - (ALIGN_TYPE)long_ptr);
 810ca28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810ca2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ca2c:	3303      	adds	r3, #3
 810ca2e:	f023 0303 	bic.w	r3, r3, #3
 810ca32:	1ad3      	subs	r3, r2, r3
 810ca34:	687a      	ldr	r2, [r7, #4]
 810ca36:	4413      	add	r3, r2
 810ca38:	607b      	str	r3, [r7, #4]

            /* Loop to calculate the packet's checksum.  */
            /*lint -e{946} suppress pointer subtraction, since it is necessary. */
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 810ca3a:	e00e      	b.n	810ca5a <_nx_ip_checksum_compute+0x120>
            {
                checksum += (*long_ptr & NX_LOWER_16_MASK);
 810ca3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ca3e:	681b      	ldr	r3, [r3, #0]
 810ca40:	b29b      	uxth	r3, r3
 810ca42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810ca44:	4413      	add	r3, r2
 810ca46:	637b      	str	r3, [r7, #52]	@ 0x34
                checksum += (*long_ptr >> NX_SHIFT_BY_16);
 810ca48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ca4a:	681b      	ldr	r3, [r3, #0]
 810ca4c:	0c1b      	lsrs	r3, r3, #16
 810ca4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810ca50:	4413      	add	r3, r2
 810ca52:	637b      	str	r3, [r7, #52]	@ 0x34
                long_ptr++;
 810ca54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ca56:	3304      	adds	r3, #4
 810ca58:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 810ca5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ca5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ca5e:	429a      	cmp	r2, r3
 810ca60:	d8ec      	bhi.n	810ca3c <_nx_ip_checksum_compute+0x102>
            }
        }
#ifndef NX_DISABLE_PACKET_CHAIN

        /* Determine if we are at the end of the current packet.  */
        if ((data_length > 0) && (current_packet -> nx_packet_next))
 810ca62:	687b      	ldr	r3, [r7, #4]
 810ca64:	2b00      	cmp	r3, #0
 810ca66:	d018      	beq.n	810ca9a <_nx_ip_checksum_compute+0x160>
 810ca68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ca6a:	685b      	ldr	r3, [r3, #4]
 810ca6c:	2b00      	cmp	r3, #0
 810ca6e:	d014      	beq.n	810ca9a <_nx_ip_checksum_compute+0x160>
        {

            /* Is append_ptr two bytes aligned but not four bytes aligned? */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            if ((((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & 3) == 2)
 810ca70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ca72:	68db      	ldr	r3, [r3, #12]
 810ca74:	f003 0303 	and.w	r3, r3, #3
 810ca78:	2b02      	cmp	r3, #2
 810ca7a:	d10a      	bne.n	810ca92 <_nx_ip_checksum_compute+0x158>
            {

                /* Yes it is. Process the last two bytes in chaining packets. */
                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                short_ptr = (USHORT *)long_ptr;
 810ca7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ca7e:	633b      	str	r3, [r7, #48]	@ 0x30

                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                checksum += *short_ptr;
 810ca80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ca82:	881b      	ldrh	r3, [r3, #0]
 810ca84:	461a      	mov	r2, r3
 810ca86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ca88:	4413      	add	r3, r2
 810ca8a:	637b      	str	r3, [r7, #52]	@ 0x34
                data_length -= 2;
 810ca8c:	687b      	ldr	r3, [r7, #4]
 810ca8e:	3b02      	subs	r3, #2
 810ca90:	607b      	str	r3, [r7, #4]
            }

            /* We have crossed the packet boundary.  Move to the next packet
               structure.  */
            current_packet =  current_packet -> nx_packet_next;
 810ca92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ca94:	685b      	ldr	r3, [r3, #4]
 810ca96:	62bb      	str	r3, [r7, #40]	@ 0x28
 810ca98:	e001      	b.n	810ca9e <_nx_ip_checksum_compute+0x164>
        }
        else
        {

            /* End the loop.  */
            current_packet = NX_NULL;
 810ca9a:	2300      	movs	r3, #0
 810ca9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (current_packet)
 810ca9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810caa0:	2b00      	cmp	r3, #0
 810caa2:	d1a3      	bne.n	810c9ec <_nx_ip_checksum_compute+0xb2>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if there is only one byte left. */
    if (data_length)
 810caa4:	687b      	ldr	r3, [r7, #4]
 810caa6:	2b00      	cmp	r3, #0
 810caa8:	d01f      	beq.n	810caea <_nx_ip_checksum_compute+0x1b0>
    {

        /* Set the short_ptr. */
        short_ptr = (USHORT *)(long_ptr);
 810caaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810caac:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Check the data length.  */
        if (data_length == 1)
 810caae:	687b      	ldr	r3, [r7, #4]
 810cab0:	2b01      	cmp	r3, #1
 810cab2:	d104      	bne.n	810cabe <_nx_ip_checksum_compute+0x184>
        {
            *((UCHAR *)short_ptr + 1) = 0;
 810cab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cab6:	3301      	adds	r3, #1
 810cab8:	2200      	movs	r2, #0
 810caba:	701a      	strb	r2, [r3, #0]
 810cabc:	e00f      	b.n	810cade <_nx_ip_checksum_compute+0x1a4>
        }
        else if (data_length == 3)
 810cabe:	687b      	ldr	r3, [r7, #4]
 810cac0:	2b03      	cmp	r3, #3
 810cac2:	d10c      	bne.n	810cade <_nx_ip_checksum_compute+0x1a4>
        {
            checksum += *short_ptr;
 810cac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cac6:	881b      	ldrh	r3, [r3, #0]
 810cac8:	461a      	mov	r2, r3
 810caca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810cacc:	4413      	add	r3, r2
 810cace:	637b      	str	r3, [r7, #52]	@ 0x34
            short_ptr++;
 810cad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cad2:	3302      	adds	r3, #2
 810cad4:	633b      	str	r3, [r7, #48]	@ 0x30

            *((UCHAR *)short_ptr + 1) = 0;
 810cad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cad8:	3301      	adds	r3, #1
 810cada:	2200      	movs	r2, #0
 810cadc:	701a      	strb	r2, [r3, #0]
        }

        checksum += *short_ptr;
 810cade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cae0:	881b      	ldrh	r3, [r3, #0]
 810cae2:	461a      	mov	r2, r3
 810cae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810cae6:	4413      	add	r3, r2
 810cae8:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Fold a 4-byte value into a two byte value */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 810caea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810caec:	0c1a      	lsrs	r2, r3, #16
 810caee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810caf0:	b29b      	uxth	r3, r3
 810caf2:	4413      	add	r3, r2
 810caf4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Do it again in case previous operation generates an overflow */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 810caf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810caf8:	0c1a      	lsrs	r2, r3, #16
 810cafa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810cafc:	b29b      	uxth	r3, r3
 810cafe:	4413      	add	r3, r2
 810cb00:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Convert to host byte order. */
    tmp = (USHORT)checksum;
 810cb02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810cb04:	837b      	strh	r3, [r7, #26]
    NX_CHANGE_USHORT_ENDIAN(tmp);
 810cb06:	8b7b      	ldrh	r3, [r7, #26]
 810cb08:	ba5b      	rev16	r3, r3
 810cb0a:	837b      	strh	r3, [r7, #26]

    /* Return the computed checksum.  */
    return(tmp);
 810cb0c:	8b7b      	ldrh	r3, [r7, #26]
}
 810cb0e:	4618      	mov	r0, r3
 810cb10:	3738      	adds	r7, #56	@ 0x38
 810cb12:	46bd      	mov	sp, r7
 810cb14:	bd80      	pop	{r7, pc}
	...

0810cb18 <_nx_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                    NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                    VOID *memory_ptr, ULONG memory_size, UINT priority)
{
 810cb18:	b580      	push	{r7, lr}
 810cb1a:	b092      	sub	sp, #72	@ 0x48
 810cb1c:	af06      	add	r7, sp, #24
 810cb1e:	60f8      	str	r0, [r7, #12]
 810cb20:	60b9      	str	r1, [r7, #8]
 810cb22:	607a      	str	r2, [r7, #4]
 810cb24:	603b      	str	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA

NX_IP     *tail_ptr;
UINT       i;
UINT       old_threshold = 0;
 810cb26:	2300      	movs	r3, #0
 810cb28:	613b      	str	r3, [r7, #16]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);
#endif /* NX_DISABLE_IPV4 */

    /* Reference the version ID and option words to ensure they are linked in.  */
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 810cb2a:	4b87      	ldr	r3, [pc, #540]	@ (810cd48 <_nx_ip_create+0x230>)
 810cb2c:	681a      	ldr	r2, [r3, #0]
 810cb2e:	4b87      	ldr	r3, [pc, #540]	@ (810cd4c <_nx_ip_create+0x234>)
 810cb30:	681b      	ldr	r3, [r3, #0]
 810cb32:	431a      	orrs	r2, r3
 810cb34:	4b86      	ldr	r3, [pc, #536]	@ (810cd50 <_nx_ip_create+0x238>)
 810cb36:	681b      	ldr	r3, [r3, #0]
 810cb38:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 810cb3a:	4b86      	ldr	r3, [pc, #536]	@ (810cd54 <_nx_ip_create+0x23c>)
 810cb3c:	681b      	ldr	r3, [r3, #0]
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 810cb3e:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 810cb40:	4b85      	ldr	r3, [pc, #532]	@ (810cd58 <_nx_ip_create+0x240>)
 810cb42:	681b      	ldr	r3, [r3, #0]
 810cb44:	4313      	orrs	r3, r2
 810cb46:	4a85      	ldr	r2, [pc, #532]	@ (810cd5c <_nx_ip_create+0x244>)
 810cb48:	7812      	ldrb	r2, [r2, #0]
 810cb4a:	4313      	orrs	r3, r2
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 810cb4c:	2b00      	cmp	r3, #0
 810cb4e:	d101      	bne.n	810cb54 <_nx_ip_create+0x3c>
    {

        /* We should never get here!  */
        return(NX_NOT_IMPLEMENTED);
 810cb50:	234a      	movs	r3, #74	@ 0x4a
 810cb52:	e0f5      	b.n	810cd40 <_nx_ip_create+0x228>
    }

    /* Initialize the IP control block to zero.  */
    memset((void *)ip_ptr, 0, sizeof(NX_IP));
 810cb54:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 810cb58:	2100      	movs	r1, #0
 810cb5a:	68f8      	ldr	r0, [r7, #12]
 810cb5c:	f00a fa84 	bl	8117068 <memset>

    /* Configure the primary interface. */
    ip_ptr -> nx_ip_interface[0].nx_interface_valid = 1;
 810cb60:	68fb      	ldr	r3, [r7, #12]
 810cb62:	2201      	movs	r2, #1
 810cb64:	f883 2728 	strb.w	r2, [r3, #1832]	@ 0x728

#ifndef NX_DISABLE_IPV4
    /* Save the IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address =   ip_address;
 810cb68:	68fb      	ldr	r3, [r7, #12]
 810cb6a:	687a      	ldr	r2, [r7, #4]
 810cb6c:	f8c3 2738 	str.w	r2, [r3, #1848]	@ 0x738

    /* Save the network mask.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask =  network_mask;
 810cb70:	68fb      	ldr	r3, [r7, #12]
 810cb72:	683a      	ldr	r2, [r7, #0]
 810cb74:	f8c3 273c 	str.w	r2, [r3, #1852]	@ 0x73c

    /* Derive the network bits of this IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network =  ip_address & network_mask;
 810cb78:	687a      	ldr	r2, [r7, #4]
 810cb7a:	683b      	ldr	r3, [r7, #0]
 810cb7c:	401a      	ands	r2, r3
 810cb7e:	68fb      	ldr	r3, [r7, #12]
 810cb80:	f8c3 2740 	str.w	r2, [r3, #1856]	@ 0x740

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_arp_defend_timeout = 0;
 810cb84:	68fb      	ldr	r3, [r7, #12]
 810cb86:	2200      	movs	r2, #0
 810cb88:	f8c3 2764 	str.w	r2, [r3, #1892]	@ 0x764
#endif /* !NX_DISABLE_IPV4  */

    /* Setup the link driver address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_link_driver_entry =  ip_link_driver;
 810cb8c:	68fb      	ldr	r3, [r7, #12]
 810cb8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810cb90:	f8c3 2760 	str.w	r2, [r3, #1888]	@ 0x760

    /* Set the device interface name to "PRI". */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[0].nx_interface_name = (CHAR *)"PRI";
 810cb94:	68fb      	ldr	r3, [r7, #12]
 810cb96:	4a72      	ldr	r2, [pc, #456]	@ (810cd60 <_nx_ip_create+0x248>)
 810cb98:	f8c3 2724 	str.w	r2, [r3, #1828]	@ 0x724

    /* Set index of each interface. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 810cb9c:	2300      	movs	r3, #0
 810cb9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810cba0:	e00e      	b.n	810cbc0 <_nx_ip_create+0xa8>
    {
        ip_ptr -> nx_ip_interface[i].nx_interface_index = (UCHAR)i;
 810cba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cba4:	b2d8      	uxtb	r0, r3
 810cba6:	68fa      	ldr	r2, [r7, #12]
 810cba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cbaa:	214c      	movs	r1, #76	@ 0x4c
 810cbac:	fb01 f303 	mul.w	r3, r1, r3
 810cbb0:	4413      	add	r3, r2
 810cbb2:	f203 732b 	addw	r3, r3, #1835	@ 0x72b
 810cbb6:	4602      	mov	r2, r0
 810cbb8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 810cbba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cbbc:	3301      	adds	r3, #1
 810cbbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810cbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cbc2:	2b01      	cmp	r3, #1
 810cbc4:	d9ed      	bls.n	810cba2 <_nx_ip_create+0x8a>

#ifndef NX_DISABLE_LOOPBACK_INTERFACE

    /* Set the Loopback interface name. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_name = (CHAR *)"Internal IP Loopback";
 810cbc6:	68fb      	ldr	r3, [r7, #12]
 810cbc8:	4a66      	ldr	r2, [pc, #408]	@ (810cd64 <_nx_ip_create+0x24c>)
 810cbca:	f8c3 2770 	str.w	r2, [r3, #1904]	@ 0x770


    /* Mark the loopback interface as valid. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_valid = 1;
 810cbce:	68fb      	ldr	r3, [r7, #12]
 810cbd0:	2201      	movs	r2, #1
 810cbd2:	f883 2774 	strb.w	r2, [r3, #1908]	@ 0x774

#ifndef NX_DISABLE_IPV4
    /* Set the loopback interface address. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
 810cbd6:	68fb      	ldr	r3, [r7, #12]
 810cbd8:	4a63      	ldr	r2, [pc, #396]	@ (810cd68 <_nx_ip_create+0x250>)
 810cbda:	f8c3 2784 	str.w	r2, [r3, #1924]	@ 0x784
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
 810cbde:	68fb      	ldr	r3, [r7, #12]
 810cbe0:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 810cbe4:	f8c3 2788 	str.w	r2, [r3, #1928]	@ 0x788
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network = 0x7F000000;
 810cbe8:	68fb      	ldr	r3, [r7, #12]
 810cbea:	f04f 42fe 	mov.w	r2, #2130706432	@ 0x7f000000
 810cbee:	f8c3 278c 	str.w	r2, [r3, #1932]	@ 0x78c
#endif /* !NX_DISABLE_IPV4  */

    /* Loopback interface is a special case. Therefore no dedicated link driver needed. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_driver_entry = NX_NULL;
 810cbf2:	68fb      	ldr	r3, [r7, #12]
 810cbf4:	2200      	movs	r2, #0
 810cbf6:	f8c3 27ac 	str.w	r2, [r3, #1964]	@ 0x7ac

    /* Loopback interface does not need IP/MAC address mapping. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_address_mapping_needed = 0;
 810cbfa:	68fb      	ldr	r3, [r7, #12]
 810cbfc:	2200      	movs	r2, #0
 810cbfe:	f883 2775 	strb.w	r2, [r3, #1909]	@ 0x775

    /* There is actually no MTU limit for the loopback interface. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_mtu_size = 65535;
 810cc02:	68fb      	ldr	r3, [r7, #12]
 810cc04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 810cc08:	f8c3 2794 	str.w	r2, [r3, #1940]	@ 0x794

    /* Mark the loopback interface as LINK UP */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_up = 1;
 810cc0c:	68fb      	ldr	r3, [r7, #12]
 810cc0e:	2201      	movs	r2, #1
 810cc10:	f883 2776 	strb.w	r2, [r3, #1910]	@ 0x776
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#endif /* !NX_DISABLE_LOOPBACK_INTERFACE */

    /* Save the supplied IP name.  */
    ip_ptr -> nx_ip_name =  name;
 810cc14:	68fb      	ldr	r3, [r7, #12]
 810cc16:	68ba      	ldr	r2, [r7, #8]
 810cc18:	605a      	str	r2, [r3, #4]

    /* Set the initial IP packet ID.  */
    ip_ptr -> nx_ip_packet_id =  NX_INIT_PACKET_ID;
 810cc1a:	68fb      	ldr	r3, [r7, #12]
 810cc1c:	2201      	movs	r2, #1
 810cc1e:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134

    /* Setup the default packet pool for this IP instance.  */
    ip_ptr -> nx_ip_default_packet_pool =  default_pool;
 810cc22:	68fb      	ldr	r3, [r7, #12]
 810cc24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810cc26:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    /* Setup the auxiliary packet pool for this IP instance. By default it pointers to default pool. */
    ip_ptr -> nx_ip_auxiliary_packet_pool = default_pool;
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Create the internal IP protection mutex.  */
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 810cc2a:	68fb      	ldr	r3, [r7, #12]
 810cc2c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 810cc30:	2200      	movs	r2, #0
 810cc32:	68b9      	ldr	r1, [r7, #8]
 810cc34:	4618      	mov	r0, r3
 810cc36:	f007 ff49 	bl	8114acc <_tx_mutex_create>

    /* Create the internal IP event flag object.  */
    tx_event_flags_create(&(ip_ptr -> nx_ip_events), name);
 810cc3a:	68fb      	ldr	r3, [r7, #12]
 810cc3c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 810cc40:	68b9      	ldr	r1, [r7, #8]
 810cc42:	4618      	mov	r0, r3
 810cc44:	f007 faca 	bl	81141dc <_tx_event_flags_create>

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 810cc48:	f008 fd2e 	bl	81156a8 <_tx_thread_identify>
 810cc4c:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* Disable preemption temporarily.  */
    if (current_thread)
 810cc4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cc50:	2b00      	cmp	r3, #0
 810cc52:	d006      	beq.n	810cc62 <_nx_ip_create+0x14a>
    {
        tx_thread_preemption_change(current_thread, priority, &old_threshold);
 810cc54:	f107 0310 	add.w	r3, r7, #16
 810cc58:	461a      	mov	r2, r3
 810cc5a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 810cc5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810cc5e:	f008 fd7d 	bl	811575c <_tx_thread_preemption_change>
    }

    /* Create the internal IP thread for handling more processing intensive
       duties.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_thread_create(&(ip_ptr -> nx_ip_thread), name, _nx_ip_thread_entry, (ULONG)(ALIGN_TYPE)(ip_ptr),
 810cc62:	68fb      	ldr	r3, [r7, #12]
 810cc64:	f503 70cc 	add.w	r0, r3, #408	@ 0x198
 810cc68:	68fa      	ldr	r2, [r7, #12]
 810cc6a:	2301      	movs	r3, #1
 810cc6c:	9305      	str	r3, [sp, #20]
 810cc6e:	2301      	movs	r3, #1
 810cc70:	9304      	str	r3, [sp, #16]
 810cc72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810cc74:	9303      	str	r3, [sp, #12]
 810cc76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810cc78:	9302      	str	r3, [sp, #8]
 810cc7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810cc7c:	9301      	str	r3, [sp, #4]
 810cc7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810cc80:	9300      	str	r3, [sp, #0]
 810cc82:	4613      	mov	r3, r2
 810cc84:	4a39      	ldr	r2, [pc, #228]	@ (810cd6c <_nx_ip_create+0x254>)
 810cc86:	68b9      	ldr	r1, [r7, #8]
 810cc88:	f008 fc18 	bl	81154bc <_tx_thread_create>

    NX_THREAD_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_thread), ip_ptr)

    /* Create the periodic timer for this IP instance.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_periodic_timer), name,
 810cc8c:	68fb      	ldr	r3, [r7, #12]
 810cc8e:	f503 701c 	add.w	r0, r3, #624	@ 0x270
 810cc92:	68fb      	ldr	r3, [r7, #12]
 810cc94:	2201      	movs	r2, #1
 810cc96:	9202      	str	r2, [sp, #8]
 810cc98:	2264      	movs	r2, #100	@ 0x64
 810cc9a:	9201      	str	r2, [sp, #4]
 810cc9c:	2264      	movs	r2, #100	@ 0x64
 810cc9e:	9200      	str	r2, [sp, #0]
 810cca0:	4a33      	ldr	r2, [pc, #204]	@ (810cd70 <_nx_ip_create+0x258>)
 810cca2:	68b9      	ldr	r1, [r7, #8]
 810cca4:	f009 f97a 	bl	8115f9c <_tx_timer_create>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_CREATE, ip_ptr, ip_address, network_mask, default_pool, NX_TRACE_IP_EVENTS, 0, 0);

#ifndef NX_DISABLE_IPV4
    /* Install IPv4 packet receive processing function pointer */
    ip_ptr -> nx_ipv4_packet_receive = _nx_ipv4_packet_receive;
 810cca8:	68fb      	ldr	r3, [r7, #12]
 810ccaa:	4a32      	ldr	r2, [pc, #200]	@ (810cd74 <_nx_ip_create+0x25c>)
 810ccac:	f8c3 27bc 	str.w	r2, [r3, #1980]	@ 0x7bc
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810ccb0:	f3ef 8310 	mrs	r3, PRIMASK
 810ccb4:	61fb      	str	r3, [r7, #28]
    return(posture);
 810ccb6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 810ccb8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 810ccba:	b672      	cpsid	i
    return(int_posture);
 810ccbc:	69bb      	ldr	r3, [r7, #24]
#endif

    /* Otherwise, the IP initialization was successful.  Place the
       IP control block on the list of created IP instances.  */
    TX_DISABLE
 810ccbe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Load the IP ID field in the IP control block.  */
    ip_ptr -> nx_ip_id =  NX_IP_ID;
 810ccc0:	68fb      	ldr	r3, [r7, #12]
 810ccc2:	4a2d      	ldr	r2, [pc, #180]	@ (810cd78 <_nx_ip_create+0x260>)
 810ccc4:	601a      	str	r2, [r3, #0]

    /* Place the new IP control block on the list of created IPs.  First,
       check for an empty list.  */
    if (_nx_ip_created_ptr)
 810ccc6:	4b2d      	ldr	r3, [pc, #180]	@ (810cd7c <_nx_ip_create+0x264>)
 810ccc8:	681b      	ldr	r3, [r3, #0]
 810ccca:	2b00      	cmp	r3, #0
 810cccc:	d017      	beq.n	810ccfe <_nx_ip_create+0x1e6>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_ip_created_ptr -> nx_ip_created_previous;
 810ccce:	4b2b      	ldr	r3, [pc, #172]	@ (810cd7c <_nx_ip_create+0x264>)
 810ccd0:	681b      	ldr	r3, [r3, #0]
 810ccd2:	f8d3 3718 	ldr.w	r3, [r3, #1816]	@ 0x718
 810ccd6:	623b      	str	r3, [r7, #32]

        /* Place the new IP control block in the list.  */
        _nx_ip_created_ptr -> nx_ip_created_previous =  ip_ptr;
 810ccd8:	4b28      	ldr	r3, [pc, #160]	@ (810cd7c <_nx_ip_create+0x264>)
 810ccda:	681b      	ldr	r3, [r3, #0]
 810ccdc:	68fa      	ldr	r2, [r7, #12]
 810ccde:	f8c3 2718 	str.w	r2, [r3, #1816]	@ 0x718
        tail_ptr -> nx_ip_created_next =  ip_ptr;
 810cce2:	6a3b      	ldr	r3, [r7, #32]
 810cce4:	68fa      	ldr	r2, [r7, #12]
 810cce6:	f8c3 2714 	str.w	r2, [r3, #1812]	@ 0x714

        /* Setup this IP's created links.  */
        ip_ptr -> nx_ip_created_previous =  tail_ptr;
 810ccea:	68fb      	ldr	r3, [r7, #12]
 810ccec:	6a3a      	ldr	r2, [r7, #32]
 810ccee:	f8c3 2718 	str.w	r2, [r3, #1816]	@ 0x718
        ip_ptr -> nx_ip_created_next =      _nx_ip_created_ptr;
 810ccf2:	4b22      	ldr	r3, [pc, #136]	@ (810cd7c <_nx_ip_create+0x264>)
 810ccf4:	681a      	ldr	r2, [r3, #0]
 810ccf6:	68fb      	ldr	r3, [r7, #12]
 810ccf8:	f8c3 2714 	str.w	r2, [r3, #1812]	@ 0x714
 810ccfc:	e00a      	b.n	810cd14 <_nx_ip_create+0x1fc>
    }
    else
    {

        /* The created IP list is empty.  Add IP control block to empty list.  */
        _nx_ip_created_ptr =                ip_ptr;
 810ccfe:	4a1f      	ldr	r2, [pc, #124]	@ (810cd7c <_nx_ip_create+0x264>)
 810cd00:	68fb      	ldr	r3, [r7, #12]
 810cd02:	6013      	str	r3, [r2, #0]
        ip_ptr -> nx_ip_created_next =      ip_ptr;
 810cd04:	68fb      	ldr	r3, [r7, #12]
 810cd06:	68fa      	ldr	r2, [r7, #12]
 810cd08:	f8c3 2714 	str.w	r2, [r3, #1812]	@ 0x714
        ip_ptr -> nx_ip_created_previous =  ip_ptr;
 810cd0c:	68fb      	ldr	r3, [r7, #12]
 810cd0e:	68fa      	ldr	r2, [r7, #12]
 810cd10:	f8c3 2718 	str.w	r2, [r3, #1816]	@ 0x718
    }

    /* Increment the created IP counter.  */
    _nx_ip_created_count++;
 810cd14:	4b1a      	ldr	r3, [pc, #104]	@ (810cd80 <_nx_ip_create+0x268>)
 810cd16:	681b      	ldr	r3, [r3, #0]
 810cd18:	3301      	adds	r3, #1
 810cd1a:	4a19      	ldr	r2, [pc, #100]	@ (810cd80 <_nx_ip_create+0x268>)
 810cd1c:	6013      	str	r3, [r2, #0]
 810cd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cd20:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810cd22:	697b      	ldr	r3, [r7, #20]
 810cd24:	f383 8810 	msr	PRIMASK, r3
}
 810cd28:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Restore preemption.  */
    if (current_thread)
 810cd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cd2c:	2b00      	cmp	r3, #0
 810cd2e:	d006      	beq.n	810cd3e <_nx_ip_create+0x226>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized in previous tx_thread_preemption_change call. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 810cd30:	693b      	ldr	r3, [r7, #16]
 810cd32:	f107 0210 	add.w	r2, r7, #16
 810cd36:	4619      	mov	r1, r3
 810cd38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810cd3a:	f008 fd0f 	bl	811575c <_tx_thread_preemption_change>
    }

    /* Return success to the caller.  */
    return(NX_SUCCESS);
 810cd3e:	2300      	movs	r3, #0
}
 810cd40:	4618      	mov	r0, r3
 810cd42:	3730      	adds	r7, #48	@ 0x30
 810cd44:	46bd      	mov	sp, r7
 810cd46:	bd80      	pop	{r7, pc}
 810cd48:	200580cc 	.word	0x200580cc
 810cd4c:	200580d0 	.word	0x200580d0
 810cd50:	200580d4 	.word	0x200580d4
 810cd54:	200580d8 	.word	0x200580d8
 810cd58:	200580dc 	.word	0x200580dc
 810cd5c:	20050020 	.word	0x20050020
 810cd60:	08117d20 	.word	0x08117d20
 810cd64:	08117d24 	.word	0x08117d24
 810cd68:	7f000001 	.word	0x7f000001
 810cd6c:	0810db09 	.word	0x0810db09
 810cd70:	0810d7f1 	.word	0x0810d7f1
 810cd74:	0810e0a1 	.word	0x0810e0a1
 810cd78:	49502020 	.word	0x49502020
 810cd7c:	200580bc 	.word	0x200580bc
 810cd80:	200580c0 	.word	0x200580c0

0810cd84 <_nx_ip_deferred_link_status_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_deferred_link_status_process(NX_IP *ip_ptr)
{
 810cd84:	b580      	push	{r7, lr}
 810cd86:	b08c      	sub	sp, #48	@ 0x30
 810cd88:	af00      	add	r7, sp, #0
 810cd8a:	6078      	str	r0, [r7, #4]

UINT         i;
NX_IP_DRIVER driver_request;
ULONG        link_up;

    if (ip_ptr -> nx_ip_link_status_change_callback == NX_NULL)
 810cd8c:	687b      	ldr	r3, [r7, #4]
 810cd8e:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	@ 0x7c0
 810cd92:	2b00      	cmp	r3, #0
 810cd94:	d04e      	beq.n	810ce34 <_nx_ip_deferred_link_status_process+0xb0>

        /* Callback function is not set. */
        return;
    }

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 810cd96:	2300      	movs	r3, #0
 810cd98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810cd9a:	e047      	b.n	810ce2c <_nx_ip_deferred_link_status_process+0xa8>
    {
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 810cd9c:	687a      	ldr	r2, [r7, #4]
 810cd9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cda0:	214c      	movs	r1, #76	@ 0x4c
 810cda2:	fb01 f303 	mul.w	r3, r1, r3
 810cda6:	4413      	add	r3, r2
 810cda8:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 810cdac:	781b      	ldrb	r3, [r3, #0]
 810cdae:	2b00      	cmp	r3, #0
 810cdb0:	d039      	beq.n	810ce26 <_nx_ip_deferred_link_status_process+0xa2>
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change))
 810cdb2:	687a      	ldr	r2, [r7, #4]
 810cdb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cdb6:	214c      	movs	r1, #76	@ 0x4c
 810cdb8:	fb01 f303 	mul.w	r3, r1, r3
 810cdbc:	4413      	add	r3, r2
 810cdbe:	f203 732c 	addw	r3, r3, #1836	@ 0x72c
 810cdc2:	781b      	ldrb	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 810cdc4:	2b00      	cmp	r3, #0
 810cdc6:	d02e      	beq.n	810ce26 <_nx_ip_deferred_link_status_process+0xa2>
        {

            /* Reset the flag. */
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;
 810cdc8:	687a      	ldr	r2, [r7, #4]
 810cdca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cdcc:	214c      	movs	r1, #76	@ 0x4c
 810cdce:	fb01 f303 	mul.w	r3, r1, r3
 810cdd2:	4413      	add	r3, r2
 810cdd4:	f203 732c 	addw	r3, r3, #1836	@ 0x72c
 810cdd8:	2200      	movs	r2, #0
 810cdda:	701a      	strb	r2, [r3, #0]

            driver_request.nx_ip_driver_ptr       = ip_ptr;
 810cddc:	687b      	ldr	r3, [r7, #4]
 810cdde:	627b      	str	r3, [r7, #36]	@ 0x24
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
 810cde0:	230a      	movs	r3, #10
 810cde2:	60fb      	str	r3, [r7, #12]
            driver_request.nx_ip_driver_interface = &(ip_ptr -> nx_ip_interface[i]);
 810cde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cde6:	224c      	movs	r2, #76	@ 0x4c
 810cde8:	fb02 f303 	mul.w	r3, r2, r3
 810cdec:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 810cdf0:	687a      	ldr	r2, [r7, #4]
 810cdf2:	4413      	add	r3, r2
 810cdf4:	3304      	adds	r3, #4
 810cdf6:	62bb      	str	r3, [r7, #40]	@ 0x28
            driver_request.nx_ip_driver_return_ptr = &link_up;
 810cdf8:	f107 0308 	add.w	r3, r7, #8
 810cdfc:	623b      	str	r3, [r7, #32]

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 810cdfe:	687a      	ldr	r2, [r7, #4]
 810ce00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ce02:	214c      	movs	r1, #76	@ 0x4c
 810ce04:	fb01 f303 	mul.w	r3, r1, r3
 810ce08:	4413      	add	r3, r2
 810ce0a:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 810ce0e:	681b      	ldr	r3, [r3, #0]
 810ce10:	f107 020c 	add.w	r2, r7, #12
 810ce14:	4610      	mov	r0, r2
 810ce16:	4798      	blx	r3

            /* Invoke the callback function. */
            /*lint -e{644} suppress variable might not be initialized, since "link_up" was initialized in nx_interface_link_driver_entry. */
            ip_ptr -> nx_ip_link_status_change_callback(ip_ptr, i, link_up);
 810ce18:	687b      	ldr	r3, [r7, #4]
 810ce1a:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	@ 0x7c0
 810ce1e:	68ba      	ldr	r2, [r7, #8]
 810ce20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810ce22:	6878      	ldr	r0, [r7, #4]
 810ce24:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 810ce26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ce28:	3301      	adds	r3, #1
 810ce2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810ce2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ce2e:	2b00      	cmp	r3, #0
 810ce30:	d0b4      	beq.n	810cd9c <_nx_ip_deferred_link_status_process+0x18>
 810ce32:	e000      	b.n	810ce36 <_nx_ip_deferred_link_status_process+0xb2>
        return;
 810ce34:	bf00      	nop
        }
    }
}
 810ce36:	3730      	adds	r7, #48	@ 0x30
 810ce38:	46bd      	mov	sp, r7
 810ce3a:	bd80      	pop	{r7, pc}

0810ce3c <_nx_ip_dispatch_process>:
/*                                            packet,                     */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT _nx_ip_dispatch_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr, UINT protocol)
{
 810ce3c:	b580      	push	{r7, lr}
 810ce3e:	b086      	sub	sp, #24
 810ce40:	af00      	add	r7, sp, #0
 810ce42:	60f8      	str	r0, [r7, #12]
 810ce44:	60b9      	str	r1, [r7, #8]
 810ce46:	607a      	str	r2, [r7, #4]
#endif /* FEATURE_NX_IPV6 */
#endif /* NX_IPSEC_ENABLE */


    /* Initialize local variables. */
    drop_packet = 0;
 810ce48:	2300      	movs	r3, #0
 810ce4a:	617b      	str	r3, [r7, #20]
    next_option_offset = (UINT)sizeof(NX_IPV6_HEADER);
    incoming_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
#endif /* FEATURE_NX_IPV6 */

    /* Parse all options in the packet till we're done or an error is encountered. */
    while (!drop_packet)
 810ce4c:	e09a      	b.n	810cf84 <_nx_ip_dispatch_process+0x148>

#if defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE)
        /* Set a local variable for convenience. */
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
#endif /* defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE) */
        switch (protocol)
 810ce4e:	687b      	ldr	r3, [r7, #4]
 810ce50:	2b32      	cmp	r3, #50	@ 0x32
 810ce52:	d005      	beq.n	810ce60 <_nx_ip_dispatch_process+0x24>
 810ce54:	687b      	ldr	r3, [r7, #4]
 810ce56:	2b33      	cmp	r3, #51	@ 0x33
 810ce58:	d104      	bne.n	810ce64 <_nx_ip_dispatch_process+0x28>
                /* Continue processing the packet if status = NX_IPSEC_PKT_CONT */
            }
#else /* NX_IPSEC_ENABLE */

            /* Drop this packet if IPsec module is not present. */
            drop_packet = 1;
 810ce5a:	2301      	movs	r3, #1
 810ce5c:	617b      	str	r3, [r7, #20]
#endif /* NX_IPSEC_ENABLE */

            break;
 810ce5e:	e07d      	b.n	810cf5c <_nx_ip_dispatch_process+0x120>
            }
            break;

#else /* NX_IPSEC_ENABLE */
            /* Drop this packet if IPsec module is not present. */
            return(1);
 810ce60:	2301      	movs	r3, #1
 810ce62:	e094      	b.n	810cf8e <_nx_ip_dispatch_process+0x152>
                    return(0);
                }
            }
#endif /* defined(NX_ENABLE_IP_RAW_PACKET_ALL_STACK) && defined(NX_ENABLE_IP_RAW_PACKET_FILTER) */

            if (protocol == NX_PROTOCOL_TCP)
 810ce64:	687b      	ldr	r3, [r7, #4]
 810ce66:	2b06      	cmp	r3, #6
 810ce68:	d10f      	bne.n	810ce8a <_nx_ip_dispatch_process+0x4e>
                     (incoming_addr -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)))
                {
#endif /* FEATURE_NX_IPV6 */

                    /* Check that the host is enabled for TCP. */
                    if (ip_ptr -> nx_ip_tcp_packet_receive)
 810ce6a:	68fb      	ldr	r3, [r7, #12]
 810ce6c:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 810ce70:	2b00      	cmp	r3, #0
 810ce72:	d007      	beq.n	810ce84 <_nx_ip_dispatch_process+0x48>
                    {

                        /* Dispatch the packet to the TCP packet handler. */
                        (ip_ptr -> nx_ip_tcp_packet_receive)(ip_ptr, packet_ptr);
 810ce74:	68fb      	ldr	r3, [r7, #12]
 810ce76:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 810ce7a:	68b9      	ldr	r1, [r7, #8]
 810ce7c:	68f8      	ldr	r0, [r7, #12]
 810ce7e:	4798      	blx	r3

                        /* No need to free the packet as it is consumed by TCP packet receive.  */
                        return(0);
 810ce80:	2300      	movs	r3, #0
 810ce82:	e084      	b.n	810cf8e <_nx_ip_dispatch_process+0x152>
#ifdef FEATURE_NX_IPV6
                }
#endif /* FEATURE_NX_IPV6 */

                /* TCP is not enabled.  Drop the packet. */
                drop_packet = 1;
 810ce84:	2301      	movs	r3, #1
 810ce86:	617b      	str	r3, [r7, #20]
#endif /* NX_DISABLE_IP_INFO */


                drop_packet = 1;
            }
            break;
 810ce88:	e067      	b.n	810cf5a <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 810ce8a:	68bb      	ldr	r3, [r7, #8]
 810ce8c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810ce90:	2b04      	cmp	r3, #4
 810ce92:	d112      	bne.n	810ceba <_nx_ip_dispatch_process+0x7e>
 810ce94:	687b      	ldr	r3, [r7, #4]
 810ce96:	2b01      	cmp	r3, #1
 810ce98:	d10f      	bne.n	810ceba <_nx_ip_dispatch_process+0x7e>
                if (ip_ptr -> nx_ip_icmp_packet_receive != NX_NULL)
 810ce9a:	68fb      	ldr	r3, [r7, #12]
 810ce9c:	f8d3 336c 	ldr.w	r3, [r3, #876]	@ 0x36c
 810cea0:	2b00      	cmp	r3, #0
 810cea2:	d007      	beq.n	810ceb4 <_nx_ip_dispatch_process+0x78>
                    ip_ptr -> nx_ip_icmp_packet_receive(ip_ptr, packet_ptr);
 810cea4:	68fb      	ldr	r3, [r7, #12]
 810cea6:	f8d3 336c 	ldr.w	r3, [r3, #876]	@ 0x36c
 810ceaa:	68b9      	ldr	r1, [r7, #8]
 810ceac:	68f8      	ldr	r0, [r7, #12]
 810ceae:	4798      	blx	r3
                    return(0);
 810ceb0:	2300      	movs	r3, #0
 810ceb2:	e06c      	b.n	810cf8e <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 810ceb4:	2301      	movs	r3, #1
 810ceb6:	617b      	str	r3, [r7, #20]
 810ceb8:	e04f      	b.n	810cf5a <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 810ceba:	68bb      	ldr	r3, [r7, #8]
 810cebc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810cec0:	2b04      	cmp	r3, #4
 810cec2:	d112      	bne.n	810ceea <_nx_ip_dispatch_process+0xae>
 810cec4:	687b      	ldr	r3, [r7, #4]
 810cec6:	2b02      	cmp	r3, #2
 810cec8:	d10f      	bne.n	810ceea <_nx_ip_dispatch_process+0xae>
                if (ip_ptr -> nx_ip_igmp_packet_receive != NX_NULL)
 810ceca:	68fb      	ldr	r3, [r7, #12]
 810cecc:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 810ced0:	2b00      	cmp	r3, #0
 810ced2:	d007      	beq.n	810cee4 <_nx_ip_dispatch_process+0xa8>
                    ip_ptr -> nx_ip_igmp_packet_receive(ip_ptr, packet_ptr);
 810ced4:	68fb      	ldr	r3, [r7, #12]
 810ced6:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 810ceda:	68b9      	ldr	r1, [r7, #8]
 810cedc:	68f8      	ldr	r0, [r7, #12]
 810cede:	4798      	blx	r3
                    return(0);
 810cee0:	2300      	movs	r3, #0
 810cee2:	e054      	b.n	810cf8e <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 810cee4:	2301      	movs	r3, #1
 810cee6:	617b      	str	r3, [r7, #20]
 810cee8:	e037      	b.n	810cf5a <_nx_ip_dispatch_process+0x11e>
            else if (protocol == NX_PROTOCOL_UDP)
 810ceea:	687b      	ldr	r3, [r7, #4]
 810ceec:	2b11      	cmp	r3, #17
 810ceee:	d10f      	bne.n	810cf10 <_nx_ip_dispatch_process+0xd4>
                    if (ip_ptr -> nx_ip_udp_packet_receive)
 810cef0:	68fb      	ldr	r3, [r7, #12]
 810cef2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 810cef6:	2b00      	cmp	r3, #0
 810cef8:	d007      	beq.n	810cf0a <_nx_ip_dispatch_process+0xce>
                        (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 810cefa:	68fb      	ldr	r3, [r7, #12]
 810cefc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 810cf00:	68b9      	ldr	r1, [r7, #8]
 810cf02:	68f8      	ldr	r0, [r7, #12]
 810cf04:	4798      	blx	r3
                        return(0);
 810cf06:	2300      	movs	r3, #0
 810cf08:	e041      	b.n	810cf8e <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 810cf0a:	2301      	movs	r3, #1
 810cf0c:	617b      	str	r3, [r7, #20]
            break;
 810cf0e:	e024      	b.n	810cf5a <_nx_ip_dispatch_process+0x11e>
                if (ip_ptr -> nx_ip_raw_ip_processing)
 810cf10:	68fb      	ldr	r3, [r7, #12]
 810cf12:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 810cf16:	2b00      	cmp	r3, #0
 810cf18:	d00c      	beq.n	810cf34 <_nx_ip_dispatch_process+0xf8>
                        if ((ip_ptr -> nx_ip_raw_ip_processing)(ip_ptr, protocol << 16, packet_ptr) == NX_SUCCESS)
 810cf1a:	68fb      	ldr	r3, [r7, #12]
 810cf1c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 810cf20:	687a      	ldr	r2, [r7, #4]
 810cf22:	0411      	lsls	r1, r2, #16
 810cf24:	68ba      	ldr	r2, [r7, #8]
 810cf26:	68f8      	ldr	r0, [r7, #12]
 810cf28:	4798      	blx	r3
 810cf2a:	4603      	mov	r3, r0
 810cf2c:	2b00      	cmp	r3, #0
 810cf2e:	d101      	bne.n	810cf34 <_nx_ip_dispatch_process+0xf8>
                            return(0);
 810cf30:	2300      	movs	r3, #0
 810cf32:	e02c      	b.n	810cf8e <_nx_ip_dispatch_process+0x152>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 810cf34:	68bb      	ldr	r3, [r7, #8]
 810cf36:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810cf3a:	2b04      	cmp	r3, #4
 810cf3c:	d105      	bne.n	810cf4a <_nx_ip_dispatch_process+0x10e>
                    NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PROTOCOL_UNREACH_CODE);
 810cf3e:	2300      	movs	r3, #0
 810cf40:	4a15      	ldr	r2, [pc, #84]	@ (810cf98 <_nx_ip_dispatch_process+0x15c>)
 810cf42:	68b9      	ldr	r1, [r7, #8]
 810cf44:	68f8      	ldr	r0, [r7, #12]
 810cf46:	f7ff fb6f 	bl	810c628 <_nx_icmpv4_send_error_message>
                ip_ptr -> nx_ip_unknown_protocols_received++;
 810cf4a:	68fb      	ldr	r3, [r7, #12]
 810cf4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810cf4e:	1c5a      	adds	r2, r3, #1
 810cf50:	68fb      	ldr	r3, [r7, #12]
 810cf52:	641a      	str	r2, [r3, #64]	@ 0x40
                drop_packet = 1;
 810cf54:	2301      	movs	r3, #1
 810cf56:	617b      	str	r3, [r7, #20]
            break;
 810cf58:	e7ff      	b.n	810cf5a <_nx_ip_dispatch_process+0x11e>
 810cf5a:	bf00      	nop
        }


        /* If the previous header is processed without errors, move on to the next optional
           header. */
        if (!drop_packet)
 810cf5c:	697b      	ldr	r3, [r7, #20]
 810cf5e:	2b00      	cmp	r3, #0
 810cf60:	d010      	beq.n	810cf84 <_nx_ip_dispatch_process+0x148>
        else
        {
#ifndef NX_DISABLE_IP_INFO

            /* Decrement the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered--;
 810cf62:	68fb      	ldr	r3, [r7, #12]
 810cf64:	6a1b      	ldr	r3, [r3, #32]
 810cf66:	1e5a      	subs	r2, r3, #1
 810cf68:	68fb      	ldr	r3, [r7, #12]
 810cf6a:	621a      	str	r2, [r3, #32]

            /* Decrement the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 810cf6c:	68fb      	ldr	r3, [r7, #12]
 810cf6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810cf70:	68bb      	ldr	r3, [r7, #8]
 810cf72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810cf74:	1ad2      	subs	r2, r2, r3
 810cf76:	68fb      	ldr	r3, [r7, #12]
 810cf78:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 810cf7a:	68fb      	ldr	r3, [r7, #12]
 810cf7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810cf7e:	1c5a      	adds	r2, r3, #1
 810cf80:	68fb      	ldr	r3, [r7, #12]
 810cf82:	64da      	str	r2, [r3, #76]	@ 0x4c
    while (!drop_packet)
 810cf84:	697b      	ldr	r3, [r7, #20]
 810cf86:	2b00      	cmp	r3, #0
 810cf88:	f43f af61 	beq.w	810ce4e <_nx_ip_dispatch_process+0x12>
#endif /* NX_DISABLE_IP_INFO */
        }
    }

    return(drop_packet);
 810cf8c:	697b      	ldr	r3, [r7, #20]
}
 810cf8e:	4618      	mov	r0, r3
 810cf90:	3718      	adds	r7, #24
 810cf92:	46bd      	mov	sp, r7
 810cf94:	bd80      	pop	{r7, pc}
 810cf96:	bf00      	nop
 810cf98:	03020000 	.word	0x03020000

0810cf9c <_nx_ip_driver_deferred_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_deferred_processing(NX_IP *ip_ptr)
{
 810cf9c:	b580      	push	{r7, lr}
 810cf9e:	b082      	sub	sp, #8
 810cfa0:	af00      	add	r7, sp, #0
 810cfa2:	6078      	str	r0, [r7, #4]

    /* Set event flags to wake the IP helper thread, which will in turn
       call the driver with the NX_LINK_DEFERRED_PROCESSING command.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_DRIVER_DEFERRED_EVENT, TX_OR);
 810cfa4:	687b      	ldr	r3, [r7, #4]
 810cfa6:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 810cfaa:	2200      	movs	r2, #0
 810cfac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 810cfb0:	4618      	mov	r0, r3
 810cfb2:	f007 fa4b 	bl	811444c <_tx_event_flags_set>
}
 810cfb6:	bf00      	nop
 810cfb8:	3708      	adds	r7, #8
 810cfba:	46bd      	mov	sp, r7
 810cfbc:	bd80      	pop	{r7, pc}

0810cfbe <_nx_ip_driver_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip, ULONG fragment, ULONG next_hop_address)
{
 810cfbe:	b580      	push	{r7, lr}
 810cfc0:	b09e      	sub	sp, #120	@ 0x78
 810cfc2:	af00      	add	r7, sp, #0
 810cfc4:	60f8      	str	r0, [r7, #12]
 810cfc6:	60b9      	str	r1, [r7, #8]
 810cfc8:	607a      	str	r2, [r7, #4]
 810cfca:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_IP_DRIVER driver_request;
UINT         index;
ULONG        network_mask;
ULONG        network;
UCHAR        loopback = NX_FALSE;
 810cfcc:	2300      	movs	r3, #0
 810cfce:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Initialize the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 810cfd2:	68fb      	ldr	r3, [r7, #12]
 810cfd4:	633b      	str	r3, [r7, #48]	@ 0x30
    driver_request.nx_ip_driver_packet =                packet_ptr;
 810cfd6:	68bb      	ldr	r3, [r7, #8]
 810cfd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 810cfda:	68bb      	ldr	r3, [r7, #8]
 810cfdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810cfde:	637b      	str	r3, [r7, #52]	@ 0x34
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_SEND;
 810cfe0:	2300      	movs	r3, #0
 810cfe2:	61bb      	str	r3, [r7, #24]

    /* Determine if physical mapping is needed by the link driver.  */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_address_mapping_needed)
 810cfe4:	68bb      	ldr	r3, [r7, #8]
 810cfe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810cfe8:	795b      	ldrb	r3, [r3, #5]
 810cfea:	2b00      	cmp	r3, #0
 810cfec:	f000 8179 	beq.w	810d2e2 <_nx_ip_driver_packet_send+0x324>
    {

        /* Get the network and network mask.*/
        network_mask = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network_mask;
 810cff0:	68bb      	ldr	r3, [r7, #8]
 810cff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810cff4:	699b      	ldr	r3, [r3, #24]
 810cff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        network = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network;
 810cff8:	68bb      	ldr	r3, [r7, #8]
 810cffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810cffc:	69db      	ldr	r3, [r3, #28]
 810cffe:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* Determine if an IP limited or directed broadcast is requested.  */
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 810d000:	687b      	ldr	r3, [r7, #4]
 810d002:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d006:	d00d      	beq.n	810d024 <_nx_ip_driver_packet_send+0x66>
            (((destination_ip & network_mask) == network) &&
 810d008:	687a      	ldr	r2, [r7, #4]
 810d00a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810d00c:	4013      	ands	r3, r2
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 810d00e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810d010:	429a      	cmp	r2, r3
 810d012:	d110      	bne.n	810d036 <_nx_ip_driver_packet_send+0x78>
             ((destination_ip & ~network_mask) == ~network_mask)))
 810d014:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810d016:	43da      	mvns	r2, r3
 810d018:	687b      	ldr	r3, [r7, #4]
 810d01a:	401a      	ands	r2, r3
 810d01c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810d01e:	43db      	mvns	r3, r3
            (((destination_ip & network_mask) == network) &&
 810d020:	429a      	cmp	r2, r3
 810d022:	d108      	bne.n	810d036 <_nx_ip_driver_packet_send+0x78>
        {

            /* Build the driver request.  */
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 810d024:	2304      	movs	r3, #4
 810d026:	61bb      	str	r3, [r7, #24]
            driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 810d028:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 810d02c:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 810d02e:	f04f 33ff 	mov.w	r3, #4294967295
 810d032:	627b      	str	r3, [r7, #36]	@ 0x24
 810d034:	e167      	b.n	810d306 <_nx_ip_driver_packet_send+0x348>
        }
        /* Determine if we have a loopback address.  */
        else if (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)
 810d036:	68bb      	ldr	r3, [r7, #8]
 810d038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d03a:	695b      	ldr	r3, [r3, #20]
 810d03c:	687a      	ldr	r2, [r7, #4]
 810d03e:	429a      	cmp	r2, r3
 810d040:	d105      	bne.n	810d04e <_nx_ip_driver_packet_send+0x90>
        {
            loopback = NX_TRUE;
 810d042:	2301      	movs	r3, #1
 810d044:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 810d048:	2300      	movs	r3, #0
 810d04a:	637b      	str	r3, [r7, #52]	@ 0x34
 810d04c:	e15b      	b.n	810d306 <_nx_ip_driver_packet_send+0x348>
        }
        /* Determine if we have a class D multicast address.  */
        else if ((destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE)
 810d04e:	687b      	ldr	r3, [r7, #4]
 810d050:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 810d054:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 810d058:	d133      	bne.n	810d0c2 <_nx_ip_driver_packet_send+0x104>

            /* Yes, we have a class D multicast address.  Derive the physical mapping from
               the class D address.  */

            /* Determine if the group address has been joined in this IP instance.  */
            index =  0;
 810d05a:	2300      	movs	r3, #0
 810d05c:	677b      	str	r3, [r7, #116]	@ 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 810d05e:	e00f      	b.n	810d080 <_nx_ip_driver_packet_send+0xc2>
            {

                /* Determine if the destination address matches the requested address.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_join_list == destination_ip)
 810d060:	68f9      	ldr	r1, [r7, #12]
 810d062:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 810d064:	4613      	mov	r3, r2
 810d066:	009b      	lsls	r3, r3, #2
 810d068:	4413      	add	r3, r2
 810d06a:	009b      	lsls	r3, r3, #2
 810d06c:	440b      	add	r3, r1
 810d06e:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 810d072:	681b      	ldr	r3, [r3, #0]
 810d074:	687a      	ldr	r2, [r7, #4]
 810d076:	429a      	cmp	r2, r3
 810d078:	d006      	beq.n	810d088 <_nx_ip_driver_packet_send+0xca>
                    /* Yes, break the loop!  */
                    break;
                }

                /* Increment the join list index.  */
                index++;
 810d07a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810d07c:	3301      	adds	r3, #1
 810d07e:	677b      	str	r3, [r7, #116]	@ 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 810d080:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810d082:	2b06      	cmp	r3, #6
 810d084:	d9ec      	bls.n	810d060 <_nx_ip_driver_packet_send+0xa2>
 810d086:	e000      	b.n	810d08a <_nx_ip_driver_packet_send+0xcc>
                    break;
 810d088:	bf00      	nop
            }

            /* Determine if the group was joined by this IP instance.  */
            if (index < NX_MAX_MULTICAST_GROUPS)
 810d08a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810d08c:	2b06      	cmp	r3, #6
 810d08e:	d80e      	bhi.n	810d0ae <_nx_ip_driver_packet_send+0xf0>
            {

                /* Determine if the group has loopback enabled.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_loopback_enable)
 810d090:	68f9      	ldr	r1, [r7, #12]
 810d092:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 810d094:	4613      	mov	r3, r2
 810d096:	009b      	lsls	r3, r3, #2
 810d098:	4413      	add	r3, r2
 810d09a:	009b      	lsls	r3, r3, #2
 810d09c:	440b      	add	r3, r1
 810d09e:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 810d0a2:	681b      	ldr	r3, [r3, #0]
 810d0a4:	2b00      	cmp	r3, #0
 810d0a6:	d002      	beq.n	810d0ae <_nx_ip_driver_packet_send+0xf0>
                {
                    loopback = NX_TRUE;
 810d0a8:	2301      	movs	r3, #1
 810d0aa:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
                }
            }

            /* Build the driver request. Derive the physical mapping from
               the class D address.  */
            driver_request.nx_ip_driver_physical_address_msw =  NX_IP_MULTICAST_UPPER;
 810d0ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810d0b2:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  NX_IP_MULTICAST_LOWER | (destination_ip & NX_IP_MULTICAST_MASK);
 810d0b4:	687b      	ldr	r3, [r7, #4]
 810d0b6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 810d0ba:	f043 43bc 	orr.w	r3, r3, #1577058304	@ 0x5e000000
 810d0be:	627b      	str	r3, [r7, #36]	@ 0x24
 810d0c0:	e121      	b.n	810d306 <_nx_ip_driver_packet_send+0x348>

            NX_PARAMETER_NOT_USED(fragment);
            /* Look into the ARP Routing Table to derive the physical address.  */

            /* If we get here, the packet destination is a unicast address.  */
            destination_ip = next_hop_address;
 810d0c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810d0c6:	607b      	str	r3, [r7, #4]

            /* Calculate the hash index for the destination IP address.  */
            index =  (UINT)((destination_ip + (destination_ip >> 8)) & NX_ARP_TABLE_MASK);
 810d0c8:	687b      	ldr	r3, [r7, #4]
 810d0ca:	0a1a      	lsrs	r2, r3, #8
 810d0cc:	687b      	ldr	r3, [r7, #4]
 810d0ce:	4413      	add	r3, r2
 810d0d0:	f003 031f 	and.w	r3, r3, #31
 810d0d4:	677b      	str	r3, [r7, #116]	@ 0x74

            /* Determine if there is an entry for this IP address.  */
            arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 810d0d6:	68fa      	ldr	r2, [r7, #12]
 810d0d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810d0da:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 810d0de:	009b      	lsls	r3, r3, #2
 810d0e0:	4413      	add	r3, r2
 810d0e2:	685b      	ldr	r3, [r3, #4]
 810d0e4:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Loop to look for an ARP match.  */
            while (arp_ptr)
 810d0e6:	e014      	b.n	810d112 <_nx_ip_driver_packet_send+0x154>
            {

                /* Determine if this arp entry matches the destination IP address.  */
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 810d0e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d0ea:	6a1b      	ldr	r3, [r3, #32]
 810d0ec:	687a      	ldr	r2, [r7, #4]
 810d0ee:	429a      	cmp	r2, r3
 810d0f0:	d013      	beq.n	810d11a <_nx_ip_driver_packet_send+0x15c>
                    /* Yes, we found a match.  Get out of the loop!  */
                    break;
                }

                /* Move to the next active ARP entry.  */
                arp_ptr =  arp_ptr -> nx_arp_active_next;
 810d0f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d0f4:	695b      	ldr	r3, [r3, #20]
 810d0f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Determine if we are at the end of the ARP list.  */
                if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 810d0f8:	68fa      	ldr	r2, [r7, #12]
 810d0fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810d0fc:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 810d100:	009b      	lsls	r3, r3, #2
 810d102:	4413      	add	r3, r2
 810d104:	685b      	ldr	r3, [r3, #4]
 810d106:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810d108:	429a      	cmp	r2, r3
 810d10a:	d102      	bne.n	810d112 <_nx_ip_driver_packet_send+0x154>
                {
                    /* Clear the ARP pointer.  */
                    arp_ptr =  NX_NULL;
 810d10c:	2300      	movs	r3, #0
 810d10e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    break;
 810d110:	e004      	b.n	810d11c <_nx_ip_driver_packet_send+0x15e>
            while (arp_ptr)
 810d112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d114:	2b00      	cmp	r3, #0
 810d116:	d1e7      	bne.n	810d0e8 <_nx_ip_driver_packet_send+0x12a>
 810d118:	e000      	b.n	810d11c <_nx_ip_driver_packet_send+0x15e>
                    break;
 810d11a:	bf00      	nop
                }
            }

            /* Determine if we actually found a matching and effective ARP entry.  */
            if ((arp_ptr) && (arp_ptr -> nx_arp_physical_address_msw | arp_ptr -> nx_arp_physical_address_lsw))
 810d11c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d11e:	2b00      	cmp	r3, #0
 810d120:	d023      	beq.n	810d16a <_nx_ip_driver_packet_send+0x1ac>
 810d122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d124:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810d126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d12a:	4313      	orrs	r3, r2
 810d12c:	2b00      	cmp	r3, #0
 810d12e:	d01c      	beq.n	810d16a <_nx_ip_driver_packet_send+0x1ac>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810d130:	f3ef 8310 	mrs	r3, PRIMASK
 810d134:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 810d136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 810d138:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 810d13a:	b672      	cpsid	i
    return(int_posture);
 810d13c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
            {

                /* Disable interrupts temporarily.  */
                TX_DISABLE
 810d13e:	657b      	str	r3, [r7, #84]	@ 0x54

                /* Yes, we have a physical mapping.  Copy the physical address into the driver
                   request structure.  */
                driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 810d140:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d144:	623b      	str	r3, [r7, #32]
                driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 810d146:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d14a:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Move this ARP entry to the head of the list.  */
                ip_ptr -> nx_ip_arp_table[index] =  arp_ptr;
 810d14c:	68fa      	ldr	r2, [r7, #12]
 810d14e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810d150:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 810d154:	009b      	lsls	r3, r3, #2
 810d156:	4413      	add	r3, r2
 810d158:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810d15a:	605a      	str	r2, [r3, #4]
 810d15c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810d15e:	653b      	str	r3, [r7, #80]	@ 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810d160:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810d162:	f383 8810 	msr	PRIMASK, r3
}
 810d166:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE
 810d168:	e0cd      	b.n	810d306 <_nx_ip_driver_packet_send+0x348>
            }
            else
            {

                /* Determine if fragmentation is needed before queue the packet on the ARP waiting queue.  */
                if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 810d16a:	68bb      	ldr	r3, [r7, #8]
 810d16c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810d16e:	68bb      	ldr	r3, [r7, #8]
 810d170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d174:	429a      	cmp	r2, r3
 810d176:	d910      	bls.n	810d19a <_nx_ip_driver_packet_send+0x1dc>
                {

#ifndef NX_DISABLE_FRAGMENTATION
                    /* Check the DF bit flag.  */
                    if ((ip_ptr -> nx_ip_fragment_processing == NX_NULL) || (fragment != NX_FRAGMENT_OKAY))
 810d178:	68fb      	ldr	r3, [r7, #12]
 810d17a:	f8d3 329c 	ldr.w	r3, [r3, #668]	@ 0x29c
 810d17e:	2b00      	cmp	r3, #0
 810d180:	d002      	beq.n	810d188 <_nx_ip_driver_packet_send+0x1ca>
 810d182:	683b      	ldr	r3, [r7, #0]
 810d184:	2b00      	cmp	r3, #0
 810d186:	d008      	beq.n	810d19a <_nx_ip_driver_packet_send+0x1dc>
                    {

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 810d188:	68fb      	ldr	r3, [r7, #12]
 810d18a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d18c:	1c5a      	adds	r2, r3, #1
 810d18e:	68fb      	ldr	r3, [r7, #12]
 810d190:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
                        /* Just release the packet.  */
                        _nx_packet_transmit_release(packet_ptr);
 810d192:	68b8      	ldr	r0, [r7, #8]
 810d194:	f001 fe26 	bl	810ede4 <_nx_packet_transmit_release>

                        /* Return... nothing more can be done!  */
                        return;
 810d198:	e12c      	b.n	810d3f4 <_nx_ip_driver_packet_send+0x436>
                    }
                }

                /* Determine if we actually found a matching ARP entry.  */
                if (arp_ptr)
 810d19a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d19c:	2b00      	cmp	r3, #0
 810d19e:	d052      	beq.n	810d246 <_nx_ip_driver_packet_send+0x288>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810d1a0:	f3ef 8310 	mrs	r3, PRIMASK
 810d1a4:	647b      	str	r3, [r7, #68]	@ 0x44
    return(posture);
 810d1a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    int_posture = __get_interrupt_posture();
 810d1a8:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile ("CPSID i" : : : "memory");
 810d1aa:	b672      	cpsid	i
    return(int_posture);
 810d1ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
                {

                    /* Yes, we have an existing ARP mapping entry.  */

                    /* Disable interrupts temporarily.  */
                    TX_DISABLE
 810d1ae:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Ensure the current packet's queue next pointer to NULL.  */
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 810d1b0:	68bb      	ldr	r3, [r7, #8]
 810d1b2:	2200      	movs	r2, #0
 810d1b4:	61da      	str	r2, [r3, #28]

                    /* Determine if the queue is empty.  */
                    if (arp_ptr -> nx_arp_packets_waiting == NX_NULL)
 810d1b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d1b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d1ba:	2b00      	cmp	r3, #0
 810d1bc:	d109      	bne.n	810d1d2 <_nx_ip_driver_packet_send+0x214>
                    {

                        /* Yes, we have an empty ARP packet queue.  Simply place the
                           packet at the head of the list.  */
                        arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 810d1be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d1c0:	68ba      	ldr	r2, [r7, #8]
 810d1c2:	631a      	str	r2, [r3, #48]	@ 0x30
 810d1c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810d1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810d1c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d1ca:	f383 8810 	msr	PRIMASK, r3
}
 810d1ce:	bf00      	nop
                    /* Call ARP send to send an ARP request.  */
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
                }

                /* Just return!  */
                return;
 810d1d0:	e10f      	b.n	810d3f2 <_nx_ip_driver_packet_send+0x434>
                        last_packet =  arp_ptr -> nx_arp_packets_waiting;
 810d1d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d1d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d1d6:	66bb      	str	r3, [r7, #104]	@ 0x68
                        queued_count = 1;
 810d1d8:	2301      	movs	r3, #1
 810d1da:	663b      	str	r3, [r7, #96]	@ 0x60
                        while (last_packet -> nx_packet_queue_next)
 810d1dc:	e005      	b.n	810d1ea <_nx_ip_driver_packet_send+0x22c>
                            queued_count++;
 810d1de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810d1e0:	3301      	adds	r3, #1
 810d1e2:	663b      	str	r3, [r7, #96]	@ 0x60
                            last_packet =  last_packet -> nx_packet_queue_next;
 810d1e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810d1e6:	69db      	ldr	r3, [r3, #28]
 810d1e8:	66bb      	str	r3, [r7, #104]	@ 0x68
                        while (last_packet -> nx_packet_queue_next)
 810d1ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810d1ec:	69db      	ldr	r3, [r3, #28]
 810d1ee:	2b00      	cmp	r3, #0
 810d1f0:	d1f5      	bne.n	810d1de <_nx_ip_driver_packet_send+0x220>
                        last_packet -> nx_packet_queue_next =  packet_ptr;
 810d1f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810d1f4:	68ba      	ldr	r2, [r7, #8]
 810d1f6:	61da      	str	r2, [r3, #28]
                        remove_packet =  NX_NULL;
 810d1f8:	2300      	movs	r3, #0
 810d1fa:	667b      	str	r3, [r7, #100]	@ 0x64
                        if (queued_count >= NX_ARP_MAX_QUEUE_DEPTH)
 810d1fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810d1fe:	2b03      	cmp	r3, #3
 810d200:	d913      	bls.n	810d22a <_nx_ip_driver_packet_send+0x26c>
                            remove_packet =  arp_ptr -> nx_arp_packets_waiting;
 810d202:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d206:	667b      	str	r3, [r7, #100]	@ 0x64
                            arp_ptr -> nx_arp_packets_waiting =  remove_packet -> nx_packet_queue_next;
 810d208:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810d20a:	69da      	ldr	r2, [r3, #28]
 810d20c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d20e:	631a      	str	r2, [r3, #48]	@ 0x30
                            remove_packet -> nx_packet_queue_next =  NX_NULL;
 810d210:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810d212:	2200      	movs	r2, #0
 810d214:	61da      	str	r2, [r3, #28]
                            ip_ptr -> nx_ip_transmit_resource_errors++;
 810d216:	68fb      	ldr	r3, [r7, #12]
 810d218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810d21a:	1c5a      	adds	r2, r3, #1
 810d21c:	68fb      	ldr	r3, [r7, #12]
 810d21e:	645a      	str	r2, [r3, #68]	@ 0x44
                            ip_ptr -> nx_ip_send_packets_dropped++;
 810d220:	68fb      	ldr	r3, [r7, #12]
 810d222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d224:	1c5a      	adds	r2, r3, #1
 810d226:	68fb      	ldr	r3, [r7, #12]
 810d228:	655a      	str	r2, [r3, #84]	@ 0x54
 810d22a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810d22c:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810d22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d230:	f383 8810 	msr	PRIMASK, r3
}
 810d234:	bf00      	nop
                        if (remove_packet)
 810d236:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810d238:	2b00      	cmp	r3, #0
 810d23a:	f000 80da 	beq.w	810d3f2 <_nx_ip_driver_packet_send+0x434>
                            _nx_packet_transmit_release(remove_packet);
 810d23e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 810d240:	f001 fdd0 	bl	810ede4 <_nx_packet_transmit_release>
                return;
 810d244:	e0d5      	b.n	810d3f2 <_nx_ip_driver_packet_send+0x434>
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 810d246:	68fb      	ldr	r3, [r7, #12]
 810d248:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	@ 0x6e8
 810d24c:	2b00      	cmp	r3, #0
 810d24e:	d00f      	beq.n	810d270 <_nx_ip_driver_packet_send+0x2b2>
                        ((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)))
 810d250:	68fb      	ldr	r3, [r7, #12]
 810d252:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	@ 0x6e8
 810d256:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 810d258:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 810d25c:	0092      	lsls	r2, r2, #2
 810d25e:	68f9      	ldr	r1, [r7, #12]
 810d260:	440a      	add	r2, r1
 810d262:	1d11      	adds	r1, r2, #4
 810d264:	2200      	movs	r2, #0
 810d266:	68f8      	ldr	r0, [r7, #12]
 810d268:	4798      	blx	r3
 810d26a:	4603      	mov	r3, r0
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 810d26c:	2b00      	cmp	r3, #0
 810d26e:	d00d      	beq.n	810d28c <_nx_ip_driver_packet_send+0x2ce>
                        ip_ptr -> nx_ip_transmit_resource_errors++;
 810d270:	68fb      	ldr	r3, [r7, #12]
 810d272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810d274:	1c5a      	adds	r2, r3, #1
 810d276:	68fb      	ldr	r3, [r7, #12]
 810d278:	645a      	str	r2, [r3, #68]	@ 0x44
                        ip_ptr -> nx_ip_send_packets_dropped++;
 810d27a:	68fb      	ldr	r3, [r7, #12]
 810d27c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d27e:	1c5a      	adds	r2, r3, #1
 810d280:	68fb      	ldr	r3, [r7, #12]
 810d282:	655a      	str	r2, [r3, #84]	@ 0x54
                        _nx_packet_transmit_release(packet_ptr);
 810d284:	68b8      	ldr	r0, [r7, #8]
 810d286:	f001 fdad 	bl	810ede4 <_nx_packet_transmit_release>
                        return;
 810d28a:	e0b3      	b.n	810d3f4 <_nx_ip_driver_packet_send+0x436>
                    arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 810d28c:	68fa      	ldr	r2, [r7, #12]
 810d28e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810d290:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 810d294:	009b      	lsls	r3, r3, #2
 810d296:	4413      	add	r3, r2
 810d298:	685b      	ldr	r3, [r3, #4]
 810d29a:	699b      	ldr	r3, [r3, #24]
 810d29c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    arp_ptr -> nx_arp_ip_address =            destination_ip;
 810d29e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d2a0:	687a      	ldr	r2, [r7, #4]
 810d2a2:	621a      	str	r2, [r3, #32]
                    arp_ptr -> nx_arp_physical_address_msw =  0;
 810d2a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d2a6:	2200      	movs	r2, #0
 810d2a8:	625a      	str	r2, [r3, #36]	@ 0x24
                    arp_ptr -> nx_arp_physical_address_lsw =  0;
 810d2aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d2ac:	2200      	movs	r2, #0
 810d2ae:	629a      	str	r2, [r3, #40]	@ 0x28
                    arp_ptr -> nx_arp_entry_next_update =     NX_ARP_UPDATE_RATE;
 810d2b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d2b2:	220a      	movs	r2, #10
 810d2b4:	605a      	str	r2, [r3, #4]
                    arp_ptr -> nx_arp_retries =               0;
 810d2b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d2b8:	2200      	movs	r2, #0
 810d2ba:	609a      	str	r2, [r3, #8]
                    arp_ptr -> nx_arp_ip_interface =          packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 810d2bc:	68bb      	ldr	r3, [r7, #8]
 810d2be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810d2c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d2c2:	62da      	str	r2, [r3, #44]	@ 0x2c
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 810d2c4:	68bb      	ldr	r3, [r7, #8]
 810d2c6:	2200      	movs	r2, #0
 810d2c8:	61da      	str	r2, [r3, #28]
                    arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 810d2ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810d2cc:	68ba      	ldr	r2, [r7, #8]
 810d2ce:	631a      	str	r2, [r3, #48]	@ 0x30
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 810d2d0:	68fb      	ldr	r3, [r7, #12]
 810d2d2:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	@ 0x6f4
 810d2d6:	68ba      	ldr	r2, [r7, #8]
 810d2d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 810d2da:	6879      	ldr	r1, [r7, #4]
 810d2dc:	68f8      	ldr	r0, [r7, #12]
 810d2de:	4798      	blx	r3
                return;
 810d2e0:	e087      	b.n	810d3f2 <_nx_ip_driver_packet_send+0x434>
    {

        /* This IP instance does not require any IP-to-physical mapping.  */

        /* Determine if we have a loopback address.  */
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 810d2e2:	687b      	ldr	r3, [r7, #4]
 810d2e4:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 810d2e8:	d302      	bcc.n	810d2f0 <_nx_ip_driver_packet_send+0x332>
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 810d2ea:	687b      	ldr	r3, [r7, #4]
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 810d2ec:	2b00      	cmp	r3, #0
 810d2ee:	da05      	bge.n	810d2fc <_nx_ip_driver_packet_send+0x33e>
            (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address))
 810d2f0:	68bb      	ldr	r3, [r7, #8]
 810d2f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d2f4:	695b      	ldr	r3, [r3, #20]
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 810d2f6:	687a      	ldr	r2, [r7, #4]
 810d2f8:	429a      	cmp	r2, r3
 810d2fa:	d104      	bne.n	810d306 <_nx_ip_driver_packet_send+0x348>
        {

            /* Yes, we have an internal loopback address.  */
            loopback = NX_TRUE;
 810d2fc:	2301      	movs	r3, #1
 810d2fe:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 810d302:	2300      	movs	r3, #0
 810d304:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Check whether the packet should be loop back. */
    if (loopback == NX_TRUE)
 810d306:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 810d30a:	2b01      	cmp	r3, #1
 810d30c:	d129      	bne.n	810d362 <_nx_ip_driver_packet_send+0x3a4>
    {

        /* Copy the packet so it can be enqueued properly by the receive
           processing.  */
        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 810d30e:	68fb      	ldr	r3, [r7, #12]
 810d310:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 810d314:	f107 0114 	add.w	r1, r7, #20
 810d318:	2300      	movs	r3, #0
 810d31a:	68b8      	ldr	r0, [r7, #8]
 810d31c:	f001 f9de 	bl	810e6dc <_nx_packet_copy>
 810d320:	4603      	mov	r3, r0
 810d322:	2b00      	cmp	r3, #0
 810d324:	d113      	bne.n	810d34e <_nx_ip_driver_packet_send+0x390>
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 810d326:	68fb      	ldr	r3, [r7, #12]
 810d328:	695b      	ldr	r3, [r3, #20]
 810d32a:	1c5a      	adds	r2, r3, #1
 810d32c:	68fb      	ldr	r3, [r7, #12]
 810d32e:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 810d330:	68fb      	ldr	r3, [r7, #12]
 810d332:	699a      	ldr	r2, [r3, #24]
 810d334:	68bb      	ldr	r3, [r7, #8]
 810d336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d338:	4413      	add	r3, r2
 810d33a:	f1a3 0214 	sub.w	r2, r3, #20
 810d33e:	68fb      	ldr	r3, [r7, #12]
 810d340:	619a      	str	r2, [r3, #24]
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_copy);

            /* Send the packet to this IP's receive processing like it came in from the
               driver.  */
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 810d342:	697b      	ldr	r3, [r7, #20]
 810d344:	4619      	mov	r1, r3
 810d346:	68f8      	ldr	r0, [r7, #12]
 810d348:	f000 f96a 	bl	810d620 <_nx_ip_packet_deferred_receive>
 810d34c:	e009      	b.n	810d362 <_nx_ip_driver_packet_send+0x3a4>
#ifndef NX_DISABLE_IP_INFO
        else
        {

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 810d34e:	68fb      	ldr	r3, [r7, #12]
 810d350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d352:	1c5a      	adds	r2, r3, #1
 810d354:	68fb      	ldr	r3, [r7, #12]
 810d356:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Increment the IP transmit resource error count.  */
            ip_ptr -> nx_ip_transmit_resource_errors++;
 810d358:	68fb      	ldr	r3, [r7, #12]
 810d35a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810d35c:	1c5a      	adds	r2, r3, #1
 810d35e:	68fb      	ldr	r3, [r7, #12]
 810d360:	645a      	str	r2, [r3, #68]	@ 0x44
        }
#endif
    }

    /* Check whether the packet should be sent through driver. */
    if (driver_request.nx_ip_driver_interface)
 810d362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d364:	2b00      	cmp	r3, #0
 810d366:	d040      	beq.n	810d3ea <_nx_ip_driver_packet_send+0x42c>
    {

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 810d368:	68bb      	ldr	r3, [r7, #8]
 810d36a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810d36c:	68bb      	ldr	r3, [r7, #8]
 810d36e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d372:	429a      	cmp	r2, r3
 810d374:	d919      	bls.n	810d3aa <_nx_ip_driver_packet_send+0x3ec>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Check the DF bit flag.  */
            if ((ip_ptr -> nx_ip_fragment_processing) && (fragment != NX_DONT_FRAGMENT))
 810d376:	68fb      	ldr	r3, [r7, #12]
 810d378:	f8d3 329c 	ldr.w	r3, [r3, #668]	@ 0x29c
 810d37c:	2b00      	cmp	r3, #0
 810d37e:	d00b      	beq.n	810d398 <_nx_ip_driver_packet_send+0x3da>
 810d380:	683b      	ldr	r3, [r7, #0]
 810d382:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810d386:	d007      	beq.n	810d398 <_nx_ip_driver_packet_send+0x3da>
            {

                /* Fragmentation is needed, call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 810d388:	68fb      	ldr	r3, [r7, #12]
 810d38a:	f8d3 329c 	ldr.w	r3, [r3, #668]	@ 0x29c
 810d38e:	f107 0218 	add.w	r2, r7, #24
 810d392:	4610      	mov	r0, r2
 810d394:	4798      	blx	r3
                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
            }

            /* In either case, this packet send is complete, just return.  */
            return;
 810d396:	e02d      	b.n	810d3f4 <_nx_ip_driver_packet_send+0x436>
                ip_ptr -> nx_ip_send_packets_dropped++;
 810d398:	68fb      	ldr	r3, [r7, #12]
 810d39a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d39c:	1c5a      	adds	r2, r3, #1
 810d39e:	68fb      	ldr	r3, [r7, #12]
 810d3a0:	655a      	str	r2, [r3, #84]	@ 0x54
                _nx_packet_transmit_release(packet_ptr);
 810d3a2:	68b8      	ldr	r0, [r7, #8]
 810d3a4:	f001 fd1e 	bl	810ede4 <_nx_packet_transmit_release>
            return;
 810d3a8:	e024      	b.n	810d3f4 <_nx_ip_driver_packet_send+0x436>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packet sent count.  */
        ip_ptr -> nx_ip_total_packets_sent++;
 810d3aa:	68fb      	ldr	r3, [r7, #12]
 810d3ac:	695b      	ldr	r3, [r3, #20]
 810d3ae:	1c5a      	adds	r2, r3, #1
 810d3b0:	68fb      	ldr	r3, [r7, #12]
 810d3b2:	615a      	str	r2, [r3, #20]

        /* Increment the IP bytes sent count.  */
        ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 810d3b4:	68fb      	ldr	r3, [r7, #12]
 810d3b6:	699a      	ldr	r2, [r3, #24]
 810d3b8:	68bb      	ldr	r3, [r7, #8]
 810d3ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d3bc:	4413      	add	r3, r2
 810d3be:	f1a3 0214 	sub.w	r2, r3, #20
 810d3c2:	68fb      	ldr	r3, [r7, #12]
 810d3c4:	619a      	str	r2, [r3, #24]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Driver entry must not be NULL. */
        NX_ASSERT(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry != NX_NULL);
 810d3c6:	68bb      	ldr	r3, [r7, #8]
 810d3c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d3ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d3cc:	2b00      	cmp	r3, #0
 810d3ce:	d104      	bne.n	810d3da <_nx_ip_driver_packet_send+0x41c>
 810d3d0:	f04f 30ff 	mov.w	r0, #4294967295
 810d3d4:	f008 fa82 	bl	81158dc <_tx_thread_sleep>
 810d3d8:	e7fa      	b.n	810d3d0 <_nx_ip_driver_packet_send+0x412>

        /* Broadcast packet.  */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 810d3da:	68bb      	ldr	r3, [r7, #8]
 810d3dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d3de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d3e0:	f107 0218 	add.w	r2, r7, #24
 810d3e4:	4610      	mov	r0, r2
 810d3e6:	4798      	blx	r3
 810d3e8:	e004      	b.n	810d3f4 <_nx_ip_driver_packet_send+0x436>
    }
    else
    {

        /* Release the transmit packet.  */
        _nx_packet_transmit_release(packet_ptr);
 810d3ea:	68b8      	ldr	r0, [r7, #8]
 810d3ec:	f001 fcfa 	bl	810ede4 <_nx_packet_transmit_release>
 810d3f0:	e000      	b.n	810d3f4 <_nx_ip_driver_packet_send+0x436>
                return;
 810d3f2:	bf00      	nop
    }
}
 810d3f4:	3778      	adds	r7, #120	@ 0x78
 810d3f6:	46bd      	mov	sp, r7
 810d3f8:	bd80      	pop	{r7, pc}

0810d3fa <_nx_ip_fast_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_ip_fast_periodic_timer_entry(ULONG ip_address)
{
 810d3fa:	b580      	push	{r7, lr}
 810d3fc:	b084      	sub	sp, #16
 810d3fe:	af00      	add	r7, sp, #0
 810d400:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 810d402:	687b      	ldr	r3, [r7, #4]
 810d404:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_FAST_EVENT, TX_OR);
 810d406:	68fb      	ldr	r3, [r7, #12]
 810d408:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 810d40c:	2200      	movs	r2, #0
 810d40e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 810d412:	4618      	mov	r0, r3
 810d414:	f007 f81a 	bl	811444c <_tx_event_flags_set>
}
 810d418:	bf00      	nop
 810d41a:	3710      	adds	r7, #16
 810d41c:	46bd      	mov	sp, r7
 810d41e:	bd80      	pop	{r7, pc}

0810d420 <_nx_ip_fast_periodic_timer_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_fast_periodic_timer_create(NX_IP *ip_ptr)
{
 810d420:	b580      	push	{r7, lr}
 810d422:	b088      	sub	sp, #32
 810d424:	af04      	add	r7, sp, #16
 810d426:	6078      	str	r0, [r7, #4]

ULONG _nx_ip_fast_timer_rate;

    if (ip_ptr -> nx_ip_fast_periodic_timer_created)
 810d428:	687b      	ldr	r3, [r7, #4]
 810d42a:	f8d3 3624 	ldr.w	r3, [r3, #1572]	@ 0x624
 810d42e:	2b00      	cmp	r3, #0
 810d430:	d116      	bne.n	810d460 <_nx_ip_fast_periodic_timer_create+0x40>
    {
        return;
    }

    _nx_ip_fast_timer_rate =  (NX_IP_PERIODIC_RATE + (NX_IP_FAST_TIMER_RATE - 1)) / NX_IP_FAST_TIMER_RATE;
 810d432:	230a      	movs	r3, #10
 810d434:	60fb      	str	r3, [r7, #12]

    /* Create the fast TCP timer.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr -> nx_ip_name,
 810d436:	687b      	ldr	r3, [r7, #4]
 810d438:	f503 60c5 	add.w	r0, r3, #1576	@ 0x628
 810d43c:	687b      	ldr	r3, [r7, #4]
 810d43e:	6859      	ldr	r1, [r3, #4]
 810d440:	687a      	ldr	r2, [r7, #4]
 810d442:	2301      	movs	r3, #1
 810d444:	9302      	str	r3, [sp, #8]
 810d446:	68fb      	ldr	r3, [r7, #12]
 810d448:	9301      	str	r3, [sp, #4]
 810d44a:	68fb      	ldr	r3, [r7, #12]
 810d44c:	9300      	str	r3, [sp, #0]
 810d44e:	4613      	mov	r3, r2
 810d450:	4a05      	ldr	r2, [pc, #20]	@ (810d468 <_nx_ip_fast_periodic_timer_create+0x48>)
 810d452:	f008 fda3 	bl	8115f9c <_tx_timer_create>
                    _nx_ip_fast_timer_rate, _nx_ip_fast_timer_rate, TX_AUTO_ACTIVATE);

    NX_TIMER_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_fast_periodic_timer), ip_ptr)

    /* Set the flag to indicate that the fast timer has been created. */
    ip_ptr -> nx_ip_fast_periodic_timer_created = 1;
 810d456:	687b      	ldr	r3, [r7, #4]
 810d458:	2201      	movs	r2, #1
 810d45a:	f8c3 2624 	str.w	r2, [r3, #1572]	@ 0x624
 810d45e:	e000      	b.n	810d462 <_nx_ip_fast_periodic_timer_create+0x42>
        return;
 810d460:	bf00      	nop
}
 810d462:	3710      	adds	r7, #16
 810d464:	46bd      	mov	sp, r7
 810d466:	bd80      	pop	{r7, pc}
 810d468:	0810d3fb 	.word	0x0810d3fb

0810d46c <_nx_ip_header_add>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_header_add(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG source_ip, ULONG destination_ip,
                        ULONG type_of_service, ULONG time_to_live,  ULONG protocol, ULONG fragment)
{
 810d46c:	b580      	push	{r7, lr}
 810d46e:	b08a      	sub	sp, #40	@ 0x28
 810d470:	af02      	add	r7, sp, #8
 810d472:	60f8      	str	r0, [r7, #12]
 810d474:	60b9      	str	r1, [r7, #8]
 810d476:	607a      	str	r2, [r7, #4]
 810d478:	603b      	str	r3, [r7, #0]
ULONG           router_alert = 0;
 810d47a:	2300      	movs	r3, #0
 810d47c:	61fb      	str	r3, [r7, #28]
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
ULONG           val;

#ifndef NX_DISABLE_IGMPV2
    /* Check IGMPv2 protocol. */
    if ((protocol == NX_IP_IGMP) && (ip_ptr -> nx_ip_igmp_router_version == NX_IGMP_HOST_VERSION_2))
 810d47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d480:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810d484:	d106      	bne.n	810d494 <_nx_ip_header_add+0x28>
 810d486:	68fb      	ldr	r3, [r7, #12]
 810d488:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 810d48c:	2b02      	cmp	r3, #2
 810d48e:	d101      	bne.n	810d494 <_nx_ip_header_add+0x28>
    {
        router_alert = 4;
 810d490:	2304      	movs	r3, #4
 810d492:	61fb      	str	r3, [r7, #28]
    }
#endif

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 810d494:	68bb      	ldr	r3, [r7, #8]
 810d496:	689a      	ldr	r2, [r3, #8]
 810d498:	69f9      	ldr	r1, [r7, #28]
 810d49a:	f06f 0313 	mvn.w	r3, #19
 810d49e:	1a5b      	subs	r3, r3, r1
 810d4a0:	441a      	add	r2, r3
 810d4a2:	68bb      	ldr	r3, [r7, #8]
 810d4a4:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 810d4a6:	68bb      	ldr	r3, [r7, #8]
 810d4a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810d4aa:	69fb      	ldr	r3, [r7, #28]
 810d4ac:	4413      	add	r3, r2
 810d4ae:	f103 0214 	add.w	r2, r3, #20
 810d4b2:	68bb      	ldr	r3, [r7, #8]
 810d4b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Assert prepend pointer is no less than data start pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 810d4b6:	68bb      	ldr	r3, [r7, #8]
 810d4b8:	689a      	ldr	r2, [r3, #8]
 810d4ba:	68bb      	ldr	r3, [r7, #8]
 810d4bc:	691b      	ldr	r3, [r3, #16]
 810d4be:	429a      	cmp	r2, r3
 810d4c0:	d204      	bcs.n	810d4cc <_nx_ip_header_add+0x60>
 810d4c2:	f04f 30ff 	mov.w	r0, #4294967295
 810d4c6:	f008 fa09 	bl	81158dc <_tx_thread_sleep>
 810d4ca:	e7fa      	b.n	810d4c2 <_nx_ip_header_add+0x56>

    /* Setup the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 810d4cc:	68bb      	ldr	r3, [r7, #8]
 810d4ce:	689b      	ldr	r3, [r3, #8]
 810d4d0:	61bb      	str	r3, [r7, #24]
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 810d4d2:	68bb      	ldr	r3, [r7, #8]
 810d4d4:	689a      	ldr	r2, [r3, #8]
 810d4d6:	68bb      	ldr	r3, [r7, #8]
 810d4d8:	635a      	str	r2, [r3, #52]	@ 0x34
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 810d4da:	68bb      	ldr	r3, [r7, #8]
 810d4dc:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
                                                       sizeof(NX_IPV4_HEADER) + router_alert);
 810d4e0:	69fb      	ldr	r3, [r7, #28]
 810d4e2:	b2db      	uxtb	r3, r3
 810d4e4:	4413      	add	r3, r2
 810d4e6:	b2db      	uxtb	r3, r3
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 810d4e8:	3314      	adds	r3, #20
 810d4ea:	b2da      	uxtb	r2, r3
 810d4ec:	68bb      	ldr	r3, [r7, #8]
 810d4ee:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

    /* Determine if this is an identical copy for TCP retransmission.
       RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 810d4f2:	68bb      	ldr	r3, [r7, #8]
 810d4f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d4f8:	2b01      	cmp	r3, #1
 810d4fa:	d101      	bne.n	810d500 <_nx_ip_header_add+0x94>
    {

        /* Yes, this an identical copy for TCP retransmission.
           The IP header has been added, return.  */
        return(NX_SUCCESS);
 810d4fc:	2300      	movs	r3, #0
 810d4fe:	e076      	b.n	810d5ee <_nx_ip_header_add+0x182>
    }

    /* Build the IP header.  */

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 810d500:	69fb      	ldr	r3, [r7, #28]
 810d502:	2b00      	cmp	r3, #0
 810d504:	d009      	beq.n	810d51a <_nx_ip_header_add+0xae>

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
                                                        (NX_IP_HEADER_LENGTH_ENCODE_6 << 24) |
                                                        type_of_service |
                                                        (0xFFFF & packet_ptr -> nx_packet_length));
 810d506:	68bb      	ldr	r3, [r7, #8]
 810d508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d50a:	b29a      	uxth	r2, r3
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
 810d50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d50e:	4313      	orrs	r3, r2
 810d510:	f043 428c 	orr.w	r2, r3, #1174405120	@ 0x46000000
 810d514:	69bb      	ldr	r3, [r7, #24]
 810d516:	601a      	str	r2, [r3, #0]
 810d518:	e008      	b.n	810d52c <_nx_ip_header_add+0xc0>
    else
#endif
    {

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 810d51a:	68bb      	ldr	r3, [r7, #8]
 810d51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d51e:	b29a      	uxth	r2, r3
 810d520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d522:	4313      	orrs	r3, r2
 810d524:	f043 428a 	orr.w	r2, r3, #1157627904	@ 0x45000000
 810d528:	69bb      	ldr	r3, [r7, #24]
 810d52a:	601a      	str	r2, [r3, #0]
    }

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 810d52c:	68fb      	ldr	r3, [r7, #12]
 810d52e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 810d532:	1c59      	adds	r1, r3, #1
 810d534:	68fa      	ldr	r2, [r7, #12]
 810d536:	f8c2 1134 	str.w	r1, [r2, #308]	@ 0x134
 810d53a:	041a      	lsls	r2, r3, #16
 810d53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d53e:	431a      	orrs	r2, r3
 810d540:	69bb      	ldr	r3, [r7, #24]
 810d542:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 810d544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d546:	061a      	lsls	r2, r3, #24
 810d548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d54a:	431a      	orrs	r2, r3
 810d54c:	69bb      	ldr	r3, [r7, #24]
 810d54e:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  source_ip;
 810d550:	69bb      	ldr	r3, [r7, #24]
 810d552:	687a      	ldr	r2, [r7, #4]
 810d554:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  destination_ip;
 810d556:	69bb      	ldr	r3, [r7, #24]
 810d558:	683a      	ldr	r2, [r7, #0]
 810d55a:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 810d55c:	69fb      	ldr	r3, [r7, #28]
 810d55e:	2b00      	cmp	r3, #0
 810d560:	d004      	beq.n	810d56c <_nx_ip_header_add+0x100>
    {

        /* Append Router Alert Option. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))) = (NX_IP_OPTION_COPY_FLAG |
 810d562:	68bb      	ldr	r3, [r7, #8]
 810d564:	689b      	ldr	r3, [r3, #8]
 810d566:	3314      	adds	r3, #20
 810d568:	4a23      	ldr	r2, [pc, #140]	@ (810d5f8 <_nx_ip_header_add+0x18c>)
 810d56a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 810d56c:	69bb      	ldr	r3, [r7, #24]
 810d56e:	681b      	ldr	r3, [r3, #0]
 810d570:	ba1a      	rev	r2, r3
 810d572:	69bb      	ldr	r3, [r7, #24]
 810d574:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 810d576:	69bb      	ldr	r3, [r7, #24]
 810d578:	685b      	ldr	r3, [r3, #4]
 810d57a:	ba1a      	rev	r2, r3
 810d57c:	69bb      	ldr	r3, [r7, #24]
 810d57e:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 810d580:	69bb      	ldr	r3, [r7, #24]
 810d582:	689b      	ldr	r3, [r3, #8]
 810d584:	ba1a      	rev	r2, r3
 810d586:	69bb      	ldr	r3, [r7, #24]
 810d588:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 810d58a:	69bb      	ldr	r3, [r7, #24]
 810d58c:	68db      	ldr	r3, [r3, #12]
 810d58e:	ba1a      	rev	r2, r3
 810d590:	69bb      	ldr	r3, [r7, #24]
 810d592:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 810d594:	69bb      	ldr	r3, [r7, #24]
 810d596:	691b      	ldr	r3, [r3, #16]
 810d598:	ba1a      	rev	r2, r3
 810d59a:	69bb      	ldr	r3, [r7, #24]
 810d59c:	611a      	str	r2, [r3, #16]
#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 810d59e:	69fb      	ldr	r3, [r7, #28]
 810d5a0:	2b00      	cmp	r3, #0
 810d5a2:	d008      	beq.n	810d5b6 <_nx_ip_header_add+0x14a>
    {

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_CHANGE_ULONG_ENDIAN(*((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))));
 810d5a4:	68bb      	ldr	r3, [r7, #8]
 810d5a6:	689b      	ldr	r3, [r3, #8]
 810d5a8:	3314      	adds	r3, #20
 810d5aa:	681a      	ldr	r2, [r3, #0]
 810d5ac:	68bb      	ldr	r3, [r7, #8]
 810d5ae:	689b      	ldr	r3, [r3, #8]
 810d5b0:	3314      	adds	r3, #20
 810d5b2:	ba12      	rev	r2, r2
 810d5b4:	601a      	str	r2, [r3, #0]
    if (compute_checksum)
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* Length is the size of IP header, including options */
                                           (UINT)(20 + router_alert),
 810d5b6:	69fb      	ldr	r3, [r7, #28]
 810d5b8:	f103 0214 	add.w	r2, r3, #20
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 810d5bc:	2300      	movs	r3, #0
 810d5be:	9300      	str	r3, [sp, #0]
 810d5c0:	2300      	movs	r3, #0
 810d5c2:	2104      	movs	r1, #4
 810d5c4:	68b8      	ldr	r0, [r7, #8]
 810d5c6:	f7ff f9b8 	bl	810c93a <_nx_ip_checksum_compute>
 810d5ca:	4603      	mov	r3, r0
 810d5cc:	617b      	str	r3, [r7, #20]
                                           /* IPv4 header checksum does not use src/dest addresses */
                                           NULL, NULL);

        val = (ULONG)(~checksum);
 810d5ce:	697b      	ldr	r3, [r7, #20]
 810d5d0:	43db      	mvns	r3, r3
 810d5d2:	613b      	str	r3, [r7, #16]
        val = val & NX_LOWER_16_MASK;
 810d5d4:	693b      	ldr	r3, [r7, #16]
 810d5d6:	b29b      	uxth	r3, r3
 810d5d8:	613b      	str	r3, [r7, #16]

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 810d5da:	693b      	ldr	r3, [r7, #16]
 810d5dc:	ba1b      	rev	r3, r3
 810d5de:	613b      	str	r3, [r7, #16]

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 810d5e0:	69bb      	ldr	r3, [r7, #24]
 810d5e2:	689a      	ldr	r2, [r3, #8]
 810d5e4:	693b      	ldr	r3, [r7, #16]
 810d5e6:	431a      	orrs	r2, r3
 810d5e8:	69bb      	ldr	r3, [r7, #24]
 810d5ea:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Return...  */
    return(NX_SUCCESS);
 810d5ec:	2300      	movs	r3, #0
}
 810d5ee:	4618      	mov	r0, r3
 810d5f0:	3720      	adds	r7, #32
 810d5f2:	46bd      	mov	sp, r7
 810d5f4:	bd80      	pop	{r7, pc}
 810d5f6:	bf00      	nop
 810d5f8:	94040000 	.word	0x94040000

0810d5fc <_nx_ip_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_initialize(VOID)
{
 810d5fc:	b480      	push	{r7}
 810d5fe:	af00      	add	r7, sp, #0

    /* Initialize the created IP instance variables.  */
    _nx_ip_created_ptr =     NX_NULL;
 810d600:	4b05      	ldr	r3, [pc, #20]	@ (810d618 <_nx_ip_initialize+0x1c>)
 810d602:	2200      	movs	r2, #0
 810d604:	601a      	str	r2, [r3, #0]
    _nx_ip_created_count =   0;
 810d606:	4b05      	ldr	r3, [pc, #20]	@ (810d61c <_nx_ip_initialize+0x20>)
 810d608:	2200      	movs	r2, #0
 810d60a:	601a      	str	r2, [r3, #0]
}
 810d60c:	bf00      	nop
 810d60e:	46bd      	mov	sp, r7
 810d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d614:	4770      	bx	lr
 810d616:	bf00      	nop
 810d618:	200580bc 	.word	0x200580bc
 810d61c:	200580c0 	.word	0x200580c0

0810d620 <_nx_ip_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 810d620:	b580      	push	{r7, lr}
 810d622:	b088      	sub	sp, #32
 810d624:	af00      	add	r7, sp, #0
 810d626:	6078      	str	r0, [r7, #4]
 810d628:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810d62a:	f3ef 8310 	mrs	r3, PRIMASK
 810d62e:	61bb      	str	r3, [r7, #24]
    return(posture);
 810d630:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 810d632:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 810d634:	b672      	cpsid	i
    return(int_posture);
 810d636:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 810d638:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if the deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_deferred_received_packet_head)
 810d63a:	687b      	ldr	r3, [r7, #4]
 810d63c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 810d640:	2b00      	cmp	r3, #0
 810d642:	d011      	beq.n	810d668 <_nx_ip_packet_deferred_receive+0x48>
    {

        /* Not empty, just place the packet at the end of the queue.  */
        (ip_ptr -> nx_ip_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 810d644:	687b      	ldr	r3, [r7, #4]
 810d646:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 810d64a:	683a      	ldr	r2, [r7, #0]
 810d64c:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 810d64e:	683b      	ldr	r3, [r7, #0]
 810d650:	2200      	movs	r2, #0
 810d652:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 810d654:	687b      	ldr	r3, [r7, #4]
 810d656:	683a      	ldr	r2, [r7, #0]
 810d658:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 810d65c:	69fb      	ldr	r3, [r7, #28]
 810d65e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810d660:	693b      	ldr	r3, [r7, #16]
 810d662:	f383 8810 	msr	PRIMASK, r3
}
 810d666:	e019      	b.n	810d69c <_nx_ip_packet_deferred_receive+0x7c>
    {

        /* Empty deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the deferred processing
           queue.  */
        ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr;
 810d668:	687b      	ldr	r3, [r7, #4]
 810d66a:	683a      	ldr	r2, [r7, #0]
 810d66c:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 810d670:	687b      	ldr	r3, [r7, #4]
 810d672:	683a      	ldr	r2, [r7, #0]
 810d674:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
        packet_ptr -> nx_packet_queue_next =             NX_NULL;
 810d678:	683b      	ldr	r3, [r7, #0]
 810d67a:	2200      	movs	r2, #0
 810d67c:	61da      	str	r2, [r3, #28]
 810d67e:	69fb      	ldr	r3, [r7, #28]
 810d680:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810d682:	68fb      	ldr	r3, [r7, #12]
 810d684:	f383 8810 	msr	PRIMASK, r3
}
 810d688:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the IP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RECEIVE_EVENT, TX_OR);
 810d68a:	687b      	ldr	r3, [r7, #4]
 810d68c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 810d690:	2200      	movs	r2, #0
 810d692:	2108      	movs	r1, #8
 810d694:	4618      	mov	r0, r3
 810d696:	f006 fed9 	bl	811444c <_tx_event_flags_set>
    }
}
 810d69a:	bf00      	nop
 810d69c:	bf00      	nop
 810d69e:	3720      	adds	r7, #32
 810d6a0:	46bd      	mov	sp, r7
 810d6a2:	bd80      	pop	{r7, pc}

0810d6a4 <_nx_ip_packet_receive>:
/*                                            added new ip filter,        */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 810d6a4:	b580      	push	{r7, lr}
 810d6a6:	b084      	sub	sp, #16
 810d6a8:	af00      	add	r7, sp, #0
 810d6aa:	6078      	str	r0, [r7, #4]
 810d6ac:	6039      	str	r1, [r7, #0]
UCHAR version_byte;


#ifndef NX_DISABLE_IP_INFO
    /* Increment the IP packet count.  */
    ip_ptr -> nx_ip_total_packets_received++;
 810d6ae:	687b      	ldr	r3, [r7, #4]
 810d6b0:	69db      	ldr	r3, [r3, #28]
 810d6b2:	1c5a      	adds	r2, r3, #1
 810d6b4:	687b      	ldr	r3, [r7, #4]
 810d6b6:	61da      	str	r2, [r3, #28]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* If packet_ptr -> nx_packet_interface_ptr is not set, stamp the packet with interface[0].
       Legacy Ethernet drivers do not stamp incoming packets. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 810d6b8:	683b      	ldr	r3, [r7, #0]
 810d6ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d6bc:	2b00      	cmp	r3, #0
 810d6be:	d104      	bne.n	810d6ca <_nx_ip_packet_receive+0x26>
    {
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[0]);
 810d6c0:	687b      	ldr	r3, [r7, #4]
 810d6c2:	f203 7224 	addw	r2, r3, #1828	@ 0x724
 810d6c6:	683b      	ldr	r3, [r7, #0]
 810d6c8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    version_byte =  *(packet_ptr -> nx_packet_prepend_ptr);
 810d6ca:	683b      	ldr	r3, [r7, #0]
 810d6cc:	689b      	ldr	r3, [r3, #8]
 810d6ce:	781b      	ldrb	r3, [r3, #0]
 810d6d0:	73fb      	strb	r3, [r7, #15]

    /* Check the version number */
    ip_version = (version_byte >> 4);
 810d6d2:	7bfb      	ldrb	r3, [r7, #15]
 810d6d4:	091b      	lsrs	r3, r3, #4
 810d6d6:	73bb      	strb	r3, [r7, #14]

    packet_ptr -> nx_packet_ip_version = ip_version;
 810d6d8:	683b      	ldr	r3, [r7, #0]
 810d6da:	7bba      	ldrb	r2, [r7, #14]
 810d6dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 810d6e0:	683b      	ldr	r3, [r7, #0]
 810d6e2:	689a      	ldr	r2, [r3, #8]
 810d6e4:	683b      	ldr	r3, [r7, #0]
 810d6e6:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* NX_ENABLE_IP_PACKET_FILTER */

#ifndef NX_DISABLE_IPV4

    /* Process the packet according to IP version. */
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 810d6e8:	7bbb      	ldrb	r3, [r7, #14]
 810d6ea:	2b04      	cmp	r3, #4
 810d6ec:	d10b      	bne.n	810d706 <_nx_ip_packet_receive+0x62>
 810d6ee:	687b      	ldr	r3, [r7, #4]
 810d6f0:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	@ 0x7bc
 810d6f4:	2b00      	cmp	r3, #0
 810d6f6:	d006      	beq.n	810d706 <_nx_ip_packet_receive+0x62>
    {

        /* Call the IPv4 packet handler. */
        (ip_ptr -> nx_ipv4_packet_receive)(ip_ptr, packet_ptr);
 810d6f8:	687b      	ldr	r3, [r7, #4]
 810d6fa:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	@ 0x7bc
 810d6fe:	6839      	ldr	r1, [r7, #0]
 810d700:	6878      	ldr	r0, [r7, #4]
 810d702:	4798      	blx	r3
        return;
 810d704:	e00d      	b.n	810d722 <_nx_ip_packet_receive+0x7e>
        not defined.  In this case, the packet is reclaimed. */

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP invalid packet error.  */
    ip_ptr -> nx_ip_invalid_packets++;
 810d706:	687b      	ldr	r3, [r7, #4]
 810d708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d70a:	1c5a      	adds	r2, r3, #1
 810d70c:	687b      	ldr	r3, [r7, #4]
 810d70e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Increment the IP receive packets dropped count.  */
    ip_ptr -> nx_ip_receive_packets_dropped++;
 810d710:	687b      	ldr	r3, [r7, #4]
 810d712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810d714:	1c5a      	adds	r2, r3, #1
 810d716:	687b      	ldr	r3, [r7, #4]
 810d718:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

    _nx_packet_release(packet_ptr);
 810d71a:	6838      	ldr	r0, [r7, #0]
 810d71c:	f001 faac 	bl	810ec78 <_nx_packet_release>

    return;
 810d720:	bf00      	nop
}
 810d722:	3710      	adds	r7, #16
 810d724:	46bd      	mov	sp, r7
 810d726:	bd80      	pop	{r7, pc}

0810d728 <_nx_ip_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                         ULONG destination_ip, ULONG type_of_service, ULONG time_to_live,
                         ULONG protocol, ULONG fragment, ULONG next_hop_address)
{
 810d728:	b580      	push	{r7, lr}
 810d72a:	b088      	sub	sp, #32
 810d72c:	af04      	add	r7, sp, #16
 810d72e:	60f8      	str	r0, [r7, #12]
 810d730:	60b9      	str	r1, [r7, #8]
 810d732:	607a      	str	r2, [r7, #4]
 810d734:	603b      	str	r3, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_IP_INFO

    /* Increment the total send requests counter.  */
    ip_ptr -> nx_ip_total_packet_send_requests++;
 810d736:	68fb      	ldr	r3, [r7, #12]
 810d738:	691b      	ldr	r3, [r3, #16]
 810d73a:	1c5a      	adds	r2, r3, #1
 810d73c:	68fb      	ldr	r3, [r7, #12]
 810d73e:	611a      	str	r2, [r3, #16]
#endif

    /* Make sure the packet interface is set. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 810d740:	68bb      	ldr	r3, [r7, #8]
 810d742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d744:	2b00      	cmp	r3, #0
 810d746:	d114      	bne.n	810d772 <_nx_ip_packet_send+0x4a>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_transmit_packets++;
 810d748:	68fb      	ldr	r3, [r7, #12]
 810d74a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d74c:	1c5a      	adds	r2, r3, #1
 810d74e:	68fb      	ldr	r3, [r7, #12]
 810d750:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* !NX_DISABLE_IP_INFO */

        /* Prepend the IP header to the packet.  First, make room for the IP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 810d752:	68bb      	ldr	r3, [r7, #8]
 810d754:	689b      	ldr	r3, [r3, #8]
 810d756:	f1a3 0214 	sub.w	r2, r3, #20
 810d75a:	68bb      	ldr	r3, [r7, #8]
 810d75c:	609a      	str	r2, [r3, #8]

        /* Increase the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 810d75e:	68bb      	ldr	r3, [r7, #8]
 810d760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d762:	f103 0214 	add.w	r2, r3, #20
 810d766:	68bb      	ldr	r3, [r7, #8]
 810d768:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Release the packet.  */
        _nx_packet_transmit_release(packet_ptr);
 810d76a:	68b8      	ldr	r0, [r7, #8]
 810d76c:	f001 fb3a 	bl	810ede4 <_nx_packet_transmit_release>

        /* Return... nothing more can be done!  */
        return;
 810d770:	e03b      	b.n	810d7ea <_nx_ip_packet_send+0xc2>
    if (!is_hw_processed)
#endif /* NX_IPSEC_ENABLE  */
    {

        /* Add the IP Header to the packet.  */
        _nx_ip_header_add(ip_ptr, packet_ptr, packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_address,
 810d772:	68bb      	ldr	r3, [r7, #8]
 810d774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d776:	695a      	ldr	r2, [r3, #20]
 810d778:	6a3b      	ldr	r3, [r7, #32]
 810d77a:	9303      	str	r3, [sp, #12]
 810d77c:	69fb      	ldr	r3, [r7, #28]
 810d77e:	9302      	str	r3, [sp, #8]
 810d780:	69bb      	ldr	r3, [r7, #24]
 810d782:	9301      	str	r3, [sp, #4]
 810d784:	683b      	ldr	r3, [r7, #0]
 810d786:	9300      	str	r3, [sp, #0]
 810d788:	687b      	ldr	r3, [r7, #4]
 810d78a:	68b9      	ldr	r1, [r7, #8]
 810d78c:	68f8      	ldr	r0, [r7, #12]
 810d78e:	f7ff fe6d 	bl	810d46c <_nx_ip_header_add>
    }

#endif

    /* If the next hop address is null, indicates the specified interface is unreached.  */
    if (next_hop_address == 0)
 810d792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d794:	2b00      	cmp	r3, #0
 810d796:	d120      	bne.n	810d7da <_nx_ip_packet_send+0xb2>
    {

        /* Check whether the forward feature is enabled.  */
        if (ip_ptr -> nx_ip_forward_packet_process)
 810d798:	68fb      	ldr	r3, [r7, #12]
 810d79a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 810d79e:	2b00      	cmp	r3, #0
 810d7a0:	d00b      	beq.n	810d7ba <_nx_ip_packet_send+0x92>
        {

            /* Initialize the interface.  */
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 810d7a2:	68bb      	ldr	r3, [r7, #8]
 810d7a4:	2200      	movs	r2, #0
 810d7a6:	631a      	str	r2, [r3, #48]	@ 0x30

            /* Figure out the best interface to send the packet on. */
            _nx_ip_route_find(ip_ptr, destination_ip, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr, &next_hop_address);
 810d7a8:	68bb      	ldr	r3, [r7, #8]
 810d7aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 810d7ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810d7b2:	6879      	ldr	r1, [r7, #4]
 810d7b4:	68f8      	ldr	r0, [r7, #12]
 810d7b6:	f000 f82d 	bl	810d814 <_nx_ip_route_find>
        }

        /* Make sure the packet interface and next hop address are set. */
        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        if ((packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL) || (next_hop_address == 0))
 810d7ba:	68bb      	ldr	r3, [r7, #8]
 810d7bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d7be:	2b00      	cmp	r3, #0
 810d7c0:	d002      	beq.n	810d7c8 <_nx_ip_packet_send+0xa0>
 810d7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d7c4:	2b00      	cmp	r3, #0
 810d7c6:	d108      	bne.n	810d7da <_nx_ip_packet_send+0xb2>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_transmit_packets++;
 810d7c8:	68fb      	ldr	r3, [r7, #12]
 810d7ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d7cc:	1c5a      	adds	r2, r3, #1
 810d7ce:	68fb      	ldr	r3, [r7, #12]
 810d7d0:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* !NX_DISABLE_IP_INFO */

            /* Release the packet.  */
            _nx_packet_transmit_release(packet_ptr);
 810d7d2:	68b8      	ldr	r0, [r7, #8]
 810d7d4:	f001 fb06 	bl	810ede4 <_nx_packet_transmit_release>

            /* Return... nothing more can be done!  */
            return;
 810d7d8:	e007      	b.n	810d7ea <_nx_ip_packet_send+0xc2>
        }
    }

    /* Directly send the packet.  */
    _nx_ip_driver_packet_send(ip_ptr, packet_ptr, destination_ip, fragment, next_hop_address);
 810d7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d7dc:	9300      	str	r3, [sp, #0]
 810d7de:	6a3b      	ldr	r3, [r7, #32]
 810d7e0:	687a      	ldr	r2, [r7, #4]
 810d7e2:	68b9      	ldr	r1, [r7, #8]
 810d7e4:	68f8      	ldr	r0, [r7, #12]
 810d7e6:	f7ff fbea 	bl	810cfbe <_nx_ip_driver_packet_send>
}
 810d7ea:	3710      	adds	r7, #16
 810d7ec:	46bd      	mov	sp, r7
 810d7ee:	bd80      	pop	{r7, pc}

0810d7f0 <_nx_ip_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_periodic_timer_entry(ULONG ip_address)
{
 810d7f0:	b580      	push	{r7, lr}
 810d7f2:	b084      	sub	sp, #16
 810d7f4:	af00      	add	r7, sp, #0
 810d7f6:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 810d7f8:	687b      	ldr	r3, [r7, #4]
 810d7fa:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_PERIODIC_EVENT, TX_OR);
 810d7fc:	68fb      	ldr	r3, [r7, #12]
 810d7fe:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 810d802:	2200      	movs	r2, #0
 810d804:	2101      	movs	r1, #1
 810d806:	4618      	mov	r0, r3
 810d808:	f006 fe20 	bl	811444c <_tx_event_flags_set>
}
 810d80c:	bf00      	nop
 810d80e:	3710      	adds	r7, #16
 810d810:	46bd      	mov	sp, r7
 810d812:	bd80      	pop	{r7, pc}

0810d814 <_nx_ip_route_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _nx_ip_route_find(NX_IP *ip_ptr, ULONG destination_address, NX_INTERFACE **ip_interface_ptr, ULONG *next_hop_address)
{
 810d814:	b480      	push	{r7}
 810d816:	b087      	sub	sp, #28
 810d818:	af00      	add	r7, sp, #0
 810d81a:	60f8      	str	r0, [r7, #12]
 810d81c:	60b9      	str	r1, [r7, #8]
 810d81e:	607a      	str	r2, [r7, #4]
 810d820:	603b      	str	r3, [r7, #0]

NX_INTERFACE *interface_ptr;
ULONG         i;

    /* Initialize the next hop address. */
    *next_hop_address = 0;
 810d822:	683b      	ldr	r3, [r7, #0]
 810d824:	2200      	movs	r2, #0
 810d826:	601a      	str	r2, [r3, #0]

    /* Determine if the destination_address is multicast or directed broadcast. */
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 810d828:	68bb      	ldr	r3, [r7, #8]
 810d82a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 810d82e:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 810d832:	d003      	beq.n	810d83c <_nx_ip_route_find+0x28>
 810d834:	68bb      	ldr	r3, [r7, #8]
 810d836:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d83a:	d131      	bne.n	810d8a0 <_nx_ip_route_find+0x8c>
        (destination_address  == NX_IP_LIMITED_BROADCAST))
    {

        *next_hop_address = destination_address;
 810d83c:	683b      	ldr	r3, [r7, #0]
 810d83e:	68ba      	ldr	r2, [r7, #8]
 810d840:	601a      	str	r2, [r3, #0]

        /* If the caller did not set the ip_interface value, find a link enabled 
           interface, starting with the primary interface, for transmission.  */
        if (*ip_interface_ptr == NX_NULL)
 810d842:	687b      	ldr	r3, [r7, #4]
 810d844:	681b      	ldr	r3, [r3, #0]
 810d846:	2b00      	cmp	r3, #0
 810d848:	d121      	bne.n	810d88e <_nx_ip_route_find+0x7a>
        {

            /* Find an interface whose link is up. */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 810d84a:	2300      	movs	r3, #0
 810d84c:	617b      	str	r3, [r7, #20]
 810d84e:	e01a      	b.n	810d886 <_nx_ip_route_find+0x72>
            {

                if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up)
 810d850:	68fa      	ldr	r2, [r7, #12]
 810d852:	697b      	ldr	r3, [r7, #20]
 810d854:	214c      	movs	r1, #76	@ 0x4c
 810d856:	fb01 f303 	mul.w	r3, r1, r3
 810d85a:	4413      	add	r3, r2
 810d85c:	f203 732a 	addw	r3, r3, #1834	@ 0x72a
 810d860:	781b      	ldrb	r3, [r3, #0]
 810d862:	2b00      	cmp	r3, #0
 810d864:	d00c      	beq.n	810d880 <_nx_ip_route_find+0x6c>
                {
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 810d866:	697b      	ldr	r3, [r7, #20]
 810d868:	224c      	movs	r2, #76	@ 0x4c
 810d86a:	fb02 f303 	mul.w	r3, r2, r3
 810d86e:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 810d872:	68fa      	ldr	r2, [r7, #12]
 810d874:	4413      	add	r3, r2
 810d876:	1d1a      	adds	r2, r3, #4
 810d878:	687b      	ldr	r3, [r7, #4]
 810d87a:	601a      	str	r2, [r3, #0]
                    return(NX_SUCCESS);
 810d87c:	2300      	movs	r3, #0
 810d87e:	e13b      	b.n	810daf8 <_nx_ip_route_find+0x2e4>
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 810d880:	697b      	ldr	r3, [r7, #20]
 810d882:	3301      	adds	r3, #1
 810d884:	617b      	str	r3, [r7, #20]
 810d886:	697b      	ldr	r3, [r7, #20]
 810d888:	2b00      	cmp	r3, #0
 810d88a:	d0e1      	beq.n	810d850 <_nx_ip_route_find+0x3c>
 810d88c:	e006      	b.n	810d89c <_nx_ip_route_find+0x88>
                }
            }
        }
        /* If the specified interface is up, return success. */
        else if ((*ip_interface_ptr) -> nx_interface_link_up)
 810d88e:	687b      	ldr	r3, [r7, #4]
 810d890:	681b      	ldr	r3, [r3, #0]
 810d892:	799b      	ldrb	r3, [r3, #6]
 810d894:	2b00      	cmp	r3, #0
 810d896:	d001      	beq.n	810d89c <_nx_ip_route_find+0x88>
        {
            return(NX_SUCCESS);
 810d898:	2300      	movs	r3, #0
 810d89a:	e12d      	b.n	810daf8 <_nx_ip_route_find+0x2e4>
        }

        /* No available interface. */
        return(NX_IP_ADDRESS_ERROR);
 810d89c:	2321      	movs	r3, #33	@ 0x21
 810d89e:	e12b      	b.n	810daf8 <_nx_ip_route_find+0x2e4>
    }

    /* Search through the interfaces associated with the IP instance,
       check if the the destination address is one of the local interface addresses. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 810d8a0:	2300      	movs	r3, #0
 810d8a2:	617b      	str	r3, [r7, #20]
 810d8a4:	e02a      	b.n	810d8fc <_nx_ip_route_find+0xe8>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 810d8a6:	697b      	ldr	r3, [r7, #20]
 810d8a8:	224c      	movs	r2, #76	@ 0x4c
 810d8aa:	fb02 f303 	mul.w	r3, r2, r3
 810d8ae:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 810d8b2:	68fa      	ldr	r2, [r7, #12]
 810d8b4:	4413      	add	r3, r2
 810d8b6:	3304      	adds	r3, #4
 810d8b8:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 810d8ba:	693b      	ldr	r3, [r7, #16]
 810d8bc:	791b      	ldrb	r3, [r3, #4]
 810d8be:	2b00      	cmp	r3, #0
 810d8c0:	d019      	beq.n	810d8f6 <_nx_ip_route_find+0xe2>
            (interface_ptr -> nx_interface_link_up) &&
 810d8c2:	693b      	ldr	r3, [r7, #16]
 810d8c4:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 810d8c6:	2b00      	cmp	r3, #0
 810d8c8:	d015      	beq.n	810d8f6 <_nx_ip_route_find+0xe2>
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 810d8ca:	693b      	ldr	r3, [r7, #16]
 810d8cc:	695b      	ldr	r3, [r3, #20]
            (interface_ptr -> nx_interface_link_up) &&
 810d8ce:	68ba      	ldr	r2, [r7, #8]
 810d8d0:	429a      	cmp	r2, r3
 810d8d2:	d110      	bne.n	810d8f6 <_nx_ip_route_find+0xe2>
            ((*ip_interface_ptr == NX_NULL) ||
 810d8d4:	687b      	ldr	r3, [r7, #4]
 810d8d6:	681b      	ldr	r3, [r3, #0]
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 810d8d8:	2b00      	cmp	r3, #0
 810d8da:	d004      	beq.n	810d8e6 <_nx_ip_route_find+0xd2>
             (*ip_interface_ptr == interface_ptr)))
 810d8dc:	687b      	ldr	r3, [r7, #4]
 810d8de:	681b      	ldr	r3, [r3, #0]
            ((*ip_interface_ptr == NX_NULL) ||
 810d8e0:	693a      	ldr	r2, [r7, #16]
 810d8e2:	429a      	cmp	r2, r3
 810d8e4:	d107      	bne.n	810d8f6 <_nx_ip_route_find+0xe2>
        {

            /* Yes, use the entry information for interface and next hop. */
            *ip_interface_ptr = interface_ptr;
 810d8e6:	687b      	ldr	r3, [r7, #4]
 810d8e8:	693a      	ldr	r2, [r7, #16]
 810d8ea:	601a      	str	r2, [r3, #0]
            *next_hop_address = destination_address;
 810d8ec:	683b      	ldr	r3, [r7, #0]
 810d8ee:	68ba      	ldr	r2, [r7, #8]
 810d8f0:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 810d8f2:	2300      	movs	r3, #0
 810d8f4:	e100      	b.n	810daf8 <_nx_ip_route_find+0x2e4>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 810d8f6:	697b      	ldr	r3, [r7, #20]
 810d8f8:	3301      	adds	r3, #1
 810d8fa:	617b      	str	r3, [r7, #20]
 810d8fc:	697b      	ldr	r3, [r7, #20]
 810d8fe:	2b00      	cmp	r3, #0
 810d900:	d0d1      	beq.n	810d8a6 <_nx_ip_route_find+0x92>

#endif /* NX_ENABLE_IP_STATIC_ROUTING */

    /* Search through the interfaces associated with the IP instance,
       check if the entry exists. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 810d902:	2300      	movs	r3, #0
 810d904:	617b      	str	r3, [r7, #20]
 810d906:	e036      	b.n	810d976 <_nx_ip_route_find+0x162>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 810d908:	697b      	ldr	r3, [r7, #20]
 810d90a:	224c      	movs	r2, #76	@ 0x4c
 810d90c:	fb02 f303 	mul.w	r3, r2, r3
 810d910:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 810d914:	68fa      	ldr	r2, [r7, #12]
 810d916:	4413      	add	r3, r2
 810d918:	3304      	adds	r3, #4
 810d91a:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 810d91c:	693b      	ldr	r3, [r7, #16]
 810d91e:	791b      	ldrb	r3, [r3, #4]
 810d920:	2b00      	cmp	r3, #0
 810d922:	d025      	beq.n	810d970 <_nx_ip_route_find+0x15c>
            (interface_ptr -> nx_interface_link_up) &&
 810d924:	693b      	ldr	r3, [r7, #16]
 810d926:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 810d928:	2b00      	cmp	r3, #0
 810d92a:	d021      	beq.n	810d970 <_nx_ip_route_find+0x15c>
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 810d92c:	693b      	ldr	r3, [r7, #16]
 810d92e:	699a      	ldr	r2, [r3, #24]
 810d930:	68bb      	ldr	r3, [r7, #8]
 810d932:	401a      	ands	r2, r3
 810d934:	693b      	ldr	r3, [r7, #16]
 810d936:	69db      	ldr	r3, [r3, #28]
            (interface_ptr -> nx_interface_link_up) &&
 810d938:	429a      	cmp	r2, r3
 810d93a:	d119      	bne.n	810d970 <_nx_ip_route_find+0x15c>
        {

            /* Yes, use the entry information for interface and next hop. */
            if (*ip_interface_ptr == NX_NULL)
 810d93c:	687b      	ldr	r3, [r7, #4]
 810d93e:	681b      	ldr	r3, [r3, #0]
 810d940:	2b00      	cmp	r3, #0
 810d942:	d103      	bne.n	810d94c <_nx_ip_route_find+0x138>
            {
                *ip_interface_ptr = interface_ptr;
 810d944:	687b      	ldr	r3, [r7, #4]
 810d946:	693a      	ldr	r2, [r7, #16]
 810d948:	601a      	str	r2, [r3, #0]
 810d94a:	e00b      	b.n	810d964 <_nx_ip_route_find+0x150>
            }
            /* Match loopback interface.  */
            /* Suppress constant value, since "NX_MAX_IP_INTERFACES" can be redefined. */
#if (NX_MAX_IP_INTERFACES == (NX_MAX_PHYSICAL_INTERFACES + 1))
            else if (i == NX_MAX_PHYSICAL_INTERFACES)
 810d94c:	697b      	ldr	r3, [r7, #20]
 810d94e:	2b01      	cmp	r3, #1
 810d950:	d103      	bne.n	810d95a <_nx_ip_route_find+0x146>
            {
                *ip_interface_ptr = interface_ptr;
 810d952:	687b      	ldr	r3, [r7, #4]
 810d954:	693a      	ldr	r2, [r7, #16]
 810d956:	601a      	str	r2, [r3, #0]
 810d958:	e004      	b.n	810d964 <_nx_ip_route_find+0x150>
            }
#endif
            else if (*ip_interface_ptr != interface_ptr)
 810d95a:	687b      	ldr	r3, [r7, #4]
 810d95c:	681b      	ldr	r3, [r3, #0]
 810d95e:	693a      	ldr	r2, [r7, #16]
 810d960:	429a      	cmp	r2, r3
 810d962:	d104      	bne.n	810d96e <_nx_ip_route_find+0x15a>
            {
                continue;
            }

            *next_hop_address = destination_address;
 810d964:	683b      	ldr	r3, [r7, #0]
 810d966:	68ba      	ldr	r2, [r7, #8]
 810d968:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 810d96a:	2300      	movs	r3, #0
 810d96c:	e0c4      	b.n	810daf8 <_nx_ip_route_find+0x2e4>
                continue;
 810d96e:	bf00      	nop
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 810d970:	697b      	ldr	r3, [r7, #20]
 810d972:	3301      	adds	r3, #1
 810d974:	617b      	str	r3, [r7, #20]
 810d976:	697b      	ldr	r3, [r7, #20]
 810d978:	2b01      	cmp	r3, #1
 810d97a:	d9c5      	bls.n	810d908 <_nx_ip_route_find+0xf4>
        }
    }

    /* Search the interfaces for IPv4 Link-Local Address according to RFC3927, section2.6.  */
    /* Determine if destination addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if ((destination_address & 0xFFFF0000) == 0xA9FE0000)
 810d97c:	68bb      	ldr	r3, [r7, #8]
 810d97e:	0c1b      	lsrs	r3, r3, #16
 810d980:	041b      	lsls	r3, r3, #16
 810d982:	4a60      	ldr	r2, [pc, #384]	@ (810db04 <_nx_ip_route_find+0x2f0>)
 810d984:	4293      	cmp	r3, r2
 810d986:	d141      	bne.n	810da0c <_nx_ip_route_find+0x1f8>
    {

        /* Yes, check if the interface is set.  */
        if (*ip_interface_ptr)
 810d988:	687b      	ldr	r3, [r7, #4]
 810d98a:	681b      	ldr	r3, [r3, #0]
 810d98c:	2b00      	cmp	r3, #0
 810d98e:	d00e      	beq.n	810d9ae <_nx_ip_route_find+0x19a>
        {

            /* Determine if the interface is valid.  */
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 810d990:	687b      	ldr	r3, [r7, #4]
 810d992:	681b      	ldr	r3, [r3, #0]
 810d994:	791b      	ldrb	r3, [r3, #4]
 810d996:	2b00      	cmp	r3, #0
 810d998:	d038      	beq.n	810da0c <_nx_ip_route_find+0x1f8>
                ((*ip_interface_ptr) -> nx_interface_link_up))
 810d99a:	687b      	ldr	r3, [r7, #4]
 810d99c:	681b      	ldr	r3, [r3, #0]
 810d99e:	799b      	ldrb	r3, [r3, #6]
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 810d9a0:	2b00      	cmp	r3, #0
 810d9a2:	d033      	beq.n	810da0c <_nx_ip_route_find+0x1f8>
            {

                /* Set the next hop address.  */
                *next_hop_address = destination_address;
 810d9a4:	683b      	ldr	r3, [r7, #0]
 810d9a6:	68ba      	ldr	r2, [r7, #8]
 810d9a8:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 810d9aa:	2300      	movs	r3, #0
 810d9ac:	e0a4      	b.n	810daf8 <_nx_ip_route_find+0x2e4>
        }
        else
        {

            /* Search through the interfaces associated with the IP instance, set the inteface as first valid interface.  */
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 810d9ae:	2300      	movs	r3, #0
 810d9b0:	617b      	str	r3, [r7, #20]
 810d9b2:	e028      	b.n	810da06 <_nx_ip_route_find+0x1f2>
            {

                /* Check for a valid interface that the address is link-local address.  */
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 810d9b4:	68fa      	ldr	r2, [r7, #12]
 810d9b6:	697b      	ldr	r3, [r7, #20]
 810d9b8:	214c      	movs	r1, #76	@ 0x4c
 810d9ba:	fb01 f303 	mul.w	r3, r1, r3
 810d9be:	4413      	add	r3, r2
 810d9c0:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 810d9c4:	781b      	ldrb	r3, [r3, #0]
 810d9c6:	2b00      	cmp	r3, #0
 810d9c8:	d01a      	beq.n	810da00 <_nx_ip_route_find+0x1ec>
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_up))
 810d9ca:	68fa      	ldr	r2, [r7, #12]
 810d9cc:	697b      	ldr	r3, [r7, #20]
 810d9ce:	214c      	movs	r1, #76	@ 0x4c
 810d9d0:	fb01 f303 	mul.w	r3, r1, r3
 810d9d4:	4413      	add	r3, r2
 810d9d6:	f203 732a 	addw	r3, r3, #1834	@ 0x72a
 810d9da:	781b      	ldrb	r3, [r3, #0]
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 810d9dc:	2b00      	cmp	r3, #0
 810d9de:	d00f      	beq.n	810da00 <_nx_ip_route_find+0x1ec>
                {

                    /* Yes, use the entry information for interface and next hop. */
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 810d9e0:	697b      	ldr	r3, [r7, #20]
 810d9e2:	224c      	movs	r2, #76	@ 0x4c
 810d9e4:	fb02 f303 	mul.w	r3, r2, r3
 810d9e8:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 810d9ec:	68fa      	ldr	r2, [r7, #12]
 810d9ee:	4413      	add	r3, r2
 810d9f0:	1d1a      	adds	r2, r3, #4
 810d9f2:	687b      	ldr	r3, [r7, #4]
 810d9f4:	601a      	str	r2, [r3, #0]
                    *next_hop_address = destination_address;
 810d9f6:	683b      	ldr	r3, [r7, #0]
 810d9f8:	68ba      	ldr	r2, [r7, #8]
 810d9fa:	601a      	str	r2, [r3, #0]

                    return(NX_SUCCESS);
 810d9fc:	2300      	movs	r3, #0
 810d9fe:	e07b      	b.n	810daf8 <_nx_ip_route_find+0x2e4>
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 810da00:	697b      	ldr	r3, [r7, #20]
 810da02:	3301      	adds	r3, #1
 810da04:	617b      	str	r3, [r7, #20]
 810da06:	697b      	ldr	r3, [r7, #20]
 810da08:	2b01      	cmp	r3, #1
 810da0a:	d9d3      	bls.n	810d9b4 <_nx_ip_route_find+0x1a0>
            }
        }
    }

    /* Does the IP instance have a gateway? */
    if ((ip_ptr -> nx_ip_gateway_address) &&
 810da0c:	68fb      	ldr	r3, [r7, #12]
 810da0e:	689b      	ldr	r3, [r3, #8]
 810da10:	2b00      	cmp	r3, #0
 810da12:	d02b      	beq.n	810da6c <_nx_ip_route_find+0x258>
        (ip_ptr -> nx_ip_gateway_interface) &&
 810da14:	68fb      	ldr	r3, [r7, #12]
 810da16:	68db      	ldr	r3, [r3, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 810da18:	2b00      	cmp	r3, #0
 810da1a:	d027      	beq.n	810da6c <_nx_ip_route_find+0x258>
        (ip_ptr -> nx_ip_gateway_interface -> nx_interface_link_up))
 810da1c:	68fb      	ldr	r3, [r7, #12]
 810da1e:	68db      	ldr	r3, [r3, #12]
 810da20:	799b      	ldrb	r3, [r3, #6]
        (ip_ptr -> nx_ip_gateway_interface) &&
 810da22:	2b00      	cmp	r3, #0
 810da24:	d022      	beq.n	810da6c <_nx_ip_route_find+0x258>
    {

        /* Get the interface. */
        interface_ptr = ip_ptr -> nx_ip_gateway_interface;
 810da26:	68fb      	ldr	r3, [r7, #12]
 810da28:	68db      	ldr	r3, [r3, #12]
 810da2a:	613b      	str	r3, [r7, #16]

        /* Yes, is gateway address still reachable? */
        if (interface_ptr -> nx_interface_ip_network !=
 810da2c:	693b      	ldr	r3, [r7, #16]
 810da2e:	69da      	ldr	r2, [r3, #28]
            (ip_ptr -> nx_ip_gateway_address &
 810da30:	68fb      	ldr	r3, [r7, #12]
 810da32:	6899      	ldr	r1, [r3, #8]
             interface_ptr -> nx_interface_ip_network_mask))
 810da34:	693b      	ldr	r3, [r7, #16]
 810da36:	699b      	ldr	r3, [r3, #24]
            (ip_ptr -> nx_ip_gateway_address &
 810da38:	400b      	ands	r3, r1
        if (interface_ptr -> nx_interface_ip_network !=
 810da3a:	429a      	cmp	r2, r3
 810da3c:	d001      	beq.n	810da42 <_nx_ip_route_find+0x22e>
        {
            return(NX_IP_ADDRESS_ERROR);
 810da3e:	2321      	movs	r3, #33	@ 0x21
 810da40:	e05a      	b.n	810daf8 <_nx_ip_route_find+0x2e4>
        }

        /* Use the gateway as default. */
        if (*ip_interface_ptr == NX_NULL)
 810da42:	687b      	ldr	r3, [r7, #4]
 810da44:	681b      	ldr	r3, [r3, #0]
 810da46:	2b00      	cmp	r3, #0
 810da48:	d103      	bne.n	810da52 <_nx_ip_route_find+0x23e>
        {
            *ip_interface_ptr = interface_ptr;
 810da4a:	687b      	ldr	r3, [r7, #4]
 810da4c:	693a      	ldr	r2, [r7, #16]
 810da4e:	601a      	str	r2, [r3, #0]
 810da50:	e006      	b.n	810da60 <_nx_ip_route_find+0x24c>
        }
        else if (*ip_interface_ptr != interface_ptr)
 810da52:	687b      	ldr	r3, [r7, #4]
 810da54:	681b      	ldr	r3, [r3, #0]
 810da56:	693a      	ldr	r2, [r7, #16]
 810da58:	429a      	cmp	r2, r3
 810da5a:	d001      	beq.n	810da60 <_nx_ip_route_find+0x24c>
        {
            return(NX_IP_ADDRESS_ERROR);
 810da5c:	2321      	movs	r3, #33	@ 0x21
 810da5e:	e04b      	b.n	810daf8 <_nx_ip_route_find+0x2e4>
        }

        *next_hop_address = ip_ptr -> nx_ip_gateway_address;
 810da60:	68fb      	ldr	r3, [r7, #12]
 810da62:	689a      	ldr	r2, [r3, #8]
 810da64:	683b      	ldr	r3, [r7, #0]
 810da66:	601a      	str	r2, [r3, #0]

        return(NX_SUCCESS);
 810da68:	2300      	movs	r3, #0
 810da6a:	e045      	b.n	810daf8 <_nx_ip_route_find+0x2e4>
    }

    /* Determine if source addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if (*ip_interface_ptr)
 810da6c:	687b      	ldr	r3, [r7, #4]
 810da6e:	681b      	ldr	r3, [r3, #0]
 810da70:	2b00      	cmp	r3, #0
 810da72:	d016      	beq.n	810daa2 <_nx_ip_route_find+0x28e>
    {

        /* Determine if the interface is valid and the address of interface is link-local address.  */
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 810da74:	687b      	ldr	r3, [r7, #4]
 810da76:	681b      	ldr	r3, [r3, #0]
 810da78:	791b      	ldrb	r3, [r3, #4]
 810da7a:	2b00      	cmp	r3, #0
 810da7c:	d03b      	beq.n	810daf6 <_nx_ip_route_find+0x2e2>
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 810da7e:	687b      	ldr	r3, [r7, #4]
 810da80:	681b      	ldr	r3, [r3, #0]
 810da82:	799b      	ldrb	r3, [r3, #6]
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 810da84:	2b00      	cmp	r3, #0
 810da86:	d036      	beq.n	810daf6 <_nx_ip_route_find+0x2e2>
            (((*ip_interface_ptr) -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 810da88:	687b      	ldr	r3, [r7, #4]
 810da8a:	681b      	ldr	r3, [r3, #0]
 810da8c:	695b      	ldr	r3, [r3, #20]
 810da8e:	0c1b      	lsrs	r3, r3, #16
 810da90:	041b      	lsls	r3, r3, #16
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 810da92:	4a1c      	ldr	r2, [pc, #112]	@ (810db04 <_nx_ip_route_find+0x2f0>)
 810da94:	4293      	cmp	r3, r2
 810da96:	d12e      	bne.n	810daf6 <_nx_ip_route_find+0x2e2>
        {

            /* Set the next hop address.  */
            *next_hop_address = destination_address;
 810da98:	683b      	ldr	r3, [r7, #0]
 810da9a:	68ba      	ldr	r2, [r7, #8]
 810da9c:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 810da9e:	2300      	movs	r3, #0
 810daa0:	e02a      	b.n	810daf8 <_nx_ip_route_find+0x2e4>
    else
    {

        /* Search through the interfaces associated with the IP instance,
           check if interface is valid and the address of interface is link-local address. */
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 810daa2:	2300      	movs	r3, #0
 810daa4:	617b      	str	r3, [r7, #20]
 810daa6:	e023      	b.n	810daf0 <_nx_ip_route_find+0x2dc>
        {

            /* Use a local variable for convenience. */
            interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 810daa8:	697b      	ldr	r3, [r7, #20]
 810daaa:	224c      	movs	r2, #76	@ 0x4c
 810daac:	fb02 f303 	mul.w	r3, r2, r3
 810dab0:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 810dab4:	68fa      	ldr	r2, [r7, #12]
 810dab6:	4413      	add	r3, r2
 810dab8:	3304      	adds	r3, #4
 810daba:	613b      	str	r3, [r7, #16]

            /* Check for a valid interface that the address is link-local address.  */
            if ((interface_ptr -> nx_interface_valid) &&
 810dabc:	693b      	ldr	r3, [r7, #16]
 810dabe:	791b      	ldrb	r3, [r3, #4]
 810dac0:	2b00      	cmp	r3, #0
 810dac2:	d012      	beq.n	810daea <_nx_ip_route_find+0x2d6>
                (interface_ptr -> nx_interface_link_up) &&
 810dac4:	693b      	ldr	r3, [r7, #16]
 810dac6:	799b      	ldrb	r3, [r3, #6]
            if ((interface_ptr -> nx_interface_valid) &&
 810dac8:	2b00      	cmp	r3, #0
 810daca:	d00e      	beq.n	810daea <_nx_ip_route_find+0x2d6>
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 810dacc:	693b      	ldr	r3, [r7, #16]
 810dace:	695b      	ldr	r3, [r3, #20]
 810dad0:	0c1b      	lsrs	r3, r3, #16
 810dad2:	041b      	lsls	r3, r3, #16
                (interface_ptr -> nx_interface_link_up) &&
 810dad4:	4a0b      	ldr	r2, [pc, #44]	@ (810db04 <_nx_ip_route_find+0x2f0>)
 810dad6:	4293      	cmp	r3, r2
 810dad8:	d107      	bne.n	810daea <_nx_ip_route_find+0x2d6>
            {

                /* Yes, use the entry information for interface and next hop. */
                *ip_interface_ptr = interface_ptr;
 810dada:	687b      	ldr	r3, [r7, #4]
 810dadc:	693a      	ldr	r2, [r7, #16]
 810dade:	601a      	str	r2, [r3, #0]
                *next_hop_address = destination_address;
 810dae0:	683b      	ldr	r3, [r7, #0]
 810dae2:	68ba      	ldr	r2, [r7, #8]
 810dae4:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 810dae6:	2300      	movs	r3, #0
 810dae8:	e006      	b.n	810daf8 <_nx_ip_route_find+0x2e4>
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 810daea:	697b      	ldr	r3, [r7, #20]
 810daec:	3301      	adds	r3, #1
 810daee:	617b      	str	r3, [r7, #20]
 810daf0:	697b      	ldr	r3, [r7, #20]
 810daf2:	2b01      	cmp	r3, #1
 810daf4:	d9d8      	bls.n	810daa8 <_nx_ip_route_find+0x294>
        }
    }

    /* Cannot find a proper way to transmit this packet.
       Return the error status. */
    return(NX_IP_ADDRESS_ERROR);
 810daf6:	2321      	movs	r3, #33	@ 0x21
}
 810daf8:	4618      	mov	r0, r3
 810dafa:	371c      	adds	r7, #28
 810dafc:	46bd      	mov	sp, r7
 810dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810db02:	4770      	bx	lr
 810db04:	a9fe0000 	.word	0xa9fe0000

0810db08 <_nx_ip_thread_entry>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_thread_entry(ULONG ip_ptr_value)
{
 810db08:	b580      	push	{r7, lr}
 810db0a:	b096      	sub	sp, #88	@ 0x58
 810db0c:	af02      	add	r7, sp, #8
 810db0e:	6078      	str	r0, [r7, #4]
NXD_IPV6_ADDRESS *interface_ipv6_address;
#endif /* FEATURE_NX_IPV6 */


    /* Setup IP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_ptr_value)
 810db10:	687b      	ldr	r3, [r7, #4]
 810db12:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Obtain the IP internal mutex before calling the driver.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 810db14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810db16:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 810db1a:	f04f 31ff 	mov.w	r1, #4294967295
 810db1e:	4618      	mov	r0, r3
 810db20:	f007 f82e 	bl	8114b80 <_tx_mutex_get>

    /* Set the IP initialization done flag to true.  */
    ip_ptr -> nx_ip_initialize_done =  NX_TRUE;
 810db24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810db26:	2201      	movs	r2, #1
 810db28:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170

    /* Loop through all physical interfaces to initialize and enable the hardware. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 810db2c:	2300      	movs	r3, #0
 810db2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810db30:	e05f      	b.n	810dbf2 <_nx_ip_thread_entry+0xea>
    {

        /* Is this a valid interface with a link driver associated with it? */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) && (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry))
 810db32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810db34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810db36:	214c      	movs	r1, #76	@ 0x4c
 810db38:	fb01 f303 	mul.w	r3, r1, r3
 810db3c:	4413      	add	r3, r2
 810db3e:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 810db42:	781b      	ldrb	r3, [r3, #0]
 810db44:	2b00      	cmp	r3, #0
 810db46:	d051      	beq.n	810dbec <_nx_ip_thread_entry+0xe4>
 810db48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810db4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810db4c:	214c      	movs	r1, #76	@ 0x4c
 810db4e:	fb01 f303 	mul.w	r3, r1, r3
 810db52:	4413      	add	r3, r2
 810db54:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 810db58:	681b      	ldr	r3, [r3, #0]
 810db5a:	2b00      	cmp	r3, #0
 810db5c:	d046      	beq.n	810dbec <_nx_ip_thread_entry+0xe4>
            /* Clear capability flag first.  */
            ip_ptr -> nx_ip_interface[i].nx_interface_capability_flag = 0;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


            ip_ptr -> nx_ip_interface[i].nx_interface_link_up = NX_TRUE;
 810db5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810db60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810db62:	214c      	movs	r1, #76	@ 0x4c
 810db64:	fb01 f303 	mul.w	r3, r1, r3
 810db68:	4413      	add	r3, r2
 810db6a:	f203 732a 	addw	r3, r3, #1834	@ 0x72a
 810db6e:	2201      	movs	r2, #1
 810db70:	701a      	strb	r2, [r3, #0]

            /* Yes; attach the interface to the device. */
            driver_request.nx_ip_driver_ptr        =  ip_ptr;
 810db72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810db74:	62bb      	str	r3, [r7, #40]	@ 0x28
            driver_request.nx_ip_driver_command    =  NX_LINK_INTERFACE_ATTACH;
 810db76:	2313      	movs	r3, #19
 810db78:	613b      	str	r3, [r7, #16]
            driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[i]);
 810db7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810db7c:	224c      	movs	r2, #76	@ 0x4c
 810db7e:	fb02 f303 	mul.w	r3, r2, r3
 810db82:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 810db86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810db88:	4413      	add	r3, r2
 810db8a:	3304      	adds	r3, #4
 810db8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 810db8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810db90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810db92:	214c      	movs	r1, #76	@ 0x4c
 810db94:	fb01 f303 	mul.w	r3, r1, r3
 810db98:	4413      	add	r3, r2
 810db9a:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 810db9e:	681b      	ldr	r3, [r3, #0]
 810dba0:	f107 0210 	add.w	r2, r7, #16
 810dba4:	4610      	mov	r0, r2
 810dba6:	4798      	blx	r3
            /* Call the link driver to initialize the hardware. Among other
               responsibilities, the driver is required to provide the
               Maximum Transfer Unit (MTU) for the physical layer. The MTU
               should represent the actual physical layer transfer size
               less the physical layer headers and trailers.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 810dba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dbaa:	62bb      	str	r3, [r7, #40]	@ 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_INITIALIZE;
 810dbac:	2301      	movs	r3, #1
 810dbae:	613b      	str	r3, [r7, #16]
               When an IP instance is created, the first interface (nx_ip_interface[0]) is configured using parameters
               provided in the IP create call.

               When IP thread runs, it invokes the first interface link driver for link initialization.
             */
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 810dbb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810dbb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810dbb4:	214c      	movs	r1, #76	@ 0x4c
 810dbb6:	fb01 f303 	mul.w	r3, r1, r3
 810dbba:	4413      	add	r3, r2
 810dbbc:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 810dbc0:	681b      	ldr	r3, [r3, #0]
 810dbc2:	f107 0210 	add.w	r2, r7, #16
 810dbc6:	4610      	mov	r0, r2
 810dbc8:	4798      	blx	r3

            /* Call the link driver again to enable the interface.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 810dbca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dbcc:	62bb      	str	r3, [r7, #40]	@ 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_ENABLE;
 810dbce:	2302      	movs	r3, #2
 810dbd0:	613b      	str	r3, [r7, #16]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_LINK_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 810dbd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810dbd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810dbd6:	214c      	movs	r1, #76	@ 0x4c
 810dbd8:	fb01 f303 	mul.w	r3, r1, r3
 810dbdc:	4413      	add	r3, r2
 810dbde:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 810dbe2:	681b      	ldr	r3, [r3, #0]
 810dbe4:	f107 0210 	add.w	r2, r7, #16
 810dbe8:	4610      	mov	r0, r2
 810dbea:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 810dbec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810dbee:	3301      	adds	r3, #1
 810dbf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810dbf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810dbf4:	2b00      	cmp	r3, #0
 810dbf6:	d09c      	beq.n	810db32 <_nx_ip_thread_entry+0x2a>
    /* Loop to process events for this IP instance.  */
    for (;;)
    {

        /* Release the IP internal mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 810dbf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dbfa:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 810dbfe:	4618      	mov	r0, r3
 810dc00:	f007 fa36 	bl	8115070 <_tx_mutex_put>

        /* Pickup IP event flags.  */
        tx_event_flags_get(&(ip_ptr -> nx_ip_events), NX_IP_ALL_EVENTS, TX_OR_CLEAR, &ip_events, TX_WAIT_FOREVER);
 810dc04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dc06:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 810dc0a:	f107 030c 	add.w	r3, r7, #12
 810dc0e:	f04f 32ff 	mov.w	r2, #4294967295
 810dc12:	9200      	str	r2, [sp, #0]
 810dc14:	2201      	movs	r2, #1
 810dc16:	f04f 31ff 	mov.w	r1, #4294967295
 810dc1a:	f006 fb2d 	bl	8114278 <_tx_event_flags_get>

        /* Obtain the IP internal mutex before processing the IP event.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 810dc1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dc20:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 810dc24:	f04f 31ff 	mov.w	r1, #4294967295
 810dc28:	4618      	mov	r0, r3
 810dc2a:	f006 ffa9 	bl	8114b80 <_tx_mutex_get>
        }
#endif

        /* Check for an IP receive packet event.  */
        /*lint -e{644} suppress variable might not be initialized, since "ip_events" was initialized by tx_event_flags_get. */
        if (ip_events & NX_IP_RECEIVE_EVENT)
 810dc2e:	68fb      	ldr	r3, [r7, #12]
 810dc30:	f003 0308 	and.w	r3, r3, #8
 810dc34:	2b00      	cmp	r3, #0
 810dc36:	d031      	beq.n	810dc9c <_nx_ip_thread_entry+0x194>
        {

            /* Loop to process all deferred packet requests.  */
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 810dc38:	e023      	b.n	810dc82 <_nx_ip_thread_entry+0x17a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810dc3a:	f3ef 8310 	mrs	r3, PRIMASK
 810dc3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 810dc40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 810dc42:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 810dc44:	b672      	cpsid	i
    return(int_posture);
 810dc46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
            {

                /* Remove the first packet and process it!  */

                /* Disable interrupts.  */
                TX_DISABLE
 810dc48:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Pickup the first packet.  */
                packet_ptr =  ip_ptr -> nx_ip_deferred_received_packet_head;
 810dc4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dc4c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 810dc50:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Move the head pointer to the next packet.  */
                ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 810dc52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810dc54:	69da      	ldr	r2, [r3, #28]
 810dc56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dc58:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

                /* Check for end of deferred processing queue.  */
                if (ip_ptr -> nx_ip_deferred_received_packet_head == NX_NULL)
 810dc5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dc5e:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 810dc62:	2b00      	cmp	r3, #0
 810dc64:	d103      	bne.n	810dc6e <_nx_ip_thread_entry+0x166>
                {

                    /* Yes, the queue is empty.  Set the tail pointer to NULL.  */
                    ip_ptr -> nx_ip_deferred_received_packet_tail =  NX_NULL;
 810dc66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dc68:	2200      	movs	r2, #0
 810dc6a:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 810dc6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810dc70:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810dc72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dc74:	f383 8810 	msr	PRIMASK, r3
}
 810dc78:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call the actual IP packet receive function.  */
                _nx_ip_packet_receive(ip_ptr, packet_ptr);
 810dc7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810dc7c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810dc7e:	f7ff fd11 	bl	810d6a4 <_nx_ip_packet_receive>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 810dc82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dc84:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 810dc88:	2b00      	cmp	r3, #0
 810dc8a:	d1d6      	bne.n	810dc3a <_nx_ip_thread_entry+0x132>
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_RECEIVE_EVENT);
 810dc8c:	68fb      	ldr	r3, [r7, #12]
 810dc8e:	f023 0308 	bic.w	r3, r3, #8
 810dc92:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 810dc94:	68fb      	ldr	r3, [r7, #12]
 810dc96:	2b00      	cmp	r3, #0
 810dc98:	f000 812d 	beq.w	810def6 <_nx_ip_thread_entry+0x3ee>
                continue;
            }
        }

        /* Check for a TCP message event.  */
        if (ip_events & NX_IP_TCP_EVENT)
 810dc9c:	68fb      	ldr	r3, [r7, #12]
 810dc9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810dca2:	2b00      	cmp	r3, #0
 810dca4:	d00c      	beq.n	810dcc0 <_nx_ip_thread_entry+0x1b8>
        {

            /* Process the TCP packet queue.  */
            (ip_ptr -> nx_ip_tcp_queue_process)(ip_ptr);
 810dca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dca8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 810dcac:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810dcae:	4798      	blx	r3

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_TCP_EVENT);
 810dcb0:	68fb      	ldr	r3, [r7, #12]
 810dcb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810dcb6:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 810dcb8:	68fb      	ldr	r3, [r7, #12]
 810dcba:	2b00      	cmp	r3, #0
 810dcbc:	f000 811d 	beq.w	810defa <_nx_ip_thread_entry+0x3f2>
                continue;
            }
        }

        /* Check for a fast TCP event.  */
        if (ip_events & NX_IP_FAST_EVENT)
 810dcc0:	68fb      	ldr	r3, [r7, #12]
 810dcc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810dcc6:	2b00      	cmp	r3, #0
 810dcc8:	d011      	beq.n	810dcee <_nx_ip_thread_entry+0x1e6>
            }

#endif /* FEATURE_NX_IPV6 */

            /* Process the fast TCP processing.  */
            if (ip_ptr -> nx_ip_tcp_fast_periodic_processing)
 810dcca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dccc:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 810dcd0:	2b00      	cmp	r3, #0
 810dcd2:	d004      	beq.n	810dcde <_nx_ip_thread_entry+0x1d6>
            {
                (ip_ptr -> nx_ip_tcp_fast_periodic_processing)(ip_ptr);
 810dcd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dcd6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 810dcda:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810dcdc:	4798      	blx	r3
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_FAST_EVENT);
 810dcde:	68fb      	ldr	r3, [r7, #12]
 810dce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810dce4:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 810dce6:	68fb      	ldr	r3, [r7, #12]
 810dce8:	2b00      	cmp	r3, #0
 810dcea:	f000 8108 	beq.w	810defe <_nx_ip_thread_entry+0x3f6>
                continue;
            }
        }

        /* Check for a periodic events.  */
        if (ip_events & NX_IP_PERIODIC_EVENT)
 810dcee:	68fb      	ldr	r3, [r7, #12]
 810dcf0:	f003 0301 	and.w	r3, r3, #1
 810dcf4:	2b00      	cmp	r3, #0
 810dcf6:	d039      	beq.n	810dd6c <_nx_ip_thread_entry+0x264>
        {

#ifndef NX_DISABLE_IPV4
            /* Process the ARP periodic update, if ARP has been enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 810dcf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dcfa:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	@ 0x6ec
 810dcfe:	2b00      	cmp	r3, #0
 810dd00:	d004      	beq.n	810dd0c <_nx_ip_thread_entry+0x204>
            {
                (ip_ptr -> nx_ip_arp_periodic_update)(ip_ptr);
 810dd02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dd04:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	@ 0x6ec
 810dd08:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810dd0a:	4798      	blx	r3
            }

            /* Process the RARP periodic update, if RARP has been enabled.  */
            if (ip_ptr -> nx_ip_rarp_periodic_update)
 810dd0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dd0e:	f8d3 3704 	ldr.w	r3, [r3, #1796]	@ 0x704
 810dd12:	2b00      	cmp	r3, #0
 810dd14:	d004      	beq.n	810dd20 <_nx_ip_thread_entry+0x218>
            {
                (ip_ptr -> nx_ip_rarp_periodic_update)(ip_ptr);
 810dd16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dd18:	f8d3 3704 	ldr.w	r3, [r3, #1796]	@ 0x704
 810dd1c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810dd1e:	4798      	blx	r3
            }

            /* Process IGMP periodic events, if IGMP has been enabled.  */
            if (ip_ptr -> nx_ip_igmp_periodic_processing)
 810dd20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dd22:	f8d3 335c 	ldr.w	r3, [r3, #860]	@ 0x35c
 810dd26:	2b00      	cmp	r3, #0
 810dd28:	d004      	beq.n	810dd34 <_nx_ip_thread_entry+0x22c>
            {
                (ip_ptr -> nx_ip_igmp_periodic_processing)(ip_ptr);
 810dd2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dd2c:	f8d3 335c 	ldr.w	r3, [r3, #860]	@ 0x35c
 810dd30:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810dd32:	4798      	blx	r3
            }
#endif /* !NX_DISABLE_IPV4  */

            /* Process IP fragmentation timeouts, if IP fragmenting has been
               enabled.  */
            if (ip_ptr -> nx_ip_fragment_timeout_check)
 810dd34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dd36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 810dd3a:	2b00      	cmp	r3, #0
 810dd3c:	d004      	beq.n	810dd48 <_nx_ip_thread_entry+0x240>
            {
                (ip_ptr -> nx_ip_fragment_timeout_check)(ip_ptr);
 810dd3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dd40:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 810dd44:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810dd46:	4798      	blx	r3
            }

            /* Process TCP periodic events, if TCP has been enabled.  */
            if (ip_ptr -> nx_ip_tcp_periodic_processing)
 810dd48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dd4a:	f8d3 349c 	ldr.w	r3, [r3, #1180]	@ 0x49c
 810dd4e:	2b00      	cmp	r3, #0
 810dd50:	d004      	beq.n	810dd5c <_nx_ip_thread_entry+0x254>
            {
                (ip_ptr -> nx_ip_tcp_periodic_processing)(ip_ptr);
 810dd52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dd54:	f8d3 349c 	ldr.w	r3, [r3, #1180]	@ 0x49c
 810dd58:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810dd5a:	4798      	blx	r3
            }
#endif /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

#endif /* FEATURE_NX_IPV6 */
            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_PERIODIC_EVENT);
 810dd5c:	68fb      	ldr	r3, [r7, #12]
 810dd5e:	f023 0301 	bic.w	r3, r3, #1
 810dd62:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 810dd64:	68fb      	ldr	r3, [r7, #12]
 810dd66:	2b00      	cmp	r3, #0
 810dd68:	f000 80cb 	beq.w	810df02 <_nx_ip_thread_entry+0x3fa>
        }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Check for an ARP receive packet event.  */
        if ((ip_events & NX_IP_ARP_REC_EVENT) && (ip_ptr -> nx_ip_arp_queue_process))
 810dd6c:	68fb      	ldr	r3, [r7, #12]
 810dd6e:	f003 0310 	and.w	r3, r3, #16
 810dd72:	2b00      	cmp	r3, #0
 810dd74:	d009      	beq.n	810dd8a <_nx_ip_thread_entry+0x282>
 810dd76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dd78:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	@ 0x6f0
 810dd7c:	2b00      	cmp	r3, #0
 810dd7e:	d004      	beq.n	810dd8a <_nx_ip_thread_entry+0x282>
        {

            /* Process the ARP queue.  */
            (ip_ptr -> nx_ip_arp_queue_process)(ip_ptr);
 810dd80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dd82:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	@ 0x6f0
 810dd86:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810dd88:	4798      	blx	r3
        }

        /* Check for an RARP receive packet event.  */
        if ((ip_events & NX_IP_RARP_REC_EVENT) && (ip_ptr -> nx_ip_rarp_queue_process))
 810dd8a:	68fb      	ldr	r3, [r7, #12]
 810dd8c:	f003 0320 	and.w	r3, r3, #32
 810dd90:	2b00      	cmp	r3, #0
 810dd92:	d009      	beq.n	810dda8 <_nx_ip_thread_entry+0x2a0>
 810dd94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dd96:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 810dd9a:	2b00      	cmp	r3, #0
 810dd9c:	d004      	beq.n	810dda8 <_nx_ip_thread_entry+0x2a0>
        {

            /* Process the RARP queue.  */
            (ip_ptr -> nx_ip_rarp_queue_process)(ip_ptr);
 810dd9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dda0:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 810dda4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810dda6:	4798      	blx	r3
        }

        /* Check for an IGMP message event.  */
        if (ip_events & NX_IP_IGMP_EVENT)
 810dda8:	68fb      	ldr	r3, [r7, #12]
 810ddaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810ddae:	2b00      	cmp	r3, #0
 810ddb0:	d004      	beq.n	810ddbc <_nx_ip_thread_entry+0x2b4>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_igmp_queue_process)(ip_ptr);
 810ddb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810ddb4:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 810ddb8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810ddba:	4798      	blx	r3
        }

        /* Check for an IGMP enable event.  */
        if (ip_events & NX_IP_IGMP_ENABLE_EVENT)
 810ddbc:	68fb      	ldr	r3, [r7, #12]
 810ddbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810ddc2:	2b00      	cmp	r3, #0
 810ddc4:	d033      	beq.n	810de2e <_nx_ip_thread_entry+0x326>
        {

            /* Call the associated driver for this IP instance to register the "all hosts"
               multicast address.  */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 810ddc6:	2300      	movs	r3, #0
 810ddc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810ddca:	e02d      	b.n	810de28 <_nx_ip_thread_entry+0x320>
            {
                /* Enable the hardware for IGMP for all valid interfaces. */
                if (ip_ptr -> nx_ip_interface[i].nx_interface_valid)
 810ddcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810ddce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ddd0:	214c      	movs	r1, #76	@ 0x4c
 810ddd2:	fb01 f303 	mul.w	r3, r1, r3
 810ddd6:	4413      	add	r3, r2
 810ddd8:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 810dddc:	781b      	ldrb	r3, [r3, #0]
 810ddde:	2b00      	cmp	r3, #0
 810dde0:	d01f      	beq.n	810de22 <_nx_ip_thread_entry+0x31a>
                {
                    driver_request.nx_ip_driver_ptr =                    ip_ptr;
 810dde2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810dde4:	62bb      	str	r3, [r7, #40]	@ 0x28
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
 810dde6:	2308      	movs	r3, #8
 810dde8:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
 810ddea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810ddee:	61bb      	str	r3, [r7, #24]
                    /*lint -e{835} -e{845} suppress operating on zero. */
                    driver_request.nx_ip_driver_physical_address_lsw =   NX_IP_MULTICAST_LOWER | (NX_ALL_HOSTS_ADDRESS & NX_IP_MULTICAST_MASK);
 810ddf0:	4b45      	ldr	r3, [pc, #276]	@ (810df08 <_nx_ip_thread_entry+0x400>)
 810ddf2:	61fb      	str	r3, [r7, #28]
                    driver_request.nx_ip_driver_interface            =   &(ip_ptr -> nx_ip_interface[i]);
 810ddf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ddf6:	224c      	movs	r2, #76	@ 0x4c
 810ddf8:	fb02 f303 	mul.w	r3, r2, r3
 810ddfc:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 810de00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810de02:	4413      	add	r3, r2
 810de04:	3304      	adds	r3, #4
 810de06:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_MULTICAST_JOIN, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 810de08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810de0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810de0c:	214c      	movs	r1, #76	@ 0x4c
 810de0e:	fb01 f303 	mul.w	r3, r1, r3
 810de12:	4413      	add	r3, r2
 810de14:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 810de18:	681b      	ldr	r3, [r3, #0]
 810de1a:	f107 0210 	add.w	r2, r7, #16
 810de1e:	4610      	mov	r0, r2
 810de20:	4798      	blx	r3
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 810de22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810de24:	3301      	adds	r3, #1
 810de26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810de28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810de2a:	2b00      	cmp	r3, #0
 810de2c:	d0ce      	beq.n	810ddcc <_nx_ip_thread_entry+0x2c4>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        /* Check for an IP unfragment event.  */
        if (ip_events & NX_IP_UNFRAG_EVENT)
 810de2e:	68fb      	ldr	r3, [r7, #12]
 810de30:	f003 0302 	and.w	r3, r3, #2
 810de34:	2b00      	cmp	r3, #0
 810de36:	d009      	beq.n	810de4c <_nx_ip_thread_entry+0x344>
        {

            /* Process the IP fragment reassemble, if fragment has been enabled.  */
            if (ip_ptr -> nx_ip_fragment_assembly)
 810de38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810de3a:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
 810de3e:	2b00      	cmp	r3, #0
 810de40:	d004      	beq.n	810de4c <_nx_ip_thread_entry+0x344>
            {
                (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
 810de42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810de44:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
 810de48:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810de4a:	4798      	blx	r3
            }
        }

#ifndef NX_DISABLE_IPV4
        /* Check for an ICMP message event.  */
        if (ip_events & NX_IP_ICMP_EVENT)
 810de4c:	68fb      	ldr	r3, [r7, #12]
 810de4e:	f003 0304 	and.w	r3, r3, #4
 810de52:	2b00      	cmp	r3, #0
 810de54:	d004      	beq.n	810de60 <_nx_ip_thread_entry+0x358>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_icmp_queue_process)(ip_ptr);
 810de56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810de58:	f8d3 3370 	ldr.w	r3, [r3, #880]	@ 0x370
 810de5c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810de5e:	4798      	blx	r3
        }
#endif /* NX_DISABLE_IPV4 */

        /* Check for a deferred processing request from the driver.  */
        if (ip_events & NX_IP_DRIVER_DEFERRED_EVENT)
 810de60:	68fb      	ldr	r3, [r7, #12]
 810de62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810de66:	2b00      	cmp	r3, #0
 810de68:	d031      	beq.n	810dece <_nx_ip_thread_entry+0x3c6>
        {

            /* Go through each valid interface. */
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 810de6a:	2300      	movs	r3, #0
 810de6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 810de6e:	e02b      	b.n	810dec8 <_nx_ip_thread_entry+0x3c0>
            {
                if (ip_ptr -> nx_ip_interface[index].nx_interface_valid)
 810de70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810de72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810de74:	214c      	movs	r1, #76	@ 0x4c
 810de76:	fb01 f303 	mul.w	r3, r1, r3
 810de7a:	4413      	add	r3, r2
 810de7c:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 810de80:	781b      	ldrb	r3, [r3, #0]
 810de82:	2b00      	cmp	r3, #0
 810de84:	d01d      	beq.n	810dec2 <_nx_ip_thread_entry+0x3ba>
                {

                    /* Yes, there is a deferred processing event from the driver. The only valid information
                       fields are the IP pointer and the command.  */
                    driver_request.nx_ip_driver_ptr =        ip_ptr;
 810de86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810de88:	62bb      	str	r3, [r7, #40]	@ 0x28
                    driver_request.nx_ip_driver_command =    NX_LINK_DEFERRED_PROCESSING;
 810de8a:	2312      	movs	r3, #18
 810de8c:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[index]);
 810de8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810de90:	224c      	movs	r2, #76	@ 0x4c
 810de92:	fb02 f303 	mul.w	r3, r2, r3
 810de96:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 810de9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810de9c:	4413      	add	r3, r2
 810de9e:	3304      	adds	r3, #4
 810dea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    driver_request.nx_ip_driver_return_ptr = &foo;
 810dea2:	f107 0308 	add.w	r3, r7, #8
 810dea6:	627b      	str	r3, [r7, #36]	@ 0x24

                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 810dea8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810deaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810deac:	214c      	movs	r1, #76	@ 0x4c
 810deae:	fb01 f303 	mul.w	r3, r1, r3
 810deb2:	4413      	add	r3, r2
 810deb4:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 810deb8:	681b      	ldr	r3, [r3, #0]
 810deba:	f107 0210 	add.w	r2, r7, #16
 810debe:	4610      	mov	r0, r2
 810dec0:	4798      	blx	r3
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 810dec2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810dec4:	3301      	adds	r3, #1
 810dec6:	64bb      	str	r3, [r7, #72]	@ 0x48
 810dec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810deca:	2b00      	cmp	r3, #0
 810decc:	d0d0      	beq.n	810de70 <_nx_ip_thread_entry+0x368>
                }
            }
        }

        /* Check for a deferred TCP cleanup processing request from the driver.  */
        if (ip_events & NX_IP_TCP_CLEANUP_DEFERRED)
 810dece:	68fb      	ldr	r3, [r7, #12]
 810ded0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810ded4:	2b00      	cmp	r3, #0
 810ded6:	d004      	beq.n	810dee2 <_nx_ip_thread_entry+0x3da>
        {

            /* Yes, there is a deferred cleanup processing event. Call the TCP deferred cleanup
               processing function.  */
            (ip_ptr -> nx_tcp_deferred_cleanup_check)(ip_ptr);
 810ded8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810deda:	f8d3 3720 	ldr.w	r3, [r3, #1824]	@ 0x720
 810dede:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810dee0:	4798      	blx	r3
        }

        /* Check for a link status change request from the driver.  */
        if (ip_events & NX_IP_LINK_STATUS_EVENT)
 810dee2:	68fb      	ldr	r3, [r7, #12]
 810dee4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810dee8:	2b00      	cmp	r3, #0
 810deea:	f43f ae85 	beq.w	810dbf8 <_nx_ip_thread_entry+0xf0>
        {

            /* Yes, there is a link status change  event. Call the deferred link status processing function. */
            _nx_ip_deferred_link_status_process(ip_ptr);
 810deee:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810def0:	f7fe ff48 	bl	810cd84 <_nx_ip_deferred_link_status_process>
 810def4:	e680      	b.n	810dbf8 <_nx_ip_thread_entry+0xf0>
                continue;
 810def6:	bf00      	nop
 810def8:	e67e      	b.n	810dbf8 <_nx_ip_thread_entry+0xf0>
                continue;
 810defa:	bf00      	nop
 810defc:	e67c      	b.n	810dbf8 <_nx_ip_thread_entry+0xf0>
                continue;
 810defe:	bf00      	nop
 810df00:	e67a      	b.n	810dbf8 <_nx_ip_thread_entry+0xf0>
                continue;
 810df02:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 810df04:	e678      	b.n	810dbf8 <_nx_ip_thread_entry+0xf0>
 810df06:	bf00      	nop
 810df08:	5e000001 	.word	0x5e000001

0810df0c <_nx_ipv4_option_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ipv4_option_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 810df0c:	b580      	push	{r7, lr}
 810df0e:	b08a      	sub	sp, #40	@ 0x28
 810df10:	af00      	add	r7, sp, #0
 810df12:	6078      	str	r0, [r7, #4]
 810df14:	6039      	str	r1, [r7, #0]

NX_IPV4_HEADER *ip_header_ptr;
UCHAR          *option_ptr;
ULONG           ip_option_length;
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
ULONG           ip_normal_length = 20;
 810df16:	2314      	movs	r3, #20
 810df18:	61bb      	str	r3, [r7, #24]
#endif /* NX_DISABLE_ICMPV4_ERROR_MESSAGE */
UINT            index = 0;
 810df1a:	2300      	movs	r3, #0
 810df1c:	623b      	str	r3, [r7, #32]
UCHAR           op_type;
UCHAR           op_length;
UCHAR           op_timestamp_offset;
UCHAR           op_timestamp_overflow;
UCHAR           op_timestamp_flags;
UINT            op_timestamp_counter = 0;
 810df1e:	2300      	movs	r3, #0
 810df20:	61fb      	str	r3, [r7, #28]

    /* Set the IPv4 header and IPv4 option pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 810df22:	683b      	ldr	r3, [r7, #0]
 810df24:	689b      	ldr	r3, [r3, #8]
 810df26:	617b      	str	r3, [r7, #20]
    option_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 810df28:	683b      	ldr	r3, [r7, #0]
 810df2a:	689b      	ldr	r3, [r3, #8]
 810df2c:	3314      	adds	r3, #20
 810df2e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Calculate the IPv4 option length.  */
    ip_option_length = ((((ip_header_ptr -> nx_ip_header_word_0 & NX_IP_LENGTH_MASK) >> 24) - NX_IP_NORMAL_LENGTH) & 0xFF) * (ULONG)sizeof(ULONG);
 810df30:	697b      	ldr	r3, [r7, #20]
 810df32:	681b      	ldr	r3, [r3, #0]
 810df34:	0e1b      	lsrs	r3, r3, #24
 810df36:	f003 030f 	and.w	r3, r3, #15
 810df3a:	3b05      	subs	r3, #5
 810df3c:	b2db      	uxtb	r3, r3
 810df3e:	009b      	lsls	r3, r3, #2
 810df40:	613b      	str	r3, [r7, #16]

    /* Loop to process the IPv4 option.  */
    while (index < ip_option_length)
 810df42:	e0a3      	b.n	810e08c <_nx_ipv4_option_process+0x180>
    {

        /* Get the option type.  */
        op_type = *option_ptr;
 810df44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810df46:	781b      	ldrb	r3, [r3, #0]
 810df48:	73fb      	strb	r3, [r7, #15]

        /* Process the option type. */
        switch (op_type)
 810df4a:	7bfb      	ldrb	r3, [r7, #15]
 810df4c:	2b44      	cmp	r3, #68	@ 0x44
 810df4e:	d010      	beq.n	810df72 <_nx_ipv4_option_process+0x66>
 810df50:	2b44      	cmp	r3, #68	@ 0x44
 810df52:	f300 8082 	bgt.w	810e05a <_nx_ipv4_option_process+0x14e>
 810df56:	2b00      	cmp	r3, #0
 810df58:	d002      	beq.n	810df60 <_nx_ipv4_option_process+0x54>
 810df5a:	2b01      	cmp	r3, #1
 810df5c:	d002      	beq.n	810df64 <_nx_ipv4_option_process+0x58>
                return(NX_FALSE);
            }
            break;
        }
        default:
            break;
 810df5e:	e07c      	b.n	810e05a <_nx_ipv4_option_process+0x14e>
            return(NX_TRUE);
 810df60:	2301      	movs	r3, #1
 810df62:	e099      	b.n	810e098 <_nx_ipv4_option_process+0x18c>
            option_ptr++;
 810df64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810df66:	3301      	adds	r3, #1
 810df68:	627b      	str	r3, [r7, #36]	@ 0x24
            index++;
 810df6a:	6a3b      	ldr	r3, [r7, #32]
 810df6c:	3301      	adds	r3, #1
 810df6e:	623b      	str	r3, [r7, #32]
            continue;
 810df70:	e08c      	b.n	810e08c <_nx_ipv4_option_process+0x180>
            op_timestamp_counter++;
 810df72:	69fb      	ldr	r3, [r7, #28]
 810df74:	3301      	adds	r3, #1
 810df76:	61fb      	str	r3, [r7, #28]
            if (op_timestamp_counter > 1)
 810df78:	69fb      	ldr	r3, [r7, #28]
 810df7a:	2b01      	cmp	r3, #1
 810df7c:	d90b      	bls.n	810df96 <_nx_ipv4_option_process+0x8a>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 810df7e:	69ba      	ldr	r2, [r7, #24]
 810df80:	6a3b      	ldr	r3, [r7, #32]
 810df82:	4413      	add	r3, r2
 810df84:	3302      	adds	r3, #2
 810df86:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 810df8a:	6839      	ldr	r1, [r7, #0]
 810df8c:	6878      	ldr	r0, [r7, #4]
 810df8e:	f7fe fb4b 	bl	810c628 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 810df92:	2300      	movs	r3, #0
 810df94:	e080      	b.n	810e098 <_nx_ipv4_option_process+0x18c>
            op_length = *(option_ptr + 1);
 810df96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810df98:	785b      	ldrb	r3, [r3, #1]
 810df9a:	73bb      	strb	r3, [r7, #14]
            op_timestamp_offset = *(option_ptr + 2);
 810df9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810df9e:	789b      	ldrb	r3, [r3, #2]
 810dfa0:	737b      	strb	r3, [r7, #13]
            op_timestamp_overflow = (*(option_ptr + 3)) >> 4;
 810dfa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dfa4:	3303      	adds	r3, #3
 810dfa6:	781b      	ldrb	r3, [r3, #0]
 810dfa8:	091b      	lsrs	r3, r3, #4
 810dfaa:	733b      	strb	r3, [r7, #12]
            op_timestamp_flags = (*(option_ptr + 3)) & 0xF;
 810dfac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dfae:	3303      	adds	r3, #3
 810dfb0:	781b      	ldrb	r3, [r3, #0]
 810dfb2:	f003 030f 	and.w	r3, r3, #15
 810dfb6:	72fb      	strb	r3, [r7, #11]
            if ((op_length < 8) || (op_length > 40) || ((op_length % 4) != 0))
 810dfb8:	7bbb      	ldrb	r3, [r7, #14]
 810dfba:	2b07      	cmp	r3, #7
 810dfbc:	d908      	bls.n	810dfd0 <_nx_ipv4_option_process+0xc4>
 810dfbe:	7bbb      	ldrb	r3, [r7, #14]
 810dfc0:	2b28      	cmp	r3, #40	@ 0x28
 810dfc2:	d805      	bhi.n	810dfd0 <_nx_ipv4_option_process+0xc4>
 810dfc4:	7bbb      	ldrb	r3, [r7, #14]
 810dfc6:	f003 0303 	and.w	r3, r3, #3
 810dfca:	b2db      	uxtb	r3, r3
 810dfcc:	2b00      	cmp	r3, #0
 810dfce:	d00b      	beq.n	810dfe8 <_nx_ipv4_option_process+0xdc>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 810dfd0:	69ba      	ldr	r2, [r7, #24]
 810dfd2:	6a3b      	ldr	r3, [r7, #32]
 810dfd4:	4413      	add	r3, r2
 810dfd6:	3302      	adds	r3, #2
 810dfd8:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 810dfdc:	6839      	ldr	r1, [r7, #0]
 810dfde:	6878      	ldr	r0, [r7, #4]
 810dfe0:	f7fe fb22 	bl	810c628 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 810dfe4:	2300      	movs	r3, #0
 810dfe6:	e057      	b.n	810e098 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_offset < 5) || ((op_timestamp_offset % 2) == 0))
 810dfe8:	7b7b      	ldrb	r3, [r7, #13]
 810dfea:	2b04      	cmp	r3, #4
 810dfec:	d905      	bls.n	810dffa <_nx_ipv4_option_process+0xee>
 810dfee:	7b7b      	ldrb	r3, [r7, #13]
 810dff0:	f003 0301 	and.w	r3, r3, #1
 810dff4:	b2db      	uxtb	r3, r3
 810dff6:	2b00      	cmp	r3, #0
 810dff8:	d10b      	bne.n	810e012 <_nx_ipv4_option_process+0x106>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 3));
 810dffa:	69ba      	ldr	r2, [r7, #24]
 810dffc:	6a3b      	ldr	r3, [r7, #32]
 810dffe:	4413      	add	r3, r2
 810e000:	3303      	adds	r3, #3
 810e002:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 810e006:	6839      	ldr	r1, [r7, #0]
 810e008:	6878      	ldr	r0, [r7, #4]
 810e00a:	f7fe fb0d 	bl	810c628 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 810e00e:	2300      	movs	r3, #0
 810e010:	e042      	b.n	810e098 <_nx_ipv4_option_process+0x18c>
            if (op_timestamp_overflow == 15)
 810e012:	7b3b      	ldrb	r3, [r7, #12]
 810e014:	2b0f      	cmp	r3, #15
 810e016:	d10b      	bne.n	810e030 <_nx_ipv4_option_process+0x124>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 810e018:	69ba      	ldr	r2, [r7, #24]
 810e01a:	6a3b      	ldr	r3, [r7, #32]
 810e01c:	4413      	add	r3, r2
 810e01e:	3304      	adds	r3, #4
 810e020:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 810e024:	6839      	ldr	r1, [r7, #0]
 810e026:	6878      	ldr	r0, [r7, #4]
 810e028:	f7fe fafe 	bl	810c628 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 810e02c:	2300      	movs	r3, #0
 810e02e:	e033      	b.n	810e098 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_flags != 0) && (op_timestamp_flags != 1) && (op_timestamp_flags != 3))
 810e030:	7afb      	ldrb	r3, [r7, #11]
 810e032:	2b00      	cmp	r3, #0
 810e034:	d013      	beq.n	810e05e <_nx_ipv4_option_process+0x152>
 810e036:	7afb      	ldrb	r3, [r7, #11]
 810e038:	2b01      	cmp	r3, #1
 810e03a:	d010      	beq.n	810e05e <_nx_ipv4_option_process+0x152>
 810e03c:	7afb      	ldrb	r3, [r7, #11]
 810e03e:	2b03      	cmp	r3, #3
 810e040:	d00d      	beq.n	810e05e <_nx_ipv4_option_process+0x152>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 810e042:	69ba      	ldr	r2, [r7, #24]
 810e044:	6a3b      	ldr	r3, [r7, #32]
 810e046:	4413      	add	r3, r2
 810e048:	3304      	adds	r3, #4
 810e04a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 810e04e:	6839      	ldr	r1, [r7, #0]
 810e050:	6878      	ldr	r0, [r7, #4]
 810e052:	f7fe fae9 	bl	810c628 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 810e056:	2300      	movs	r3, #0
 810e058:	e01e      	b.n	810e098 <_nx_ipv4_option_process+0x18c>
            break;
 810e05a:	bf00      	nop
 810e05c:	e000      	b.n	810e060 <_nx_ipv4_option_process+0x154>
            break;
 810e05e:	bf00      	nop
        }

        /* Get the option length.  */
        op_length = *(option_ptr + 1);
 810e060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e062:	785b      	ldrb	r3, [r3, #1]
 810e064:	73bb      	strb	r3, [r7, #14]

        /* Check for invalid option length.
           RFC 791: The option-length octet counts the option-type octet and the 
           option-length octet as well as the option-data octets.  */
        if ((op_length < 2) || ((index + op_length) > ip_option_length))
 810e066:	7bbb      	ldrb	r3, [r7, #14]
 810e068:	2b01      	cmp	r3, #1
 810e06a:	d905      	bls.n	810e078 <_nx_ipv4_option_process+0x16c>
 810e06c:	7bba      	ldrb	r2, [r7, #14]
 810e06e:	6a3b      	ldr	r3, [r7, #32]
 810e070:	4413      	add	r3, r2
 810e072:	693a      	ldr	r2, [r7, #16]
 810e074:	429a      	cmp	r2, r3
 810e076:	d201      	bcs.n	810e07c <_nx_ipv4_option_process+0x170>
        {
            return(NX_FALSE);
 810e078:	2300      	movs	r3, #0
 810e07a:	e00d      	b.n	810e098 <_nx_ipv4_option_process+0x18c>
        }

        /* Move to the next top level option. */
        option_ptr += op_length;
 810e07c:	7bbb      	ldrb	r3, [r7, #14]
 810e07e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e080:	4413      	add	r3, r2
 810e082:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Update the index.  */
        index += op_length;
 810e084:	7bbb      	ldrb	r3, [r7, #14]
 810e086:	6a3a      	ldr	r2, [r7, #32]
 810e088:	4413      	add	r3, r2
 810e08a:	623b      	str	r3, [r7, #32]
    while (index < ip_option_length)
 810e08c:	6a3a      	ldr	r2, [r7, #32]
 810e08e:	693b      	ldr	r3, [r7, #16]
 810e090:	429a      	cmp	r2, r3
 810e092:	f4ff af57 	bcc.w	810df44 <_nx_ipv4_option_process+0x38>
    }

    /* Return NX_TRUE.  */
    return(NX_TRUE);
 810e096:	2301      	movs	r3, #1
}
 810e098:	4618      	mov	r0, r3
 810e09a:	3728      	adds	r7, #40	@ 0x28
 810e09c:	46bd      	mov	sp, r7
 810e09e:	bd80      	pop	{r7, pc}

0810e0a0 <_nx_ipv4_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ipv4_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 810e0a0:	b580      	push	{r7, lr}
 810e0a2:	b096      	sub	sp, #88	@ 0x58
 810e0a4:	af02      	add	r7, sp, #8
 810e0a6:	6078      	str	r0, [r7, #4]
 810e0a8:	6039      	str	r1, [r7, #0]
#endif /* NX_DISABLE_IP_RX_CHECKSUM */

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 810e0aa:	683b      	ldr	r3, [r7, #0]
 810e0ac:	689b      	ldr	r3, [r3, #8]
 810e0ae:	64bb      	str	r3, [r7, #72]	@ 0x48
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, packet_ptr -> nx_packet_length, NX_TRACE_INTERNAL_EVENTS, 0, 0);


    /* Pick up the first word in the IP header. */
    val = ip_header_ptr -> nx_ip_header_word_0;
 810e0b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e0b2:	681b      	ldr	r3, [r3, #0]
 810e0b4:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Convert to host byte order. */
    NX_CHANGE_ULONG_ENDIAN(val);
 810e0b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810e0b8:	ba1b      	rev	r3, r3
 810e0ba:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Obtain packet length. */
    pkt_length = val & NX_LOWER_16_MASK;
 810e0bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810e0be:	b29b      	uxth	r3, r3
 810e0c0:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Make sure the IP length matches the packet length.  Some Ethernet devices
       add padding to small packets, which results in a discrepancy between the
       packet length and the IP header length.  */
    if (packet_ptr -> nx_packet_length != pkt_length)
 810e0c2:	683b      	ldr	r3, [r7, #0]
 810e0c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e0c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810e0c8:	429a      	cmp	r2, r3
 810e0ca:	d066      	beq.n	810e19a <_nx_ipv4_packet_receive+0xfa>
    {

        /* Determine if the packet length is less than the size reported in the IP header.  */
        if (packet_ptr -> nx_packet_length < pkt_length)
 810e0cc:	683b      	ldr	r3, [r7, #0]
 810e0ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e0d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810e0d2:	429a      	cmp	r2, r3
 810e0d4:	d90d      	bls.n	810e0f2 <_nx_ipv4_packet_receive+0x52>
            /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 810e0d6:	687b      	ldr	r3, [r7, #4]
 810e0d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810e0da:	1c5a      	adds	r2, r3, #1
 810e0dc:	687b      	ldr	r3, [r7, #4]
 810e0de:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 810e0e0:	687b      	ldr	r3, [r7, #4]
 810e0e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810e0e4:	1c5a      	adds	r2, r3, #1
 810e0e6:	687b      	ldr	r3, [r7, #4]
 810e0e8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

            /* Invalid packet length, just release it.  */
            _nx_packet_release(packet_ptr);
 810e0ea:	6838      	ldr	r0, [r7, #0]
 810e0ec:	f000 fdc4 	bl	810ec78 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 810e0f0:	e228      	b.n	810e544 <_nx_ipv4_packet_receive+0x4a4>
        }

        /* Calculate the difference in the length.  */
        delta =  packet_ptr -> nx_packet_length - pkt_length;
 810e0f2:	683b      	ldr	r3, [r7, #0]
 810e0f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810e0f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e0f8:	1ad3      	subs	r3, r2, r3
 810e0fa:	647b      	str	r3, [r7, #68]	@ 0x44

        /* Adjust the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - delta;
 810e0fc:	683b      	ldr	r3, [r7, #0]
 810e0fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810e100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810e102:	1ad2      	subs	r2, r2, r3
 810e104:	683b      	ldr	r3, [r7, #0]
 810e106:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Adjust the append pointer.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Loop to process adjustment that spans multiple packets.  */
        while (delta)
 810e108:	e044      	b.n	810e194 <_nx_ipv4_packet_receive+0xf4>
        {

            /* Determine if the packet is chained (or still chained after the adjustment).  */
            if (packet_ptr -> nx_packet_last == NX_NULL)
 810e10a:	683b      	ldr	r3, [r7, #0]
 810e10c:	699b      	ldr	r3, [r3, #24]
 810e10e:	2b00      	cmp	r3, #0
 810e110:	d107      	bne.n	810e122 <_nx_ipv4_packet_receive+0x82>
            {

                /* No, packet is not chained, simply adjust the append pointer in the packet.  */
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
 810e112:	683b      	ldr	r3, [r7, #0]
 810e114:	68da      	ldr	r2, [r3, #12]
 810e116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810e118:	425b      	negs	r3, r3
 810e11a:	441a      	add	r2, r3
 810e11c:	683b      	ldr	r3, [r7, #0]
 810e11e:	60da      	str	r2, [r3, #12]

                /* Break out of the loop, since the adjustment is complete.  */
                break;
 810e120:	e03b      	b.n	810e19a <_nx_ipv4_packet_receive+0xfa>
            }

            /* Pickup the pointer to the last packet.  */
            last_packet =  packet_ptr -> nx_packet_last;
 810e122:	683b      	ldr	r3, [r7, #0]
 810e124:	699b      	ldr	r3, [r3, #24]
 810e126:	63bb      	str	r3, [r7, #56]	@ 0x38

            /* Determine if the amount to adjust is less than the payload in the last packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 810e128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e12a:	68da      	ldr	r2, [r3, #12]
 810e12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e12e:	689b      	ldr	r3, [r3, #8]
 810e130:	1ad3      	subs	r3, r2, r3
 810e132:	461a      	mov	r2, r3
 810e134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810e136:	4293      	cmp	r3, r2
 810e138:	d207      	bcs.n	810e14a <_nx_ipv4_packet_receive+0xaa>
            {

                /* Yes, simply adjust the append pointer of the last packet in the chain.  */
                /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                last_packet -> nx_packet_append_ptr =  last_packet -> nx_packet_append_ptr - delta;
 810e13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e13c:	68da      	ldr	r2, [r3, #12]
 810e13e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810e140:	425b      	negs	r3, r3
 810e142:	441a      	add	r2, r3
 810e144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e146:	60da      	str	r2, [r3, #12]

                /* Get out of the loop, since the adjustment is complete.  */
                break;
 810e148:	e027      	b.n	810e19a <_nx_ipv4_packet_receive+0xfa>
            }
            else
            {

                /* Adjust the delta by the amount in the last packet.  */
                delta =  delta - ((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr));
 810e14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e14c:	68da      	ldr	r2, [r3, #12]
 810e14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e150:	689b      	ldr	r3, [r3, #8]
 810e152:	1ad3      	subs	r3, r2, r3
 810e154:	461a      	mov	r2, r3
 810e156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810e158:	1a9b      	subs	r3, r3, r2
 810e15a:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Find the packet before the last packet.  */
                before_last_packet =  packet_ptr;
 810e15c:	683b      	ldr	r3, [r7, #0]
 810e15e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                while (before_last_packet -> nx_packet_next != last_packet)
 810e160:	e002      	b.n	810e168 <_nx_ipv4_packet_receive+0xc8>
                {

                    /* Move to the next packet in the chain.  */
                    before_last_packet =  before_last_packet -> nx_packet_next;
 810e162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810e164:	685b      	ldr	r3, [r3, #4]
 810e166:	64fb      	str	r3, [r7, #76]	@ 0x4c
                while (before_last_packet -> nx_packet_next != last_packet)
 810e168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810e16a:	685b      	ldr	r3, [r3, #4]
 810e16c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810e16e:	429a      	cmp	r2, r3
 810e170:	d1f7      	bne.n	810e162 <_nx_ipv4_packet_receive+0xc2>

                /* At this point, we need to release the last packet and adjust the other packet
                   pointers.  */

                /* Ensure the next packet pointer is NULL in what is now the last packet.  */
                before_last_packet -> nx_packet_next =  NX_NULL;
 810e172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810e174:	2200      	movs	r2, #0
 810e176:	605a      	str	r2, [r3, #4]

                /* Determine if the packet is still chained.  */
                if (packet_ptr != before_last_packet)
 810e178:	683a      	ldr	r2, [r7, #0]
 810e17a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810e17c:	429a      	cmp	r2, r3
 810e17e:	d003      	beq.n	810e188 <_nx_ipv4_packet_receive+0xe8>
                {

                    /* Yes, the packet is still chained, setup the last packet pointer.  */
                    packet_ptr -> nx_packet_last =  before_last_packet;
 810e180:	683b      	ldr	r3, [r7, #0]
 810e182:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 810e184:	619a      	str	r2, [r3, #24]
 810e186:	e002      	b.n	810e18e <_nx_ipv4_packet_receive+0xee>
                }
                else
                {

                    /* The packet is no longer chained, set the last packet pointer to NULL.  */
                    packet_ptr -> nx_packet_last =  NX_NULL;
 810e188:	683b      	ldr	r3, [r7, #0]
 810e18a:	2200      	movs	r2, #0
 810e18c:	619a      	str	r2, [r3, #24]
                }

                /* Release the last packet.   */
                _nx_packet_release(last_packet);
 810e18e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810e190:	f000 fd72 	bl	810ec78 <_nx_packet_release>
        while (delta)
 810e194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810e196:	2b00      	cmp	r3, #0
 810e198:	d1b7      	bne.n	810e10a <_nx_ipv4_packet_receive+0x6a>
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Get the incoming interface. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 810e19a:	683b      	ldr	r3, [r7, #0]
 810e19c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810e19e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Obtain IP header length. */
    ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 810e1a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810e1a2:	0e1b      	lsrs	r3, r3, #24
 810e1a4:	f003 030f 	and.w	r3, r3, #15
 810e1a8:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Check for minimal packet length. The check is done after the endian swapping
       since the compiler may possibly be able to optimize the lookup of
       "nx_packet_length" and therefore reduce the amount of work performing these
       size checks. The endian logic is okay since packets must always have
       payloads greater than the IP header in size.  */
    if ((packet_ptr -> nx_packet_length <= (ip_header_length << 2)) ||
 810e1aa:	683b      	ldr	r3, [r7, #0]
 810e1ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810e1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e1b0:	009b      	lsls	r3, r3, #2
 810e1b2:	429a      	cmp	r2, r3
 810e1b4:	d902      	bls.n	810e1bc <_nx_ipv4_packet_receive+0x11c>
 810e1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e1b8:	2b04      	cmp	r3, #4
 810e1ba:	d80d      	bhi.n	810e1d8 <_nx_ipv4_packet_receive+0x138>
        /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_packets++;
 810e1bc:	687b      	ldr	r3, [r7, #4]
 810e1be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810e1c0:	1c5a      	adds	r2, r3, #1
 810e1c2:	687b      	ldr	r3, [r7, #4]
 810e1c4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 810e1c6:	687b      	ldr	r3, [r7, #4]
 810e1c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810e1ca:	1c5a      	adds	r2, r3, #1
 810e1cc:	687b      	ldr	r3, [r7, #4]
 810e1ce:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 810e1d0:	6838      	ldr	r0, [r7, #0]
 810e1d2:	f000 fd51 	bl	810ec78 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 810e1d6:	e1b5      	b.n	810e544 <_nx_ipv4_packet_receive+0x4a4>
    {


        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* length is the size of IP header, including options */
                                           (UINT)(ip_header_length << 2),
 810e1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e1da:	009a      	lsls	r2, r3, #2
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 810e1dc:	2300      	movs	r3, #0
 810e1de:	9300      	str	r3, [sp, #0]
 810e1e0:	2300      	movs	r3, #0
 810e1e2:	2104      	movs	r1, #4
 810e1e4:	6838      	ldr	r0, [r7, #0]
 810e1e6:	f7fe fba8 	bl	810c93a <_nx_ip_checksum_compute>
 810e1ea:	4603      	mov	r3, r0
 810e1ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                           /* IPv4 header checksum doesn't care src/dest addresses */
                                           NULL, NULL);
        checksum =  ~checksum & NX_LOWER_16_MASK;
 810e1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e1f0:	43db      	mvns	r3, r3
 810e1f2:	b29b      	uxth	r3, r3
 810e1f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Check the checksum again.  */
        if (checksum)
 810e1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e1f8:	2b00      	cmp	r3, #0
 810e1fa:	d012      	beq.n	810e222 <_nx_ipv4_packet_receive+0x182>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 810e1fc:	687b      	ldr	r3, [r7, #4]
 810e1fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810e200:	1c5a      	adds	r2, r3, #1
 810e202:	687b      	ldr	r3, [r7, #4]
 810e204:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Increment the IP checksum error.  */
            ip_ptr -> nx_ip_receive_checksum_errors++;
 810e206:	687b      	ldr	r3, [r7, #4]
 810e208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810e20a:	1c5a      	adds	r2, r3, #1
 810e20c:	687b      	ldr	r3, [r7, #4]
 810e20e:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 810e210:	687b      	ldr	r3, [r7, #4]
 810e212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810e214:	1c5a      	adds	r2, r3, #1
 810e216:	687b      	ldr	r3, [r7, #4]
 810e218:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

            /* Checksum error, just release it.  */
            _nx_packet_release(packet_ptr);
 810e21a:	6838      	ldr	r0, [r7, #0]
 810e21c:	f000 fd2c 	bl	810ec78 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 810e220:	e190      	b.n	810e544 <_nx_ipv4_packet_receive+0x4a4>
    /* IP receive checksum processing is disabled... just check for and remove if
       necessary the IP option words.  */

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 810e222:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e224:	681b      	ldr	r3, [r3, #0]
 810e226:	ba1a      	rev	r2, r3
 810e228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e22a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 810e22c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e22e:	685b      	ldr	r3, [r3, #4]
 810e230:	ba1a      	rev	r2, r3
 810e232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e234:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 810e236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e238:	689b      	ldr	r3, [r3, #8]
 810e23a:	ba1a      	rev	r2, r3
 810e23c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e23e:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 810e240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e242:	68db      	ldr	r3, [r3, #12]
 810e244:	ba1a      	rev	r2, r3
 810e246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e248:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 810e24a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e24c:	691b      	ldr	r3, [r3, #16]
 810e24e:	ba1a      	rev	r2, r3
 810e250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e252:	611a      	str	r2, [r3, #16]
    }
#endif /* NX_ENABLE_SOURCE_ADDRESS_CHECK */

    /* Determine if there are options in the IP header that make the length greater
       than the default length.  */
    if (ip_header_length > NX_IP_NORMAL_LENGTH)
 810e254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e256:	2b05      	cmp	r3, #5
 810e258:	d949      	bls.n	810e2ee <_nx_ipv4_packet_receive+0x24e>
    {

        /* Process the IPv4 option.  */
        option_processed = _nx_ipv4_option_process(ip_ptr, packet_ptr);
 810e25a:	6839      	ldr	r1, [r7, #0]
 810e25c:	6878      	ldr	r0, [r7, #4]
 810e25e:	f7ff fe55 	bl	810df0c <_nx_ipv4_option_process>
 810e262:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Check the status.  */
        if (option_processed == NX_FALSE)
 810e264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e266:	2b00      	cmp	r3, #0
 810e268:	d108      	bne.n	810e27c <_nx_ipv4_packet_receive+0x1dc>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 810e26a:	687b      	ldr	r3, [r7, #4]
 810e26c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810e26e:	1c5a      	adds	r2, r3, #1
 810e270:	687b      	ldr	r3, [r7, #4]
 810e272:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

            /* IPv4 option error, toss the packet!  */
            _nx_packet_release(packet_ptr);
 810e274:	6838      	ldr	r0, [r7, #0]
 810e276:	f000 fcff 	bl	810ec78 <_nx_packet_release>

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 810e27a:	e163      	b.n	810e544 <_nx_ipv4_packet_receive+0x4a4>
        }

        /* Setup a pointer to the last option word.  */
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 810e27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e27e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 810e282:	3b01      	subs	r3, #1
 810e284:	009b      	lsls	r3, r3, #2
 810e286:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810e288:	4413      	add	r3, r2
 810e28a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the option words prior to handling the IP header.  */
        *word_ptr-- = ip_header_ptr -> nx_ip_header_destination_ip;
 810e28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e28e:	1f1a      	subs	r2, r3, #4
 810e290:	627a      	str	r2, [r7, #36]	@ 0x24
 810e292:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810e294:	6912      	ldr	r2, [r2, #16]
 810e296:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_source_ip;
 810e298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e29a:	1f1a      	subs	r2, r3, #4
 810e29c:	627a      	str	r2, [r7, #36]	@ 0x24
 810e29e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810e2a0:	68d2      	ldr	r2, [r2, #12]
 810e2a2:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_2;
 810e2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e2a6:	1f1a      	subs	r2, r3, #4
 810e2a8:	627a      	str	r2, [r7, #36]	@ 0x24
 810e2aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810e2ac:	6892      	ldr	r2, [r2, #8]
 810e2ae:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_1;
 810e2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e2b2:	1f1a      	subs	r2, r3, #4
 810e2b4:	627a      	str	r2, [r7, #36]	@ 0x24
 810e2b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810e2b8:	6852      	ldr	r2, [r2, #4]
 810e2ba:	601a      	str	r2, [r3, #0]
        *word_ptr = (ULONG)(((ip_header_ptr -> nx_ip_header_word_0) & (~NX_IP_LENGTH_MASK)) | NX_IP_VERSION);
 810e2bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e2be:	681b      	ldr	r3, [r3, #0]
 810e2c0:	f023 439e 	bic.w	r3, r3, #1325400064	@ 0x4f000000
 810e2c4:	f043 428a 	orr.w	r2, r3, #1157627904	@ 0x45000000
 810e2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e2ca:	601a      	str	r2, [r3, #0]

        /* Update the ip_header_ptr and the packet and the packet prepend pointer, ip header pointer and length.  */
        /*lint -e{929} -e{740} -e{826} suppress cast from pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)word_ptr;
 810e2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e2ce:	64bb      	str	r3, [r7, #72]	@ 0x48

        /*lint -e{928} suppress cast from pointer to pointer, since it is necessary  */
        packet_ptr -> nx_packet_prepend_ptr = (UCHAR *)word_ptr;
 810e2d0:	683b      	ldr	r3, [r7, #0]
 810e2d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e2d4:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 810e2d6:	683b      	ldr	r3, [r7, #0]
 810e2d8:	689a      	ldr	r2, [r3, #8]
 810e2da:	683b      	ldr	r3, [r7, #0]
 810e2dc:	635a      	str	r2, [r3, #52]	@ 0x34
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 810e2de:	683b      	ldr	r3, [r7, #0]
 810e2e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810e2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e2e4:	3b05      	subs	r3, #5
 810e2e6:	009b      	lsls	r3, r3, #2
 810e2e8:	1ad2      	subs	r2, r2, r3
 810e2ea:	683b      	ldr	r3, [r7, #0]
 810e2ec:	625a      	str	r2, [r3, #36]	@ 0x24
    }
#endif

    /* Determine if the IP datagram is for this IP address or a broadcast IP on this
       network.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 810e2ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e2f0:	691a      	ldr	r2, [r3, #16]
 810e2f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e2f4:	695b      	ldr	r3, [r3, #20]
 810e2f6:	429a      	cmp	r2, r3
 810e2f8:	d02f      	beq.n	810e35a <_nx_ipv4_packet_receive+0x2ba>

        /* Check for incoming IP address of zero.  Incoming IP address of zero should
           be received regardless of our current IP address.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 810e2fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e2fc:	691b      	ldr	r3, [r3, #16]
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 810e2fe:	2b00      	cmp	r3, #0
 810e300:	d02b      	beq.n	810e35a <_nx_ipv4_packet_receive+0x2ba>

        /* Check for IP broadcast.  */
        (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 810e302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e304:	691a      	ldr	r2, [r3, #16]
 810e306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e308:	699b      	ldr	r3, [r3, #24]
 810e30a:	401a      	ands	r2, r3
          if_ptr -> nx_interface_ip_network) &&
 810e30c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e30e:	69db      	ldr	r3, [r3, #28]
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 810e310:	429a      	cmp	r2, r3
 810e312:	d10a      	bne.n	810e32a <_nx_ipv4_packet_receive+0x28a>
         ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 810e314:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e316:	691a      	ldr	r2, [r3, #16]
 810e318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e31a:	699b      	ldr	r3, [r3, #24]
 810e31c:	43db      	mvns	r3, r3
 810e31e:	401a      	ands	r2, r3
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 810e320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e322:	699b      	ldr	r3, [r3, #24]
 810e324:	43db      	mvns	r3, r3
          if_ptr -> nx_interface_ip_network) &&
 810e326:	429a      	cmp	r2, r3
 810e328:	d017      	beq.n	810e35a <_nx_ipv4_packet_receive+0x2ba>

        /* Check for limited broadcast.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 810e32a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e32c:	691b      	ldr	r3, [r3, #16]
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 810e32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e332:	d012      	beq.n	810e35a <_nx_ipv4_packet_receive+0x2ba>

        /* Check for loopback address.  */
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 810e334:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e336:	691b      	ldr	r3, [r3, #16]
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 810e338:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 810e33c:	d303      	bcc.n	810e346 <_nx_ipv4_packet_receive+0x2a6>
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 810e33e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e340:	691b      	ldr	r3, [r3, #16]
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 810e342:	2b00      	cmp	r3, #0
 810e344:	da09      	bge.n	810e35a <_nx_ipv4_packet_receive+0x2ba>

        /* Check for valid Multicast address.  */
        (_nx_igmp_multicast_check(ip_ptr, ip_header_ptr -> nx_ip_header_destination_ip, if_ptr)))
 810e346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e348:	691b      	ldr	r3, [r3, #16]
 810e34a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810e34c:	4619      	mov	r1, r3
 810e34e:	6878      	ldr	r0, [r7, #4]
 810e350:	f7fe fa88 	bl	810c864 <_nx_igmp_multicast_check>
 810e354:	4603      	mov	r3, r0
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 810e356:	2b00      	cmp	r3, #0
 810e358:	d076      	beq.n	810e448 <_nx_ipv4_packet_receive+0x3a8>
    {

        /* Determine if this packet is fragmented.  If so, place it on the deferred processing
           queue.  The input packet will then be processed by an IP system thread.  */
        if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_FRAGMENT_MASK)
 810e35a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e35c:	685b      	ldr	r3, [r3, #4]
 810e35e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 810e362:	2b00      	cmp	r3, #0
 810e364:	d046      	beq.n	810e3f4 <_nx_ipv4_packet_receive+0x354>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive fragments count.  */
            ip_ptr -> nx_ip_total_fragments_received++;
 810e366:	687b      	ldr	r3, [r7, #4]
 810e368:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810e36a:	1c5a      	adds	r2, r3, #1
 810e36c:	687b      	ldr	r3, [r7, #4]
 810e36e:	669a      	str	r2, [r3, #104]	@ 0x68
#ifdef NX_ENABLE_LOW_WATERMARK
            if (ip_ptr -> nx_ip_fragment_assembly &&
                (packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_available >=
                 packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_low_watermark))
#else
            if (ip_ptr -> nx_ip_fragment_assembly)
 810e370:	687b      	ldr	r3, [r7, #4]
 810e372:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
 810e376:	2b00      	cmp	r3, #0
 810e378:	d033      	beq.n	810e3e2 <_nx_ipv4_packet_receive+0x342>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810e37a:	f3ef 8310 	mrs	r3, PRIMASK
 810e37e:	613b      	str	r3, [r7, #16]
    return(posture);
 810e380:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 810e382:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 810e384:	b672      	cpsid	i
    return(int_posture);
 810e386:	68fb      	ldr	r3, [r7, #12]

                /* Yes, fragmenting is available.  Place the packet on the incoming
                   fragment queue.  */

                /* Disable interrupts.  */
                TX_DISABLE
 810e388:	617b      	str	r3, [r7, #20]

                /* Determine if the queue is empty.  */
                if (ip_ptr -> nx_ip_received_fragment_head)
 810e38a:	687b      	ldr	r3, [r7, #4]
 810e38c:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 810e390:	2b00      	cmp	r3, #0
 810e392:	d00c      	beq.n	810e3ae <_nx_ipv4_packet_receive+0x30e>
                {

                    /* Reassembly queue is not empty, add this packet to the end of
                       the queue.  */
                    (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 810e394:	687b      	ldr	r3, [r7, #4]
 810e396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 810e39a:	683a      	ldr	r2, [r7, #0]
 810e39c:	61da      	str	r2, [r3, #28]
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 810e39e:	683b      	ldr	r3, [r7, #0]
 810e3a0:	2200      	movs	r2, #0
 810e3a2:	61da      	str	r2, [r3, #28]
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 810e3a4:	687b      	ldr	r3, [r7, #4]
 810e3a6:	683a      	ldr	r2, [r7, #0]
 810e3a8:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
 810e3ac:	e00a      	b.n	810e3c4 <_nx_ipv4_packet_receive+0x324>
                else
                {

                    /* Reassembly queue is empty.  Just setup the head and tail pointers
                       to point to this packet.  */
                    ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 810e3ae:	687b      	ldr	r3, [r7, #4]
 810e3b0:	683a      	ldr	r2, [r7, #0]
 810e3b2:	f8c3 22ac 	str.w	r2, [r3, #684]	@ 0x2ac
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 810e3b6:	687b      	ldr	r3, [r7, #4]
 810e3b8:	683a      	ldr	r2, [r7, #0]
 810e3ba:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
                    packet_ptr -> nx_packet_queue_next =      NX_NULL;
 810e3be:	683b      	ldr	r3, [r7, #0]
 810e3c0:	2200      	movs	r2, #0
 810e3c2:	61da      	str	r2, [r3, #28]
 810e3c4:	697b      	ldr	r3, [r7, #20]
 810e3c6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810e3c8:	68bb      	ldr	r3, [r7, #8]
 810e3ca:	f383 8810 	msr	PRIMASK, r3
}
 810e3ce:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
                /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
                tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 810e3d0:	687b      	ldr	r3, [r7, #4]
 810e3d2:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 810e3d6:	2200      	movs	r2, #0
 810e3d8:	2102      	movs	r1, #2
 810e3da:	4618      	mov	r0, r3
 810e3dc:	f006 f836 	bl	811444c <_tx_event_flags_set>
                /* Fragmentation has not been enabled, toss the packet!  */
                _nx_packet_release(packet_ptr);
            }

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 810e3e0:	e0b0      	b.n	810e544 <_nx_ipv4_packet_receive+0x4a4>
                ip_ptr -> nx_ip_receive_packets_dropped++;
 810e3e2:	687b      	ldr	r3, [r7, #4]
 810e3e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810e3e6:	1c5a      	adds	r2, r3, #1
 810e3e8:	687b      	ldr	r3, [r7, #4]
 810e3ea:	64da      	str	r2, [r3, #76]	@ 0x4c
                _nx_packet_release(packet_ptr);
 810e3ec:	6838      	ldr	r0, [r7, #0]
 810e3ee:	f000 fc43 	bl	810ec78 <_nx_packet_release>
            return;
 810e3f2:	e0a7      	b.n	810e544 <_nx_ipv4_packet_receive+0x4a4>
        }

        /* Determine what protocol the current IP datagram is.  */
        protocol =  (ip_header_ptr -> nx_ip_header_word_2 >> 16) & 0xFF;
 810e3f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e3f6:	689b      	ldr	r3, [r3, #8]
 810e3f8:	0c1b      	lsrs	r3, r3, #16
 810e3fa:	b2db      	uxtb	r3, r3
 810e3fc:	623b      	str	r3, [r7, #32]

        /* Remove the IP header from the packet.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 810e3fe:	683b      	ldr	r3, [r7, #0]
 810e400:	689b      	ldr	r3, [r3, #8]
 810e402:	f103 0214 	add.w	r2, r3, #20
 810e406:	683b      	ldr	r3, [r7, #0]
 810e408:	609a      	str	r2, [r3, #8]

        /* Adjust the length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 810e40a:	683b      	ldr	r3, [r7, #0]
 810e40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e40e:	f1a3 0214 	sub.w	r2, r3, #20
 810e412:	683b      	ldr	r3, [r7, #0]
 810e414:	625a      	str	r2, [r3, #36]	@ 0x24

#ifndef NX_DISABLE_IP_INFO

        /* Increment the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered++;
 810e416:	687b      	ldr	r3, [r7, #4]
 810e418:	6a1b      	ldr	r3, [r3, #32]
 810e41a:	1c5a      	adds	r2, r3, #1
 810e41c:	687b      	ldr	r3, [r7, #4]
 810e41e:	621a      	str	r2, [r3, #32]

        /* Increment the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 810e420:	687b      	ldr	r3, [r7, #4]
 810e422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810e424:	683b      	ldr	r3, [r7, #0]
 810e426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e428:	441a      	add	r2, r3
 810e42a:	687b      	ldr	r3, [r7, #4]
 810e42c:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 810e42e:	6a3a      	ldr	r2, [r7, #32]
 810e430:	6839      	ldr	r1, [r7, #0]
 810e432:	6878      	ldr	r0, [r7, #4]
 810e434:	f7fe fd02 	bl	810ce3c <_nx_ip_dispatch_process>
 810e438:	4603      	mov	r3, r0
 810e43a:	2b00      	cmp	r3, #0
 810e43c:	f000 8082 	beq.w	810e544 <_nx_ipv4_packet_receive+0x4a4>
        {
            _nx_packet_release(packet_ptr);
 810e440:	6838      	ldr	r0, [r7, #0]
 810e442:	f000 fc19 	bl	810ec78 <_nx_packet_release>
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 810e446:	e07d      	b.n	810e544 <_nx_ipv4_packet_receive+0x4a4>
    }
    /* Try to receive the DHCP message before release this packet.
       NetX should receive the unicast DHCP message when interface IP address is zero.  */

    /* Check if this IP interface has IP address.  */
    else if (if_ptr -> nx_interface_ip_address == 0)
 810e448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e44a:	695b      	ldr	r3, [r3, #20]
 810e44c:	2b00      	cmp	r3, #0
 810e44e:	d15a      	bne.n	810e506 <_nx_ipv4_packet_receive+0x466>
    {

        /* Determine what protocol the current IP datagram is.  */
        protocol =  ip_header_ptr -> nx_ip_header_word_2 & NX_IP_PROTOCOL_MASK;
 810e450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e452:	689b      	ldr	r3, [r3, #8]
 810e454:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810e458:	623b      	str	r3, [r7, #32]

        /* Check if this packet is UDP message.  */
        if (protocol == NX_IP_UDP)
 810e45a:	6a3b      	ldr	r3, [r7, #32]
 810e45c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 810e460:	d137      	bne.n	810e4d2 <_nx_ipv4_packet_receive+0x432>
        {

            /* Remove the IP header from the packet.  */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 810e462:	683b      	ldr	r3, [r7, #0]
 810e464:	689b      	ldr	r3, [r3, #8]
 810e466:	f103 0214 	add.w	r2, r3, #20
 810e46a:	683b      	ldr	r3, [r7, #0]
 810e46c:	609a      	str	r2, [r3, #8]

            /* Adjust the length.  */
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 810e46e:	683b      	ldr	r3, [r7, #0]
 810e470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e472:	f1a3 0214 	sub.w	r2, r3, #20
 810e476:	683b      	ldr	r3, [r7, #0]
 810e478:	625a      	str	r2, [r3, #36]	@ 0x24

#ifndef NX_DISABLE_IP_INFO

            /* Increment the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered++;
 810e47a:	687b      	ldr	r3, [r7, #4]
 810e47c:	6a1b      	ldr	r3, [r3, #32]
 810e47e:	1c5a      	adds	r2, r3, #1
 810e480:	687b      	ldr	r3, [r7, #4]
 810e482:	621a      	str	r2, [r3, #32]

            /* Increment the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 810e484:	687b      	ldr	r3, [r7, #4]
 810e486:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810e488:	683b      	ldr	r3, [r7, #0]
 810e48a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e48c:	441a      	add	r2, r3
 810e48e:	687b      	ldr	r3, [r7, #4]
 810e490:	625a      	str	r2, [r3, #36]	@ 0x24
#endif

            /* Pickup the pointer to the head of the UDP packet.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 810e492:	683b      	ldr	r3, [r7, #0]
 810e494:	689b      	ldr	r3, [r3, #8]
 810e496:	61fb      	str	r3, [r7, #28]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 810e498:	69fb      	ldr	r3, [r7, #28]
 810e49a:	681b      	ldr	r3, [r3, #0]
 810e49c:	ba1a      	rev	r2, r3
 810e49e:	69fb      	ldr	r3, [r7, #28]
 810e4a0:	601a      	str	r2, [r3, #0]

            /* Pickup the destination UDP port.  */
            dest_port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 810e4a2:	69fb      	ldr	r3, [r7, #28]
 810e4a4:	681b      	ldr	r3, [r3, #0]
 810e4a6:	b29b      	uxth	r3, r3
 810e4a8:	61bb      	str	r3, [r7, #24]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 810e4aa:	69fb      	ldr	r3, [r7, #28]
 810e4ac:	681b      	ldr	r3, [r3, #0]
 810e4ae:	ba1a      	rev	r2, r3
 810e4b0:	69fb      	ldr	r3, [r7, #28]
 810e4b2:	601a      	str	r2, [r3, #0]

            /* Check if this packet is DHCP message.  */
            if (dest_port == 68)
 810e4b4:	69bb      	ldr	r3, [r7, #24]
 810e4b6:	2b44      	cmp	r3, #68	@ 0x44
 810e4b8:	d10b      	bne.n	810e4d2 <_nx_ipv4_packet_receive+0x432>
            {
                if (ip_ptr -> nx_ip_udp_packet_receive)
 810e4ba:	687b      	ldr	r3, [r7, #4]
 810e4bc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 810e4c0:	2b00      	cmp	r3, #0
 810e4c2:	d006      	beq.n	810e4d2 <_nx_ipv4_packet_receive+0x432>
                {

                    /* Yes, dispatch it to the appropriate UDP handler if present.  */
                    (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 810e4c4:	687b      	ldr	r3, [r7, #4]
 810e4c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 810e4ca:	6839      	ldr	r1, [r7, #0]
 810e4cc:	6878      	ldr	r0, [r7, #4]
 810e4ce:	4798      	blx	r3

                    return;
 810e4d0:	e038      	b.n	810e544 <_nx_ipv4_packet_receive+0x4a4>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Decrement the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered--;
 810e4d2:	687b      	ldr	r3, [r7, #4]
 810e4d4:	6a1b      	ldr	r3, [r3, #32]
 810e4d6:	1e5a      	subs	r2, r3, #1
 810e4d8:	687b      	ldr	r3, [r7, #4]
 810e4da:	621a      	str	r2, [r3, #32]

        /* Decrement the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 810e4dc:	687b      	ldr	r3, [r7, #4]
 810e4de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810e4e0:	683b      	ldr	r3, [r7, #0]
 810e4e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e4e4:	1ad2      	subs	r2, r2, r3
 810e4e6:	687b      	ldr	r3, [r7, #4]
 810e4e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 810e4ea:	687b      	ldr	r3, [r7, #4]
 810e4ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810e4ee:	1c5a      	adds	r2, r3, #1
 810e4f0:	687b      	ldr	r3, [r7, #4]
 810e4f2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 810e4f4:	687b      	ldr	r3, [r7, #4]
 810e4f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810e4f8:	1c5a      	adds	r2, r3, #1
 810e4fa:	687b      	ldr	r3, [r7, #4]
 810e4fc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 810e4fe:	6838      	ldr	r0, [r7, #0]
 810e500:	f000 fbba 	bl	810ec78 <_nx_packet_release>

        /* Return to caller.  */
        return;
 810e504:	e01e      	b.n	810e544 <_nx_ipv4_packet_receive+0x4a4>
    }
    else if (ip_ptr -> nx_ip_forward_packet_process)
 810e506:	687b      	ldr	r3, [r7, #4]
 810e508:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 810e50c:	2b00      	cmp	r3, #0
 810e50e:	d00b      	beq.n	810e528 <_nx_ipv4_packet_receive+0x488>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packets forwarded counter.  */
        ip_ptr -> nx_ip_packets_forwarded++;
 810e510:	687b      	ldr	r3, [r7, #4]
 810e512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e514:	1c5a      	adds	r2, r3, #1
 810e516:	687b      	ldr	r3, [r7, #4]
 810e518:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

        /* The packet is not for this IP instance so call the
           forward IP packet processing routine.  */
        (ip_ptr -> nx_ip_forward_packet_process)(ip_ptr, packet_ptr);
 810e51a:	687b      	ldr	r3, [r7, #4]
 810e51c:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 810e520:	6839      	ldr	r1, [r7, #0]
 810e522:	6878      	ldr	r0, [r7, #4]
 810e524:	4798      	blx	r3
 810e526:	e00d      	b.n	810e544 <_nx_ipv4_packet_receive+0x4a4>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 810e528:	687b      	ldr	r3, [r7, #4]
 810e52a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810e52c:	1c5a      	adds	r2, r3, #1
 810e52e:	687b      	ldr	r3, [r7, #4]
 810e530:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 810e532:	687b      	ldr	r3, [r7, #4]
 810e534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810e536:	1c5a      	adds	r2, r3, #1
 810e538:	687b      	ldr	r3, [r7, #4]
 810e53a:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 810e53c:	6838      	ldr	r0, [r7, #0]
 810e53e:	f000 fb9b 	bl	810ec78 <_nx_packet_release>

        /* Return to caller.  */
        return;
 810e542:	bf00      	nop
    }
}
 810e544:	3750      	adds	r7, #80	@ 0x50
 810e546:	46bd      	mov	sp, r7
 810e548:	bd80      	pop	{r7, pc}
	...

0810e54c <_nx_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                          ULONG packet_type, ULONG wait_option)
{
 810e54c:	b580      	push	{r7, lr}
 810e54e:	b08c      	sub	sp, #48	@ 0x30
 810e550:	af00      	add	r7, sp, #0
 810e552:	60f8      	str	r0, [r7, #12]
 810e554:	60b9      	str	r1, [r7, #8]
 810e556:	607a      	str	r2, [r7, #4]
 810e558:	603b      	str	r3, [r7, #0]
TX_TRACE_BUFFER_ENTRY *trace_event;
ULONG                  trace_timestamp;
#endif

    /* Make sure the packet_type does not go beyond nx_packet_data_end. */
    if (pool_ptr -> nx_packet_pool_payload_size < packet_type)
 810e55a:	68fb      	ldr	r3, [r7, #12]
 810e55c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e55e:	687a      	ldr	r2, [r7, #4]
 810e560:	429a      	cmp	r2, r3
 810e562:	d901      	bls.n	810e568 <_nx_packet_allocate+0x1c>
    {
        return(NX_INVALID_PARAMETERS);
 810e564:	234d      	movs	r3, #77	@ 0x4d
 810e566:	e0ae      	b.n	810e6c6 <_nx_packet_allocate+0x17a>
    }

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 810e568:	68bb      	ldr	r3, [r7, #8]
 810e56a:	2200      	movs	r2, #0
 810e56c:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810e56e:	f3ef 8310 	mrs	r3, PRIMASK
 810e572:	61fb      	str	r3, [r7, #28]
    return(posture);
 810e574:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 810e576:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 810e578:	b672      	cpsid	i
    return(int_posture);
 810e57a:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_ALLOCATE, pool_ptr, 0, packet_type, pool_ptr -> nx_packet_pool_available, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Disable interrupts to get a packet from the pool.  */
    TX_DISABLE
 810e57c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there is an available packet.  */
    if (pool_ptr -> nx_packet_pool_available)
 810e57e:	68fb      	ldr	r3, [r7, #12]
 810e580:	689b      	ldr	r3, [r3, #8]
 810e582:	2b00      	cmp	r3, #0
 810e584:	d03a      	beq.n	810e5fc <_nx_packet_allocate+0xb0>
    {

        /* Yes, a packet is available.  Decrement the available count.  */
        pool_ptr -> nx_packet_pool_available--;
 810e586:	68fb      	ldr	r3, [r7, #12]
 810e588:	689b      	ldr	r3, [r3, #8]
 810e58a:	1e5a      	subs	r2, r3, #1
 810e58c:	68fb      	ldr	r3, [r7, #12]
 810e58e:	609a      	str	r2, [r3, #8]

        /* Pickup the current packet pointer.  */
        work_ptr =  pool_ptr -> nx_packet_pool_available_list;
 810e590:	68fb      	ldr	r3, [r7, #12]
 810e592:	69db      	ldr	r3, [r3, #28]
 810e594:	623b      	str	r3, [r7, #32]

        /* Modify the available list to point at the next packet in the pool. */
        pool_ptr -> nx_packet_pool_available_list =  work_ptr -> nx_packet_queue_next;
 810e596:	6a3b      	ldr	r3, [r7, #32]
 810e598:	69da      	ldr	r2, [r3, #28]
 810e59a:	68fb      	ldr	r3, [r7, #12]
 810e59c:	61da      	str	r2, [r3, #28]

        /* Setup various fields for this packet.  */
        work_ptr -> nx_packet_queue_next =   NX_NULL;
 810e59e:	6a3b      	ldr	r3, [r7, #32]
 810e5a0:	2200      	movs	r2, #0
 810e5a2:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
        work_ptr -> nx_packet_next =         NX_NULL;
 810e5a4:	6a3b      	ldr	r3, [r7, #32]
 810e5a6:	2200      	movs	r2, #0
 810e5a8:	605a      	str	r2, [r3, #4]
        work_ptr -> nx_packet_last =         NX_NULL;
 810e5aa:	6a3b      	ldr	r3, [r7, #32]
 810e5ac:	2200      	movs	r2, #0
 810e5ae:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr -> nx_packet_length =       0;
 810e5b0:	6a3b      	ldr	r3, [r7, #32]
 810e5b2:	2200      	movs	r2, #0
 810e5b4:	625a      	str	r2, [r3, #36]	@ 0x24
        work_ptr -> nx_packet_prepend_ptr =  work_ptr -> nx_packet_data_start + packet_type;
 810e5b6:	6a3b      	ldr	r3, [r7, #32]
 810e5b8:	691a      	ldr	r2, [r3, #16]
 810e5ba:	687b      	ldr	r3, [r7, #4]
 810e5bc:	441a      	add	r2, r3
 810e5be:	6a3b      	ldr	r3, [r7, #32]
 810e5c0:	609a      	str	r2, [r3, #8]
        work_ptr -> nx_packet_append_ptr =   work_ptr -> nx_packet_prepend_ptr;
 810e5c2:	6a3b      	ldr	r3, [r7, #32]
 810e5c4:	689a      	ldr	r2, [r3, #8]
 810e5c6:	6a3b      	ldr	r3, [r7, #32]
 810e5c8:	60da      	str	r2, [r3, #12]
        work_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 810e5ca:	6a3b      	ldr	r3, [r7, #32]
 810e5cc:	2200      	movs	r2, #0
 810e5ce:	631a      	str	r2, [r3, #48]	@ 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        work_ptr -> nx_packet_interface_capability_flag = 0;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
        /* Set the TCP queue to the value that indicates it has been allocated.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 810e5d0:	6a3b      	ldr	r3, [r7, #32]
 810e5d2:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 810e5d6:	621a      	str	r2, [r3, #32]
        work_ptr -> nx_packet_ipsec_sa_ptr = NX_NULL;
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Initialize the IP version field */
        work_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 810e5d8:	6a3b      	ldr	r3, [r7, #32]
 810e5da:	2204      	movs	r2, #4
 810e5dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
#endif /* !NX_DISABLE_IPV4  */

        /* Initialize the IP identification flag.  */
        work_ptr -> nx_packet_identical_copy = NX_FALSE;
 810e5e0:	6a3b      	ldr	r3, [r7, #32]
 810e5e2:	2200      	movs	r2, #0
 810e5e4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

        /* Initialize the IP header length. */
        work_ptr -> nx_packet_ip_header_length = 0;
 810e5e8:	6a3b      	ldr	r3, [r7, #32]
 810e5ea:	2200      	movs	r2, #0
 810e5ec:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
#ifdef NX_ENABLE_THREAD
        work_ptr -> nx_packet_type = 0;
#endif /* NX_ENABLE_THREAD  */

        /* Place the new packet pointer in the return destination.  */
        *packet_ptr =  work_ptr;
 810e5f0:	68bb      	ldr	r3, [r7, #8]
 810e5f2:	6a3a      	ldr	r2, [r7, #32]
 810e5f4:	601a      	str	r2, [r3, #0]

        /* Set status to success.  */
        status =  NX_SUCCESS;
 810e5f6:	2300      	movs	r3, #0
 810e5f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810e5fa:	e05d      	b.n	810e6b8 <_nx_packet_allocate+0x16c>
    else
    {

#ifndef NX_DISABLE_PACKET_INFO
        /* Increment the packet pool empty request count.  */
        pool_ptr -> nx_packet_pool_empty_requests++;
 810e5fc:	68fb      	ldr	r3, [r7, #12]
 810e5fe:	691b      	ldr	r3, [r3, #16]
 810e600:	1c5a      	adds	r2, r3, #1
 810e602:	68fb      	ldr	r3, [r7, #12]
 810e604:	611a      	str	r2, [r3, #16]
#endif

        /* Determine if the request specifies suspension.  */
        if (wait_option)
 810e606:	683b      	ldr	r3, [r7, #0]
 810e608:	2b00      	cmp	r3, #0
 810e60a:	d053      	beq.n	810e6b4 <_nx_packet_allocate+0x168>

            /* Prepare for suspension of this thread.  */

#ifndef NX_DISABLE_PACKET_INFO
            /* Increment the packet pool empty request suspension count.  */
            pool_ptr -> nx_packet_pool_empty_suspensions++;
 810e60c:	68fb      	ldr	r3, [r7, #12]
 810e60e:	695b      	ldr	r3, [r3, #20]
 810e610:	1c5a      	adds	r2, r3, #1
 810e612:	68fb      	ldr	r3, [r7, #12]
 810e614:	615a      	str	r2, [r3, #20]
#endif

            /* Pickup thread pointer.  */
            thread_ptr =  _tx_thread_current_ptr;
 810e616:	4b2e      	ldr	r3, [pc, #184]	@ (810e6d0 <_nx_packet_allocate+0x184>)
 810e618:	681b      	ldr	r3, [r3, #0]
 810e61a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  _nx_packet_pool_cleanup;
 810e61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e61e:	4a2d      	ldr	r2, [pc, #180]	@ (810e6d4 <_nx_packet_allocate+0x188>)
 810e620:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this pool control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (void *)pool_ptr;
 810e622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e624:	68fa      	ldr	r2, [r7, #12]
 810e626:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Save the return packet pointer address as well.  */
            thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 810e628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e62a:	68ba      	ldr	r2, [r7, #8]
 810e62c:	67da      	str	r2, [r3, #124]	@ 0x7c

            /* Save the packet type (or prepend offset) so this can be added
               after a new packet becomes available.  */
            thread_ptr -> tx_thread_suspend_info =  packet_type;
 810e62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e630:	687a      	ldr	r2, [r7, #4]
 810e632:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Setup suspension list.  */
            if (pool_ptr -> nx_packet_pool_suspension_list)
 810e634:	68fb      	ldr	r3, [r7, #12]
 810e636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e638:	2b00      	cmp	r3, #0
 810e63a:	d012      	beq.n	810e662 <_nx_packet_allocate+0x116>
            {

                /* This list is not NULL, add current thread to the end. */
                thread_ptr -> tx_thread_suspended_next =
                    pool_ptr -> nx_packet_pool_suspension_list;
 810e63c:	68fb      	ldr	r3, [r7, #12]
 810e63e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                thread_ptr -> tx_thread_suspended_next =
 810e640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e642:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =
                    (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous;
 810e644:	68fb      	ldr	r3, [r7, #12]
 810e646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e648:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_previous =
 810e64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e64c:	675a      	str	r2, [r3, #116]	@ 0x74
                ((pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 810e64e:	68fb      	ldr	r3, [r7, #12]
 810e650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810e654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e656:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr;
                (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 810e658:	68fb      	ldr	r3, [r7, #12]
 810e65a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e65c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e65e:	675a      	str	r2, [r3, #116]	@ 0x74
 810e660:	e008      	b.n	810e674 <_nx_packet_allocate+0x128>
            else
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr;
 810e662:	68fb      	ldr	r3, [r7, #12]
 810e664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e666:	62da      	str	r2, [r3, #44]	@ 0x2c
                thread_ptr -> tx_thread_suspended_next =            thread_ptr;
 810e668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e66a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e66c:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =        thread_ptr;
 810e66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e672:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the suspended thread count.  */
            pool_ptr -> nx_packet_pool_suspended_count++;
 810e674:	68fb      	ldr	r3, [r7, #12]
 810e676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810e678:	1c5a      	adds	r2, r3, #1
 810e67a:	68fb      	ldr	r3, [r7, #12]
 810e67c:	631a      	str	r2, [r3, #48]	@ 0x30

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =  TX_TCP_IP;
 810e67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e680:	220c      	movs	r2, #12
 810e682:	631a      	str	r2, [r3, #48]	@ 0x30

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 810e684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e686:	2201      	movs	r2, #1
 810e688:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 810e68a:	4b13      	ldr	r3, [pc, #76]	@ (810e6d8 <_nx_packet_allocate+0x18c>)
 810e68c:	681b      	ldr	r3, [r3, #0]
 810e68e:	3301      	adds	r3, #1
 810e690:	4a11      	ldr	r2, [pc, #68]	@ (810e6d8 <_nx_packet_allocate+0x18c>)
 810e692:	6013      	str	r3, [r2, #0]

            /* Save the timeout value.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 810e694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e696:	683a      	ldr	r2, [r7, #0]
 810e698:	64da      	str	r2, [r3, #76]	@ 0x4c
 810e69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e69c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810e69e:	697b      	ldr	r3, [r7, #20]
 810e6a0:	f383 8810 	msr	PRIMASK, r3
}
 810e6a4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 810e6a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810e6a8:	f007 fad2 	bl	8115c50 <_tx_thread_system_suspend>
                NX_PACKET_DEBUG(__FILE__, __LINE__, *packet_ptr);
            }
#endif /* NX_ENABLE_PACKET_DEBUG_INFO */

            /* Return the completion status.  */
            return(thread_ptr -> tx_thread_suspend_status);
 810e6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e6ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810e6b2:	e008      	b.n	810e6c6 <_nx_packet_allocate+0x17a>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  NX_NO_PACKET;
 810e6b4:	2301      	movs	r3, #1
 810e6b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810e6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e6ba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810e6bc:	693b      	ldr	r3, [r7, #16]
 810e6be:	f383 8810 	msr	PRIMASK, r3
}
 810e6c2:	bf00      	nop

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_ALLOCATE, 0, *packet_ptr, 0, 0);

    /* Return completion status.  */
    return(status);
 810e6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 810e6c6:	4618      	mov	r0, r3
 810e6c8:	3730      	adds	r7, #48	@ 0x30
 810e6ca:	46bd      	mov	sp, r7
 810e6cc:	bd80      	pop	{r7, pc}
 810e6ce:	bf00      	nop
 810e6d0:	20058128 	.word	0x20058128
 810e6d4:	0810e9ed 	.word	0x0810e9ed
 810e6d8:	200581c0 	.word	0x200581c0

0810e6dc <_nx_packet_copy>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_copy(NX_PACKET *packet_ptr, NX_PACKET **new_packet_ptr,
                      NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 810e6dc:	b580      	push	{r7, lr}
 810e6de:	b08e      	sub	sp, #56	@ 0x38
 810e6e0:	af02      	add	r7, sp, #8
 810e6e2:	60f8      	str	r0, [r7, #12]
 810e6e4:	60b9      	str	r1, [r7, #8]
 810e6e6:	607a      	str	r2, [r7, #4]
 810e6e8:	603b      	str	r3, [r7, #0]
ULONG                  trace_timestamp;
#endif


    /* Default the return packet pointer to NULL.  */
    *new_packet_ptr =  NX_NULL;
 810e6ea:	68bb      	ldr	r3, [r7, #8]
 810e6ec:	2200      	movs	r2, #0
 810e6ee:	601a      	str	r2, [r3, #0]

    /* Default the first packet to TRUE.  */
    first_packet = NX_TRUE;
 810e6f0:	2301      	movs	r3, #1
 810e6f2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_COPY, packet_ptr, 0, pool_ptr, wait_option, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Determine if there is anything to copy.  */
    if (packet_ptr -> nx_packet_length == 0)
 810e6f4:	68fb      	ldr	r3, [r7, #12]
 810e6f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e6f8:	2b00      	cmp	r3, #0
 810e6fa:	d101      	bne.n	810e700 <_nx_packet_copy+0x24>
    {

        /* Empty source packet, return an error.  */
        return(NX_INVALID_PACKET);
 810e6fc:	2312      	movs	r3, #18
 810e6fe:	e075      	b.n	810e7ec <_nx_packet_copy+0x110>
    }

    /* Allocate a new packet from the default packet pool supplied.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 810e700:	f107 0114 	add.w	r1, r7, #20
 810e704:	683b      	ldr	r3, [r7, #0]
 810e706:	2200      	movs	r2, #0
 810e708:	6878      	ldr	r0, [r7, #4]
 810e70a:	f7ff ff1f 	bl	810e54c <_nx_packet_allocate>
 810e70e:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Determine if the packet was not allocated.  */
    if (status != NX_SUCCESS)
 810e710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e712:	2b00      	cmp	r3, #0
 810e714:	d001      	beq.n	810e71a <_nx_packet_copy+0x3e>
    {

        /* Return the error code from the packet allocate routine.  */
        return(status);
 810e716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e718:	e068      	b.n	810e7ec <_nx_packet_copy+0x110>
    }

    /* Copy the packet interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized by _nx_packet_allocate. */
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 810e71a:	697b      	ldr	r3, [r7, #20]
 810e71c:	68fa      	ldr	r2, [r7, #12]
 810e71e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 810e720:	631a      	str	r2, [r3, #48]	@ 0x30
#ifdef NX_IPSEC_ENABLE
    work_ptr -> nx_packet_ipsec_sa_ptr = packet_ptr -> nx_packet_ipsec_sa_ptr;
#endif /* NX_IPSEC_ENABLE */

    /* Save the source packet pointer.  */
    source_ptr =  packet_ptr;
 810e722:	68fb      	ldr	r3, [r7, #12]
 810e724:	627b      	str	r3, [r7, #36]	@ 0x24
    do
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check if it is the first packet.  */
        if (first_packet == NX_TRUE)
 810e726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e728:	2b01      	cmp	r3, #1
 810e72a:	d110      	bne.n	810e74e <_nx_packet_copy+0x72>

            /* Yes, it is, copied the data beginning at data starting position.  */

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_data_start);
 810e72c:	68fb      	ldr	r3, [r7, #12]
 810e72e:	68da      	ldr	r2, [r3, #12]
 810e730:	68fb      	ldr	r3, [r7, #12]
 810e732:	691b      	ldr	r3, [r3, #16]
 810e734:	1ad3      	subs	r3, r2, r3
 810e736:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 810e738:	6978      	ldr	r0, [r7, #20]
 810e73a:	68fb      	ldr	r3, [r7, #12]
 810e73c:	6919      	ldr	r1, [r3, #16]
 810e73e:	683b      	ldr	r3, [r7, #0]
 810e740:	9300      	str	r3, [sp, #0]
 810e742:	687b      	ldr	r3, [r7, #4]
 810e744:	6a3a      	ldr	r2, [r7, #32]
 810e746:	f000 f855 	bl	810e7f4 <_nx_packet_data_append>
 810e74a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 810e74c:	e00f      	b.n	810e76e <_nx_packet_copy+0x92>
        else
        {

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 810e74e:	68fb      	ldr	r3, [r7, #12]
 810e750:	68da      	ldr	r2, [r3, #12]
 810e752:	68fb      	ldr	r3, [r7, #12]
 810e754:	689b      	ldr	r3, [r3, #8]
 810e756:	1ad3      	subs	r3, r2, r3
 810e758:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_prepend_ptr, size, pool_ptr, wait_option);
 810e75a:	6978      	ldr	r0, [r7, #20]
 810e75c:	68fb      	ldr	r3, [r7, #12]
 810e75e:	6899      	ldr	r1, [r3, #8]
 810e760:	683b      	ldr	r3, [r7, #0]
 810e762:	9300      	str	r3, [sp, #0]
 810e764:	687b      	ldr	r3, [r7, #4]
 810e766:	6a3a      	ldr	r2, [r7, #32]
 810e768:	f000 f844 	bl	810e7f4 <_nx_packet_data_append>
 810e76c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        }

        /* Determine if there was an error in the data append.  */
        if (status != NX_SUCCESS)
 810e76e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e770:	2b00      	cmp	r3, #0
 810e772:	d005      	beq.n	810e780 <_nx_packet_copy+0xa4>
        {

            /* An error is present, release the new packet.  */
            _nx_packet_release(work_ptr);
 810e774:	697b      	ldr	r3, [r7, #20]
 810e776:	4618      	mov	r0, r3
 810e778:	f000 fa7e 	bl	810ec78 <_nx_packet_release>

            /* Return the error code from the packet data append service.  */
            return(status);
 810e77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e77e:	e035      	b.n	810e7ec <_nx_packet_copy+0x110>
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the packet chain.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 810e780:	68fb      	ldr	r3, [r7, #12]
 810e782:	685b      	ldr	r3, [r3, #4]
 810e784:	60fb      	str	r3, [r7, #12]

        /* Set the first packet to FALSE.  */
        first_packet = NX_FALSE;
 810e786:	2300      	movs	r3, #0
 810e788:	62bb      	str	r3, [r7, #40]	@ 0x28
    } while (packet_ptr);
 810e78a:	68fb      	ldr	r3, [r7, #12]
 810e78c:	2b00      	cmp	r3, #0
 810e78e:	d1ca      	bne.n	810e726 <_nx_packet_copy+0x4a>
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Adjust the prepend pointer and data length.  */
    /*lint --e{946} --e{947} --e{732} suppress pointer subtraction, since it is necessary. */
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 810e790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e792:	689a      	ldr	r2, [r3, #8]
 810e794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e796:	691b      	ldr	r3, [r3, #16]
 810e798:	1ad3      	subs	r3, r2, r3
 810e79a:	61fb      	str	r3, [r7, #28]
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 810e79c:	697b      	ldr	r3, [r7, #20]
 810e79e:	6919      	ldr	r1, [r3, #16]
 810e7a0:	697b      	ldr	r3, [r7, #20]
 810e7a2:	69fa      	ldr	r2, [r7, #28]
 810e7a4:	440a      	add	r2, r1
 810e7a6:	609a      	str	r2, [r3, #8]
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 810e7a8:	697b      	ldr	r3, [r7, #20]
 810e7aa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 810e7ac:	697b      	ldr	r3, [r7, #20]
 810e7ae:	69fa      	ldr	r2, [r7, #28]
 810e7b0:	1a8a      	subs	r2, r1, r2
 810e7b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set the ip_header information. */
    ip_header_offset = (UINT)(source_ptr -> nx_packet_ip_header - source_ptr -> nx_packet_data_start);
 810e7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e7b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810e7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e7ba:	691b      	ldr	r3, [r3, #16]
 810e7bc:	1ad3      	subs	r3, r2, r3
 810e7be:	61bb      	str	r3, [r7, #24]
    work_ptr -> nx_packet_ip_header = work_ptr -> nx_packet_data_start + ip_header_offset;
 810e7c0:	697b      	ldr	r3, [r7, #20]
 810e7c2:	6919      	ldr	r1, [r3, #16]
 810e7c4:	697b      	ldr	r3, [r7, #20]
 810e7c6:	69ba      	ldr	r2, [r7, #24]
 810e7c8:	440a      	add	r2, r1
 810e7ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Determine if the packet copy was successful.  */
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 810e7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e7ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810e7d0:	697b      	ldr	r3, [r7, #20]
 810e7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e7d4:	429a      	cmp	r2, r3
 810e7d6:	d005      	beq.n	810e7e4 <_nx_packet_copy+0x108>
    {

        /* An error is present, release the new packet.  */
        _nx_packet_release(work_ptr);
 810e7d8:	697b      	ldr	r3, [r7, #20]
 810e7da:	4618      	mov	r0, r3
 810e7dc:	f000 fa4c 	bl	810ec78 <_nx_packet_release>

        /* Return an error code.  */
        return(NX_INVALID_PACKET);
 810e7e0:	2312      	movs	r3, #18
 810e7e2:	e003      	b.n	810e7ec <_nx_packet_copy+0x110>
    }
    else
    {

        /* Everything is okay, return the new packet pointer.  */
        *new_packet_ptr =  work_ptr;
 810e7e4:	697a      	ldr	r2, [r7, #20]
 810e7e6:	68bb      	ldr	r3, [r7, #8]
 810e7e8:	601a      	str	r2, [r3, #0]

        /* Update the trace event with the status.  */
        NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_COPY, 0, work_ptr, 0, 0);

        /* Return success status.  */
        return(NX_SUCCESS);
 810e7ea:	2300      	movs	r3, #0
    }
}
 810e7ec:	4618      	mov	r0, r3
 810e7ee:	3730      	adds	r7, #48	@ 0x30
 810e7f0:	46bd      	mov	sp, r7
 810e7f2:	bd80      	pop	{r7, pc}

0810e7f4 <_nx_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                             NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 810e7f4:	b580      	push	{r7, lr}
 810e7f6:	b08c      	sub	sp, #48	@ 0x30
 810e7f8:	af00      	add	r7, sp, #0
 810e7fa:	60f8      	str	r0, [r7, #12]
 810e7fc:	60b9      	str	r1, [r7, #8]
 810e7fe:	607a      	str	r2, [r7, #4]
 810e800:	603b      	str	r3, [r7, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
UINT       status;                 /* Return status              */
NX_PACKET *new_list_ptr;           /* Head of new list pointer   */
NX_PACKET *last_packet =  NX_NULL; /* Last supplied packet       */
 810e802:	2300      	movs	r3, #0
 810e804:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_APPEND, packet_ptr, data_start, data_size, pool_ptr, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Calculate the number of bytes available at the end of the supplied packet.  */
    if (packet_ptr -> nx_packet_last)
 810e806:	68fb      	ldr	r3, [r7, #12]
 810e808:	699b      	ldr	r3, [r3, #24]
 810e80a:	2b00      	cmp	r3, #0
 810e80c:	d016      	beq.n	810e83c <_nx_packet_data_append+0x48>
    {

        /* More than one packet.  Walk the packet chain starting at the last packet
           to calculate the remaining bytes.  */
        available_bytes =  0;
 810e80e:	2300      	movs	r3, #0
 810e810:	627b      	str	r3, [r7, #36]	@ 0x24
        work_ptr =  packet_ptr -> nx_packet_last;
 810e812:	68fb      	ldr	r3, [r7, #12]
 810e814:	699b      	ldr	r3, [r3, #24]
 810e816:	617b      	str	r3, [r7, #20]

            /* Calculate the available bytes in this packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 810e818:	697b      	ldr	r3, [r7, #20]
 810e81a:	695a      	ldr	r2, [r3, #20]
 810e81c:	697b      	ldr	r3, [r7, #20]
 810e81e:	68db      	ldr	r3, [r3, #12]
 810e820:	1ad3      	subs	r3, r2, r3
 810e822:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 810e824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e826:	4413      	add	r3, r2
 810e828:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Remember the last packet.  */
            last_packet =  work_ptr;
 810e82a:	697b      	ldr	r3, [r7, #20]
 810e82c:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Move to the next packet.   There typically won't be another packet, but just in
               case the logic is here for it!  */
            work_ptr =  work_ptr -> nx_packet_next;
 810e82e:	697b      	ldr	r3, [r7, #20]
 810e830:	685b      	ldr	r3, [r3, #4]
 810e832:	617b      	str	r3, [r7, #20]
        } while (work_ptr);
 810e834:	697b      	ldr	r3, [r7, #20]
 810e836:	2b00      	cmp	r3, #0
 810e838:	d1ee      	bne.n	810e818 <_nx_packet_data_append+0x24>
 810e83a:	e005      	b.n	810e848 <_nx_packet_data_append+0x54>
#endif /* NX_DISABLE_PACKET_CHAIN */
    {

        /* Just calculate the number of bytes available in the first packet.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        available_bytes =  (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_append_ptr);
 810e83c:	68fb      	ldr	r3, [r7, #12]
 810e83e:	695a      	ldr	r2, [r3, #20]
 810e840:	68fb      	ldr	r3, [r7, #12]
 810e842:	68db      	ldr	r3, [r3, #12]
 810e844:	1ad3      	subs	r3, r2, r3
 810e846:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Determine if any new packets are required to satisfy this request. */
    if (available_bytes < data_size)
 810e848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e84a:	687b      	ldr	r3, [r7, #4]
 810e84c:	429a      	cmp	r2, r3
 810e84e:	d247      	bcs.n	810e8e0 <_nx_packet_data_append+0xec>
    {

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Setup a temporary head pointer.  */
        new_list_ptr =  NX_NULL;
 810e850:	2300      	movs	r3, #0
 810e852:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Loop to pickup enough packets to complete the append request.  */
        while (available_bytes < data_size)
 810e854:	e033      	b.n	810e8be <_nx_packet_data_append+0xca>
        {

            /* Allocate a new packet.  */
            status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 810e856:	f107 0114 	add.w	r1, r7, #20
 810e85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e85c:	2200      	movs	r2, #0
 810e85e:	6838      	ldr	r0, [r7, #0]
 810e860:	f7ff fe74 	bl	810e54c <_nx_packet_allocate>
 810e864:	61b8      	str	r0, [r7, #24]

            /* Determine if an error is present.  */
            if (status)
 810e866:	69bb      	ldr	r3, [r7, #24]
 810e868:	2b00      	cmp	r3, #0
 810e86a:	d007      	beq.n	810e87c <_nx_packet_data_append+0x88>
            {

                /* Yes, an error is present.   */

                /* First release any packets that have been allocated so far.  */
                if (new_list_ptr)
 810e86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e86e:	2b00      	cmp	r3, #0
 810e870:	d002      	beq.n	810e878 <_nx_packet_data_append+0x84>
                {
                    _nx_packet_release(new_list_ptr);
 810e872:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e874:	f000 fa00 	bl	810ec78 <_nx_packet_release>
                }

                /* Return the error status to the caller of this service.  */
                return(status);
 810e878:	69bb      	ldr	r3, [r7, #24]
 810e87a:	e078      	b.n	810e96e <_nx_packet_data_append+0x17a>

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, work_ptr);

            /* No error is present.  Link the new packet to the temporary list being built.  */
            if (new_list_ptr)
 810e87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e87e:	2b00      	cmp	r3, #0
 810e880:	d012      	beq.n	810e8a8 <_nx_packet_data_append+0xb4>
            {

                /* Determine if there is already more than one packet on the list.  */
                if (new_list_ptr -> nx_packet_last)
 810e882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e884:	699b      	ldr	r3, [r3, #24]
 810e886:	2b00      	cmp	r3, #0
 810e888:	d007      	beq.n	810e89a <_nx_packet_data_append+0xa6>
                {

                    /* Yes, link up the last packet to the new packet and update the
                       last pointer.  */
                    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized in _nx_packet_allocate. */
                    (new_list_ptr -> nx_packet_last) -> nx_packet_next =  work_ptr;
 810e88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e88c:	699b      	ldr	r3, [r3, #24]
 810e88e:	697a      	ldr	r2, [r7, #20]
 810e890:	605a      	str	r2, [r3, #4]
                    new_list_ptr -> nx_packet_last =  work_ptr;
 810e892:	697a      	ldr	r2, [r7, #20]
 810e894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e896:	619a      	str	r2, [r3, #24]
 810e898:	e008      	b.n	810e8ac <_nx_packet_data_append+0xb8>
                else
                {

                    /* Second packet allocated.  Just setup the last and next in the
                       head pointer.  */
                    new_list_ptr -> nx_packet_last =  work_ptr;
 810e89a:	697a      	ldr	r2, [r7, #20]
 810e89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e89e:	619a      	str	r2, [r3, #24]
                    new_list_ptr -> nx_packet_next =  work_ptr;
 810e8a0:	697a      	ldr	r2, [r7, #20]
 810e8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e8a4:	605a      	str	r2, [r3, #4]
 810e8a6:	e001      	b.n	810e8ac <_nx_packet_data_append+0xb8>
            }
            else
            {

                /* Just setup the temporary list head.  */
                new_list_ptr =  work_ptr;
 810e8a8:	697b      	ldr	r3, [r7, #20]
 810e8aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
               is in the new packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            /*lint -e{613} suppress possible use of null pointer, since "work_ptr" was set in _nx_packet_allocate. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 810e8ac:	697b      	ldr	r3, [r7, #20]
 810e8ae:	695a      	ldr	r2, [r3, #20]
 810e8b0:	697b      	ldr	r3, [r7, #20]
 810e8b2:	68db      	ldr	r3, [r3, #12]
 810e8b4:	1ad3      	subs	r3, r2, r3
 810e8b6:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 810e8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e8ba:	4413      	add	r3, r2
 810e8bc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (available_bytes < data_size)
 810e8be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e8c0:	687b      	ldr	r3, [r7, #4]
 810e8c2:	429a      	cmp	r2, r3
 810e8c4:	d3c7      	bcc.n	810e856 <_nx_packet_data_append+0x62>
        }

        /* At this point, all the necessary packets have been allocated and are present
           on the temporary list.  We need to link this new list to the end of the supplied
           packet.  */
        if (last_packet)
 810e8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e8c8:	2b00      	cmp	r3, #0
 810e8ca:	d003      	beq.n	810e8d4 <_nx_packet_data_append+0xe0>
        {

            /* Already more than one packet.  Add the new packet list to the end.  */
            last_packet -> nx_packet_next =  new_list_ptr;
 810e8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e8ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810e8d0:	605a      	str	r2, [r3, #4]
 810e8d2:	e002      	b.n	810e8da <_nx_packet_data_append+0xe6>
        }
        else
        {

            /* Link the new packet list to the head packet.  */
            packet_ptr -> nx_packet_next =  new_list_ptr;
 810e8d4:	68fb      	ldr	r3, [r7, #12]
 810e8d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810e8d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear the last packet that was used to maintain the new list.  */
        /*lint -e{613} suppress possible use of null pointer, since "new_list_ptr" was set in previous loop. */
        new_list_ptr -> nx_packet_last =  NX_NULL;
 810e8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e8dc:	2200      	movs	r2, #0
 810e8de:	619a      	str	r2, [r3, #24]
        return(NX_SIZE_ERROR);
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Setup the new data length in the packet.  */
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 810e8e0:	68fb      	ldr	r3, [r7, #12]
 810e8e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810e8e4:	687b      	ldr	r3, [r7, #4]
 810e8e6:	441a      	add	r2, r3
 810e8e8:	68fb      	ldr	r3, [r7, #12]
 810e8ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Now copy the supplied data buffer at the end of the packet.  */
    source_ptr =  (UCHAR *)data_start;
 810e8ec:	68bb      	ldr	r3, [r7, #8]
 810e8ee:	61fb      	str	r3, [r7, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
    if (packet_ptr -> nx_packet_last)
 810e8f0:	68fb      	ldr	r3, [r7, #12]
 810e8f2:	699b      	ldr	r3, [r3, #24]
 810e8f4:	2b00      	cmp	r3, #0
 810e8f6:	d003      	beq.n	810e900 <_nx_packet_data_append+0x10c>
    {
        work_ptr =    packet_ptr -> nx_packet_last;
 810e8f8:	68fb      	ldr	r3, [r7, #12]
 810e8fa:	699b      	ldr	r3, [r3, #24]
 810e8fc:	617b      	str	r3, [r7, #20]
 810e8fe:	e032      	b.n	810e966 <_nx_packet_data_append+0x172>
    }
    else
    {
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr =    packet_ptr;
 810e900:	68fb      	ldr	r3, [r7, #12]
 810e902:	617b      	str	r3, [r7, #20]
#ifndef NX_DISABLE_PACKET_CHAIN
    }
    while (data_size)
 810e904:	e02f      	b.n	810e966 <_nx_packet_data_append+0x172>
    {

        /* Determine the amount of memory to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 810e906:	697b      	ldr	r3, [r7, #20]
 810e908:	695a      	ldr	r2, [r3, #20]
 810e90a:	697b      	ldr	r3, [r7, #20]
 810e90c:	68db      	ldr	r3, [r3, #12]
 810e90e:	1ad3      	subs	r3, r2, r3
 810e910:	461a      	mov	r2, r3
 810e912:	687b      	ldr	r3, [r7, #4]
 810e914:	4293      	cmp	r3, r2
 810e916:	d202      	bcs.n	810e91e <_nx_packet_data_append+0x12a>
        {
            copy_size =  data_size;
 810e918:	687b      	ldr	r3, [r7, #4]
 810e91a:	623b      	str	r3, [r7, #32]
 810e91c:	e005      	b.n	810e92a <_nx_packet_data_append+0x136>
        }
        else
        {

            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            copy_size =  (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 810e91e:	697b      	ldr	r3, [r7, #20]
 810e920:	695a      	ldr	r2, [r3, #20]
 810e922:	697b      	ldr	r3, [r7, #20]
 810e924:	68db      	ldr	r3, [r3, #12]
 810e926:	1ad3      	subs	r3, r2, r3
 810e928:	623b      	str	r3, [r7, #32]
#else
        copy_size = data_size;
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Copy the data into the current packet buffer.  */
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size); /* Use case of memcpy is verified.  lgtm[cpp/banned-api-usage-required-any] */
 810e92a:	697b      	ldr	r3, [r7, #20]
 810e92c:	68db      	ldr	r3, [r3, #12]
 810e92e:	6a3a      	ldr	r2, [r7, #32]
 810e930:	69f9      	ldr	r1, [r7, #28]
 810e932:	4618      	mov	r0, r3
 810e934:	f008 fc13 	bl	811715e <memcpy>

        /* Adjust the remaining data size.  */
        data_size =  data_size - copy_size;
 810e938:	687a      	ldr	r2, [r7, #4]
 810e93a:	6a3b      	ldr	r3, [r7, #32]
 810e93c:	1ad3      	subs	r3, r2, r3
 810e93e:	607b      	str	r3, [r7, #4]

        /* Update this packets append pointer.  */
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 810e940:	697b      	ldr	r3, [r7, #20]
 810e942:	68d9      	ldr	r1, [r3, #12]
 810e944:	697b      	ldr	r3, [r7, #20]
 810e946:	6a3a      	ldr	r2, [r7, #32]
 810e948:	440a      	add	r2, r1
 810e94a:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Any more data left to append?  */
        if (data_size)
 810e94c:	687b      	ldr	r3, [r7, #4]
 810e94e:	2b00      	cmp	r3, #0
 810e950:	d009      	beq.n	810e966 <_nx_packet_data_append+0x172>
        {

            /* Yes, there is more to move.  Update the source pointer, move the work pointer
               to the next packet in the chain and update the last packet pointer.  */
            source_ptr =  source_ptr + copy_size;
 810e952:	69fa      	ldr	r2, [r7, #28]
 810e954:	6a3b      	ldr	r3, [r7, #32]
 810e956:	4413      	add	r3, r2
 810e958:	61fb      	str	r3, [r7, #28]
            work_ptr =  work_ptr -> nx_packet_next;
 810e95a:	697b      	ldr	r3, [r7, #20]
 810e95c:	685b      	ldr	r3, [r3, #4]
 810e95e:	617b      	str	r3, [r7, #20]
            packet_ptr -> nx_packet_last =  work_ptr;
 810e960:	697a      	ldr	r2, [r7, #20]
 810e962:	68fb      	ldr	r3, [r7, #12]
 810e964:	619a      	str	r2, [r3, #24]
    while (data_size)
 810e966:	687b      	ldr	r3, [r7, #4]
 810e968:	2b00      	cmp	r3, #0
 810e96a:	d1cc      	bne.n	810e906 <_nx_packet_data_append+0x112>

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Return successful status.  */
    return(NX_SUCCESS);
 810e96c:	2300      	movs	r3, #0
}
 810e96e:	4618      	mov	r0, r3
 810e970:	3730      	adds	r7, #48	@ 0x30
 810e972:	46bd      	mov	sp, r7
 810e974:	bd80      	pop	{r7, pc}

0810e976 <_nx_packet_data_retrieve>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_retrieve(NX_PACKET *packet_ptr, VOID *buffer_start, ULONG *bytes_copied)
{
 810e976:	b580      	push	{r7, lr}
 810e978:	b088      	sub	sp, #32
 810e97a:	af00      	add	r7, sp, #0
 810e97c:	60f8      	str	r0, [r7, #12]
 810e97e:	60b9      	str	r1, [r7, #8]
 810e980:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_RETRIEVE, packet_ptr, buffer_start, bytes_copied, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Setup the destination pointer.  */
    destination_ptr =  buffer_start;
 810e982:	68bb      	ldr	r3, [r7, #8]
 810e984:	61bb      	str	r3, [r7, #24]

    /* Pickup the amount of bytes to copy.  */
    *bytes_copied =  packet_ptr -> nx_packet_length;
 810e986:	68fb      	ldr	r3, [r7, #12]
 810e988:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810e98a:	687b      	ldr	r3, [r7, #4]
 810e98c:	601a      	str	r2, [r3, #0]

    /* Setup the remaining bytes.  */
    remaining_bytes =  packet_ptr -> nx_packet_length;
 810e98e:	68fb      	ldr	r3, [r7, #12]
 810e990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e992:	61fb      	str	r3, [r7, #28]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to copy bytes from packet(s).  */
    while (packet_ptr)
 810e994:	e017      	b.n	810e9c6 <_nx_packet_data_retrieve+0x50>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Calculate the bytes to copy in this packet. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        bytes_to_copy = (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 810e996:	68fb      	ldr	r3, [r7, #12]
 810e998:	68da      	ldr	r2, [r3, #12]
 810e99a:	68fb      	ldr	r3, [r7, #12]
 810e99c:	689b      	ldr	r3, [r3, #8]
 810e99e:	1ad3      	subs	r3, r2, r3
 810e9a0:	617b      	str	r3, [r7, #20]

        /* Copy data to destination. */
        /* Note: The buffer size must be not less than packet_ptr -> nx_packet_length.  */
        memcpy(destination_ptr, packet_ptr -> nx_packet_prepend_ptr, bytes_to_copy); /* Use case of memcpy is verified. The buffer is provided by user.  lgtm[cpp/banned-api-usage-required-any] */
 810e9a2:	68fb      	ldr	r3, [r7, #12]
 810e9a4:	689b      	ldr	r3, [r3, #8]
 810e9a6:	697a      	ldr	r2, [r7, #20]
 810e9a8:	4619      	mov	r1, r3
 810e9aa:	69b8      	ldr	r0, [r7, #24]
 810e9ac:	f008 fbd7 	bl	811715e <memcpy>

        remaining_bytes -= bytes_to_copy;
 810e9b0:	69fa      	ldr	r2, [r7, #28]
 810e9b2:	697b      	ldr	r3, [r7, #20]
 810e9b4:	1ad3      	subs	r3, r2, r3
 810e9b6:	61fb      	str	r3, [r7, #28]
        destination_ptr += bytes_to_copy;
 810e9b8:	69ba      	ldr	r2, [r7, #24]
 810e9ba:	697b      	ldr	r3, [r7, #20]
 810e9bc:	4413      	add	r3, r2
 810e9be:	61bb      	str	r3, [r7, #24]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to next packet.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 810e9c0:	68fb      	ldr	r3, [r7, #12]
 810e9c2:	685b      	ldr	r3, [r3, #4]
 810e9c4:	60fb      	str	r3, [r7, #12]
    while (packet_ptr)
 810e9c6:	68fb      	ldr	r3, [r7, #12]
 810e9c8:	2b00      	cmp	r3, #0
 810e9ca:	d1e4      	bne.n	810e996 <_nx_packet_data_retrieve+0x20>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if the packet chain was valid.  */
    if (remaining_bytes)
 810e9cc:	69fb      	ldr	r3, [r7, #28]
 810e9ce:	2b00      	cmp	r3, #0
 810e9d0:	d007      	beq.n	810e9e2 <_nx_packet_data_retrieve+0x6c>
    {

        /* Invalid packet chain.  Calculate the actual number of bytes
           copied.  */
        *bytes_copied =  *bytes_copied - remaining_bytes;
 810e9d2:	687b      	ldr	r3, [r7, #4]
 810e9d4:	681a      	ldr	r2, [r3, #0]
 810e9d6:	69fb      	ldr	r3, [r7, #28]
 810e9d8:	1ad2      	subs	r2, r2, r3
 810e9da:	687b      	ldr	r3, [r7, #4]
 810e9dc:	601a      	str	r2, [r3, #0]

        /* Return an error.  */
        return(NX_INVALID_PACKET);
 810e9de:	2312      	movs	r3, #18
 810e9e0:	e000      	b.n	810e9e4 <_nx_packet_data_retrieve+0x6e>
    }

    /* Return successful completion.  */
    return(NX_SUCCESS);
 810e9e2:	2300      	movs	r3, #0
}
 810e9e4:	4618      	mov	r0, r3
 810e9e6:	3720      	adds	r7, #32
 810e9e8:	46bd      	mov	sp, r7
 810e9ea:	bd80      	pop	{r7, pc}

0810e9ec <_nx_packet_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_packet_pool_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 810e9ec:	b580      	push	{r7, lr}
 810e9ee:	b088      	sub	sp, #32
 810e9f0:	af00      	add	r7, sp, #0
 810e9f2:	6078      	str	r0, [r7, #4]
 810e9f4:	6039      	str	r1, [r7, #0]
NX_PACKET_POOL *pool_ptr;   /* Working packet pool pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to packet pool control block.  */
    pool_ptr =  (NX_PACKET_POOL *)thread_ptr -> tx_thread_suspend_control_block;
 810e9f6:	687b      	ldr	r3, [r7, #4]
 810e9f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810e9fa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810e9fc:	f3ef 8310 	mrs	r3, PRIMASK
 810ea00:	617b      	str	r3, [r7, #20]
    return(posture);
 810ea02:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 810ea04:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 810ea06:	b672      	cpsid	i
    return(int_posture);
 810ea08:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the packet pool.  */
    TX_DISABLE
 810ea0a:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 810ea0c:	687b      	ldr	r3, [r7, #4]
 810ea0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810ea10:	2b00      	cmp	r3, #0
 810ea12:	d042      	beq.n	810ea9a <_nx_packet_pool_cleanup+0xae>
 810ea14:	69fb      	ldr	r3, [r7, #28]
 810ea16:	2b00      	cmp	r3, #0
 810ea18:	d03f      	beq.n	810ea9a <_nx_packet_pool_cleanup+0xae>
        (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 810ea1a:	69fb      	ldr	r3, [r7, #28]
 810ea1c:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 810ea1e:	4a23      	ldr	r2, [pc, #140]	@ (810eaac <_nx_packet_pool_cleanup+0xc0>)
 810ea20:	4293      	cmp	r3, r2
 810ea22:	d13a      	bne.n	810ea9a <_nx_packet_pool_cleanup+0xae>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 810ea24:	687b      	ldr	r3, [r7, #4]
 810ea26:	2200      	movs	r2, #0
 810ea28:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 810ea2a:	687b      	ldr	r3, [r7, #4]
 810ea2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810ea2e:	687a      	ldr	r2, [r7, #4]
 810ea30:	429a      	cmp	r2, r3
 810ea32:	d103      	bne.n	810ea3c <_nx_packet_pool_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 810ea34:	69fb      	ldr	r3, [r7, #28]
 810ea36:	2200      	movs	r2, #0
 810ea38:	62da      	str	r2, [r3, #44]	@ 0x2c
 810ea3a:	e012      	b.n	810ea62 <_nx_packet_pool_cleanup+0x76>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer if necessary.  */
            if (pool_ptr -> nx_packet_pool_suspension_list == thread_ptr)
 810ea3c:	69fb      	ldr	r3, [r7, #28]
 810ea3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ea40:	687a      	ldr	r2, [r7, #4]
 810ea42:	429a      	cmp	r2, r3
 810ea44:	d103      	bne.n	810ea4e <_nx_packet_pool_cleanup+0x62>
            {
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 810ea46:	687b      	ldr	r3, [r7, #4]
 810ea48:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810ea4a:	69fb      	ldr	r3, [r7, #28]
 810ea4c:	62da      	str	r2, [r3, #44]	@ 0x2c
            }

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 810ea4e:	687b      	ldr	r3, [r7, #4]
 810ea50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous;
 810ea52:	687a      	ldr	r2, [r7, #4]
 810ea54:	6f52      	ldr	r2, [r2, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 810ea56:	675a      	str	r2, [r3, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 810ea58:	687b      	ldr	r3, [r7, #4]
 810ea5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_next;
 810ea5c:	687a      	ldr	r2, [r7, #4]
 810ea5e:	6f12      	ldr	r2, [r2, #112]	@ 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 810ea60:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 810ea62:	69fb      	ldr	r3, [r7, #28]
 810ea64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810ea66:	1e5a      	subs	r2, r3, #1
 810ea68:	69fb      	ldr	r3, [r7, #28]
 810ea6a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 810ea6c:	687b      	ldr	r3, [r7, #4]
 810ea6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810ea70:	2b0c      	cmp	r3, #12
 810ea72:	d112      	bne.n	810ea9a <_nx_packet_pool_cleanup+0xae>

            /* Thread still suspended on the packet pool.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 810ea74:	687b      	ldr	r3, [r7, #4]
 810ea76:	2201      	movs	r2, #1
 810ea78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 810ea7c:	4b0c      	ldr	r3, [pc, #48]	@ (810eab0 <_nx_packet_pool_cleanup+0xc4>)
 810ea7e:	681b      	ldr	r3, [r3, #0]
 810ea80:	3301      	adds	r3, #1
 810ea82:	4a0b      	ldr	r2, [pc, #44]	@ (810eab0 <_nx_packet_pool_cleanup+0xc4>)
 810ea84:	6013      	str	r3, [r2, #0]
 810ea86:	69bb      	ldr	r3, [r7, #24]
 810ea88:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810ea8a:	68fb      	ldr	r3, [r7, #12]
 810ea8c:	f383 8810 	msr	PRIMASK, r3
}
 810ea90:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 810ea92:	6878      	ldr	r0, [r7, #4]
 810ea94:	f006 ffdc 	bl	8115a50 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 810ea98:	e005      	b.n	810eaa6 <_nx_packet_pool_cleanup+0xba>
 810ea9a:	69bb      	ldr	r3, [r7, #24]
 810ea9c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810ea9e:	68bb      	ldr	r3, [r7, #8]
 810eaa0:	f383 8810 	msr	PRIMASK, r3
}
 810eaa4:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 810eaa6:	3720      	adds	r7, #32
 810eaa8:	46bd      	mov	sp, r7
 810eaaa:	bd80      	pop	{r7, pc}
 810eaac:	5041434b 	.word	0x5041434b
 810eab0:	200581c0 	.word	0x200581c0

0810eab4 <_nx_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                             VOID *pool_start, ULONG pool_size)
{
 810eab4:	b580      	push	{r7, lr}
 810eab6:	b092      	sub	sp, #72	@ 0x48
 810eab8:	af00      	add	r7, sp, #0
 810eaba:	60f8      	str	r0, [r7, #12]
 810eabc:	60b9      	str	r1, [r7, #8]
 810eabe:	607a      	str	r2, [r7, #4]
 810eac0:	603b      	str	r3, [r7, #0]
CHAR           *payload_address;       /* Address of the first payload*/
VOID           *rounded_pool_start;    /* Rounded stating address     */


    /* Save the original payload size.  */
    original_payload_size =  payload_size;
 810eac2:	687b      	ldr	r3, [r7, #4]
 810eac4:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 810eac6:	683b      	ldr	r3, [r7, #0]
 810eac8:	3303      	adds	r3, #3
 810eaca:	f023 0303 	bic.w	r3, r3, #3
 810eace:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 810ead0:	683a      	ldr	r2, [r7, #0]
 810ead2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ead4:	1ad2      	subs	r2, r2, r3
 810ead6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810ead8:	4413      	add	r3, r2
 810eada:	f023 0303 	bic.w	r3, r3, #3
 810eade:	653b      	str	r3, [r7, #80]	@ 0x50

    /* Set the pool starting address. */
    pool_start = rounded_pool_start;
 810eae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810eae2:	603b      	str	r3, [r7, #0]

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 810eae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810eae6:	3338      	adds	r3, #56	@ 0x38
 810eae8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 810eaea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810eaec:	3303      	adds	r3, #3
 810eaee:	f023 0303 	bic.w	r3, r3, #3
 810eaf2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 810eaf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810eaf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810eaf8:	1ad3      	subs	r3, r2, r3
 810eafa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    payload_size = (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 810eafc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810eafe:	687b      	ldr	r3, [r7, #4]
 810eb00:	4413      	add	r3, r2
 810eb02:	3303      	adds	r3, #3
 810eb04:	f023 0203 	bic.w	r2, r3, #3
 810eb08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810eb0a:	1ad3      	subs	r3, r2, r3
 810eb0c:	607b      	str	r3, [r7, #4]

    /* Clear pool fields. */
    memset(pool_ptr, 0, sizeof(NX_PACKET_POOL));
 810eb0e:	223c      	movs	r2, #60	@ 0x3c
 810eb10:	2100      	movs	r1, #0
 810eb12:	68f8      	ldr	r0, [r7, #12]
 810eb14:	f008 faa8 	bl	8117068 <memset>

    /* Setup the basic packet pool fields.  */
    pool_ptr -> nx_packet_pool_name =             name_ptr;
 810eb18:	68fb      	ldr	r3, [r7, #12]
 810eb1a:	68ba      	ldr	r2, [r7, #8]
 810eb1c:	605a      	str	r2, [r3, #4]
    pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 810eb1e:	68fb      	ldr	r3, [r7, #12]
 810eb20:	2200      	movs	r2, #0
 810eb22:	62da      	str	r2, [r3, #44]	@ 0x2c
    pool_ptr -> nx_packet_pool_suspended_count =  0;
 810eb24:	68fb      	ldr	r3, [r7, #12]
 810eb26:	2200      	movs	r2, #0
 810eb28:	631a      	str	r2, [r3, #48]	@ 0x30
    pool_ptr -> nx_packet_pool_start =            (CHAR *)pool_start;
 810eb2a:	68fb      	ldr	r3, [r7, #12]
 810eb2c:	683a      	ldr	r2, [r7, #0]
 810eb2e:	621a      	str	r2, [r3, #32]
    pool_ptr -> nx_packet_pool_size =             pool_size;
 810eb30:	68fb      	ldr	r3, [r7, #12]
 810eb32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 810eb34:	625a      	str	r2, [r3, #36]	@ 0x24
    pool_ptr -> nx_packet_pool_payload_size =     original_payload_size;
 810eb36:	68fb      	ldr	r3, [r7, #12]
 810eb38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810eb3a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Calculate the end of the pool's memory area.  */
    end_of_pool =  ((CHAR *)pool_start) + pool_size;
 810eb3c:	683a      	ldr	r2, [r7, #0]
 810eb3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810eb40:	4413      	add	r3, r2
 810eb42:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Walk through the pool area, setting up the available packet list.  */
    packets =            0;
 810eb44:	2300      	movs	r3, #0
 810eb46:	647b      	str	r3, [r7, #68]	@ 0x44
    packet_ptr =         (CHAR *)rounded_pool_start;
 810eb48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810eb4a:	643b      	str	r3, [r7, #64]	@ 0x40
    next_packet_ptr =    packet_ptr + (payload_size + header_size);
 810eb4c:	687a      	ldr	r2, [r7, #4]
 810eb4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810eb50:	4413      	add	r3, r2
 810eb52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810eb54:	4413      	add	r3, r2
 810eb56:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    while (next_packet_ptr <= end_of_pool)
 810eb58:	e023      	b.n	810eba2 <_nx_packet_pool_create+0xee>
    {

        /* Yes, we have another packet.  Increment the packet count.  */
        packets++;
 810eb5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810eb5c:	3301      	adds	r3, #1
 810eb5e:	647b      	str	r3, [r7, #68]	@ 0x44

        /* Setup the link to the next packet.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  (NX_PACKET *)next_packet_ptr;
 810eb60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810eb62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810eb64:	61da      	str	r2, [r3, #28]

        /* Remember that this packet pool is the owner.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_pool_owner =  pool_ptr;
 810eb66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810eb68:	68fa      	ldr	r2, [r7, #12]
 810eb6a:	601a      	str	r2, [r3, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Clear the next packet pointer.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
 810eb6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810eb6e:	2200      	movs	r2, #0
 810eb70:	605a      	str	r2, [r3, #4]
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Mark the packet as free.  */
        /*lint -e{929} -e{923} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 810eb72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810eb74:	f04f 32ff 	mov.w	r2, #4294967295
 810eb78:	621a      	str	r2, [r3, #32]

        /* Setup the packet data pointers.  */
        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_start =  (UCHAR *)(packet_ptr + header_size);
 810eb7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810eb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810eb7e:	441a      	add	r2, r3
 810eb80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810eb82:	611a      	str	r2, [r3, #16]

        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 810eb84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810eb86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810eb88:	4413      	add	r3, r2
 810eb8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810eb8c:	441a      	add	r2, r3
 810eb8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810eb90:	615a      	str	r2, [r3, #20]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, (NX_PACKET *)packet_ptr);

        /* Advance to the next packet.  */
        packet_ptr =   next_packet_ptr;
 810eb92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810eb94:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Update the next packet pointer.  */
        next_packet_ptr =  packet_ptr + (payload_size + header_size);
 810eb96:	687a      	ldr	r2, [r7, #4]
 810eb98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810eb9a:	4413      	add	r3, r2
 810eb9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810eb9e:	4413      	add	r3, r2
 810eba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (next_packet_ptr <= end_of_pool)
 810eba2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810eba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810eba6:	429a      	cmp	r2, r3
 810eba8:	d9d7      	bls.n	810eb5a <_nx_packet_pool_create+0xa6>
    }

    /* Backup to the last packet in the pool.  */
    packet_ptr =  packet_ptr - (payload_size + header_size);
 810ebaa:	687a      	ldr	r2, [r7, #4]
 810ebac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ebae:	4413      	add	r3, r2
 810ebb0:	425b      	negs	r3, r3
 810ebb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810ebb4:	4413      	add	r3, r2
 810ebb6:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Set the last packet's forward pointer to NULL.  */
    /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  NX_NULL;
 810ebb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810ebba:	2200      	movs	r2, #0
 810ebbc:	61da      	str	r2, [r3, #28]

    /* Save the remaining information in the pool control packet.  */
    pool_ptr -> nx_packet_pool_available =  packets;
 810ebbe:	68fb      	ldr	r3, [r7, #12]
 810ebc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810ebc2:	609a      	str	r2, [r3, #8]
    pool_ptr -> nx_packet_pool_total =      packets;
 810ebc4:	68fb      	ldr	r3, [r7, #12]
 810ebc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810ebc8:	60da      	str	r2, [r3, #12]

    /* Set the packet pool available list.  */
    pool_ptr -> nx_packet_pool_available_list =  (NX_PACKET *)pool_start;
 810ebca:	68fb      	ldr	r3, [r7, #12]
 810ebcc:	683a      	ldr	r2, [r7, #0]
 810ebce:	61da      	str	r2, [r3, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810ebd0:	f3ef 8310 	mrs	r3, PRIMASK
 810ebd4:	61fb      	str	r3, [r7, #28]
    return(posture);
 810ebd6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 810ebd8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 810ebda:	b672      	cpsid	i
    return(int_posture);
 810ebdc:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_POOL_CREATE, pool_ptr, payload_size, pool_start, pool_size, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts to place the packet pool on the created list.  */
    TX_DISABLE
 810ebde:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the packet pool ID to make it valid.  */
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;
 810ebe0:	68fb      	ldr	r3, [r7, #12]
 810ebe2:	4a19      	ldr	r2, [pc, #100]	@ (810ec48 <_nx_packet_pool_create+0x194>)
 810ebe4:	601a      	str	r2, [r3, #0]

    /* Place the packet pool on the list of created packet pools.  First,
       check for an empty list.  */
    if (_nx_packet_pool_created_ptr)
 810ebe6:	4b19      	ldr	r3, [pc, #100]	@ (810ec4c <_nx_packet_pool_create+0x198>)
 810ebe8:	681b      	ldr	r3, [r3, #0]
 810ebea:	2b00      	cmp	r3, #0
 810ebec:	d012      	beq.n	810ec14 <_nx_packet_pool_create+0x160>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous;
 810ebee:	4b17      	ldr	r3, [pc, #92]	@ (810ec4c <_nx_packet_pool_create+0x198>)
 810ebf0:	681b      	ldr	r3, [r3, #0]
 810ebf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810ebf4:	623b      	str	r3, [r7, #32]

        /* Place the new packet pool in the list.  */
        _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 810ebf6:	4b15      	ldr	r3, [pc, #84]	@ (810ec4c <_nx_packet_pool_create+0x198>)
 810ebf8:	681b      	ldr	r3, [r3, #0]
 810ebfa:	68fa      	ldr	r2, [r7, #12]
 810ebfc:	639a      	str	r2, [r3, #56]	@ 0x38
        tail_ptr -> nx_packet_pool_created_next =  pool_ptr;
 810ebfe:	6a3b      	ldr	r3, [r7, #32]
 810ec00:	68fa      	ldr	r2, [r7, #12]
 810ec02:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Setup this packet pool's created links.  */
        pool_ptr -> nx_packet_pool_created_previous =  tail_ptr;
 810ec04:	68fb      	ldr	r3, [r7, #12]
 810ec06:	6a3a      	ldr	r2, [r7, #32]
 810ec08:	639a      	str	r2, [r3, #56]	@ 0x38
        pool_ptr -> nx_packet_pool_created_next =      _nx_packet_pool_created_ptr;
 810ec0a:	4b10      	ldr	r3, [pc, #64]	@ (810ec4c <_nx_packet_pool_create+0x198>)
 810ec0c:	681a      	ldr	r2, [r3, #0]
 810ec0e:	68fb      	ldr	r3, [r7, #12]
 810ec10:	635a      	str	r2, [r3, #52]	@ 0x34
 810ec12:	e008      	b.n	810ec26 <_nx_packet_pool_create+0x172>
    }
    else
    {

        /* The created packet pool list is empty.  Add packet pool to empty list.  */
        _nx_packet_pool_created_ptr =                  pool_ptr;
 810ec14:	4a0d      	ldr	r2, [pc, #52]	@ (810ec4c <_nx_packet_pool_create+0x198>)
 810ec16:	68fb      	ldr	r3, [r7, #12]
 810ec18:	6013      	str	r3, [r2, #0]
        pool_ptr -> nx_packet_pool_created_next =      pool_ptr;
 810ec1a:	68fb      	ldr	r3, [r7, #12]
 810ec1c:	68fa      	ldr	r2, [r7, #12]
 810ec1e:	635a      	str	r2, [r3, #52]	@ 0x34
        pool_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 810ec20:	68fb      	ldr	r3, [r7, #12]
 810ec22:	68fa      	ldr	r2, [r7, #12]
 810ec24:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Increment the number of packet pools created.  */
    _nx_packet_pool_created_count++;
 810ec26:	4b0a      	ldr	r3, [pc, #40]	@ (810ec50 <_nx_packet_pool_create+0x19c>)
 810ec28:	681b      	ldr	r3, [r3, #0]
 810ec2a:	3301      	adds	r3, #1
 810ec2c:	4a08      	ldr	r2, [pc, #32]	@ (810ec50 <_nx_packet_pool_create+0x19c>)
 810ec2e:	6013      	str	r3, [r2, #0]
 810ec30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ec32:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810ec34:	697b      	ldr	r3, [r7, #20]
 810ec36:	f383 8810 	msr	PRIMASK, r3
}
 810ec3a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 810ec3c:	2300      	movs	r3, #0
}
 810ec3e:	4618      	mov	r0, r3
 810ec40:	3748      	adds	r7, #72	@ 0x48
 810ec42:	46bd      	mov	sp, r7
 810ec44:	bd80      	pop	{r7, pc}
 810ec46:	bf00      	nop
 810ec48:	5041434b 	.word	0x5041434b
 810ec4c:	200580c4 	.word	0x200580c4
 810ec50:	200580c8 	.word	0x200580c8

0810ec54 <_nx_packet_pool_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _nx_packet_pool_initialize(VOID)
{
 810ec54:	b480      	push	{r7}
 810ec56:	af00      	add	r7, sp, #0

    /* Initialize the head pointer of the created packet pools list and the
       number of packet pools created.  */
    _nx_packet_pool_created_ptr =        NX_NULL;
 810ec58:	4b05      	ldr	r3, [pc, #20]	@ (810ec70 <_nx_packet_pool_initialize+0x1c>)
 810ec5a:	2200      	movs	r2, #0
 810ec5c:	601a      	str	r2, [r3, #0]
    _nx_packet_pool_created_count =      0;
 810ec5e:	4b05      	ldr	r3, [pc, #20]	@ (810ec74 <_nx_packet_pool_initialize+0x20>)
 810ec60:	2200      	movs	r2, #0
 810ec62:	601a      	str	r2, [r3, #0]
}
 810ec64:	bf00      	nop
 810ec66:	46bd      	mov	sp, r7
 810ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ec6c:	4770      	bx	lr
 810ec6e:	bf00      	nop
 810ec70:	200580c4 	.word	0x200580c4
 810ec74:	200580c8 	.word	0x200580c8

0810ec78 <_nx_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_release(NX_PACKET *packet_ptr)
{
 810ec78:	b580      	push	{r7, lr}
 810ec7a:	b08a      	sub	sp, #40	@ 0x28
 810ec7c:	af00      	add	r7, sp, #0
 810ec7e:	6078      	str	r0, [r7, #4]
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to free all packets chained together, not assuming they are
       from the same pool.  */
    while (packet_ptr)
 810ec80:	e0a2      	b.n	810edc8 <_nx_packet_release+0x150>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check to see if the packet is releasable.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED))
 810ec82:	687b      	ldr	r3, [r7, #4]
 810ec84:	6a1b      	ldr	r3, [r3, #32]
 810ec86:	f1b3 3faa 	cmp.w	r3, #2863311530	@ 0xaaaaaaaa
 810ec8a:	d011      	beq.n	810ecb0 <_nx_packet_release+0x38>
        {

#ifndef NX_DISABLE_PACKET_INFO
            /* Pickup the pool pointer.  */
            pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 810ec8c:	687b      	ldr	r3, [r7, #4]
 810ec8e:	681b      	ldr	r3, [r3, #0]
 810ec90:	61fb      	str	r3, [r7, #28]

            /* Check for a good pool pointer...  error must be the packet!  */
            if ((pool_ptr) && (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 810ec92:	69fb      	ldr	r3, [r7, #28]
 810ec94:	2b00      	cmp	r3, #0
 810ec96:	d009      	beq.n	810ecac <_nx_packet_release+0x34>
 810ec98:	69fb      	ldr	r3, [r7, #28]
 810ec9a:	681b      	ldr	r3, [r3, #0]
 810ec9c:	4a4f      	ldr	r2, [pc, #316]	@ (810eddc <_nx_packet_release+0x164>)
 810ec9e:	4293      	cmp	r3, r2
 810eca0:	d104      	bne.n	810ecac <_nx_packet_release+0x34>
            {

                /* Increment the packet pool invalid release error count.  */
                pool_ptr -> nx_packet_pool_invalid_releases++;
 810eca2:	69fb      	ldr	r3, [r7, #28]
 810eca4:	699b      	ldr	r3, [r3, #24]
 810eca6:	1c5a      	adds	r2, r3, #1
 810eca8:	69fb      	ldr	r3, [r7, #28]
 810ecaa:	619a      	str	r2, [r3, #24]
            }
#endif

            /* Return an error indicating the packet could not be released.  */
            return(NX_PTR_ERROR);
 810ecac:	2307      	movs	r3, #7
 810ecae:	e090      	b.n	810edd2 <_nx_packet_release+0x15a>
        }
        /* End of packet check.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Pickup the next packet. */
        next_packet =  packet_ptr -> nx_packet_next;
 810ecb0:	687b      	ldr	r3, [r7, #4]
 810ecb2:	685b      	ldr	r3, [r3, #4]
 810ecb4:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810ecb6:	f3ef 8310 	mrs	r3, PRIMASK
 810ecba:	617b      	str	r3, [r7, #20]
    return(posture);
 810ecbc:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 810ecbe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 810ecc0:	b672      	cpsid	i
    return(int_posture);
 810ecc2:	693b      	ldr	r3, [r7, #16]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Disable interrupts to put this packet back in the packet pool.  */
        TX_DISABLE
 810ecc4:	623b      	str	r3, [r7, #32]

        /* Pickup the pool pointer.  */
        pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 810ecc6:	687b      	ldr	r3, [r7, #4]
 810ecc8:	681b      	ldr	r3, [r3, #0]
 810ecca:	61fb      	str	r3, [r7, #28]

        /* Determine if there are any threads suspended on the block pool.  */
        thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 810eccc:	69fb      	ldr	r3, [r7, #28]
 810ecce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ecd0:	61bb      	str	r3, [r7, #24]
        if (thread_ptr)
 810ecd2:	69bb      	ldr	r3, [r7, #24]
 810ecd4:	2b00      	cmp	r3, #0
 810ecd6:	d05f      	beq.n	810ed98 <_nx_packet_release+0x120>
        {

            /* Remove the suspended thread from the list.  */

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 810ecd8:	69bb      	ldr	r3, [r7, #24]
 810ecda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810ecdc:	69ba      	ldr	r2, [r7, #24]
 810ecde:	429a      	cmp	r2, r3
 810ece0:	d103      	bne.n	810ecea <_nx_packet_release+0x72>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  NX_NULL;
 810ece2:	69fb      	ldr	r3, [r7, #28]
 810ece4:	2200      	movs	r2, #0
 810ece6:	62da      	str	r2, [r3, #44]	@ 0x2c
 810ece8:	e00d      	b.n	810ed06 <_nx_packet_release+0x8e>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 810ecea:	69bb      	ldr	r3, [r7, #24]
 810ecec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810ecee:	69fb      	ldr	r3, [r7, #28]
 810ecf0:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 810ecf2:	69bb      	ldr	r3, [r7, #24]
 810ecf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 810ecf6:	69ba      	ldr	r2, [r7, #24]
 810ecf8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 810ecfa:	675a      	str	r2, [r3, #116]	@ 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 810ecfc:	69bb      	ldr	r3, [r7, #24]
 810ecfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
                    thread_ptr -> tx_thread_suspended_next;
 810ed00:	69ba      	ldr	r2, [r7, #24]
 810ed02:	6f12      	ldr	r2, [r2, #112]	@ 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 810ed04:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            /* Decrement the suspension count.  */
            pool_ptr -> nx_packet_pool_suspended_count--;
 810ed06:	69fb      	ldr	r3, [r7, #28]
 810ed08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810ed0a:	1e5a      	subs	r2, r3, #1
 810ed0c:	69fb      	ldr	r3, [r7, #28]
 810ed0e:	631a      	str	r2, [r3, #48]	@ 0x30

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 810ed10:	69bb      	ldr	r3, [r7, #24]
 810ed12:	2200      	movs	r2, #0
 810ed14:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 810ed16:	4b32      	ldr	r3, [pc, #200]	@ (810ede0 <_nx_packet_release+0x168>)
 810ed18:	681b      	ldr	r3, [r3, #0]
 810ed1a:	3301      	adds	r3, #1
 810ed1c:	4a30      	ldr	r2, [pc, #192]	@ (810ede0 <_nx_packet_release+0x168>)
 810ed1e:	6013      	str	r3, [r2, #0]
 810ed20:	6a3b      	ldr	r3, [r7, #32]
 810ed22:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810ed24:	68fb      	ldr	r3, [r7, #12]
 810ed26:	f383 8810 	msr	PRIMASK, r3
}
 810ed2a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to look just like a new packet.  */
            packet_ptr -> nx_packet_queue_next  =  NX_NULL;
 810ed2c:	687b      	ldr	r3, [r7, #4]
 810ed2e:	2200      	movs	r2, #0
 810ed30:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
            packet_ptr -> nx_packet_next        =  NX_NULL;
 810ed32:	687b      	ldr	r3, [r7, #4]
 810ed34:	2200      	movs	r2, #0
 810ed36:	605a      	str	r2, [r3, #4]
            packet_ptr -> nx_packet_last        =  NX_NULL;
 810ed38:	687b      	ldr	r3, [r7, #4]
 810ed3a:	2200      	movs	r2, #0
 810ed3c:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
            packet_ptr -> nx_packet_length      =  0;
 810ed3e:	687b      	ldr	r3, [r7, #4]
 810ed40:	2200      	movs	r2, #0
 810ed42:	625a      	str	r2, [r3, #36]	@ 0x24
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 810ed44:	687b      	ldr	r3, [r7, #4]
 810ed46:	691a      	ldr	r2, [r3, #16]
 810ed48:	69bb      	ldr	r3, [r7, #24]
 810ed4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810ed4c:	441a      	add	r2, r3
 810ed4e:	687b      	ldr	r3, [r7, #4]
 810ed50:	609a      	str	r2, [r3, #8]
            packet_ptr -> nx_packet_append_ptr  =  packet_ptr -> nx_packet_prepend_ptr;
 810ed52:	687b      	ldr	r3, [r7, #4]
 810ed54:	689a      	ldr	r2, [r3, #8]
 810ed56:	687b      	ldr	r3, [r7, #4]
 810ed58:	60da      	str	r2, [r3, #12]
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 810ed5a:	687b      	ldr	r3, [r7, #4]
 810ed5c:	2200      	movs	r2, #0
 810ed5e:	631a      	str	r2, [r3, #48]	@ 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            packet_ptr -> nx_packet_interface_capability_flag = 0;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
            /* Set the TCP queue to the value that indicates it has been allocated.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 810ed60:	687b      	ldr	r3, [r7, #4]
 810ed62:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 810ed66:	621a      	str	r2, [r3, #32]
            /* Clear the ipsec state. */
            packet_ptr -> nx_packet_ipsec_state = 0;
#endif /* NX_IPSEC_ENABLE */

            /* Clear the IP version.  */
            packet_ptr -> nx_packet_ip_version  =  0;
 810ed68:	687b      	ldr	r3, [r7, #4]
 810ed6a:	2200      	movs	r2, #0
 810ed6c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

            /* Clear the IP identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_FALSE;
 810ed70:	687b      	ldr	r3, [r7, #4]
 810ed72:	2200      	movs	r2, #0
 810ed74:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

            /* Initialize the IP header length. */
            packet_ptr -> nx_packet_ip_header_length = 0;
 810ed78:	687b      	ldr	r3, [r7, #4]
 810ed7a:	2200      	movs	r2, #0
 810ed7c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 810ed80:	69bb      	ldr	r3, [r7, #24]
 810ed82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810ed84:	687a      	ldr	r2, [r7, #4]
 810ed86:	601a      	str	r2, [r3, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 810ed88:	69bb      	ldr	r3, [r7, #24]
 810ed8a:	2200      	movs	r2, #0
 810ed8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 810ed90:	69b8      	ldr	r0, [r7, #24]
 810ed92:	f006 fe5d 	bl	8115a50 <_tx_thread_system_resume>
 810ed96:	e015      	b.n	810edc4 <_nx_packet_release+0x14c>

            /* No thread is suspended for a memory block.  */

            /* Mark the packet as free.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 810ed98:	687b      	ldr	r3, [r7, #4]
 810ed9a:	f04f 32ff 	mov.w	r2, #4294967295
 810ed9e:	621a      	str	r2, [r3, #32]

            /* Put the packet back in the available list.  */
            packet_ptr -> nx_packet_queue_next =  pool_ptr -> nx_packet_pool_available_list;
 810eda0:	69fb      	ldr	r3, [r7, #28]
 810eda2:	69da      	ldr	r2, [r3, #28]
 810eda4:	687b      	ldr	r3, [r7, #4]
 810eda6:	61da      	str	r2, [r3, #28]

            /* Adjust the head pointer.  */
            pool_ptr -> nx_packet_pool_available_list =  packet_ptr;
 810eda8:	69fb      	ldr	r3, [r7, #28]
 810edaa:	687a      	ldr	r2, [r7, #4]
 810edac:	61da      	str	r2, [r3, #28]

            /* Increment the count of available blocks.  */
            pool_ptr -> nx_packet_pool_available++;
 810edae:	69fb      	ldr	r3, [r7, #28]
 810edb0:	689b      	ldr	r3, [r3, #8]
 810edb2:	1c5a      	adds	r2, r3, #1
 810edb4:	69fb      	ldr	r3, [r7, #28]
 810edb6:	609a      	str	r2, [r3, #8]
 810edb8:	6a3b      	ldr	r3, [r7, #32]
 810edba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810edbc:	68bb      	ldr	r3, [r7, #8]
 810edbe:	f383 8810 	msr	PRIMASK, r3
}
 810edc2:	bf00      	nop
            TX_RESTORE
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the list.  */
        packet_ptr =  next_packet;
 810edc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810edc6:	607b      	str	r3, [r7, #4]
    while (packet_ptr)
 810edc8:	687b      	ldr	r3, [r7, #4]
 810edca:	2b00      	cmp	r3, #0
 810edcc:	f47f af59 	bne.w	810ec82 <_nx_packet_release+0xa>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Return completion status.  */
    return(NX_SUCCESS);
 810edd0:	2300      	movs	r3, #0
}
 810edd2:	4618      	mov	r0, r3
 810edd4:	3728      	adds	r7, #40	@ 0x28
 810edd6:	46bd      	mov	sp, r7
 810edd8:	bd80      	pop	{r7, pc}
 810edda:	bf00      	nop
 810eddc:	5041434b 	.word	0x5041434b
 810ede0:	200581c0 	.word	0x200581c0

0810ede4 <_nx_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_transmit_release(NX_PACKET *packet_ptr)
{
 810ede4:	b580      	push	{r7, lr}
 810ede6:	b088      	sub	sp, #32
 810ede8:	af00      	add	r7, sp, #0
 810edea:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810edec:	f3ef 8310 	mrs	r3, PRIMASK
 810edf0:	617b      	str	r3, [r7, #20]
    return(posture);
 810edf2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 810edf4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 810edf6:	b672      	cpsid	i
    return(int_posture);
 810edf8:	693b      	ldr	r3, [r7, #16]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_TRANSMIT_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts temporarily.  */
    TX_DISABLE
 810edfa:	61bb      	str	r3, [r7, #24]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the packet is a queued TCP data packet.  Such packets cannot be released
       immediately, since they may need to be resent.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 810edfc:	687b      	ldr	r3, [r7, #4]
 810edfe:	6a1b      	ldr	r3, [r3, #32]
 810ee00:	f1b3 3faa 	cmp.w	r3, #2863311530	@ 0xaaaaaaaa
 810ee04:	d025      	beq.n	810ee52 <_nx_packet_transmit_release+0x6e>
        (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_FREE)))
 810ee06:	687b      	ldr	r3, [r7, #4]
 810ee08:	6a1b      	ldr	r3, [r3, #32]
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 810ee0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ee0e:	d020      	beq.n	810ee52 <_nx_packet_transmit_release+0x6e>
    {

        /* Yes, this is indeed a TCP packet.  Just mark this with the NX_DRIVER_TX_DONE
           value to let the TCP layer know it is no longer queued up.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;
 810ee10:	687b      	ldr	r3, [r7, #4]
 810ee12:	f04f 32dd 	mov.w	r2, #3722304989	@ 0xdddddddd
 810ee16:	61da      	str	r2, [r3, #28]

        /* Remove the IP header and adjust the length.  */
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 810ee18:	687b      	ldr	r3, [r7, #4]
 810ee1a:	689b      	ldr	r3, [r3, #8]
 810ee1c:	687a      	ldr	r2, [r7, #4]
 810ee1e:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 810ee22:	441a      	add	r2, r3
 810ee24:	687b      	ldr	r3, [r7, #4]
 810ee26:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 810ee28:	687b      	ldr	r3, [r7, #4]
 810ee2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ee2c:	687a      	ldr	r2, [r7, #4]
 810ee2e:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 810ee32:	1a9a      	subs	r2, r3, r2
 810ee34:	687b      	ldr	r3, [r7, #4]
 810ee36:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Reset the IP header length. */
        packet_ptr -> nx_packet_ip_header_length = 0;
 810ee38:	687b      	ldr	r3, [r7, #4]
 810ee3a:	2200      	movs	r2, #0
 810ee3c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 810ee40:	69bb      	ldr	r3, [r7, #24]
 810ee42:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810ee44:	68fb      	ldr	r3, [r7, #12]
 810ee46:	f383 8810 	msr	PRIMASK, r3
}
 810ee4a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  NX_SUCCESS;
 810ee4c:	2300      	movs	r3, #0
 810ee4e:	61fb      	str	r3, [r7, #28]
 810ee50:	e009      	b.n	810ee66 <_nx_packet_transmit_release+0x82>
 810ee52:	69bb      	ldr	r3, [r7, #24]
 810ee54:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810ee56:	68bb      	ldr	r3, [r7, #8]
 810ee58:	f383 8810 	msr	PRIMASK, r3
}
 810ee5c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual packet release function.  */
        status =  _nx_packet_release(packet_ptr);
 810ee5e:	6878      	ldr	r0, [r7, #4]
 810ee60:	f7ff ff0a 	bl	810ec78 <_nx_packet_release>
 810ee64:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 810ee66:	69fb      	ldr	r3, [r7, #28]
}
 810ee68:	4618      	mov	r0, r3
 810ee6a:	3720      	adds	r7, #32
 810ee6c:	46bd      	mov	sp, r7
 810ee6e:	bd80      	pop	{r7, pc}

0810ee70 <_nx_rarp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_rarp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 810ee70:	b580      	push	{r7, lr}
 810ee72:	b088      	sub	sp, #32
 810ee74:	af00      	add	r7, sp, #0
 810ee76:	6078      	str	r0, [r7, #4]
 810ee78:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810ee7a:	f3ef 8310 	mrs	r3, PRIMASK
 810ee7e:	61bb      	str	r3, [r7, #24]
    return(posture);
 810ee80:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 810ee82:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 810ee84:	b672      	cpsid	i
    return(int_posture);
 810ee86:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 810ee88:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if RARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_rarp_queue_process)
 810ee8a:	687b      	ldr	r3, [r7, #4]
 810ee8c:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 810ee90:	2b00      	cmp	r3, #0
 810ee92:	d110      	bne.n	810eeb6 <_nx_rarp_packet_deferred_receive+0x46>

        /* RARP is not enabled.  */

#ifndef NX_DISABLE_RARP_INFO
        /* Increment the RARP invalid messages count...  */
        ip_ptr -> nx_ip_rarp_invalid_messages++;
 810ee94:	687b      	ldr	r3, [r7, #4]
 810ee96:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 810ee9a:	1c5a      	adds	r2, r3, #1
 810ee9c:	687b      	ldr	r3, [r7, #4]
 810ee9e:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
 810eea2:	69fb      	ldr	r3, [r7, #28]
 810eea4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810eea6:	693b      	ldr	r3, [r7, #16]
 810eea8:	f383 8810 	msr	PRIMASK, r3
}
 810eeac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since RARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 810eeae:	6838      	ldr	r0, [r7, #0]
 810eeb0:	f7ff fee2 	bl	810ec78 <_nx_packet_release>

        /* Return to caller.  */
        return;
 810eeb4:	e02f      	b.n	810ef16 <_nx_rarp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the RARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_rarp_deferred_received_packet_head)
 810eeb6:	687b      	ldr	r3, [r7, #4]
 810eeb8:	f8d3 370c 	ldr.w	r3, [r3, #1804]	@ 0x70c
 810eebc:	2b00      	cmp	r3, #0
 810eebe:	d011      	beq.n	810eee4 <_nx_rarp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the RARP deferred queue.  */
        (ip_ptr -> nx_ip_rarp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 810eec0:	687b      	ldr	r3, [r7, #4]
 810eec2:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 810eec6:	683a      	ldr	r2, [r7, #0]
 810eec8:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 810eeca:	683b      	ldr	r3, [r7, #0]
 810eecc:	2200      	movs	r2, #0
 810eece:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 810eed0:	687b      	ldr	r3, [r7, #4]
 810eed2:	683a      	ldr	r2, [r7, #0]
 810eed4:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
 810eed8:	69fb      	ldr	r3, [r7, #28]
 810eeda:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810eedc:	68fb      	ldr	r3, [r7, #12]
 810eede:	f383 8810 	msr	PRIMASK, r3
}
 810eee2:	e018      	b.n	810ef16 <_nx_rarp_packet_deferred_receive+0xa6>
    {

        /* Empty RARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the RARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_rarp_deferred_received_packet_head =  packet_ptr;
 810eee4:	687b      	ldr	r3, [r7, #4]
 810eee6:	683a      	ldr	r2, [r7, #0]
 810eee8:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 810eeec:	687b      	ldr	r3, [r7, #4]
 810eeee:	683a      	ldr	r2, [r7, #0]
 810eef0:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
        packet_ptr -> nx_packet_queue_next =                  NX_NULL;
 810eef4:	683b      	ldr	r3, [r7, #0]
 810eef6:	2200      	movs	r2, #0
 810eef8:	61da      	str	r2, [r3, #28]
 810eefa:	69fb      	ldr	r3, [r7, #28]
 810eefc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810eefe:	68bb      	ldr	r3, [r7, #8]
 810ef00:	f383 8810 	msr	PRIMASK, r3
}
 810ef04:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the RARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
 810ef06:	687b      	ldr	r3, [r7, #4]
 810ef08:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 810ef0c:	2200      	movs	r2, #0
 810ef0e:	2120      	movs	r1, #32
 810ef10:	4618      	mov	r0, r3
 810ef12:	f005 fa9b 	bl	811444c <_tx_event_flags_set>
    }
}
 810ef16:	3720      	adds	r7, #32
 810ef18:	46bd      	mov	sp, r7
 810ef1a:	bd80      	pop	{r7, pc}

0810ef1c <_nx_system_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_system_initialize(VOID)
{
 810ef1c:	b580      	push	{r7, lr}
 810ef1e:	af00      	add	r7, sp, #0

    /* Check whether or not system has been initialized? */
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 810ef20:	4b38      	ldr	r3, [pc, #224]	@ (810f004 <_nx_system_initialize+0xe8>)
 810ef22:	681a      	ldr	r2, [r3, #0]
 810ef24:	4b38      	ldr	r3, [pc, #224]	@ (810f008 <_nx_system_initialize+0xec>)
 810ef26:	681b      	ldr	r3, [r3, #0]
 810ef28:	431a      	orrs	r2, r3
 810ef2a:	4b38      	ldr	r3, [pc, #224]	@ (810f00c <_nx_system_initialize+0xf0>)
 810ef2c:	681b      	ldr	r3, [r3, #0]
 810ef2e:	431a      	orrs	r2, r3
        _nx_system_build_options_3 | _nx_system_build_options_4 | _nx_system_build_options_5)
 810ef30:	4b37      	ldr	r3, [pc, #220]	@ (810f010 <_nx_system_initialize+0xf4>)
 810ef32:	681b      	ldr	r3, [r3, #0]
 810ef34:	431a      	orrs	r2, r3
 810ef36:	4b37      	ldr	r3, [pc, #220]	@ (810f014 <_nx_system_initialize+0xf8>)
 810ef38:	681b      	ldr	r3, [r3, #0]
 810ef3a:	4313      	orrs	r3, r2
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 810ef3c:	2b00      	cmp	r3, #0
 810ef3e:	d15e      	bne.n	810effe <_nx_system_initialize+0xe2>

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Call the packet pool initialization component for NetX.  */
    _nx_packet_pool_initialize();
 810ef40:	f7ff fe88 	bl	810ec54 <_nx_packet_pool_initialize>

    /* Call the IP component initialization.  */
    _nx_ip_initialize();
 810ef44:	f7fe fb5a 	bl	810d5fc <_nx_ip_initialize>

    /* Call the TCP component initialization.  */
    /*lint -e{522} suppress lack of side-effects.  */
    _nx_tcp_initialize();
 810ef48:	f000 fc12 	bl	810f770 <_nx_tcp_initialize>

    /* Setup the build options variables.  */
    _nx_system_build_options_1 = 0
 810ef4c:	4b2d      	ldr	r3, [pc, #180]	@ (810f004 <_nx_system_initialize+0xe8>)
 810ef4e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810ef52:	601a      	str	r2, [r3, #0]

    /* Add the retry shift value to the options.  */
#if (NX_TCP_RETRY_SHIFT > 0xF)
    _nx_system_build_options_1 |=  0xF;
#else
    _nx_system_build_options_1 |=  NX_TCP_RETRY_SHIFT;
 810ef54:	4b2b      	ldr	r3, [pc, #172]	@ (810f004 <_nx_system_initialize+0xe8>)
 810ef56:	681b      	ldr	r3, [r3, #0]
 810ef58:	4a2a      	ldr	r2, [pc, #168]	@ (810f004 <_nx_system_initialize+0xe8>)
 810ef5a:	6013      	str	r3, [r2, #0]
#endif

#if (NX_IP_PERIODIC_RATE > 0xFFFFUL)
    _nx_system_build_options_2 =  ((ULONG)0xFFFF0000);
#else
    _nx_system_build_options_2 =  ((ULONG)NX_IP_PERIODIC_RATE) << 16;
 810ef5c:	4b2a      	ldr	r3, [pc, #168]	@ (810f008 <_nx_system_initialize+0xec>)
 810ef5e:	f44f 02c8 	mov.w	r2, #6553600	@ 0x640000
 810ef62:	601a      	str	r2, [r3, #0]
#endif

#if (NX_ARP_EXPIRATION_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_EXPIRATION_RATE) << 8;
 810ef64:	4b28      	ldr	r3, [pc, #160]	@ (810f008 <_nx_system_initialize+0xec>)
 810ef66:	681b      	ldr	r3, [r3, #0]
 810ef68:	4a27      	ldr	r2, [pc, #156]	@ (810f008 <_nx_system_initialize+0xec>)
 810ef6a:	6013      	str	r3, [r2, #0]
#endif
#if (NX_ARP_UPDATE_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_UPDATE_RATE);
 810ef6c:	4b26      	ldr	r3, [pc, #152]	@ (810f008 <_nx_system_initialize+0xec>)
 810ef6e:	681b      	ldr	r3, [r3, #0]
 810ef70:	f043 030a 	orr.w	r3, r3, #10
 810ef74:	4a24      	ldr	r2, [pc, #144]	@ (810f008 <_nx_system_initialize+0xec>)
 810ef76:	6013      	str	r3, [r2, #0]

    /* Setup third option word.  */
#if (NX_TCP_ACK_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 =  ((ULONG)0xFF000000);
#else
    _nx_system_build_options_3 =  ((ULONG)NX_TCP_ACK_TIMER_RATE) << 24;
 810ef78:	4b24      	ldr	r3, [pc, #144]	@ (810f00c <_nx_system_initialize+0xf0>)
 810ef7a:	f04f 62a0 	mov.w	r2, #83886080	@ 0x5000000
 810ef7e:	601a      	str	r2, [r3, #0]
#endif
#if (NX_TCP_FAST_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF) << 16;
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_FAST_TIMER_RATE) << 16;
 810ef80:	4b22      	ldr	r3, [pc, #136]	@ (810f00c <_nx_system_initialize+0xf0>)
 810ef82:	681b      	ldr	r3, [r3, #0]
 810ef84:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 810ef88:	4a20      	ldr	r2, [pc, #128]	@ (810f00c <_nx_system_initialize+0xf0>)
 810ef8a:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_TRANSMIT_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_TRANSMIT_TIMER_RATE) << 8;
 810ef8c:	4b1f      	ldr	r3, [pc, #124]	@ (810f00c <_nx_system_initialize+0xf0>)
 810ef8e:	681b      	ldr	r3, [r3, #0]
 810ef90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810ef94:	4a1d      	ldr	r2, [pc, #116]	@ (810f00c <_nx_system_initialize+0xf0>)
 810ef96:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_KEEPALIVE_RETRY > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRY);
 810ef98:	4b1c      	ldr	r3, [pc, #112]	@ (810f00c <_nx_system_initialize+0xf0>)
 810ef9a:	681b      	ldr	r3, [r3, #0]
 810ef9c:	f043 034b 	orr.w	r3, r3, #75	@ 0x4b
 810efa0:	4a1a      	ldr	r2, [pc, #104]	@ (810f00c <_nx_system_initialize+0xf0>)
 810efa2:	6013      	str	r3, [r2, #0]

    /* Setup the fourth option word.  */
#if (NX_TCP_KEEPALIVE_INITIAL > 0xFFFFUL)
    _nx_system_build_options_4 =  ((ULONG)0xFFFF0000);
#else
    _nx_system_build_options_4 =  ((ULONG)NX_TCP_KEEPALIVE_INITIAL) << 16;
 810efa4:	4b1a      	ldr	r3, [pc, #104]	@ (810f010 <_nx_system_initialize+0xf4>)
 810efa6:	f04f 52e1 	mov.w	r2, #471859200	@ 0x1c200000
 810efaa:	601a      	str	r2, [r3, #0]
#endif
#if (NX_ARP_MAXIMUM_RETRIES > 0xFF)
    _nx_system_build_options_4 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAXIMUM_RETRIES) << 8;
 810efac:	4b18      	ldr	r3, [pc, #96]	@ (810f010 <_nx_system_initialize+0xf4>)
 810efae:	681b      	ldr	r3, [r3, #0]
 810efb0:	f443 5390 	orr.w	r3, r3, #4608	@ 0x1200
 810efb4:	4a16      	ldr	r2, [pc, #88]	@ (810f010 <_nx_system_initialize+0xf4>)
 810efb6:	6013      	str	r3, [r2, #0]
#endif
#if (NX_ARP_MAX_QUEUE_DEPTH > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF) << 4;
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAX_QUEUE_DEPTH) << 4;
 810efb8:	4b15      	ldr	r3, [pc, #84]	@ (810f010 <_nx_system_initialize+0xf4>)
 810efba:	681b      	ldr	r3, [r3, #0]
 810efbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810efc0:	4a13      	ldr	r2, [pc, #76]	@ (810f010 <_nx_system_initialize+0xf4>)
 810efc2:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_KEEPALIVE_RETRIES > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF);
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRIES);
 810efc4:	4b12      	ldr	r3, [pc, #72]	@ (810f010 <_nx_system_initialize+0xf4>)
 810efc6:	681b      	ldr	r3, [r3, #0]
 810efc8:	f043 030a 	orr.w	r3, r3, #10
 810efcc:	4a10      	ldr	r2, [pc, #64]	@ (810f010 <_nx_system_initialize+0xf4>)
 810efce:	6013      	str	r3, [r2, #0]

    /* Setup the fifth option word.  */
#if (NX_MAX_MULTICAST_GROUPS > 0xFF)
    _nx_system_build_options_5 =  ((ULONG)0xFF000000);
#else
    _nx_system_build_options_5 =  ((ULONG)NX_MAX_MULTICAST_GROUPS) << 24;
 810efd0:	4b10      	ldr	r3, [pc, #64]	@ (810f014 <_nx_system_initialize+0xf8>)
 810efd2:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 810efd6:	601a      	str	r2, [r3, #0]
#endif
#if (NX_MAX_LISTEN_REQUESTS > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF) << 16;
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_MAX_LISTEN_REQUESTS) << 16;
 810efd8:	4b0e      	ldr	r3, [pc, #56]	@ (810f014 <_nx_system_initialize+0xf8>)
 810efda:	681b      	ldr	r3, [r3, #0]
 810efdc:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 810efe0:	4a0c      	ldr	r2, [pc, #48]	@ (810f014 <_nx_system_initialize+0xf8>)
 810efe2:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_MAXIMUM_RETRIES > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_RETRIES) << 8;
 810efe4:	4b0b      	ldr	r3, [pc, #44]	@ (810f014 <_nx_system_initialize+0xf8>)
 810efe6:	681b      	ldr	r3, [r3, #0]
 810efe8:	f443 6320 	orr.w	r3, r3, #2560	@ 0xa00
 810efec:	4a09      	ldr	r2, [pc, #36]	@ (810f014 <_nx_system_initialize+0xf8>)
 810efee:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_MAXIMUM_TX_QUEUE > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_TX_QUEUE);
 810eff0:	4b08      	ldr	r3, [pc, #32]	@ (810f014 <_nx_system_initialize+0xf8>)
 810eff2:	681b      	ldr	r3, [r3, #0]
 810eff4:	f043 0314 	orr.w	r3, r3, #20
 810eff8:	4a06      	ldr	r2, [pc, #24]	@ (810f014 <_nx_system_initialize+0xf8>)
 810effa:	6013      	str	r3, [r2, #0]
 810effc:	e000      	b.n	810f000 <_nx_system_initialize+0xe4>
        return;
 810effe:	bf00      	nop
#endif
}
 810f000:	bd80      	pop	{r7, pc}
 810f002:	bf00      	nop
 810f004:	200580cc 	.word	0x200580cc
 810f008:	200580d0 	.word	0x200580d0
 810f00c:	200580d4 	.word	0x200580d4
 810f010:	200580d8 	.word	0x200580d8
 810f014:	200580dc 	.word	0x200580dc

0810f018 <_nx_tcp_cleanup_deferred>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_cleanup_deferred(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 810f018:	b480      	push	{r7}
 810f01a:	b083      	sub	sp, #12
 810f01c:	af00      	add	r7, sp, #0
 810f01e:	6078      	str	r0, [r7, #4]
 810f020:	6039      	str	r1, [r7, #0]
    NX_PARAMETER_NOT_USED(thread_ptr);

    NX_CLEANUP_EXTENSION
    /* This function is never called... so do nothing!  */
}
 810f022:	bf00      	nop
 810f024:	370c      	adds	r7, #12
 810f026:	46bd      	mov	sp, r7
 810f028:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f02c:	4770      	bx	lr
	...

0810f030 <_nx_tcp_client_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_client_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 810f030:	b580      	push	{r7, lr}
 810f032:	b08e      	sub	sp, #56	@ 0x38
 810f034:	af00      	add	r7, sp, #0
 810f036:	6078      	str	r0, [r7, #4]
 810f038:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810f03a:	f3ef 8310 	mrs	r3, PRIMASK
 810f03e:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 810f040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 810f042:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 810f044:	b672      	cpsid	i
    return(int_posture);
 810f046:	6a3b      	ldr	r3, [r7, #32]
NX_TCP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts to remove the suspended thread from the TCP socket.  */
    TX_DISABLE
 810f048:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 810f04a:	687b      	ldr	r3, [r7, #4]
 810f04c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810f04e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 810f050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f052:	2b00      	cmp	r3, #0
 810f054:	d004      	beq.n	810f060 <_nx_tcp_client_bind_cleanup+0x30>
 810f056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f058:	681b      	ldr	r3, [r3, #0]
 810f05a:	4a42      	ldr	r2, [pc, #264]	@ (810f164 <_nx_tcp_client_bind_cleanup+0x134>)
 810f05c:	4293      	cmp	r3, r2
 810f05e:	d006      	beq.n	810f06e <_nx_tcp_client_bind_cleanup+0x3e>
 810f060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f062:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810f064:	69fb      	ldr	r3, [r7, #28]
 810f066:	f383 8810 	msr	PRIMASK, r3
}
 810f06a:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 810f06c:	e077      	b.n	810f15e <_nx_tcp_client_bind_cleanup+0x12e>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 810f06e:	687b      	ldr	r3, [r7, #4]
 810f070:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810f072:	2b00      	cmp	r3, #0
 810f074:	d106      	bne.n	810f084 <_nx_tcp_client_bind_cleanup+0x54>
 810f076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f078:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810f07a:	69bb      	ldr	r3, [r7, #24]
 810f07c:	f383 8810 	msr	PRIMASK, r3
}
 810f080:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 810f082:	e06c      	b.n	810f15e <_nx_tcp_client_bind_cleanup+0x12e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 810f084:	f3ef 8305 	mrs	r3, IPSR
 810f088:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 810f08a:	697a      	ldr	r2, [r7, #20]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 810f08c:	4b36      	ldr	r3, [pc, #216]	@ (810f168 <_nx_tcp_client_bind_cleanup+0x138>)
 810f08e:	681b      	ldr	r3, [r3, #0]
 810f090:	4313      	orrs	r3, r2
 810f092:	2b00      	cmp	r3, #0
 810f094:	d104      	bne.n	810f0a0 <_nx_tcp_client_bind_cleanup+0x70>
 810f096:	4b35      	ldr	r3, [pc, #212]	@ (810f16c <_nx_tcp_client_bind_cleanup+0x13c>)
 810f098:	681b      	ldr	r3, [r3, #0]
 810f09a:	4a35      	ldr	r2, [pc, #212]	@ (810f170 <_nx_tcp_client_bind_cleanup+0x140>)
 810f09c:	4293      	cmp	r3, r2
 810f09e:	d116      	bne.n	810f0ce <_nx_tcp_client_bind_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 810f0a0:	687b      	ldr	r3, [r7, #4]
 810f0a2:	4a34      	ldr	r2, [pc, #208]	@ (810f174 <_nx_tcp_client_bind_cleanup+0x144>)
 810f0a4:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 810f0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f0a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810f0ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 810f0ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f0b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810f0b2:	693b      	ldr	r3, [r7, #16]
 810f0b4:	f383 8810 	msr	PRIMASK, r3
}
 810f0b8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 810f0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f0bc:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 810f0c0:	2200      	movs	r2, #0
 810f0c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 810f0c6:	4618      	mov	r0, r3
 810f0c8:	f005 f9c0 	bl	811444c <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 810f0cc:	e047      	b.n	810f15e <_nx_tcp_client_bind_cleanup+0x12e>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_tcp_socket_bind_in_progress =  NX_NULL;
 810f0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f0d0:	2200      	movs	r2, #0
 810f0d2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 810f0d6:	687b      	ldr	r3, [r7, #4]
 810f0d8:	2200      	movs	r2, #0
 810f0da:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_tcp_socket_bound_previous;
 810f0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f0de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 810f0e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 810f0e4:	687b      	ldr	r3, [r7, #4]
 810f0e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810f0e8:	687a      	ldr	r2, [r7, #4]
 810f0ea:	429a      	cmp	r2, r3
 810f0ec:	d104      	bne.n	810f0f8 <_nx_tcp_client_bind_cleanup+0xc8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_tcp_socket_bind_suspension_list =  NX_NULL;
 810f0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f0f0:	2200      	movs	r2, #0
 810f0f2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 810f0f6:	e00e      	b.n	810f116 <_nx_tcp_client_bind_cleanup+0xe6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_tcp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 810f0f8:	687b      	ldr	r3, [r7, #4]
 810f0fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810f0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f0fe:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 810f102:	687b      	ldr	r3, [r7, #4]
 810f104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous;
 810f106:	687a      	ldr	r2, [r7, #4]
 810f108:	6f52      	ldr	r2, [r2, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 810f10a:	675a      	str	r2, [r3, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 810f10c:	687b      	ldr	r3, [r7, #4]
 810f10e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_next;
 810f110:	687a      	ldr	r2, [r7, #4]
 810f112:	6f12      	ldr	r2, [r2, #112]	@ 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 810f114:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_tcp_socket_bind_suspended_count--;
 810f116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f118:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810f11c:	1e5a      	subs	r2, r3, #1
 810f11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f120:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 810f124:	687b      	ldr	r3, [r7, #4]
 810f126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810f128:	2b0c      	cmp	r3, #12
 810f12a:	d112      	bne.n	810f152 <_nx_tcp_client_bind_cleanup+0x122>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 810f12c:	687b      	ldr	r3, [r7, #4]
 810f12e:	2223      	movs	r2, #35	@ 0x23
 810f130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 810f134:	4b10      	ldr	r3, [pc, #64]	@ (810f178 <_nx_tcp_client_bind_cleanup+0x148>)
 810f136:	681b      	ldr	r3, [r3, #0]
 810f138:	3301      	adds	r3, #1
 810f13a:	4a0f      	ldr	r2, [pc, #60]	@ (810f178 <_nx_tcp_client_bind_cleanup+0x148>)
 810f13c:	6013      	str	r3, [r2, #0]
 810f13e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f140:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810f142:	68fb      	ldr	r3, [r7, #12]
 810f144:	f383 8810 	msr	PRIMASK, r3
}
 810f148:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 810f14a:	6878      	ldr	r0, [r7, #4]
 810f14c:	f006 fc80 	bl	8115a50 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 810f150:	e005      	b.n	810f15e <_nx_tcp_client_bind_cleanup+0x12e>
 810f152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f154:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810f156:	68bb      	ldr	r3, [r7, #8]
 810f158:	f383 8810 	msr	PRIMASK, r3
}
 810f15c:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 810f15e:	3738      	adds	r7, #56	@ 0x38
 810f160:	46bd      	mov	sp, r7
 810f162:	bd80      	pop	{r7, pc}
 810f164:	54435020 	.word	0x54435020
 810f168:	20050088 	.word	0x20050088
 810f16c:	20058128 	.word	0x20058128
 810f170:	20058270 	.word	0x20058270
 810f174:	0810f019 	.word	0x0810f019
 810f178:	200581c0 	.word	0x200581c0

0810f17c <_nx_tcp_connect_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_connect_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 810f17c:	b580      	push	{r7, lr}
 810f17e:	b08e      	sub	sp, #56	@ 0x38
 810f180:	af00      	add	r7, sp, #0
 810f182:	6078      	str	r0, [r7, #4]
 810f184:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810f186:	f3ef 8310 	mrs	r3, PRIMASK
 810f18a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 810f18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 810f18e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 810f190:	b672      	cpsid	i
    return(int_posture);
 810f192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 810f194:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 810f196:	687b      	ldr	r3, [r7, #4]
 810f198:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810f19a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 810f19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f19e:	2b00      	cmp	r3, #0
 810f1a0:	d004      	beq.n	810f1ac <_nx_tcp_connect_cleanup+0x30>
 810f1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f1a4:	681b      	ldr	r3, [r3, #0]
 810f1a6:	4a3a      	ldr	r2, [pc, #232]	@ (810f290 <_nx_tcp_connect_cleanup+0x114>)
 810f1a8:	4293      	cmp	r3, r2
 810f1aa:	d006      	beq.n	810f1ba <_nx_tcp_connect_cleanup+0x3e>
 810f1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f1ae:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810f1b0:	6a3b      	ldr	r3, [r7, #32]
 810f1b2:	f383 8810 	msr	PRIMASK, r3
}
 810f1b6:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 810f1b8:	e067      	b.n	810f28a <_nx_tcp_connect_cleanup+0x10e>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 810f1ba:	687b      	ldr	r3, [r7, #4]
 810f1bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810f1be:	2b00      	cmp	r3, #0
 810f1c0:	d106      	bne.n	810f1d0 <_nx_tcp_connect_cleanup+0x54>
 810f1c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f1c4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810f1c6:	69fb      	ldr	r3, [r7, #28]
 810f1c8:	f383 8810 	msr	PRIMASK, r3
}
 810f1cc:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 810f1ce:	e05c      	b.n	810f28a <_nx_tcp_connect_cleanup+0x10e>
    }

    /* Pickup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 810f1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f1d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810f1d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 810f1d8:	f3ef 8305 	mrs	r3, IPSR
 810f1dc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 810f1de:	69ba      	ldr	r2, [r7, #24]

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 810f1e0:	4b2c      	ldr	r3, [pc, #176]	@ (810f294 <_nx_tcp_connect_cleanup+0x118>)
 810f1e2:	681b      	ldr	r3, [r3, #0]
 810f1e4:	4313      	orrs	r3, r2
 810f1e6:	2b00      	cmp	r3, #0
 810f1e8:	d104      	bne.n	810f1f4 <_nx_tcp_connect_cleanup+0x78>
 810f1ea:	4b2b      	ldr	r3, [pc, #172]	@ (810f298 <_nx_tcp_connect_cleanup+0x11c>)
 810f1ec:	681b      	ldr	r3, [r3, #0]
 810f1ee:	4a2b      	ldr	r2, [pc, #172]	@ (810f29c <_nx_tcp_connect_cleanup+0x120>)
 810f1f0:	4293      	cmp	r3, r2
 810f1f2:	d112      	bne.n	810f21a <_nx_tcp_connect_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 810f1f4:	687b      	ldr	r3, [r7, #4]
 810f1f6:	4a2a      	ldr	r2, [pc, #168]	@ (810f2a0 <_nx_tcp_connect_cleanup+0x124>)
 810f1f8:	669a      	str	r2, [r3, #104]	@ 0x68
 810f1fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f1fc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810f1fe:	697b      	ldr	r3, [r7, #20]
 810f200:	f383 8810 	msr	PRIMASK, r3
}
 810f204:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 810f206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f208:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 810f20c:	2200      	movs	r2, #0
 810f20e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 810f212:	4618      	mov	r0, r3
 810f214:	f005 f91a 	bl	811444c <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 810f218:	e037      	b.n	810f28a <_nx_tcp_connect_cleanup+0x10e>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 810f21a:	687b      	ldr	r3, [r7, #4]
 810f21c:	2200      	movs	r2, #0
 810f21e:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Clear the suspension pointer.   */
        socket_ptr -> nx_tcp_socket_connect_suspended_thread =  NX_NULL;
 810f220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f222:	2200      	movs	r2, #0
 810f224:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

        /* Clear the timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 810f228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f22a:	2200      	movs	r2, #0
 810f22c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

        /* Return to the proper socket state.  */
        if (socket_ptr -> nx_tcp_socket_client_type)
 810f230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f232:	689b      	ldr	r3, [r3, #8]
 810f234:	2b00      	cmp	r3, #0
 810f236:	d003      	beq.n	810f240 <_nx_tcp_connect_cleanup+0xc4>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Client socket, return to a CLOSED state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 810f238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f23a:	2201      	movs	r2, #1
 810f23c:	639a      	str	r2, [r3, #56]	@ 0x38
 810f23e:	e007      	b.n	810f250 <_nx_tcp_connect_cleanup+0xd4>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_LISTEN_STATE, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Server socket, return to LISTEN state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 810f240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f242:	2202      	movs	r2, #2
 810f244:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Move back the acknowledgment number just in case there is a retry.  */
            socket_ptr -> nx_tcp_socket_rx_sequence--;
 810f246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f24a:	1e5a      	subs	r2, r3, #1
 810f24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f24e:	641a      	str	r2, [r3, #64]	@ 0x40
        }

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 810f250:	687b      	ldr	r3, [r7, #4]
 810f252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810f254:	2b0c      	cmp	r3, #12
 810f256:	d112      	bne.n	810f27e <_nx_tcp_connect_cleanup+0x102>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 810f258:	687b      	ldr	r3, [r7, #4]
 810f25a:	2238      	movs	r2, #56	@ 0x38
 810f25c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 810f260:	4b10      	ldr	r3, [pc, #64]	@ (810f2a4 <_nx_tcp_connect_cleanup+0x128>)
 810f262:	681b      	ldr	r3, [r3, #0]
 810f264:	3301      	adds	r3, #1
 810f266:	4a0f      	ldr	r2, [pc, #60]	@ (810f2a4 <_nx_tcp_connect_cleanup+0x128>)
 810f268:	6013      	str	r3, [r2, #0]
 810f26a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f26c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810f26e:	693b      	ldr	r3, [r7, #16]
 810f270:	f383 8810 	msr	PRIMASK, r3
}
 810f274:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 810f276:	6878      	ldr	r0, [r7, #4]
 810f278:	f006 fbea 	bl	8115a50 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 810f27c:	e005      	b.n	810f28a <_nx_tcp_connect_cleanup+0x10e>
 810f27e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f280:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810f282:	68fb      	ldr	r3, [r7, #12]
 810f284:	f383 8810 	msr	PRIMASK, r3
}
 810f288:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 810f28a:	3738      	adds	r7, #56	@ 0x38
 810f28c:	46bd      	mov	sp, r7
 810f28e:	bd80      	pop	{r7, pc}
 810f290:	54435020 	.word	0x54435020
 810f294:	20050088 	.word	0x20050088
 810f298:	20058128 	.word	0x20058128
 810f29c:	20058270 	.word	0x20058270
 810f2a0:	0810f019 	.word	0x0810f019
 810f2a4:	200581c0 	.word	0x200581c0

0810f2a8 <_nx_tcp_deferred_cleanup_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_deferred_cleanup_check(NX_IP *ip_ptr)
{
 810f2a8:	b580      	push	{r7, lr}
 810f2aa:	b086      	sub	sp, #24
 810f2ac:	af00      	add	r7, sp, #0
 810f2ae:	6078      	str	r0, [r7, #4]
NX_TCP_SOCKET *socket_ptr;
TX_THREAD     *thread_ptr;


    /* Pickup the first socket and the created count.  */
    socket_ptr =       ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 810f2b0:	687b      	ldr	r3, [r7, #4]
 810f2b2:	f8d3 3490 	ldr.w	r3, [r3, #1168]	@ 0x490
 810f2b6:	60fb      	str	r3, [r7, #12]
    created_sockets =  ip_ptr -> nx_ip_tcp_created_sockets_count;
 810f2b8:	687b      	ldr	r3, [r7, #4]
 810f2ba:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 810f2be:	617b      	str	r3, [r7, #20]

    /* Loop through all created TCP sockets on the IP instance.  */
    while (created_sockets--)
 810f2c0:	e07a      	b.n	810f3b8 <_nx_tcp_deferred_cleanup_check+0x110>
    {

        /* Check the socket for deferred bind cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_bind_suspended_count;
 810f2c2:	68fb      	ldr	r3, [r7, #12]
 810f2c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810f2c8:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 810f2ca:	693b      	ldr	r3, [r7, #16]
 810f2cc:	2b00      	cmp	r3, #0
 810f2ce:	d015      	beq.n	810f2fc <_nx_tcp_deferred_cleanup_check+0x54>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_bind_suspension_list;
 810f2d0:	68fb      	ldr	r3, [r7, #12]
 810f2d2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810f2d6:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 810f2d8:	68bb      	ldr	r3, [r7, #8]
 810f2da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810f2dc:	4a3c      	ldr	r2, [pc, #240]	@ (810f3d0 <_nx_tcp_deferred_cleanup_check+0x128>)
 810f2de:	4293      	cmp	r3, r2
 810f2e0:	d103      	bne.n	810f2ea <_nx_tcp_deferred_cleanup_check+0x42>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_client_bind_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 810f2e2:	2100      	movs	r1, #0
 810f2e4:	68b8      	ldr	r0, [r7, #8]
 810f2e6:	f7ff fea3 	bl	810f030 <_nx_tcp_client_bind_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 810f2ea:	68bb      	ldr	r3, [r7, #8]
 810f2ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810f2ee:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 810f2f0:	693b      	ldr	r3, [r7, #16]
 810f2f2:	3b01      	subs	r3, #1
 810f2f4:	613b      	str	r3, [r7, #16]
 810f2f6:	693b      	ldr	r3, [r7, #16]
 810f2f8:	2b00      	cmp	r3, #0
 810f2fa:	d1ed      	bne.n	810f2d8 <_nx_tcp_deferred_cleanup_check+0x30>
        }

        /* Check the socket for deferred connect cleanup.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_connect_suspended_thread;
 810f2fc:	68fb      	ldr	r3, [r7, #12]
 810f2fe:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 810f302:	60bb      	str	r3, [r7, #8]
        if (thread_ptr)
 810f304:	68bb      	ldr	r3, [r7, #8]
 810f306:	2b00      	cmp	r3, #0
 810f308:	d008      	beq.n	810f31c <_nx_tcp_deferred_cleanup_check+0x74>
        {

            /* Determine if this thread has deferred the timeout processing.  */
            if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 810f30a:	68bb      	ldr	r3, [r7, #8]
 810f30c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810f30e:	4a30      	ldr	r2, [pc, #192]	@ (810f3d0 <_nx_tcp_deferred_cleanup_check+0x128>)
 810f310:	4293      	cmp	r3, r2
 810f312:	d103      	bne.n	810f31c <_nx_tcp_deferred_cleanup_check+0x74>
            {

                /* Yes, call the cleanup routine again!  */
                _nx_tcp_connect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 810f314:	2100      	movs	r1, #0
 810f316:	68b8      	ldr	r0, [r7, #8]
 810f318:	f7ff ff30 	bl	810f17c <_nx_tcp_connect_cleanup>
            }
        }

        /* Check the socket for deferred disconnect cleanup.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_disconnect_suspended_thread;
 810f31c:	68fb      	ldr	r3, [r7, #12]
 810f31e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 810f322:	60bb      	str	r3, [r7, #8]
        if (thread_ptr)
 810f324:	68bb      	ldr	r3, [r7, #8]
 810f326:	2b00      	cmp	r3, #0
 810f328:	d008      	beq.n	810f33c <_nx_tcp_deferred_cleanup_check+0x94>
        {

            /* Determine if this thread has deferred the timeout processing.  */
            if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 810f32a:	68bb      	ldr	r3, [r7, #8]
 810f32c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810f32e:	4a28      	ldr	r2, [pc, #160]	@ (810f3d0 <_nx_tcp_deferred_cleanup_check+0x128>)
 810f330:	4293      	cmp	r3, r2
 810f332:	d103      	bne.n	810f33c <_nx_tcp_deferred_cleanup_check+0x94>
            {

                /* Yes, call the cleanup routine again!  */
                _nx_tcp_disconnect_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 810f334:	2100      	movs	r1, #0
 810f336:	68b8      	ldr	r0, [r7, #8]
 810f338:	f000 f84c 	bl	810f3d4 <_nx_tcp_disconnect_cleanup>
            }
        }

        /* Check the socket for deferred receive cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_receive_suspended_count;
 810f33c:	68fb      	ldr	r3, [r7, #12]
 810f33e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810f342:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 810f344:	693b      	ldr	r3, [r7, #16]
 810f346:	2b00      	cmp	r3, #0
 810f348:	d015      	beq.n	810f376 <_nx_tcp_deferred_cleanup_check+0xce>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_receive_suspension_list;
 810f34a:	68fb      	ldr	r3, [r7, #12]
 810f34c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 810f350:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 810f352:	68bb      	ldr	r3, [r7, #8]
 810f354:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810f356:	4a1e      	ldr	r2, [pc, #120]	@ (810f3d0 <_nx_tcp_deferred_cleanup_check+0x128>)
 810f358:	4293      	cmp	r3, r2
 810f35a:	d103      	bne.n	810f364 <_nx_tcp_deferred_cleanup_check+0xbc>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_receive_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 810f35c:	2100      	movs	r1, #0
 810f35e:	68b8      	ldr	r0, [r7, #8]
 810f360:	f001 f958 	bl	8110614 <_nx_tcp_receive_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 810f364:	68bb      	ldr	r3, [r7, #8]
 810f366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810f368:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 810f36a:	693b      	ldr	r3, [r7, #16]
 810f36c:	3b01      	subs	r3, #1
 810f36e:	613b      	str	r3, [r7, #16]
 810f370:	693b      	ldr	r3, [r7, #16]
 810f372:	2b00      	cmp	r3, #0
 810f374:	d1ed      	bne.n	810f352 <_nx_tcp_deferred_cleanup_check+0xaa>
        }

        /* Check the socket for deferred transmit cleanup.  */
        suspended_threads =  socket_ptr -> nx_tcp_socket_transmit_suspended_count;
 810f376:	68fb      	ldr	r3, [r7, #12]
 810f378:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 810f37c:	613b      	str	r3, [r7, #16]
        if (suspended_threads)
 810f37e:	693b      	ldr	r3, [r7, #16]
 810f380:	2b00      	cmp	r3, #0
 810f382:	d015      	beq.n	810f3b0 <_nx_tcp_deferred_cleanup_check+0x108>
        {

            /* Pickup the socket pointer.  */
            thread_ptr =  socket_ptr -> nx_tcp_socket_transmit_suspension_list;
 810f384:	68fb      	ldr	r3, [r7, #12]
 810f386:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810f38a:	60bb      	str	r3, [r7, #8]
               is a timeout.  */
            do
            {

                /* Determine if this thread has deferred the timeout processing.  */
                if (thread_ptr -> tx_thread_suspend_cleanup == _nx_tcp_cleanup_deferred)
 810f38c:	68bb      	ldr	r3, [r7, #8]
 810f38e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810f390:	4a0f      	ldr	r2, [pc, #60]	@ (810f3d0 <_nx_tcp_deferred_cleanup_check+0x128>)
 810f392:	4293      	cmp	r3, r2
 810f394:	d103      	bne.n	810f39e <_nx_tcp_deferred_cleanup_check+0xf6>
                {

                    /* Yes, call the cleanup routine again!  */
                    _nx_tcp_transmit_cleanup(thread_ptr NX_CLEANUP_ARGUMENT);
 810f396:	2100      	movs	r1, #0
 810f398:	68b8      	ldr	r0, [r7, #8]
 810f39a:	f003 f805 	bl	81123a8 <_nx_tcp_transmit_cleanup>
                }

                /* Move to next suspended thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 810f39e:	68bb      	ldr	r3, [r7, #8]
 810f3a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810f3a2:	60bb      	str	r3, [r7, #8]
            } while (--suspended_threads);
 810f3a4:	693b      	ldr	r3, [r7, #16]
 810f3a6:	3b01      	subs	r3, #1
 810f3a8:	613b      	str	r3, [r7, #16]
 810f3aa:	693b      	ldr	r3, [r7, #16]
 810f3ac:	2b00      	cmp	r3, #0
 810f3ae:	d1ed      	bne.n	810f38c <_nx_tcp_deferred_cleanup_check+0xe4>
        }

        /* Move to next created TCP socket.  */
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 810f3b0:	68fb      	ldr	r3, [r7, #12]
 810f3b2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 810f3b6:	60fb      	str	r3, [r7, #12]
    while (created_sockets--)
 810f3b8:	697b      	ldr	r3, [r7, #20]
 810f3ba:	1e5a      	subs	r2, r3, #1
 810f3bc:	617a      	str	r2, [r7, #20]
 810f3be:	2b00      	cmp	r3, #0
 810f3c0:	f47f af7f 	bne.w	810f2c2 <_nx_tcp_deferred_cleanup_check+0x1a>
    }
}
 810f3c4:	bf00      	nop
 810f3c6:	bf00      	nop
 810f3c8:	3718      	adds	r7, #24
 810f3ca:	46bd      	mov	sp, r7
 810f3cc:	bd80      	pop	{r7, pc}
 810f3ce:	bf00      	nop
 810f3d0:	0810f019 	.word	0x0810f019

0810f3d4 <_nx_tcp_disconnect_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_disconnect_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 810f3d4:	b580      	push	{r7, lr}
 810f3d6:	b08e      	sub	sp, #56	@ 0x38
 810f3d8:	af00      	add	r7, sp, #0
 810f3da:	6078      	str	r0, [r7, #4]
 810f3dc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 810f3de:	f3ef 8310 	mrs	r3, PRIMASK
 810f3e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 810f3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 810f3e6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 810f3e8:	b672      	cpsid	i
    return(int_posture);
 810f3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 810f3ec:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 810f3ee:	687b      	ldr	r3, [r7, #4]
 810f3f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810f3f2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 810f3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f3f6:	2b00      	cmp	r3, #0
 810f3f8:	d004      	beq.n	810f404 <_nx_tcp_disconnect_cleanup+0x30>
 810f3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f3fc:	681b      	ldr	r3, [r3, #0]
 810f3fe:	4a30      	ldr	r2, [pc, #192]	@ (810f4c0 <_nx_tcp_disconnect_cleanup+0xec>)
 810f400:	4293      	cmp	r3, r2
 810f402:	d006      	beq.n	810f412 <_nx_tcp_disconnect_cleanup+0x3e>
 810f404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f406:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810f408:	6a3b      	ldr	r3, [r7, #32]
 810f40a:	f383 8810 	msr	PRIMASK, r3
}
 810f40e:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 810f410:	e053      	b.n	810f4ba <_nx_tcp_disconnect_cleanup+0xe6>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 810f412:	687b      	ldr	r3, [r7, #4]
 810f414:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810f416:	2b00      	cmp	r3, #0
 810f418:	d106      	bne.n	810f428 <_nx_tcp_disconnect_cleanup+0x54>
 810f41a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f41c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810f41e:	69fb      	ldr	r3, [r7, #28]
 810f420:	f383 8810 	msr	PRIMASK, r3
}
 810f424:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 810f426:	e048      	b.n	810f4ba <_nx_tcp_disconnect_cleanup+0xe6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 810f428:	f3ef 8305 	mrs	r3, IPSR
 810f42c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 810f42e:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 810f430:	4b24      	ldr	r3, [pc, #144]	@ (810f4c4 <_nx_tcp_disconnect_cleanup+0xf0>)
 810f432:	681b      	ldr	r3, [r3, #0]
 810f434:	4313      	orrs	r3, r2
 810f436:	2b00      	cmp	r3, #0
 810f438:	d104      	bne.n	810f444 <_nx_tcp_disconnect_cleanup+0x70>
 810f43a:	4b23      	ldr	r3, [pc, #140]	@ (810f4c8 <_nx_tcp_disconnect_cleanup+0xf4>)
 810f43c:	681b      	ldr	r3, [r3, #0]
 810f43e:	4a23      	ldr	r2, [pc, #140]	@ (810f4cc <_nx_tcp_disconnect_cleanup+0xf8>)
 810f440:	4293      	cmp	r3, r2
 810f442:	d116      	bne.n	810f472 <_nx_tcp_disconnect_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 810f444:	687b      	ldr	r3, [r7, #4]
 810f446:	4a22      	ldr	r2, [pc, #136]	@ (810f4d0 <_nx_tcp_disconnect_cleanup+0xfc>)
 810f448:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 810f44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f44c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810f450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810f452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f454:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810f456:	697b      	ldr	r3, [r7, #20]
 810f458:	f383 8810 	msr	PRIMASK, r3
}
 810f45c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 810f45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f460:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 810f464:	2200      	movs	r2, #0
 810f466:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 810f46a:	4618      	mov	r0, r3
 810f46c:	f004 ffee 	bl	811444c <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 810f470:	e023      	b.n	810f4ba <_nx_tcp_disconnect_cleanup+0xe6>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 810f472:	687b      	ldr	r3, [r7, #4]
 810f474:	2200      	movs	r2, #0
 810f476:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Clear the suspension pointer.   */
        socket_ptr -> nx_tcp_socket_disconnect_suspended_thread =  NX_NULL;
 810f478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f47a:	2200      	movs	r2, #0
 810f47c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 810f480:	687b      	ldr	r3, [r7, #4]
 810f482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810f484:	2b0c      	cmp	r3, #12
 810f486:	d112      	bne.n	810f4ae <_nx_tcp_disconnect_cleanup+0xda>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_DISCONNECT_FAILED;
 810f488:	687b      	ldr	r3, [r7, #4]
 810f48a:	2241      	movs	r2, #65	@ 0x41
 810f48c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 810f490:	4b10      	ldr	r3, [pc, #64]	@ (810f4d4 <_nx_tcp_disconnect_cleanup+0x100>)
 810f492:	681b      	ldr	r3, [r3, #0]
 810f494:	3301      	adds	r3, #1
 810f496:	4a0f      	ldr	r2, [pc, #60]	@ (810f4d4 <_nx_tcp_disconnect_cleanup+0x100>)
 810f498:	6013      	str	r3, [r2, #0]
 810f49a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f49c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810f49e:	693b      	ldr	r3, [r7, #16]
 810f4a0:	f383 8810 	msr	PRIMASK, r3
}
 810f4a4:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 810f4a6:	6878      	ldr	r0, [r7, #4]
 810f4a8:	f006 fad2 	bl	8115a50 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 810f4ac:	e005      	b.n	810f4ba <_nx_tcp_disconnect_cleanup+0xe6>
 810f4ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f4b0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 810f4b2:	68fb      	ldr	r3, [r7, #12]
 810f4b4:	f383 8810 	msr	PRIMASK, r3
}
 810f4b8:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 810f4ba:	3738      	adds	r7, #56	@ 0x38
 810f4bc:	46bd      	mov	sp, r7
 810f4be:	bd80      	pop	{r7, pc}
 810f4c0:	54435020 	.word	0x54435020
 810f4c4:	20050088 	.word	0x20050088
 810f4c8:	20058128 	.word	0x20058128
 810f4cc:	20058270 	.word	0x20058270
 810f4d0:	0810f019 	.word	0x0810f019
 810f4d4:	200581c0 	.word	0x200581c0

0810f4d8 <_nx_tcp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_enable(NX_IP *ip_ptr)
{
 810f4d8:	b580      	push	{r7, lr}
 810f4da:	b084      	sub	sp, #16
 810f4dc:	af00      	add	r7, sp, #0
 810f4de:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_TCP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_TCP_EVENTS, 0, 0);
    /* Place all server listen request structures on the available list.   */

    /* Setup a pointer to the first listen.  */
    listen_ptr =  &(ip_ptr -> nx_ip_tcp_server_listen_reqs[0]);
 810f4e0:	687b      	ldr	r3, [r7, #4]
 810f4e2:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 810f4e6:	60bb      	str	r3, [r7, #8]

    /* Setup the available listen requests head pointer.  */
    ip_ptr -> nx_ip_tcp_available_listen_requests =  listen_ptr;
 810f4e8:	687b      	ldr	r3, [r7, #4]
 810f4ea:	68ba      	ldr	r2, [r7, #8]
 810f4ec:	f8c3 261c 	str.w	r2, [r3, #1564]	@ 0x61c

    /* Loop through the listen requests and link them on the available list.  */
    for (i = 0; i < NX_MAX_LISTEN_REQUESTS; i++)
 810f4f0:	2300      	movs	r3, #0
 810f4f2:	60fb      	str	r3, [r7, #12]
 810f4f4:	e00d      	b.n	810f512 <_nx_tcp_enable+0x3a>
    {

        /* Link listen request to next listen request.  */
        listen_ptr -> nx_tcp_listen_next =  listen_ptr + 1;
 810f4f6:	68bb      	ldr	r3, [r7, #8]
 810f4f8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 810f4fc:	68bb      	ldr	r3, [r7, #8]
 810f4fe:	61da      	str	r2, [r3, #28]

        /* Determine if we need to move to the next listen request.  */
        if (i < (NX_MAX_LISTEN_REQUESTS - 1))
 810f500:	68fb      	ldr	r3, [r7, #12]
 810f502:	2b08      	cmp	r3, #8
 810f504:	d802      	bhi.n	810f50c <_nx_tcp_enable+0x34>
        {
            listen_ptr++;
 810f506:	68bb      	ldr	r3, [r7, #8]
 810f508:	3324      	adds	r3, #36	@ 0x24
 810f50a:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < NX_MAX_LISTEN_REQUESTS; i++)
 810f50c:	68fb      	ldr	r3, [r7, #12]
 810f50e:	3301      	adds	r3, #1
 810f510:	60fb      	str	r3, [r7, #12]
 810f512:	68fb      	ldr	r3, [r7, #12]
 810f514:	2b09      	cmp	r3, #9
 810f516:	d9ee      	bls.n	810f4f6 <_nx_tcp_enable+0x1e>
        }
    }

    /* Make sure the last listen request has a NULL pointer.  */
    listen_ptr -> nx_tcp_listen_next =  NX_NULL;
 810f518:	68bb      	ldr	r3, [r7, #8]
 810f51a:	2200      	movs	r2, #0
 810f51c:	61da      	str	r2, [r3, #28]

    /* Set the TCP packet queue processing function.  */
    ip_ptr -> nx_ip_tcp_queue_process =  _nx_tcp_queue_process;
 810f51e:	687b      	ldr	r3, [r7, #4]
 810f520:	4a13      	ldr	r2, [pc, #76]	@ (810f570 <_nx_tcp_enable+0x98>)
 810f522:	f8c3 24a4 	str.w	r2, [r3, #1188]	@ 0x4a4

    /* Set the TCP periodic processing function.  */
    ip_ptr -> nx_ip_tcp_periodic_processing =  _nx_tcp_periodic_processing;
 810f526:	687b      	ldr	r3, [r7, #4]
 810f528:	4a12      	ldr	r2, [pc, #72]	@ (810f574 <_nx_tcp_enable+0x9c>)
 810f52a:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c

    /* Set the TCP fast periodic processing function.  */
    ip_ptr -> nx_ip_tcp_fast_periodic_processing =  _nx_tcp_fast_periodic_processing;
 810f52e:	687b      	ldr	r3, [r7, #4]
 810f530:	4a11      	ldr	r2, [pc, #68]	@ (810f578 <_nx_tcp_enable+0xa0>)
 810f532:	f8c3 24a0 	str.w	r2, [r3, #1184]	@ 0x4a0

    /* Set the TCP deferred cleanup check function.  */
    ip_ptr -> nx_tcp_deferred_cleanup_check =  _nx_tcp_deferred_cleanup_check;
 810f536:	687b      	ldr	r3, [r7, #4]
 810f538:	4a10      	ldr	r2, [pc, #64]	@ (810f57c <_nx_tcp_enable+0xa4>)
 810f53a:	f8c3 2720 	str.w	r2, [r3, #1824]	@ 0x720

    /* Setup base timer variables.  */
    _nx_tcp_fast_timer_rate =       (NX_IP_PERIODIC_RATE + (NX_TCP_FAST_TIMER_RATE - 1)) / NX_TCP_FAST_TIMER_RATE;
 810f53e:	4b10      	ldr	r3, [pc, #64]	@ (810f580 <_nx_tcp_enable+0xa8>)
 810f540:	220a      	movs	r2, #10
 810f542:	601a      	str	r2, [r3, #0]
    _nx_tcp_ack_timer_rate =        (NX_IP_PERIODIC_RATE + (NX_TCP_ACK_TIMER_RATE - 1)) / NX_TCP_ACK_TIMER_RATE;
 810f544:	4b0f      	ldr	r3, [pc, #60]	@ (810f584 <_nx_tcp_enable+0xac>)
 810f546:	2214      	movs	r2, #20
 810f548:	601a      	str	r2, [r3, #0]

    /*lint -e{778} suppress constant expression, since NX_TCP_TRANSMIT_TIMER_RATE can be redefined. */
    /*lint -e{835} -e{845} suppress operating on zero. */
    _nx_tcp_transmit_timer_rate =   (NX_IP_PERIODIC_RATE + (NX_TCP_TRANSMIT_TIMER_RATE - 1)) / NX_TCP_TRANSMIT_TIMER_RATE;
 810f54a:	4b0f      	ldr	r3, [pc, #60]	@ (810f588 <_nx_tcp_enable+0xb0>)
 810f54c:	2264      	movs	r2, #100	@ 0x64
 810f54e:	601a      	str	r2, [r3, #0]

    _nx_tcp_2MSL_timer_rate = 2 * NX_IP_PERIODIC_RATE * NX_TCP_MAXIMUM_SEGMENT_LIFETIME;
 810f550:	4b0e      	ldr	r3, [pc, #56]	@ (810f58c <_nx_tcp_enable+0xb4>)
 810f552:	f645 52c0 	movw	r2, #24000	@ 0x5dc0
 810f556:	601a      	str	r2, [r3, #0]

    _nx_ip_fast_periodic_timer_create(ip_ptr);
 810f558:	6878      	ldr	r0, [r7, #4]
 810f55a:	f7fd ff61 	bl	810d420 <_nx_ip_fast_periodic_timer_create>

    /* Set the TCP packet receive function in the IP structure to indicate
       we are ready to receive TCP packets.  */
    ip_ptr -> nx_ip_tcp_packet_receive =  _nx_tcp_packet_receive;
 810f55e:	687b      	ldr	r3, [r7, #4]
 810f560:	4a0b      	ldr	r2, [pc, #44]	@ (810f590 <_nx_tcp_enable+0xb8>)
 810f562:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498

    /* Return successful completion.  */
    return(NX_SUCCESS);
 810f566:	2300      	movs	r3, #0
}
 810f568:	4618      	mov	r0, r3
 810f56a:	3710      	adds	r7, #16
 810f56c:	46bd      	mov	sp, r7
 810f56e:	bd80      	pop	{r7, pc}
 810f570:	081105a5 	.word	0x081105a5
 810f574:	08110591 	.word	0x08110591
 810f578:	0810f595 	.word	0x0810f595
 810f57c:	0810f2a9 	.word	0x0810f2a9
 810f580:	200580e0 	.word	0x200580e0
 810f584:	200580e4 	.word	0x200580e4
 810f588:	200580e8 	.word	0x200580e8
 810f58c:	200580ec 	.word	0x200580ec
 810f590:	081100b5 	.word	0x081100b5

0810f594 <_nx_tcp_fast_periodic_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_fast_periodic_processing(NX_IP *ip_ptr)
{
 810f594:	b580      	push	{r7, lr}
 810f596:	b086      	sub	sp, #24
 810f598:	af00      	add	r7, sp, #0
 810f59a:	6078      	str	r0, [r7, #4]
ULONG          sockets;
ULONG          timer_rate;


    /* Pickup this timer's periodic rate.  */
    timer_rate =  _nx_tcp_fast_timer_rate;
 810f59c:	4b73      	ldr	r3, [pc, #460]	@ (810f76c <_nx_tcp_fast_periodic_processing+0x1d8>)
 810f59e:	681b      	ldr	r3, [r3, #0]
 810f5a0:	60fb      	str	r3, [r7, #12]

    /* Pickup the number of created TCP sockets.  */
    sockets =  ip_ptr -> nx_ip_tcp_created_sockets_count;
 810f5a2:	687b      	ldr	r3, [r7, #4]
 810f5a4:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 810f5a8:	613b      	str	r3, [r7, #16]

    /* Pickup the first socket.  */
    socket_ptr =  ip_ptr -> nx_ip_tcp_created_sockets_ptr;
 810f5aa:	687b      	ldr	r3, [r7, #4]
 810f5ac:	f8d3 3490 	ldr.w	r3, [r3, #1168]	@ 0x490
 810f5b0:	617b      	str	r3, [r7, #20]

    /* Loop through the created sockets.  */
    while (sockets--)
 810f5b2:	e0cf      	b.n	810f754 <_nx_tcp_fast_periodic_processing+0x1c0>
    {

        /* Determine if the socket is in an established or disconnect state and has delayed sending an ACK
           from a previous receive packet event.  */
        if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_ESTABLISHED) &&
 810f5b4:	697b      	ldr	r3, [r7, #20]
 810f5b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810f5b8:	2b04      	cmp	r3, #4
 810f5ba:	d91d      	bls.n	810f5f8 <_nx_tcp_fast_periodic_processing+0x64>
            ((socket_ptr -> nx_tcp_socket_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence_acked) ||
 810f5bc:	697b      	ldr	r3, [r7, #20]
 810f5be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810f5c0:	697b      	ldr	r3, [r7, #20]
 810f5c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_ESTABLISHED) &&
 810f5c4:	429a      	cmp	r2, r3
 810f5c6:	d105      	bne.n	810f5d4 <_nx_tcp_fast_periodic_processing+0x40>
             (socket_ptr -> nx_tcp_socket_rx_window_last_sent < socket_ptr -> nx_tcp_socket_rx_window_current)))
 810f5c8:	697b      	ldr	r3, [r7, #20]
 810f5ca:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 810f5cc:	697b      	ldr	r3, [r7, #20]
 810f5ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
            ((socket_ptr -> nx_tcp_socket_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence_acked) ||
 810f5d0:	429a      	cmp	r2, r3
 810f5d2:	d211      	bcs.n	810f5f8 <_nx_tcp_fast_periodic_processing+0x64>
        {

            /* Determine if the ACK has expired.  */
            if (socket_ptr -> nx_tcp_socket_delayed_ack_timeout <= timer_rate)
 810f5d4:	697b      	ldr	r3, [r7, #20]
 810f5d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810f5d8:	68fa      	ldr	r2, [r7, #12]
 810f5da:	429a      	cmp	r2, r3
 810f5dc:	d306      	bcc.n	810f5ec <_nx_tcp_fast_periodic_processing+0x58>
            {

                /* Send the delayed ACK, which also resets the ACK timeout.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 810f5de:	697b      	ldr	r3, [r7, #20]
 810f5e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810f5e2:	4619      	mov	r1, r3
 810f5e4:	6978      	ldr	r0, [r7, #20]
 810f5e6:	f000 fdd3 	bl	8110190 <_nx_tcp_packet_send_ack>
 810f5ea:	e005      	b.n	810f5f8 <_nx_tcp_fast_periodic_processing+0x64>
            }
            else
            {

                /* No, it hasn't expired yet.  Just decrement it for now.  */
                socket_ptr -> nx_tcp_socket_delayed_ack_timeout -= timer_rate;
 810f5ec:	697b      	ldr	r3, [r7, #20]
 810f5ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810f5f0:	68fb      	ldr	r3, [r7, #12]
 810f5f2:	1ad2      	subs	r2, r2, r3
 810f5f4:	697b      	ldr	r3, [r7, #20]
 810f5f6:	649a      	str	r2, [r3, #72]	@ 0x48
            }
        }

        /* Determine if a timeout is active.  */
        if (socket_ptr -> nx_tcp_socket_timeout)
 810f5f8:	697b      	ldr	r3, [r7, #20]
 810f5fa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 810f5fe:	2b00      	cmp	r3, #0
 810f600:	f000 80a4 	beq.w	810f74c <_nx_tcp_fast_periodic_processing+0x1b8>
        {

            /* Yes, a timeout is active.  Determine if it has expired.  */
            if (socket_ptr -> nx_tcp_socket_timeout > timer_rate)
 810f604:	697b      	ldr	r3, [r7, #20]
 810f606:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 810f60a:	68fa      	ldr	r2, [r7, #12]
 810f60c:	429a      	cmp	r2, r3
 810f60e:	d208      	bcs.n	810f622 <_nx_tcp_fast_periodic_processing+0x8e>
            {

                /* No, it hasn't expired yet.  Just decrement the timeout value.  */
                socket_ptr -> nx_tcp_socket_timeout -= timer_rate;
 810f610:	697b      	ldr	r3, [r7, #20]
 810f612:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 810f616:	68fb      	ldr	r3, [r7, #12]
 810f618:	1ad2      	subs	r2, r2, r3
 810f61a:	697b      	ldr	r3, [r7, #20]
 810f61c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 810f620:	e094      	b.n	810f74c <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            else if (((socket_ptr -> nx_tcp_socket_timeout_retries >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 810f622:	697b      	ldr	r3, [r7, #20]
 810f624:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 810f628:	697b      	ldr	r3, [r7, #20]
 810f62a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810f62e:	429a      	cmp	r2, r3
 810f630:	d304      	bcc.n	810f63c <_nx_tcp_fast_periodic_processing+0xa8>
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)) ||
 810f632:	697b      	ldr	r3, [r7, #20]
 810f634:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
            else if (((socket_ptr -> nx_tcp_socket_timeout_retries >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 810f638:	2b00      	cmp	r3, #0
 810f63a:	d00c      	beq.n	810f656 <_nx_tcp_fast_periodic_processing+0xc2>
                     ((socket_ptr -> nx_tcp_socket_zero_window_probe_failure >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 810f63c:	697b      	ldr	r3, [r7, #20]
 810f63e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 810f642:	697b      	ldr	r3, [r7, #20]
 810f644:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)) ||
 810f648:	429a      	cmp	r2, r3
 810f64a:	d308      	bcc.n	810f65e <_nx_tcp_fast_periodic_processing+0xca>
                      (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_TRUE))
 810f64c:	697b      	ldr	r3, [r7, #20]
 810f64e:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
                     ((socket_ptr -> nx_tcp_socket_zero_window_probe_failure >= socket_ptr -> nx_tcp_socket_timeout_max_retries) &&
 810f652:	2b01      	cmp	r3, #1
 810f654:	d103      	bne.n	810f65e <_nx_tcp_fast_periodic_processing+0xca>
            {

                /* Number of retries has been exceeded.  */

                /* Close the socket via a connection reset.  */
                _nx_tcp_socket_connection_reset(socket_ptr);
 810f656:	6978      	ldr	r0, [r7, #20]
 810f658:	f001 f8b1 	bl	81107be <_nx_tcp_socket_connection_reset>
 810f65c:	e076      	b.n	810f74c <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            /* YUXIN MODIFIED HERE */
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) ||
 810f65e:	697b      	ldr	r3, [r7, #20]
 810f660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810f662:	2b03      	cmp	r3, #3
 810f664:	d003      	beq.n	810f66e <_nx_tcp_fast_periodic_processing+0xda>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED))
 810f666:	697b      	ldr	r3, [r7, #20]
 810f668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT) ||
 810f66a:	2b04      	cmp	r3, #4
 810f66c:	d11d      	bne.n	810f6aa <_nx_tcp_fast_periodic_processing+0x116>
            {

                /* Yes, the timeout on the SYN message has expired.  */

                /* Increment the retry counter.  */
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 810f66e:	697b      	ldr	r3, [r7, #20]
 810f670:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 810f674:	1c5a      	adds	r2, r3, #1
 810f676:	697b      	ldr	r3, [r7, #20]
 810f678:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

                /* Setup the next timeout.  */
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 810f67c:	697b      	ldr	r3, [r7, #20]
 810f67e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 810f682:	697b      	ldr	r3, [r7, #20]
 810f684:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 810f688:	6979      	ldr	r1, [r7, #20]
 810f68a:	f8d1 10dc 	ldr.w	r1, [r1, #220]	@ 0xdc
 810f68e:	fb01 f303 	mul.w	r3, r1, r3
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 810f692:	409a      	lsls	r2, r3
 810f694:	697b      	ldr	r3, [r7, #20]
 810f696:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

                /* Send the initial SYN message again.  Adjust the sequence number before and
                   after to ensure the same sequence as the initial SYN.  */
                _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 810f69a:	697b      	ldr	r3, [r7, #20]
 810f69c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810f69e:	3b01      	subs	r3, #1
 810f6a0:	4619      	mov	r1, r3
 810f6a2:	6978      	ldr	r0, [r7, #20]
 810f6a4:	f000 ff04 	bl	81104b0 <_nx_tcp_packet_send_syn>
 810f6a8:	e050      	b.n	810f74c <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            /* Has the TCP timeout for transmit packet or probing zero window expired?  */
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_head ||
 810f6aa:	697b      	ldr	r3, [r7, #20]
 810f6ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 810f6b0:	2b00      	cmp	r3, #0
 810f6b2:	d107      	bne.n	810f6c4 <_nx_tcp_fast_periodic_processing+0x130>
                     ((socket_ptr -> nx_tcp_socket_tx_window_advertised == 0) &&
 810f6b4:	697b      	ldr	r3, [r7, #20]
 810f6b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_head ||
 810f6b8:	2b00      	cmp	r3, #0
 810f6ba:	d116      	bne.n	810f6ea <_nx_tcp_fast_periodic_processing+0x156>
                      (socket_ptr -> nx_tcp_socket_state <= NX_TCP_CLOSE_WAIT)))
 810f6bc:	697b      	ldr	r3, [r7, #20]
 810f6be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                     ((socket_ptr -> nx_tcp_socket_tx_window_advertised == 0) &&
 810f6c0:	2b06      	cmp	r3, #6
 810f6c2:	d812      	bhi.n	810f6ea <_nx_tcp_fast_periodic_processing+0x156>
            {

                /* Update the transmit sequence that entered fast transmit. */
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 810f6c4:	697b      	ldr	r3, [r7, #20]
 810f6c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810f6c8:	1e5a      	subs	r2, r3, #1
 810f6ca:	697b      	ldr	r3, [r7, #20]
 810f6cc:	661a      	str	r2, [r3, #96]	@ 0x60

                /* Retransmit the packet. */
                _nx_tcp_socket_retransmit(ip_ptr, socket_ptr, NX_FALSE);
 810f6ce:	2200      	movs	r2, #0
 810f6d0:	6979      	ldr	r1, [r7, #20]
 810f6d2:	6878      	ldr	r0, [r7, #4]
 810f6d4:	f001 fa60 	bl	8110b98 <_nx_tcp_socket_retransmit>

                /* Exit fast recovery procedure. */
                socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 810f6d8:	697b      	ldr	r3, [r7, #20]
 810f6da:	2200      	movs	r2, #0
 810f6dc:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 810f6e0:	697b      	ldr	r3, [r7, #20]
 810f6e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810f6e4:	697b      	ldr	r3, [r7, #20]
 810f6e6:	659a      	str	r2, [r3, #88]	@ 0x58
 810f6e8:	e030      	b.n	810f74c <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 810f6ea:	697b      	ldr	r3, [r7, #20]
 810f6ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810f6ee:	2b07      	cmp	r3, #7
 810f6f0:	d007      	beq.n	810f702 <_nx_tcp_fast_periodic_processing+0x16e>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 810f6f2:	697b      	ldr	r3, [r7, #20]
 810f6f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            else if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 810f6f6:	2b09      	cmp	r3, #9
 810f6f8:	d003      	beq.n	810f702 <_nx_tcp_fast_periodic_processing+0x16e>
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_LAST_ACK))
 810f6fa:	697b      	ldr	r3, [r7, #20]
 810f6fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                     (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 810f6fe:	2b0b      	cmp	r3, #11
 810f700:	d11d      	bne.n	810f73e <_nx_tcp_fast_periodic_processing+0x1aa>

                /* We have a timeout condition on sending the FIN... so it needs to be
                   retried.  */

                /* Increment the retry counter.  */
                socket_ptr -> nx_tcp_socket_timeout_retries++;
 810f702:	697b      	ldr	r3, [r7, #20]
 810f704:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 810f708:	1c5a      	adds	r2, r3, #1
 810f70a:	697b      	ldr	r3, [r7, #20]
 810f70c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

                /* Setup the next timeout.  */
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 810f710:	697b      	ldr	r3, [r7, #20]
 810f712:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
                    (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 810f716:	697b      	ldr	r3, [r7, #20]
 810f718:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 810f71c:	6979      	ldr	r1, [r7, #20]
 810f71e:	f8d1 10dc 	ldr.w	r1, [r1, #220]	@ 0xdc
 810f722:	fb01 f303 	mul.w	r3, r1, r3
                socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 810f726:	409a      	lsls	r2, r3
 810f728:	697b      	ldr	r3, [r7, #20]
 810f72a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

                /* Send another FIN packet.  */
                _nx_tcp_packet_send_fin(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 810f72e:	697b      	ldr	r3, [r7, #20]
 810f730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810f732:	3b01      	subs	r3, #1
 810f734:	4619      	mov	r1, r3
 810f736:	6978      	ldr	r0, [r7, #20]
 810f738:	f000 fe4e 	bl	81103d8 <_nx_tcp_packet_send_fin>
 810f73c:	e006      	b.n	810f74c <_nx_tcp_fast_periodic_processing+0x1b8>
            }
            else if (socket_ptr -> nx_tcp_socket_state == NX_TCP_TIMED_WAIT)
 810f73e:	697b      	ldr	r3, [r7, #20]
 810f740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810f742:	2b0a      	cmp	r3, #10
 810f744:	d102      	bne.n	810f74c <_nx_tcp_fast_periodic_processing+0x1b8>
            {

                /* Clean the transmission control block.  */
                _nx_tcp_socket_block_cleanup(socket_ptr);
 810f746:	6978      	ldr	r0, [r7, #20]
 810f748:	f001 f80c 	bl	8110764 <_nx_tcp_socket_block_cleanup>
            }
        }

        /* Move to the next TCP socket.  */
        socket_ptr =  socket_ptr -> nx_tcp_socket_created_next;
 810f74c:	697b      	ldr	r3, [r7, #20]
 810f74e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 810f752:	617b      	str	r3, [r7, #20]
    while (sockets--)
 810f754:	693b      	ldr	r3, [r7, #16]
 810f756:	1e5a      	subs	r2, r3, #1
 810f758:	613a      	str	r2, [r7, #16]
 810f75a:	2b00      	cmp	r3, #0
 810f75c:	f47f af2a 	bne.w	810f5b4 <_nx_tcp_fast_periodic_processing+0x20>
    }
}
 810f760:	bf00      	nop
 810f762:	bf00      	nop
 810f764:	3718      	adds	r7, #24
 810f766:	46bd      	mov	sp, r7
 810f768:	bd80      	pop	{r7, pc}
 810f76a:	bf00      	nop
 810f76c:	200580e0 	.word	0x200580e0

0810f770 <_nx_tcp_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_initialize(VOID)
{
 810f770:	b480      	push	{r7}
 810f772:	af00      	add	r7, sp, #0
}
 810f774:	bf00      	nop
 810f776:	46bd      	mov	sp, r7
 810f778:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f77c:	4770      	bx	lr

0810f77e <_nx_tcp_mss_option_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_mss_option_get(UCHAR *option_ptr, ULONG option_area_size, ULONG *mss)
{
 810f77e:	b480      	push	{r7}
 810f780:	b087      	sub	sp, #28
 810f782:	af00      	add	r7, sp, #0
 810f784:	60f8      	str	r0, [r7, #12]
 810f786:	60b9      	str	r1, [r7, #8]
 810f788:	607a      	str	r2, [r7, #4]

ULONG option_length;

    /* Initialize the value.  */
    *mss = 0;
 810f78a:	687b      	ldr	r3, [r7, #4]
 810f78c:	2200      	movs	r2, #0
 810f78e:	601a      	str	r2, [r3, #0]

    /* Loop through the option area looking for the MSS.  */
    while (option_area_size >= 4)
 810f790:	e043      	b.n	810f81a <_nx_tcp_mss_option_get+0x9c>
    {

        /* Is the current character the MSS type?  */
        if (*option_ptr == NX_TCP_MSS_KIND)
 810f792:	68fb      	ldr	r3, [r7, #12]
 810f794:	781b      	ldrb	r3, [r3, #0]
 810f796:	2b02      	cmp	r3, #2
 810f798:	d11a      	bne.n	810f7d0 <_nx_tcp_mss_option_get+0x52>
        {

            /* Yes, we found it!  */

            /* Move the pointer forward by one.  */
            option_ptr++;
 810f79a:	68fb      	ldr	r3, [r7, #12]
 810f79c:	3301      	adds	r3, #1
 810f79e:	60fb      	str	r3, [r7, #12]

            /* Check the option length, if option length is not equal to 4, return NX_FALSE.  */
            if (*option_ptr++ != 4)
 810f7a0:	68fb      	ldr	r3, [r7, #12]
 810f7a2:	1c5a      	adds	r2, r3, #1
 810f7a4:	60fa      	str	r2, [r7, #12]
 810f7a6:	781b      	ldrb	r3, [r3, #0]
 810f7a8:	2b04      	cmp	r3, #4
 810f7aa:	d001      	beq.n	810f7b0 <_nx_tcp_mss_option_get+0x32>
            {
                return(NX_FALSE);
 810f7ac:	2300      	movs	r3, #0
 810f7ae:	e03a      	b.n	810f826 <_nx_tcp_mss_option_get+0xa8>
            }

            /* Build the mss size.  */
            *mss = (ULONG)*option_ptr++;
 810f7b0:	68fb      	ldr	r3, [r7, #12]
 810f7b2:	1c5a      	adds	r2, r3, #1
 810f7b4:	60fa      	str	r2, [r7, #12]
 810f7b6:	781b      	ldrb	r3, [r3, #0]
 810f7b8:	461a      	mov	r2, r3
 810f7ba:	687b      	ldr	r3, [r7, #4]
 810f7bc:	601a      	str	r2, [r3, #0]

            /* Get the LSB of the MSS.  */
            *mss = (*mss << 8) | (ULONG)*option_ptr;
 810f7be:	687b      	ldr	r3, [r7, #4]
 810f7c0:	681b      	ldr	r3, [r3, #0]
 810f7c2:	021b      	lsls	r3, r3, #8
 810f7c4:	68fa      	ldr	r2, [r7, #12]
 810f7c6:	7812      	ldrb	r2, [r2, #0]
 810f7c8:	431a      	orrs	r2, r3
 810f7ca:	687b      	ldr	r3, [r7, #4]
 810f7cc:	601a      	str	r2, [r3, #0]

            /* Finished, get out of the loop!  */
            break;
 810f7ce:	e029      	b.n	810f824 <_nx_tcp_mss_option_get+0xa6>
        }

        /* Otherwise, process relative to the option type.  */

        /* Check for end of list.  */
        if (*option_ptr == NX_TCP_EOL_KIND)
 810f7d0:	68fb      	ldr	r3, [r7, #12]
 810f7d2:	781b      	ldrb	r3, [r3, #0]
 810f7d4:	2b00      	cmp	r3, #0
 810f7d6:	d024      	beq.n	810f822 <_nx_tcp_mss_option_get+0xa4>
            /* Yes, end of list, get out!  */
            break;
        }

        /* Check for NOP.  */
        if (*option_ptr++ == NX_TCP_NOP_KIND)
 810f7d8:	68fb      	ldr	r3, [r7, #12]
 810f7da:	1c5a      	adds	r2, r3, #1
 810f7dc:	60fa      	str	r2, [r7, #12]
 810f7de:	781b      	ldrb	r3, [r3, #0]
 810f7e0:	2b01      	cmp	r3, #1
 810f7e2:	d103      	bne.n	810f7ec <_nx_tcp_mss_option_get+0x6e>
        {

            /* One character option!  */
            option_area_size--;
 810f7e4:	68bb      	ldr	r3, [r7, #8]
 810f7e6:	3b01      	subs	r3, #1
 810f7e8:	60bb      	str	r3, [r7, #8]
 810f7ea:	e016      	b.n	810f81a <_nx_tcp_mss_option_get+0x9c>
        }
        else
        {

            /* Derive the option length.  */
            option_length =  ((ULONG)*option_ptr);
 810f7ec:	68fb      	ldr	r3, [r7, #12]
 810f7ee:	781b      	ldrb	r3, [r3, #0]
 810f7f0:	617b      	str	r3, [r7, #20]

            /* Return when option length is invalid. */
            if (option_length == 0)
 810f7f2:	697b      	ldr	r3, [r7, #20]
 810f7f4:	2b00      	cmp	r3, #0
 810f7f6:	d101      	bne.n	810f7fc <_nx_tcp_mss_option_get+0x7e>
            {
                return(NX_FALSE);
 810f7f8:	2300      	movs	r3, #0
 810f7fa:	e014      	b.n	810f826 <_nx_tcp_mss_option_get+0xa8>
            }

            /* Move the option pointer forward.  */
            option_ptr =  option_ptr + (option_length - 1);
 810f7fc:	697b      	ldr	r3, [r7, #20]
 810f7fe:	3b01      	subs	r3, #1
 810f800:	68fa      	ldr	r2, [r7, #12]
 810f802:	4413      	add	r3, r2
 810f804:	60fb      	str	r3, [r7, #12]

            /* Determine if this is greater than the option area size.  */
            if (option_length > option_area_size)
 810f806:	697a      	ldr	r2, [r7, #20]
 810f808:	68bb      	ldr	r3, [r7, #8]
 810f80a:	429a      	cmp	r2, r3
 810f80c:	d901      	bls.n	810f812 <_nx_tcp_mss_option_get+0x94>
            {
                return(NX_FALSE);
 810f80e:	2300      	movs	r3, #0
 810f810:	e009      	b.n	810f826 <_nx_tcp_mss_option_get+0xa8>
            }
            else
            {
                option_area_size =  option_area_size - option_length;
 810f812:	68ba      	ldr	r2, [r7, #8]
 810f814:	697b      	ldr	r3, [r7, #20]
 810f816:	1ad3      	subs	r3, r2, r3
 810f818:	60bb      	str	r3, [r7, #8]
    while (option_area_size >= 4)
 810f81a:	68bb      	ldr	r3, [r7, #8]
 810f81c:	2b03      	cmp	r3, #3
 810f81e:	d8b8      	bhi.n	810f792 <_nx_tcp_mss_option_get+0x14>
 810f820:	e000      	b.n	810f824 <_nx_tcp_mss_option_get+0xa6>
            break;
 810f822:	bf00      	nop
            }
        }
    }

    /* Return.  */
    return(NX_TRUE);
 810f824:	2301      	movs	r3, #1
}
 810f826:	4618      	mov	r0, r3
 810f828:	371c      	adds	r7, #28
 810f82a:	46bd      	mov	sp, r7
 810f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f830:	4770      	bx	lr

0810f832 <_nx_tcp_no_connection_reset>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_no_connection_reset(NX_IP *ip_ptr, NX_PACKET *packet_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 810f832:	b590      	push	{r4, r7, lr}
 810f834:	b0d3      	sub	sp, #332	@ 0x14c
 810f836:	af00      	add	r7, sp, #0
 810f838:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f83c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 810f840:	6018      	str	r0, [r3, #0]
 810f842:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f846:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 810f84a:	6019      	str	r1, [r3, #0]
 810f84c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f850:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 810f854:	601a      	str	r2, [r3, #0]
ULONG         data_offset = 0;
#endif /* NX_IPSEC_ENABLE */


    /* Clear the fake socket first.  */
    memset((void *)&fake_socket, 0, sizeof(NX_TCP_SOCKET));
 810f856:	f107 0314 	add.w	r3, r7, #20
 810f85a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 810f85e:	2100      	movs	r1, #0
 810f860:	4618      	mov	r0, r3
 810f862:	f007 fc01 	bl	8117068 <memset>

    /* Build a fake socket so we can send a reset TCP requests that are not valid.  */
    fake_socket.nx_tcp_socket_ip_ptr = ip_ptr;
 810f866:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f86a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 810f86e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 810f872:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 810f876:	6812      	ldr	r2, [r2, #0]
 810f878:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

    /* Set the connection IP address.  */
#ifndef NX_DISABLE_IPV4
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 810f87c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f880:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 810f884:	681b      	ldr	r3, [r3, #0]
 810f886:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810f88a:	2b04      	cmp	r3, #4
 810f88c:	d13b      	bne.n	810f906 <_nx_tcp_no_connection_reset+0xd4>
    {
    NX_IPV4_HEADER *ip_header_ptr;

        /* Set the IP header.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 810f88e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f892:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 810f896:	681b      	ldr	r3, [r3, #0]
 810f898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810f89a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

        /* Set the connection ip.  */
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_version = NX_IP_VERSION_V4;
 810f89e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f8a2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 810f8a6:	2204      	movs	r2, #4
 810f8a8:	615a      	str	r2, [r3, #20]
        fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4 = ip_header_ptr -> nx_ip_header_source_ip;
 810f8aa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 810f8ae:	68da      	ldr	r2, [r3, #12]
 810f8b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f8b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 810f8b8:	619a      	str	r2, [r3, #24]

        /* Assume the interface that receives the incoming packet is the best interface
           for sending responses. */
        fake_socket.nx_tcp_socket_connect_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 810f8ba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f8be:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 810f8c2:	681b      	ldr	r3, [r3, #0]
 810f8c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810f8c6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f8ca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 810f8ce:	629a      	str	r2, [r3, #40]	@ 0x28
        fake_socket.nx_tcp_socket_next_hop_address = NX_NULL;
 810f8d0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f8d4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 810f8d8:	2200      	movs	r2, #0
 810f8da:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Find the next hop info. */
        _nx_ip_route_find(ip_ptr, fake_socket.nx_tcp_socket_connect_ip.nxd_ip_address.v4, &fake_socket.nx_tcp_socket_connect_interface,
 810f8dc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f8e0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 810f8e4:	6999      	ldr	r1, [r3, #24]
 810f8e6:	f107 0314 	add.w	r3, r7, #20
 810f8ea:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 810f8ee:	f107 0314 	add.w	r3, r7, #20
 810f8f2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 810f8f6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f8fa:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 810f8fe:	4623      	mov	r3, r4
 810f900:	6800      	ldr	r0, [r0, #0]
 810f902:	f7fd ff87 	bl	810d814 <_nx_ip_route_find>
#endif /*NX_IPSEC_ENABLE*/
    }
#endif /* FEATURE_NX_IPV6 */

    /* Set the source port and destination port.  */
    fake_socket.nx_tcp_socket_port  = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 810f906:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f90a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 810f90e:	681b      	ldr	r3, [r3, #0]
 810f910:	681b      	ldr	r3, [r3, #0]
 810f912:	b29a      	uxth	r2, r3
 810f914:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f918:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 810f91c:	60da      	str	r2, [r3, #12]
    fake_socket.nx_tcp_socket_connect_port = (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 810f91e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f922:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 810f926:	681b      	ldr	r3, [r3, #0]
 810f928:	681b      	ldr	r3, [r3, #0]
 810f92a:	0c1a      	lsrs	r2, r3, #16
 810f92c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f930:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 810f934:	61da      	str	r2, [r3, #28]

    /* Set the sequence number only if the incoming segment does not have the ACK flag, according to
       Section 3.4, "Reset Generation" on page 37, RFC793. */
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 810f936:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f93a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 810f93e:	681b      	ldr	r3, [r3, #0]
 810f940:	68db      	ldr	r3, [r3, #12]
 810f942:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810f946:	2b00      	cmp	r3, #0
 810f948:	d136      	bne.n	810f9b8 <_nx_tcp_no_connection_reset+0x186>
    {
        /* Get the header length.  */
        header_length = (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 810f94a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f94e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 810f952:	681b      	ldr	r3, [r3, #0]
 810f954:	68db      	ldr	r3, [r3, #12]
 810f956:	0f1b      	lsrs	r3, r3, #28
 810f958:	009b      	lsls	r3, r3, #2
 810f95a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

        /* Update sequence number to set the reset acknowledge number.  */
        tcp_header_ptr -> nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 810f95e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f962:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 810f966:	681b      	ldr	r3, [r3, #0]
 810f968:	685a      	ldr	r2, [r3, #4]
 810f96a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f96e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 810f972:	681b      	ldr	r3, [r3, #0]
 810f974:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 810f976:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 810f97a:	1acb      	subs	r3, r1, r3
 810f97c:	441a      	add	r2, r3
 810f97e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f982:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 810f986:	681b      	ldr	r3, [r3, #0]
 810f988:	605a      	str	r2, [r3, #4]

        /* Check the SYN and FIN bits.  */
        if (tcp_header_ptr -> nx_tcp_header_word_3 & (NX_TCP_SYN_BIT | NX_TCP_FIN_BIT))
 810f98a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f98e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 810f992:	681b      	ldr	r3, [r3, #0]
 810f994:	68db      	ldr	r3, [r3, #12]
 810f996:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810f99a:	2b00      	cmp	r3, #0
 810f99c:	d00c      	beq.n	810f9b8 <_nx_tcp_no_connection_reset+0x186>
        {

            /* Update sequence number to set the reset acknowledge number.  */
            tcp_header_ptr -> nx_tcp_sequence_number++;
 810f99e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f9a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 810f9a6:	681b      	ldr	r3, [r3, #0]
 810f9a8:	685b      	ldr	r3, [r3, #4]
 810f9aa:	1c5a      	adds	r2, r3, #1
 810f9ac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f9b0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 810f9b4:	681b      	ldr	r3, [r3, #0]
 810f9b6:	605a      	str	r2, [r3, #4]
            fake_socket.nx_tcp_socket_egress_sa_data_offset = 0;
        }
    }
#endif

    fake_socket.nx_tcp_socket_time_to_live = (UINT)NX_IP_TIME_TO_LIVE;
 810f9b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f9bc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 810f9c0:	2280      	movs	r2, #128	@ 0x80
 810f9c2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

    /* Send a RST to indicate the connection was not available.  */
    _nx_tcp_packet_send_rst(&fake_socket, tcp_header_ptr);
 810f9c6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 810f9ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 810f9ce:	f107 0214 	add.w	r2, r7, #20
 810f9d2:	6819      	ldr	r1, [r3, #0]
 810f9d4:	4610      	mov	r0, r2
 810f9d6:	f000 fd37 	bl	8110448 <_nx_tcp_packet_send_rst>
}
 810f9da:	bf00      	nop
 810f9dc:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 810f9e0:	46bd      	mov	sp, r7
 810f9e2:	bd90      	pop	{r4, r7, pc}

0810f9e4 <_nx_tcp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 810f9e4:	b580      	push	{r7, lr}
 810f9e6:	b09c      	sub	sp, #112	@ 0x70
 810f9e8:	af02      	add	r7, sp, #8
 810f9ea:	6078      	str	r0, [r7, #4]
 810f9ec:	6039      	str	r1, [r7, #0]

UINT                         index;
UINT                         port;
ULONG                       *source_ip = NX_NULL;
 810f9ee:	2300      	movs	r3, #0
 810f9f0:	667b      	str	r3, [r7, #100]	@ 0x64
ULONG                       *dest_ip = NX_NULL;
 810f9f2:	2300      	movs	r3, #0
 810f9f4:	663b      	str	r3, [r7, #96]	@ 0x60
NX_TCP_SOCKET               *socket_ptr;
NX_TCP_HEADER               *tcp_header_ptr;
struct NX_TCP_LISTEN_STRUCT *listen_ptr;
VOID                         (*listen_callback)(NX_TCP_SOCKET *socket_ptr, UINT port);
ULONG                        option_words;
ULONG                        mss = 0;
 810f9f6:	2300      	movs	r3, #0
 810f9f8:	60fb      	str	r3, [r7, #12]
ULONG                        checksum;
NX_INTERFACE                *interface_ptr = NX_NULL;
 810f9fa:	2300      	movs	r3, #0
 810f9fc:	657b      	str	r3, [r7, #84]	@ 0x54
NX_PACKET                   *queued_ptr;
NX_PACKET                   *queued_prev_ptr;
ULONG                       *queued_source_ip;
UINT                         queued_source_port;
UINT                         is_a_RST_request;
UINT                         is_valid_option_flag = NX_TRUE;
 810f9fe:	2301      	movs	r3, #1
 810fa00:	643b      	str	r3, [r7, #64]	@ 0x40
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Pickup the source IP address.  */
#ifndef NX_DISABLE_IPV4
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 810fa02:	683b      	ldr	r3, [r7, #0]
 810fa04:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810fa08:	2b04      	cmp	r3, #4
 810fa0a:	d10e      	bne.n	810fa2a <_nx_tcp_packet_process+0x46>
    {

    NX_IPV4_HEADER *ip_header_ptr;

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 810fa0c:	683b      	ldr	r3, [r7, #0]
 810fa0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810fa10:	63bb      	str	r3, [r7, #56]	@ 0x38

        source_ip = &ip_header_ptr -> nx_ip_header_source_ip;
 810fa12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810fa14:	330c      	adds	r3, #12
 810fa16:	667b      	str	r3, [r7, #100]	@ 0x64

        dest_ip = &ip_header_ptr -> nx_ip_header_destination_ip;
 810fa18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810fa1a:	3310      	adds	r3, #16
 810fa1c:	663b      	str	r3, [r7, #96]	@ 0x60

        mss = 536;
 810fa1e:	f44f 7306 	mov.w	r3, #536	@ 0x218
 810fa22:	60fb      	str	r3, [r7, #12]

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 810fa24:	683b      	ldr	r3, [r7, #0]
 810fa26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810fa28:	657b      	str	r3, [r7, #84]	@ 0x54
#if defined(NX_DISABLE_TCP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
#endif /* defined(NX_DISABLE_TCP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
                                           (UINT)packet_ptr -> nx_packet_length,
 810fa2a:	683b      	ldr	r3, [r7, #0]
 810fa2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 810fa2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810fa30:	9300      	str	r3, [sp, #0]
 810fa32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810fa34:	2106      	movs	r1, #6
 810fa36:	6838      	ldr	r0, [r7, #0]
 810fa38:	f7fc ff7f 	bl	810c93a <_nx_ip_checksum_compute>
 810fa3c:	4603      	mov	r3, r0
 810fa3e:	637b      	str	r3, [r7, #52]	@ 0x34
                                           source_ip, dest_ip);

        checksum = NX_LOWER_16_MASK & ~checksum;
 810fa40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810fa42:	43db      	mvns	r3, r3
 810fa44:	b29b      	uxth	r3, r3
 810fa46:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Calculate the checksum.  */
        if (checksum != 0)
 810fa48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810fa4a:	2b00      	cmp	r3, #0
 810fa4c:	d011      	beq.n	810fa72 <_nx_tcp_packet_process+0x8e>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the TCP invalid packet error count.  */
            ip_ptr -> nx_ip_tcp_invalid_packets++;
 810fa4e:	687b      	ldr	r3, [r7, #4]
 810fa50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810fa54:	1c5a      	adds	r2, r3, #1
 810fa56:	687b      	ldr	r3, [r7, #4]
 810fa58:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

            /* Increment the TCP packet checksum error count.  */
            ip_ptr -> nx_ip_tcp_checksum_errors++;
 810fa5c:	687b      	ldr	r3, [r7, #4]
 810fa5e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810fa62:	1c5a      	adds	r2, r3, #1
 810fa64:	687b      	ldr	r3, [r7, #4]
 810fa66:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
#endif

            /* Checksum error, just release the packet.  */
            _nx_packet_release(packet_ptr);
 810fa6a:	6838      	ldr	r0, [r7, #0]
 810fa6c:	f7ff f904 	bl	810ec78 <_nx_packet_release>
            return;
 810fa70:	e31c      	b.n	81100ac <_nx_tcp_packet_process+0x6c8>
        }
    }

    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 810fa72:	683b      	ldr	r3, [r7, #0]
 810fa74:	689b      	ldr	r3, [r3, #8]
 810fa76:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the TCP header.  */
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 810fa78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fa7a:	681b      	ldr	r3, [r3, #0]
 810fa7c:	ba1a      	rev	r2, r3
 810fa7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fa80:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 810fa82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fa84:	685b      	ldr	r3, [r3, #4]
 810fa86:	ba1a      	rev	r2, r3
 810fa88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fa8a:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 810fa8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fa8e:	689b      	ldr	r3, [r3, #8]
 810fa90:	ba1a      	rev	r2, r3
 810fa92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fa94:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 810fa96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fa98:	68db      	ldr	r3, [r3, #12]
 810fa9a:	ba1a      	rev	r2, r3
 810fa9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fa9e:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 810faa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810faa2:	691b      	ldr	r3, [r3, #16]
 810faa4:	ba1a      	rev	r2, r3
 810faa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810faa8:	611a      	str	r2, [r3, #16]

    /* Determine if there are any option words...  Note there are always 5 words in a TCP header.  */
    option_words =  (tcp_header_ptr -> nx_tcp_header_word_3 >> 28) - 5;
 810faaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810faac:	68db      	ldr	r3, [r3, #12]
 810faae:	0f1b      	lsrs	r3, r3, #28
 810fab0:	3b05      	subs	r3, #5
 810fab2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Check for valid packet length.  */
    if (((INT)option_words < 0) || (packet_ptr -> nx_packet_length < (sizeof(NX_TCP_HEADER) + (option_words << 2))))
 810fab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fab6:	2b00      	cmp	r3, #0
 810fab8:	db06      	blt.n	810fac8 <_nx_tcp_packet_process+0xe4>
 810faba:	683b      	ldr	r3, [r7, #0]
 810fabc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810fabe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fac0:	009b      	lsls	r3, r3, #2
 810fac2:	3314      	adds	r3, #20
 810fac4:	429a      	cmp	r2, r3
 810fac6:	d20a      	bcs.n	810fade <_nx_tcp_packet_process+0xfa>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 810fac8:	687b      	ldr	r3, [r7, #4]
 810faca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810face:	1c5a      	adds	r2, r3, #1
 810fad0:	687b      	ldr	r3, [r7, #4]
 810fad2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 810fad6:	6838      	ldr	r0, [r7, #0]
 810fad8:	f7ff f8ce 	bl	810ec78 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 810fadc:	e2e6      	b.n	81100ac <_nx_tcp_packet_process+0x6c8>
    }
#endif

    if (option_words)
 810fade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fae0:	2b00      	cmp	r3, #0
 810fae2:	d01c      	beq.n	810fb1e <_nx_tcp_packet_process+0x13a>
    {

        /* Yes, there are one or more option words.  */

        /* Derive the Maximum Segment Size (MSS) in the option words.  */
        status = _nx_tcp_mss_option_get((packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER)), option_words * (ULONG)sizeof(ULONG), &mss);
 810fae4:	683b      	ldr	r3, [r7, #0]
 810fae6:	689b      	ldr	r3, [r3, #8]
 810fae8:	f103 0014 	add.w	r0, r3, #20
 810faec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810faee:	009b      	lsls	r3, r3, #2
 810faf0:	f107 020c 	add.w	r2, r7, #12
 810faf4:	4619      	mov	r1, r3
 810faf6:	f7ff fe42 	bl	810f77e <_nx_tcp_mss_option_get>
 810fafa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Check the status. if status is NX_FALSE, means Option Length is invalid.  */
        if (status == NX_FALSE)
 810fafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fafe:	2b00      	cmp	r3, #0
 810fb00:	d102      	bne.n	810fb08 <_nx_tcp_packet_process+0x124>
        {

            /* The option is invalid.  */
            is_valid_option_flag = NX_FALSE;
 810fb02:	2300      	movs	r3, #0
 810fb04:	643b      	str	r3, [r7, #64]	@ 0x40
 810fb06:	e00a      	b.n	810fb1e <_nx_tcp_packet_process+0x13a>
        else
        {

            /* Set the default MSS if the MSS value was not found.  */
            /*lint -e{644} suppress variable might not be initialized, since "mss" was initialized in _nx_tcp_mss_option_get. */
            if (mss == 0)
 810fb08:	68fb      	ldr	r3, [r7, #12]
 810fb0a:	2b00      	cmp	r3, #0
 810fb0c:	d107      	bne.n	810fb1e <_nx_tcp_packet_process+0x13a>
            {
#ifndef NX_DISABLE_IPV4
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 810fb0e:	683b      	ldr	r3, [r7, #0]
 810fb10:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810fb14:	2b04      	cmp	r3, #4
 810fb16:	d102      	bne.n	810fb1e <_nx_tcp_packet_process+0x13a>
                {
                    mss = 536;
 810fb18:	f44f 7306 	mov.w	r3, #536	@ 0x218
 810fb1c:	60fb      	str	r3, [r7, #12]
        }
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
    }

    /* Pickup the destination TCP port.  */
    port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 & NX_LOWER_16_MASK);
 810fb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fb20:	681b      	ldr	r3, [r3, #0]
 810fb22:	b29b      	uxth	r3, r3
 810fb24:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Pickup the source TCP port.  */
    source_port =  (UINT)(tcp_header_ptr -> nx_tcp_header_word_0 >> NX_SHIFT_BY_16);
 810fb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fb28:	681b      	ldr	r3, [r3, #0]
 810fb2a:	0c1b      	lsrs	r3, r3, #16
 810fb2c:	623b      	str	r3, [r7, #32]

    /* Calculate the hash index in the TCP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 810fb2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fb30:	0a1a      	lsrs	r2, r3, #8
 810fb32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fb34:	4413      	add	r3, r2
 810fb36:	f003 031f 	and.w	r3, r3, #31
 810fb3a:	61fb      	str	r3, [r7, #28]

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_tcp_port_table[index];
 810fb3c:	687b      	ldr	r3, [r7, #4]
 810fb3e:	69fa      	ldr	r2, [r7, #28]
 810fb40:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 810fb44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810fb48:	65fb      	str	r3, [r7, #92]	@ 0x5c

    /* Determine if there are any sockets bound on this port index.  */
    if (socket_ptr)
 810fb4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fb4c:	2b00      	cmp	r3, #0
 810fb4e:	d066      	beq.n	810fc1e <_nx_tcp_packet_process+0x23a>

        /*  Yes, loop to examine the list of bound ports on this index.  */
        do
        {

            find_a_match = 0;
 810fb50:	2300      	movs	r3, #0
 810fb52:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Determine if the port has been found.  */
            if ((socket_ptr -> nx_tcp_socket_port == port) &&
 810fb54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fb56:	68db      	ldr	r3, [r3, #12]
 810fb58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810fb5a:	429a      	cmp	r2, r3
 810fb5c:	d152      	bne.n	810fc04 <_nx_tcp_packet_process+0x220>
                (socket_ptr -> nx_tcp_socket_connect_port == source_port))
 810fb5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fb60:	69db      	ldr	r3, [r3, #28]
            if ((socket_ptr -> nx_tcp_socket_port == port) &&
 810fb62:	6a3a      	ldr	r2, [r7, #32]
 810fb64:	429a      	cmp	r2, r3
 810fb66:	d14d      	bne.n	810fc04 <_nx_tcp_packet_process+0x220>
            {

                /* Make sure they are the same IP protocol */
                if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == packet_ptr -> nx_packet_ip_version)
 810fb68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fb6a:	695b      	ldr	r3, [r3, #20]
 810fb6c:	683a      	ldr	r2, [r7, #0]
 810fb6e:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 810fb72:	4293      	cmp	r3, r2
 810fb74:	d10c      	bne.n	810fb90 <_nx_tcp_packet_process+0x1ac>
                {

#ifndef NX_DISABLE_IPV4
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 810fb76:	683b      	ldr	r3, [r7, #0]
 810fb78:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810fb7c:	2b04      	cmp	r3, #4
 810fb7e:	d107      	bne.n	810fb90 <_nx_tcp_packet_process+0x1ac>
                    {

                        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 == *source_ip)
 810fb80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fb82:	699a      	ldr	r2, [r3, #24]
 810fb84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810fb86:	681b      	ldr	r3, [r3, #0]
 810fb88:	429a      	cmp	r2, r3
 810fb8a:	d101      	bne.n	810fb90 <_nx_tcp_packet_process+0x1ac>
                        {
                            find_a_match = 1;
 810fb8c:	2301      	movs	r3, #1
 810fb8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                        }
                    }
#endif /* FEATURE_NX_IPV6 */
                }

                if (find_a_match)
 810fb90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810fb92:	2b00      	cmp	r3, #0
 810fb94:	d036      	beq.n	810fc04 <_nx_tcp_packet_process+0x220>
                    /* Determine if we need to update the tcp port head pointer.  This should
                       only be done if the found socket pointer is not the head pointer and
                       the mutex for this IP instance is available.  */

                    /* Move the port head pointer to this socket.  */
                    ip_ptr -> nx_ip_tcp_port_table[index] = socket_ptr;
 810fb96:	687b      	ldr	r3, [r7, #4]
 810fb98:	69fa      	ldr	r2, [r7, #28]
 810fb9a:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 810fb9e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 810fba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* If this packet contains SYN */
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 810fba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fba6:	68db      	ldr	r3, [r3, #12]
 810fba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810fbac:	2b00      	cmp	r3, #0
 810fbae:	d024      	beq.n	810fbfa <_nx_tcp_packet_process+0x216>
                    {

                        /* Record the MSS value if it is present and the   Otherwise use 536, as
                           outlined in RFC 1122 section 4.2.2.6. */
                        socket_ptr -> nx_tcp_socket_peer_mss = mss;
 810fbb0:	68fa      	ldr	r2, [r7, #12]
 810fbb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fbb4:	625a      	str	r2, [r3, #36]	@ 0x24

                        if ((mss > socket_ptr -> nx_tcp_socket_mss) && socket_ptr -> nx_tcp_socket_mss)
 810fbb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fbb8:	691a      	ldr	r2, [r3, #16]
 810fbba:	68fb      	ldr	r3, [r7, #12]
 810fbbc:	429a      	cmp	r2, r3
 810fbbe:	d208      	bcs.n	810fbd2 <_nx_tcp_packet_process+0x1ee>
 810fbc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fbc2:	691b      	ldr	r3, [r3, #16]
 810fbc4:	2b00      	cmp	r3, #0
 810fbc6:	d004      	beq.n	810fbd2 <_nx_tcp_packet_process+0x1ee>
                        {
                            socket_ptr -> nx_tcp_socket_connect_mss  = socket_ptr -> nx_tcp_socket_mss;
 810fbc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fbca:	691a      	ldr	r2, [r3, #16]
 810fbcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fbce:	621a      	str	r2, [r3, #32]
 810fbd0:	e00b      	b.n	810fbea <_nx_tcp_packet_process+0x206>
                        }
                        else if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) ||
 810fbd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fbd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810fbd6:	2b03      	cmp	r3, #3
 810fbd8:	d104      	bne.n	810fbe4 <_nx_tcp_packet_process+0x200>
                                 (socket_ptr -> nx_tcp_socket_connect_mss > mss))
 810fbda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fbdc:	6a1a      	ldr	r2, [r3, #32]
 810fbde:	68fb      	ldr	r3, [r7, #12]
                        else if ((socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_SENT) ||
 810fbe0:	429a      	cmp	r2, r3
 810fbe2:	d902      	bls.n	810fbea <_nx_tcp_packet_process+0x206>
                        {
                            socket_ptr -> nx_tcp_socket_connect_mss  = mss;
 810fbe4:	68fa      	ldr	r2, [r7, #12]
 810fbe6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fbe8:	621a      	str	r2, [r3, #32]
                        }

                        /* Compute the SMSS * SMSS value, so later TCP module doesn't need to redo the multiplication. */
                        socket_ptr -> nx_tcp_socket_connect_mss2 =
                            socket_ptr -> nx_tcp_socket_connect_mss * socket_ptr -> nx_tcp_socket_connect_mss;
 810fbea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fbec:	6a1b      	ldr	r3, [r3, #32]
 810fbee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 810fbf0:	6a12      	ldr	r2, [r2, #32]
 810fbf2:	fb03 f202 	mul.w	r2, r3, r2
                        socket_ptr -> nx_tcp_socket_connect_mss2 =
 810fbf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fbf8:	631a      	str	r2, [r3, #48]	@ 0x30
                        socket_ptr -> nx_tcp_snd_win_scale_value = rwin_scale;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
                    }

                    /* Process the packet within an existing TCP connection.  */
                    _nx_tcp_socket_packet_process(socket_ptr, packet_ptr);
 810fbfa:	6839      	ldr	r1, [r7, #0]
 810fbfc:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 810fbfe:	f000 fe33 	bl	8110868 <_nx_tcp_socket_packet_process>

                    /* Get out of the search loop and this function!  */
                    return;
 810fc02:	e253      	b.n	81100ac <_nx_tcp_packet_process+0x6c8>
                }
            }

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_tcp_socket_bound_next;
 810fc04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fc06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810fc0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        } while (socket_ptr != ip_ptr -> nx_ip_tcp_port_table[index]);
 810fc0c:	687b      	ldr	r3, [r7, #4]
 810fc0e:	69fa      	ldr	r2, [r7, #28]
 810fc10:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 810fc14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810fc18:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 810fc1a:	429a      	cmp	r2, r3
 810fc1c:	d198      	bne.n	810fb50 <_nx_tcp_packet_process+0x16c>
    }

    /* At this point, we know there is not an existing TCP connection.  */

    /* If this packet contains the valid option.  */
    if (is_valid_option_flag == NX_FALSE)
 810fc1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810fc20:	2b00      	cmp	r3, #0
 810fc22:	d10f      	bne.n	810fc44 <_nx_tcp_packet_process+0x260>
    {

        /* Send RST message.
           TCP MUST be prepared to handle an illegal option length (e.g., zero) without crashing;
           a suggested procedure is to reset the connection and log the reason, outlined in RFC 1122, Section 4.2.2.5, Page85. */
        _nx_tcp_no_connection_reset(ip_ptr, packet_ptr, tcp_header_ptr);
 810fc24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810fc26:	6839      	ldr	r1, [r7, #0]
 810fc28:	6878      	ldr	r0, [r7, #4]
 810fc2a:	f7ff fe02 	bl	810f832 <_nx_tcp_no_connection_reset>

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error count.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 810fc2e:	687b      	ldr	r3, [r7, #4]
 810fc30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810fc34:	1c5a      	adds	r2, r3, #1
 810fc36:	687b      	ldr	r3, [r7, #4]
 810fc38:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
#endif /* NX_DISABLE_TCP_INFO */

        /* Not a connection request, just release the packet.  */
        _nx_packet_release(packet_ptr);
 810fc3c:	6838      	ldr	r0, [r7, #0]
 810fc3e:	f7ff f81b 	bl	810ec78 <_nx_packet_release>

        return;
 810fc42:	e233      	b.n	81100ac <_nx_tcp_packet_process+0x6c8>
#endif

    /* Handle new connection requests without ACK bit in NX_TCP_SYN_RECEIVED state.
       NX_TCP_SYN_RECEIVED state is equal of LISTEN state of RFC.
       RFC793, Section3.9, Page65. */
    if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)) &&
 810fc44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fc46:	68db      	ldr	r3, [r3, #12]
 810fc48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810fc4c:	2b00      	cmp	r3, #0
 810fc4e:	f040 8209 	bne.w	8110064 <_nx_tcp_packet_process+0x680>
        (ip_ptr -> nx_ip_tcp_active_listen_requests))
 810fc52:	687b      	ldr	r3, [r7, #4]
 810fc54:	f8d3 3620 	ldr.w	r3, [r3, #1568]	@ 0x620
    if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)) &&
 810fc58:	2b00      	cmp	r3, #0
 810fc5a:	f000 8203 	beq.w	8110064 <_nx_tcp_packet_process+0x680>
    {

#ifndef NX_DISABLE_IPV4
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 810fc5e:	683b      	ldr	r3, [r7, #0]
 810fc60:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810fc64:	2b04      	cmp	r3, #4
 810fc66:	d145      	bne.n	810fcf4 <_nx_tcp_packet_process+0x310>
        {

            /* Check for LAND attack packet. This is an incoming packet with matching
               Source and Destination IP address, and matching source and destination port. */
            if ((*source_ip == *dest_ip) && (source_port == port))
 810fc68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810fc6a:	681a      	ldr	r2, [r3, #0]
 810fc6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810fc6e:	681b      	ldr	r3, [r3, #0]
 810fc70:	429a      	cmp	r2, r3
 810fc72:	d10e      	bne.n	810fc92 <_nx_tcp_packet_process+0x2ae>
 810fc74:	6a3a      	ldr	r2, [r7, #32]
 810fc76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fc78:	429a      	cmp	r2, r3
 810fc7a:	d10a      	bne.n	810fc92 <_nx_tcp_packet_process+0x2ae>

                /* Bogus packet. Drop it! */

#ifndef NX_DISABLE_TCP_INFO
                /* Increment the TCP invalid packet error count.  */
                ip_ptr -> nx_ip_tcp_invalid_packets++;
 810fc7c:	687b      	ldr	r3, [r7, #4]
 810fc7e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810fc82:	1c5a      	adds	r2, r3, #1
 810fc84:	687b      	ldr	r3, [r7, #4]
 810fc86:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
#endif /* NX_DISABLE_TCP_INFO */

                /* Release the packet we will not process any further.  */
                _nx_packet_release(packet_ptr);
 810fc8a:	6838      	ldr	r0, [r7, #0]
 810fc8c:	f7fe fff4 	bl	810ec78 <_nx_packet_release>
                return;
 810fc90:	e20c      	b.n	81100ac <_nx_tcp_packet_process+0x6c8>

            /* It shall not make connections if the source IP address
               is broadcast or multicast.   */
            if (
                /* Check for Multicast address */
                ((*source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 810fc92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810fc94:	681b      	ldr	r3, [r3, #0]
 810fc96:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
            if (
 810fc9a:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 810fc9e:	d01e      	beq.n	810fcde <_nx_tcp_packet_process+0x2fa>
                /* Check for subnet-directed broadcast */
                (((*source_ip & interface_ptr -> nx_interface_ip_network_mask) == interface_ptr -> nx_interface_ip_network) &&
 810fca0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810fca2:	681a      	ldr	r2, [r3, #0]
 810fca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810fca6:	699b      	ldr	r3, [r3, #24]
 810fca8:	401a      	ands	r2, r3
 810fcaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810fcac:	69db      	ldr	r3, [r3, #28]
                ((*source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 810fcae:	429a      	cmp	r2, r3
 810fcb0:	d10a      	bne.n	810fcc8 <_nx_tcp_packet_process+0x2e4>
                 ((*source_ip & ~(interface_ptr -> nx_interface_ip_network_mask)) == ~(interface_ptr -> nx_interface_ip_network_mask))) ||
 810fcb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810fcb4:	681a      	ldr	r2, [r3, #0]
 810fcb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810fcb8:	699b      	ldr	r3, [r3, #24]
 810fcba:	43db      	mvns	r3, r3
 810fcbc:	401a      	ands	r2, r3
 810fcbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810fcc0:	699b      	ldr	r3, [r3, #24]
 810fcc2:	43db      	mvns	r3, r3
                (((*source_ip & interface_ptr -> nx_interface_ip_network_mask) == interface_ptr -> nx_interface_ip_network) &&
 810fcc4:	429a      	cmp	r2, r3
 810fcc6:	d00a      	beq.n	810fcde <_nx_tcp_packet_process+0x2fa>
                /* Check for local subnet address */
                (*source_ip == interface_ptr -> nx_interface_ip_network)  ||
 810fcc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810fcca:	681a      	ldr	r2, [r3, #0]
 810fccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810fcce:	69db      	ldr	r3, [r3, #28]
                 ((*source_ip & ~(interface_ptr -> nx_interface_ip_network_mask)) == ~(interface_ptr -> nx_interface_ip_network_mask))) ||
 810fcd0:	429a      	cmp	r2, r3
 810fcd2:	d004      	beq.n	810fcde <_nx_tcp_packet_process+0x2fa>
                /* Check for limited broadcast */
                (*source_ip == NX_IP_LIMITED_BROADCAST)
 810fcd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810fcd6:	681b      	ldr	r3, [r3, #0]
                (*source_ip == interface_ptr -> nx_interface_ip_network)  ||
 810fcd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810fcdc:	d10a      	bne.n	810fcf4 <_nx_tcp_packet_process+0x310>
               )
            {

#ifndef NX_DISABLE_TCP_INFO
                /* Increment the TCP invalid packet error count.  */
                ip_ptr -> nx_ip_tcp_invalid_packets++;
 810fcde:	687b      	ldr	r3, [r7, #4]
 810fce0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810fce4:	1c5a      	adds	r2, r3, #1
 810fce6:	687b      	ldr	r3, [r7, #4]
 810fce8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
#endif /* NX_DISABLE_TCP_INFO */

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 810fcec:	6838      	ldr	r0, [r7, #0]
 810fcee:	f7fe ffc3 	bl	810ec78 <_nx_packet_release>

                /* Finished processing, simply return!  */
                return;
 810fcf2:	e1db      	b.n	81100ac <_nx_tcp_packet_process+0x6c8>
            }
        }
#endif /* FEATURE_NX_IPV6*/

        /* Search all ports in listen mode for a match. */
        listen_ptr =  ip_ptr -> nx_ip_tcp_active_listen_requests;
 810fcf4:	687b      	ldr	r3, [r7, #4]
 810fcf6:	f8d3 3620 	ldr.w	r3, [r3, #1568]	@ 0x620
 810fcfa:	65bb      	str	r3, [r7, #88]	@ 0x58
        do
        {

            /* Determine if this port is in a listen mode.  */
            if (listen_ptr -> nx_tcp_listen_port == port)
 810fcfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810fcfe:	681b      	ldr	r3, [r3, #0]
 810fd00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810fd02:	429a      	cmp	r2, r3
 810fd04:	f040 81a4 	bne.w	8110050 <_nx_tcp_packet_process+0x66c>

                /* Determine if the packet is an initial connection request.
                   The incoming SYN packet is a connection request.
                   The incoming RST packet is related to a previous connection request.
                   Fourth other text or control. RFC793, Section3.9, Page66. */
                if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)) &&
 810fd08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fd0a:	68db      	ldr	r3, [r3, #12]
 810fd0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810fd10:	2b00      	cmp	r3, #0
 810fd12:	d110      	bne.n	810fd36 <_nx_tcp_packet_process+0x352>
                    (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)))
 810fd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fd16:	68db      	ldr	r3, [r3, #12]
 810fd18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
                if ((!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)) &&
 810fd1c:	2b00      	cmp	r3, #0
 810fd1e:	d10a      	bne.n	810fd36 <_nx_tcp_packet_process+0x352>
                {

#ifndef NX_DISABLE_TCP_INFO
                    /* This is a duplicate connection request. Increment the TCP dropped packet count.  */
                    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 810fd20:	687b      	ldr	r3, [r7, #4]
 810fd22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810fd26:	1c5a      	adds	r2, r3, #1
 810fd28:	687b      	ldr	r3, [r7, #4]
 810fd2a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* NX_DISABLE_TCP_INFO */

                    /* Release the packet.  */
                    _nx_packet_release(packet_ptr);
 810fd2e:	6838      	ldr	r0, [r7, #0]
 810fd30:	f7fe ffa2 	bl	810ec78 <_nx_packet_release>

                    return;
 810fd34:	e1ba      	b.n	81100ac <_nx_tcp_packet_process+0x6c8>
                }

#ifndef NX_DISABLE_TCP_INFO

                /* Check for a SYN bit set.  */
                if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT))
 810fd36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fd38:	68db      	ldr	r3, [r3, #12]
 810fd3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810fd3e:	2b00      	cmp	r3, #0
 810fd40:	d00d      	beq.n	810fd5e <_nx_tcp_packet_process+0x37a>
                {

                    /* Increment the passive TCP connections count.  */
                    ip_ptr -> nx_ip_tcp_passive_connections++;
 810fd42:	687b      	ldr	r3, [r7, #4]
 810fd44:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 810fd48:	1c5a      	adds	r2, r3, #1
 810fd4a:	687b      	ldr	r3, [r7, #4]
 810fd4c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

                    /* Increment the TCP connections count.  */
                    ip_ptr -> nx_ip_tcp_connections++;
 810fd50:	687b      	ldr	r3, [r7, #4]
 810fd52:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 810fd56:	1c5a      	adds	r2, r3, #1
 810fd58:	687b      	ldr	r3, [r7, #4]
 810fd5a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
#endif

                /* Okay, this port is in a listen mode.  We now need to see if
                   there is an available socket for the new connection request
                   present.  */
                if ((listen_ptr -> nx_tcp_listen_socket_ptr) &&
 810fd5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810fd60:	689b      	ldr	r3, [r3, #8]
 810fd62:	2b00      	cmp	r3, #0
 810fd64:	f000 80b2 	beq.w	810fecc <_nx_tcp_packet_process+0x4e8>
                    ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT) == NX_NULL))
 810fd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fd6a:	68db      	ldr	r3, [r3, #12]
 810fd6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
                if ((listen_ptr -> nx_tcp_listen_socket_ptr) &&
 810fd70:	2b00      	cmp	r3, #0
 810fd72:	f040 80ab 	bne.w	810fecc <_nx_tcp_packet_process+0x4e8>
                    /* Yes there is indeed a socket present.  We now need to
                       fill in the appropriate info and call the server callback
                       routine.  */

                    /* Allocate the supplied server socket.  */
                    socket_ptr = listen_ptr -> nx_tcp_listen_socket_ptr;
 810fd76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810fd78:	689b      	ldr	r3, [r3, #8]
 810fd7a:	65fb      	str	r3, [r7, #92]	@ 0x5c

                    /* Clear the server socket pointer in the listen request.  If the
                       application wishes to honor more server connections on this port,
                       the application must call relisten with a new server socket
                       pointer.  */
                    listen_ptr -> nx_tcp_listen_socket_ptr =  NX_NULL;
 810fd7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810fd7e:	2200      	movs	r2, #0
 810fd80:	609a      	str	r2, [r3, #8]

                    /* Fill the socket in with the appropriate information.  */


#ifndef NX_DISABLE_IPV4
                    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 810fd82:	683b      	ldr	r3, [r7, #0]
 810fd84:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810fd88:	2b04      	cmp	r3, #4
 810fd8a:	d116      	bne.n	810fdba <_nx_tcp_packet_process+0x3d6>
                    {

                        /* Assume the interface that receives the incoming packet is the best interface
                           for sending responses. */
                        socket_ptr -> nx_tcp_socket_connect_interface = interface_ptr;
 810fd8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fd8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810fd90:	629a      	str	r2, [r3, #40]	@ 0x28
                        socket_ptr -> nx_tcp_socket_next_hop_address = NX_NULL;
 810fd92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fd94:	2200      	movs	r2, #0
 810fd96:	62da      	str	r2, [r3, #44]	@ 0x2c

                        /* Set the next hop address.  */
                        _nx_ip_route_find(ip_ptr, *source_ip, &socket_ptr -> nx_tcp_socket_connect_interface,
 810fd98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810fd9a:	6819      	ldr	r1, [r3, #0]
 810fd9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fd9e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 810fda2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fda4:	332c      	adds	r3, #44	@ 0x2c
 810fda6:	6878      	ldr	r0, [r7, #4]
 810fda8:	f7fd fd34 	bl	810d814 <_nx_ip_route_find>
                                          &socket_ptr -> nx_tcp_socket_next_hop_address);

                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version =  NX_IP_VERSION_V4;
 810fdac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fdae:	2204      	movs	r2, #4
 810fdb0:	615a      	str	r2, [r3, #20]
                        socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = *source_ip;
 810fdb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810fdb4:	681a      	ldr	r2, [r3, #0]
 810fdb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fdb8:	619a      	str	r2, [r3, #24]
                        socket_ptr -> nx_tcp_socket_ipv6_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
                        socket_ptr -> nx_tcp_socket_connect_interface = interface_ptr;
                    }
#endif /* FEATURE_NX_IPV6 */

                    socket_ptr -> nx_tcp_socket_connect_port = source_port;
 810fdba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fdbc:	6a3a      	ldr	r2, [r7, #32]
 810fdbe:	61da      	str	r2, [r3, #28]
                    socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number;
 810fdc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fdc2:	685a      	ldr	r2, [r3, #4]
 810fdc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fdc6:	641a      	str	r2, [r3, #64]	@ 0x40


                    /* Yes, MSS was found, so store it!  */
                    socket_ptr -> nx_tcp_socket_peer_mss = mss;
 810fdc8:	68fa      	ldr	r2, [r7, #12]
 810fdca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fdcc:	625a      	str	r2, [r3, #36]	@ 0x24
                     */
                    socket_ptr -> nx_tcp_snd_win_scale_value = rwin_scale;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

                    /* Set the initial slow start threshold to be the advertised window size. */
                    socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 810fdce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fdd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810fdd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fdd4:	635a      	str	r2, [r3, #52]	@ 0x34

                    /* Slow start:  setup initial window (IW) to be MSS,  RFC 2581, 3.1 */
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = mss;
 810fdd6:	68fa      	ldr	r2, [r7, #12]
 810fdd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fdda:	659a      	str	r2, [r3, #88]	@ 0x58

                    /* Initialize the transmit outstanding byte count to zero. */
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 810fddc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fdde:	2200      	movs	r2, #0
 810fde0:	65da      	str	r2, [r3, #92]	@ 0x5c

                    /* Calculate the hash index in the TCP port array of the associated IP instance.  */
                    index = (UINT)((port + (port >> 8)) & NX_TCP_PORT_TABLE_MASK);
 810fde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fde4:	0a1a      	lsrs	r2, r3, #8
 810fde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fde8:	4413      	add	r3, r2
 810fdea:	f003 031f 	and.w	r3, r3, #31
 810fdee:	61fb      	str	r3, [r7, #28]

                    /* Determine if the list is NULL.  */
                    if (ip_ptr -> nx_ip_tcp_port_table[index])
 810fdf0:	687b      	ldr	r3, [r7, #4]
 810fdf2:	69fa      	ldr	r2, [r7, #28]
 810fdf4:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 810fdf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810fdfc:	2b00      	cmp	r3, #0
 810fdfe:	d028      	beq.n	810fe52 <_nx_tcp_packet_process+0x46e>
                    {

                        /* There are already sockets on this list... just add this one
                           to the end.  */
                        socket_ptr -> nx_tcp_socket_bound_next =
                            ip_ptr -> nx_ip_tcp_port_table[index];
 810fe00:	687b      	ldr	r3, [r7, #4]
 810fe02:	69fa      	ldr	r2, [r7, #28]
 810fe04:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 810fe08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                        socket_ptr -> nx_tcp_socket_bound_next =
 810fe0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fe0e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                        socket_ptr -> nx_tcp_socket_bound_previous =
                            (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous;
 810fe12:	687b      	ldr	r3, [r7, #4]
 810fe14:	69fa      	ldr	r2, [r7, #28]
 810fe16:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 810fe1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810fe1e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
                        socket_ptr -> nx_tcp_socket_bound_previous =
 810fe22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fe24:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
                        ((ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous) -> nx_tcp_socket_bound_next =
 810fe28:	687b      	ldr	r3, [r7, #4]
 810fe2a:	69fa      	ldr	r2, [r7, #28]
 810fe2c:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 810fe30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810fe34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 810fe38:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 810fe3a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                            socket_ptr;
                        (ip_ptr -> nx_ip_tcp_port_table[index]) -> nx_tcp_socket_bound_previous = socket_ptr;
 810fe3e:	687b      	ldr	r3, [r7, #4]
 810fe40:	69fa      	ldr	r2, [r7, #28]
 810fe42:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 810fe46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810fe4a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 810fe4c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 810fe50:	e00e      	b.n	810fe70 <_nx_tcp_packet_process+0x48c>
                    else
                    {

                        /* Nothing is on the TCP port list.  Add this TCP socket to an
                           empty list.  */
                        socket_ptr -> nx_tcp_socket_bound_next =      socket_ptr;
 810fe52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fe54:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 810fe56:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                        socket_ptr -> nx_tcp_socket_bound_previous =  socket_ptr;
 810fe5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fe5c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 810fe5e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
                        ip_ptr -> nx_ip_tcp_port_table[index] =       socket_ptr;
 810fe62:	687b      	ldr	r3, [r7, #4]
 810fe64:	69fa      	ldr	r2, [r7, #28]
 810fe66:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 810fe6a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 810fe6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    }

                    /* Pickup the listen callback function.  */
                    listen_callback = listen_ptr -> nx_tcp_listen_callback;
 810fe70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810fe72:	685b      	ldr	r3, [r3, #4]
 810fe74:	61bb      	str	r3, [r7, #24]

                    /* Release the incoming packet.  */
                    _nx_packet_release(packet_ptr);
 810fe76:	6838      	ldr	r0, [r7, #0]
 810fe78:	f7fe fefe 	bl	810ec78 <_nx_packet_release>

                    /* Determine if an accept call with suspension has already been made
                       for this socket.  If so, the SYN message needs to be sent from
                       here.  */
                    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 810fe7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fe7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810fe80:	2b04      	cmp	r3, #4
 810fe82:	d11a      	bne.n	810feba <_nx_tcp_packet_process+0x4d6>
                        /* The application is suspended on an accept call for this socket.
                           Simply send the SYN now and keep the thread suspended until the
                           other side completes the connection.  */

                        /* Send the SYN message, but increment the ACK first.  */
                        socket_ptr -> nx_tcp_socket_rx_sequence++;
 810fe84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fe86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810fe88:	1c5a      	adds	r2, r3, #1
 810fe8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fe8c:	641a      	str	r2, [r3, #64]	@ 0x40

                        /* Increment the sequence number for the SYN message.  */
                        socket_ptr -> nx_tcp_socket_tx_sequence++;
 810fe8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fe90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810fe92:	1c5a      	adds	r2, r3, #1
 810fe94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fe96:	63da      	str	r2, [r3, #60]	@ 0x3c

                        /* Setup a timeout so the connection attempt can be sent again.  */
                        socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 810fe98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fe9a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 810fe9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fea0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
                        socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 810fea4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810fea6:	2200      	movs	r2, #0
 810fea8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

                        /* Send the SYN+ACK message.  */
                        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 810feac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810feae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810feb0:	3b01      	subs	r3, #1
 810feb2:	4619      	mov	r1, r3
 810feb4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 810feb6:	f000 fafb 	bl	81104b0 <_nx_tcp_packet_send_syn>
                    }

                    /* Determine if there is a listen callback function.  */
                    if (listen_callback)
 810feba:	69bb      	ldr	r3, [r7, #24]
 810febc:	2b00      	cmp	r3, #0
 810febe:	f000 80c6 	beq.w	811004e <_nx_tcp_packet_process+0x66a>
                    {
                        /* Call the user's listen callback function.  */
                        (listen_callback)(socket_ptr, port);
 810fec2:	69bb      	ldr	r3, [r7, #24]
 810fec4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810fec6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 810fec8:	4798      	blx	r3
                    if (listen_callback)
 810feca:	e0c0      	b.n	811004e <_nx_tcp_packet_process+0x66a>
                        /* If trace is enabled, insert this event into the trace buffer.  */
                        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_SYN_RECEIVE, ip_ptr, NX_NULL, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);
                    }

                    /* Check for the same connection request already in the queue.  */
                    queued_count = listen_ptr -> nx_tcp_listen_queue_current;
 810fecc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810fece:	691b      	ldr	r3, [r3, #16]
 810fed0:	653b      	str	r3, [r7, #80]	@ 0x50
                    queued_ptr = listen_ptr -> nx_tcp_listen_queue_head;
 810fed2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810fed4:	695b      	ldr	r3, [r3, #20]
 810fed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    queued_prev_ptr = queued_ptr;
 810fed8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810feda:	64bb      	str	r3, [r7, #72]	@ 0x48

                    /* Initialize the check for queued request to false.*/
                    is_a_RST_request = NX_FALSE;
 810fedc:	2300      	movs	r3, #0
 810fede:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Loop through the queued list in order to search for duplicate request.  */
                    while (queued_count--)
 810fee0:	e05c      	b.n	810ff9c <_nx_tcp_packet_process+0x5b8>
                    {

                        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                        queued_source_port = (UINT)(*((ULONG *)queued_ptr -> nx_packet_prepend_ptr) >> NX_SHIFT_BY_16);
 810fee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810fee4:	689b      	ldr	r3, [r3, #8]
 810fee6:	681b      	ldr	r3, [r3, #0]
 810fee8:	0c1b      	lsrs	r3, r3, #16
 810feea:	617b      	str	r3, [r7, #20]

#ifndef NX_DISABLE_IPV4
                        /* Pickup the queued source port and source IP address for comparison.  */
                        if (queued_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 810feec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810feee:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810fef2:	2b04      	cmp	r3, #4
 810fef4:	d121      	bne.n	810ff3a <_nx_tcp_packet_process+0x556>
                        {

                            /*lint -e{929} -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                            queued_source_ip = (ULONG *)(((ULONG *)queued_ptr -> nx_packet_prepend_ptr) - 2);
 810fef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810fef8:	689b      	ldr	r3, [r3, #8]
 810fefa:	3b08      	subs	r3, #8
 810fefc:	613b      	str	r3, [r7, #16]

                            /* Determine if this matches the current connection request.  */
                            if ((*queued_source_ip == *source_ip) && (queued_source_port == source_port))
 810fefe:	693b      	ldr	r3, [r7, #16]
 810ff00:	681a      	ldr	r2, [r3, #0]
 810ff02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810ff04:	681b      	ldr	r3, [r3, #0]
 810ff06:	429a      	cmp	r2, r3
 810ff08:	d117      	bne.n	810ff3a <_nx_tcp_packet_process+0x556>
 810ff0a:	697a      	ldr	r2, [r7, #20]
 810ff0c:	6a3b      	ldr	r3, [r7, #32]
 810ff0e:	429a      	cmp	r2, r3
 810ff10:	d113      	bne.n	810ff3a <_nx_tcp_packet_process+0x556>
                            {

                                /* Possible duplicate connection request to one that is already queued.  */

                                /* Check for a RST (reset) bit set.  */
                                if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 810ff12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ff14:	68db      	ldr	r3, [r3, #12]
 810ff16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810ff1a:	2b00      	cmp	r3, #0
 810ff1c:	d002      	beq.n	810ff24 <_nx_tcp_packet_process+0x540>
                                {

                                    /* RST packet matches a previously queued connection request. */
                                    is_a_RST_request = NX_TRUE;
 810ff1e:	2301      	movs	r3, #1
 810ff20:	647b      	str	r3, [r7, #68]	@ 0x44
 810ff22:	e00a      	b.n	810ff3a <_nx_tcp_packet_process+0x556>
                                }
                                else
                                {
#ifndef NX_DISABLE_TCP_INFO
                                    /* This is a duplicate connection request. Increment the TCP dropped packet count.  */
                                    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 810ff24:	687b      	ldr	r3, [r7, #4]
 810ff26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810ff2a:	1c5a      	adds	r2, r3, #1
 810ff2c:	687b      	ldr	r3, [r7, #4]
 810ff2e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif
                                    /* Simply release the packet and return.  */
                                    _nx_packet_release(packet_ptr);
 810ff32:	6838      	ldr	r0, [r7, #0]
 810ff34:	f7fe fea0 	bl	810ec78 <_nx_packet_release>

                                    /* Return!  */
                                    return;
 810ff38:	e0b8      	b.n	81100ac <_nx_tcp_packet_process+0x6c8>
                        }
#endif /* FEATURE_NX_IPV6  */

                        /* Handle the case of the RST packet which cancels a previously received
                           connection request. */
                        if (is_a_RST_request)
 810ff3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810ff3c:	2b00      	cmp	r3, #0
 810ff3e:	d028      	beq.n	810ff92 <_nx_tcp_packet_process+0x5ae>
                        {

                            /* A previous connection request needs to be removed from the listen queue. */
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_head)
 810ff40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810ff42:	695b      	ldr	r3, [r3, #20]
 810ff44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 810ff46:	429a      	cmp	r2, r3
 810ff48:	d104      	bne.n	810ff54 <_nx_tcp_packet_process+0x570>
                            {

                                /* Reset the front (oldest) of the queue to the next request. */
                                listen_ptr -> nx_tcp_listen_queue_head = queued_ptr -> nx_packet_queue_next;
 810ff4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ff4c:	69da      	ldr	r2, [r3, #28]
 810ff4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810ff50:	615a      	str	r2, [r3, #20]
 810ff52:	e003      	b.n	810ff5c <_nx_tcp_packet_process+0x578>
                            else
                            {

                                /* Link around the request we are removing. */
                                /*lint -e{613} suppress possible use of null pointer, since 'queued_prev_ptr' must not be NULL.  */
                                queued_prev_ptr -> nx_packet_queue_next = queued_ptr -> nx_packet_queue_next;
 810ff54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ff56:	69da      	ldr	r2, [r3, #28]
 810ff58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810ff5a:	61da      	str	r2, [r3, #28]
                            }

                            /* Is the request being removed the tail (most recent connection?)   */
                            if (queued_ptr == listen_ptr -> nx_tcp_listen_queue_tail)
 810ff5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810ff5e:	699b      	ldr	r3, [r3, #24]
 810ff60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 810ff62:	429a      	cmp	r2, r3
 810ff64:	d102      	bne.n	810ff6c <_nx_tcp_packet_process+0x588>
                            {

                                /* Yes, set the previous connection request as the tail. */
                                listen_ptr -> nx_tcp_listen_queue_tail = queued_prev_ptr;
 810ff66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810ff68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810ff6a:	619a      	str	r2, [r3, #24]
                            }

                            /* Release the connection request packet.  */
                            _nx_packet_release(queued_ptr);
 810ff6c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 810ff6e:	f7fe fe83 	bl	810ec78 <_nx_packet_release>

                            /* Update the listen queue. */
                            listen_ptr -> nx_tcp_listen_queue_current--;
 810ff72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810ff74:	691b      	ldr	r3, [r3, #16]
 810ff76:	1e5a      	subs	r2, r3, #1
 810ff78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810ff7a:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_TCP_INFO
                            /* Increment the TCP dropped packet count.  */
                            ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 810ff7c:	687b      	ldr	r3, [r7, #4]
 810ff7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810ff82:	1c5a      	adds	r2, r3, #1
 810ff84:	687b      	ldr	r3, [r7, #4]
 810ff86:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif

                            /* Simply release the packet and return.  */
                            _nx_packet_release(packet_ptr);
 810ff8a:	6838      	ldr	r0, [r7, #0]
 810ff8c:	f7fe fe74 	bl	810ec78 <_nx_packet_release>

                            /* Return!  */
                            return;
 810ff90:	e08c      	b.n	81100ac <_nx_tcp_packet_process+0x6c8>
                        }

                        /* Move to next item in the queue.  */
                        queued_prev_ptr = queued_ptr;
 810ff92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ff94:	64bb      	str	r3, [r7, #72]	@ 0x48
                        queued_ptr = queued_ptr -> nx_packet_queue_next;
 810ff96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ff98:	69db      	ldr	r3, [r3, #28]
 810ff9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    while (queued_count--)
 810ff9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810ff9e:	1e5a      	subs	r2, r3, #1
 810ffa0:	653a      	str	r2, [r7, #80]	@ 0x50
 810ffa2:	2b00      	cmp	r3, #0
 810ffa4:	d19d      	bne.n	810fee2 <_nx_tcp_packet_process+0x4fe>
                    }

                    /* Not a duplicate connection request, place this request on the listen queue.  */

                    /* Is this a RST packet? */
                    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 810ffa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ffa8:	68db      	ldr	r3, [r3, #12]
 810ffaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810ffae:	2b00      	cmp	r3, #0
 810ffb0:	d00a      	beq.n	810ffc8 <_nx_tcp_packet_process+0x5e4>
                    {

                        /* Yes, so not a connection request. Do not place on the listen queue. */
#ifndef NX_DISABLE_TCP_INFO
                        /* Increment the TCP dropped packet count.  */
                        ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 810ffb2:	687b      	ldr	r3, [r7, #4]
 810ffb4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810ffb8:	1c5a      	adds	r2, r3, #1
 810ffba:	687b      	ldr	r3, [r7, #4]
 810ffbc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif

                        /* Release the packet.  */
                        _nx_packet_release(packet_ptr);
 810ffc0:	6838      	ldr	r0, [r7, #0]
 810ffc2:	f7fe fe59 	bl	810ec78 <_nx_packet_release>

                        /* Return!  */
                        return;
 810ffc6:	e071      	b.n	81100ac <_nx_tcp_packet_process+0x6c8>
                    }

                    /* Set the next pointer of the packet to NULL.  */
                    packet_ptr -> nx_packet_queue_next = NX_NULL;
 810ffc8:	683b      	ldr	r3, [r7, #0]
 810ffca:	2200      	movs	r2, #0
 810ffcc:	61da      	str	r2, [r3, #28]

                    /* Queue the new connection request.  */
                    if (listen_ptr -> nx_tcp_listen_queue_head)
 810ffce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810ffd0:	695b      	ldr	r3, [r3, #20]
 810ffd2:	2b00      	cmp	r3, #0
 810ffd4:	d004      	beq.n	810ffe0 <_nx_tcp_packet_process+0x5fc>
                    {

                        /* There is a connection request already queued, just link packet to tail.  */
                        (listen_ptr -> nx_tcp_listen_queue_tail) -> nx_packet_queue_next = packet_ptr;
 810ffd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810ffd8:	699b      	ldr	r3, [r3, #24]
 810ffda:	683a      	ldr	r2, [r7, #0]
 810ffdc:	61da      	str	r2, [r3, #28]
 810ffde:	e002      	b.n	810ffe6 <_nx_tcp_packet_process+0x602>
                    }
                    else
                    {

                        /* The queue is empty.  Setup head pointer to the new packet.  */
                        listen_ptr -> nx_tcp_listen_queue_head = packet_ptr;
 810ffe0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810ffe2:	683a      	ldr	r2, [r7, #0]
 810ffe4:	615a      	str	r2, [r3, #20]
                    }

                    /* Setup the tail pointer to the new packet and increment the queue count.  */
                    listen_ptr -> nx_tcp_listen_queue_tail =  packet_ptr;
 810ffe6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810ffe8:	683a      	ldr	r2, [r7, #0]
 810ffea:	619a      	str	r2, [r3, #24]
                    listen_ptr -> nx_tcp_listen_queue_current++;
 810ffec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810ffee:	691b      	ldr	r3, [r3, #16]
 810fff0:	1c5a      	adds	r2, r3, #1
 810fff2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810fff4:	611a      	str	r2, [r3, #16]

                    /* Add debug information. */
                    NX_PACKET_DEBUG(NX_PACKET_TCP_LISTEN_QUEUE, __LINE__, packet_ptr);

                    /* Determine if the queue depth has been exceeded.  */
                    if (listen_ptr -> nx_tcp_listen_queue_current > listen_ptr -> nx_tcp_listen_queue_maximum)
 810fff6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810fff8:	691a      	ldr	r2, [r3, #16]
 810fffa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810fffc:	68db      	ldr	r3, [r3, #12]
 810fffe:	429a      	cmp	r2, r3
 8110000:	d953      	bls.n	81100aa <_nx_tcp_packet_process+0x6c6>
                    {

#ifndef NX_DISABLE_TCP_INFO

                        /* Increment the TCP connections dropped count.  */
                        ip_ptr -> nx_ip_tcp_connections_dropped++;
 8110002:	687b      	ldr	r3, [r7, #4]
 8110004:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8110008:	1c5a      	adds	r2, r3, #1
 811000a:	687b      	ldr	r3, [r7, #4]
 811000c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
                        ip_ptr -> nx_ip_tcp_connections--;
 8110010:	687b      	ldr	r3, [r7, #4]
 8110012:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8110016:	1e5a      	subs	r2, r3, #1
 8110018:	687b      	ldr	r3, [r7, #4]
 811001a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

                        /* Increment the TCP dropped packet count.  */
                        ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 811001e:	687b      	ldr	r3, [r7, #4]
 8110020:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8110024:	1c5a      	adds	r2, r3, #1
 8110026:	687b      	ldr	r3, [r7, #4]
 8110028:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif

                        /* Save the head packet pointer, since this will be released below.  */
                        packet_ptr = listen_ptr -> nx_tcp_listen_queue_head;
 811002c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 811002e:	695b      	ldr	r3, [r3, #20]
 8110030:	603b      	str	r3, [r7, #0]

                        /* Remove the oldest packet from the queue.  */
                        listen_ptr -> nx_tcp_listen_queue_head = (listen_ptr -> nx_tcp_listen_queue_head) -> nx_packet_queue_next;
 8110032:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8110034:	695b      	ldr	r3, [r3, #20]
 8110036:	69da      	ldr	r2, [r3, #28]
 8110038:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 811003a:	615a      	str	r2, [r3, #20]

                        /* Decrement the number of packets in the queue.  */
                        listen_ptr -> nx_tcp_listen_queue_current--;
 811003c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 811003e:	691b      	ldr	r3, [r3, #16]
 8110040:	1e5a      	subs	r2, r3, #1
 8110042:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8110044:	611a      	str	r2, [r3, #16]

                        /* We have exceeded the number of connections that can be
                           queued for this port.  */

                        /* Release the packet.  */
                        _nx_packet_release(packet_ptr);
 8110046:	6838      	ldr	r0, [r7, #0]
 8110048:	f7fe fe16 	bl	810ec78 <_nx_packet_release>
                    }
                }

                /* Finished processing, just return.  */
                return;
 811004c:	e02d      	b.n	81100aa <_nx_tcp_packet_process+0x6c6>
 811004e:	e02c      	b.n	81100aa <_nx_tcp_packet_process+0x6c6>
            }

            /* Move to the next listen request.  */
            listen_ptr = listen_ptr -> nx_tcp_listen_next;
 8110050:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8110052:	69db      	ldr	r3, [r3, #28]
 8110054:	65bb      	str	r3, [r7, #88]	@ 0x58
        } while (listen_ptr != ip_ptr -> nx_ip_tcp_active_listen_requests);
 8110056:	687b      	ldr	r3, [r7, #4]
 8110058:	f8d3 3620 	ldr.w	r3, [r3, #1568]	@ 0x620
 811005c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 811005e:	429a      	cmp	r2, r3
 8110060:	f47f ae4c 	bne.w	810fcfc <_nx_tcp_packet_process+0x318>
    }

#ifndef NX_DISABLE_TCP_INFO

    /* Determine if a connection request is present.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 8110064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110066:	68db      	ldr	r3, [r3, #12]
 8110068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 811006c:	2b00      	cmp	r3, #0
 811006e:	d006      	beq.n	811007e <_nx_tcp_packet_process+0x69a>
    {

        /* Yes, increment the TCP connections dropped count.  */
        ip_ptr -> nx_ip_tcp_connections_dropped++;
 8110070:	687b      	ldr	r3, [r7, #4]
 8110072:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8110076:	1c5a      	adds	r2, r3, #1
 8110078:	687b      	ldr	r3, [r7, #4]
 811007a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    }

    /* Increment the TCP dropped packet count.  */
    ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 811007e:	687b      	ldr	r3, [r7, #4]
 8110080:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8110084:	1c5a      	adds	r2, r3, #1
 8110086:	687b      	ldr	r3, [r7, #4]
 8110088:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* NX_DISABLE_TCP_INFO  */

    /* Determine if a RST is present. If so, don't send a RST in response.  */
    if (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT))
 811008c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811008e:	68db      	ldr	r3, [r3, #12]
 8110090:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8110094:	2b00      	cmp	r3, #0
 8110096:	d104      	bne.n	81100a2 <_nx_tcp_packet_process+0x6be>
    {

        /* Non RST is present, send reset when no connection is present.  */
        _nx_tcp_no_connection_reset(ip_ptr, packet_ptr, tcp_header_ptr);
 8110098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811009a:	6839      	ldr	r1, [r7, #0]
 811009c:	6878      	ldr	r0, [r7, #4]
 811009e:	f7ff fbc8 	bl	810f832 <_nx_tcp_no_connection_reset>
    }

    /* Not a connection request, just release the packet.  */
    _nx_packet_release(packet_ptr);
 81100a2:	6838      	ldr	r0, [r7, #0]
 81100a4:	f7fe fde8 	bl	810ec78 <_nx_packet_release>

    return;
 81100a8:	e000      	b.n	81100ac <_nx_tcp_packet_process+0x6c8>
                return;
 81100aa:	bf00      	nop
}
 81100ac:	3768      	adds	r7, #104	@ 0x68
 81100ae:	46bd      	mov	sp, r7
 81100b0:	bd80      	pop	{r7, pc}
	...

081100b4 <_nx_tcp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 81100b4:	b580      	push	{r7, lr}
 81100b6:	b088      	sub	sp, #32
 81100b8:	af00      	add	r7, sp, #0
 81100ba:	6078      	str	r0, [r7, #4]
 81100bc:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_TCP_HEADER))
 81100be:	683b      	ldr	r3, [r7, #0]
 81100c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81100c2:	2b13      	cmp	r3, #19
 81100c4:	d80a      	bhi.n	81100dc <_nx_tcp_packet_receive+0x28>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP invalid packet error.  */
        ip_ptr -> nx_ip_tcp_invalid_packets++;
 81100c6:	687b      	ldr	r3, [r7, #4]
 81100c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81100cc:	1c5a      	adds	r2, r3, #1
 81100ce:	687b      	ldr	r3, [r7, #4]
 81100d0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 81100d4:	6838      	ldr	r0, [r7, #0]
 81100d6:	f7fe fdcf 	bl	810ec78 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 81100da:	e052      	b.n	8110182 <_nx_tcp_packet_receive+0xce>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 81100dc:	f3ef 8305 	mrs	r3, IPSR
 81100e0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 81100e2:	69ba      	ldr	r2, [r7, #24]
    }
#endif

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 81100e4:	4b28      	ldr	r3, [pc, #160]	@ (8110188 <_nx_tcp_packet_receive+0xd4>)
 81100e6:	681b      	ldr	r3, [r3, #0]
 81100e8:	4313      	orrs	r3, r2
 81100ea:	2b00      	cmp	r3, #0
 81100ec:	d106      	bne.n	81100fc <_nx_tcp_packet_receive+0x48>
 81100ee:	687b      	ldr	r3, [r7, #4]
 81100f0:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 81100f4:	4b25      	ldr	r3, [pc, #148]	@ (811018c <_nx_tcp_packet_receive+0xd8>)
 81100f6:	681b      	ldr	r3, [r3, #0]
 81100f8:	429a      	cmp	r2, r3
 81100fa:	d03e      	beq.n	811017a <_nx_tcp_packet_receive+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 81100fc:	f3ef 8310 	mrs	r3, PRIMASK
 8110100:	617b      	str	r3, [r7, #20]
    return(posture);
 8110102:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8110104:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8110106:	b672      	cpsid	i
    return(int_posture);
 8110108:	693b      	ldr	r3, [r7, #16]
        /* If system state is non-zero, we are in an ISR. If the current thread is not the IP thread,
           we need to prevent unnecessary recursion in loopback.  Just place the message at the
           end of the TCP message queue and wakeup the IP helper thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 811010a:	61fb      	str	r3, [r7, #28]

        /* Add the packet to the TCP message queue.  */
        if (ip_ptr -> nx_ip_tcp_queue_head)
 811010c:	687b      	ldr	r3, [r7, #4]
 811010e:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	@ 0x4a8
 8110112:	2b00      	cmp	r3, #0
 8110114:	d013      	beq.n	811013e <_nx_tcp_packet_receive+0x8a>
        {

            /* Link the current packet at the end of the queue.  */
            (ip_ptr -> nx_ip_tcp_queue_tail) -> nx_packet_queue_next =  packet_ptr;
 8110116:	687b      	ldr	r3, [r7, #4]
 8110118:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	@ 0x4ac
 811011c:	683a      	ldr	r2, [r7, #0]
 811011e:	61da      	str	r2, [r3, #28]
            ip_ptr -> nx_ip_tcp_queue_tail =                            packet_ptr;
 8110120:	687b      	ldr	r3, [r7, #4]
 8110122:	683a      	ldr	r2, [r7, #0]
 8110124:	f8c3 24ac 	str.w	r2, [r3, #1196]	@ 0x4ac
            packet_ptr -> nx_packet_queue_next =                        NX_NULL;
 8110128:	683b      	ldr	r3, [r7, #0]
 811012a:	2200      	movs	r2, #0
 811012c:	61da      	str	r2, [r3, #28]

            /* Increment the count of incoming TCP packets queued.  */
            ip_ptr -> nx_ip_tcp_received_packet_count++;
 811012e:	687b      	ldr	r3, [r7, #4]
 8110130:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	@ 0x4b0
 8110134:	1c5a      	adds	r2, r3, #1
 8110136:	687b      	ldr	r3, [r7, #4]
 8110138:	f8c3 24b0 	str.w	r2, [r3, #1200]	@ 0x4b0
 811013c:	e00e      	b.n	811015c <_nx_tcp_packet_receive+0xa8>
        }
        else
        {

            /* Empty queue, add to the head of the TCP message queue.  */
            ip_ptr -> nx_ip_tcp_queue_head =        packet_ptr;
 811013e:	687b      	ldr	r3, [r7, #4]
 8110140:	683a      	ldr	r2, [r7, #0]
 8110142:	f8c3 24a8 	str.w	r2, [r3, #1192]	@ 0x4a8
            ip_ptr -> nx_ip_tcp_queue_tail =        packet_ptr;
 8110146:	687b      	ldr	r3, [r7, #4]
 8110148:	683a      	ldr	r2, [r7, #0]
 811014a:	f8c3 24ac 	str.w	r2, [r3, #1196]	@ 0x4ac
            packet_ptr -> nx_packet_queue_next =    NX_NULL;
 811014e:	683b      	ldr	r3, [r7, #0]
 8110150:	2200      	movs	r2, #0
 8110152:	61da      	str	r2, [r3, #28]

            /* Set the initial count TCP packets queued.  */
            ip_ptr -> nx_ip_tcp_received_packet_count =  1;
 8110154:	687b      	ldr	r3, [r7, #4]
 8110156:	2201      	movs	r2, #1
 8110158:	f8c3 24b0 	str.w	r2, [r3, #1200]	@ 0x4b0
 811015c:	69fb      	ldr	r3, [r7, #28]
 811015e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8110160:	68fb      	ldr	r3, [r7, #12]
 8110162:	f383 8810 	msr	PRIMASK, r3
}
 8110166:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the TCP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_EVENT, TX_OR);
 8110168:	687b      	ldr	r3, [r7, #4]
 811016a:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 811016e:	2200      	movs	r2, #0
 8110170:	2180      	movs	r1, #128	@ 0x80
 8110172:	4618      	mov	r0, r3
 8110174:	f004 f96a 	bl	811444c <_tx_event_flags_set>
 8110178:	e003      	b.n	8110182 <_nx_tcp_packet_receive+0xce>
    else
    {

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the TCP processing directly.  */
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 811017a:	6839      	ldr	r1, [r7, #0]
 811017c:	6878      	ldr	r0, [r7, #4]
 811017e:	f7ff fc31 	bl	810f9e4 <_nx_tcp_packet_process>
    }
}
 8110182:	3720      	adds	r7, #32
 8110184:	46bd      	mov	sp, r7
 8110186:	bd80      	pop	{r7, pc}
 8110188:	20050088 	.word	0x20050088
 811018c:	20058128 	.word	0x20058128

08110190 <_nx_tcp_packet_send_ack>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_ack(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 8110190:	b580      	push	{r7, lr}
 8110192:	b086      	sub	sp, #24
 8110194:	af04      	add	r7, sp, #16
 8110196:	6078      	str	r0, [r7, #4]
 8110198:	6039      	str	r1, [r7, #0]
    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 811019a:	687b      	ldr	r3, [r7, #4]
 811019c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 811019e:	2200      	movs	r2, #0
 81101a0:	9202      	str	r2, [sp, #8]
 81101a2:	2200      	movs	r2, #0
 81101a4:	9201      	str	r2, [sp, #4]
 81101a6:	2200      	movs	r2, #0
 81101a8:	9200      	str	r2, [sp, #0]
 81101aa:	683a      	ldr	r2, [r7, #0]
 81101ac:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 81101b0:	6878      	ldr	r0, [r7, #4]
 81101b2:	f000 f80b 	bl	81101cc <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, NX_NULL);

    /* Setup a new delayed ACK timeout.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 81101b6:	4b04      	ldr	r3, [pc, #16]	@ (81101c8 <_nx_tcp_packet_send_ack+0x38>)
 81101b8:	681a      	ldr	r2, [r3, #0]
 81101ba:	687b      	ldr	r3, [r7, #4]
 81101bc:	649a      	str	r2, [r3, #72]	@ 0x48
}
 81101be:	bf00      	nop
 81101c0:	3708      	adds	r7, #8
 81101c2:	46bd      	mov	sp, r7
 81101c4:	bd80      	pop	{r7, pc}
 81101c6:	bf00      	nop
 81101c8:	200580e4 	.word	0x200580e4

081101cc <_nx_tcp_packet_send_control>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_control(NX_TCP_SOCKET *socket_ptr, ULONG control_bits, ULONG tx_sequence,
                                  ULONG ack_number, ULONG option_word_1, ULONG option_word_2, UCHAR *data)
{
 81101cc:	b5b0      	push	{r4, r5, r7, lr}
 81101ce:	b092      	sub	sp, #72	@ 0x48
 81101d0:	af04      	add	r7, sp, #16
 81101d2:	60f8      	str	r0, [r7, #12]
 81101d4:	60b9      	str	r1, [r7, #8]
 81101d6:	607a      	str	r2, [r7, #4]
 81101d8:	603b      	str	r3, [r7, #0]

NX_IP         *ip_ptr;
NX_PACKET     *packet_ptr;
NX_TCP_HEADER *tcp_header_ptr;
ULONG          checksum;
ULONG          data_offset = 0;
 81101da:	2300      	movs	r3, #0
 81101dc:	627b      	str	r3, [r7, #36]	@ 0x24
ULONG         *source_ip = NX_NULL, *dest_ip = NX_NULL;
 81101de:	2300      	movs	r3, #0
 81101e0:	637b      	str	r3, [r7, #52]	@ 0x34
 81101e2:	2300      	movs	r3, #0
 81101e4:	633b      	str	r3, [r7, #48]	@ 0x30
#ifdef NX_DISABLE_TCP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_TCP_TX_CHECKSUM */

    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 81101e6:	68fb      	ldr	r3, [r7, #12]
 81101e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81101ec:	623b      	str	r3, [r7, #32]

    if (control_bits & NX_TCP_SYN_BIT)
 81101ee:	68bb      	ldr	r3, [r7, #8]
 81101f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81101f4:	2b00      	cmp	r3, #0
 81101f6:	d006      	beq.n	8110206 <_nx_tcp_packet_send_control+0x3a>
    {

        /* Set header size. */
        header_size = NX_TCP_SYN_HEADER;
 81101f8:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 81101fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 81101fe:	68fb      	ldr	r3, [r7, #12]
 8110200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8110202:	62bb      	str	r3, [r7, #40]	@ 0x28
 8110204:	e005      	b.n	8110212 <_nx_tcp_packet_send_control+0x46>
    }
    else
    {

        /* Set header size. */
        header_size = NX_TCP_HEADER_SIZE;
 8110206:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 811020a:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set window size. */
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current >> socket_ptr -> nx_tcp_rcv_win_scale_value;
#else
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 811020c:	68fb      	ldr	r3, [r7, #12]
 811020e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8110210:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {

            /*lint -e{835} -e{845} suppress operating on zero. */
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool,
 8110212:	6a3b      	ldr	r3, [r7, #32]
 8110214:	f8d3 0138 	ldr.w	r0, [r3, #312]	@ 0x138
 8110218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811021a:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 811021e:	f107 0114 	add.w	r1, r7, #20
 8110222:	2300      	movs	r3, #0
 8110224:	f7fe f992 	bl	810e54c <_nx_packet_allocate>
 8110228:	4603      	mov	r3, r0
 811022a:	2b00      	cmp	r3, #0
 811022c:	f040 80d0 	bne.w	81103d0 <_nx_tcp_packet_send_control+0x204>
        }
    }
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Check to see if the packet has enough room to fill with the max TCP header (SYN + probe data).  */
    if ((UINT)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_prepend_ptr) < (NX_TCP_SYN_SIZE + 1))
 8110230:	697b      	ldr	r3, [r7, #20]
 8110232:	695a      	ldr	r2, [r3, #20]
 8110234:	697b      	ldr	r3, [r7, #20]
 8110236:	689b      	ldr	r3, [r3, #8]
 8110238:	1ad3      	subs	r3, r2, r3
 811023a:	2b1c      	cmp	r3, #28
 811023c:	d804      	bhi.n	8110248 <_nx_tcp_packet_send_control+0x7c>
    {

        /* Error getting packet, so just get out!  */
        _nx_packet_release(packet_ptr);
 811023e:	697b      	ldr	r3, [r7, #20]
 8110240:	4618      	mov	r0, r3
 8110242:	f7fe fd19 	bl	810ec78 <_nx_packet_release>
        return;
 8110246:	e0c4      	b.n	81103d2 <_nx_tcp_packet_send_control+0x206>
    }

    /*lint -e{644} suppress variable might not be initialized, since "packet_ptr" was initialized in _nx_packet_allocate. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version);
 8110248:	68fb      	ldr	r3, [r7, #12]
 811024a:	695a      	ldr	r2, [r3, #20]
 811024c:	697b      	ldr	r3, [r7, #20]
 811024e:	b2d2      	uxtb	r2, r2
 8110250:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Allocate a packet for the control message.  */
#ifndef NX_DISABLE_IPV4
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8110254:	68fb      	ldr	r3, [r7, #12]
 8110256:	695b      	ldr	r3, [r3, #20]
 8110258:	2b04      	cmp	r3, #4
 811025a:	d103      	bne.n	8110264 <_nx_tcp_packet_send_control+0x98>
    {

        /* The outgoing interface should have been stored in the socket structure. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = socket_ptr -> nx_tcp_socket_connect_interface;
 811025c:	697b      	ldr	r3, [r7, #20]
 811025e:	68fa      	ldr	r2, [r7, #12]
 8110260:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8110262:	631a      	str	r2, [r3, #48]	@ 0x30
#ifdef NX_IPSEC_ENABLE
    packet_ptr -> nx_packet_ipsec_sa_ptr = socket_ptr -> nx_tcp_socket_egress_sa;
#endif

    /* Setup the packet payload pointers and length for a basic TCP packet.  */
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER);
 8110264:	697b      	ldr	r3, [r7, #20]
 8110266:	689a      	ldr	r2, [r3, #8]
 8110268:	697b      	ldr	r3, [r7, #20]
 811026a:	3214      	adds	r2, #20
 811026c:	60da      	str	r2, [r3, #12]

    /* Setup the packet length.  */
    packet_ptr -> nx_packet_length =  sizeof(NX_TCP_HEADER);
 811026e:	697b      	ldr	r3, [r7, #20]
 8110270:	2214      	movs	r2, #20
 8110272:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8110274:	697b      	ldr	r3, [r7, #20]
 8110276:	689b      	ldr	r3, [r3, #8]
 8110278:	61fb      	str	r3, [r7, #28]

    /* Build the control request in the TCP header.  */
    tcp_header_ptr -> nx_tcp_header_word_0 =        (((ULONG)(socket_ptr -> nx_tcp_socket_port)) << NX_SHIFT_BY_16) | (ULONG)socket_ptr -> nx_tcp_socket_connect_port;
 811027a:	68fb      	ldr	r3, [r7, #12]
 811027c:	68db      	ldr	r3, [r3, #12]
 811027e:	041a      	lsls	r2, r3, #16
 8110280:	68fb      	ldr	r3, [r7, #12]
 8110282:	69db      	ldr	r3, [r3, #28]
 8110284:	431a      	orrs	r2, r3
 8110286:	69fb      	ldr	r3, [r7, #28]
 8110288:	601a      	str	r2, [r3, #0]
    tcp_header_ptr -> nx_tcp_sequence_number =      tx_sequence;
 811028a:	69fb      	ldr	r3, [r7, #28]
 811028c:	687a      	ldr	r2, [r7, #4]
 811028e:	605a      	str	r2, [r3, #4]
    tcp_header_ptr -> nx_tcp_acknowledgment_number = ack_number;
 8110290:	69fb      	ldr	r3, [r7, #28]
 8110292:	683a      	ldr	r2, [r7, #0]
 8110294:	609a      	str	r2, [r3, #8]
    tcp_header_ptr -> nx_tcp_header_word_3 =        header_size | control_bits | window_size;
 8110296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8110298:	68bb      	ldr	r3, [r7, #8]
 811029a:	431a      	orrs	r2, r3
 811029c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811029e:	431a      	orrs	r2, r3
 81102a0:	69fb      	ldr	r3, [r7, #28]
 81102a2:	60da      	str	r2, [r3, #12]
    tcp_header_ptr -> nx_tcp_header_word_4 =        0;
 81102a4:	69fb      	ldr	r3, [r7, #28]
 81102a6:	2200      	movs	r2, #0
 81102a8:	611a      	str	r2, [r3, #16]

    /* Remember the last ACKed sequence and the last reported window size.  */
    socket_ptr -> nx_tcp_socket_rx_sequence_acked =    ack_number;
 81102aa:	68fb      	ldr	r3, [r7, #12]
 81102ac:	683a      	ldr	r2, [r7, #0]
 81102ae:	645a      	str	r2, [r3, #68]	@ 0x44
    socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 81102b0:	68fb      	ldr	r3, [r7, #12]
 81102b2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 81102b4:	68fb      	ldr	r3, [r7, #12]
 81102b6:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the TCP header.  */
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_0);
 81102b8:	69fb      	ldr	r3, [r7, #28]
 81102ba:	681b      	ldr	r3, [r3, #0]
 81102bc:	ba1a      	rev	r2, r3
 81102be:	69fb      	ldr	r3, [r7, #28]
 81102c0:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_sequence_number);
 81102c2:	69fb      	ldr	r3, [r7, #28]
 81102c4:	685b      	ldr	r3, [r3, #4]
 81102c6:	ba1a      	rev	r2, r3
 81102c8:	69fb      	ldr	r3, [r7, #28]
 81102ca:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_acknowledgment_number);
 81102cc:	69fb      	ldr	r3, [r7, #28]
 81102ce:	689b      	ldr	r3, [r3, #8]
 81102d0:	ba1a      	rev	r2, r3
 81102d2:	69fb      	ldr	r3, [r7, #28]
 81102d4:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_3);
 81102d6:	69fb      	ldr	r3, [r7, #28]
 81102d8:	68db      	ldr	r3, [r3, #12]
 81102da:	ba1a      	rev	r2, r3
 81102dc:	69fb      	ldr	r3, [r7, #28]
 81102de:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 81102e0:	69fb      	ldr	r3, [r7, #28]
 81102e2:	691b      	ldr	r3, [r3, #16]
 81102e4:	ba1a      	rev	r2, r3
 81102e6:	69fb      	ldr	r3, [r7, #28]
 81102e8:	611a      	str	r2, [r3, #16]

    /* Check whether or not data is set. */
    if (data)
 81102ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81102ec:	2b00      	cmp	r3, #0
 81102ee:	d00a      	beq.n	8110306 <_nx_tcp_packet_send_control+0x13a>
    {

        /* Zero window probe data exist. */
        *packet_ptr -> nx_packet_append_ptr++ = *data;
 81102f0:	697a      	ldr	r2, [r7, #20]
 81102f2:	68d3      	ldr	r3, [r2, #12]
 81102f4:	1c59      	adds	r1, r3, #1
 81102f6:	60d1      	str	r1, [r2, #12]
 81102f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 81102fa:	7812      	ldrb	r2, [r2, #0]
 81102fc:	701a      	strb	r2, [r3, #0]
        packet_ptr -> nx_packet_length++;
 81102fe:	697b      	ldr	r3, [r7, #20]
 8110300:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8110302:	3201      	adds	r2, #1
 8110304:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Whether it is a SYN packet. */
    if (control_bits & NX_TCP_SYN_BIT)
 8110306:	68bb      	ldr	r3, [r7, #8]
 8110308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 811030c:	2b00      	cmp	r3, #0
 811030e:	d018      	beq.n	8110342 <_nx_tcp_packet_send_control+0x176>
    {

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the TCP header.  */
        NX_CHANGE_ULONG_ENDIAN(option_word_1);
 8110310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8110312:	ba1b      	rev	r3, r3
 8110314:	64bb      	str	r3, [r7, #72]	@ 0x48
        NX_CHANGE_ULONG_ENDIAN(option_word_2);
 8110316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8110318:	ba1b      	rev	r3, r3
 811031a:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Set options. */
        /*lint --e{927} --e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)packet_ptr -> nx_packet_append_ptr) = option_word_1;
 811031c:	697b      	ldr	r3, [r7, #20]
 811031e:	68db      	ldr	r3, [r3, #12]
 8110320:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8110322:	601a      	str	r2, [r3, #0]
        *(((ULONG *)packet_ptr -> nx_packet_append_ptr) + 1) = option_word_2;
 8110324:	697b      	ldr	r3, [r7, #20]
 8110326:	68db      	ldr	r3, [r3, #12]
 8110328:	3304      	adds	r3, #4
 811032a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 811032c:	601a      	str	r2, [r3, #0]

        /* Adjust packet information. */
        packet_ptr -> nx_packet_append_ptr += (sizeof(ULONG) << 1);
 811032e:	697b      	ldr	r3, [r7, #20]
 8110330:	68da      	ldr	r2, [r3, #12]
 8110332:	697b      	ldr	r3, [r7, #20]
 8110334:	3208      	adds	r2, #8
 8110336:	60da      	str	r2, [r3, #12]
        packet_ptr -> nx_packet_length += (ULONG)(sizeof(ULONG) << 1);
 8110338:	697b      	ldr	r3, [r7, #20]
 811033a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811033c:	697b      	ldr	r3, [r7, #20]
 811033e:	3208      	adds	r2, #8
 8110340:	625a      	str	r2, [r3, #36]	@ 0x24
    {


        /* Set the packet source IP address. */
#ifndef NX_DISABLE_IPV4
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8110342:	68fb      	ldr	r3, [r7, #12]
 8110344:	695b      	ldr	r3, [r3, #20]
 8110346:	2b04      	cmp	r3, #4
 8110348:	d106      	bne.n	8110358 <_nx_tcp_packet_send_control+0x18c>
        {

            /* For IPv4 the IP instance has only one global address. */
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 811034a:	68fb      	ldr	r3, [r7, #12]
 811034c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 811034e:	3314      	adds	r3, #20
 8110350:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Set the destination address to the other side of the TCP connection. */
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 8110352:	68fb      	ldr	r3, [r7, #12]
 8110354:	3318      	adds	r3, #24
 8110356:	633b      	str	r3, [r7, #48]	@ 0x30
            dest_ip = socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6;
        }
#endif /* FEATURE_NX_IPV6 */

        /* Calculate the TCP checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 8110358:	6978      	ldr	r0, [r7, #20]
                                            (UINT)packet_ptr -> nx_packet_length, source_ip, dest_ip);
 811035a:	697b      	ldr	r3, [r7, #20]
 811035c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 811035e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110360:	9300      	str	r3, [sp, #0]
 8110362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110364:	2106      	movs	r1, #6
 8110366:	f7fc fae8 	bl	810c93a <_nx_ip_checksum_compute>
 811036a:	4603      	mov	r3, r0
 811036c:	61bb      	str	r3, [r7, #24]

        checksum = ~checksum & NX_LOWER_16_MASK;
 811036e:	69bb      	ldr	r3, [r7, #24]
 8110370:	43db      	mvns	r3, r3
 8110372:	b29b      	uxth	r3, r3
 8110374:	61bb      	str	r3, [r7, #24]

        /* Move the checksum into header.  */
        NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8110376:	69fb      	ldr	r3, [r7, #28]
 8110378:	691b      	ldr	r3, [r3, #16]
 811037a:	ba1a      	rev	r2, r3
 811037c:	69fb      	ldr	r3, [r7, #28]
 811037e:	611a      	str	r2, [r3, #16]
        tcp_header_ptr -> nx_tcp_header_word_4 =  (checksum << NX_SHIFT_BY_16);
 8110380:	69bb      	ldr	r3, [r7, #24]
 8110382:	041a      	lsls	r2, r3, #16
 8110384:	69fb      	ldr	r3, [r7, #28]
 8110386:	611a      	str	r2, [r3, #16]
        NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8110388:	69fb      	ldr	r3, [r7, #28]
 811038a:	691b      	ldr	r3, [r3, #16]
 811038c:	ba1a      	rev	r2, r3
 811038e:	69fb      	ldr	r3, [r7, #28]
 8110390:	611a      	str	r2, [r3, #16]
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY  */

#ifndef NX_DISABLE_IPV4
    /* Send the TCP packet to the IP component.  */
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8110392:	68fb      	ldr	r3, [r7, #12]
 8110394:	695b      	ldr	r3, [r3, #20]
 8110396:	2b04      	cmp	r3, #4
 8110398:	d11b      	bne.n	81103d2 <_nx_tcp_packet_send_control+0x206>
    {

        _nx_ip_packet_send(ip_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
 811039a:	6978      	ldr	r0, [r7, #20]
 811039c:	68fb      	ldr	r3, [r7, #12]
 811039e:	699c      	ldr	r4, [r3, #24]
 81103a0:	68fb      	ldr	r3, [r7, #12]
 81103a2:	f8d3 50a4 	ldr.w	r5, [r3, #164]	@ 0xa4
                           socket_ptr -> nx_tcp_socket_type_of_service, socket_ptr -> nx_tcp_socket_time_to_live, NX_IP_TCP,
 81103a6:	68fb      	ldr	r3, [r7, #12]
 81103a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
        _nx_ip_packet_send(ip_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
 81103ac:	68fa      	ldr	r2, [r7, #12]
 81103ae:	f8d2 20ac 	ldr.w	r2, [r2, #172]	@ 0xac
 81103b2:	68f9      	ldr	r1, [r7, #12]
 81103b4:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 81103b6:	9103      	str	r1, [sp, #12]
 81103b8:	9202      	str	r2, [sp, #8]
 81103ba:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 81103be:	9201      	str	r2, [sp, #4]
 81103c0:	9300      	str	r3, [sp, #0]
 81103c2:	462b      	mov	r3, r5
 81103c4:	4622      	mov	r2, r4
 81103c6:	4601      	mov	r1, r0
 81103c8:	6a38      	ldr	r0, [r7, #32]
 81103ca:	f7fd f9ad 	bl	810d728 <_nx_ip_packet_send>
 81103ce:	e000      	b.n	81103d2 <_nx_tcp_packet_send_control+0x206>
                return;
 81103d0:	bf00      	nop
        _nx_ipv6_packet_send(ip_ptr, packet_ptr, NX_PROTOCOL_TCP, packet_ptr -> nx_packet_length, ip_ptr -> nx_ipv6_hop_limit,
                             socket_ptr -> nx_tcp_socket_ipv6_addr -> nxd_ipv6_address,
                             socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
    }
#endif /* FEATURE_NX_IPV6 */
}
 81103d2:	3738      	adds	r7, #56	@ 0x38
 81103d4:	46bd      	mov	sp, r7
 81103d6:	bdb0      	pop	{r4, r5, r7, pc}

081103d8 <_nx_tcp_packet_send_fin>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_fin(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 81103d8:	b580      	push	{r7, lr}
 81103da:	b086      	sub	sp, #24
 81103dc:	af04      	add	r7, sp, #16
 81103de:	6078      	str	r0, [r7, #4]
 81103e0:	6039      	str	r1, [r7, #0]
    _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_FIN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 81103e2:	687b      	ldr	r3, [r7, #4]
 81103e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81103e6:	2200      	movs	r2, #0
 81103e8:	9202      	str	r2, [sp, #8]
 81103ea:	2200      	movs	r2, #0
 81103ec:	9201      	str	r2, [sp, #4]
 81103ee:	2200      	movs	r2, #0
 81103f0:	9200      	str	r2, [sp, #0]
 81103f2:	683a      	ldr	r2, [r7, #0]
 81103f4:	f44f 1188 	mov.w	r1, #1114112	@ 0x110000
 81103f8:	6878      	ldr	r0, [r7, #4]
 81103fa:	f7ff fee7 	bl	81101cc <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, NX_NULL);
}
 81103fe:	bf00      	nop
 8110400:	3708      	adds	r7, #8
 8110402:	46bd      	mov	sp, r7
 8110404:	bd80      	pop	{r7, pc}
	...

08110408 <_nx_tcp_packet_send_probe>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_probe(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence, UCHAR data)
{
 8110408:	b580      	push	{r7, lr}
 811040a:	b088      	sub	sp, #32
 811040c:	af04      	add	r7, sp, #16
 811040e:	60f8      	str	r0, [r7, #12]
 8110410:	60b9      	str	r1, [r7, #8]
 8110412:	4613      	mov	r3, r2
 8110414:	71fb      	strb	r3, [r7, #7]

    _nx_tcp_packet_send_control(socket_ptr, NX_TCP_ACK_BIT, tx_sequence,
 8110416:	68fb      	ldr	r3, [r7, #12]
 8110418:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 811041a:	1dfb      	adds	r3, r7, #7
 811041c:	9302      	str	r3, [sp, #8]
 811041e:	2300      	movs	r3, #0
 8110420:	9301      	str	r3, [sp, #4]
 8110422:	2300      	movs	r3, #0
 8110424:	9300      	str	r3, [sp, #0]
 8110426:	4613      	mov	r3, r2
 8110428:	68ba      	ldr	r2, [r7, #8]
 811042a:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 811042e:	68f8      	ldr	r0, [r7, #12]
 8110430:	f7ff fecc 	bl	81101cc <_nx_tcp_packet_send_control>
                                socket_ptr -> nx_tcp_socket_rx_sequence, 0, 0, &data);

    /* Setup a new delayed ACK timeout.  */
    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 8110434:	4b03      	ldr	r3, [pc, #12]	@ (8110444 <_nx_tcp_packet_send_probe+0x3c>)
 8110436:	681a      	ldr	r2, [r3, #0]
 8110438:	68fb      	ldr	r3, [r7, #12]
 811043a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 811043c:	bf00      	nop
 811043e:	3710      	adds	r7, #16
 8110440:	46bd      	mov	sp, r7
 8110442:	bd80      	pop	{r7, pc}
 8110444:	200580e4 	.word	0x200580e4

08110448 <_nx_tcp_packet_send_rst>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_rst(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *header_ptr)
{
 8110448:	b580      	push	{r7, lr}
 811044a:	b086      	sub	sp, #24
 811044c:	af04      	add	r7, sp, #16
 811044e:	6078      	str	r0, [r7, #4]
 8110450:	6039      	str	r1, [r7, #0]
    /* Reset Generation, RFC793, Section3.4, Page37, the RST packet is set up based on if the incoming packet has the ACK bit set. */
    /* If the incoming segment has an ACK field, the reset takes its sequence number from the ACK field of the segment,
       otherwise the reset has sequence number zero and the ACK field is set to the sum of the sequence number and segment length of the incoming segment.  */

    /* Check for the ACK bit in the incoming TCP header.  */
    if (header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 8110452:	683b      	ldr	r3, [r7, #0]
 8110454:	68db      	ldr	r3, [r3, #12]
 8110456:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 811045a:	2b00      	cmp	r3, #0
 811045c:	d00e      	beq.n	811047c <_nx_tcp_packet_send_rst+0x34>
    {
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_RST_BIT, header_ptr -> nx_tcp_acknowledgment_number,
 811045e:	683b      	ldr	r3, [r7, #0]
 8110460:	689a      	ldr	r2, [r3, #8]
 8110462:	2300      	movs	r3, #0
 8110464:	9302      	str	r3, [sp, #8]
 8110466:	2300      	movs	r3, #0
 8110468:	9301      	str	r3, [sp, #4]
 811046a:	2300      	movs	r3, #0
 811046c:	9300      	str	r3, [sp, #0]
 811046e:	2300      	movs	r3, #0
 8110470:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 8110474:	6878      	ldr	r0, [r7, #4]
 8110476:	f7ff fea9 	bl	81101cc <_nx_tcp_packet_send_control>
 811047a:	e00d      	b.n	8110498 <_nx_tcp_packet_send_rst+0x50>
                                    0, 0, 0, NX_NULL);
    }
    else
    {
        _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_RST_BIT | NX_TCP_ACK_BIT), 0,
 811047c:	683b      	ldr	r3, [r7, #0]
 811047e:	685b      	ldr	r3, [r3, #4]
 8110480:	2200      	movs	r2, #0
 8110482:	9202      	str	r2, [sp, #8]
 8110484:	2200      	movs	r2, #0
 8110486:	9201      	str	r2, [sp, #4]
 8110488:	2200      	movs	r2, #0
 811048a:	9200      	str	r2, [sp, #0]
 811048c:	2200      	movs	r2, #0
 811048e:	f44f 11a0 	mov.w	r1, #1310720	@ 0x140000
 8110492:	6878      	ldr	r0, [r7, #4]
 8110494:	f7ff fe9a 	bl	81101cc <_nx_tcp_packet_send_control>
                                    header_ptr -> nx_tcp_sequence_number, 0, 0, NX_NULL);
    }

#ifndef NX_DISABLE_TCP_INFO
    /* Increment the resets sent count.  */
    socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_resets_sent++;
 8110498:	687b      	ldr	r3, [r7, #4]
 811049a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 811049e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 81104a2:	3201      	adds	r2, #1
 81104a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
#endif /* NX_DISABLE_TCP_INFO */
}
 81104a8:	bf00      	nop
 81104aa:	3708      	adds	r7, #8
 81104ac:	46bd      	mov	sp, r7
 81104ae:	bd80      	pop	{r7, pc}

081104b0 <_nx_tcp_packet_send_syn>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_packet_send_syn(NX_TCP_SOCKET *socket_ptr, ULONG tx_sequence)
{
 81104b0:	b580      	push	{r7, lr}
 81104b2:	b08a      	sub	sp, #40	@ 0x28
 81104b4:	af04      	add	r7, sp, #16
 81104b6:	6078      	str	r0, [r7, #4]
 81104b8:	6039      	str	r1, [r7, #0]
ULONG        option_word_2;
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
UINT         include_window_scaling = NX_FALSE;
UINT         scale_factor;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
ULONG        mss = 0;
 81104ba:	2300      	movs	r3, #0
 81104bc:	617b      	str	r3, [r7, #20]
    }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
    /* Update the mss value based on IP version type. */
    if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 81104be:	687b      	ldr	r3, [r7, #4]
 81104c0:	695b      	ldr	r3, [r3, #20]
 81104c2:	2b04      	cmp	r3, #4
 81104c4:	d104      	bne.n	81104d0 <_nx_tcp_packet_send_syn+0x20>
    {
        mss = (ULONG)((socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_mtu_size - sizeof(NX_IPV4_HEADER)) - sizeof(NX_TCP_HEADER));
 81104c6:	687b      	ldr	r3, [r7, #4]
 81104c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81104ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81104cc:	3b28      	subs	r3, #40	@ 0x28
 81104ce:	617b      	str	r3, [r7, #20]
        }
#endif /* NX_IPSEC_ENABLE */
    }
#endif /* FEATURE_NX_IPV6 */

    mss &= 0x0000FFFFUL;
 81104d0:	697b      	ldr	r3, [r7, #20]
 81104d2:	b29b      	uxth	r3, r3
 81104d4:	617b      	str	r3, [r7, #20]

    if ((socket_ptr -> nx_tcp_socket_mss < mss) && socket_ptr -> nx_tcp_socket_mss)
 81104d6:	687b      	ldr	r3, [r7, #4]
 81104d8:	691b      	ldr	r3, [r3, #16]
 81104da:	697a      	ldr	r2, [r7, #20]
 81104dc:	429a      	cmp	r2, r3
 81104de:	d906      	bls.n	81104ee <_nx_tcp_packet_send_syn+0x3e>
 81104e0:	687b      	ldr	r3, [r7, #4]
 81104e2:	691b      	ldr	r3, [r3, #16]
 81104e4:	2b00      	cmp	r3, #0
 81104e6:	d002      	beq.n	81104ee <_nx_tcp_packet_send_syn+0x3e>
    {

        /* Use the custom MSS. */
        mss = socket_ptr -> nx_tcp_socket_mss;
 81104e8:	687b      	ldr	r3, [r7, #4]
 81104ea:	691b      	ldr	r3, [r3, #16]
 81104ec:	617b      	str	r3, [r7, #20]
    }

    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_RECEIVED)
 81104ee:	687b      	ldr	r3, [r7, #4]
 81104f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81104f2:	2b04      	cmp	r3, #4
 81104f4:	d115      	bne.n	8110522 <_nx_tcp_packet_send_syn+0x72>
    {

        /* Update the connect MSS for TCP server socket. */
        if (mss < socket_ptr -> nx_tcp_socket_peer_mss)
 81104f6:	687b      	ldr	r3, [r7, #4]
 81104f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81104fa:	697a      	ldr	r2, [r7, #20]
 81104fc:	429a      	cmp	r2, r3
 81104fe:	d203      	bcs.n	8110508 <_nx_tcp_packet_send_syn+0x58>
        {
            socket_ptr -> nx_tcp_socket_connect_mss  = mss;
 8110500:	687b      	ldr	r3, [r7, #4]
 8110502:	697a      	ldr	r2, [r7, #20]
 8110504:	621a      	str	r2, [r3, #32]
 8110506:	e003      	b.n	8110510 <_nx_tcp_packet_send_syn+0x60>
        }
        else
        {
            socket_ptr -> nx_tcp_socket_connect_mss =  socket_ptr -> nx_tcp_socket_peer_mss;
 8110508:	687b      	ldr	r3, [r7, #4]
 811050a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811050c:	687b      	ldr	r3, [r7, #4]
 811050e:	621a      	str	r2, [r3, #32]
        }

        /* Compute the SMSS * SMSS value, so later TCP module doesn't need to redo the multiplication. */
        socket_ptr -> nx_tcp_socket_connect_mss2 =
            socket_ptr -> nx_tcp_socket_connect_mss * socket_ptr -> nx_tcp_socket_connect_mss;
 8110510:	687b      	ldr	r3, [r7, #4]
 8110512:	6a1b      	ldr	r3, [r3, #32]
 8110514:	687a      	ldr	r2, [r7, #4]
 8110516:	6a12      	ldr	r2, [r2, #32]
 8110518:	fb03 f202 	mul.w	r2, r3, r2
        socket_ptr -> nx_tcp_socket_connect_mss2 =
 811051c:	687b      	ldr	r3, [r7, #4]
 811051e:	631a      	str	r2, [r3, #48]	@ 0x30
 8110520:	e002      	b.n	8110528 <_nx_tcp_packet_send_syn+0x78>
    }
    else
    {

        /* Set the MSS. */
        socket_ptr -> nx_tcp_socket_connect_mss = mss;
 8110522:	687b      	ldr	r3, [r7, #4]
 8110524:	697a      	ldr	r2, [r7, #20]
 8110526:	621a      	str	r2, [r3, #32]
    }

    /* Build the MSS option.  */
    option_word_1 = NX_TCP_MSS_OPTION | mss;
 8110528:	697b      	ldr	r3, [r7, #20]
 811052a:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 811052e:	613b      	str	r3, [r7, #16]

    /* Set default option word2. */
    option_word_2 = NX_TCP_OPTION_END;
 8110530:	4b16      	ldr	r3, [pc, #88]	@ (811058c <_nx_tcp_packet_send_syn+0xdc>)
 8110532:	60fb      	str	r3, [r7, #12]
        socket_ptr -> nx_tcp_rcv_win_scale_value = scale_factor;
    }
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

    /* Send SYN or SYN+ACK packet according to socket state. */
    if (socket_ptr -> nx_tcp_socket_state == NX_TCP_SYN_SENT)
 8110534:	687b      	ldr	r3, [r7, #4]
 8110536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8110538:	2b03      	cmp	r3, #3
 811053a:	d10d      	bne.n	8110558 <_nx_tcp_packet_send_syn+0xa8>
    {
        _nx_tcp_packet_send_control(socket_ptr, NX_TCP_SYN_BIT, tx_sequence,
 811053c:	2300      	movs	r3, #0
 811053e:	9302      	str	r3, [sp, #8]
 8110540:	68fb      	ldr	r3, [r7, #12]
 8110542:	9301      	str	r3, [sp, #4]
 8110544:	693b      	ldr	r3, [r7, #16]
 8110546:	9300      	str	r3, [sp, #0]
 8110548:	2300      	movs	r3, #0
 811054a:	683a      	ldr	r2, [r7, #0]
 811054c:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8110550:	6878      	ldr	r0, [r7, #4]
 8110552:	f7ff fe3b 	bl	81101cc <_nx_tcp_packet_send_control>
 8110556:	e00e      	b.n	8110576 <_nx_tcp_packet_send_syn+0xc6>
                                    0, option_word_1, option_word_2, NX_NULL);
    }
    else
    {
        _nx_tcp_packet_send_control(socket_ptr, (NX_TCP_SYN_BIT | NX_TCP_ACK_BIT), tx_sequence,
 8110558:	687b      	ldr	r3, [r7, #4]
 811055a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 811055c:	2300      	movs	r3, #0
 811055e:	9302      	str	r3, [sp, #8]
 8110560:	68fb      	ldr	r3, [r7, #12]
 8110562:	9301      	str	r3, [sp, #4]
 8110564:	693b      	ldr	r3, [r7, #16]
 8110566:	9300      	str	r3, [sp, #0]
 8110568:	4613      	mov	r3, r2
 811056a:	683a      	ldr	r2, [r7, #0]
 811056c:	f44f 1190 	mov.w	r1, #1179648	@ 0x120000
 8110570:	6878      	ldr	r0, [r7, #4]
 8110572:	f7ff fe2b 	bl	81101cc <_nx_tcp_packet_send_control>
                                    socket_ptr -> nx_tcp_socket_rx_sequence, option_word_1, option_word_2, NX_NULL);
    }

    /* Initialize recover sequence and previous cumulative acknowledgment. */
    socket_ptr -> nx_tcp_socket_tx_sequence_recover = tx_sequence;
 8110576:	687b      	ldr	r3, [r7, #4]
 8110578:	683a      	ldr	r2, [r7, #0]
 811057a:	661a      	str	r2, [r3, #96]	@ 0x60
    socket_ptr -> nx_tcp_socket_previous_highest_ack = tx_sequence;
 811057c:	687b      	ldr	r3, [r7, #4]
 811057e:	683a      	ldr	r2, [r7, #0]
 8110580:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8110582:	bf00      	nop
 8110584:	3718      	adds	r7, #24
 8110586:	46bd      	mov	sp, r7
 8110588:	bd80      	pop	{r7, pc}
 811058a:	bf00      	nop
 811058c:	01010100 	.word	0x01010100

08110590 <_nx_tcp_periodic_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_periodic_processing(NX_IP *ip_ptr)
{
 8110590:	b480      	push	{r7}
 8110592:	b083      	sub	sp, #12
 8110594:	af00      	add	r7, sp, #0
 8110596:	6078      	str	r0, [r7, #4]
        keepalive_enabled = socket_ptr -> nx_tcp_socket_keepalive_enabled;
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
#endif
}
 8110598:	bf00      	nop
 811059a:	370c      	adds	r7, #12
 811059c:	46bd      	mov	sp, r7
 811059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81105a2:	4770      	bx	lr

081105a4 <_nx_tcp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_queue_process(NX_IP *ip_ptr)
{
 81105a4:	b580      	push	{r7, lr}
 81105a6:	b088      	sub	sp, #32
 81105a8:	af00      	add	r7, sp, #0
 81105aa:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 81105ac:	f3ef 8310 	mrs	r3, PRIMASK
 81105b0:	60fb      	str	r3, [r7, #12]
    return(posture);
 81105b2:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 81105b4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 81105b6:	b672      	cpsid	i
    return(int_posture);
 81105b8:	68bb      	ldr	r3, [r7, #8]
NX_PACKET *queue_head;
NX_PACKET *packet_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 81105ba:	61bb      	str	r3, [r7, #24]

    /* Remove the TCP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_tcp_queue_head;
 81105bc:	687b      	ldr	r3, [r7, #4]
 81105be:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	@ 0x4a8
 81105c2:	61fb      	str	r3, [r7, #28]
    ip_ptr -> nx_ip_tcp_queue_head =  NX_NULL;
 81105c4:	687b      	ldr	r3, [r7, #4]
 81105c6:	2200      	movs	r2, #0
 81105c8:	f8c3 24a8 	str.w	r2, [r3, #1192]	@ 0x4a8
    ip_ptr -> nx_ip_tcp_queue_tail =  NX_NULL;
 81105cc:	687b      	ldr	r3, [r7, #4]
 81105ce:	2200      	movs	r2, #0
 81105d0:	f8c3 24ac 	str.w	r2, [r3, #1196]	@ 0x4ac
    ip_ptr -> nx_ip_tcp_received_packet_count =  0;
 81105d4:	687b      	ldr	r3, [r7, #4]
 81105d6:	2200      	movs	r2, #0
 81105d8:	f8c3 24b0 	str.w	r2, [r3, #1200]	@ 0x4b0
 81105dc:	69bb      	ldr	r3, [r7, #24]
 81105de:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81105e0:	693b      	ldr	r3, [r7, #16]
 81105e2:	f383 8810 	msr	PRIMASK, r3
}
 81105e6:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire TCP message queue and process packets
       one by one.  */
    while (queue_head)
 81105e8:	e00b      	b.n	8110602 <_nx_tcp_queue_process+0x5e>
    {

        /* Pickup the first queue TCP message and remove it from the
           TCP queue.  */
        packet_ptr =  queue_head;
 81105ea:	69fb      	ldr	r3, [r7, #28]
 81105ec:	617b      	str	r3, [r7, #20]
        queue_head =  queue_head -> nx_packet_queue_next;
 81105ee:	69fb      	ldr	r3, [r7, #28]
 81105f0:	69db      	ldr	r3, [r3, #28]
 81105f2:	61fb      	str	r3, [r7, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 81105f4:	697b      	ldr	r3, [r7, #20]
 81105f6:	2200      	movs	r2, #0
 81105f8:	61da      	str	r2, [r3, #28]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Process the packet.  */
        _nx_tcp_packet_process(ip_ptr, packet_ptr);
 81105fa:	6979      	ldr	r1, [r7, #20]
 81105fc:	6878      	ldr	r0, [r7, #4]
 81105fe:	f7ff f9f1 	bl	810f9e4 <_nx_tcp_packet_process>
    while (queue_head)
 8110602:	69fb      	ldr	r3, [r7, #28]
 8110604:	2b00      	cmp	r3, #0
 8110606:	d1f0      	bne.n	81105ea <_nx_tcp_queue_process+0x46>
    }
}
 8110608:	bf00      	nop
 811060a:	bf00      	nop
 811060c:	3720      	adds	r7, #32
 811060e:	46bd      	mov	sp, r7
 8110610:	bd80      	pop	{r7, pc}
	...

08110614 <_nx_tcp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8110614:	b580      	push	{r7, lr}
 8110616:	b08e      	sub	sp, #56	@ 0x38
 8110618:	af00      	add	r7, sp, #0
 811061a:	6078      	str	r0, [r7, #4]
 811061c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 811061e:	f3ef 8310 	mrs	r3, PRIMASK
 8110622:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8110624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8110626:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8110628:	b672      	cpsid	i
    return(int_posture);
 811062a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
NX_TCP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 811062c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 811062e:	687b      	ldr	r3, [r7, #4]
 8110630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110632:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 8110634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110636:	2b00      	cmp	r3, #0
 8110638:	d004      	beq.n	8110644 <_nx_tcp_receive_cleanup+0x30>
 811063a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811063c:	681b      	ldr	r3, [r3, #0]
 811063e:	4a43      	ldr	r2, [pc, #268]	@ (811074c <_nx_tcp_receive_cleanup+0x138>)
 8110640:	4293      	cmp	r3, r2
 8110642:	d006      	beq.n	8110652 <_nx_tcp_receive_cleanup+0x3e>
 8110644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110646:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8110648:	6a3b      	ldr	r3, [r7, #32]
 811064a:	f383 8810 	msr	PRIMASK, r3
}
 811064e:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 8110650:	e078      	b.n	8110744 <_nx_tcp_receive_cleanup+0x130>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 8110652:	687b      	ldr	r3, [r7, #4]
 8110654:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8110656:	2b00      	cmp	r3, #0
 8110658:	d106      	bne.n	8110668 <_nx_tcp_receive_cleanup+0x54>
 811065a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811065c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811065e:	69fb      	ldr	r3, [r7, #28]
 8110660:	f383 8810 	msr	PRIMASK, r3
}
 8110664:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 8110666:	e06d      	b.n	8110744 <_nx_tcp_receive_cleanup+0x130>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8110668:	f3ef 8305 	mrs	r3, IPSR
 811066c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 811066e:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 8110670:	4b37      	ldr	r3, [pc, #220]	@ (8110750 <_nx_tcp_receive_cleanup+0x13c>)
 8110672:	681b      	ldr	r3, [r3, #0]
 8110674:	4313      	orrs	r3, r2
 8110676:	2b00      	cmp	r3, #0
 8110678:	d104      	bne.n	8110684 <_nx_tcp_receive_cleanup+0x70>
 811067a:	4b36      	ldr	r3, [pc, #216]	@ (8110754 <_nx_tcp_receive_cleanup+0x140>)
 811067c:	681b      	ldr	r3, [r3, #0]
 811067e:	4a36      	ldr	r2, [pc, #216]	@ (8110758 <_nx_tcp_receive_cleanup+0x144>)
 8110680:	4293      	cmp	r3, r2
 8110682:	d116      	bne.n	81106b2 <_nx_tcp_receive_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8110684:	687b      	ldr	r3, [r7, #4]
 8110686:	4a35      	ldr	r2, [pc, #212]	@ (811075c <_nx_tcp_receive_cleanup+0x148>)
 8110688:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 811068a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811068c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8110690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8110692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110694:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8110696:	697b      	ldr	r3, [r7, #20]
 8110698:	f383 8810 	msr	PRIMASK, r3
}
 811069c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 811069e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81106a0:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 81106a4:	2200      	movs	r2, #0
 81106a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 81106aa:	4618      	mov	r0, r3
 81106ac:	f003 fece 	bl	811444c <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 81106b0:	e048      	b.n	8110744 <_nx_tcp_receive_cleanup+0x130>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 81106b2:	687b      	ldr	r3, [r7, #4]
 81106b4:	2200      	movs	r2, #0
 81106b6:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 81106b8:	687b      	ldr	r3, [r7, #4]
 81106ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81106bc:	687a      	ldr	r2, [r7, #4]
 81106be:	429a      	cmp	r2, r3
 81106c0:	d104      	bne.n	81106cc <_nx_tcp_receive_cleanup+0xb8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_tcp_socket_receive_suspension_list =  NX_NULL;
 81106c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81106c4:	2200      	movs	r2, #0
 81106c6:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 81106ca:	e00e      	b.n	81106ea <_nx_tcp_receive_cleanup+0xd6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_tcp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 81106cc:	687b      	ldr	r3, [r7, #4]
 81106ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81106d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81106d2:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 81106d6:	687b      	ldr	r3, [r7, #4]
 81106d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous;
 81106da:	687a      	ldr	r2, [r7, #4]
 81106dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 81106de:	675a      	str	r2, [r3, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 81106e0:	687b      	ldr	r3, [r7, #4]
 81106e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_next;
 81106e4:	687a      	ldr	r2, [r7, #4]
 81106e6:	6f12      	ldr	r2, [r2, #112]	@ 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 81106e8:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 81106ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81106ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81106f0:	1e5a      	subs	r2, r3, #1
 81106f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81106f4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 81106f8:	687b      	ldr	r3, [r7, #4]
 81106fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81106fc:	2b0c      	cmp	r3, #12
 81106fe:	d11b      	bne.n	8110738 <_nx_tcp_receive_cleanup+0x124>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Determine which receive error is present.  */
            if (socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED)
 8110700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8110704:	2b05      	cmp	r3, #5
 8110706:	d004      	beq.n	8110712 <_nx_tcp_receive_cleanup+0xfe>
            {

                /* This socket is no longer connected.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 8110708:	687b      	ldr	r3, [r7, #4]
 811070a:	2238      	movs	r2, #56	@ 0x38
 811070c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8110710:	e003      	b.n	811071a <_nx_tcp_receive_cleanup+0x106>
            }
            else
            {

                /* Setup return status.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 8110712:	687b      	ldr	r3, [r7, #4]
 8110714:	2201      	movs	r2, #1
 8110716:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            }

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 811071a:	4b11      	ldr	r3, [pc, #68]	@ (8110760 <_nx_tcp_receive_cleanup+0x14c>)
 811071c:	681b      	ldr	r3, [r3, #0]
 811071e:	3301      	adds	r3, #1
 8110720:	4a0f      	ldr	r2, [pc, #60]	@ (8110760 <_nx_tcp_receive_cleanup+0x14c>)
 8110722:	6013      	str	r3, [r2, #0]
 8110724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110726:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8110728:	693b      	ldr	r3, [r7, #16]
 811072a:	f383 8810 	msr	PRIMASK, r3
}
 811072e:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8110730:	6878      	ldr	r0, [r7, #4]
 8110732:	f005 f98d 	bl	8115a50 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8110736:	e005      	b.n	8110744 <_nx_tcp_receive_cleanup+0x130>
 8110738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811073a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811073c:	68fb      	ldr	r3, [r7, #12]
 811073e:	f383 8810 	msr	PRIMASK, r3
}
 8110742:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8110744:	3738      	adds	r7, #56	@ 0x38
 8110746:	46bd      	mov	sp, r7
 8110748:	bd80      	pop	{r7, pc}
 811074a:	bf00      	nop
 811074c:	54435020 	.word	0x54435020
 8110750:	20050088 	.word	0x20050088
 8110754:	20058128 	.word	0x20058128
 8110758:	20058270 	.word	0x20058270
 811075c:	0810f019 	.word	0x0810f019
 8110760:	200581c0 	.word	0x200581c0

08110764 <_nx_tcp_socket_block_cleanup>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_block_cleanup(NX_TCP_SOCKET *socket_ptr)
{
 8110764:	b480      	push	{r7}
 8110766:	b083      	sub	sp, #12
 8110768:	af00      	add	r7, sp, #0
 811076a:	6078      	str	r0, [r7, #4]

    /* Clean up the connect IP address.  */

    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version = 0;
 811076c:	687b      	ldr	r3, [r7, #4]
 811076e:	2200      	movs	r2, #0
 8110770:	615a      	str	r2, [r3, #20]
#ifdef FEATURE_NX_IPV6
    /* Clean up the IP address field. */
    SET_UNSPECIFIED_ADDRESS(socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v6);
#else /* FEATURE_NX_IPV6 */
    socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4 = 0;
 8110772:	687b      	ldr	r3, [r7, #4]
 8110774:	2200      	movs	r2, #0
 8110776:	619a      	str	r2, [r3, #24]
#endif /* FEATURE_NX_IPV6 */

    /* Clean up the connect port.  */
    socket_ptr -> nx_tcp_socket_connect_port = 0;
 8110778:	687b      	ldr	r3, [r7, #4]
 811077a:	2200      	movs	r2, #0
 811077c:	61da      	str	r2, [r3, #28]

    /* Reset zero window probe flag. */
    socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 811077e:	687b      	ldr	r3, [r7, #4]
 8110780:	2200      	movs	r2, #0
 8110782:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

    /* Simply clear the timeout.  */
    socket_ptr -> nx_tcp_socket_timeout = 0;
 8110786:	687b      	ldr	r3, [r7, #4]
 8110788:	2200      	movs	r2, #0
 811078a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

    /* Reset duplicated ack received. */
    socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 811078e:	687b      	ldr	r3, [r7, #4]
 8110790:	2200      	movs	r2, #0
 8110792:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Reset fast recovery stage. */
    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 8110794:	687b      	ldr	r3, [r7, #4]
 8110796:	2200      	movs	r2, #0
 8110798:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e

    /* Connection needs to be closed down immediately.  */
    if (socket_ptr -> nx_tcp_socket_client_type)
 811079c:	687b      	ldr	r3, [r7, #4]
 811079e:	689b      	ldr	r3, [r3, #8]
 81107a0:	2b00      	cmp	r3, #0
 81107a2:	d003      	beq.n	81107ac <_nx_tcp_socket_block_cleanup+0x48>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Client socket, return to a CLOSED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSED;
 81107a4:	687b      	ldr	r3, [r7, #4]
 81107a6:	2201      	movs	r2, #1
 81107a8:	639a      	str	r2, [r3, #56]	@ 0x38
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_LISTEN_STATE, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Server socket, return to LISTEN state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
    }
}
 81107aa:	e002      	b.n	81107b2 <_nx_tcp_socket_block_cleanup+0x4e>
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_LISTEN_STATE;
 81107ac:	687b      	ldr	r3, [r7, #4]
 81107ae:	2202      	movs	r2, #2
 81107b0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 81107b2:	bf00      	nop
 81107b4:	370c      	adds	r7, #12
 81107b6:	46bd      	mov	sp, r7
 81107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81107bc:	4770      	bx	lr

081107be <_nx_tcp_socket_connection_reset>:
/*                                            flushing receive queue.     */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_connection_reset(NX_TCP_SOCKET *socket_ptr)
{
 81107be:	b580      	push	{r7, lr}
 81107c0:	b084      	sub	sp, #16
 81107c2:	af00      	add	r7, sp, #0
 81107c4:	6078      	str	r0, [r7, #4]

UINT saved_state;

    /* Save the current state of the socket.  */
    saved_state =  socket_ptr -> nx_tcp_socket_state;
 81107c6:	687b      	ldr	r3, [r7, #4]
 81107c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81107ca:	60fb      	str	r3, [r7, #12]

    /* Cleanup the transmission control block.  */
    _nx_tcp_socket_block_cleanup(socket_ptr);
 81107cc:	6878      	ldr	r0, [r7, #4]
 81107ce:	f7ff ffc9 	bl	8110764 <_nx_tcp_socket_block_cleanup>

    /* Check for queued sent packets and if found they need
       to be released.  */
    if (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 81107d2:	687b      	ldr	r3, [r7, #4]
 81107d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 81107d8:	2b00      	cmp	r3, #0
 81107da:	d00a      	beq.n	81107f2 <_nx_tcp_socket_connection_reset+0x34>
    {

        /* Release all transmit packets.  */
        _nx_tcp_socket_transmit_queue_flush(socket_ptr);
 81107dc:	6878      	ldr	r0, [r7, #4]
 81107de:	f001 fd9b 	bl	8112318 <_nx_tcp_socket_transmit_queue_flush>
    }

    /* Clear all receive thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 81107e2:	e006      	b.n	81107f2 <_nx_tcp_socket_connection_reset+0x34>
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 81107e4:	687b      	ldr	r3, [r7, #4]
 81107e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 81107ea:	2100      	movs	r1, #0
 81107ec:	4618      	mov	r0, r3
 81107ee:	f7ff ff11 	bl	8110614 <_nx_tcp_receive_cleanup>
    while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 81107f2:	687b      	ldr	r3, [r7, #4]
 81107f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 81107f8:	2b00      	cmp	r3, #0
 81107fa:	d1f3      	bne.n	81107e4 <_nx_tcp_socket_connection_reset+0x26>
    }

    /* Clear all transmit thread suspensions on this socket.  */
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 81107fc:	e006      	b.n	811080c <_nx_tcp_socket_connection_reset+0x4e>
    {

        /* Call the receive thread suspension cleanup routine.  */
        _nx_tcp_transmit_cleanup(socket_ptr -> nx_tcp_socket_transmit_suspension_list NX_CLEANUP_ARGUMENT);
 81107fe:	687b      	ldr	r3, [r7, #4]
 8110800:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8110804:	2100      	movs	r1, #0
 8110806:	4618      	mov	r0, r3
 8110808:	f001 fdce 	bl	81123a8 <_nx_tcp_transmit_cleanup>
    while (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 811080c:	687b      	ldr	r3, [r7, #4]
 811080e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8110812:	2b00      	cmp	r3, #0
 8110814:	d1f3      	bne.n	81107fe <_nx_tcp_socket_connection_reset+0x40>
    }

    /* Check for suspended connect thread.  */
    if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 8110816:	687b      	ldr	r3, [r7, #4]
 8110818:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 811081c:	2b00      	cmp	r3, #0
 811081e:	d006      	beq.n	811082e <_nx_tcp_socket_connection_reset+0x70>
    {

        /* Call the connect thread suspension cleanup routine.  */
        _nx_tcp_connect_cleanup(socket_ptr -> nx_tcp_socket_connect_suspended_thread NX_CLEANUP_ARGUMENT);
 8110820:	687b      	ldr	r3, [r7, #4]
 8110822:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8110826:	2100      	movs	r1, #0
 8110828:	4618      	mov	r0, r3
 811082a:	f7fe fca7 	bl	810f17c <_nx_tcp_connect_cleanup>
    }

    /* Check for suspended disconnect thread.  */
    if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 811082e:	687b      	ldr	r3, [r7, #4]
 8110830:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8110834:	2b00      	cmp	r3, #0
 8110836:	d006      	beq.n	8110846 <_nx_tcp_socket_connection_reset+0x88>
    {

        /* Resume the thread suspended on the disconnect.  */
        _nx_tcp_disconnect_cleanup(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread NX_CLEANUP_ARGUMENT);
 8110838:	687b      	ldr	r3, [r7, #4]
 811083a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 811083e:	2100      	movs	r1, #0
 8110840:	4618      	mov	r0, r3
 8110842:	f7fe fdc7 	bl	810f3d4 <_nx_tcp_disconnect_cleanup>
    }

    /* Determine if the socket was in an established state.  */
    if (saved_state == NX_TCP_ESTABLISHED)
 8110846:	68fb      	ldr	r3, [r7, #12]
 8110848:	2b05      	cmp	r3, #5
 811084a:	d109      	bne.n	8110860 <_nx_tcp_socket_connection_reset+0xa2>
    {

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 811084c:	687b      	ldr	r3, [r7, #4]
 811084e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8110852:	2b00      	cmp	r3, #0
 8110854:	d004      	beq.n	8110860 <_nx_tcp_socket_connection_reset+0xa2>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8110856:	687b      	ldr	r3, [r7, #4]
 8110858:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 811085c:	6878      	ldr	r0, [r7, #4]
 811085e:	4798      	blx	r3

        /* Notify the application through the socket disconnect_complete callback.  */
        (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
    }
#endif
}
 8110860:	bf00      	nop
 8110862:	3710      	adds	r7, #16
 8110864:	46bd      	mov	sp, r7
 8110866:	bd80      	pop	{r7, pc}

08110868 <_nx_tcp_socket_packet_process>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_packet_process(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr)
{
 8110868:	b5b0      	push	{r4, r5, r7, lr}
 811086a:	b090      	sub	sp, #64	@ 0x40
 811086c:	af00      	add	r7, sp, #0
 811086e:	6078      	str	r0, [r7, #4]
 8110870:	6039      	str	r1, [r7, #0]

UINT          packet_queued =  NX_FALSE;
 8110872:	2300      	movs	r3, #0
 8110874:	63fb      	str	r3, [r7, #60]	@ 0x3c
ULONG         packet_data_length;
ULONG         packet_sequence;
ULONG         rx_sequence;
ULONG         rx_window;
UINT          outside_of_window;
ULONG         mss = 0;
 8110876:	2300      	movs	r3, #0
 8110878:	60bb      	str	r3, [r7, #8]

    /* Copy the TCP header, since the actual packet can be delivered to
       a waiting socket/thread during this routine and before we are done
       using the header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_copy =  *((NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr);
 811087a:	683b      	ldr	r3, [r7, #0]
 811087c:	689b      	ldr	r3, [r3, #8]
 811087e:	f107 040c 	add.w	r4, r7, #12
 8110882:	461d      	mov	r5, r3
 8110884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8110886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8110888:	682b      	ldr	r3, [r5, #0]
 811088a:	6023      	str	r3, [r4, #0]

    /* Get the size of the TCP header.  */
    header_length =  (tcp_header_copy.nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 811088c:	69bb      	ldr	r3, [r7, #24]
 811088e:	0f1b      	lsrs	r3, r3, #28
 8110890:	009b      	lsls	r3, r3, #2
 8110892:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Process the segment if socket state is equal or greater than NX_TCP_SYN_RECEIVED. According to RFC 793, Section 3.9, Page 69.  */
    if ((socket_ptr -> nx_tcp_socket_state >= NX_TCP_SYN_RECEIVED)
 8110894:	687b      	ldr	r3, [r7, #4]
 8110896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8110898:	2b03      	cmp	r3, #3
 811089a:	f240 80b5 	bls.w	8110a08 <_nx_tcp_socket_packet_process+0x1a0>
    {

        /* Step1: Check sequence number. According to RFC 793, Section 3.9, Page 69.  */

        /* Pickup the sequence of this packet. */
        packet_sequence = tcp_header_copy.nx_tcp_sequence_number;
 811089e:	693b      	ldr	r3, [r7, #16]
 81108a0:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Calculate the data length in the packet.  */
        packet_data_length = packet_ptr -> nx_packet_length - header_length;
 81108a2:	683b      	ldr	r3, [r7, #0]
 81108a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81108a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81108a8:	1ad3      	subs	r3, r2, r3
 81108aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Pickup the rx sequence.  */
        rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 81108ac:	687b      	ldr	r3, [r7, #4]
 81108ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81108b0:	62bb      	str	r3, [r7, #40]	@ 0x28
            socket_ptr -> nx_tcp_socket_rx_window_current =  socket_ptr -> nx_tcp_socket_rx_window_default;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Pickup the rx window.  */
        rx_window = socket_ptr -> nx_tcp_socket_rx_window_current;
 81108b2:	687b      	ldr	r3, [r7, #4]
 81108b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81108b6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* There are four cases for the acceptability test for an incoming segment.
           Section 3.9 Page 69, RFC 793.  */
        outside_of_window = NX_TRUE;
 81108b8:	2301      	movs	r3, #1
 81108ba:	63bb      	str	r3, [r7, #56]	@ 0x38

        if (packet_data_length == 0)
 81108bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81108be:	2b00      	cmp	r3, #0
 81108c0:	d12b      	bne.n	811091a <_nx_tcp_socket_packet_process+0xb2>
        {
            if (rx_window == 0)
 81108c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81108c4:	2b00      	cmp	r3, #0
 81108c6:	d119      	bne.n	81108fc <_nx_tcp_socket_packet_process+0x94>
            {
                if (packet_sequence == rx_sequence)
 81108c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81108ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81108cc:	429a      	cmp	r2, r3
 81108ce:	d102      	bne.n	81108d6 <_nx_tcp_socket_packet_process+0x6e>
                {
                    outside_of_window = NX_FALSE;
 81108d0:	2300      	movs	r3, #0
 81108d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 81108d4:	e044      	b.n	8110960 <_nx_tcp_socket_packet_process+0xf8>
                }
                else if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT) ||
 81108d6:	69bb      	ldr	r3, [r7, #24]
 81108d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81108dc:	2b00      	cmp	r3, #0
 81108de:	d10a      	bne.n	81108f6 <_nx_tcp_socket_packet_process+0x8e>
                         (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT) ||
 81108e0:	69bb      	ldr	r3, [r7, #24]
 81108e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
                else if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT) ||
 81108e6:	2b00      	cmp	r3, #0
 81108e8:	d105      	bne.n	81108f6 <_nx_tcp_socket_packet_process+0x8e>
                         ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_CONTROL_MASK) == NX_TCP_ACK_BIT))
 81108ea:	69bb      	ldr	r3, [r7, #24]
 81108ec:	f403 13b8 	and.w	r3, r3, #1507328	@ 0x170000
                         (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT) ||
 81108f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81108f4:	d134      	bne.n	8110960 <_nx_tcp_socket_packet_process+0xf8>
                {

                    /* If the RCV.WND is zero, no segments will be acceptable, but
                       special allowance should be made to accept valid ACKs, URGs and RSTs.
                       Section 3.9 Page 69, RFC 793. */
                    outside_of_window = NX_FALSE;
 81108f6:	2300      	movs	r3, #0
 81108f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 81108fa:	e031      	b.n	8110960 <_nx_tcp_socket_packet_process+0xf8>
                }
            }
            else if (((INT)(packet_sequence - rx_sequence) >= 0) &&
 81108fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81108fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110900:	1ad3      	subs	r3, r2, r3
 8110902:	2b00      	cmp	r3, #0
 8110904:	db2c      	blt.n	8110960 <_nx_tcp_socket_packet_process+0xf8>
                     ((INT)(rx_sequence + rx_window - packet_sequence) > 0))
 8110906:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8110908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811090a:	441a      	add	r2, r3
 811090c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811090e:	1ad3      	subs	r3, r2, r3
            else if (((INT)(packet_sequence - rx_sequence) >= 0) &&
 8110910:	2b00      	cmp	r3, #0
 8110912:	dd25      	ble.n	8110960 <_nx_tcp_socket_packet_process+0xf8>
            {
                outside_of_window = NX_FALSE;
 8110914:	2300      	movs	r3, #0
 8110916:	63bb      	str	r3, [r7, #56]	@ 0x38
 8110918:	e022      	b.n	8110960 <_nx_tcp_socket_packet_process+0xf8>
            }
        }
        else
        {
            if ((rx_window > 0) &&
 811091a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811091c:	2b00      	cmp	r3, #0
 811091e:	d01f      	beq.n	8110960 <_nx_tcp_socket_packet_process+0xf8>
                ((((INT)(packet_sequence - rx_sequence) >= 0) &&
 8110920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8110922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110924:	1ad3      	subs	r3, r2, r3
            if ((rx_window > 0) &&
 8110926:	2b00      	cmp	r3, #0
 8110928:	db06      	blt.n	8110938 <_nx_tcp_socket_packet_process+0xd0>
                  ((INT)(rx_sequence + rx_window - packet_sequence) > 0)) ||
 811092a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811092c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811092e:	441a      	add	r2, r3
 8110930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110932:	1ad3      	subs	r3, r2, r3
                ((((INT)(packet_sequence - rx_sequence) >= 0) &&
 8110934:	2b00      	cmp	r3, #0
 8110936:	dc11      	bgt.n	811095c <_nx_tcp_socket_packet_process+0xf4>
                 (((INT)(packet_sequence + (packet_data_length - 1) - rx_sequence) >= 0) &&
 8110938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811093a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811093c:	441a      	add	r2, r3
 811093e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110940:	1ad3      	subs	r3, r2, r3
 8110942:	3b01      	subs	r3, #1
                  ((INT)(rx_sequence + rx_window - packet_sequence) > 0)) ||
 8110944:	2b00      	cmp	r3, #0
 8110946:	db0b      	blt.n	8110960 <_nx_tcp_socket_packet_process+0xf8>
                  ((INT)(rx_sequence + 1 + (rx_window - packet_sequence) - packet_data_length) > 0))))
 8110948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811094a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811094c:	1ad2      	subs	r2, r2, r3
 811094e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110950:	441a      	add	r2, r3
 8110952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110954:	1ad3      	subs	r3, r2, r3
 8110956:	3301      	adds	r3, #1
                 (((INT)(packet_sequence + (packet_data_length - 1) - rx_sequence) >= 0) &&
 8110958:	2b00      	cmp	r3, #0
 811095a:	dd01      	ble.n	8110960 <_nx_tcp_socket_packet_process+0xf8>
            {
                outside_of_window = NX_FALSE;
 811095c:	2300      	movs	r3, #0
 811095e:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        }

        /* Detect whether or not the data is outside the window.  */
        if (outside_of_window)
 8110960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8110962:	2b00      	cmp	r3, #0
 8110964:	d016      	beq.n	8110994 <_nx_tcp_socket_packet_process+0x12c>
        {

            /* If an incoming segment is not acceptable, an acknowledgment should be sent in reply
               (unless the RST bit is set, if so drop the segment and return).
               Section 3.9, Page 69, RFC 793.  */
            if (!(tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT))
 8110966:	69bb      	ldr	r3, [r7, #24]
 8110968:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 811096c:	2b00      	cmp	r3, #0
 811096e:	d105      	bne.n	811097c <_nx_tcp_socket_packet_process+0x114>
            {

                /* Send an immediate ACK.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8110970:	687b      	ldr	r3, [r7, #4]
 8110972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8110974:	4619      	mov	r1, r3
 8110976:	6878      	ldr	r0, [r7, #4]
 8110978:	f7ff fc0a 	bl	8110190 <_nx_tcp_packet_send_ack>
            }

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the TCP dropped packet count.  */
            socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_receive_packets_dropped++;
 811097c:	687b      	ldr	r3, [r7, #4]
 811097e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8110982:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8110986:	3201      	adds	r2, #1
 8110988:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 811098c:	6838      	ldr	r0, [r7, #0]
 811098e:	f7fe f973 	bl	810ec78 <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 8110992:	e0fe      	b.n	8110b92 <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step2: Check the RST bit. According to RFC 793, Section 3.9, Page 70.  */
        if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 8110994:	69bb      	ldr	r3, [r7, #24]
 8110996:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 811099a:	2b00      	cmp	r3, #0
 811099c:	d00e      	beq.n	81109bc <_nx_tcp_socket_packet_process+0x154>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the resets received count.  */
            (socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_resets_received++;
 811099e:	687b      	ldr	r3, [r7, #4]
 81109a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81109a4:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 81109a8:	3201      	adds	r2, #1
 81109aa:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RESET_RECEIVE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, packet_ptr, tcp_header_copy.nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Reset connection.  */
            _nx_tcp_socket_connection_reset(socket_ptr);
 81109ae:	6878      	ldr	r0, [r7, #4]
 81109b0:	f7ff ff05 	bl	81107be <_nx_tcp_socket_connection_reset>

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 81109b4:	6838      	ldr	r0, [r7, #0]
 81109b6:	f7fe f95f 	bl	810ec78 <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 81109ba:	e0ea      	b.n	8110b92 <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step3: Check the SYN bit. According to RFC 793, Section 3.9, Page 71.  */
        if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT)
 81109bc:	69bb      	ldr	r3, [r7, #24]
 81109be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81109c2:	2b00      	cmp	r3, #0
 81109c4:	d00f      	beq.n	81109e6 <_nx_tcp_socket_packet_process+0x17e>

            /* The SYN is in the window it is an error, send a reset.  */

            /* Adjust the SEQ for the SYN bit. */
            /* The reset logic uses the sequence number in tcp_header_ptr as its ACK number. */
            tcp_header_copy.nx_tcp_sequence_number++;
 81109c6:	693b      	ldr	r3, [r7, #16]
 81109c8:	3301      	adds	r3, #1
 81109ca:	613b      	str	r3, [r7, #16]

            /* Send RST message.  */
            _nx_tcp_packet_send_rst(socket_ptr, &tcp_header_copy);
 81109cc:	f107 030c 	add.w	r3, r7, #12
 81109d0:	4619      	mov	r1, r3
 81109d2:	6878      	ldr	r0, [r7, #4]
 81109d4:	f7ff fd38 	bl	8110448 <_nx_tcp_packet_send_rst>

            /* Reset the connection. */
            _nx_tcp_socket_connection_reset(socket_ptr);
 81109d8:	6878      	ldr	r0, [r7, #4]
 81109da:	f7ff fef0 	bl	81107be <_nx_tcp_socket_connection_reset>

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 81109de:	6838      	ldr	r0, [r7, #0]
 81109e0:	f7fe f94a 	bl	810ec78 <_nx_packet_release>

            /* Finished processing, simply return!  */
            return;
 81109e4:	e0d5      	b.n	8110b92 <_nx_tcp_socket_packet_process+0x32a>
        }

        /* Step4: Check the ACK field. According to RFC 793, Section 3.9, Page 72.  */
        if (socket_ptr -> nx_tcp_socket_state != NX_TCP_SYN_RECEIVED)
 81109e6:	687b      	ldr	r3, [r7, #4]
 81109e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81109ea:	2b04      	cmp	r3, #4
 81109ec:	d00c      	beq.n	8110a08 <_nx_tcp_socket_packet_process+0x1a0>
        {

            /* Check the ACK field.  */
            if (_nx_tcp_socket_state_ack_check(socket_ptr, &tcp_header_copy) == NX_FALSE)
 81109ee:	f107 030c 	add.w	r3, r7, #12
 81109f2:	4619      	mov	r1, r3
 81109f4:	6878      	ldr	r0, [r7, #4]
 81109f6:	f000 fa72 	bl	8110ede <_nx_tcp_socket_state_ack_check>
 81109fa:	4603      	mov	r3, r0
 81109fc:	2b00      	cmp	r3, #0
 81109fe:	d103      	bne.n	8110a08 <_nx_tcp_socket_packet_process+0x1a0>
            {

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 8110a00:	6838      	ldr	r0, [r7, #0]
 8110a02:	f7fe f939 	bl	810ec78 <_nx_packet_release>

                /* Finished processing, simply return!  */
                return;
 8110a06:	e0c4      	b.n	8110b92 <_nx_tcp_socket_packet_process+0x32a>
            }
        }
    }

    /* Illegal option length check. */
    if (header_length > sizeof(NX_TCP_HEADER))
 8110a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110a0a:	2b14      	cmp	r3, #20
 8110a0c:	d93b      	bls.n	8110a86 <_nx_tcp_socket_packet_process+0x21e>
    {

        /* There are one or more option words.  */
        /* The illegal option length is validated during MSS option get function. */
        if (!_nx_tcp_mss_option_get((packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_TCP_HEADER)),
 8110a0e:	683b      	ldr	r3, [r7, #0]
 8110a10:	689b      	ldr	r3, [r3, #8]
 8110a12:	f103 0014 	add.w	r0, r3, #20
 8110a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110a18:	3b14      	subs	r3, #20
 8110a1a:	f107 0208 	add.w	r2, r7, #8
 8110a1e:	4619      	mov	r1, r3
 8110a20:	f7fe fead 	bl	810f77e <_nx_tcp_mss_option_get>
 8110a24:	4603      	mov	r3, r0
 8110a26:	2b00      	cmp	r3, #0
 8110a28:	d12d      	bne.n	8110a86 <_nx_tcp_socket_packet_process+0x21e>
            /* TCP MUST be prepared to handle an illegal option length (e.g., zero) without crashing;
               a suggested procedure is to reset the connection and log the reason, outlined in RFC 1122, Section 4.2.2.5, Page85. */

            /* Preprocess the sequence number if the incoming segment does not have an ACK field.
               Reset Generation, RFC793, Section3.4, Page37. */
            if (!(tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_ACK_BIT))
 8110a2a:	69bb      	ldr	r3, [r7, #24]
 8110a2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8110a30:	2b00      	cmp	r3, #0
 8110a32:	d113      	bne.n	8110a5c <_nx_tcp_socket_packet_process+0x1f4>
            {

                /* Update sequence number to set the reset acknowledge number.  */
                tcp_header_copy.nx_tcp_sequence_number += (packet_ptr -> nx_packet_length - header_length);
 8110a34:	693a      	ldr	r2, [r7, #16]
 8110a36:	683b      	ldr	r3, [r7, #0]
 8110a38:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8110a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110a3c:	1acb      	subs	r3, r1, r3
 8110a3e:	4413      	add	r3, r2
 8110a40:	613b      	str	r3, [r7, #16]

                /* Check the SYN and FIN bits.  */
                if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT) ||
 8110a42:	69bb      	ldr	r3, [r7, #24]
 8110a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8110a48:	2b00      	cmp	r3, #0
 8110a4a:	d104      	bne.n	8110a56 <_nx_tcp_socket_packet_process+0x1ee>
                    (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_FIN_BIT))
 8110a4c:	69bb      	ldr	r3, [r7, #24]
 8110a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                if ((tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_SYN_BIT) ||
 8110a52:	2b00      	cmp	r3, #0
 8110a54:	d002      	beq.n	8110a5c <_nx_tcp_socket_packet_process+0x1f4>
                {

                    /* Update sequence number to set the reset acknowledge number.  */
                    tcp_header_copy.nx_tcp_sequence_number++;
 8110a56:	693b      	ldr	r3, [r7, #16]
 8110a58:	3301      	adds	r3, #1
 8110a5a:	613b      	str	r3, [r7, #16]
                }
            }

            /* Send RST message.  */
            _nx_tcp_packet_send_rst(socket_ptr, &tcp_header_copy);
 8110a5c:	f107 030c 	add.w	r3, r7, #12
 8110a60:	4619      	mov	r1, r3
 8110a62:	6878      	ldr	r0, [r7, #4]
 8110a64:	f7ff fcf0 	bl	8110448 <_nx_tcp_packet_send_rst>

            /* Reset the connection. */
            _nx_tcp_socket_connection_reset(socket_ptr);
 8110a68:	6878      	ldr	r0, [r7, #4]
 8110a6a:	f7ff fea8 	bl	81107be <_nx_tcp_socket_connection_reset>

#ifndef NX_DISABLE_TCP_INFO
            /* Increment the TCP invalid packet error count.  */
            socket_ptr -> nx_tcp_socket_ip_ptr -> nx_ip_tcp_invalid_packets++;
 8110a6e:	687b      	ldr	r3, [r7, #4]
 8110a70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8110a74:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8110a78:	3201      	adds	r2, #1
 8110a7a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
#endif /* NX_DISABLE_TCP_INFO */

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 8110a7e:	6838      	ldr	r0, [r7, #0]
 8110a80:	f7fe f8fa 	bl	810ec78 <_nx_packet_release>

            return;
 8110a84:	e085      	b.n	8110b92 <_nx_tcp_socket_packet_process+0x32a>
        }

    }

    /* Process relative to the state of the socket.  */
    switch (socket_ptr -> nx_tcp_socket_state)
 8110a86:	687b      	ldr	r3, [r7, #4]
 8110a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8110a8a:	3b03      	subs	r3, #3
 8110a8c:	2b08      	cmp	r3, #8
 8110a8e:	d866      	bhi.n	8110b5e <_nx_tcp_socket_packet_process+0x2f6>
 8110a90:	a201      	add	r2, pc, #4	@ (adr r2, 8110a98 <_nx_tcp_socket_packet_process+0x230>)
 8110a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8110a96:	bf00      	nop
 8110a98:	08110abd 	.word	0x08110abd
 8110a9c:	08110adf 	.word	0x08110adf
 8110aa0:	08110aff 	.word	0x08110aff
 8110aa4:	08110b17 	.word	0x08110b17
 8110aa8:	08110b2d 	.word	0x08110b2d
 8110aac:	08110b3f 	.word	0x08110b3f
 8110ab0:	08110b51 	.word	0x08110b51
 8110ab4:	08110b5f 	.word	0x08110b5f
 8110ab8:	08110b1f 	.word	0x08110b1f

    case  NX_TCP_SYN_SENT:

        /* Call the SYN SENT state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_syn_sent(socket_ptr, &tcp_header_copy, packet_ptr);
 8110abc:	f107 030c 	add.w	r3, r7, #12
 8110ac0:	683a      	ldr	r2, [r7, #0]
 8110ac2:	4619      	mov	r1, r3
 8110ac4:	6878      	ldr	r0, [r7, #4]
 8110ac6:	f001 fa92 	bl	8111fee <_nx_tcp_socket_state_syn_sent>

        /* Check whether socket is established. */
        if (socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED)
 8110aca:	687b      	ldr	r3, [r7, #4]
 8110acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8110ace:	2b05      	cmp	r3, #5
 8110ad0:	d147      	bne.n	8110b62 <_nx_tcp_socket_packet_process+0x2fa>
        {

            /* Check for data in the current packet.  */
            packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 8110ad2:	6839      	ldr	r1, [r7, #0]
 8110ad4:	6878      	ldr	r0, [r7, #4]
 8110ad6:	f000 fddd 	bl	8111694 <_nx_tcp_socket_state_data_check>
 8110ada:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        /* State processing is complete.  */
        break;
 8110adc:	e041      	b.n	8110b62 <_nx_tcp_socket_packet_process+0x2fa>

    case  NX_TCP_SYN_RECEIVED:

        /* Call the SYN RECEIVED state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_syn_received(socket_ptr, &tcp_header_copy);
 8110ade:	f107 030c 	add.w	r3, r7, #12
 8110ae2:	4619      	mov	r1, r3
 8110ae4:	6878      	ldr	r0, [r7, #4]
 8110ae6:	f001 fa25 	bl	8111f34 <_nx_tcp_socket_state_syn_received>

        /* Check whether socket is established. */
        if (socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED)
 8110aea:	687b      	ldr	r3, [r7, #4]
 8110aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8110aee:	2b05      	cmp	r3, #5
 8110af0:	d139      	bne.n	8110b66 <_nx_tcp_socket_packet_process+0x2fe>
        {

            /* Check for data in the current packet.  */
            packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 8110af2:	6839      	ldr	r1, [r7, #0]
 8110af4:	6878      	ldr	r0, [r7, #4]
 8110af6:	f000 fdcd 	bl	8111694 <_nx_tcp_socket_state_data_check>
 8110afa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        /* State processing is complete.  */
        break;
 8110afc:	e033      	b.n	8110b66 <_nx_tcp_socket_packet_process+0x2fe>

    case  NX_TCP_ESTABLISHED:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 8110afe:	6839      	ldr	r1, [r7, #0]
 8110b00:	6878      	ldr	r0, [r7, #4]
 8110b02:	f000 fdc7 	bl	8111694 <_nx_tcp_socket_state_data_check>
 8110b06:	63f8      	str	r0, [r7, #60]	@ 0x3c
#endif /* NX_ENABLE_TCPIP_OFFLOAD */
        {

            /* Call the ESTABLISHED state handling function to process any state
            changes caused by this new packet.  */
            _nx_tcp_socket_state_established(socket_ptr);
 8110b08:	6878      	ldr	r0, [r7, #4]
 8110b0a:	f001 f8fb 	bl	8111d04 <_nx_tcp_socket_state_established>

            /* Determine if any transmit suspension can be lifted.  */
            _nx_tcp_socket_state_transmit_check(socket_ptr);
 8110b0e:	6878      	ldr	r0, [r7, #4]
 8110b10:	f001 fb56 	bl	81121c0 <_nx_tcp_socket_state_transmit_check>
        }

        /* State processing is complete.  */
        break;
 8110b14:	e028      	b.n	8110b68 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_CLOSE_WAIT:

        /* Determine if any transmit suspension can be lifted.  */
        _nx_tcp_socket_state_transmit_check(socket_ptr);
 8110b16:	6878      	ldr	r0, [r7, #4]
 8110b18:	f001 fb52 	bl	81121c0 <_nx_tcp_socket_state_transmit_check>

        /* State processing is complete.  */
        break;
 8110b1c:	e024      	b.n	8110b68 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_LAST_ACK:

        /* Call the LAST ACK state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_last_ack(socket_ptr, &tcp_header_copy);
 8110b1e:	f107 030c 	add.w	r3, r7, #12
 8110b22:	4619      	mov	r1, r3
 8110b24:	6878      	ldr	r0, [r7, #4]
 8110b26:	f001 f9db 	bl	8111ee0 <_nx_tcp_socket_state_last_ack>

        /* State processing is complete.  */
        break;
 8110b2a:	e01d      	b.n	8110b68 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_FIN_WAIT_1:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 8110b2c:	6839      	ldr	r1, [r7, #0]
 8110b2e:	6878      	ldr	r0, [r7, #4]
 8110b30:	f000 fdb0 	bl	8111694 <_nx_tcp_socket_state_data_check>
 8110b34:	63f8      	str	r0, [r7, #60]	@ 0x3c

        /* Call the FIN WAIT 1 state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_fin_wait1(socket_ptr);
 8110b36:	6878      	ldr	r0, [r7, #4]
 8110b38:	f001 f928 	bl	8111d8c <_nx_tcp_socket_state_fin_wait1>

        /* State processing is complete.  */
        break;
 8110b3c:	e014      	b.n	8110b68 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_FIN_WAIT_2:

        /* Check for data in the current packet.  */
        packet_queued =  _nx_tcp_socket_state_data_check(socket_ptr, packet_ptr);
 8110b3e:	6839      	ldr	r1, [r7, #0]
 8110b40:	6878      	ldr	r0, [r7, #4]
 8110b42:	f000 fda7 	bl	8111694 <_nx_tcp_socket_state_data_check>
 8110b46:	63f8      	str	r0, [r7, #60]	@ 0x3c

        /* Call the FIN WAIT 2 state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_fin_wait2(socket_ptr);
 8110b48:	6878      	ldr	r0, [r7, #4]
 8110b4a:	f001 f98b 	bl	8111e64 <_nx_tcp_socket_state_fin_wait2>

        /* State processing is complete.  */
        break;
 8110b4e:	e00b      	b.n	8110b68 <_nx_tcp_socket_packet_process+0x300>

    case  NX_TCP_CLOSING:

        /* Call the CLOSING state handling function to process any state
           changes caused by this new packet.  */
        _nx_tcp_socket_state_closing(socket_ptr, &tcp_header_copy);
 8110b50:	f107 030c 	add.w	r3, r7, #12
 8110b54:	4619      	mov	r1, r3
 8110b56:	6878      	ldr	r0, [r7, #4]
 8110b58:	f000 fca0 	bl	811149c <_nx_tcp_socket_state_closing>

        /* State processing is complete.  */
        break;
 8110b5c:	e004      	b.n	8110b68 <_nx_tcp_socket_packet_process+0x300>

        /* State processing is complete.  */
        break;

    default:
        break;
 8110b5e:	bf00      	nop
 8110b60:	e002      	b.n	8110b68 <_nx_tcp_socket_packet_process+0x300>
        break;
 8110b62:	bf00      	nop
 8110b64:	e000      	b.n	8110b68 <_nx_tcp_socket_packet_process+0x300>
        break;
 8110b66:	bf00      	nop
    }
#endif /* NX_ENABLE_HTTP_PROXY */

    /* Check for an URG (urgent) bit set.  */
    /*lint -e{644} suppress variable might not be initialized, since "tcp_header_copy" was initialized. */
    if (tcp_header_copy.nx_tcp_header_word_3 & NX_TCP_URG_BIT)
 8110b68:	69bb      	ldr	r3, [r7, #24]
 8110b6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8110b6e:	2b00      	cmp	r3, #0
 8110b70:	d009      	beq.n	8110b86 <_nx_tcp_socket_packet_process+0x31e>
    {

        /* Yes, an Urgent bit is set.  */

        /* Pickup the urgent callback function specified when the socket was created.  */
        urgent_callback =  socket_ptr -> nx_tcp_urgent_data_callback;
 8110b72:	687b      	ldr	r3, [r7, #4]
 8110b74:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8110b78:	623b      	str	r3, [r7, #32]

        /* Determine if there is an urgent callback function specified.  */
        if (urgent_callback)
 8110b7a:	6a3b      	ldr	r3, [r7, #32]
 8110b7c:	2b00      	cmp	r3, #0
 8110b7e:	d002      	beq.n	8110b86 <_nx_tcp_socket_packet_process+0x31e>
        {

            /* Yes, call the application's urgent callback function to alert the application
               of the presence of the urgent bit.  */
            (urgent_callback)(socket_ptr);
 8110b80:	6a3b      	ldr	r3, [r7, #32]
 8110b82:	6878      	ldr	r0, [r7, #4]
 8110b84:	4798      	blx	r3
        }
    }

    /* Determine if we need to release the packet.  */
    if (!packet_queued)
 8110b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8110b88:	2b00      	cmp	r3, #0
 8110b8a:	d102      	bne.n	8110b92 <_nx_tcp_socket_packet_process+0x32a>
    {

        /* Yes, the packet was not queued up above, so it needs to be released.  */
        _nx_packet_release(packet_ptr);
 8110b8c:	6838      	ldr	r0, [r7, #0]
 8110b8e:	f7fe f873 	bl	810ec78 <_nx_packet_release>
    }
}
 8110b92:	3740      	adds	r7, #64	@ 0x40
 8110b94:	46bd      	mov	sp, r7
 8110b96:	bdb0      	pop	{r4, r5, r7, pc}

08110b98 <_nx_tcp_socket_retransmit>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_retransmit(NX_IP *ip_ptr, NX_TCP_SOCKET *socket_ptr, UINT need_fast_retransmit)
{
 8110b98:	b590      	push	{r4, r7, lr}
 8110b9a:	b097      	sub	sp, #92	@ 0x5c
 8110b9c:	af04      	add	r7, sp, #16
 8110b9e:	60f8      	str	r0, [r7, #12]
 8110ba0:	60b9      	str	r1, [r7, #8]
 8110ba2:	607a      	str	r2, [r7, #4]
       RFC 793 Sec 3.7, p42: keep send new data.

       In the zero window probe phase, we send the zero window probe, and increase
       exponentially the interval between successive probes.
       RFC 1122 Sec 4.2.2.17, p92.  */
    if (socket_ptr -> nx_tcp_socket_tx_window_advertised == 0)
 8110ba4:	68bb      	ldr	r3, [r7, #8]
 8110ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8110ba8:	2b00      	cmp	r3, #0
 8110baa:	d164      	bne.n	8110c76 <_nx_tcp_socket_retransmit+0xde>
    {

        /* Pickup the head of the transmit queue.  */
        packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 8110bac:	68bb      	ldr	r3, [r7, #8]
 8110bae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8110bb2:	647b      	str	r3, [r7, #68]	@ 0x44

        if (packet_ptr)
 8110bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110bb6:	2b00      	cmp	r3, #0
 8110bb8:	d02f      	beq.n	8110c1a <_nx_tcp_socket_retransmit+0x82>
        {

        /* Get one byte from send queue. */
        /* Pick up the pointer to the head of the TCP packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_TCP_HEADER *header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8110bba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110bbc:	689b      	ldr	r3, [r3, #8]
 8110bbe:	617b      	str	r3, [r7, #20]

            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8110bc0:	697b      	ldr	r3, [r7, #20]
 8110bc2:	68db      	ldr	r3, [r3, #12]
 8110bc4:	ba1a      	rev	r2, r3
 8110bc6:	697b      	ldr	r3, [r7, #20]
 8110bc8:	60da      	str	r2, [r3, #12]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 8110bca:	697b      	ldr	r3, [r7, #20]
 8110bcc:	685b      	ldr	r3, [r3, #4]
 8110bce:	ba1a      	rev	r2, r3
 8110bd0:	697b      	ldr	r3, [r7, #20]
 8110bd2:	605a      	str	r2, [r3, #4]

            /* Get sequence number and first byte. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_data = *(packet_ptr -> nx_packet_prepend_ptr + ((header_ptr -> nx_tcp_header_word_3 >> 28) << 2));
 8110bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110bd6:	689a      	ldr	r2, [r3, #8]
 8110bd8:	697b      	ldr	r3, [r7, #20]
 8110bda:	68db      	ldr	r3, [r3, #12]
 8110bdc:	0f1b      	lsrs	r3, r3, #28
 8110bde:	009b      	lsls	r3, r3, #2
 8110be0:	4413      	add	r3, r2
 8110be2:	781a      	ldrb	r2, [r3, #0]
 8110be4:	68bb      	ldr	r3, [r7, #8]
 8110be6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

            /* Now set zero window probe started. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_TRUE;
 8110bea:	68bb      	ldr	r3, [r7, #8]
 8110bec:	2201      	movs	r2, #1
 8110bee:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
            socket_ptr -> nx_tcp_socket_zero_window_probe_sequence = header_ptr -> nx_tcp_sequence_number;
 8110bf2:	697b      	ldr	r3, [r7, #20]
 8110bf4:	685a      	ldr	r2, [r3, #4]
 8110bf6:	68bb      	ldr	r3, [r7, #8]
 8110bf8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 8110bfc:	68bb      	ldr	r3, [r7, #8]
 8110bfe:	2200      	movs	r2, #0
 8110c00:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_sequence_number);
 8110c04:	697b      	ldr	r3, [r7, #20]
 8110c06:	685b      	ldr	r3, [r3, #4]
 8110c08:	ba1a      	rev	r2, r3
 8110c0a:	697b      	ldr	r3, [r7, #20]
 8110c0c:	605a      	str	r2, [r3, #4]
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8110c0e:	697b      	ldr	r3, [r7, #20]
 8110c10:	68db      	ldr	r3, [r3, #12]
 8110c12:	ba1a      	rev	r2, r3
 8110c14:	697b      	ldr	r3, [r7, #20]
 8110c16:	60da      	str	r2, [r3, #12]
 8110c18:	e005      	b.n	8110c26 <_nx_tcp_socket_retransmit+0x8e>
        }
        else if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_FALSE)
 8110c1a:	68bb      	ldr	r3, [r7, #8]
 8110c1c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8110c20:	2b00      	cmp	r3, #0
 8110c22:	f000 8156 	beq.w	8110ed2 <_nx_tcp_socket_retransmit+0x33a>

        /* In the zero window probe phase, we send the zero window probe, and increase
           exponentially the interval between successive probes.  */

        /* Increment the retry counter.  */
        socket_ptr -> nx_tcp_socket_timeout_retries++;
 8110c26:	68bb      	ldr	r3, [r7, #8]
 8110c28:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8110c2c:	1c5a      	adds	r2, r3, #1
 8110c2e:	68bb      	ldr	r3, [r7, #8]
 8110c30:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
        socket_ptr -> nx_tcp_socket_zero_window_probe_failure++;
 8110c34:	68bb      	ldr	r3, [r7, #8]
 8110c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8110c3a:	1c5a      	adds	r2, r3, #1
 8110c3c:	68bb      	ldr	r3, [r7, #8]
 8110c3e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Setup the next timeout.  */
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8110c42:	68bb      	ldr	r3, [r7, #8]
 8110c44:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
            (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 8110c48:	68bb      	ldr	r3, [r7, #8]
 8110c4a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8110c4e:	68b9      	ldr	r1, [r7, #8]
 8110c50:	f8d1 10dc 	ldr.w	r1, [r1, #220]	@ 0xdc
 8110c54:	fb01 f303 	mul.w	r3, r1, r3
        socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8110c58:	409a      	lsls	r2, r3
 8110c5a:	68bb      	ldr	r3, [r7, #8]
 8110c5c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

        /* Send the zero window probe.  */
        _nx_tcp_packet_send_probe(socket_ptr, socket_ptr -> nx_tcp_socket_zero_window_probe_sequence,
 8110c60:	68bb      	ldr	r3, [r7, #8]
 8110c62:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8110c66:	68bb      	ldr	r3, [r7, #8]
 8110c68:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8110c6c:	461a      	mov	r2, r3
 8110c6e:	68b8      	ldr	r0, [r7, #8]
 8110c70:	f7ff fbca 	bl	8110408 <_nx_tcp_packet_send_probe>
                                  socket_ptr -> nx_tcp_socket_zero_window_probe_data);

        return;
 8110c74:	e130      	b.n	8110ed8 <_nx_tcp_socket_retransmit+0x340>
    }
    else if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data == NX_TRUE)
 8110c76:	68bb      	ldr	r3, [r7, #8]
 8110c78:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8110c7c:	2b01      	cmp	r3, #1
 8110c7e:	d103      	bne.n	8110c88 <_nx_tcp_socket_retransmit+0xf0>
    {

        /* If advertised window isn't zero, reset zero window probe flag. */
        socket_ptr -> nx_tcp_socket_zero_window_probe_has_data = NX_FALSE;
 8110c80:	68bb      	ldr	r3, [r7, #8]
 8110c82:	2200      	movs	r2, #0
 8110c84:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
    }

    /* Increment the retry counter only if the receiver window is open. */
    /* Increment the retry counter.  */
    socket_ptr -> nx_tcp_socket_timeout_retries++;
 8110c88:	68bb      	ldr	r3, [r7, #8]
 8110c8a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8110c8e:	1c5a      	adds	r2, r3, #1
 8110c90:	68bb      	ldr	r3, [r7, #8]
 8110c92:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

    if ((need_fast_retransmit == NX_TRUE) || (socket_ptr -> nx_tcp_socket_fast_recovery == NX_FALSE))
 8110c96:	687b      	ldr	r3, [r7, #4]
 8110c98:	2b01      	cmp	r3, #1
 8110c9a:	d004      	beq.n	8110ca6 <_nx_tcp_socket_retransmit+0x10e>
 8110c9c:	68bb      	ldr	r3, [r7, #8]
 8110c9e:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 8110ca2:	2b00      	cmp	r3, #0
 8110ca4:	d12a      	bne.n	8110cfc <_nx_tcp_socket_retransmit+0x164>
    {

        /* Timed out on an outgoing packet.  Enter slow start mode. */
        /* Compute the flight size / 2 value. */
        window = socket_ptr -> nx_tcp_socket_tx_outstanding_bytes >> 1;
 8110ca6:	68bb      	ldr	r3, [r7, #8]
 8110ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8110caa:	085b      	lsrs	r3, r3, #1
 8110cac:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Make sure we have at least 2 * MSS */
        if (window < (socket_ptr -> nx_tcp_socket_connect_mss << 1))
 8110cae:	68bb      	ldr	r3, [r7, #8]
 8110cb0:	6a1b      	ldr	r3, [r3, #32]
 8110cb2:	005b      	lsls	r3, r3, #1
 8110cb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8110cb6:	429a      	cmp	r2, r3
 8110cb8:	d203      	bcs.n	8110cc2 <_nx_tcp_socket_retransmit+0x12a>
        {
            window = socket_ptr -> nx_tcp_socket_connect_mss << 1;
 8110cba:	68bb      	ldr	r3, [r7, #8]
 8110cbc:	6a1b      	ldr	r3, [r3, #32]
 8110cbe:	005b      	lsls	r3, r3, #1
 8110cc0:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        /* Set the slow_start_threshold */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = window;
 8110cc2:	68bb      	ldr	r3, [r7, #8]
 8110cc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8110cc6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the current window to be MSS size. */
        socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 8110cc8:	68bb      	ldr	r3, [r7, #8]
 8110cca:	6a1a      	ldr	r2, [r3, #32]
 8110ccc:	68bb      	ldr	r3, [r7, #8]
 8110cce:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Determine if this socket needs fast retransmit.  */
        if (need_fast_retransmit == NX_TRUE)
 8110cd0:	687b      	ldr	r3, [r7, #4]
 8110cd2:	2b01      	cmp	r3, #1
 8110cd4:	d112      	bne.n	8110cfc <_nx_tcp_socket_retransmit+0x164>
        {

            /* Update cwnd to ssthreshold plus 3 * MSS.  */
            socket_ptr -> nx_tcp_socket_tx_window_congestion += window + (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 8110cd6:	68bb      	ldr	r3, [r7, #8]
 8110cd8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8110cda:	68bb      	ldr	r3, [r7, #8]
 8110cdc:	6a1b      	ldr	r3, [r3, #32]
 8110cde:	0059      	lsls	r1, r3, #1
 8110ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8110ce2:	440b      	add	r3, r1
 8110ce4:	441a      	add	r2, r3
 8110ce6:	68bb      	ldr	r3, [r7, #8]
 8110ce8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Now TCP is in fast recovery procedure. */
            socket_ptr -> nx_tcp_socket_fast_recovery = NX_TRUE;
 8110cea:	68bb      	ldr	r3, [r7, #8]
 8110cec:	2201      	movs	r2, #1
 8110cee:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e

            /* Update the transmit sequence that enters fast transmit. */
            socket_ptr -> nx_tcp_socket_tx_sequence_recover = socket_ptr -> nx_tcp_socket_tx_sequence - 1;
 8110cf2:	68bb      	ldr	r3, [r7, #8]
 8110cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8110cf6:	1e5a      	subs	r2, r3, #1
 8110cf8:	68bb      	ldr	r3, [r7, #8]
 8110cfa:	661a      	str	r2, [r3, #96]	@ 0x60
        }
    }

    /* Setup the next timeout.  */
    socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8110cfc:	68bb      	ldr	r3, [r7, #8]
 8110cfe:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
        (socket_ptr -> nx_tcp_socket_timeout_retries * socket_ptr -> nx_tcp_socket_timeout_shift);
 8110d02:	68bb      	ldr	r3, [r7, #8]
 8110d04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8110d08:	68b9      	ldr	r1, [r7, #8]
 8110d0a:	f8d1 10dc 	ldr.w	r1, [r1, #220]	@ 0xdc
 8110d0e:	fb01 f303 	mul.w	r3, r1, r3
    socket_ptr -> nx_tcp_socket_timeout = socket_ptr -> nx_tcp_socket_timeout_rate <<
 8110d12:	409a      	lsls	r2, r3
 8110d14:	68bb      	ldr	r3, [r7, #8]
 8110d16:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

    /* Get available size of packet that can be sent. */
    available = socket_ptr -> nx_tcp_socket_tx_window_congestion;
 8110d1a:	68bb      	ldr	r3, [r7, #8]
 8110d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8110d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Pickup the head of the transmit queue.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 8110d20:	68bb      	ldr	r3, [r7, #8]
 8110d22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8110d26:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Determine if the packet has been released by the
       application I/O driver.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    while (packet_ptr && (packet_ptr -> nx_packet_queue_next == (NX_PACKET *)NX_DRIVER_TX_DONE))
 8110d28:	e0c9      	b.n	8110ebe <_nx_tcp_socket_retransmit+0x326>
    {

    /* Update the ACK number in case it has changed since the data was originally transmitted. */
    ULONG          checksum;
    NX_TCP_HEADER *header_ptr;
    ULONG         *source_ip = NX_NULL, *dest_ip = NX_NULL;
 8110d2a:	2300      	movs	r3, #0
 8110d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8110d2e:	2300      	movs	r3, #0
 8110d30:	637b      	str	r3, [r7, #52]	@ 0x34

#ifdef NX_DISABLE_TCP_TX_CHECKSUM
        compute_checksum = 0;
#endif /* NX_DISABLE_TCP_TX_CHECKSUM */

        if (packet_ptr -> nx_packet_length > (available + sizeof(NX_TCP_HEADER)))
 8110d32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110d34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8110d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8110d38:	3314      	adds	r3, #20
 8110d3a:	429a      	cmp	r2, r3
 8110d3c:	f200 80cb 	bhi.w	8110ed6 <_nx_tcp_socket_retransmit+0x33e>
            /* This packet can not be sent. */
            break;
        }

        /* Decrease the available size. */
        available -= (packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_TCP_HEADER));
 8110d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8110d44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8110d46:	1ad3      	subs	r3, r2, r3
 8110d48:	3314      	adds	r3, #20
 8110d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Pickup next packet. */
        next_ptr = packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8110d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110d4e:	6a1b      	ldr	r3, [r3, #32]
 8110d50:	633b      	str	r3, [r7, #48]	@ 0x30

#ifndef NX_DISABLE_IPV4
        /* Is this an IPv4 connection? */
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8110d52:	68bb      	ldr	r3, [r7, #8]
 8110d54:	695b      	ldr	r3, [r3, #20]
 8110d56:	2b04      	cmp	r3, #4
 8110d58:	d10a      	bne.n	8110d70 <_nx_tcp_socket_retransmit+0x1d8>
        {

            packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8110d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110d5c:	2204      	movs	r2, #4
 8110d5e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

            /* Get the source and destination addresses. */
            source_ip = &socket_ptr -> nx_tcp_socket_connect_interface -> nx_interface_ip_address;
 8110d62:	68bb      	ldr	r3, [r7, #8]
 8110d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8110d66:	3314      	adds	r3, #20
 8110d68:	63bb      	str	r3, [r7, #56]	@ 0x38
            dest_ip = &socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4;
 8110d6a:	68bb      	ldr	r3, [r7, #8]
 8110d6c:	3318      	adds	r3, #24
 8110d6e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
#endif /* FEATURE_NX_IPV6 */

        /* Pick up the pointer to the head of the TCP packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8110d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110d72:	689b      	ldr	r3, [r3, #8]
 8110d74:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Record the original data.  */
        original_acknowledgment_number = header_ptr -> nx_tcp_acknowledgment_number;
 8110d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110d78:	689b      	ldr	r3, [r3, #8]
 8110d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
        original_header_word_3 = header_ptr -> nx_tcp_header_word_3;
 8110d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110d7e:	68db      	ldr	r3, [r3, #12]
 8110d80:	627b      	str	r3, [r7, #36]	@ 0x24
        original_header_word_4 = header_ptr -> nx_tcp_header_word_4;
 8110d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110d84:	691b      	ldr	r3, [r3, #16]
 8110d86:	623b      	str	r3, [r7, #32]

        /* Update the ACK number in the TCP header.  */
        header_ptr -> nx_tcp_acknowledgment_number = socket_ptr -> nx_tcp_socket_rx_sequence;
 8110d88:	68bb      	ldr	r3, [r7, #8]
 8110d8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8110d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110d8e:	609a      	str	r2, [r3, #8]

        /* Convert to network byte order for checksum */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_acknowledgment_number);
 8110d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110d92:	689b      	ldr	r3, [r3, #8]
 8110d94:	ba1a      	rev	r2, r3
 8110d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110d98:	609a      	str	r2, [r3, #8]
        if (window_size > 0xFFFF)
        {
            window_size = 0xFFFF;
        }
#else
        window_size = socket_ptr -> nx_tcp_socket_rx_window_current;
 8110d9a:	68bb      	ldr	r3, [r7, #8]
 8110d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8110d9e:	61fb      	str	r3, [r7, #28]
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

        header_ptr -> nx_tcp_header_word_3 =        NX_TCP_HEADER_SIZE | NX_TCP_ACK_BIT | NX_TCP_PSH_BIT | window_size;
 8110da0:	69fb      	ldr	r3, [r7, #28]
 8110da2:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8110da6:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8110daa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8110dac:	60d3      	str	r3, [r2, #12]

        /* Swap the content to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_3);
 8110dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110db0:	68db      	ldr	r3, [r3, #12]
 8110db2:	ba1a      	rev	r2, r3
 8110db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110db6:	60da      	str	r2, [r3, #12]

        /* Convert back to host byte order to so we can zero out the checksum. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8110db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110dba:	691b      	ldr	r3, [r3, #16]
 8110dbc:	ba1a      	rev	r2, r3
 8110dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110dc0:	611a      	str	r2, [r3, #16]

        /* Remember the last ACKed sequence and the last reported window size.  */
        socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 8110dc2:	68bb      	ldr	r3, [r7, #8]
 8110dc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8110dc6:	68bb      	ldr	r3, [r7, #8]
 8110dc8:	645a      	str	r2, [r3, #68]	@ 0x44
        socket_ptr -> nx_tcp_socket_rx_window_last_sent =  socket_ptr -> nx_tcp_socket_rx_window_current;
 8110dca:	68bb      	ldr	r3, [r7, #8]
 8110dcc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8110dce:	68bb      	ldr	r3, [r7, #8]
 8110dd0:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Zero out existing checksum before computing new one. */
        header_ptr -> nx_tcp_header_word_4 = header_ptr -> nx_tcp_header_word_4 & 0x0000FFFF;
 8110dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110dd4:	691b      	ldr	r3, [r3, #16]
 8110dd6:	b29a      	uxth	r2, r3
 8110dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110dda:	611a      	str	r2, [r3, #16]

        /* Convert back to network byte order to so we can do the checksum. */
        NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8110ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110dde:	691b      	ldr	r3, [r3, #16]
 8110de0:	ba1a      	rev	r2, r3
 8110de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110de4:	611a      	str	r2, [r3, #16]
        if (compute_checksum)
#endif /* defined(NX_DISABLE_TCP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
        {
            /* Calculate the TCP checksum without protection.  */
            checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
                                                packet_ptr -> nx_packet_length,
 8110de6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110de8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 8110dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110dec:	9300      	str	r3, [sp, #0]
 8110dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8110df0:	2106      	movs	r1, #6
 8110df2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8110df4:	f7fb fda1 	bl	810c93a <_nx_ip_checksum_compute>
 8110df8:	4603      	mov	r3, r0
 8110dfa:	61bb      	str	r3, [r7, #24]
                                                source_ip, dest_ip);
            checksum = ~checksum & NX_LOWER_16_MASK;
 8110dfc:	69bb      	ldr	r3, [r7, #24]
 8110dfe:	43db      	mvns	r3, r3
 8110e00:	b29b      	uxth	r3, r3
 8110e02:	61bb      	str	r3, [r7, #24]

            /* Convert back to host byte order */
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8110e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e06:	691b      	ldr	r3, [r3, #16]
 8110e08:	ba1a      	rev	r2, r3
 8110e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e0c:	611a      	str	r2, [r3, #16]

            /* Move the checksum into header.  */
            header_ptr -> nx_tcp_header_word_4 =  header_ptr -> nx_tcp_header_word_4 | (checksum << NX_SHIFT_BY_16);
 8110e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e10:	691a      	ldr	r2, [r3, #16]
 8110e12:	69bb      	ldr	r3, [r7, #24]
 8110e14:	041b      	lsls	r3, r3, #16
 8110e16:	431a      	orrs	r2, r3
 8110e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e1a:	611a      	str	r2, [r3, #16]

            /* Convert back to network byte order for transmit. */
            NX_CHANGE_ULONG_ENDIAN(header_ptr -> nx_tcp_header_word_4);
 8110e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e1e:	691b      	ldr	r3, [r3, #16]
 8110e20:	ba1a      	rev	r2, r3
 8110e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e24:	611a      	str	r2, [r3, #16]
        }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

        /* Determine if the retransmitted packet is identical to the original packet.
           RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
        if ((header_ptr -> nx_tcp_acknowledgment_number == original_acknowledgment_number) &&
 8110e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e28:	689b      	ldr	r3, [r3, #8]
 8110e2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8110e2c:	429a      	cmp	r2, r3
 8110e2e:	d10d      	bne.n	8110e4c <_nx_tcp_socket_retransmit+0x2b4>
            (header_ptr -> nx_tcp_header_word_3 == original_header_word_3) &&
 8110e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e32:	68db      	ldr	r3, [r3, #12]
        if ((header_ptr -> nx_tcp_acknowledgment_number == original_acknowledgment_number) &&
 8110e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8110e36:	429a      	cmp	r2, r3
 8110e38:	d108      	bne.n	8110e4c <_nx_tcp_socket_retransmit+0x2b4>
            (header_ptr -> nx_tcp_header_word_4 == original_header_word_4))
 8110e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e3c:	691b      	ldr	r3, [r3, #16]
            (header_ptr -> nx_tcp_header_word_3 == original_header_word_3) &&
 8110e3e:	6a3a      	ldr	r2, [r7, #32]
 8110e40:	429a      	cmp	r2, r3
 8110e42:	d103      	bne.n	8110e4c <_nx_tcp_socket_retransmit+0x2b4>
        {

            /* Yes, identical packet, update the identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_TRUE;
 8110e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110e46:	2201      	movs	r2, #1
 8110e48:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        }


#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP retransmit count.  */
        ip_ptr -> nx_ip_tcp_retransmit_packets++;
 8110e4c:	68fb      	ldr	r3, [r7, #12]
 8110e4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8110e52:	1c5a      	adds	r2, r3, #1
 8110e54:	68fb      	ldr	r3, [r7, #12]
 8110e56:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

        /* Increment the TCP retransmit count for the socket.  */
        socket_ptr -> nx_tcp_socket_retransmit_packets++;
 8110e5a:	68bb      	ldr	r3, [r7, #8]
 8110e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8110e60:	1c5a      	adds	r2, r3, #1
 8110e62:	68bb      	ldr	r3, [r7, #8]
 8110e64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RETRY, ip_ptr, socket_ptr, packet_ptr, socket_ptr -> nx_tcp_socket_timeout_retries, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Clear the queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8110e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110e6a:	2200      	movs	r2, #0
 8110e6c:	61da      	str	r2, [r3, #28]
        /* Yes, the driver has finished with the packet at the head of the
           transmit sent list... so it can be sent again!  */

#ifndef NX_DISABLE_IPV4
        /* Is this an IPv4 connection? */
        if (socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_version == NX_IP_VERSION_V4)
 8110e6e:	68bb      	ldr	r3, [r7, #8]
 8110e70:	695b      	ldr	r3, [r3, #20]
 8110e72:	2b04      	cmp	r3, #4
 8110e74:	d118      	bne.n	8110ea8 <_nx_tcp_socket_retransmit+0x310>
        {
            _nx_ip_packet_send(ip_ptr, packet_ptr,
 8110e76:	68bb      	ldr	r3, [r7, #8]
 8110e78:	6998      	ldr	r0, [r3, #24]
 8110e7a:	68bb      	ldr	r3, [r7, #8]
 8110e7c:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
                               socket_ptr -> nx_tcp_socket_connect_ip.nxd_ip_address.v4,
                               socket_ptr -> nx_tcp_socket_type_of_service,
                               socket_ptr -> nx_tcp_socket_time_to_live, NX_IP_TCP,
 8110e80:	68bb      	ldr	r3, [r7, #8]
 8110e82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
            _nx_ip_packet_send(ip_ptr, packet_ptr,
 8110e86:	68ba      	ldr	r2, [r7, #8]
 8110e88:	f8d2 20ac 	ldr.w	r2, [r2, #172]	@ 0xac
 8110e8c:	68b9      	ldr	r1, [r7, #8]
 8110e8e:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 8110e90:	9103      	str	r1, [sp, #12]
 8110e92:	9202      	str	r2, [sp, #8]
 8110e94:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8110e98:	9201      	str	r2, [sp, #4]
 8110e9a:	9300      	str	r3, [sp, #0]
 8110e9c:	4623      	mov	r3, r4
 8110e9e:	4602      	mov	r2, r0
 8110ea0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8110ea2:	68f8      	ldr	r0, [r7, #12]
 8110ea4:	f7fc fc40 	bl	810d728 <_nx_ip_packet_send>
#endif /* FEATURE_NX_IPV6 */

        /* Move to next packet. */
        /* During fast recovery, only one packet is retransmitted at once. */
        /* After a timeout, the sending data can be at most one SMSS. */
        if ((next_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED) ||
 8110ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110eaa:	f1b3 3fee 	cmp.w	r3, #4008636142	@ 0xeeeeeeee
 8110eae:	d013      	beq.n	8110ed8 <_nx_tcp_socket_retransmit+0x340>
            (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE))
 8110eb0:	68bb      	ldr	r3, [r7, #8]
 8110eb2:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
        if ((next_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED) ||
 8110eb6:	2b01      	cmp	r3, #1
 8110eb8:	d00e      	beq.n	8110ed8 <_nx_tcp_socket_retransmit+0x340>
        {
            break;
        }
        else
        {
            packet_ptr = next_ptr;
 8110eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110ebc:	647b      	str	r3, [r7, #68]	@ 0x44
    while (packet_ptr && (packet_ptr -> nx_packet_queue_next == (NX_PACKET *)NX_DRIVER_TX_DONE))
 8110ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110ec0:	2b00      	cmp	r3, #0
 8110ec2:	d009      	beq.n	8110ed8 <_nx_tcp_socket_retransmit+0x340>
 8110ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110ec6:	69db      	ldr	r3, [r3, #28]
 8110ec8:	f1b3 3fdd 	cmp.w	r3, #3722304989	@ 0xdddddddd
 8110ecc:	f43f af2d 	beq.w	8110d2a <_nx_tcp_socket_retransmit+0x192>
 8110ed0:	e002      	b.n	8110ed8 <_nx_tcp_socket_retransmit+0x340>
            return;
 8110ed2:	bf00      	nop
 8110ed4:	e000      	b.n	8110ed8 <_nx_tcp_socket_retransmit+0x340>
            break;
 8110ed6:	bf00      	nop
        }
    }
}
 8110ed8:	374c      	adds	r7, #76	@ 0x4c
 8110eda:	46bd      	mov	sp, r7
 8110edc:	bd90      	pop	{r4, r7, pc}

08110ede <_nx_tcp_socket_state_ack_check>:
/*                                            comparison,                 */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_state_ack_check(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 8110ede:	b580      	push	{r7, lr}
 8110ee0:	b096      	sub	sp, #88	@ 0x58
 8110ee2:	af00      	add	r7, sp, #0
 8110ee4:	6078      	str	r0, [r7, #4]
 8110ee6:	6039      	str	r1, [r7, #0]

TX_INTERRUPT_SAVE_AREA

NX_TCP_HEADER *search_header_ptr = NX_NULL;
 8110ee8:	2300      	movs	r3, #0
 8110eea:	657b      	str	r3, [r7, #84]	@ 0x54
ULONG          starting_tx_sequence;
ULONG          ending_tx_sequence;
ULONG          ending_rx_sequence;
ULONG          acked_bytes;
ULONG          tcp_payload_length;
UINT           wrapped_flag = NX_FALSE;
 8110eec:	2300      	movs	r3, #0
 8110eee:	63bb      	str	r3, [r7, #56]	@ 0x38


    /* Determine if the header has an ACK bit set.  This is an
       acknowledgement of a previous transmission.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 8110ef0:	683b      	ldr	r3, [r7, #0]
 8110ef2:	68db      	ldr	r3, [r3, #12]
 8110ef4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8110ef8:	2b00      	cmp	r3, #0
 8110efa:	f000 82ca 	beq.w	8111492 <_nx_tcp_socket_state_ack_check+0x5b4>
    {

        /* Initialize tx sequence. */
        if (socket_ptr -> nx_tcp_socket_zero_window_probe_has_data)
 8110efe:	687b      	ldr	r3, [r7, #4]
 8110f00:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8110f04:	2b00      	cmp	r3, #0
 8110f06:	d004      	beq.n	8110f12 <_nx_tcp_socket_state_ack_check+0x34>
        {
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence + 1;
 8110f08:	687b      	ldr	r3, [r7, #4]
 8110f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8110f0c:	3301      	adds	r3, #1
 8110f0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8110f10:	e002      	b.n	8110f18 <_nx_tcp_socket_state_ack_check+0x3a>
        }
        else
        {
            ending_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence;
 8110f12:	687b      	ldr	r3, [r7, #4]
 8110f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8110f16:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        starting_tx_sequence = socket_ptr -> nx_tcp_socket_tx_sequence - socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 8110f18:	687b      	ldr	r3, [r7, #4]
 8110f1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8110f1c:	687b      	ldr	r3, [r7, #4]
 8110f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8110f20:	1ad3      	subs	r3, r2, r3
 8110f22:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize ending rx sequence. */
        if (socket_ptr -> nx_tcp_socket_receive_queue_tail)
 8110f24:	687b      	ldr	r3, [r7, #4]
 8110f26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8110f2a:	2b00      	cmp	r3, #0
 8110f2c:	d028      	beq.n	8110f80 <_nx_tcp_socket_state_ack_check+0xa2>
        {
            search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_tail;
 8110f2e:	687b      	ldr	r3, [r7, #4]
 8110f30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8110f34:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Setup a pointer to header of this packet in the sent list.  */
#ifndef NX_DISABLE_IPV4
            if (search_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8110f36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8110f38:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8110f3c:	2b04      	cmp	r3, #4
 8110f3e:	d11d      	bne.n	8110f7c <_nx_tcp_socket_state_ack_check+0x9e>
            {

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 8110f40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8110f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8110f44:	3314      	adds	r3, #20
 8110f46:	657b      	str	r3, [r7, #84]	@ 0x54
            {
                return(NX_FALSE);
            }

            /* Determine the size of the TCP header.  */
            temp =  search_header_ptr -> nx_tcp_header_word_3;
 8110f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8110f4a:	68db      	ldr	r3, [r3, #12]
 8110f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
            header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8110f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8110f50:	0f1b      	lsrs	r3, r3, #28
 8110f52:	009b      	lsls	r3, r3, #2
 8110f54:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Determine the sequence number in the TCP header.  */
            search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 8110f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8110f58:	685b      	ldr	r3, [r3, #4]
 8110f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Calculate the payload length of TCP. */
            tcp_payload_length = (search_ptr -> nx_packet_length -
 8110f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8110f5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                  (header_length +
                                   (ULONG)((ALIGN_TYPE)search_header_ptr -
                                           (ALIGN_TYPE)search_ptr -> nx_packet_prepend_ptr)));
 8110f60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8110f62:	689b      	ldr	r3, [r3, #8]
 8110f64:	4619      	mov	r1, r3
                                   (ULONG)((ALIGN_TYPE)search_header_ptr -
 8110f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8110f68:	1ac9      	subs	r1, r1, r3
                                  (header_length +
 8110f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110f6c:	1acb      	subs	r3, r1, r3
            tcp_payload_length = (search_ptr -> nx_packet_length -
 8110f6e:	4413      	add	r3, r2
 8110f70:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Calculate the ending packet sequence.  */
            ending_rx_sequence =  search_sequence + tcp_payload_length;
 8110f72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8110f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110f76:	4413      	add	r3, r2
 8110f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8110f7a:	e004      	b.n	8110f86 <_nx_tcp_socket_state_ack_check+0xa8>
                return(NX_FALSE);
 8110f7c:	2300      	movs	r3, #0
 8110f7e:	e289      	b.n	8111494 <_nx_tcp_socket_state_ack_check+0x5b6>
        }
        else
        {
            ending_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 8110f80:	687b      	ldr	r3, [r7, #4]
 8110f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8110f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
#endif

        /* First, determine if incoming ACK matches our transmit sequence.  */
        /*lint -e{923} suppress cast of pointer to ULONG.  */
        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == ending_tx_sequence)
 8110f86:	683b      	ldr	r3, [r7, #0]
 8110f88:	689b      	ldr	r3, [r3, #8]
 8110f8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8110f8c:	429a      	cmp	r2, r3
 8110f8e:	d111      	bne.n	8110fb4 <_nx_tcp_socket_state_ack_check+0xd6>
        {

            /* In this case, everything on the transmit list is acknowledged.  Simply set the packet
               release count to the number of packets in the transmit queue.  */
            packet_release_count =  socket_ptr -> nx_tcp_socket_transmit_sent_count;
 8110f90:	687b      	ldr	r3, [r7, #4]
 8110f92:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8110f96:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Set the previous pointer to the socket transmit tail pointer.  */
            previous_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_tail;
 8110f98:	687b      	ldr	r3, [r7, #4]
 8110f9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8110f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Is this ACK to FIN? */
            if (socket_ptr -> nx_tcp_socket_state >= NX_TCP_FIN_WAIT_1)
 8110fa0:	687b      	ldr	r3, [r7, #4]
 8110fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8110fa4:	2b06      	cmp	r3, #6
 8110fa6:	f240 80d3 	bls.w	8111150 <_nx_tcp_socket_state_ack_check+0x272>
            {

                /* Yes it is. */
                socket_ptr -> nx_tcp_socket_fin_acked = NX_TRUE;
 8110faa:	687b      	ldr	r3, [r7, #4]
 8110fac:	2201      	movs	r2, #1
 8110fae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 8110fb2:	e0cd      	b.n	8111150 <_nx_tcp_socket_state_ack_check+0x272>
        {

            /* Calculate the start and end of the transmit sequence.  */

            /* Pickup the head of the transmit queue.  */
            search_ptr =    socket_ptr -> nx_tcp_socket_transmit_sent_head;
 8110fb4:	687b      	ldr	r3, [r7, #4]
 8110fb6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8110fba:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Determine if there is a packet on the transmit queue... and determine if the packet has been
               transmitted.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if ((search_ptr) && (search_ptr -> nx_packet_queue_next == ((NX_PACKET *)NX_DRIVER_TX_DONE)))
 8110fbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8110fbe:	2b00      	cmp	r3, #0
 8110fc0:	d056      	beq.n	8111070 <_nx_tcp_socket_state_ack_check+0x192>
 8110fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8110fc4:	69db      	ldr	r3, [r3, #28]
 8110fc6:	f1b3 3fdd 	cmp.w	r3, #3722304989	@ 0xdddddddd
 8110fca:	d151      	bne.n	8111070 <_nx_tcp_socket_state_ack_check+0x192>
            {

                /* Determine if the incoming ACK matches the front of our transmit queue. */
                if (tcp_header_ptr -> nx_tcp_acknowledgment_number == starting_tx_sequence)
 8110fcc:	683b      	ldr	r3, [r7, #0]
 8110fce:	689b      	ldr	r3, [r3, #8]
 8110fd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8110fd2:	429a      	cmp	r2, r3
 8110fd4:	d143      	bne.n	811105e <_nx_tcp_socket_state_ack_check+0x180>
                {

                    /* Handle duplicated ACK packet.  */
                    socket_ptr -> nx_tcp_socket_duplicated_ack_received++;
 8110fd6:	687b      	ldr	r3, [r7, #4]
 8110fd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110fda:	1c5a      	adds	r2, r3, #1
 8110fdc:	687b      	ldr	r3, [r7, #4]
 8110fde:	66da      	str	r2, [r3, #108]	@ 0x6c

                    if (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 3)
 8110fe0:	687b      	ldr	r3, [r7, #4]
 8110fe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110fe4:	2b03      	cmp	r3, #3
 8110fe6:	d12a      	bne.n	811103e <_nx_tcp_socket_state_ack_check+0x160>
                    {
                        if ((INT)((tcp_header_ptr -> nx_tcp_acknowledgment_number - 1) -
 8110fe8:	683b      	ldr	r3, [r7, #0]
 8110fea:	689a      	ldr	r2, [r3, #8]
                                  socket_ptr -> nx_tcp_socket_tx_sequence_recover) > 0)
 8110fec:	687b      	ldr	r3, [r7, #4]
 8110fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                        if ((INT)((tcp_header_ptr -> nx_tcp_acknowledgment_number - 1) -
 8110ff0:	1ad3      	subs	r3, r2, r3
 8110ff2:	3b01      	subs	r3, #1
 8110ff4:	2b00      	cmp	r3, #0
 8110ff6:	dd08      	ble.n	811100a <_nx_tcp_socket_state_ack_check+0x12c>
                        {

                            /* Cumulative acknowledge covers more than recover. */
                            /* Section 3.2, Page 5, RFC6582. */
                            /* Retransmit packet immediately. */
                            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_TRUE);
 8110ff8:	687b      	ldr	r3, [r7, #4]
 8110ffa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8110ffe:	2201      	movs	r2, #1
 8111000:	6879      	ldr	r1, [r7, #4]
 8111002:	4618      	mov	r0, r3
 8111004:	f7ff fdc8 	bl	8110b98 <_nx_tcp_socket_retransmit>
 8111008:	e029      	b.n	811105e <_nx_tcp_socket_state_ack_check+0x180>
                        }
                        else if ((socket_ptr -> nx_tcp_socket_tx_window_congestion > socket_ptr -> nx_tcp_socket_connect_mss) &&
 811100a:	687b      	ldr	r3, [r7, #4]
 811100c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 811100e:	687b      	ldr	r3, [r7, #4]
 8111010:	6a1b      	ldr	r3, [r3, #32]
 8111012:	429a      	cmp	r2, r3
 8111014:	d923      	bls.n	811105e <_nx_tcp_socket_state_ack_check+0x180>
                                 ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - (socket_ptr -> nx_tcp_socket_previous_highest_ack +
 8111016:	683b      	ldr	r3, [r7, #0]
 8111018:	689a      	ldr	r2, [r3, #8]
 811101a:	687b      	ldr	r3, [r7, #4]
 811101c:	6e59      	ldr	r1, [r3, #100]	@ 0x64
                                                                                          (socket_ptr -> nx_tcp_socket_connect_mss << 2))) < 0))
 811101e:	687b      	ldr	r3, [r7, #4]
 8111020:	6a1b      	ldr	r3, [r3, #32]
 8111022:	009b      	lsls	r3, r3, #2
                                 ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - (socket_ptr -> nx_tcp_socket_previous_highest_ack +
 8111024:	440b      	add	r3, r1
 8111026:	1ad3      	subs	r3, r2, r3
                        else if ((socket_ptr -> nx_tcp_socket_tx_window_congestion > socket_ptr -> nx_tcp_socket_connect_mss) &&
 8111028:	2b00      	cmp	r3, #0
 811102a:	da18      	bge.n	811105e <_nx_tcp_socket_state_ack_check+0x180>

                            /* Congestion window is greater than SMSS bytes and
                               the difference between highest_ack and prev_highest_ack is at most 4*SMSS bytes.*/
                            /* Section 4.1, Page 5, RFC6582. */
                            /* Retransmit packet immediately. */
                            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_TRUE);
 811102c:	687b      	ldr	r3, [r7, #4]
 811102e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8111032:	2201      	movs	r2, #1
 8111034:	6879      	ldr	r1, [r7, #4]
 8111036:	4618      	mov	r0, r3
 8111038:	f7ff fdae 	bl	8110b98 <_nx_tcp_socket_retransmit>
 811103c:	e00f      	b.n	811105e <_nx_tcp_socket_state_ack_check+0x180>
                        }
                    }
                    else if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received > 3) &&
 811103e:	687b      	ldr	r3, [r7, #4]
 8111040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8111042:	2b03      	cmp	r3, #3
 8111044:	d90b      	bls.n	811105e <_nx_tcp_socket_state_ack_check+0x180>
                             (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE))
 8111046:	687b      	ldr	r3, [r7, #4]
 8111048:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
                    else if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received > 3) &&
 811104c:	2b01      	cmp	r3, #1
 811104e:	d106      	bne.n	811105e <_nx_tcp_socket_state_ack_check+0x180>
                    {

                        /* CWND += MSS  */
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 8111050:	687b      	ldr	r3, [r7, #4]
 8111052:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8111054:	687b      	ldr	r3, [r7, #4]
 8111056:	6a1b      	ldr	r3, [r3, #32]
 8111058:	441a      	add	r2, r3
 811105a:	687b      	ldr	r3, [r7, #4]
 811105c:	659a      	str	r2, [r3, #88]	@ 0x58
                    }
                }

                /* Determine if the transmit queue has wrapped.  */
                if (ending_tx_sequence > starting_tx_sequence)
 811105e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8111060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111062:	429a      	cmp	r2, r3
 8111064:	d902      	bls.n	811106c <_nx_tcp_socket_state_ack_check+0x18e>
                {

                    /* Clear the wrapped flag.  */
                    wrapped_flag =  NX_FALSE;
 8111066:	2300      	movs	r3, #0
 8111068:	63bb      	str	r3, [r7, #56]	@ 0x38
 811106a:	e001      	b.n	8111070 <_nx_tcp_socket_state_ack_check+0x192>
                }
                else
                {

                    /* Set the wrapped flag.  */
                    wrapped_flag =  NX_TRUE;
 811106c:	2301      	movs	r3, #1
 811106e:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
            }

            /* Initialize the packet release count.  */
            packet_release_count =  0;
 8111070:	2300      	movs	r3, #0
 8111072:	647b      	str	r3, [r7, #68]	@ 0x44

            /* See if we can find the sequence number in the sent queue for this
               socket.  */
            previous_ptr =  NX_NULL;
 8111074:	2300      	movs	r3, #0
 8111076:	64fb      	str	r3, [r7, #76]	@ 0x4c
            while (search_ptr)
 8111078:	e063      	b.n	8111142 <_nx_tcp_socket_state_ack_check+0x264>
            {

                /* Determine if the packet has been transmitted.  */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                if (search_ptr -> nx_packet_queue_next != ((NX_PACKET *)NX_DRIVER_TX_DONE))
 811107a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811107c:	69db      	ldr	r3, [r3, #28]
 811107e:	f1b3 3fdd 	cmp.w	r3, #3722304989	@ 0xdddddddd
 8111082:	d007      	beq.n	8111094 <_nx_tcp_socket_state_ack_check+0x1b6>
                {

                    /* Setup a pointer to header of this packet in the sent list.  */
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 8111084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8111086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                                           search_ptr -> nx_packet_ip_header_length);
 8111088:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 811108a:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
                    search_header_ptr =  (NX_TCP_HEADER *)(search_ptr -> nx_packet_ip_header +
 811108e:	4413      	add	r3, r2
 8111090:	657b      	str	r3, [r7, #84]	@ 0x54
 8111092:	e002      	b.n	811109a <_nx_tcp_socket_state_ack_check+0x1bc>
                else
                {

                    /* Setup a pointer to header of this packet in the sent list.  */
                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 8111094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8111096:	689b      	ldr	r3, [r3, #8]
 8111098:	657b      	str	r3, [r7, #84]	@ 0x54
                }

                /* Determine the size of the TCP header.  */
                temp =  search_header_ptr -> nx_tcp_header_word_3;
 811109a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811109c:	68db      	ldr	r3, [r3, #12]
 811109e:	64bb      	str	r3, [r7, #72]	@ 0x48
                NX_CHANGE_ULONG_ENDIAN(temp);
 81110a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81110a2:	ba1b      	rev	r3, r3
 81110a4:	64bb      	str	r3, [r7, #72]	@ 0x48
                header_length =  (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 81110a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81110a8:	0f1b      	lsrs	r3, r3, #28
 81110aa:	009b      	lsls	r3, r3, #2
 81110ac:	633b      	str	r3, [r7, #48]	@ 0x30

                /* Determine the sequence number in the TCP header.  */
                search_sequence =  search_header_ptr -> nx_tcp_sequence_number;
 81110ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81110b0:	685b      	ldr	r3, [r3, #4]
 81110b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                NX_CHANGE_ULONG_ENDIAN(search_sequence);
 81110b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81110b6:	ba1b      	rev	r3, r3
 81110b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the payload length of TCP. */
                tcp_payload_length = (search_ptr -> nx_packet_length -
 81110ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81110bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                      (header_length +
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
                                               (ALIGN_TYPE)search_ptr -> nx_packet_prepend_ptr)));
 81110be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81110c0:	689b      	ldr	r3, [r3, #8]
 81110c2:	4619      	mov	r1, r3
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
 81110c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81110c6:	1ac9      	subs	r1, r1, r3
                                      (header_length +
 81110c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81110ca:	1acb      	subs	r3, r1, r3
                tcp_payload_length = (search_ptr -> nx_packet_length -
 81110cc:	4413      	add	r3, r2
 81110ce:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Calculate the ending packet sequence.  */
                ending_packet_sequence =  search_sequence + tcp_payload_length;
 81110d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81110d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81110d4:	4413      	add	r3, r2
 81110d6:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Determine if the transmit window is wrapped.  */
                if (wrapped_flag == NX_FALSE)
 81110d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81110da:	2b00      	cmp	r3, #0
 81110dc:	d10a      	bne.n	81110f4 <_nx_tcp_socket_state_ack_check+0x216>

                    /* No, the transmit window is not wrapped. Perform a simple compare to determine if the ACK
                       covers the current search packet.  */

                    /* Is this ACK before the current search packet or after the transmit sequence?  */
                    if ((tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence) ||
 81110de:	683b      	ldr	r3, [r7, #0]
 81110e0:	689b      	ldr	r3, [r3, #8]
 81110e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81110e4:	429a      	cmp	r2, r3
 81110e6:	d833      	bhi.n	8111150 <_nx_tcp_socket_state_ack_check+0x272>
                        (tcp_header_ptr -> nx_tcp_acknowledgment_number > ending_tx_sequence))
 81110e8:	683b      	ldr	r3, [r7, #0]
 81110ea:	689b      	ldr	r3, [r3, #8]
                    if ((tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence) ||
 81110ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81110ee:	429a      	cmp	r2, r3
 81110f0:	d32e      	bcc.n	8111150 <_nx_tcp_socket_state_ack_check+0x272>
 81110f2:	e018      	b.n	8111126 <_nx_tcp_socket_state_ack_check+0x248>

                    /* Yes, the transmit window has wrapped.  We need to now check for all the wrap conditions to
                       determine if ACK covers the current search packet.  */

                    /* Is the search packet's ending sequence number in the wrapped part of the window.  */
                    if (ending_packet_sequence < starting_tx_sequence)
 81110f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81110f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81110f8:	429a      	cmp	r2, r3
 81110fa:	d20a      	bcs.n	8111112 <_nx_tcp_socket_state_ack_check+0x234>
                    {

                        /* The search packet ends in the wrapped portion of the window.  Determine if the ACK
                           sequence in the wrapped portion as well.  */
                        if (tcp_header_ptr -> nx_tcp_acknowledgment_number < starting_tx_sequence)
 81110fc:	683b      	ldr	r3, [r7, #0]
 81110fe:	689b      	ldr	r3, [r3, #8]
 8111100:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8111102:	429a      	cmp	r2, r3
 8111104:	d921      	bls.n	811114a <_nx_tcp_socket_state_ack_check+0x26c>
                        {

                            /* Yes, the ACK sequence is in the wrapped portion as well. Simply compare the ACK
                               sequence with the search packet sequence.  */
                            if (tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence)
 8111106:	683b      	ldr	r3, [r7, #0]
 8111108:	689b      	ldr	r3, [r3, #8]
 811110a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811110c:	429a      	cmp	r2, r3
 811110e:	d90a      	bls.n	8111126 <_nx_tcp_socket_state_ack_check+0x248>
                            {

                                /* ACK does not cover the search packet. Break out of the loop.  */
                                break;
 8111110:	e01e      	b.n	8111150 <_nx_tcp_socket_state_ack_check+0x272>
                    else
                    {

                        /* The search packet is in the non-wrapped portion of the window.  Determine if the ACK
                           sequence is in the non-wrapped portion as well.  */
                        if (tcp_header_ptr -> nx_tcp_acknowledgment_number >= starting_tx_sequence)
 8111112:	683b      	ldr	r3, [r7, #0]
 8111114:	689b      	ldr	r3, [r3, #8]
 8111116:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8111118:	429a      	cmp	r2, r3
 811111a:	d804      	bhi.n	8111126 <_nx_tcp_socket_state_ack_check+0x248>
                        {

                            /* Yes, the ACK sequence is in the non-wrapped portion of the window. Simply compare the ACK
                               sequence with the search packet sequence.  */
                            if (tcp_header_ptr -> nx_tcp_acknowledgment_number < ending_packet_sequence)
 811111c:	683b      	ldr	r3, [r7, #0]
 811111e:	689b      	ldr	r3, [r3, #8]
 8111120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8111122:	429a      	cmp	r2, r3
 8111124:	d813      	bhi.n	811114e <_nx_tcp_socket_state_ack_check+0x270>
                }

                /* At this point we know that the ACK received covers the search packet.  */

                /* Increase the packet release count.  */
                packet_release_count++;
 8111126:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8111128:	3301      	adds	r3, #1
 811112a:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Move the search and previous pointers forward.  */
                previous_ptr =  search_ptr;
 811112c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811112e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8111130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8111132:	6a1b      	ldr	r3, [r3, #32]
 8111134:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Determine if we are at the end of the TCP queue.  */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                if (search_ptr == ((NX_PACKET *)NX_PACKET_ENQUEUED))
 8111136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8111138:	f1b3 3fee 	cmp.w	r3, #4008636142	@ 0xeeeeeeee
 811113c:	d101      	bne.n	8111142 <_nx_tcp_socket_state_ack_check+0x264>
                {

                    /* Yes, set the search pointer to NULL.  */
                    search_ptr =  NX_NULL;
 811113e:	2300      	movs	r3, #0
 8111140:	653b      	str	r3, [r7, #80]	@ 0x50
            while (search_ptr)
 8111142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8111144:	2b00      	cmp	r3, #0
 8111146:	d198      	bne.n	811107a <_nx_tcp_socket_state_ack_check+0x19c>
 8111148:	e002      	b.n	8111150 <_nx_tcp_socket_state_ack_check+0x272>
                            break;
 811114a:	bf00      	nop
 811114c:	e000      	b.n	8111150 <_nx_tcp_socket_state_ack_check+0x272>
                                break;
 811114e:	bf00      	nop
                }
            }
        }

        /* Determine if anything needs to be released.  */
        if (!packet_release_count)
 8111150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8111152:	2b00      	cmp	r3, #0
 8111154:	d120      	bne.n	8111198 <_nx_tcp_socket_state_ack_check+0x2ba>
        {

            /* No, check and see if the ACK is valid.  */
            /* If the ACK acks something not yet sent (SEG.ACK > SND.NXT) then send an ACK, drop the segment */
            /* Page 72, section 3.9, RFC 793.*/
            if (tcp_header_ptr -> nx_tcp_acknowledgment_number != ending_tx_sequence)
 8111156:	683b      	ldr	r3, [r7, #0]
 8111158:	689b      	ldr	r3, [r3, #8]
 811115a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 811115c:	429a      	cmp	r2, r3
 811115e:	d00c      	beq.n	811117a <_nx_tcp_socket_state_ack_check+0x29c>
            {

                /* If the ACK is a duplicate, it can be ignored. */
                if ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - ending_tx_sequence) > 0)
 8111160:	683b      	ldr	r3, [r7, #0]
 8111162:	689a      	ldr	r2, [r3, #8]
 8111164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8111166:	1ad3      	subs	r3, r2, r3
 8111168:	2b00      	cmp	r3, #0
 811116a:	f340 8085 	ble.w	8111278 <_nx_tcp_socket_state_ack_check+0x39a>
                {

                    /* The ACK sequence is invalid. Respond with an ACK to let the other
                       side of the connection figure out if everything is still okay.  */
                    _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
 811116e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8111170:	6878      	ldr	r0, [r7, #4]
 8111172:	f7ff f80d 	bl	8110190 <_nx_tcp_packet_send_ack>
                    return(NX_FALSE);
 8111176:	2300      	movs	r3, #0
 8111178:	e18c      	b.n	8111494 <_nx_tcp_socket_state_ack_check+0x5b6>
                }
            }
            else if ((socket_ptr -> nx_tcp_socket_rx_window_current == 0) &&
 811117a:	687b      	ldr	r3, [r7, #4]
 811117c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811117e:	2b00      	cmp	r3, #0
 8111180:	d17a      	bne.n	8111278 <_nx_tcp_socket_state_ack_check+0x39a>
                     (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 8111182:	683b      	ldr	r3, [r7, #0]
 8111184:	685a      	ldr	r2, [r3, #4]
 8111186:	687b      	ldr	r3, [r7, #4]
 8111188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
            else if ((socket_ptr -> nx_tcp_socket_rx_window_current == 0) &&
 811118a:	429a      	cmp	r2, r3
 811118c:	d174      	bne.n	8111278 <_nx_tcp_socket_state_ack_check+0x39a>
            {

                /* Response to zero window probe.  */
                _nx_tcp_packet_send_ack(socket_ptr, ending_tx_sequence);
 811118e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8111190:	6878      	ldr	r0, [r7, #4]
 8111192:	f7fe fffd 	bl	8110190 <_nx_tcp_packet_send_ack>
 8111196:	e06f      	b.n	8111278 <_nx_tcp_socket_state_ack_check+0x39a>

            /* Congestion window adjustment during slow start and congestion avoidance is executed
               on every incoming ACK that acknowledges new data. RFC5681, Section3.1, Page4-8.  */

            /* Check whether the socket is in fast recovery procedure. */
            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 8111198:	687b      	ldr	r3, [r7, #4]
 811119a:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 811119e:	2b01      	cmp	r3, #1
 81111a0:	d10e      	bne.n	81111c0 <_nx_tcp_socket_state_ack_check+0x2e2>
            {

                /* Yes. */
                if ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number -
 81111a2:	683b      	ldr	r3, [r7, #0]
 81111a4:	689a      	ldr	r2, [r3, #8]
                          socket_ptr -> nx_tcp_socket_tx_sequence_recover) > 0)
 81111a6:	687b      	ldr	r3, [r7, #4]
 81111a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                if ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number -
 81111aa:	1ad3      	subs	r3, r2, r3
 81111ac:	2b00      	cmp	r3, #0
 81111ae:	dd07      	ble.n	81111c0 <_nx_tcp_socket_state_ack_check+0x2e2>
                {

                    /* All packets sent before entering fast recovery are ACKed. */
                    /* Exit fast recovery procedure. */
                    socket_ptr -> nx_tcp_socket_fast_recovery = NX_FALSE;
 81111b0:	687b      	ldr	r3, [r7, #4]
 81111b2:	2200      	movs	r2, #0
 81111b4:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_slow_start_threshold;
 81111b8:	687b      	ldr	r3, [r7, #4]
 81111ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81111bc:	687b      	ldr	r3, [r7, #4]
 81111be:	659a      	str	r2, [r3, #88]	@ 0x58
                }
            }

            if ((INT)(socket_ptr -> nx_tcp_socket_tx_sequence_recover -
 81111c0:	687b      	ldr	r3, [r7, #4]
 81111c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
                      (tcp_header_ptr -> nx_tcp_acknowledgment_number - 2)) < 0)
 81111c4:	683b      	ldr	r3, [r7, #0]
 81111c6:	689b      	ldr	r3, [r3, #8]
            if ((INT)(socket_ptr -> nx_tcp_socket_tx_sequence_recover -
 81111c8:	1ad3      	subs	r3, r2, r3
 81111ca:	3302      	adds	r3, #2
 81111cc:	2b00      	cmp	r3, #0
 81111ce:	da04      	bge.n	81111da <_nx_tcp_socket_state_ack_check+0x2fc>
            {

                /* Update the transmit sequence that entered fast transmit. */
                socket_ptr -> nx_tcp_socket_tx_sequence_recover = tcp_header_ptr -> nx_tcp_acknowledgment_number - 2;
 81111d0:	683b      	ldr	r3, [r7, #0]
 81111d2:	689b      	ldr	r3, [r3, #8]
 81111d4:	1e9a      	subs	r2, r3, #2
 81111d6:	687b      	ldr	r3, [r7, #4]
 81111d8:	661a      	str	r2, [r3, #96]	@ 0x60
            }

            /* Reset the duplicated ACK counter. */
            socket_ptr -> nx_tcp_socket_duplicated_ack_received = 0;
 81111da:	687b      	ldr	r3, [r7, #4]
 81111dc:	2200      	movs	r2, #0
 81111de:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Set previous cumulative acknowlesgement. */
            socket_ptr -> nx_tcp_socket_previous_highest_ack = starting_tx_sequence;
 81111e0:	687b      	ldr	r3, [r7, #4]
 81111e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81111e4:	665a      	str	r2, [r3, #100]	@ 0x64

            /* Calculate ACKed length. */
            acked_bytes = tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence;
 81111e6:	683b      	ldr	r3, [r7, #0]
 81111e8:	689a      	ldr	r2, [r3, #8]
 81111ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81111ec:	1ad3      	subs	r3, r2, r3
 81111ee:	623b      	str	r3, [r7, #32]

            if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 81111f0:	687b      	ldr	r3, [r7, #4]
 81111f2:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 81111f6:	2b01      	cmp	r3, #1
 81111f8:	d112      	bne.n	8111220 <_nx_tcp_socket_state_ack_check+0x342>
            {

                /* Process cwnd in fast recovery procedure. */
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= acked_bytes;
 81111fa:	687b      	ldr	r3, [r7, #4]
 81111fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81111fe:	6a3b      	ldr	r3, [r7, #32]
 8111200:	1ad2      	subs	r2, r2, r3
 8111202:	687b      	ldr	r3, [r7, #4]
 8111204:	659a      	str	r2, [r3, #88]	@ 0x58
                if (acked_bytes > socket_ptr -> nx_tcp_socket_connect_mss)
 8111206:	687b      	ldr	r3, [r7, #4]
 8111208:	6a1b      	ldr	r3, [r3, #32]
 811120a:	6a3a      	ldr	r2, [r7, #32]
 811120c:	429a      	cmp	r2, r3
 811120e:	d933      	bls.n	8111278 <_nx_tcp_socket_state_ack_check+0x39a>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 8111210:	687b      	ldr	r3, [r7, #4]
 8111212:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8111214:	687b      	ldr	r3, [r7, #4]
 8111216:	6a1b      	ldr	r3, [r3, #32]
 8111218:	441a      	add	r2, r3
 811121a:	687b      	ldr	r3, [r7, #4]
 811121c:	659a      	str	r2, [r3, #88]	@ 0x58
 811121e:	e02b      	b.n	8111278 <_nx_tcp_socket_state_ack_check+0x39a>
            else
            {

                /* Adjust the transmit window.  In slow start phase, the transmit window is incremented for every ACK.
                   In Congestion Avoidance phase, the window is incremented for every RTT. Section 3.1, Page 4-7, RFC5681.  */
                if (socket_ptr -> nx_tcp_socket_tx_window_congestion >= socket_ptr -> nx_tcp_socket_tx_slow_start_threshold)
 8111220:	687b      	ldr	r3, [r7, #4]
 8111222:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8111224:	687b      	ldr	r3, [r7, #4]
 8111226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8111228:	429a      	cmp	r2, r3
 811122a:	d312      	bcc.n	8111252 <_nx_tcp_socket_state_ack_check+0x374>
                {

                    /* In Congestion avoidance phase, for every ACK it receives, increase the window size using the
                       following approximation:
                       cwnd = cwnd + MSS * MSS / cwnd;  */
                    temp = socket_ptr -> nx_tcp_socket_connect_mss2 / socket_ptr -> nx_tcp_socket_tx_window_congestion;
 811122c:	687b      	ldr	r3, [r7, #4]
 811122e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8111230:	687b      	ldr	r3, [r7, #4]
 8111232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8111234:	fbb2 f3f3 	udiv	r3, r2, r3
 8111238:	64bb      	str	r3, [r7, #72]	@ 0x48

                    /* If the above formula yields 0, the result SHOULD be rounded up to 1 byte.  */
                    if (temp == 0)
 811123a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811123c:	2b00      	cmp	r3, #0
 811123e:	d101      	bne.n	8111244 <_nx_tcp_socket_state_ack_check+0x366>
                    {
                        temp = 1;
 8111240:	2301      	movs	r3, #1
 8111242:	64bb      	str	r3, [r7, #72]	@ 0x48
                    }
                    socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_tx_window_congestion + temp;
 8111244:	687b      	ldr	r3, [r7, #4]
 8111246:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8111248:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811124a:	441a      	add	r2, r3
 811124c:	687b      	ldr	r3, [r7, #4]
 811124e:	659a      	str	r2, [r3, #88]	@ 0x58
 8111250:	e012      	b.n	8111278 <_nx_tcp_socket_state_ack_check+0x39a>
                {

                    /* In Slow start phase:
                       cwnd += min (N, SMSS),
                       where N is the number of ACKed bytes. */
                    if (acked_bytes < socket_ptr -> nx_tcp_socket_connect_mss)
 8111252:	687b      	ldr	r3, [r7, #4]
 8111254:	6a1b      	ldr	r3, [r3, #32]
 8111256:	6a3a      	ldr	r2, [r7, #32]
 8111258:	429a      	cmp	r2, r3
 811125a:	d206      	bcs.n	811126a <_nx_tcp_socket_state_ack_check+0x38c>
                    {

                        /* In Slow start phase. Increase the cwnd by acked bytes.*/
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += acked_bytes;
 811125c:	687b      	ldr	r3, [r7, #4]
 811125e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8111260:	6a3b      	ldr	r3, [r7, #32]
 8111262:	441a      	add	r2, r3
 8111264:	687b      	ldr	r3, [r7, #4]
 8111266:	659a      	str	r2, [r3, #88]	@ 0x58
 8111268:	e006      	b.n	8111278 <_nx_tcp_socket_state_ack_check+0x39a>
                    }
                    else
                    {

                        /* In Slow start phase. Increase the cwnd by full MSS for every ack.*/
                        socket_ptr -> nx_tcp_socket_tx_window_congestion += socket_ptr -> nx_tcp_socket_connect_mss;
 811126a:	687b      	ldr	r3, [r7, #4]
 811126c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 811126e:	687b      	ldr	r3, [r7, #4]
 8111270:	6a1b      	ldr	r3, [r3, #32]
 8111272:	441a      	add	r2, r3
 8111274:	687b      	ldr	r3, [r7, #4]
 8111276:	659a      	str	r2, [r3, #88]	@ 0x58
        /* Update the window only when
         * 1. SND.UNA < SEG.ACK =< SND.NXT or
         * 2. SND.WL1 < SEG.SEQ or
         * 3. SND.WL1 = SEG.SEQ and SND.WL2 =< SEG.ACK
         * RFC793, Section 3.9, Page72. */
        if ((((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence) > 0) &&
 8111278:	683b      	ldr	r3, [r7, #0]
 811127a:	689a      	ldr	r2, [r3, #8]
 811127c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811127e:	1ad3      	subs	r3, r2, r3
 8111280:	2b00      	cmp	r3, #0
 8111282:	dd05      	ble.n	8111290 <_nx_tcp_socket_state_ack_check+0x3b2>
             ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - ending_tx_sequence) <= 0)) ||
 8111284:	683b      	ldr	r3, [r7, #0]
 8111286:	689a      	ldr	r2, [r3, #8]
 8111288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811128a:	1ad3      	subs	r3, r2, r3
        if ((((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence) > 0) &&
 811128c:	2b00      	cmp	r3, #0
 811128e:	dd10      	ble.n	81112b2 <_nx_tcp_socket_state_ack_check+0x3d4>
            ((INT)(tcp_header_ptr -> nx_tcp_sequence_number - ending_rx_sequence) > 0) ||
 8111290:	683b      	ldr	r3, [r7, #0]
 8111292:	685a      	ldr	r2, [r3, #4]
 8111294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111296:	1ad3      	subs	r3, r2, r3
             ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - ending_tx_sequence) <= 0)) ||
 8111298:	2b00      	cmp	r3, #0
 811129a:	dc0a      	bgt.n	81112b2 <_nx_tcp_socket_state_ack_check+0x3d4>
            (((INT)(tcp_header_ptr -> nx_tcp_sequence_number == ending_rx_sequence)) &&
 811129c:	683b      	ldr	r3, [r7, #0]
 811129e:	685b      	ldr	r3, [r3, #4]
            ((INT)(tcp_header_ptr -> nx_tcp_sequence_number - ending_rx_sequence) > 0) ||
 81112a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 81112a2:	429a      	cmp	r2, r3
 81112a4:	d10a      	bne.n	81112bc <_nx_tcp_socket_state_ack_check+0x3de>
             ((INT)(tcp_header_ptr -> nx_tcp_acknowledgment_number - starting_tx_sequence) >= 0)))
 81112a6:	683b      	ldr	r3, [r7, #0]
 81112a8:	689a      	ldr	r2, [r3, #8]
 81112aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81112ac:	1ad3      	subs	r3, r2, r3
            (((INT)(tcp_header_ptr -> nx_tcp_sequence_number == ending_rx_sequence)) &&
 81112ae:	2b00      	cmp	r3, #0
 81112b0:	db04      	blt.n	81112bc <_nx_tcp_socket_state_ack_check+0x3de>
        {

            /* Update this socket's transmit window with the advertised window size in the ACK message.  */
            socket_ptr -> nx_tcp_socket_tx_window_advertised =  (tcp_header_ptr -> nx_tcp_header_word_3) & NX_LOWER_16_MASK;
 81112b2:	683b      	ldr	r3, [r7, #0]
 81112b4:	68db      	ldr	r3, [r3, #12]
 81112b6:	b29a      	uxth	r2, r3
 81112b8:	687b      	ldr	r3, [r7, #4]
 81112ba:	655a      	str	r2, [r3, #84]	@ 0x54
            socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_snd_win_scale_value;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING */
        }

        /* Check advertised window. */
        if ((socket_ptr -> nx_tcp_socket_tx_window_advertised <= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes) &&
 81112bc:	687b      	ldr	r3, [r7, #4]
 81112be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81112c0:	687b      	ldr	r3, [r7, #4]
 81112c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81112c4:	429a      	cmp	r2, r3
 81112c6:	d80a      	bhi.n	81112de <_nx_tcp_socket_state_ack_check+0x400>
            (tcp_header_ptr -> nx_tcp_acknowledgment_number >= socket_ptr -> nx_tcp_socket_zero_window_probe_sequence))
 81112c8:	683b      	ldr	r3, [r7, #0]
 81112ca:	689a      	ldr	r2, [r3, #8]
 81112cc:	687b      	ldr	r3, [r7, #4]
 81112ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
        if ((socket_ptr -> nx_tcp_socket_tx_window_advertised <= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes) &&
 81112d2:	429a      	cmp	r2, r3
 81112d4:	d303      	bcc.n	81112de <_nx_tcp_socket_state_ack_check+0x400>
        {

            /* It is an ACK to Zero Window Probe. Reset the zero window probe failure. */
            socket_ptr -> nx_tcp_socket_zero_window_probe_failure = 0;
 81112d6:	687b      	ldr	r3, [r7, #4]
 81112d8:	2200      	movs	r2, #0
 81112da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        }

        if (!packet_release_count)
 81112de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81112e0:	2b00      	cmp	r3, #0
 81112e2:	d101      	bne.n	81112e8 <_nx_tcp_socket_state_ack_check+0x40a>
        {
            /* Done, return to caller. */
            return(NX_TRUE);
 81112e4:	2301      	movs	r3, #1
 81112e6:	e0d5      	b.n	8111494 <_nx_tcp_socket_state_ack_check+0x5b6>
            }
        }
#endif

        /* Save the front of the of the transmit queue.  */
        search_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 81112e8:	687b      	ldr	r3, [r7, #4]
 81112ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 81112ee:	653b      	str	r3, [r7, #80]	@ 0x50

        /* Okay so now the packet after the previous pointer needs to be the front of the
           queue.  */
        if (previous_ptr != socket_ptr -> nx_tcp_socket_transmit_sent_tail)
 81112f0:	687b      	ldr	r3, [r7, #4]
 81112f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 81112f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 81112f8:	429a      	cmp	r2, r3
 81112fa:	d017      	beq.n	811132c <_nx_tcp_socket_state_ack_check+0x44e>
        {

            /* Just update the head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 81112fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81112fe:	6a1a      	ldr	r2, [r3, #32]
 8111300:	687b      	ldr	r3, [r7, #4]
 8111302:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

            /* And decrease the transmit queue count accordingly.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_count =   socket_ptr -> nx_tcp_socket_transmit_sent_count - packet_release_count;
 8111306:	687b      	ldr	r3, [r7, #4]
 8111308:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 811130c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811130e:	1ad2      	subs	r2, r2, r3
 8111310:	687b      	ldr	r3, [r7, #4]
 8111312:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

            /* Setup a new transmit timeout.  */
            socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 8111316:	687b      	ldr	r3, [r7, #4]
 8111318:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 811131c:	687b      	ldr	r3, [r7, #4]
 811131e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
            socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 8111322:	687b      	ldr	r3, [r7, #4]
 8111324:	2200      	movs	r2, #0
 8111326:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 811132a:	e09e      	b.n	811146a <_nx_tcp_socket_state_ack_check+0x58c>
        else
        {

            /* The transmit list is now cleared, just set the head and tail pointers to
               NULL.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_head  =  NX_NULL;
 811132c:	687b      	ldr	r3, [r7, #4]
 811132e:	2200      	movs	r2, #0
 8111330:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
            socket_ptr -> nx_tcp_socket_transmit_sent_tail  =  NX_NULL;
 8111334:	687b      	ldr	r3, [r7, #4]
 8111336:	2200      	movs	r2, #0
 8111338:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

            /* Clear the transmit queue count.  */
            socket_ptr -> nx_tcp_socket_transmit_sent_count =  0;
 811133c:	687b      	ldr	r3, [r7, #4]
 811133e:	2200      	movs	r2, #0
 8111340:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

            /* Determine if a disconnect FIN has been sent from this side of the connection.  */
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 8111344:	687b      	ldr	r3, [r7, #4]
 8111346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111348:	2b07      	cmp	r3, #7
 811134a:	d007      	beq.n	811135c <_nx_tcp_socket_state_ack_check+0x47e>
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 811134c:	687b      	ldr	r3, [r7, #4]
 811134e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_FIN_WAIT_1) ||
 8111350:	2b09      	cmp	r3, #9
 8111352:	d003      	beq.n	811135c <_nx_tcp_socket_state_ack_check+0x47e>
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_LAST_ACK))
 8111354:	687b      	ldr	r3, [r7, #4]
 8111356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                (socket_ptr -> nx_tcp_socket_state == NX_TCP_CLOSING)    ||
 8111358:	2b0b      	cmp	r3, #11
 811135a:	d10a      	bne.n	8111372 <_nx_tcp_socket_state_ack_check+0x494>
            {

                /* Yes, setup timeout such that the FIN can be retried if it is lost.  */
                socket_ptr -> nx_tcp_socket_timeout =          socket_ptr -> nx_tcp_socket_timeout_rate;
 811135c:	687b      	ldr	r3, [r7, #4]
 811135e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8111362:	687b      	ldr	r3, [r7, #4]
 8111364:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
                socket_ptr -> nx_tcp_socket_timeout_retries =  0;
 8111368:	687b      	ldr	r3, [r7, #4]
 811136a:	2200      	movs	r2, #0
 811136c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8111370:	e007      	b.n	8111382 <_nx_tcp_socket_state_ack_check+0x4a4>
            }
            else if (socket_ptr -> nx_tcp_socket_tx_window_advertised != 0)
 8111372:	687b      	ldr	r3, [r7, #4]
 8111374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8111376:	2b00      	cmp	r3, #0
 8111378:	d077      	beq.n	811146a <_nx_tcp_socket_state_ack_check+0x58c>
            {

                /* Otherwise, a FIN has not been sent, simply clear the transmit timeout.  */
                socket_ptr -> nx_tcp_socket_timeout =  0;
 811137a:	687b      	ldr	r3, [r7, #4]
 811137c:	2200      	movs	r2, #0
 811137e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
            }
        }

        /* Now walk through the packets to release and set them
           free.  */
        while (packet_release_count--)
 8111382:	e072      	b.n	811146a <_nx_tcp_socket_state_ack_check+0x58c>
        {

            /* Use the previous pointer as the release pointer.  */
            previous_ptr =  search_ptr;
 8111384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8111386:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Move to the next packet in the queue before we clip the
               next pointer.  */
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8111388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811138a:	6a1b      	ldr	r3, [r3, #32]
 811138c:	653b      	str	r3, [r7, #80]	@ 0x50
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 811138e:	f3ef 8310 	mrs	r3, PRIMASK
 8111392:	61bb      	str	r3, [r7, #24]
    return(posture);
 8111394:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8111396:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8111398:	b672      	cpsid	i
    return(int_posture);
 811139a:	697b      	ldr	r3, [r7, #20]

            /* Disable interrupts temporarily.  */
            TX_DISABLE
 811139c:	61fb      	str	r3, [r7, #28]

            /* Set the packet to allocated to indicate it is no longer part of the TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  ((NX_PACKET *)NX_PACKET_ALLOCATED);
 811139e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81113a0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 81113a4:	621a      	str	r2, [r3, #32]
               the packet occurred prior to receiving the ACK. If so, the packet could be
               in an ARP queue or in a driver queue waiting for transmission so we can't
               release it directly at this point.  The driver or the ARP processing will
               release it when finished.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (previous_ptr -> nx_packet_queue_next ==  ((NX_PACKET *)NX_DRIVER_TX_DONE))
 81113a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81113a8:	69db      	ldr	r3, [r3, #28]
 81113aa:	f1b3 3fdd 	cmp.w	r3, #3722304989	@ 0xdddddddd
 81113ae:	d12b      	bne.n	8111408 <_nx_tcp_socket_state_ack_check+0x52a>
 81113b0:	69fb      	ldr	r3, [r7, #28]
 81113b2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81113b4:	693b      	ldr	r3, [r7, #16]
 81113b6:	f383 8810 	msr	PRIMASK, r3
}
 81113ba:	bf00      	nop

                /* Yes, the driver has already released the packet.  */

                /* Open up the transmit window. */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                search_header_ptr = (NX_TCP_HEADER *)previous_ptr -> nx_packet_prepend_ptr;
 81113bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81113be:	689b      	ldr	r3, [r3, #8]
 81113c0:	657b      	str	r3, [r7, #84]	@ 0x54

                temp = search_header_ptr -> nx_tcp_header_word_3;
 81113c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81113c4:	68db      	ldr	r3, [r3, #12]
 81113c6:	64bb      	str	r3, [r7, #72]	@ 0x48
                NX_CHANGE_ULONG_ENDIAN(temp);
 81113c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81113ca:	ba1b      	rev	r3, r3
 81113cc:	64bb      	str	r3, [r7, #72]	@ 0x48
                header_length = (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 81113ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81113d0:	0f1b      	lsrs	r3, r3, #28
 81113d2:	009b      	lsls	r3, r3, #2
 81113d4:	633b      	str	r3, [r7, #48]	@ 0x30
                if (socket_ptr -> nx_tcp_socket_tx_outstanding_bytes > (previous_ptr -> nx_packet_length - header_length))
 81113d6:	687b      	ldr	r3, [r7, #4]
 81113d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 81113da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81113dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 81113de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81113e0:	1acb      	subs	r3, r1, r3
 81113e2:	429a      	cmp	r2, r3
 81113e4:	d909      	bls.n	81113fa <_nx_tcp_socket_state_ack_check+0x51c>
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes -= previous_ptr -> nx_packet_length - header_length;
 81113e6:	687b      	ldr	r3, [r7, #4]
 81113e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 81113ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81113ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81113ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 81113f0:	1acb      	subs	r3, r1, r3
 81113f2:	441a      	add	r2, r3
 81113f4:	687b      	ldr	r3, [r7, #4]
 81113f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 81113f8:	e002      	b.n	8111400 <_nx_tcp_socket_state_ack_check+0x522>
                }
                else
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 81113fa:	687b      	ldr	r3, [r7, #4]
 81113fc:	2200      	movs	r2, #0
 81113fe:	65da      	str	r2, [r3, #92]	@ 0x5c
                }
                /* Release the packet.  */
                _nx_packet_release(previous_ptr);
 8111400:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8111402:	f7fd fc39 	bl	810ec78 <_nx_packet_release>
 8111406:	e030      	b.n	811146a <_nx_tcp_socket_state_ack_check+0x58c>
            else
            {

                /* No, the driver has not released the packet.  */
                /* Open up the transmit window. */
                search_header_ptr =  (NX_TCP_HEADER *)(previous_ptr -> nx_packet_ip_header +
 8111408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811140a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                                       previous_ptr -> nx_packet_ip_header_length);
 811140c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 811140e:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
                search_header_ptr =  (NX_TCP_HEADER *)(previous_ptr -> nx_packet_ip_header +
 8111412:	4413      	add	r3, r2
 8111414:	657b      	str	r3, [r7, #84]	@ 0x54

                temp = search_header_ptr -> nx_tcp_header_word_3;
 8111416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111418:	68db      	ldr	r3, [r3, #12]
 811141a:	64bb      	str	r3, [r7, #72]	@ 0x48
                NX_CHANGE_ULONG_ENDIAN(temp);
 811141c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811141e:	ba1b      	rev	r3, r3
 8111420:	64bb      	str	r3, [r7, #72]	@ 0x48
                header_length = (temp >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8111422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8111424:	0f1b      	lsrs	r3, r3, #28
 8111426:	009b      	lsls	r3, r3, #2
 8111428:	633b      	str	r3, [r7, #48]	@ 0x30
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 811142a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811142c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                      (header_length +
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
                                               (ALIGN_TYPE)(previous_ptr -> nx_packet_prepend_ptr))));
 811142e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8111430:	689b      	ldr	r3, [r3, #8]
 8111432:	4619      	mov	r1, r3
                                       (ULONG)((ALIGN_TYPE)search_header_ptr -
 8111434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111436:	1ac9      	subs	r1, r1, r3
                                      (header_length +
 8111438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811143a:	1acb      	subs	r3, r1, r3
                tcp_payload_length = (previous_ptr -> nx_packet_length -
 811143c:	4413      	add	r3, r2
 811143e:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (socket_ptr -> nx_tcp_socket_tx_outstanding_bytes > tcp_payload_length)
 8111440:	687b      	ldr	r3, [r7, #4]
 8111442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8111444:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8111446:	429a      	cmp	r2, r3
 8111448:	d206      	bcs.n	8111458 <_nx_tcp_socket_state_ack_check+0x57a>
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes -= tcp_payload_length;
 811144a:	687b      	ldr	r3, [r7, #4]
 811144c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 811144e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111450:	1ad2      	subs	r2, r2, r3
 8111452:	687b      	ldr	r3, [r7, #4]
 8111454:	65da      	str	r2, [r3, #92]	@ 0x5c
 8111456:	e002      	b.n	811145e <_nx_tcp_socket_state_ack_check+0x580>
                }
                else
                {
                    socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 8111458:	687b      	ldr	r3, [r7, #4]
 811145a:	2200      	movs	r2, #0
 811145c:	65da      	str	r2, [r3, #92]	@ 0x5c
 811145e:	69fb      	ldr	r3, [r7, #28]
 8111460:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8111462:	68fb      	ldr	r3, [r7, #12]
 8111464:	f383 8810 	msr	PRIMASK, r3
}
 8111468:	bf00      	nop
        while (packet_release_count--)
 811146a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811146c:	1e5a      	subs	r2, r3, #1
 811146e:	647a      	str	r2, [r7, #68]	@ 0x44
 8111470:	2b00      	cmp	r3, #0
 8111472:	d187      	bne.n	8111384 <_nx_tcp_socket_state_ack_check+0x4a6>
                /* Restore interrupts.  */
                TX_RESTORE
            }
        }

        if (socket_ptr -> nx_tcp_socket_fast_recovery == NX_TRUE)
 8111474:	687b      	ldr	r3, [r7, #4]
 8111476:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 811147a:	2b01      	cmp	r3, #1
 811147c:	d107      	bne.n	811148e <_nx_tcp_socket_state_ack_check+0x5b0>
        {

            /* Only partial data are ACKed. Retransmit packet immediately. */
            _nx_tcp_socket_retransmit(socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, NX_FALSE);
 811147e:	687b      	ldr	r3, [r7, #4]
 8111480:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8111484:	2200      	movs	r2, #0
 8111486:	6879      	ldr	r1, [r7, #4]
 8111488:	4618      	mov	r0, r3
 811148a:	f7ff fb85 	bl	8110b98 <_nx_tcp_socket_retransmit>
        }

        return(NX_TRUE);
 811148e:	2301      	movs	r3, #1
 8111490:	e000      	b.n	8111494 <_nx_tcp_socket_state_ack_check+0x5b6>
    else
    {

        /* The ACK bit is off drop the segment and return.  */
        /* RFC793, Section3.9, Page72.  */
        return(NX_FALSE);
 8111492:	2300      	movs	r3, #0
    }
}
 8111494:	4618      	mov	r0, r3
 8111496:	3758      	adds	r7, #88	@ 0x58
 8111498:	46bd      	mov	sp, r7
 811149a:	bd80      	pop	{r7, pc}

0811149c <_nx_tcp_socket_state_closing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_closing(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 811149c:	b580      	push	{r7, lr}
 811149e:	b082      	sub	sp, #8
 81114a0:	af00      	add	r7, sp, #0
 81114a2:	6078      	str	r0, [r7, #4]
 81114a4:	6039      	str	r1, [r7, #0]


    /* Determine if the incoming message is an ACK message.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 81114a6:	683b      	ldr	r3, [r7, #0]
 81114a8:	68db      	ldr	r3, [r3, #12]
 81114aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81114ae:	2b00      	cmp	r3, #0
 81114b0:	d029      	beq.n	8111506 <_nx_tcp_socket_state_closing+0x6a>
    {

        /* If it is proper, finish the disconnect. */
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 81114b2:	683b      	ldr	r3, [r7, #0]
 81114b4:	689a      	ldr	r2, [r3, #8]
 81114b6:	687b      	ldr	r3, [r7, #4]
 81114b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81114ba:	429a      	cmp	r2, r3
 81114bc:	d123      	bne.n	8111506 <_nx_tcp_socket_state_closing+0x6a>
            (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 81114be:	683b      	ldr	r3, [r7, #0]
 81114c0:	685a      	ldr	r2, [r3, #4]
 81114c2:	687b      	ldr	r3, [r7, #4]
 81114c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 81114c6:	429a      	cmp	r2, r3
 81114c8:	d11d      	bne.n	8111506 <_nx_tcp_socket_state_closing+0x6a>

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Set the socket state to TIMED WAIT now.  */
            socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 81114ca:	687b      	ldr	r3, [r7, #4]
 81114cc:	220a      	movs	r2, #10
 81114ce:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Set the timeout as 2MSL (Maximum Segment Lifetime). */
            socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 81114d0:	4b0f      	ldr	r3, [pc, #60]	@ (8111510 <_nx_tcp_socket_state_closing+0x74>)
 81114d2:	681a      	ldr	r2, [r3, #0]
 81114d4:	687b      	ldr	r3, [r7, #4]
 81114d6:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 81114da:	687b      	ldr	r3, [r7, #4]
 81114dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 81114e0:	2b00      	cmp	r3, #0
 81114e2:	d006      	beq.n	81114f2 <_nx_tcp_socket_state_closing+0x56>
            {

                /* Resume the thread suspended for the disconnect.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 81114e4:	687b      	ldr	r3, [r7, #4]
 81114e6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 81114ea:	2100      	movs	r1, #0
 81114ec:	4618      	mov	r0, r3
 81114ee:	f000 fec7 	bl	8112280 <_nx_tcp_socket_thread_resume>
            }

            /* If given, call the application's disconnect callback function
               for disconnect.  */
            if (socket_ptr -> nx_tcp_disconnect_callback)
 81114f2:	687b      	ldr	r3, [r7, #4]
 81114f4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 81114f8:	2b00      	cmp	r3, #0
 81114fa:	d004      	beq.n	8111506 <_nx_tcp_socket_state_closing+0x6a>
            {

                /* Call the application's disconnect handling function.  It is
                   responsible for calling the socket disconnect function.  */
                (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 81114fc:	687b      	ldr	r3, [r7, #4]
 81114fe:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8111502:	6878      	ldr	r0, [r7, #4]
 8111504:	4798      	blx	r3
#endif
        }

        /* Ignore the segment.  According to RFC 793, Section 3.9, Page 73.  */
    }
}
 8111506:	bf00      	nop
 8111508:	3708      	adds	r7, #8
 811150a:	46bd      	mov	sp, r7
 811150c:	bd80      	pop	{r7, pc}
 811150e:	bf00      	nop
 8111510:	200580ec 	.word	0x200580ec

08111514 <_nx_tcp_socket_state_data_trim>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
VOID _nx_tcp_socket_state_data_trim(NX_PACKET *packet_ptr, ULONG amount)
{
 8111514:	b580      	push	{r7, lr}
 8111516:	b086      	sub	sp, #24
 8111518:	af00      	add	r7, sp, #0
 811151a:	6078      	str	r0, [r7, #4]
 811151c:	6039      	str	r1, [r7, #0]
ULONG      bytes_to_keep;
NX_PACKET *work_ptr;

    if (amount >= packet_ptr -> nx_packet_length)
 811151e:	687b      	ldr	r3, [r7, #4]
 8111520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111522:	683a      	ldr	r2, [r7, #0]
 8111524:	429a      	cmp	r2, r3
 8111526:	d23c      	bcs.n	81115a2 <_nx_tcp_socket_state_data_trim+0x8e>
    {
        /* Invalid input. */
        return;
    }

    bytes_to_keep = packet_ptr -> nx_packet_length - amount;
 8111528:	687b      	ldr	r3, [r7, #4]
 811152a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811152c:	683b      	ldr	r3, [r7, #0]
 811152e:	1ad3      	subs	r3, r2, r3
 8111530:	617b      	str	r3, [r7, #20]

    packet_ptr -> nx_packet_length = bytes_to_keep;
 8111532:	687b      	ldr	r3, [r7, #4]
 8111534:	697a      	ldr	r2, [r7, #20]
 8111536:	625a      	str	r2, [r3, #36]	@ 0x24

    work_ptr = packet_ptr;
 8111538:	687b      	ldr	r3, [r7, #4]
 811153a:	613b      	str	r3, [r7, #16]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Walk down the packet chain for the "bytes_to_keep" amount. */
    while (work_ptr)
 811153c:	e02d      	b.n	811159a <_nx_tcp_socket_state_data_trim+0x86>
    {

    NX_PACKET *tmp_ptr;

        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if ((INT)(work_ptr -> nx_packet_append_ptr - work_ptr -> nx_packet_prepend_ptr) < (INT)bytes_to_keep)
 811153e:	693b      	ldr	r3, [r7, #16]
 8111540:	68da      	ldr	r2, [r3, #12]
 8111542:	693b      	ldr	r3, [r7, #16]
 8111544:	689b      	ldr	r3, [r3, #8]
 8111546:	1ad2      	subs	r2, r2, r3
 8111548:	697b      	ldr	r3, [r7, #20]
 811154a:	429a      	cmp	r2, r3
 811154c:	da0c      	bge.n	8111568 <_nx_tcp_socket_state_data_trim+0x54>
        {

            /*lint -e{923} suppress cast of pointer to ULONG.  */
            bytes_to_keep -= (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 811154e:	693b      	ldr	r3, [r7, #16]
 8111550:	689b      	ldr	r3, [r3, #8]
 8111552:	461a      	mov	r2, r3
 8111554:	693b      	ldr	r3, [r7, #16]
 8111556:	68db      	ldr	r3, [r3, #12]
 8111558:	1ad3      	subs	r3, r2, r3
 811155a:	697a      	ldr	r2, [r7, #20]
 811155c:	4413      	add	r3, r2
 811155e:	617b      	str	r3, [r7, #20]

            work_ptr = work_ptr -> nx_packet_next;
 8111560:	693b      	ldr	r3, [r7, #16]
 8111562:	685b      	ldr	r3, [r3, #4]
 8111564:	613b      	str	r3, [r7, #16]

            continue;
 8111566:	e018      	b.n	811159a <_nx_tcp_socket_state_data_trim+0x86>
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* This is the last packet. */
        work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr + bytes_to_keep;
 8111568:	693b      	ldr	r3, [r7, #16]
 811156a:	689a      	ldr	r2, [r3, #8]
 811156c:	697b      	ldr	r3, [r7, #20]
 811156e:	441a      	add	r2, r3
 8111570:	693b      	ldr	r3, [r7, #16]
 8111572:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Free the rest of the packet chain. */
        tmp_ptr = work_ptr -> nx_packet_next;
 8111574:	693b      	ldr	r3, [r7, #16]
 8111576:	685b      	ldr	r3, [r3, #4]
 8111578:	60fb      	str	r3, [r7, #12]
        work_ptr -> nx_packet_next = NX_NULL;
 811157a:	693b      	ldr	r3, [r7, #16]
 811157c:	2200      	movs	r2, #0
 811157e:	605a      	str	r2, [r3, #4]
        work_ptr = tmp_ptr;
 8111580:	68fb      	ldr	r3, [r7, #12]
 8111582:	613b      	str	r3, [r7, #16]

        if (work_ptr)
 8111584:	693b      	ldr	r3, [r7, #16]
 8111586:	2b00      	cmp	r3, #0
 8111588:	d007      	beq.n	811159a <_nx_tcp_socket_state_data_trim+0x86>
        {

            /*lint -e{923} suppress cast of ULONG to pointer.  */
            work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 811158a:	693b      	ldr	r3, [r7, #16]
 811158c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8111590:	621a      	str	r2, [r3, #32]

            _nx_packet_release(work_ptr);
 8111592:	6938      	ldr	r0, [r7, #16]
 8111594:	f7fd fb70 	bl	810ec78 <_nx_packet_release>

            /* All done. Break out of the while loop and return. */
            break;
 8111598:	e004      	b.n	81115a4 <_nx_tcp_socket_state_data_trim+0x90>
    while (work_ptr)
 811159a:	693b      	ldr	r3, [r7, #16]
 811159c:	2b00      	cmp	r3, #0
 811159e:	d1ce      	bne.n	811153e <_nx_tcp_socket_state_data_trim+0x2a>
 81115a0:	e000      	b.n	81115a4 <_nx_tcp_socket_state_data_trim+0x90>
        return;
 81115a2:	bf00      	nop
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */
}
 81115a4:	3718      	adds	r7, #24
 81115a6:	46bd      	mov	sp, r7
 81115a8:	bd80      	pop	{r7, pc}

081115aa <_nx_tcp_socket_state_data_trim_front>:
/*                                            verified memmove use cases, */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_tcp_socket_state_data_trim_front(NX_PACKET *packet_ptr, ULONG amount)
{
 81115aa:	b580      	push	{r7, lr}
 81115ac:	b084      	sub	sp, #16
 81115ae:	af00      	add	r7, sp, #0
 81115b0:	6078      	str	r0, [r7, #4]
 81115b2:	6039      	str	r1, [r7, #0]
NX_PACKET *work_ptr = packet_ptr;
 81115b4:	687b      	ldr	r3, [r7, #4]
 81115b6:	60fb      	str	r3, [r7, #12]
ULONG      work_length;

    if (amount >= packet_ptr -> nx_packet_length || amount == 0)
 81115b8:	687b      	ldr	r3, [r7, #4]
 81115ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81115bc:	683a      	ldr	r2, [r7, #0]
 81115be:	429a      	cmp	r2, r3
 81115c0:	d263      	bcs.n	811168a <_nx_tcp_socket_state_data_trim_front+0xe0>
 81115c2:	683b      	ldr	r3, [r7, #0]
 81115c4:	2b00      	cmp	r3, #0
 81115c6:	d060      	beq.n	811168a <_nx_tcp_socket_state_data_trim_front+0xe0>
        /* Invalid input. */
        return;
    }

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= amount;
 81115c8:	687b      	ldr	r3, [r7, #4]
 81115ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81115cc:	683b      	ldr	r3, [r7, #0]
 81115ce:	1ad2      	subs	r2, r2, r3
 81115d0:	687b      	ldr	r3, [r7, #4]
 81115d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Move prepend_ptr of first packet to TCP data.  */
    packet_ptr -> nx_packet_prepend_ptr += sizeof(NX_TCP_HEADER);
 81115d4:	687b      	ldr	r3, [r7, #4]
 81115d6:	689b      	ldr	r3, [r3, #8]
 81115d8:	f103 0214 	add.w	r2, r3, #20
 81115dc:	687b      	ldr	r3, [r7, #4]
 81115de:	609a      	str	r2, [r3, #8]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Walk down the packet chain for the amount. */
    while (amount)
 81115e0:	e049      	b.n	8111676 <_nx_tcp_socket_state_data_trim_front+0xcc>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Compute the size of the data portion work_ptr.  */
        /*lint -e{923} suppress cast of pointer to ULONG.  */
        work_length = (ULONG)((ALIGN_TYPE)work_ptr -> nx_packet_append_ptr - (ALIGN_TYPE)work_ptr -> nx_packet_prepend_ptr);
 81115e2:	68fb      	ldr	r3, [r7, #12]
 81115e4:	68db      	ldr	r3, [r3, #12]
 81115e6:	461a      	mov	r2, r3
 81115e8:	68fb      	ldr	r3, [r7, #12]
 81115ea:	689b      	ldr	r3, [r3, #8]
 81115ec:	1ad3      	subs	r3, r2, r3
 81115ee:	60bb      	str	r3, [r7, #8]

#ifndef NX_DISABLE_PACKET_CHAIN
        if (amount > work_length)
 81115f0:	683a      	ldr	r2, [r7, #0]
 81115f2:	68bb      	ldr	r3, [r7, #8]
 81115f4:	429a      	cmp	r2, r3
 81115f6:	d91e      	bls.n	8111636 <_nx_tcp_socket_state_data_trim_front+0x8c>
        {

            /* All data in work_ptr need to be trimmed.  */
            if (work_ptr == packet_ptr)
 81115f8:	68fa      	ldr	r2, [r7, #12]
 81115fa:	687b      	ldr	r3, [r7, #4]
 81115fc:	429a      	cmp	r2, r3
 81115fe:	d104      	bne.n	811160a <_nx_tcp_socket_state_data_trim_front+0x60>
            {

                /* This packet is the header of packet chain.  */
                /* Clear TCP data in this packet.  */
                work_ptr -> nx_packet_append_ptr = work_ptr -> nx_packet_prepend_ptr;
 8111600:	68fb      	ldr	r3, [r7, #12]
 8111602:	689a      	ldr	r2, [r3, #8]
 8111604:	68fb      	ldr	r3, [r7, #12]
 8111606:	60da      	str	r2, [r3, #12]
 8111608:	e00d      	b.n	8111626 <_nx_tcp_socket_state_data_trim_front+0x7c>
            else
            {

                /* This packet is not the first packet.  */
                /* Remove work_ptr from packet chain.  */
                packet_ptr -> nx_packet_next = work_ptr -> nx_packet_next;
 811160a:	68fb      	ldr	r3, [r7, #12]
 811160c:	685a      	ldr	r2, [r3, #4]
 811160e:	687b      	ldr	r3, [r7, #4]
 8111610:	605a      	str	r2, [r3, #4]

                /* Disconnect work_ptr from the rest of the packet chain. */
                work_ptr -> nx_packet_next = NX_NULL;
 8111612:	68fb      	ldr	r3, [r7, #12]
 8111614:	2200      	movs	r2, #0
 8111616:	605a      	str	r2, [r3, #4]

                /* Mark the packet as ALLOCATED. */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 8111618:	68fb      	ldr	r3, [r7, #12]
 811161a:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 811161e:	621a      	str	r2, [r3, #32]

                _nx_packet_release(work_ptr);
 8111620:	68f8      	ldr	r0, [r7, #12]
 8111622:	f7fd fb29 	bl	810ec78 <_nx_packet_release>
            }
            /* Reduce the amount being trimmed.  */
            amount -= work_length;
 8111626:	683a      	ldr	r2, [r7, #0]
 8111628:	68bb      	ldr	r3, [r7, #8]
 811162a:	1ad3      	subs	r3, r2, r3
 811162c:	603b      	str	r3, [r7, #0]

            /* Move to the next packet. */
            work_ptr = packet_ptr -> nx_packet_next;
 811162e:	687b      	ldr	r3, [r7, #4]
 8111630:	685b      	ldr	r3, [r3, #4]
 8111632:	60fb      	str	r3, [r7, #12]
 8111634:	e01f      	b.n	8111676 <_nx_tcp_socket_state_data_trim_front+0xcc>
        else
        {

            /* This is the last packet to trim.  */

            if (work_ptr == packet_ptr)
 8111636:	68fa      	ldr	r2, [r7, #12]
 8111638:	687b      	ldr	r3, [r7, #4]
 811163a:	429a      	cmp	r2, r3
 811163c:	d113      	bne.n	8111666 <_nx_tcp_socket_state_data_trim_front+0xbc>
            {
#endif /* NX_DISABLE_PACKET_CHAIN */

                /* For the first packet, move data towards the beginning
                   of the packet, right after TCP header.  */
                memmove(packet_ptr -> nx_packet_prepend_ptr, /* Use case of memmove is verified.  */
 811163e:	687b      	ldr	r3, [r7, #4]
 8111640:	6898      	ldr	r0, [r3, #8]
                        packet_ptr -> nx_packet_prepend_ptr + amount,
 8111642:	687b      	ldr	r3, [r7, #4]
 8111644:	689a      	ldr	r2, [r3, #8]
 8111646:	683b      	ldr	r3, [r7, #0]
 8111648:	18d1      	adds	r1, r2, r3
                        work_length - amount);
 811164a:	68ba      	ldr	r2, [r7, #8]
 811164c:	683b      	ldr	r3, [r7, #0]
 811164e:	1ad3      	subs	r3, r2, r3
                memmove(packet_ptr -> nx_packet_prepend_ptr, /* Use case of memmove is verified.  */
 8111650:	461a      	mov	r2, r3
 8111652:	f005 fcef 	bl	8117034 <memmove>
                packet_ptr -> nx_packet_append_ptr -= amount;
 8111656:	687b      	ldr	r3, [r7, #4]
 8111658:	68da      	ldr	r2, [r3, #12]
 811165a:	683b      	ldr	r3, [r7, #0]
 811165c:	425b      	negs	r3, r3
 811165e:	441a      	add	r2, r3
 8111660:	687b      	ldr	r3, [r7, #4]
 8111662:	60da      	str	r2, [r3, #12]
 8111664:	e005      	b.n	8111672 <_nx_tcp_socket_state_data_trim_front+0xc8>
            }
            else
            {

                /* Advance nx_packet_prepend_ptr to where the usable data starts. */
                work_ptr -> nx_packet_prepend_ptr += amount;
 8111666:	68fb      	ldr	r3, [r7, #12]
 8111668:	689a      	ldr	r2, [r3, #8]
 811166a:	683b      	ldr	r3, [r7, #0]
 811166c:	441a      	add	r2, r3
 811166e:	68fb      	ldr	r3, [r7, #12]
 8111670:	609a      	str	r2, [r3, #8]
            }

            /* Cut down amount*/
            amount = 0;
 8111672:	2300      	movs	r3, #0
 8111674:	603b      	str	r3, [r7, #0]
    while (amount)
 8111676:	683b      	ldr	r3, [r7, #0]
 8111678:	2b00      	cmp	r3, #0
 811167a:	d1b2      	bne.n	81115e2 <_nx_tcp_socket_state_data_trim_front+0x38>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Restore prepend_ptr of first packet to TCP data.  */
    packet_ptr -> nx_packet_prepend_ptr -= sizeof(NX_TCP_HEADER);
 811167c:	687b      	ldr	r3, [r7, #4]
 811167e:	689b      	ldr	r3, [r3, #8]
 8111680:	f1a3 0214 	sub.w	r2, r3, #20
 8111684:	687b      	ldr	r3, [r7, #4]
 8111686:	609a      	str	r2, [r3, #8]
 8111688:	e000      	b.n	811168c <_nx_tcp_socket_state_data_trim_front+0xe2>
        return;
 811168a:	bf00      	nop
}
 811168c:	3710      	adds	r7, #16
 811168e:	46bd      	mov	sp, r7
 8111690:	bd80      	pop	{r7, pc}
	...

08111694 <_nx_tcp_socket_state_data_check>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_tcp_socket_state_data_check(NX_TCP_SOCKET *socket_ptr, NX_PACKET *packet_ptr)
{
 8111694:	b580      	push	{r7, lr}
 8111696:	b096      	sub	sp, #88	@ 0x58
 8111698:	af00      	add	r7, sp, #0
 811169a:	6078      	str	r0, [r7, #4]
 811169c:	6039      	str	r1, [r7, #0]
ULONG          search_begin_sequence;
ULONG          search_end_sequence;
ULONG          original_rx_sequence;
ULONG          trim_data_length;
TX_THREAD     *thread_ptr;
ULONG          acked_packets = 0;
 811169e:	2300      	movs	r3, #0
 81116a0:	63bb      	str	r3, [r7, #56]	@ 0x38
UINT           need_ack = NX_FALSE;
 81116a2:	2300      	movs	r3, #0
 81116a4:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* NX_ENABLE_LOW_WATERMARK */
#if ((!defined(NX_DISABLE_TCP_INFO)) || defined(TX_ENABLE_EVENT_TRACE))
NX_IP         *ip_ptr;

    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 81116a6:	687b      	ldr	r3, [r7, #4]
 81116a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81116ac:	633b      	str	r3, [r7, #48]	@ 0x30
                    NX_INTERFACE_CAPABILITY_TCPIP_OFFLOAD;
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Pickup the pointer to the head of the TCP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 81116ae:	683b      	ldr	r3, [r7, #0]
 81116b0:	689b      	ldr	r3, [r3, #8]
 81116b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine the size of the TCP header.  */
    header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 81116b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81116b6:	68db      	ldr	r3, [r3, #12]
 81116b8:	0f1b      	lsrs	r3, r3, #28
 81116ba:	009b      	lsls	r3, r3, #2
 81116bc:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Record the original rx_sequence. */
    original_rx_sequence = socket_ptr -> nx_tcp_socket_rx_sequence;
 81116be:	687b      	ldr	r3, [r7, #4]
 81116c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81116c2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Pickup the begin sequence of this packet. */
    packet_begin_sequence = tcp_header_ptr -> nx_tcp_sequence_number;
 81116c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81116c6:	685b      	ldr	r3, [r3, #4]
 81116c8:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Calculate the data length in the packet.  */
    packet_data_length = packet_ptr -> nx_packet_length - header_length;
 81116ca:	683b      	ldr	r3, [r7, #0]
 81116cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81116ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81116d0:	1ad3      	subs	r3, r2, r3
 81116d2:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Pickup the end sequence of this packet. The end sequence is one byte to the last byte in this packet. */
    packet_end_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 81116d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81116d6:	685b      	ldr	r3, [r3, #4]
 81116d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81116da:	4413      	add	r3, r2
 81116dc:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Trim the data that out of the receive window, make sure all data are in receive window.  */
    if (packet_data_length
 81116de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81116e0:	2b00      	cmp	r3, #0
 81116e2:	d039      	beq.n	8111758 <_nx_tcp_socket_state_data_check+0xc4>
#endif /* NX_ENABLE_TCPIP_OFFLOAD */
       )
    {

        /* Step1. trim the data on the left side of the receive window.  */
        if (((INT)(socket_ptr -> nx_tcp_socket_rx_sequence - packet_begin_sequence)) > 0)
 81116e4:	687b      	ldr	r3, [r7, #4]
 81116e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 81116e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81116ea:	1ad3      	subs	r3, r2, r3
 81116ec:	2b00      	cmp	r3, #0
 81116ee:	dd16      	ble.n	811171e <_nx_tcp_socket_state_data_check+0x8a>
        {

            /* Calculate the data length that out of window.  */
            trim_data_length = socket_ptr -> nx_tcp_socket_rx_sequence - packet_begin_sequence;
 81116f0:	687b      	ldr	r3, [r7, #4]
 81116f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 81116f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81116f6:	1ad3      	subs	r3, r2, r3
 81116f8:	623b      	str	r3, [r7, #32]

            /* Trim the data that exceed the receive window.  */
            _nx_tcp_socket_state_data_trim_front(packet_ptr, trim_data_length);
 81116fa:	6a39      	ldr	r1, [r7, #32]
 81116fc:	6838      	ldr	r0, [r7, #0]
 81116fe:	f7ff ff54 	bl	81115aa <_nx_tcp_socket_state_data_trim_front>

            /* Fix the sequence of this packet. */
            tcp_header_ptr -> nx_tcp_sequence_number += trim_data_length;
 8111702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111704:	685a      	ldr	r2, [r3, #4]
 8111706:	6a3b      	ldr	r3, [r7, #32]
 8111708:	441a      	add	r2, r3
 811170a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811170c:	605a      	str	r2, [r3, #4]

            /* Update the data length and begin sequence.  */
            packet_data_length -= trim_data_length;
 811170e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8111710:	6a3b      	ldr	r3, [r7, #32]
 8111712:	1ad3      	subs	r3, r2, r3
 8111714:	643b      	str	r3, [r7, #64]	@ 0x40
            packet_begin_sequence += trim_data_length;
 8111716:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8111718:	6a3b      	ldr	r3, [r7, #32]
 811171a:	4413      	add	r3, r2
 811171c:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* Step2. trim the data on the right side of the receive window.  */
        if (((INT)((packet_end_sequence - socket_ptr -> nx_tcp_socket_rx_sequence) -
 811171e:	687b      	ldr	r3, [r7, #4]
 8111720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111722:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8111724:	1ad2      	subs	r2, r2, r3
                   socket_ptr -> nx_tcp_socket_rx_window_current)) > 0)
 8111726:	687b      	ldr	r3, [r7, #4]
 8111728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        if (((INT)((packet_end_sequence - socket_ptr -> nx_tcp_socket_rx_sequence) -
 811172a:	1ad3      	subs	r3, r2, r3
 811172c:	2b00      	cmp	r3, #0
 811172e:	dd13      	ble.n	8111758 <_nx_tcp_socket_state_data_check+0xc4>
        {

            /* Calculate the data length that out of window.  */
            trim_data_length = packet_end_sequence - (socket_ptr -> nx_tcp_socket_rx_sequence + socket_ptr -> nx_tcp_socket_rx_window_current);
 8111730:	687b      	ldr	r3, [r7, #4]
 8111732:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8111734:	687b      	ldr	r3, [r7, #4]
 8111736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8111738:	4413      	add	r3, r2
 811173a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 811173c:	1ad3      	subs	r3, r2, r3
 811173e:	623b      	str	r3, [r7, #32]

            /* Trim the data that exceed the receive window.  */
            _nx_tcp_socket_state_data_trim(packet_ptr, trim_data_length);
 8111740:	6a39      	ldr	r1, [r7, #32]
 8111742:	6838      	ldr	r0, [r7, #0]
 8111744:	f7ff fee6 	bl	8111514 <_nx_tcp_socket_state_data_trim>

            /* Update the data length and end sequence.  */
            packet_data_length -= trim_data_length;
 8111748:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 811174a:	6a3b      	ldr	r3, [r7, #32]
 811174c:	1ad3      	subs	r3, r2, r3
 811174e:	643b      	str	r3, [r7, #64]	@ 0x40
            packet_end_sequence -= trim_data_length;
 8111750:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8111752:	6a3b      	ldr	r3, [r7, #32]
 8111754:	1ad3      	subs	r3, r2, r3
 8111756:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    /* Determine if the packet has the FIN bit set to signal a disconnect.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_FIN_BIT)
 8111758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811175a:	68db      	ldr	r3, [r3, #12]
 811175c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8111760:	2b00      	cmp	r3, #0
 8111762:	d009      	beq.n	8111778 <_nx_tcp_socket_state_data_check+0xe4>
    {

        /* Setup the FIN sequence number that we need to look at.  */
        socket_ptr -> nx_tcp_socket_fin_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + packet_data_length;
 8111764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111766:	685a      	ldr	r2, [r3, #4]
 8111768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811176a:	441a      	add	r2, r3
 811176c:	687b      	ldr	r3, [r7, #4]
 811176e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Indicate that the FIN sequence is now valid.  Once the receive chain is complete
           we will process (ACK) the FIN command which is part of a disconnect started by the
           other side of the connection.  */
        socket_ptr -> nx_tcp_socket_fin_received =  NX_TRUE;
 8111770:	687b      	ldr	r3, [r7, #4]
 8111772:	2201      	movs	r2, #1
 8111774:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_FIN_RECEIVE, ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);
    }

    /* Compute the amount of payload data in this packet. */
    if (packet_data_length == 0)
 8111778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811177a:	2b00      	cmp	r3, #0
 811177c:	d11d      	bne.n	81117ba <_nx_tcp_socket_state_data_check+0x126>
    {
        /* This packet does not contain TCP data payload.  */

        /* Check for invalid sequence number.  */
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 811177e:	687b      	ldr	r3, [r7, #4]
 8111780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111782:	2b05      	cmp	r3, #5
 8111784:	d117      	bne.n	81117b6 <_nx_tcp_socket_state_data_check+0x122>
            (socket_ptr -> nx_tcp_socket_receive_queue_count == 0) &&
 8111786:	687b      	ldr	r3, [r7, #4]
 8111788:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
        if ((socket_ptr -> nx_tcp_socket_state == NX_TCP_ESTABLISHED) &&
 811178c:	2b00      	cmp	r3, #0
 811178e:	d112      	bne.n	81117b6 <_nx_tcp_socket_state_data_check+0x122>
            (socket_ptr -> nx_tcp_socket_rx_sequence != tcp_header_ptr -> nx_tcp_sequence_number) &&
 8111790:	687b      	ldr	r3, [r7, #4]
 8111792:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8111794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111796:	685b      	ldr	r3, [r3, #4]
            (socket_ptr -> nx_tcp_socket_receive_queue_count == 0) &&
 8111798:	429a      	cmp	r2, r3
 811179a:	d00c      	beq.n	81117b6 <_nx_tcp_socket_state_data_check+0x122>
            ((socket_ptr -> nx_tcp_socket_rx_sequence - 1) != tcp_header_ptr -> nx_tcp_sequence_number))
 811179c:	687b      	ldr	r3, [r7, #4]
 811179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81117a0:	1e5a      	subs	r2, r3, #1
 81117a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81117a4:	685b      	ldr	r3, [r3, #4]
            (socket_ptr -> nx_tcp_socket_rx_sequence != tcp_header_ptr -> nx_tcp_sequence_number) &&
 81117a6:	429a      	cmp	r2, r3
 81117a8:	d005      	beq.n	81117b6 <_nx_tcp_socket_state_data_check+0x122>
        {

            /* Send an immediate ACK.  */
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 81117aa:	687b      	ldr	r3, [r7, #4]
 81117ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81117ae:	4619      	mov	r1, r3
 81117b0:	6878      	ldr	r0, [r7, #4]
 81117b2:	f7fe fced 	bl	8110190 <_nx_tcp_packet_send_ack>
        }

        /* This packet does not have data, so return false. */
        return(NX_FALSE);
 81117b6:	2300      	movs	r3, #0
 81117b8:	e29f      	b.n	8111cfa <_nx_tcp_socket_state_data_check+0x666>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_DATA_RECEIVE, ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Ensure the next pointer in the packet is set to NULL, which will indicate to the
       receive logic that it is not yet part of a contiguous stream.  */
    packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_NULL;
 81117ba:	683b      	ldr	r3, [r7, #0]
 81117bc:	2200      	movs	r2, #0
 81117be:	61da      	str	r2, [r3, #28]

    /* Otherwise, the packet is within the receive window so continue processing
       the incoming TCP data.  */

    /* Pickup the tail pointer of the receive queue.  */
    search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_tail;
 81117c0:	687b      	ldr	r3, [r7, #4]
 81117c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81117c6:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Check to see if the tail pointer is part of a contiguous stream.  */
    if (search_ptr)
 81117c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81117ca:	2b00      	cmp	r3, #0
 81117cc:	d010      	beq.n	81117f0 <_nx_tcp_socket_state_data_check+0x15c>
    {

        /* Setup a pointer to header of this packet in the sent list.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 81117ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81117d0:	689b      	ldr	r3, [r3, #8]
 81117d2:	61fb      	str	r3, [r7, #28]

        /* Determine the size of the search TCP header.  */
        search_header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 81117d4:	69fb      	ldr	r3, [r7, #28]
 81117d6:	68db      	ldr	r3, [r3, #12]
 81117d8:	0f1b      	lsrs	r3, r3, #28
 81117da:	009b      	lsls	r3, r3, #2
 81117dc:	61bb      	str	r3, [r7, #24]

        /* Now see if the current sequence number accounts for the last packet.  */
        search_end_sequence = search_header_ptr -> nx_tcp_sequence_number  + search_ptr -> nx_packet_length - search_header_length;
 81117de:	69fb      	ldr	r3, [r7, #28]
 81117e0:	685a      	ldr	r2, [r3, #4]
 81117e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81117e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81117e6:	441a      	add	r2, r3
 81117e8:	69bb      	ldr	r3, [r7, #24]
 81117ea:	1ad3      	subs	r3, r2, r3
 81117ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81117ee:	e002      	b.n	81117f6 <_nx_tcp_socket_state_data_check+0x162>
    else
    {

        /* Set the sequence number to the socket's receive sequence if there isn't a receive
           packet on the queue.  */
        search_end_sequence =  socket_ptr -> nx_tcp_socket_rx_sequence;
 81117f0:	687b      	ldr	r3, [r7, #4]
 81117f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81117f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* NX_ENABLE_LOW_WATERMARK */

    /* Determine if we have a simple case of TCP data coming in the correct order.  This means
       the socket's sequence number matches the incoming packet sequence number and the last packet's
       data on the socket's receive queue (if any) matches the current sequence number.  */
    if (((tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence) &&
 81117f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81117f8:	685a      	ldr	r2, [r3, #4]
 81117fa:	687b      	ldr	r3, [r7, #4]
 81117fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81117fe:	429a      	cmp	r2, r3
 8111800:	d132      	bne.n	8111868 <_nx_tcp_socket_state_data_check+0x1d4>
         (search_end_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 8111802:	687b      	ldr	r3, [r7, #4]
 8111804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    if (((tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence) &&
 8111806:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8111808:	429a      	cmp	r2, r3
 811180a:	d12d      	bne.n	8111868 <_nx_tcp_socket_state_data_check+0x1d4>
        {
#endif /* NX_ENABLE_LOW_WATERMARK */

            /* Mark the packet as ready. This is done to simplify the logic in socket receive.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 811180c:	683b      	ldr	r3, [r7, #0]
 811180e:	f04f 32bb 	mov.w	r2, #3149642683	@ 0xbbbbbbbb
 8111812:	61da      	str	r2, [r3, #28]
            /* Add debug information. */
            NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

            /* Place the packet on the receive queue.  Search pointer still points to the tail packet on
               the queue.  */
            if (search_ptr)
 8111814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111816:	2b00      	cmp	r3, #0
 8111818:	d007      	beq.n	811182a <_nx_tcp_socket_state_data_check+0x196>
            {

                /* Nonempty receive queue, add packet to the end of the receive queue.  */
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  packet_ptr;
 811181a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811181c:	683a      	ldr	r2, [r7, #0]
 811181e:	621a      	str	r2, [r3, #32]

                /* Update the tail of the receive queue.  */
                socket_ptr -> nx_tcp_socket_receive_queue_tail =  packet_ptr;
 8111820:	687b      	ldr	r3, [r7, #4]
 8111822:	683a      	ldr	r2, [r7, #0]
 8111824:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8111828:	e00b      	b.n	8111842 <_nx_tcp_socket_state_data_check+0x1ae>
            }
            else
            {

                /* Empty receive queue.  Set both the head and the tail pointers this packet.  */
                socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr;
 811182a:	687b      	ldr	r3, [r7, #4]
 811182c:	683a      	ldr	r2, [r7, #0]
 811182e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
                socket_ptr -> nx_tcp_socket_receive_queue_tail =  packet_ptr;
 8111832:	687b      	ldr	r3, [r7, #4]
 8111834:	683a      	ldr	r2, [r7, #0]
 8111836:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
                /* Setup a new delayed ACK timeout.  */
#ifdef NX_ENABLE_TCPIP_OFFLOAD
                if (!tcpip_offload)
#endif /* NX_ENABLE_TCPIP_OFFLOAD */
                {
                    socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 811183a:	4b8b      	ldr	r3, [pc, #556]	@ (8111a68 <_nx_tcp_socket_state_data_check+0x3d4>)
 811183c:	681a      	ldr	r2, [r3, #0]
 811183e:	687b      	ldr	r3, [r7, #4]
 8111840:	649a      	str	r2, [r3, #72]	@ 0x48
                }
            }

            /* Increment the receive TCP packet count.  */
            socket_ptr -> nx_tcp_socket_receive_queue_count++;
 8111842:	687b      	ldr	r3, [r7, #4]
 8111844:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8111848:	1c5a      	adds	r2, r3, #1
 811184a:	687b      	ldr	r3, [r7, #4]
 811184c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

            /* Set the next pointer to indicate the packet is part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 8111850:	683b      	ldr	r3, [r7, #0]
 8111852:	f04f 32ee 	mov.w	r2, #4008636142	@ 0xeeeeeeee
 8111856:	621a      	str	r2, [r3, #32]

            /* Calculate the next sequence number.  */
            socket_ptr -> nx_tcp_socket_rx_sequence =  packet_end_sequence;
 8111858:	687b      	ldr	r3, [r7, #4]
 811185a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 811185c:	641a      	str	r2, [r3, #64]	@ 0x40

            /* All packets can be acked. */
            acked_packets = socket_ptr -> nx_tcp_socket_receive_queue_count;
 811185e:	687b      	ldr	r3, [r7, #4]
 8111860:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8111864:	63bb      	str	r3, [r7, #56]	@ 0x38
 8111866:	e148      	b.n	8111afa <_nx_tcp_socket_state_data_check+0x466>
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* End of the simple case: add new packet towards the end of the recv queue.
           All packets in the receive queue are in sequence. */
    }
    else if (socket_ptr -> nx_tcp_socket_receive_queue_head == NX_NULL)
 8111868:	687b      	ldr	r3, [r7, #4]
 811186a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 811186e:	2b00      	cmp	r3, #0
 8111870:	d11a      	bne.n	81118a8 <_nx_tcp_socket_state_data_check+0x214>
        if (drop_packet == NX_FALSE)
        {
#endif /* NX_ENABLE_LOW_WATERMARK */

            /* Packet data begins to the right of the expected sequence (out of sequence data). Force an ACK. */
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8111872:	687b      	ldr	r3, [r7, #4]
 8111874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8111876:	4619      	mov	r1, r3
 8111878:	6878      	ldr	r0, [r7, #4]
 811187a:	f7fe fc89 	bl	8110190 <_nx_tcp_packet_send_ack>
            /* Add debug information. */
            NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

            /* There are no packets chained on the receive queue.  Simply add the
               new packet to the receive queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = packet_ptr;
 811187e:	687b      	ldr	r3, [r7, #4]
 8111880:	683a      	ldr	r2, [r7, #0]
 8111882:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
            socket_ptr -> nx_tcp_socket_receive_queue_tail = packet_ptr;
 8111886:	687b      	ldr	r3, [r7, #4]
 8111888:	683a      	ldr	r2, [r7, #0]
 811188a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

            /* Increase the receive queue count. */
            socket_ptr -> nx_tcp_socket_receive_queue_count = 1;
 811188e:	687b      	ldr	r3, [r7, #4]
 8111890:	2201      	movs	r2, #1
 8111892:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

            /* Setup a new delayed ACK timeout.  */
            socket_ptr -> nx_tcp_socket_delayed_ack_timeout =  _nx_tcp_ack_timer_rate;
 8111896:	4b74      	ldr	r3, [pc, #464]	@ (8111a68 <_nx_tcp_socket_state_data_check+0x3d4>)
 8111898:	681a      	ldr	r2, [r3, #0]
 811189a:	687b      	ldr	r3, [r7, #4]
 811189c:	649a      	str	r2, [r3, #72]	@ 0x48

            /* Mark the packet as being part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ENQUEUED;
 811189e:	683b      	ldr	r3, [r7, #0]
 81118a0:	f04f 32ee 	mov.w	r2, #4008636142	@ 0xeeeeeeee
 81118a4:	621a      	str	r2, [r3, #32]
 81118a6:	e128      	b.n	8111afa <_nx_tcp_socket_state_data_check+0x466>

        /* Go through the received packet chain, and locate the first packet that the
           packet_begin_sequence is to the right of the end of it. */

        /* Packet data begins to the right of the expected sequence (out of sequence data). Force an ACK. */
        if (((INT)(packet_begin_sequence - socket_ptr -> nx_tcp_socket_rx_sequence)) > 0)
 81118a8:	687b      	ldr	r3, [r7, #4]
 81118aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81118ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81118ae:	1ad3      	subs	r3, r2, r3
 81118b0:	2b00      	cmp	r3, #0
 81118b2:	dd05      	ble.n	81118c0 <_nx_tcp_socket_state_data_check+0x22c>
        {
            _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 81118b4:	687b      	ldr	r3, [r7, #4]
 81118b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81118b8:	4619      	mov	r1, r3
 81118ba:	6878      	ldr	r0, [r7, #4]
 81118bc:	f7fe fc68 	bl	8110190 <_nx_tcp_packet_send_ack>
        }

        /* At this point, it is guaranteed that the receive queue contains packets. */
        search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_head;
 81118c0:	687b      	ldr	r3, [r7, #4]
 81118c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81118c6:	657b      	str	r3, [r7, #84]	@ 0x54

        previous_ptr = NX_NULL;
 81118c8:	2300      	movs	r3, #0
 81118ca:	653b      	str	r3, [r7, #80]	@ 0x50

        while (search_ptr)
 81118cc:	e0ae      	b.n	8111a2c <_nx_tcp_socket_state_data_check+0x398>
        {

            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (search_ptr == (NX_PACKET *)NX_PACKET_ENQUEUED)
 81118ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81118d0:	f1b3 3fee 	cmp.w	r3, #4008636142	@ 0xeeeeeeee
 81118d4:	d102      	bne.n	81118dc <_nx_tcp_socket_state_data_check+0x248>
            {
                /* We hit the end of the receive queue. */
                search_ptr = NX_NULL;
 81118d6:	2300      	movs	r3, #0
 81118d8:	657b      	str	r3, [r7, #84]	@ 0x54

                /* Terminate the out-of-order search.  */
                break;
 81118da:	e0ad      	b.n	8111a38 <_nx_tcp_socket_state_data_check+0x3a4>
            }

            /* Setup a pointer to header of this packet in the receive list.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 81118dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81118de:	689b      	ldr	r3, [r3, #8]
 81118e0:	61fb      	str	r3, [r7, #28]

            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;
 81118e2:	69fb      	ldr	r3, [r7, #28]
 81118e4:	685b      	ldr	r3, [r3, #4]
 81118e6:	617b      	str	r3, [r7, #20]

            /* Calculate the header size for this packet.  */
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 81118e8:	69fb      	ldr	r3, [r7, #28]
 81118ea:	68db      	ldr	r3, [r3, #12]
 81118ec:	0f1b      	lsrs	r3, r3, #28
 81118ee:	009b      	lsls	r3, r3, #2
 81118f0:	62bb      	str	r3, [r7, #40]	@ 0x28

            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 81118f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81118f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81118f6:	697b      	ldr	r3, [r7, #20]
 81118f8:	441a      	add	r2, r3
 81118fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81118fc:	1ad3      	subs	r3, r2, r3
 81118fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
             *        In this configuration, the incoming packet is completely to the right of      *
             *        search_ptr.  Move to the next search packet.                                  *
             *                                                                                      *
             ****************************************************************************************/
            /* packet_ptr is to the right of search_ptr */
            if (((INT)(packet_begin_sequence - search_end_sequence)) >= 0)
 8111900:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8111902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111904:	1ad3      	subs	r3, r2, r3
 8111906:	2b00      	cmp	r3, #0
 8111908:	db05      	blt.n	8111916 <_nx_tcp_socket_state_data_check+0x282>
            {
                /* Move on to the next packet. */
                previous_ptr = search_ptr;
 811190a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811190c:	653b      	str	r3, [r7, #80]	@ 0x50

                search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 811190e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111910:	6a1b      	ldr	r3, [r3, #32]
 8111912:	657b      	str	r3, [r7, #84]	@ 0x54

                /* Continue the search */
                continue;
 8111914:	e08a      	b.n	8111a2c <_nx_tcp_socket_state_data_check+0x398>
             *              SSSSSSSSS                                                               *
             *        In this configuration, the incoming packet is completely to the left of       *
             *        search_ptr.  Incoming packet needs to be inserted in front of search ptr.     *
             *                                                                                      *
             ****************************************************************************************/
            if (((INT)(search_begin_sequence - packet_end_sequence)) >= 0)
 8111916:	697a      	ldr	r2, [r7, #20]
 8111918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811191a:	1ad3      	subs	r3, r2, r3
 811191c:	2b00      	cmp	r3, #0
 811191e:	f280 808a 	bge.w	8111a36 <_nx_tcp_socket_state_data_check+0x3a2>
             *        to search for contigous data, therefore no need to wake up user thread.       *
             *        Howerver may need to send out ACK if new packet is to the right of the seq    *
             *        number.                                                                       *
             *                                                                                      *
             ****************************************************************************************/
            if ((((INT)(packet_begin_sequence - search_begin_sequence)) >= 0) &&
 8111922:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8111924:	697b      	ldr	r3, [r7, #20]
 8111926:	1ad3      	subs	r3, r2, r3
 8111928:	2b00      	cmp	r3, #0
 811192a:	db0c      	blt.n	8111946 <_nx_tcp_socket_state_data_check+0x2b2>
                (((INT)(search_end_sequence - packet_end_sequence)) >= 0))
 811192c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 811192e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8111930:	1ad3      	subs	r3, r2, r3
            if ((((INT)(packet_begin_sequence - search_begin_sequence)) >= 0) &&
 8111932:	2b00      	cmp	r3, #0
 8111934:	db07      	blt.n	8111946 <_nx_tcp_socket_state_data_check+0x2b2>
            {

                /* Send an immediate ACK.  */
                _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8111936:	687b      	ldr	r3, [r7, #4]
 8111938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 811193a:	4619      	mov	r1, r3
 811193c:	6878      	ldr	r0, [r7, #4]
 811193e:	f7fe fc27 	bl	8110190 <_nx_tcp_packet_send_ack>

                /* Since packet is not queued, return NX_FALSE so the caller releases the packet. */
                return(NX_FALSE);
 8111942:	2300      	movs	r3, #0
 8111944:	e1d9      	b.n	8111cfa <_nx_tcp_socket_state_data_check+0x666>
             *         Release existing packet, and insert new packet, then check for the next      *
             *         packet on the chain.  The next search may yield case (5).  Need to check     *
             *         for contingous data, may need to send ACK.                                   *
             *                                                                                      *
            ****************************************************************************************/
            if ((((INT)(search_begin_sequence - packet_begin_sequence)) >= 0) &&
 8111946:	697a      	ldr	r2, [r7, #20]
 8111948:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811194a:	1ad3      	subs	r3, r2, r3
 811194c:	2b00      	cmp	r3, #0
 811194e:	db3a      	blt.n	81119c6 <_nx_tcp_socket_state_data_check+0x332>
                (((INT)(packet_end_sequence - search_end_sequence) >= 0)))
 8111950:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8111952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111954:	1ad3      	subs	r3, r2, r3
            if ((((INT)(search_begin_sequence - packet_begin_sequence)) >= 0) &&
 8111956:	2b00      	cmp	r3, #0
 8111958:	db35      	blt.n	81119c6 <_nx_tcp_socket_state_data_check+0x332>
            {
            NX_PACKET *tmp_ptr;
                /* Release the search_ptr, and move to the next packet on the chain. */
                tmp_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 811195a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811195c:	6a1b      	ldr	r3, [r3, #32]
 811195e:	613b      	str	r3, [r7, #16]

                /* Mark the packet as no longer being part of the TCP queue. */
                /*lint -e{923} suppress cast of ULONG to pointer.  */
                search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 8111960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111962:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8111966:	621a      	str	r2, [r3, #32]

                /* Decrease the packet queue count */
                socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8111968:	687b      	ldr	r3, [r7, #4]
 811196a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 811196e:	1e5a      	subs	r2, r3, #1
 8111970:	687b      	ldr	r3, [r7, #4]
 8111972:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

                /* Adjust the receive window. */

                /* Release the search packet. */
                _nx_packet_release(search_ptr);
 8111976:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8111978:	f7fd f97e 	bl	810ec78 <_nx_packet_release>

#ifndef NX_DISABLE_TCP_INFO
                /* The new packet has been admitted to the receive queue. */

                /* Increment the TCP packet receive count and bytes received count.  */
                ip_ptr -> nx_ip_tcp_packets_received--;
 811197c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811197e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8111982:	1e5a      	subs	r2, r3, #1
 8111984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111986:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
                ip_ptr -> nx_ip_tcp_bytes_received -= (search_end_sequence - search_begin_sequence);
 811198a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811198c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8111990:	6979      	ldr	r1, [r7, #20]
 8111992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111994:	1acb      	subs	r3, r1, r3
 8111996:	441a      	add	r2, r3
 8111998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811199a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

                /* Increment the TCP packet receive count and bytes received count for the socket.  */
                socket_ptr -> nx_tcp_socket_packets_received--;
 811199e:	687b      	ldr	r3, [r7, #4]
 81119a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81119a4:	1e5a      	subs	r2, r3, #1
 81119a6:	687b      	ldr	r3, [r7, #4]
 81119a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                socket_ptr -> nx_tcp_socket_bytes_received -= (search_end_sequence - search_begin_sequence);
 81119ac:	687b      	ldr	r3, [r7, #4]
 81119ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 81119b2:	6979      	ldr	r1, [r7, #20]
 81119b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81119b6:	1acb      	subs	r3, r1, r3
 81119b8:	441a      	add	r2, r3
 81119ba:	687b      	ldr	r3, [r7, #4]
 81119bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

#endif /* NX_DISABLE_TCP_INFO */

                /* Move to the next packet.  (note: no need to update previous_ptr. */
                search_ptr = tmp_ptr;
 81119c0:	693b      	ldr	r3, [r7, #16]
 81119c2:	657b      	str	r3, [r7, #84]	@ 0x54

                /* Continue the search. */
                continue;
 81119c4:	e032      	b.n	8111a2c <_nx_tcp_socket_state_data_check+0x398>
             *                   SSSSSSSSSSSS                                                       *
             *        In this configuration, remove data from the back of the new packet,  insert   *
             *        packet into the chain, and terminate the search.  Need to search for          *
             *        contigous data, may need to send out ACK.                                     *
             ****************************************************************************************/
            if (((INT)(search_begin_sequence - packet_begin_sequence)) >= 0)
 81119c6:	697a      	ldr	r2, [r7, #20]
 81119c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81119ca:	1ad3      	subs	r3, r2, r3
 81119cc:	2b00      	cmp	r3, #0
 81119ce:	db0d      	blt.n	81119ec <_nx_tcp_socket_state_data_check+0x358>
            {

                _nx_tcp_socket_state_data_trim(packet_ptr, (packet_end_sequence - search_begin_sequence));
 81119d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81119d2:	697b      	ldr	r3, [r7, #20]
 81119d4:	1ad3      	subs	r3, r2, r3
 81119d6:	4619      	mov	r1, r3
 81119d8:	6838      	ldr	r0, [r7, #0]
 81119da:	f7ff fd9b 	bl	8111514 <_nx_tcp_socket_state_data_trim>

                /* Update packet_data_length. */
                packet_data_length -= (packet_end_sequence - search_begin_sequence);
 81119de:	697a      	ldr	r2, [r7, #20]
 81119e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81119e2:	1ad3      	subs	r3, r2, r3
 81119e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81119e6:	4413      	add	r3, r2
 81119e8:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Now the packet should be chained before search_ptr. */

                break;
 81119ea:	e025      	b.n	8111a38 <_nx_tcp_socket_state_data_check+0x3a4>
             *        insert the packet after the search packet and continue the search.  This may  *
             *        lead to case (2) and (3).                                                     *
             *                                                                                      *
             *                                                                                      *
             ***************************************************************************************/
            _nx_tcp_socket_state_data_trim(search_ptr, (ULONG)(search_end_sequence - packet_begin_sequence));
 81119ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 81119ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81119f0:	1ad3      	subs	r3, r2, r3
 81119f2:	4619      	mov	r1, r3
 81119f4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 81119f6:	f7ff fd8d 	bl	8111514 <_nx_tcp_socket_state_data_trim>

#ifndef NX_DISABLE_TCP_INFO
            /* The new packet has been admitted to the receive queue. */

            /* Reduce the TCP bytes received count.  */
            ip_ptr -> nx_ip_tcp_bytes_received -= (search_end_sequence - packet_begin_sequence);
 81119fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81119fc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8111a00:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8111a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111a04:	1acb      	subs	r3, r1, r3
 8111a06:	441a      	add	r2, r3
 8111a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111a0a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

            /* Reduce the TCP bytes received count for the socket.  */
            socket_ptr -> nx_tcp_socket_bytes_received -= (search_end_sequence - packet_begin_sequence);
 8111a0e:	687b      	ldr	r3, [r7, #4]
 8111a10:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8111a14:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8111a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111a18:	1acb      	subs	r3, r1, r3
 8111a1a:	441a      	add	r2, r3
 8111a1c:	687b      	ldr	r3, [r7, #4]
 8111a1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

#endif /* NX_DISABLE_TCP_INFO */

            /* Move to the next packet and continue; */
            previous_ptr = search_ptr;
 8111a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111a24:	653b      	str	r3, [r7, #80]	@ 0x50
            search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8111a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111a28:	6a1b      	ldr	r3, [r3, #32]
 8111a2a:	657b      	str	r3, [r7, #84]	@ 0x54
        while (search_ptr)
 8111a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111a2e:	2b00      	cmp	r3, #0
 8111a30:	f47f af4d 	bne.w	81118ce <_nx_tcp_socket_state_data_check+0x23a>
 8111a34:	e000      	b.n	8111a38 <_nx_tcp_socket_state_data_check+0x3a4>
                break;
 8111a36:	bf00      	nop
        }   /* End of while (search_ptr) */

        /* At this point, the logic (within the while loop) finds a location where this packet should be inserted. */
        if (previous_ptr == NX_NULL)
 8111a38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8111a3a:	2b00      	cmp	r3, #0
 8111a3c:	d104      	bne.n	8111a48 <_nx_tcp_socket_state_data_check+0x3b4>
        {

            /* The packet needs to be inserted at the beginning of the queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = packet_ptr;
 8111a3e:	687b      	ldr	r3, [r7, #4]
 8111a40:	683a      	ldr	r2, [r7, #0]
 8111a42:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8111a46:	e002      	b.n	8111a4e <_nx_tcp_socket_state_data_check+0x3ba>
        }
        else
        {

            /* The packet needs to be inserted after previous_ptr. */
            previous_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = packet_ptr;
 8111a48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8111a4a:	683a      	ldr	r2, [r7, #0]
 8111a4c:	621a      	str	r2, [r3, #32]
        }

        if (search_ptr == NX_NULL)
 8111a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111a50:	2b00      	cmp	r3, #0
 8111a52:	d10b      	bne.n	8111a6c <_nx_tcp_socket_state_data_check+0x3d8>
        {

            /* This packet is on the last one on the queue. */
            socket_ptr -> nx_tcp_socket_receive_queue_tail = packet_ptr;
 8111a54:	687b      	ldr	r3, [r7, #4]
 8111a56:	683a      	ldr	r2, [r7, #0]
 8111a58:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

            /* Set the next pointer to indicate the packet is part of a TCP queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ENQUEUED;
 8111a5c:	683b      	ldr	r3, [r7, #0]
 8111a5e:	f04f 32ee 	mov.w	r2, #4008636142	@ 0xeeeeeeee
 8111a62:	621a      	str	r2, [r3, #32]
 8111a64:	e005      	b.n	8111a72 <_nx_tcp_socket_state_data_check+0x3de>
 8111a66:	bf00      	nop
 8111a68:	200580e4 	.word	0x200580e4
        }
        else
        {

            /* Chain search_ptr onto packet_ptr. */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = search_ptr;
 8111a6c:	683b      	ldr	r3, [r7, #0]
 8111a6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8111a70:	621a      	str	r2, [r3, #32]

        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_TCP_RECEIVE_QUEUE, __LINE__, packet_ptr);

        /* Increment the receive TCP packet count.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count++;
 8111a72:	687b      	ldr	r3, [r7, #4]
 8111a74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8111a78:	1c5a      	adds	r2, r3, #1
 8111a7a:	687b      	ldr	r3, [r7, #4]
 8111a7c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

        /* End of the out-of-order search.  At this point, the packet has been inserted. */

        /* Now we need to figure out how much, if any, we can ACK.  */
        search_ptr =    socket_ptr -> nx_tcp_socket_receive_queue_head;
 8111a80:	687b      	ldr	r3, [r7, #4]
 8111a82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8111a86:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Get the sequence number expected by the TCP receive socket. */
        expected_sequence =  socket_ptr -> nx_tcp_socket_rx_sequence;
 8111a88:	687b      	ldr	r3, [r7, #4]
 8111a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        do
        {

            /* Setup a pointer to header of this packet in the sent list.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            search_header_ptr =  (NX_TCP_HEADER *)search_ptr -> nx_packet_prepend_ptr;
 8111a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111a90:	689b      	ldr	r3, [r3, #8]
 8111a92:	61fb      	str	r3, [r7, #28]


            /* Calculate the header size for this packet.  */
            header_length =  (search_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8111a94:	69fb      	ldr	r3, [r7, #28]
 8111a96:	68db      	ldr	r3, [r3, #12]
 8111a98:	0f1b      	lsrs	r3, r3, #28
 8111a9a:	009b      	lsls	r3, r3, #2
 8111a9c:	62bb      	str	r3, [r7, #40]	@ 0x28

            search_begin_sequence = search_header_ptr -> nx_tcp_sequence_number;
 8111a9e:	69fb      	ldr	r3, [r7, #28]
 8111aa0:	685b      	ldr	r3, [r3, #4]
 8111aa2:	617b      	str	r3, [r7, #20]

            search_end_sequence = search_begin_sequence + search_ptr -> nx_packet_length - header_length;
 8111aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111aa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8111aa8:	697b      	ldr	r3, [r7, #20]
 8111aaa:	441a      	add	r2, r3
 8111aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111aae:	1ad3      	subs	r3, r2, r3
 8111ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if ((INT)(expected_sequence - search_begin_sequence) >= 0)
 8111ab2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8111ab4:	697b      	ldr	r3, [r7, #20]
 8111ab6:	1ad3      	subs	r3, r2, r3
 8111ab8:	2b00      	cmp	r3, #0
 8111aba:	db1d      	blt.n	8111af8 <_nx_tcp_socket_state_data_check+0x464>
            {

                if ((INT)(search_end_sequence - expected_sequence) > 0)
 8111abc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8111abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8111ac0:	1ad3      	subs	r3, r2, r3
 8111ac2:	2b00      	cmp	r3, #0
 8111ac4:	dd0b      	ble.n	8111ade <_nx_tcp_socket_state_data_check+0x44a>
                {
                    /* Sequence number is within this packet.  Advance sequence number. */
                    expected_sequence = search_end_sequence;
 8111ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8111ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    socket_ptr -> nx_tcp_socket_rx_sequence = expected_sequence;
 8111aca:	687b      	ldr	r3, [r7, #4]
 8111acc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8111ace:	641a      	str	r2, [r3, #64]	@ 0x40

                    acked_packets++;
 8111ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111ad2:	3301      	adds	r3, #1
 8111ad4:	63bb      	str	r3, [r7, #56]	@ 0x38

                    /* Mark this packet as ready for retrieval.  */
                    /*lint -e{923} suppress cast of ULONG to pointer.  */
                    search_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_PACKET_READY;
 8111ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111ad8:	f04f 32bb 	mov.w	r2, #3149642683	@ 0xbbbbbbbb
 8111adc:	61da      	str	r2, [r3, #28]
                /* Expected number is to the left of search_ptr.   Get out of the do-while loop!  */
                break;
            }

            /* Move the search pointer to the next queued receive packet.  */
            search_ptr =  search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8111ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111ae0:	6a1b      	ldr	r3, [r3, #32]
 8111ae2:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if we are at the end of the queue.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            if (search_ptr == ((NX_PACKET *)NX_PACKET_ENQUEUED))
 8111ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111ae6:	f1b3 3fee 	cmp.w	r3, #4008636142	@ 0xeeeeeeee
 8111aea:	d101      	bne.n	8111af0 <_nx_tcp_socket_state_data_check+0x45c>
            {

                /* At the end, set the search pointer to NULL.  */
                search_ptr =  NX_NULL;
 8111aec:	2300      	movs	r3, #0
 8111aee:	657b      	str	r3, [r7, #84]	@ 0x54

                /* Get out of the loop!  */
                break;
            }
#endif /* NX_ENABLE_LOW_WATERMARK */
        } while (search_ptr);
 8111af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111af2:	2b00      	cmp	r3, #0
 8111af4:	d1cb      	bne.n	8111a8e <_nx_tcp_socket_state_data_check+0x3fa>
 8111af6:	e000      	b.n	8111afa <_nx_tcp_socket_state_data_check+0x466>
                break;
 8111af8:	bf00      	nop

#ifndef NX_DISABLE_TCP_INFO
    /* The new packet has been admitted to the receive queue. */

    /* Increment the TCP packet receive count and bytes received count.  */
    ip_ptr -> nx_ip_tcp_packets_received++;
 8111afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111afc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8111b00:	1c5a      	adds	r2, r3, #1
 8111b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111b04:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    ip_ptr -> nx_ip_tcp_bytes_received += packet_data_length;
 8111b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111b0a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8111b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8111b10:	441a      	add	r2, r3
 8111b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111b14:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

    /* Increment the TCP packet receive count and bytes received count for the socket.  */
    socket_ptr -> nx_tcp_socket_packets_received++;
 8111b18:	687b      	ldr	r3, [r7, #4]
 8111b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8111b1e:	1c5a      	adds	r2, r3, #1
 8111b20:	687b      	ldr	r3, [r7, #4]
 8111b22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    socket_ptr -> nx_tcp_socket_bytes_received += packet_data_length;
 8111b26:	687b      	ldr	r3, [r7, #4]
 8111b28:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8111b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8111b2e:	441a      	add	r2, r3
 8111b30:	687b      	ldr	r3, [r7, #4]
 8111b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif

    /* Check if the rx sequence number has been updated.  */
    if (original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 8111b36:	687b      	ldr	r3, [r7, #4]
 8111b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8111b3c:	429a      	cmp	r2, r3
 8111b3e:	d011      	beq.n	8111b64 <_nx_tcp_socket_state_data_check+0x4d0>
    {

        /* Decrease the receive window size since rx_sequence is updated.  */
        socket_ptr -> nx_tcp_socket_rx_window_current -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 8111b40:	687b      	ldr	r3, [r7, #4]
 8111b42:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8111b44:	687b      	ldr	r3, [r7, #4]
 8111b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111b48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8111b4a:	1acb      	subs	r3, r1, r3
 8111b4c:	441a      	add	r2, r3
 8111b4e:	687b      	ldr	r3, [r7, #4]
 8111b50:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Update the rx_window_last_sent for SWS avoidance algorithm.
           RFC1122, Section4.2.3.3, Page97-98.  */
        socket_ptr -> nx_tcp_socket_rx_window_last_sent -= (socket_ptr -> nx_tcp_socket_rx_sequence - original_rx_sequence);
 8111b52:	687b      	ldr	r3, [r7, #4]
 8111b54:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8111b56:	687b      	ldr	r3, [r7, #4]
 8111b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111b5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8111b5c:	1acb      	subs	r3, r1, r3
 8111b5e:	441a      	add	r2, r3
 8111b60:	687b      	ldr	r3, [r7, #4]
 8111b62:	679a      	str	r2, [r3, #120]	@ 0x78
    }

#ifdef NX_TCP_MAX_OUT_OF_ORDER_PACKETS
    /* Does the count of out of order packets exceed the defined value? */
    if ((socket_ptr -> nx_tcp_socket_receive_queue_count - acked_packets) >
 8111b64:	687b      	ldr	r3, [r7, #4]
 8111b66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8111b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111b6c:	1ad3      	subs	r3, r2, r3
 8111b6e:	2b08      	cmp	r3, #8
 8111b70:	f240 8089 	bls.w	8111c86 <_nx_tcp_socket_state_data_check+0x5f2>
        NX_TCP_MAX_OUT_OF_ORDER_PACKETS)
    {

        /* Yes it is. Remove the last packet in queue. */
        socket_ptr -> nx_tcp_socket_receive_queue_tail -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ALLOCATED;
 8111b74:	687b      	ldr	r3, [r7, #4]
 8111b76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8111b7a:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8111b7e:	621a      	str	r2, [r3, #32]
        if (socket_ptr -> nx_tcp_socket_receive_queue_count > 1)
 8111b80:	687b      	ldr	r3, [r7, #4]
 8111b82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8111b86:	2b01      	cmp	r3, #1
 8111b88:	d91d      	bls.n	8111bc6 <_nx_tcp_socket_state_data_check+0x532>
        {

            /* Find the previous packet of tail. */
            search_ptr = socket_ptr -> nx_tcp_socket_receive_queue_head;
 8111b8a:	687b      	ldr	r3, [r7, #4]
 8111b8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8111b90:	657b      	str	r3, [r7, #84]	@ 0x54
            while (search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != socket_ptr -> nx_tcp_socket_receive_queue_tail)
 8111b92:	e002      	b.n	8111b9a <_nx_tcp_socket_state_data_check+0x506>
            {
                search_ptr = search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8111b94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111b96:	6a1b      	ldr	r3, [r3, #32]
 8111b98:	657b      	str	r3, [r7, #84]	@ 0x54
            while (search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != socket_ptr -> nx_tcp_socket_receive_queue_tail)
 8111b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111b9c:	6a1a      	ldr	r2, [r3, #32]
 8111b9e:	687b      	ldr	r3, [r7, #4]
 8111ba0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8111ba4:	429a      	cmp	r2, r3
 8111ba6:	d1f5      	bne.n	8111b94 <_nx_tcp_socket_state_data_check+0x500>
            }

            /* Release the tail. */
            _nx_packet_release(socket_ptr -> nx_tcp_socket_receive_queue_tail);
 8111ba8:	687b      	ldr	r3, [r7, #4]
 8111baa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8111bae:	4618      	mov	r0, r3
 8111bb0:	f7fd f862 	bl	810ec78 <_nx_packet_release>

            /* Setup the tail packet. */
            socket_ptr -> nx_tcp_socket_receive_queue_tail = search_ptr;
 8111bb4:	687b      	ldr	r3, [r7, #4]
 8111bb6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8111bb8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

            search_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next = (NX_PACKET *)NX_PACKET_ENQUEUED;
 8111bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8111bbe:	f04f 32ee 	mov.w	r2, #4008636142	@ 0xeeeeeeee
 8111bc2:	621a      	str	r2, [r3, #32]
 8111bc4:	e00d      	b.n	8111be2 <_nx_tcp_socket_state_data_check+0x54e>
        }
        else
        {

            /* Release the tail. */
            _nx_packet_release(socket_ptr -> nx_tcp_socket_receive_queue_tail);
 8111bc6:	687b      	ldr	r3, [r7, #4]
 8111bc8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8111bcc:	4618      	mov	r0, r3
 8111bce:	f7fd f853 	bl	810ec78 <_nx_packet_release>

            /* Clear the head and tail packets. */
            socket_ptr -> nx_tcp_socket_receive_queue_head = NX_NULL;
 8111bd2:	687b      	ldr	r3, [r7, #4]
 8111bd4:	2200      	movs	r2, #0
 8111bd6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
            socket_ptr -> nx_tcp_socket_receive_queue_tail = NX_NULL;
 8111bda:	687b      	ldr	r3, [r7, #4]
 8111bdc:	2200      	movs	r2, #0
 8111bde:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        }

        /* Decrease receive queue count. */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8111be2:	687b      	ldr	r3, [r7, #4]
 8111be4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8111be8:	1e5a      	subs	r2, r3, #1
 8111bea:	687b      	ldr	r3, [r7, #4]
 8111bec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

    /* At this point, we can use the packet TCP header pointers since the received
       packet is already queued.  */

    /* Any packets for receiving? */
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list
 8111bf0:	e049      	b.n	8111c86 <_nx_tcp_socket_state_data_check+0x5f2>
#endif /* NX_ENABLE_HTTP_PROXY */
          )
    {

        /* Setup a pointer to the first queued packet.  */
        packet_ptr =  socket_ptr -> nx_tcp_socket_receive_queue_head;
 8111bf2:	687b      	ldr	r3, [r7, #4]
 8111bf4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8111bf8:	603b      	str	r3, [r7, #0]
        /* Remove it from the queue.  */

        /* Simply update the head pointer of the queue.  */
        socket_ptr -> nx_tcp_socket_receive_queue_head =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 8111bfa:	683b      	ldr	r3, [r7, #0]
 8111bfc:	6a1a      	ldr	r2, [r3, #32]
 8111bfe:	687b      	ldr	r3, [r7, #4]
 8111c00:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

        /* Mark the packet as no longer being part of the TCP queue.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8111c04:	683b      	ldr	r3, [r7, #0]
 8111c06:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8111c0a:	621a      	str	r2, [r3, #32]

        /* Clear the queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8111c0c:	683b      	ldr	r3, [r7, #0]
 8111c0e:	2200      	movs	r2, #0
 8111c10:	61da      	str	r2, [r3, #28]

        /* Decrease the number of received packets.  */
        socket_ptr -> nx_tcp_socket_receive_queue_count--;
 8111c12:	687b      	ldr	r3, [r7, #4]
 8111c14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8111c18:	1e5a      	subs	r2, r3, #1
 8111c1a:	687b      	ldr	r3, [r7, #4]
 8111c1c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

        /* Adjust the packet for delivery to the suspended thread.  */

        /* Setup a pointer to the TCP header of this packet.  */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8111c20:	683b      	ldr	r3, [r7, #0]
 8111c22:	689b      	ldr	r3, [r3, #8]
 8111c24:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Calculate the header size for this packet.  */
        header_length =  (tcp_header_ptr -> nx_tcp_header_word_3 >> NX_TCP_HEADER_SHIFT) * (ULONG)sizeof(ULONG);
 8111c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111c28:	68db      	ldr	r3, [r3, #12]
 8111c2a:	0f1b      	lsrs	r3, r3, #28
 8111c2c:	009b      	lsls	r3, r3, #2
 8111c2e:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Adjust the packet prepend pointer and length to position past the TCP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + header_length;
 8111c30:	683b      	ldr	r3, [r7, #0]
 8111c32:	689a      	ldr	r2, [r3, #8]
 8111c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111c36:	441a      	add	r2, r3
 8111c38:	683b      	ldr	r3, [r7, #0]
 8111c3a:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length =       packet_ptr -> nx_packet_length - header_length;
 8111c3c:	683b      	ldr	r3, [r7, #0]
 8111c3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8111c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111c42:	1ad2      	subs	r2, r2, r3
 8111c44:	683b      	ldr	r3, [r7, #0]
 8111c46:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Setup a pointer to the first thread suspended on the receive queue.  */
        thread_ptr =  socket_ptr -> nx_tcp_socket_receive_suspension_list;
 8111c48:	687b      	ldr	r3, [r7, #4]
 8111c4a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8111c4e:	60fb      	str	r3, [r7, #12]

        /* Place the packet pointer in the return pointer.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8111c50:	68fb      	ldr	r3, [r7, #12]
 8111c52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8111c54:	683a      	ldr	r2, [r7, #0]
 8111c56:	601a      	str	r2, [r3, #0]

        /* Increase the receive window size.  */
        socket_ptr -> nx_tcp_socket_rx_window_current += packet_ptr -> nx_packet_length;
 8111c58:	687b      	ldr	r3, [r7, #4]
 8111c5a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8111c5c:	683b      	ldr	r3, [r7, #0]
 8111c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111c60:	441a      	add	r2, r3
 8111c62:	687b      	ldr	r3, [r7, #4]
 8111c64:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Remove the suspended thread from the list.  */

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_receive_suspended_count--;
 8111c66:	687b      	ldr	r3, [r7, #4]
 8111c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8111c6c:	1e5a      	subs	r2, r3, #1
 8111c6e:	687b      	ldr	r3, [r7, #4]
 8111c70:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

        /* Decrement the acked_packets count. */
        acked_packets--;
 8111c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111c76:	3b01      	subs	r3, #1
 8111c78:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Resume thread.  */
        _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_receive_suspension_list), NX_SUCCESS);
 8111c7a:	687b      	ldr	r3, [r7, #4]
 8111c7c:	33ec      	adds	r3, #236	@ 0xec
 8111c7e:	2100      	movs	r1, #0
 8111c80:	4618      	mov	r0, r3
 8111c82:	f000 fafd 	bl	8112280 <_nx_tcp_socket_thread_resume>
    while (acked_packets && socket_ptr -> nx_tcp_socket_receive_suspension_list
 8111c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111c88:	2b00      	cmp	r3, #0
 8111c8a:	d004      	beq.n	8111c96 <_nx_tcp_socket_state_data_check+0x602>
 8111c8c:	687b      	ldr	r3, [r7, #4]
 8111c8e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8111c92:	2b00      	cmp	r3, #0
 8111c94:	d1ad      	bne.n	8111bf2 <_nx_tcp_socket_state_data_check+0x55e>
    }

    /* Is the queue empty?.  */
    if (socket_ptr -> nx_tcp_socket_receive_queue_count == 0)
 8111c96:	687b      	ldr	r3, [r7, #4]
 8111c98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8111c9c:	2b00      	cmp	r3, #0
 8111c9e:	d107      	bne.n	8111cb0 <_nx_tcp_socket_state_data_check+0x61c>
    {

        /* Yes. Set both head and tail pointers to NULL.  */
        socket_ptr -> nx_tcp_socket_receive_queue_head =  NX_NULL;
 8111ca0:	687b      	ldr	r3, [r7, #4]
 8111ca2:	2200      	movs	r2, #0
 8111ca4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        socket_ptr -> nx_tcp_socket_receive_queue_tail =  NX_NULL;
 8111ca8:	687b      	ldr	r3, [r7, #4]
 8111caa:	2200      	movs	r2, #0
 8111cac:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    }

    /* Determine if an ACK should be forced out for window update, SWS avoidance algorithm.
       RFC1122, Section4.2.3.3, Page97-98. */
    if ((socket_ptr -> nx_tcp_socket_rx_window_current - socket_ptr -> nx_tcp_socket_rx_window_last_sent) >= (socket_ptr -> nx_tcp_socket_rx_window_default / 2))
 8111cb0:	687b      	ldr	r3, [r7, #4]
 8111cb2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8111cb4:	687b      	ldr	r3, [r7, #4]
 8111cb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8111cb8:	1ad2      	subs	r2, r2, r3
 8111cba:	687b      	ldr	r3, [r7, #4]
 8111cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8111cbe:	085b      	lsrs	r3, r3, #1
 8111cc0:	429a      	cmp	r2, r3
 8111cc2:	d301      	bcc.n	8111cc8 <_nx_tcp_socket_state_data_check+0x634>
    {

        /* Need to send ACK for window update.  */
        need_ack = NX_TRUE;
 8111cc4:	2301      	movs	r3, #1
 8111cc6:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* If the incoming packet caused the sequence number to move forward,
       indicating the new piece of data is in order, in sequence, and valid for receiving. */
    if ((original_rx_sequence != socket_ptr -> nx_tcp_socket_rx_sequence)
 8111cc8:	687b      	ldr	r3, [r7, #4]
 8111cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8111cce:	429a      	cmp	r2, r3
 8111cd0:	d009      	beq.n	8111ce6 <_nx_tcp_socket_state_data_check+0x652>
        if (socket_ptr -> nx_tcp_socket_http_proxy_state != NX_HTTP_PROXY_STATE_CONNECTING)
#endif /* NX_ENABLE_HTTP_PROXY */
        {

            /* Determine if there is a socket receive notification function specified.  */
            if (socket_ptr -> nx_tcp_receive_callback)
 8111cd2:	687b      	ldr	r3, [r7, #4]
 8111cd4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8111cd8:	2b00      	cmp	r3, #0
 8111cda:	d004      	beq.n	8111ce6 <_nx_tcp_socket_state_data_check+0x652>
            {

                /* Yes, notification is requested.  Call the application's receive notification
                   function for this socket.  */
                (socket_ptr -> nx_tcp_receive_callback)(socket_ptr);
 8111cdc:	687b      	ldr	r3, [r7, #4]
 8111cde:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8111ce2:	6878      	ldr	r0, [r7, #4]
 8111ce4:	4798      	blx	r3
            }
        }
#endif
    }

    if (need_ack == NX_TRUE)
 8111ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111ce8:	2b01      	cmp	r3, #1
 8111cea:	d105      	bne.n	8111cf8 <_nx_tcp_socket_state_data_check+0x664>
    {

        /* Need to send ACK.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8111cec:	687b      	ldr	r3, [r7, #4]
 8111cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8111cf0:	4619      	mov	r1, r3
 8111cf2:	6878      	ldr	r0, [r7, #4]
 8111cf4:	f7fe fa4c 	bl	8110190 <_nx_tcp_packet_send_ack>
    }

    /* Return true since the packet was queued.  */
    return(NX_TRUE);
 8111cf8:	2301      	movs	r3, #1
}
 8111cfa:	4618      	mov	r0, r3
 8111cfc:	3758      	adds	r7, #88	@ 0x58
 8111cfe:	46bd      	mov	sp, r7
 8111d00:	bd80      	pop	{r7, pc}
 8111d02:	bf00      	nop

08111d04 <_nx_tcp_socket_state_established>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_established(NX_TCP_SOCKET *socket_ptr)
{
 8111d04:	b580      	push	{r7, lr}
 8111d06:	b084      	sub	sp, #16
 8111d08:	af00      	add	r7, sp, #0
 8111d0a:	6078      	str	r0, [r7, #4]
#if !defined(NX_DISABLE_TCP_INFO) || defined(TX_ENABLE_EVENT_TRACE)
NX_IP *ip_ptr;


    /* Setup the IP pointer.  */
    ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 8111d0c:	687b      	ldr	r3, [r7, #4]
 8111d0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8111d12:	60fb      	str	r3, [r7, #12]
#endif
    /* Determine if a FIN has been previously detected in the _nx_tcp_socket_state_data_check
       routine and if the socket's sequence number matches the expected FIN sequence number.  */
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8111d14:	687b      	ldr	r3, [r7, #4]
 8111d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8111d1a:	2b00      	cmp	r3, #0
 8111d1c:	d031      	beq.n	8111d82 <_nx_tcp_socket_state_established+0x7e>
        (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 8111d1e:	687b      	ldr	r3, [r7, #4]
 8111d20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8111d22:	687b      	ldr	r3, [r7, #4]
 8111d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8111d26:	429a      	cmp	r2, r3
 8111d28:	d12b      	bne.n	8111d82 <_nx_tcp_socket_state_established+0x7e>
    {

#ifndef NX_DISABLE_TCP_INFO
        /* Increment the TCP disconnections count.  */
        ip_ptr -> nx_ip_tcp_disconnections++;
 8111d2a:	68fb      	ldr	r3, [r7, #12]
 8111d2c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8111d30:	1c5a      	adds	r2, r3, #1
 8111d32:	68fb      	ldr	r3, [r7, #12]
 8111d34:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSE_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* The FIN bit is set, we need to go into the finished state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSE_WAIT;
 8111d38:	687b      	ldr	r3, [r7, #4]
 8111d3a:	2206      	movs	r2, #6
 8111d3c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Increment the received sequence.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8111d3e:	687b      	ldr	r3, [r7, #4]
 8111d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111d42:	1c5a      	adds	r2, r3, #1
 8111d44:	687b      	ldr	r3, [r7, #4]
 8111d46:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Loop to release all threads suspended while trying to receive on the socket.  */
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 8111d48:	e006      	b.n	8111d58 <_nx_tcp_socket_state_established+0x54>
        {

            /* Release the head of the receive suspension list. */
            _nx_tcp_receive_cleanup(socket_ptr -> nx_tcp_socket_receive_suspension_list NX_CLEANUP_ARGUMENT);
 8111d4a:	687b      	ldr	r3, [r7, #4]
 8111d4c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8111d50:	2100      	movs	r1, #0
 8111d52:	4618      	mov	r0, r3
 8111d54:	f7fe fc5e 	bl	8110614 <_nx_tcp_receive_cleanup>
        while (socket_ptr -> nx_tcp_socket_receive_suspension_list)
 8111d58:	687b      	ldr	r3, [r7, #4]
 8111d5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8111d5e:	2b00      	cmp	r3, #0
 8111d60:	d1f3      	bne.n	8111d4a <_nx_tcp_socket_state_established+0x46>
        }

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8111d62:	687b      	ldr	r3, [r7, #4]
 8111d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8111d66:	4619      	mov	r1, r3
 8111d68:	6878      	ldr	r0, [r7, #4]
 8111d6a:	f7fe fa11 	bl	8110190 <_nx_tcp_packet_send_ack>
#endif /* NX_ENABLE_HTTP_PROXY */
        {

            /* If given, call the application's disconnect callback function
               for disconnect.  */
            if (socket_ptr -> nx_tcp_disconnect_callback)
 8111d6e:	687b      	ldr	r3, [r7, #4]
 8111d70:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8111d74:	2b00      	cmp	r3, #0
 8111d76:	d004      	beq.n	8111d82 <_nx_tcp_socket_state_established+0x7e>
            {

                /* Call the application's disconnect handling function.  It is
                   responsible for calling the socket disconnect function.  */
                (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8111d78:	687b      	ldr	r3, [r7, #4]
 8111d7a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8111d7e:	6878      	ldr	r0, [r7, #4]
 8111d80:	4798      	blx	r3
            }
        }
    }
}
 8111d82:	bf00      	nop
 8111d84:	3710      	adds	r7, #16
 8111d86:	46bd      	mov	sp, r7
 8111d88:	bd80      	pop	{r7, pc}
	...

08111d8c <_nx_tcp_socket_state_fin_wait1>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_fin_wait1(NX_TCP_SOCKET *socket_ptr)
{
 8111d8c:	b580      	push	{r7, lr}
 8111d8e:	b082      	sub	sp, #8
 8111d90:	af00      	add	r7, sp, #0
 8111d92:	6078      	str	r0, [r7, #4]


    /* Determine if the peer has proper ACK number but FIN is not sent,
       move into the FIN WAIT 2 state and do nothing else.  */
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 8111d94:	687b      	ldr	r3, [r7, #4]
 8111d96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8111d9a:	2b00      	cmp	r3, #0
 8111d9c:	d00c      	beq.n	8111db8 <_nx_tcp_socket_state_fin_wait1+0x2c>
        (socket_ptr -> nx_tcp_socket_fin_received == NX_FALSE))
 8111d9e:	687b      	ldr	r3, [r7, #4]
 8111da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
    if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 8111da4:	2b00      	cmp	r3, #0
 8111da6:	d107      	bne.n	8111db8 <_nx_tcp_socket_state_fin_wait1+0x2c>
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_FIN_WAIT_2, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* We have a legitimate ACK message.  Simply move into the WAIT FIN 2 state
           for the other side to finish its processing and disconnect.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_FIN_WAIT_2;
 8111da8:	687b      	ldr	r3, [r7, #4]
 8111daa:	2208      	movs	r2, #8
 8111dac:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Otherwise, simply clear the FIN timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 8111dae:	687b      	ldr	r3, [r7, #4]
 8111db0:	2200      	movs	r2, #0
 8111db2:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8111db6:	e04e      	b.n	8111e56 <_nx_tcp_socket_state_fin_wait1+0xca>
    }
    else if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 8111db8:	687b      	ldr	r3, [r7, #4]
 8111dba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8111dbe:	2b00      	cmp	r3, #0
 8111dc0:	d02f      	beq.n	8111e22 <_nx_tcp_socket_state_fin_wait1+0x96>
             (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 8111dc2:	687b      	ldr	r3, [r7, #4]
 8111dc4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8111dc6:	687b      	ldr	r3, [r7, #4]
 8111dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    else if ((socket_ptr -> nx_tcp_socket_fin_acked) &&
 8111dca:	429a      	cmp	r2, r3
 8111dcc:	d129      	bne.n	8111e22 <_nx_tcp_socket_state_fin_wait1+0x96>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the socket state to TIMED WAIT now.  */
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 8111dce:	687b      	ldr	r3, [r7, #4]
 8111dd0:	220a      	movs	r2, #10
 8111dd2:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Set the timeout as 2MSL (Maximum Segment Lifetime). */
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8111dd4:	4b22      	ldr	r3, [pc, #136]	@ (8111e60 <_nx_tcp_socket_state_fin_wait1+0xd4>)
 8111dd6:	681a      	ldr	r2, [r3, #0]
 8111dd8:	687b      	ldr	r3, [r7, #4]
 8111dda:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8111dde:	687b      	ldr	r3, [r7, #4]
 8111de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111de2:	1c5a      	adds	r2, r3, #1
 8111de4:	687b      	ldr	r3, [r7, #4]
 8111de6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8111de8:	687b      	ldr	r3, [r7, #4]
 8111dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8111dec:	4619      	mov	r1, r3
 8111dee:	6878      	ldr	r0, [r7, #4]
 8111df0:	f7fe f9ce 	bl	8110190 <_nx_tcp_packet_send_ack>

        /* Determine if we need to wake a thread suspended on the connection.  */
        if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8111df4:	687b      	ldr	r3, [r7, #4]
 8111df6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8111dfa:	2b00      	cmp	r3, #0
 8111dfc:	d006      	beq.n	8111e0c <_nx_tcp_socket_state_fin_wait1+0x80>
        {

            /* Resume the thread suspended for the disconnect.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 8111dfe:	687b      	ldr	r3, [r7, #4]
 8111e00:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8111e04:	2100      	movs	r1, #0
 8111e06:	4618      	mov	r0, r3
 8111e08:	f000 fa3a 	bl	8112280 <_nx_tcp_socket_thread_resume>
        }

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 8111e0c:	687b      	ldr	r3, [r7, #4]
 8111e0e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8111e12:	2b00      	cmp	r3, #0
 8111e14:	d01f      	beq.n	8111e56 <_nx_tcp_socket_state_fin_wait1+0xca>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8111e16:	687b      	ldr	r3, [r7, #4]
 8111e18:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8111e1c:	6878      	ldr	r0, [r7, #4]
 8111e1e:	4798      	blx	r3
        if (socket_ptr -> nx_tcp_disconnect_callback)
 8111e20:	e019      	b.n	8111e56 <_nx_tcp_socket_state_fin_wait1+0xca>
            /* Call the application's disconnect_complete callback function.    */
            (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
        }
#endif
    }
    else if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8111e22:	687b      	ldr	r3, [r7, #4]
 8111e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8111e28:	2b00      	cmp	r3, #0
 8111e2a:	d014      	beq.n	8111e56 <_nx_tcp_socket_state_fin_wait1+0xca>
             (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 8111e2c:	687b      	ldr	r3, [r7, #4]
 8111e2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8111e30:	687b      	ldr	r3, [r7, #4]
 8111e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    else if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8111e34:	429a      	cmp	r2, r3
 8111e36:	d10e      	bne.n	8111e56 <_nx_tcp_socket_state_fin_wait1+0xca>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_CLOSING, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the CLOSING state for simultaneous close situation.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_CLOSING;
 8111e38:	687b      	ldr	r3, [r7, #4]
 8111e3a:	2209      	movs	r2, #9
 8111e3c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8111e3e:	687b      	ldr	r3, [r7, #4]
 8111e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111e42:	1c5a      	adds	r2, r3, #1
 8111e44:	687b      	ldr	r3, [r7, #4]
 8111e46:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8111e48:	687b      	ldr	r3, [r7, #4]
 8111e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8111e4c:	4619      	mov	r1, r3
 8111e4e:	6878      	ldr	r0, [r7, #4]
 8111e50:	f7fe f99e 	bl	8110190 <_nx_tcp_packet_send_ack>
    }
}
 8111e54:	e7ff      	b.n	8111e56 <_nx_tcp_socket_state_fin_wait1+0xca>
 8111e56:	bf00      	nop
 8111e58:	3708      	adds	r7, #8
 8111e5a:	46bd      	mov	sp, r7
 8111e5c:	bd80      	pop	{r7, pc}
 8111e5e:	bf00      	nop
 8111e60:	200580ec 	.word	0x200580ec

08111e64 <_nx_tcp_socket_state_fin_wait2>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_fin_wait2(NX_TCP_SOCKET *socket_ptr)
{
 8111e64:	b580      	push	{r7, lr}
 8111e66:	b082      	sub	sp, #8
 8111e68:	af00      	add	r7, sp, #0
 8111e6a:	6078      	str	r0, [r7, #4]


    /* Determine if a FIN has been previously detected in the _nx_tcp_socket_state_data_check
       routine and if the socket's sequence number matches the expected FIN sequence number.  */
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8111e6c:	687b      	ldr	r3, [r7, #4]
 8111e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8111e72:	2b00      	cmp	r3, #0
 8111e74:	d02e      	beq.n	8111ed4 <_nx_tcp_socket_state_fin_wait2+0x70>
        (socket_ptr -> nx_tcp_socket_fin_sequence == socket_ptr -> nx_tcp_socket_rx_sequence))
 8111e76:	687b      	ldr	r3, [r7, #4]
 8111e78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8111e7a:	687b      	ldr	r3, [r7, #4]
 8111e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    if ((socket_ptr -> nx_tcp_socket_fin_received) &&
 8111e7e:	429a      	cmp	r2, r3
 8111e80:	d128      	bne.n	8111ed4 <_nx_tcp_socket_state_fin_wait2+0x70>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_TIMED_WAIT, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the socket state to TIMED WAIT now.  */
        socket_ptr -> nx_tcp_socket_state = NX_TCP_TIMED_WAIT;
 8111e82:	687b      	ldr	r3, [r7, #4]
 8111e84:	220a      	movs	r2, #10
 8111e86:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Set the timeout as 2MSL (Maximum Segment Lifetime).  */
        socket_ptr -> nx_tcp_socket_timeout = _nx_tcp_2MSL_timer_rate;
 8111e88:	4b14      	ldr	r3, [pc, #80]	@ (8111edc <_nx_tcp_socket_state_fin_wait2+0x78>)
 8111e8a:	681a      	ldr	r2, [r3, #0]
 8111e8c:	687b      	ldr	r3, [r7, #4]
 8111e8e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

        /* Send ACK back to the other side of the connection.  */

        /* Increment the received sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence++;
 8111e92:	687b      	ldr	r3, [r7, #4]
 8111e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111e96:	1c5a      	adds	r2, r3, #1
 8111e98:	687b      	ldr	r3, [r7, #4]
 8111e9a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Send ACK message.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 8111e9c:	687b      	ldr	r3, [r7, #4]
 8111e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8111ea0:	4619      	mov	r1, r3
 8111ea2:	6878      	ldr	r0, [r7, #4]
 8111ea4:	f7fe f974 	bl	8110190 <_nx_tcp_packet_send_ack>

        /* Determine if we need to wake a thread suspended on the connection.  */
        if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8111ea8:	687b      	ldr	r3, [r7, #4]
 8111eaa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8111eae:	2b00      	cmp	r3, #0
 8111eb0:	d006      	beq.n	8111ec0 <_nx_tcp_socket_state_fin_wait2+0x5c>
        {

            /* Resume the thread suspended for the disconnect.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 8111eb2:	687b      	ldr	r3, [r7, #4]
 8111eb4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8111eb8:	2100      	movs	r1, #0
 8111eba:	4618      	mov	r0, r3
 8111ebc:	f000 f9e0 	bl	8112280 <_nx_tcp_socket_thread_resume>
        }

        /* If given, call the application's disconnect callback function
           for disconnect.  */
        if (socket_ptr -> nx_tcp_disconnect_callback)
 8111ec0:	687b      	ldr	r3, [r7, #4]
 8111ec2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8111ec6:	2b00      	cmp	r3, #0
 8111ec8:	d004      	beq.n	8111ed4 <_nx_tcp_socket_state_fin_wait2+0x70>
        {

            /* Call the application's disconnect handling function.  It is
               responsible for calling the socket disconnect function.  */
            (socket_ptr -> nx_tcp_disconnect_callback)(socket_ptr);
 8111eca:	687b      	ldr	r3, [r7, #4]
 8111ecc:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8111ed0:	6878      	ldr	r0, [r7, #4]
 8111ed2:	4798      	blx	r3
            /* Call the application's disconnect_complete callback function.    */
            (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
        }
#endif
    }
}
 8111ed4:	bf00      	nop
 8111ed6:	3708      	adds	r7, #8
 8111ed8:	46bd      	mov	sp, r7
 8111eda:	bd80      	pop	{r7, pc}
 8111edc:	200580ec 	.word	0x200580ec

08111ee0 <_nx_tcp_socket_state_last_ack>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_last_ack(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 8111ee0:	b580      	push	{r7, lr}
 8111ee2:	b082      	sub	sp, #8
 8111ee4:	af00      	add	r7, sp, #0
 8111ee6:	6078      	str	r0, [r7, #4]
 8111ee8:	6039      	str	r1, [r7, #0]

    /* Determine if the incoming message is an ACK message.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 8111eea:	683b      	ldr	r3, [r7, #0]
 8111eec:	68db      	ldr	r3, [r3, #12]
 8111eee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8111ef2:	2b00      	cmp	r3, #0
 8111ef4:	d01a      	beq.n	8111f2c <_nx_tcp_socket_state_last_ack+0x4c>
    {

        /*   If it is proper, finish the disconnect. */
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 8111ef6:	683b      	ldr	r3, [r7, #0]
 8111ef8:	689a      	ldr	r2, [r3, #8]
 8111efa:	687b      	ldr	r3, [r7, #4]
 8111efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8111efe:	429a      	cmp	r2, r3
 8111f00:	d114      	bne.n	8111f2c <_nx_tcp_socket_state_last_ack+0x4c>
            (tcp_header_ptr -> nx_tcp_sequence_number == socket_ptr -> nx_tcp_socket_rx_sequence))
 8111f02:	683b      	ldr	r3, [r7, #0]
 8111f04:	685a      	ldr	r2, [r3, #4]
 8111f06:	687b      	ldr	r3, [r7, #4]
 8111f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if ((tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence) &&
 8111f0a:	429a      	cmp	r2, r3
 8111f0c:	d10e      	bne.n	8111f2c <_nx_tcp_socket_state_last_ack+0x4c>
        {

            /* Cleanup the transmission control block.  */
            _nx_tcp_socket_block_cleanup(socket_ptr);
 8111f0e:	6878      	ldr	r0, [r7, #4]
 8111f10:	f7fe fc28 	bl	8110764 <_nx_tcp_socket_block_cleanup>

            /* Determine if we need to wake a thread suspended on the disconnection.  */
            if (socket_ptr -> nx_tcp_socket_disconnect_suspended_thread)
 8111f14:	687b      	ldr	r3, [r7, #4]
 8111f16:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8111f1a:	2b00      	cmp	r3, #0
 8111f1c:	d006      	beq.n	8111f2c <_nx_tcp_socket_state_last_ack+0x4c>
            {

                /* Resume suspended thread.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_disconnect_suspended_thread), NX_SUCCESS);
 8111f1e:	687b      	ldr	r3, [r7, #4]
 8111f20:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8111f24:	2100      	movs	r1, #0
 8111f26:	4618      	mov	r0, r3
 8111f28:	f000 f9aa 	bl	8112280 <_nx_tcp_socket_thread_resume>
                (socket_ptr -> nx_tcp_disconnect_complete_notify)(socket_ptr);
            }
#endif
        }
    }
}
 8111f2c:	bf00      	nop
 8111f2e:	3708      	adds	r7, #8
 8111f30:	46bd      	mov	sp, r7
 8111f32:	bd80      	pop	{r7, pc}

08111f34 <_nx_tcp_socket_state_syn_received>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_syn_received(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr)
{
 8111f34:	b580      	push	{r7, lr}
 8111f36:	b082      	sub	sp, #8
 8111f38:	af00      	add	r7, sp, #0
 8111f3a:	6078      	str	r0, [r7, #4]
 8111f3c:	6039      	str	r1, [r7, #0]


    /* Determine if the incoming message is an ACK message.  If it is and
       if it is proper, move into the ESTABLISHED state.  */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)
 8111f3e:	683b      	ldr	r3, [r7, #0]
 8111f40:	68db      	ldr	r3, [r3, #12]
 8111f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8111f46:	2b00      	cmp	r3, #0
 8111f48:	d04d      	beq.n	8111fe6 <_nx_tcp_socket_state_syn_received+0xb2>
    {

        if (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence)
 8111f4a:	683b      	ldr	r3, [r7, #0]
 8111f4c:	689a      	ldr	r2, [r3, #8]
 8111f4e:	687b      	ldr	r3, [r7, #4]
 8111f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8111f52:	429a      	cmp	r2, r3
 8111f54:	d143      	bne.n	8111fde <_nx_tcp_socket_state_syn_received+0xaa>
            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_ESTABLISHED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Save the window size.  */
            socket_ptr -> nx_tcp_socket_tx_window_advertised =
                tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 8111f56:	683b      	ldr	r3, [r7, #0]
 8111f58:	68db      	ldr	r3, [r3, #12]
 8111f5a:	b29a      	uxth	r2, r3
            socket_ptr -> nx_tcp_socket_tx_window_advertised =
 8111f5c:	687b      	ldr	r3, [r7, #4]
 8111f5e:	655a      	str	r2, [r3, #84]	@ 0x54
            socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_snd_win_scale_value;

#endif /* NX_ENABLE_TCP_WINDOW_SCALING  */

            /* Set the initial slow start threshold to be the advertised window size. */
            socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 8111f60:	687b      	ldr	r3, [r7, #4]
 8111f62:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8111f64:	687b      	ldr	r3, [r7, #4]
 8111f66:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Set the initial congestion control window size. */
            /* Section 3.1, Page 5, RFC5681. */
            if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 8111f68:	687b      	ldr	r3, [r7, #4]
 8111f6a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8111f6e:	2b00      	cmp	r3, #0
 8111f70:	d004      	beq.n	8111f7c <_nx_tcp_socket_state_syn_received+0x48>
            {

                /* Set the initial congestion control window size to be the mss. */
                socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 8111f72:	687b      	ldr	r3, [r7, #4]
 8111f74:	6a1a      	ldr	r2, [r3, #32]
 8111f76:	687b      	ldr	r3, [r7, #4]
 8111f78:	659a      	str	r2, [r3, #88]	@ 0x58
 8111f7a:	e01d      	b.n	8111fb8 <_nx_tcp_socket_state_syn_received+0x84>
            }
            else
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 8111f7c:	687b      	ldr	r3, [r7, #4]
 8111f7e:	6a1b      	ldr	r3, [r3, #32]
 8111f80:	009a      	lsls	r2, r3, #2
 8111f82:	687b      	ldr	r3, [r7, #4]
 8111f84:	659a      	str	r2, [r3, #88]	@ 0x58
                if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 8111f86:	687b      	ldr	r3, [r7, #4]
 8111f88:	6a1b      	ldr	r3, [r3, #32]
 8111f8a:	f5b3 6f89 	cmp.w	r3, #1096	@ 0x448
 8111f8e:	d306      	bcc.n	8111f9e <_nx_tcp_socket_state_syn_received+0x6a>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 8111f90:	687b      	ldr	r3, [r7, #4]
 8111f92:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8111f94:	687b      	ldr	r3, [r7, #4]
 8111f96:	6a1b      	ldr	r3, [r3, #32]
 8111f98:	1ad2      	subs	r2, r2, r3
 8111f9a:	687b      	ldr	r3, [r7, #4]
 8111f9c:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 8111f9e:	687b      	ldr	r3, [r7, #4]
 8111fa0:	6a1b      	ldr	r3, [r3, #32]
 8111fa2:	f640 028e 	movw	r2, #2190	@ 0x88e
 8111fa6:	4293      	cmp	r3, r2
 8111fa8:	d906      	bls.n	8111fb8 <_nx_tcp_socket_state_syn_received+0x84>
                {
                    socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 8111faa:	687b      	ldr	r3, [r7, #4]
 8111fac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8111fae:	687b      	ldr	r3, [r7, #4]
 8111fb0:	6a1b      	ldr	r3, [r3, #32]
 8111fb2:	1ad2      	subs	r2, r2, r3
 8111fb4:	687b      	ldr	r3, [r7, #4]
 8111fb6:	659a      	str	r2, [r3, #88]	@ 0x58
                }
            }

            /* Move into the ESTABLISHED state.  */
            socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 8111fb8:	687b      	ldr	r3, [r7, #4]
 8111fba:	2205      	movs	r2, #5
 8111fbc:	639a      	str	r2, [r3, #56]	@ 0x38
                socket_ptr -> nx_tcp_socket_keepalive_timeout =  NX_TCP_KEEPALIVE_INITIAL;
                socket_ptr -> nx_tcp_socket_keepalive_retries =  0;
            }
#endif
            /* Update the value of nx_tcp_socket_rx_sequence_acked */
            socket_ptr -> nx_tcp_socket_rx_sequence_acked =    socket_ptr -> nx_tcp_socket_rx_sequence;
 8111fbe:	687b      	ldr	r3, [r7, #4]
 8111fc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8111fc2:	687b      	ldr	r3, [r7, #4]
 8111fc4:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 8111fc6:	687b      	ldr	r3, [r7, #4]
 8111fc8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8111fcc:	2b00      	cmp	r3, #0
 8111fce:	d00a      	beq.n	8111fe6 <_nx_tcp_socket_state_syn_received+0xb2>
            {

                /* Resume the suspended thread.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 8111fd0:	687b      	ldr	r3, [r7, #4]
 8111fd2:	33fc      	adds	r3, #252	@ 0xfc
 8111fd4:	2100      	movs	r1, #0
 8111fd6:	4618      	mov	r0, r3
 8111fd8:	f000 f952 	bl	8112280 <_nx_tcp_socket_thread_resume>

            /* Send the RST packet.  */
            _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
        }
    }
}
 8111fdc:	e003      	b.n	8111fe6 <_nx_tcp_socket_state_syn_received+0xb2>
            _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 8111fde:	6839      	ldr	r1, [r7, #0]
 8111fe0:	6878      	ldr	r0, [r7, #4]
 8111fe2:	f7fe fa31 	bl	8110448 <_nx_tcp_packet_send_rst>
}
 8111fe6:	bf00      	nop
 8111fe8:	3708      	adds	r7, #8
 8111fea:	46bd      	mov	sp, r7
 8111fec:	bd80      	pop	{r7, pc}

08111fee <_nx_tcp_socket_state_syn_sent>:
/*                                            supported HTTP Proxy,       */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_syn_sent(NX_TCP_SOCKET *socket_ptr, NX_TCP_HEADER *tcp_header_ptr, NX_PACKET *packet_ptr)
{
 8111fee:	b580      	push	{r7, lr}
 8111ff0:	b084      	sub	sp, #16
 8111ff2:	af00      	add	r7, sp, #0
 8111ff4:	60f8      	str	r0, [r7, #12]
 8111ff6:	60b9      	str	r1, [r7, #8]
 8111ff8:	607a      	str	r2, [r7, #4]
#ifndef TX_ENABLE_EVENT_TRACE
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* TX_ENABLE_EVENT_TRACE */

    /* Check if a RST is present. */
    if (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_RST_BIT)
 8111ffa:	68bb      	ldr	r3, [r7, #8]
 8111ffc:	68db      	ldr	r3, [r3, #12]
 8111ffe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8112002:	2b00      	cmp	r3, #0
 8112004:	d019      	beq.n	811203a <_nx_tcp_socket_state_syn_sent+0x4c>
    {

        /* Check if the ACK was acceptable. According to RFC 793, Section 3.9, Page 67.  */
        if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 8112006:	68bb      	ldr	r3, [r7, #8]
 8112008:	68db      	ldr	r3, [r3, #12]
 811200a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 811200e:	2b00      	cmp	r3, #0
 8112010:	f000 80d2 	beq.w	81121b8 <_nx_tcp_socket_state_syn_sent+0x1ca>
            (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence))
 8112014:	68bb      	ldr	r3, [r7, #8]
 8112016:	689a      	ldr	r2, [r3, #8]
 8112018:	68fb      	ldr	r3, [r7, #12]
 811201a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
        if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 811201c:	429a      	cmp	r2, r3
 811201e:	f040 80cb 	bne.w	81121b8 <_nx_tcp_socket_state_syn_sent+0x1ca>
        {

#ifndef NX_DISABLE_TCP_INFO

            /* Increment the resets received count.  */
            (socket_ptr -> nx_tcp_socket_ip_ptr) -> nx_ip_tcp_resets_received++;
 8112022:	68fb      	ldr	r3, [r7, #12]
 8112024:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8112028:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 811202c:	3201      	adds	r2, #1
 811202e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_RESET_RECEIVE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, packet_ptr, tcp_header_ptr -> nx_tcp_sequence_number, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Reset connection.  */
            _nx_tcp_socket_connection_reset(socket_ptr);
 8112032:	68f8      	ldr	r0, [r7, #12]
 8112034:	f7fe fbc3 	bl	81107be <_nx_tcp_socket_connection_reset>
        }

        /* Finished processing, simply return!  */
        return;
 8112038:	e0be      	b.n	81121b8 <_nx_tcp_socket_state_syn_sent+0x1ca>
    }
    /* Determine if a valid SYN/ACK is present.  */
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 811203a:	68bb      	ldr	r3, [r7, #8]
 811203c:	68db      	ldr	r3, [r3, #12]
 811203e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8112042:	2b00      	cmp	r3, #0
 8112044:	d05d      	beq.n	8112102 <_nx_tcp_socket_state_syn_sent+0x114>
             (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 8112046:	68bb      	ldr	r3, [r7, #8]
 8112048:	68db      	ldr	r3, [r3, #12]
 811204a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 811204e:	2b00      	cmp	r3, #0
 8112050:	d057      	beq.n	8112102 <_nx_tcp_socket_state_syn_sent+0x114>
             (tcp_header_ptr -> nx_tcp_acknowledgment_number == socket_ptr -> nx_tcp_socket_tx_sequence))
 8112052:	68bb      	ldr	r3, [r7, #8]
 8112054:	689a      	ldr	r2, [r3, #8]
 8112056:	68fb      	ldr	r3, [r7, #12]
 8112058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
             (tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 811205a:	429a      	cmp	r2, r3
 811205c:	d151      	bne.n	8112102 <_nx_tcp_socket_state_syn_sent+0x114>
        /* Yes, this is a proper SYN/ACK message.  We need to send an ACK
           back the other direction before we go into the ESTABLISHED
           state.  */

        /* Save the sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence =  tcp_header_ptr -> nx_tcp_sequence_number + 1;
 811205e:	68bb      	ldr	r3, [r7, #8]
 8112060:	685b      	ldr	r3, [r3, #4]
 8112062:	1c5a      	adds	r2, r3, #1
 8112064:	68fb      	ldr	r3, [r7, #12]
 8112066:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Save the window size.  */
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 8112068:	68bb      	ldr	r3, [r7, #8]
 811206a:	68db      	ldr	r3, [r3, #12]
 811206c:	b29a      	uxth	r2, r3
 811206e:	68fb      	ldr	r3, [r7, #12]
 8112070:	655a      	str	r2, [r3, #84]	@ 0x54
        }

#endif /* NX_ENABLE_TCP_WINDOW_SCALING */

        /* Initialize the slow start threshold to be the advertised window size. */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 8112072:	68fb      	ldr	r3, [r7, #12]
 8112074:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8112076:	68fb      	ldr	r3, [r7, #12]
 8112078:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the Initial transmit outstanding byte count. */
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 811207a:	68fb      	ldr	r3, [r7, #12]
 811207c:	2200      	movs	r2, #0
 811207e:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Set the initial congestion control window size. */
        /* Section 3.1, Page 5, RFC5681. */
        if (socket_ptr -> nx_tcp_socket_timeout_retries > 0)
 8112080:	68fb      	ldr	r3, [r7, #12]
 8112082:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8112086:	2b00      	cmp	r3, #0
 8112088:	d004      	beq.n	8112094 <_nx_tcp_socket_state_syn_sent+0xa6>
        {

            /* Set the initial congestion control window size to be the mss. */
            socket_ptr -> nx_tcp_socket_tx_window_congestion = socket_ptr -> nx_tcp_socket_connect_mss;
 811208a:	68fb      	ldr	r3, [r7, #12]
 811208c:	6a1a      	ldr	r2, [r3, #32]
 811208e:	68fb      	ldr	r3, [r7, #12]
 8112090:	659a      	str	r2, [r3, #88]	@ 0x58
 8112092:	e01d      	b.n	81120d0 <_nx_tcp_socket_state_syn_sent+0xe2>
        }
        else
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 8112094:	68fb      	ldr	r3, [r7, #12]
 8112096:	6a1b      	ldr	r3, [r3, #32]
 8112098:	009a      	lsls	r2, r3, #2
 811209a:	68fb      	ldr	r3, [r7, #12]
 811209c:	659a      	str	r2, [r3, #88]	@ 0x58
            if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 811209e:	68fb      	ldr	r3, [r7, #12]
 81120a0:	6a1b      	ldr	r3, [r3, #32]
 81120a2:	f5b3 6f89 	cmp.w	r3, #1096	@ 0x448
 81120a6:	d306      	bcc.n	81120b6 <_nx_tcp_socket_state_syn_sent+0xc8>
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 81120a8:	68fb      	ldr	r3, [r7, #12]
 81120aa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81120ac:	68fb      	ldr	r3, [r7, #12]
 81120ae:	6a1b      	ldr	r3, [r3, #32]
 81120b0:	1ad2      	subs	r2, r2, r3
 81120b2:	68fb      	ldr	r3, [r7, #12]
 81120b4:	659a      	str	r2, [r3, #88]	@ 0x58
            }
            if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 81120b6:	68fb      	ldr	r3, [r7, #12]
 81120b8:	6a1b      	ldr	r3, [r3, #32]
 81120ba:	f640 028e 	movw	r2, #2190	@ 0x88e
 81120be:	4293      	cmp	r3, r2
 81120c0:	d906      	bls.n	81120d0 <_nx_tcp_socket_state_syn_sent+0xe2>
            {
                socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 81120c2:	68fb      	ldr	r3, [r7, #12]
 81120c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81120c6:	68fb      	ldr	r3, [r7, #12]
 81120c8:	6a1b      	ldr	r3, [r3, #32]
 81120ca:	1ad2      	subs	r2, r2, r3
 81120cc:	68fb      	ldr	r3, [r7, #12]
 81120ce:	659a      	str	r2, [r3, #88]	@ 0x58
            }
        }

        /* Send the ACK.  */
        _nx_tcp_packet_send_ack(socket_ptr, socket_ptr -> nx_tcp_socket_tx_sequence);
 81120d0:	68fb      	ldr	r3, [r7, #12]
 81120d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81120d4:	4619      	mov	r1, r3
 81120d6:	68f8      	ldr	r0, [r7, #12]
 81120d8:	f7fe f85a 	bl	8110190 <_nx_tcp_packet_send_ack>

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_ESTABLISHED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the ESTABLISHED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_ESTABLISHED;
 81120dc:	68fb      	ldr	r3, [r7, #12]
 81120de:	2205      	movs	r2, #5
 81120e0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Clear the socket timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 81120e2:	68fb      	ldr	r3, [r7, #12]
 81120e4:	2200      	movs	r2, #0
 81120e6:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
                (socket_ptr -> nx_tcp_establish_notify)(socket_ptr);
            }
#endif

            /* Determine if we need to wake a thread suspended on the connection.  */
            if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 81120ea:	68fb      	ldr	r3, [r7, #12]
 81120ec:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 81120f0:	2b00      	cmp	r3, #0
 81120f2:	d062      	beq.n	81121ba <_nx_tcp_socket_state_syn_sent+0x1cc>
            {

                /* Resume the suspended thread.  */
                _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_connect_suspended_thread), NX_SUCCESS);
 81120f4:	68fb      	ldr	r3, [r7, #12]
 81120f6:	33fc      	adds	r3, #252	@ 0xfc
 81120f8:	2100      	movs	r1, #0
 81120fa:	4618      	mov	r0, r3
 81120fc:	f000 f8c0 	bl	8112280 <_nx_tcp_socket_thread_resume>
            if (socket_ptr -> nx_tcp_socket_connect_suspended_thread)
 8112100:	e05b      	b.n	81121ba <_nx_tcp_socket_state_syn_sent+0x1cc>
            }
        }
    }
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 8112102:	68bb      	ldr	r3, [r7, #8]
 8112104:	68db      	ldr	r3, [r3, #12]
 8112106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 811210a:	2b00      	cmp	r3, #0
 811210c:	d043      	beq.n	8112196 <_nx_tcp_socket_state_syn_sent+0x1a8>
             (!(tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT)))
 811210e:	68bb      	ldr	r3, [r7, #8]
 8112110:	68db      	ldr	r3, [r3, #12]
 8112112:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_SYN_BIT) &&
 8112116:	2b00      	cmp	r3, #0
 8112118:	d13d      	bne.n	8112196 <_nx_tcp_socket_state_syn_sent+0x1a8>

        /* Simultaneous Connection Synchronization,
           A SYN message was received.  We need to send both a SYN and ACK and move to the SYN RECEIVED state.  */

        /* Save the sequence number.  */
        socket_ptr -> nx_tcp_socket_rx_sequence =   tcp_header_ptr -> nx_tcp_sequence_number + 1;
 811211a:	68bb      	ldr	r3, [r7, #8]
 811211c:	685b      	ldr	r3, [r3, #4]
 811211e:	1c5a      	adds	r2, r3, #1
 8112120:	68fb      	ldr	r3, [r7, #12]
 8112122:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Save the window size.  */
        socket_ptr -> nx_tcp_socket_tx_window_advertised = tcp_header_ptr -> nx_tcp_header_word_3 & NX_LOWER_16_MASK;
 8112124:	68bb      	ldr	r3, [r7, #8]
 8112126:	68db      	ldr	r3, [r3, #12]
 8112128:	b29a      	uxth	r2, r3
 811212a:	68fb      	ldr	r3, [r7, #12]
 811212c:	655a      	str	r2, [r3, #84]	@ 0x54
#ifdef NX_ENABLE_TCP_WINDOW_SCALING
        socket_ptr -> nx_tcp_socket_tx_window_advertised <<= socket_ptr -> nx_tcp_rcv_win_scale_value;
#endif /* NX_ENABLE_TCP_WINDOW_SCALING  */

        /* Initialize the slow start threshold to be the advertised window size. */
        socket_ptr -> nx_tcp_socket_tx_slow_start_threshold = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 811212e:	68fb      	ldr	r3, [r7, #12]
 8112130:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8112132:	68fb      	ldr	r3, [r7, #12]
 8112134:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the initial congestion control window size. */
        /* Section 3.1, Page 5, RFC5681. */
        socket_ptr -> nx_tcp_socket_tx_window_congestion = (socket_ptr -> nx_tcp_socket_connect_mss << 2);
 8112136:	68fb      	ldr	r3, [r7, #12]
 8112138:	6a1b      	ldr	r3, [r3, #32]
 811213a:	009a      	lsls	r2, r3, #2
 811213c:	68fb      	ldr	r3, [r7, #12]
 811213e:	659a      	str	r2, [r3, #88]	@ 0x58
        if (socket_ptr -> nx_tcp_socket_connect_mss > 1095)
 8112140:	68fb      	ldr	r3, [r7, #12]
 8112142:	6a1b      	ldr	r3, [r3, #32]
 8112144:	f5b3 6f89 	cmp.w	r3, #1096	@ 0x448
 8112148:	d306      	bcc.n	8112158 <_nx_tcp_socket_state_syn_sent+0x16a>
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 811214a:	68fb      	ldr	r3, [r7, #12]
 811214c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 811214e:	68fb      	ldr	r3, [r7, #12]
 8112150:	6a1b      	ldr	r3, [r3, #32]
 8112152:	1ad2      	subs	r2, r2, r3
 8112154:	68fb      	ldr	r3, [r7, #12]
 8112156:	659a      	str	r2, [r3, #88]	@ 0x58
        }
        if (socket_ptr -> nx_tcp_socket_connect_mss > 2190)
 8112158:	68fb      	ldr	r3, [r7, #12]
 811215a:	6a1b      	ldr	r3, [r3, #32]
 811215c:	f640 028e 	movw	r2, #2190	@ 0x88e
 8112160:	4293      	cmp	r3, r2
 8112162:	d906      	bls.n	8112172 <_nx_tcp_socket_state_syn_sent+0x184>
        {
            socket_ptr -> nx_tcp_socket_tx_window_congestion -= socket_ptr -> nx_tcp_socket_connect_mss;
 8112164:	68fb      	ldr	r3, [r7, #12]
 8112166:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8112168:	68fb      	ldr	r3, [r7, #12]
 811216a:	6a1b      	ldr	r3, [r3, #32]
 811216c:	1ad2      	subs	r2, r2, r3
 811216e:	68fb      	ldr	r3, [r7, #12]
 8112170:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the Initial transmit outstanding byte count. */
        socket_ptr -> nx_tcp_socket_tx_outstanding_bytes = 0;
 8112172:	68fb      	ldr	r3, [r7, #12]
 8112174:	2200      	movs	r2, #0
 8112176:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_TCP_STATE_CHANGE, socket_ptr -> nx_tcp_socket_ip_ptr, socket_ptr, socket_ptr -> nx_tcp_socket_state, NX_TCP_SYN_RECEIVED, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Move to the SYN RECEIVED state.  */
        socket_ptr -> nx_tcp_socket_state =  NX_TCP_SYN_RECEIVED;
 8112178:	68fb      	ldr	r3, [r7, #12]
 811217a:	2204      	movs	r2, #4
 811217c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Clear the timeout.  */
        socket_ptr -> nx_tcp_socket_timeout =  0;
 811217e:	68fb      	ldr	r3, [r7, #12]
 8112180:	2200      	movs	r2, #0
 8112182:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

        /* Send the SYN packet.  */
        _nx_tcp_packet_send_syn(socket_ptr, (socket_ptr -> nx_tcp_socket_tx_sequence - 1));
 8112186:	68fb      	ldr	r3, [r7, #12]
 8112188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 811218a:	3b01      	subs	r3, #1
 811218c:	4619      	mov	r1, r3
 811218e:	68f8      	ldr	r0, [r7, #12]
 8112190:	f7fe f98e 	bl	81104b0 <_nx_tcp_packet_send_syn>
 8112194:	e011      	b.n	81121ba <_nx_tcp_socket_state_syn_sent+0x1cc>
    }
    /* Check for an invalid response to an attempted connection.  */
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 8112196:	68bb      	ldr	r3, [r7, #8]
 8112198:	68db      	ldr	r3, [r3, #12]
 811219a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 811219e:	2b00      	cmp	r3, #0
 81121a0:	d00b      	beq.n	81121ba <_nx_tcp_socket_state_syn_sent+0x1cc>
             (tcp_header_ptr -> nx_tcp_acknowledgment_number != socket_ptr -> nx_tcp_socket_tx_sequence))
 81121a2:	68bb      	ldr	r3, [r7, #8]
 81121a4:	689a      	ldr	r2, [r3, #8]
 81121a6:	68fb      	ldr	r3, [r7, #12]
 81121a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    else if ((tcp_header_ptr -> nx_tcp_header_word_3 & NX_TCP_ACK_BIT) &&
 81121aa:	429a      	cmp	r2, r3
 81121ac:	d005      	beq.n	81121ba <_nx_tcp_socket_state_syn_sent+0x1cc>
        /* Invalid response was received, it is likely that the other side still
           thinks a previous connection is active.  Send a reset (RST) message to
           the other side to clear any previous connection.  */

        /* Send the RST packet.  */
        _nx_tcp_packet_send_rst(socket_ptr, tcp_header_ptr);
 81121ae:	68b9      	ldr	r1, [r7, #8]
 81121b0:	68f8      	ldr	r0, [r7, #12]
 81121b2:	f7fe f949 	bl	8110448 <_nx_tcp_packet_send_rst>
 81121b6:	e000      	b.n	81121ba <_nx_tcp_socket_state_syn_sent+0x1cc>
        return;
 81121b8:	bf00      	nop
    }
}
 81121ba:	3710      	adds	r7, #16
 81121bc:	46bd      	mov	sp, r7
 81121be:	bd80      	pop	{r7, pc}

081121c0 <_nx_tcp_socket_state_transmit_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_state_transmit_check(NX_TCP_SOCKET *socket_ptr)
{
 81121c0:	b580      	push	{r7, lr}
 81121c2:	b084      	sub	sp, #16
 81121c4:	af00      	add	r7, sp, #0
 81121c6:	6078      	str	r0, [r7, #4]

ULONG tx_window_current;

    /* Now check to see if there is a thread suspended attempting to transmit.  */
    if (socket_ptr -> nx_tcp_socket_transmit_suspension_list)
 81121c8:	687b      	ldr	r3, [r7, #4]
 81121ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81121ce:	2b00      	cmp	r3, #0
 81121d0:	d051      	beq.n	8112276 <_nx_tcp_socket_state_transmit_check+0xb6>
        /* Yes, a thread is suspended attempting to transmit when the transmit window
           is lower than its request size.  Determine if the current transmit window
           size can now accommodate the request.  */

        /* Pick up the min(cwnd, swnd) */
        if (socket_ptr -> nx_tcp_socket_tx_window_advertised > socket_ptr -> nx_tcp_socket_tx_window_congestion)
 81121d2:	687b      	ldr	r3, [r7, #4]
 81121d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81121d6:	687b      	ldr	r3, [r7, #4]
 81121d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81121da:	429a      	cmp	r2, r3
 81121dc:	d919      	bls.n	8112212 <_nx_tcp_socket_state_transmit_check+0x52>
        {
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_congestion;
 81121de:	687b      	ldr	r3, [r7, #4]
 81121e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81121e2:	60fb      	str	r3, [r7, #12]

            /* On the first and second duplicate ACKs received, the total FlightSize would
               remain less than or equal to cwnd plus 2*SMSS.
               Section 3.2, Page 9, RFC5681. */
            if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received == 1) ||
 81121e4:	687b      	ldr	r3, [r7, #4]
 81121e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81121e8:	2b01      	cmp	r3, #1
 81121ea:	d003      	beq.n	81121f4 <_nx_tcp_socket_state_transmit_check+0x34>
                (socket_ptr -> nx_tcp_socket_duplicated_ack_received == 2))
 81121ec:	687b      	ldr	r3, [r7, #4]
 81121ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
            if ((socket_ptr -> nx_tcp_socket_duplicated_ack_received == 1) ||
 81121f0:	2b02      	cmp	r3, #2
 81121f2:	d105      	bne.n	8112200 <_nx_tcp_socket_state_transmit_check+0x40>
            {
                tx_window_current += (socket_ptr -> nx_tcp_socket_connect_mss << 1);
 81121f4:	687b      	ldr	r3, [r7, #4]
 81121f6:	6a1b      	ldr	r3, [r3, #32]
 81121f8:	005b      	lsls	r3, r3, #1
 81121fa:	68fa      	ldr	r2, [r7, #12]
 81121fc:	4413      	add	r3, r2
 81121fe:	60fb      	str	r3, [r7, #12]
            }

            /* Make sure the tx_window_current is less or equal to swnd. */
            if (tx_window_current > socket_ptr -> nx_tcp_socket_tx_window_advertised)
 8112200:	687b      	ldr	r3, [r7, #4]
 8112202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8112204:	68fa      	ldr	r2, [r7, #12]
 8112206:	429a      	cmp	r2, r3
 8112208:	d906      	bls.n	8112218 <_nx_tcp_socket_state_transmit_check+0x58>
            {
                tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 811220a:	687b      	ldr	r3, [r7, #4]
 811220c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 811220e:	60fb      	str	r3, [r7, #12]
 8112210:	e002      	b.n	8112218 <_nx_tcp_socket_state_transmit_check+0x58>
            }
        }
        else
        {
            tx_window_current = socket_ptr -> nx_tcp_socket_tx_window_advertised;
 8112212:	687b      	ldr	r3, [r7, #4]
 8112214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8112216:	60fb      	str	r3, [r7, #12]
        }

        /* Substract any data transmitted but unacked (outstanding bytes) */
        if (tx_window_current > socket_ptr -> nx_tcp_socket_tx_outstanding_bytes)
 8112218:	687b      	ldr	r3, [r7, #4]
 811221a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 811221c:	68fa      	ldr	r2, [r7, #12]
 811221e:	429a      	cmp	r2, r3
 8112220:	d905      	bls.n	811222e <_nx_tcp_socket_state_transmit_check+0x6e>
        {
            tx_window_current -= socket_ptr -> nx_tcp_socket_tx_outstanding_bytes;
 8112222:	687b      	ldr	r3, [r7, #4]
 8112224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8112226:	68fa      	ldr	r2, [r7, #12]
 8112228:	1ad3      	subs	r3, r2, r3
 811222a:	60fb      	str	r3, [r7, #12]
 811222c:	e001      	b.n	8112232 <_nx_tcp_socket_state_transmit_check+0x72>
        }
        else    /* Set tx_window_current to zero. */
        {
            tx_window_current = 0;
 811222e:	2300      	movs	r3, #0
 8112230:	60fb      	str	r3, [r7, #12]
        }


        /* Determine if the current transmit window (received from the connected socket)
           is large enough to handle the transmit.  */
        if ((tx_window_current) &&
 8112232:	68fb      	ldr	r3, [r7, #12]
 8112234:	2b00      	cmp	r3, #0
 8112236:	d01e      	beq.n	8112276 <_nx_tcp_socket_state_transmit_check+0xb6>
            (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum))
 8112238:	687b      	ldr	r3, [r7, #4]
 811223a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 811223e:	687b      	ldr	r3, [r7, #4]
 8112240:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
        if ((tx_window_current) &&
 8112244:	429a      	cmp	r2, r3
 8112246:	d216      	bcs.n	8112276 <_nx_tcp_socket_state_transmit_check+0xb6>
        {

            /* Is NetX set up with a windows update callback? */
            if (socket_ptr -> nx_tcp_socket_window_update_notify)
 8112248:	687b      	ldr	r3, [r7, #4]
 811224a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 811224e:	2b00      	cmp	r3, #0
 8112250:	d004      	beq.n	811225c <_nx_tcp_socket_state_transmit_check+0x9c>
            {

                /* Yes; Call this function when there is a change in transmit windows size. */
                (socket_ptr -> nx_tcp_socket_window_update_notify)(socket_ptr);
 8112252:	687b      	ldr	r3, [r7, #4]
 8112254:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8112258:	6878      	ldr	r0, [r7, #4]
 811225a:	4798      	blx	r3
            }


            /* Decrement the suspension count.  */
            socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 811225c:	687b      	ldr	r3, [r7, #4]
 811225e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8112262:	1e5a      	subs	r2, r3, #1
 8112264:	687b      	ldr	r3, [r7, #4]
 8112266:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

            /* Remove the suspended thread from the list.  */
            _nx_tcp_socket_thread_resume(&(socket_ptr -> nx_tcp_socket_transmit_suspension_list), NX_SUCCESS);
 811226a:	687b      	ldr	r3, [r7, #4]
 811226c:	33f4      	adds	r3, #244	@ 0xf4
 811226e:	2100      	movs	r1, #0
 8112270:	4618      	mov	r0, r3
 8112272:	f000 f805 	bl	8112280 <_nx_tcp_socket_thread_resume>
        }
    }
}
 8112276:	bf00      	nop
 8112278:	3710      	adds	r7, #16
 811227a:	46bd      	mov	sp, r7
 811227c:	bd80      	pop	{r7, pc}
	...

08112280 <_nx_tcp_socket_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_thread_resume(TX_THREAD **suspension_list_head, UINT status)
{
 8112280:	b580      	push	{r7, lr}
 8112282:	b088      	sub	sp, #32
 8112284:	af00      	add	r7, sp, #0
 8112286:	6078      	str	r0, [r7, #4]
 8112288:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 811228a:	f3ef 8310 	mrs	r3, PRIMASK
 811228e:	617b      	str	r3, [r7, #20]
    return(posture);
 8112290:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8112292:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8112294:	b672      	cpsid	i
    return(int_posture);
 8112296:	693b      	ldr	r3, [r7, #16]

TX_THREAD *thread_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 8112298:	61fb      	str	r3, [r7, #28]

    /* Pickup the thread pointer.  */
    thread_ptr =  *suspension_list_head;
 811229a:	687b      	ldr	r3, [r7, #4]
 811229c:	681b      	ldr	r3, [r3, #0]
 811229e:	61bb      	str	r3, [r7, #24]

    /* Determine if there still is a thread suspended.  */
    if (thread_ptr)
 81122a0:	69bb      	ldr	r3, [r7, #24]
 81122a2:	2b00      	cmp	r3, #0
 81122a4:	d02c      	beq.n	8112300 <_nx_tcp_socket_thread_resume+0x80>
    {

        /* Determine if there are anymore threads on the suspension list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 81122a6:	69bb      	ldr	r3, [r7, #24]
 81122a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81122aa:	69ba      	ldr	r2, [r7, #24]
 81122ac:	429a      	cmp	r2, r3
 81122ae:	d103      	bne.n	81122b8 <_nx_tcp_socket_thread_resume+0x38>
        {

            /* Only this thread is on the suspension list.  Simply set the
               list head to NULL to reflect an empty suspension list.  */
            *suspension_list_head =  TX_NULL;
 81122b0:	687b      	ldr	r3, [r7, #4]
 81122b2:	2200      	movs	r2, #0
 81122b4:	601a      	str	r2, [r3, #0]
 81122b6:	e00d      	b.n	81122d4 <_nx_tcp_socket_thread_resume+0x54>
        {

            /* More than one thread is on the suspension list, we need to
               adjust the link pointers and move the next entry to the
               front of the list.  */
            *suspension_list_head =  thread_ptr -> tx_thread_suspended_next;
 81122b8:	69bb      	ldr	r3, [r7, #24]
 81122ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81122bc:	687b      	ldr	r3, [r7, #4]
 81122be:	601a      	str	r2, [r3, #0]

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 81122c0:	69bb      	ldr	r3, [r7, #24]
 81122c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous;
 81122c4:	69ba      	ldr	r2, [r7, #24]
 81122c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 81122c8:	675a      	str	r2, [r3, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 81122ca:	69bb      	ldr	r3, [r7, #24]
 81122cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_next;
 81122ce:	69ba      	ldr	r2, [r7, #24]
 81122d0:	6f12      	ldr	r2, [r2, #112]	@ 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 81122d2:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Prepare for resumption of the thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 81122d4:	69bb      	ldr	r3, [r7, #24]
 81122d6:	2200      	movs	r2, #0
 81122d8:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 81122da:	4b0e      	ldr	r3, [pc, #56]	@ (8112314 <_nx_tcp_socket_thread_resume+0x94>)
 81122dc:	681b      	ldr	r3, [r3, #0]
 81122de:	3301      	adds	r3, #1
 81122e0:	4a0c      	ldr	r2, [pc, #48]	@ (8112314 <_nx_tcp_socket_thread_resume+0x94>)
 81122e2:	6013      	str	r3, [r2, #0]
 81122e4:	69fb      	ldr	r3, [r7, #28]
 81122e6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81122e8:	68fb      	ldr	r3, [r7, #12]
 81122ea:	f383 8810 	msr	PRIMASK, r3
}
 81122ee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  status;
 81122f0:	69bb      	ldr	r3, [r7, #24]
 81122f2:	683a      	ldr	r2, [r7, #0]
 81122f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 81122f8:	69b8      	ldr	r0, [r7, #24]
 81122fa:	f003 fba9 	bl	8115a50 <_tx_thread_system_resume>
    {

        /* Nothing was suspended.  Simply restore interrupts.  */
        TX_RESTORE
    }
}
 81122fe:	e005      	b.n	811230c <_nx_tcp_socket_thread_resume+0x8c>
 8112300:	69fb      	ldr	r3, [r7, #28]
 8112302:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8112304:	68bb      	ldr	r3, [r7, #8]
 8112306:	f383 8810 	msr	PRIMASK, r3
}
 811230a:	bf00      	nop
 811230c:	bf00      	nop
 811230e:	3720      	adds	r7, #32
 8112310:	46bd      	mov	sp, r7
 8112312:	bd80      	pop	{r7, pc}
 8112314:	200581c0 	.word	0x200581c0

08112318 <_nx_tcp_socket_transmit_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_socket_transmit_queue_flush(NX_TCP_SOCKET *socket_ptr)
{
 8112318:	b580      	push	{r7, lr}
 811231a:	b08a      	sub	sp, #40	@ 0x28
 811231c:	af00      	add	r7, sp, #0
 811231e:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  socket_ptr -> nx_tcp_socket_transmit_sent_head;
 8112320:	687b      	ldr	r3, [r7, #4]
 8112322:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8112326:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear the head and the tail pointers.  */
    socket_ptr -> nx_tcp_socket_transmit_sent_head =  NX_NULL;
 8112328:	687b      	ldr	r3, [r7, #4]
 811232a:	2200      	movs	r2, #0
 811232c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    socket_ptr -> nx_tcp_socket_transmit_sent_tail =  NX_NULL;
 8112330:	687b      	ldr	r3, [r7, #4]
 8112332:	2200      	movs	r2, #0
 8112334:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

    /* Loop to clear all the packets out.  */
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 8112338:	e02c      	b.n	8112394 <_nx_tcp_socket_transmit_queue_flush+0x7c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 811233a:	f3ef 8310 	mrs	r3, PRIMASK
 811233e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8112340:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8112342:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8112344:	b672      	cpsid	i
    return(int_posture);
 8112346:	697b      	ldr	r3, [r7, #20]
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8112348:	623b      	str	r3, [r7, #32]

        /* Pickup the next queued packet.  */
        next_packet_ptr =  packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next;
 811234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811234c:	6a1b      	ldr	r3, [r3, #32]
 811234e:	61fb      	str	r3, [r7, #28]

        /* Mark the packet as no longer being in a TCP queue.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8112350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112352:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8112356:	621a      	str	r2, [r3, #32]

        /* Has the packet been transmitted?  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_queue_next ==  ((NX_PACKET *)NX_DRIVER_TX_DONE))
 8112358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811235a:	69db      	ldr	r3, [r3, #28]
 811235c:	f1b3 3fdd 	cmp.w	r3, #3722304989	@ 0xdddddddd
 8112360:	d109      	bne.n	8112376 <_nx_tcp_socket_transmit_queue_flush+0x5e>
 8112362:	6a3b      	ldr	r3, [r7, #32]
 8112364:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8112366:	693b      	ldr	r3, [r7, #16]
 8112368:	f383 8810 	msr	PRIMASK, r3
}
 811236c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 811236e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8112370:	f7fc fc82 	bl	810ec78 <_nx_packet_release>
 8112374:	e005      	b.n	8112382 <_nx_tcp_socket_transmit_queue_flush+0x6a>
 8112376:	6a3b      	ldr	r3, [r7, #32]
 8112378:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811237a:	68fb      	ldr	r3, [r7, #12]
 811237c:	f383 8810 	msr	PRIMASK, r3
}
 8112380:	bf00      	nop
            /* Just restore interrupts.  */
            TX_RESTORE
        }

        /* Move to the next packet.  */
        packet_ptr =  next_packet_ptr;
 8112382:	69fb      	ldr	r3, [r7, #28]
 8112384:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Decrease the queued packet count.  */
        socket_ptr -> nx_tcp_socket_transmit_sent_count--;
 8112386:	687b      	ldr	r3, [r7, #4]
 8112388:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 811238c:	1e5a      	subs	r2, r3, #1
 811238e:	687b      	ldr	r3, [r7, #4]
 8112390:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    while (socket_ptr -> nx_tcp_socket_transmit_sent_count)
 8112394:	687b      	ldr	r3, [r7, #4]
 8112396:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 811239a:	2b00      	cmp	r3, #0
 811239c:	d1cd      	bne.n	811233a <_nx_tcp_socket_transmit_queue_flush+0x22>
    }
}
 811239e:	bf00      	nop
 81123a0:	bf00      	nop
 81123a2:	3728      	adds	r7, #40	@ 0x28
 81123a4:	46bd      	mov	sp, r7
 81123a6:	bd80      	pop	{r7, pc}

081123a8 <_nx_tcp_transmit_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_transmit_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 81123a8:	b580      	push	{r7, lr}
 81123aa:	b08e      	sub	sp, #56	@ 0x38
 81123ac:	af00      	add	r7, sp, #0
 81123ae:	6078      	str	r0, [r7, #4]
 81123b0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 81123b2:	f3ef 8310 	mrs	r3, PRIMASK
 81123b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 81123b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 81123ba:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 81123bc:	b672      	cpsid	i
    return(int_posture);
 81123be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
NX_IP         *ip_ptr;

    NX_CLEANUP_EXTENSION

    /* Disable interrupts.  */
    TX_DISABLE
 81123c0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Setup pointer to TCP socket control block.  */
    socket_ptr =  (NX_TCP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 81123c2:	687b      	ldr	r3, [r7, #4]
 81123c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81123c6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Determine if the socket pointer is valid.  */
    if ((!socket_ptr) || (socket_ptr -> nx_tcp_socket_id != NX_TCP_ID))
 81123c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81123ca:	2b00      	cmp	r3, #0
 81123cc:	d004      	beq.n	81123d8 <_nx_tcp_transmit_cleanup+0x30>
 81123ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81123d0:	681b      	ldr	r3, [r3, #0]
 81123d2:	4a49      	ldr	r2, [pc, #292]	@ (81124f8 <_nx_tcp_transmit_cleanup+0x150>)
 81123d4:	4293      	cmp	r3, r2
 81123d6:	d006      	beq.n	81123e6 <_nx_tcp_transmit_cleanup+0x3e>
 81123d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81123da:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81123dc:	6a3b      	ldr	r3, [r7, #32]
 81123de:	f383 8810 	msr	PRIMASK, r3
}
 81123e2:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 81123e4:	e085      	b.n	81124f2 <_nx_tcp_transmit_cleanup+0x14a>
    }

    /* Determine if the cleanup is still required.  */
    if (!(thread_ptr -> tx_thread_suspend_cleanup))
 81123e6:	687b      	ldr	r3, [r7, #4]
 81123e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81123ea:	2b00      	cmp	r3, #0
 81123ec:	d106      	bne.n	81123fc <_nx_tcp_transmit_cleanup+0x54>
 81123ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81123f0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81123f2:	69fb      	ldr	r3, [r7, #28]
 81123f4:	f383 8810 	msr	PRIMASK, r3
}
 81123f8:	bf00      	nop
    {

        /* Restore interrupts.  */
        TX_RESTORE

        return;
 81123fa:	e07a      	b.n	81124f2 <_nx_tcp_transmit_cleanup+0x14a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 81123fc:	f3ef 8305 	mrs	r3, IPSR
 8112400:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8112402:	69ba      	ldr	r2, [r7, #24]
    }

    /* Determine if the caller is an ISR or the system timer thread.  */
#ifndef TX_TIMER_PROCESS_IN_ISR
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (_tx_thread_current_ptr == &_tx_timer_thread))
 8112404:	4b3d      	ldr	r3, [pc, #244]	@ (81124fc <_nx_tcp_transmit_cleanup+0x154>)
 8112406:	681b      	ldr	r3, [r3, #0]
 8112408:	4313      	orrs	r3, r2
 811240a:	2b00      	cmp	r3, #0
 811240c:	d104      	bne.n	8112418 <_nx_tcp_transmit_cleanup+0x70>
 811240e:	4b3c      	ldr	r3, [pc, #240]	@ (8112500 <_nx_tcp_transmit_cleanup+0x158>)
 8112410:	681b      	ldr	r3, [r3, #0]
 8112412:	4a3c      	ldr	r2, [pc, #240]	@ (8112504 <_nx_tcp_transmit_cleanup+0x15c>)
 8112414:	4293      	cmp	r3, r2
 8112416:	d116      	bne.n	8112446 <_nx_tcp_transmit_cleanup+0x9e>
    {

        /* Yes, defer the processing to the NetX IP thread.  */

        /* Yes, change the suspend cleanup routine to indicate the cleanup is deferred.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_tcp_cleanup_deferred;
 8112418:	687b      	ldr	r3, [r7, #4]
 811241a:	4a3b      	ldr	r2, [pc, #236]	@ (8112508 <_nx_tcp_transmit_cleanup+0x160>)
 811241c:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Pickup the IP pointer.  */
        ip_ptr =  socket_ptr -> nx_tcp_socket_ip_ptr;
 811241e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112420:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8112424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8112426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8112428:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811242a:	697b      	ldr	r3, [r7, #20]
 811242c:	f383 8810 	msr	PRIMASK, r3
}
 8112430:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the deferred cleanup flag for the IP thread.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_TCP_CLEANUP_DEFERRED, TX_OR);
 8112432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112434:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8112438:	2200      	movs	r2, #0
 811243a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 811243e:	4618      	mov	r0, r3
 8112440:	f002 f804 	bl	811444c <_tx_event_flags_set>

        /* Return to caller.  */
        return;
 8112444:	e055      	b.n	81124f2 <_nx_tcp_transmit_cleanup+0x14a>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8112446:	687b      	ldr	r3, [r7, #4]
 8112448:	2200      	movs	r2, #0
 811244a:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 811244c:	687b      	ldr	r3, [r7, #4]
 811244e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8112450:	687a      	ldr	r2, [r7, #4]
 8112452:	429a      	cmp	r2, r3
 8112454:	d104      	bne.n	8112460 <_nx_tcp_transmit_cleanup+0xb8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_suspension_list =  NX_NULL;
 8112456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112458:	2200      	movs	r2, #0
 811245a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 811245e:	e00e      	b.n	811247e <_nx_tcp_transmit_cleanup+0xd6>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_tcp_socket_transmit_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8112460:	687b      	ldr	r3, [r7, #4]
 8112462:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8112464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112466:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 811246a:	687b      	ldr	r3, [r7, #4]
 811246c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous;
 811246e:	687a      	ldr	r2, [r7, #4]
 8112470:	6f52      	ldr	r2, [r2, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8112472:	675a      	str	r2, [r3, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8112474:	687b      	ldr	r3, [r7, #4]
 8112476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_next;
 8112478:	687a      	ldr	r2, [r7, #4]
 811247a:	6f12      	ldr	r2, [r2, #112]	@ 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 811247c:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_tcp_socket_transmit_suspended_count--;
 811247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112480:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8112484:	1e5a      	subs	r2, r3, #1
 8112486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112488:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 811248c:	687b      	ldr	r3, [r7, #4]
 811248e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8112490:	2b0c      	cmp	r3, #12
 8112492:	d128      	bne.n	81124e6 <_nx_tcp_transmit_cleanup+0x13e>

            /* Thread still suspended on the TCP socket.  Setup return error status and
               resume the thread.  */

            /* Determine which transmit error is present.  */
            if (socket_ptr -> nx_tcp_socket_state != NX_TCP_ESTABLISHED)
 8112494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8112498:	2b05      	cmp	r3, #5
 811249a:	d004      	beq.n	81124a6 <_nx_tcp_transmit_cleanup+0xfe>
            {

                /* This socket is no longer connected.  */
                thread_ptr -> tx_thread_suspend_status =  NX_NOT_CONNECTED;
 811249c:	687b      	ldr	r3, [r7, #4]
 811249e:	2238      	movs	r2, #56	@ 0x38
 81124a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 81124a4:	e010      	b.n	81124c8 <_nx_tcp_transmit_cleanup+0x120>
            }
            else if (socket_ptr -> nx_tcp_socket_transmit_sent_count < socket_ptr -> nx_tcp_socket_transmit_queue_maximum)
 81124a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81124a8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 81124ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81124ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81124b2:	429a      	cmp	r2, r3
 81124b4:	d204      	bcs.n	81124c0 <_nx_tcp_transmit_cleanup+0x118>
            {

                /* Not a queue depth problem, return a window overflow error.  */
                thread_ptr -> tx_thread_suspend_status =  NX_WINDOW_OVERFLOW;
 81124b6:	687b      	ldr	r3, [r7, #4]
 81124b8:	2239      	movs	r2, #57	@ 0x39
 81124ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 81124be:	e003      	b.n	81124c8 <_nx_tcp_transmit_cleanup+0x120>
            }
            else
            {

                /* Return a transmit queue exceeded error.  */
                thread_ptr -> tx_thread_suspend_status =  NX_TX_QUEUE_DEPTH;
 81124c0:	687b      	ldr	r3, [r7, #4]
 81124c2:	2249      	movs	r2, #73	@ 0x49
 81124c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            }

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 81124c8:	4b10      	ldr	r3, [pc, #64]	@ (811250c <_nx_tcp_transmit_cleanup+0x164>)
 81124ca:	681b      	ldr	r3, [r3, #0]
 81124cc:	3301      	adds	r3, #1
 81124ce:	4a0f      	ldr	r2, [pc, #60]	@ (811250c <_nx_tcp_transmit_cleanup+0x164>)
 81124d0:	6013      	str	r3, [r2, #0]
 81124d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81124d4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81124d6:	693b      	ldr	r3, [r7, #16]
 81124d8:	f383 8810 	msr	PRIMASK, r3
}
 81124dc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume the thread!  */
            _tx_thread_system_resume(thread_ptr);
 81124de:	6878      	ldr	r0, [r7, #4]
 81124e0:	f003 fab6 	bl	8115a50 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 81124e4:	e005      	b.n	81124f2 <_nx_tcp_transmit_cleanup+0x14a>
 81124e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81124e8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81124ea:	68fb      	ldr	r3, [r7, #12]
 81124ec:	f383 8810 	msr	PRIMASK, r3
}
 81124f0:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 81124f2:	3738      	adds	r7, #56	@ 0x38
 81124f4:	46bd      	mov	sp, r7
 81124f6:	bd80      	pop	{r7, pc}
 81124f8:	54435020 	.word	0x54435020
 81124fc:	20050088 	.word	0x20050088
 8112500:	20058128 	.word	0x20058128
 8112504:	20058270 	.word	0x20058270
 8112508:	0810f019 	.word	0x0810f019
 811250c:	200581c0 	.word	0x200581c0

08112510 <_nx_udp_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8112510:	b580      	push	{r7, lr}
 8112512:	b08a      	sub	sp, #40	@ 0x28
 8112514:	af00      	add	r7, sp, #0
 8112516:	6078      	str	r0, [r7, #4]
 8112518:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 811251a:	687b      	ldr	r3, [r7, #4]
 811251c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811251e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8112520:	f3ef 8310 	mrs	r3, PRIMASK
 8112524:	61bb      	str	r3, [r7, #24]
    return(posture);
 8112526:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8112528:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 811252a:	b672      	cpsid	i
    return(int_posture);
 811252c:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 811252e:	623b      	str	r3, [r7, #32]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 8112530:	687b      	ldr	r3, [r7, #4]
 8112532:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8112534:	2b00      	cmp	r3, #0
 8112536:	d043      	beq.n	81125c0 <_nx_udp_bind_cleanup+0xb0>
 8112538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811253a:	2b00      	cmp	r3, #0
 811253c:	d040      	beq.n	81125c0 <_nx_udp_bind_cleanup+0xb0>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 811253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112540:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 8112542:	4a24      	ldr	r2, [pc, #144]	@ (81125d4 <_nx_udp_bind_cleanup+0xc4>)
 8112544:	4293      	cmp	r3, r2
 8112546:	d13b      	bne.n	81125c0 <_nx_udp_bind_cleanup+0xb0>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 8112548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811254a:	2200      	movs	r2, #0
 811254c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 811254e:	687b      	ldr	r3, [r7, #4]
 8112550:	2200      	movs	r2, #0
 8112552:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_udp_socket_bound_previous;
 8112554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8112558:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 811255a:	687b      	ldr	r3, [r7, #4]
 811255c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811255e:	687a      	ldr	r2, [r7, #4]
 8112560:	429a      	cmp	r2, r3
 8112562:	d103      	bne.n	811256c <_nx_udp_bind_cleanup+0x5c>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 8112564:	69fb      	ldr	r3, [r7, #28]
 8112566:	2200      	movs	r2, #0
 8112568:	661a      	str	r2, [r3, #96]	@ 0x60
 811256a:	e00d      	b.n	8112588 <_nx_udp_bind_cleanup+0x78>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 811256c:	687b      	ldr	r3, [r7, #4]
 811256e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8112570:	69fb      	ldr	r3, [r7, #28]
 8112572:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8112574:	687b      	ldr	r3, [r7, #4]
 8112576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8112578:	687a      	ldr	r2, [r7, #4]
 811257a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 811257c:	675a      	str	r2, [r3, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 811257e:	687b      	ldr	r3, [r7, #4]
 8112580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_next;
 8112582:	687a      	ldr	r2, [r7, #4]
 8112584:	6f12      	ldr	r2, [r2, #112]	@ 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8112586:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 8112588:	69fb      	ldr	r3, [r7, #28]
 811258a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 811258c:	1e5a      	subs	r2, r3, #1
 811258e:	69fb      	ldr	r3, [r7, #28]
 8112590:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8112592:	687b      	ldr	r3, [r7, #4]
 8112594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8112596:	2b0c      	cmp	r3, #12
 8112598:	d112      	bne.n	81125c0 <_nx_udp_bind_cleanup+0xb0>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 811259a:	687b      	ldr	r3, [r7, #4]
 811259c:	2223      	movs	r2, #35	@ 0x23
 811259e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 81125a2:	4b0d      	ldr	r3, [pc, #52]	@ (81125d8 <_nx_udp_bind_cleanup+0xc8>)
 81125a4:	681b      	ldr	r3, [r3, #0]
 81125a6:	3301      	adds	r3, #1
 81125a8:	4a0b      	ldr	r2, [pc, #44]	@ (81125d8 <_nx_udp_bind_cleanup+0xc8>)
 81125aa:	6013      	str	r3, [r2, #0]
 81125ac:	6a3b      	ldr	r3, [r7, #32]
 81125ae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81125b0:	693b      	ldr	r3, [r7, #16]
 81125b2:	f383 8810 	msr	PRIMASK, r3
}
 81125b6:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 81125b8:	6878      	ldr	r0, [r7, #4]
 81125ba:	f003 fa49 	bl	8115a50 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 81125be:	e005      	b.n	81125cc <_nx_udp_bind_cleanup+0xbc>
 81125c0:	6a3b      	ldr	r3, [r7, #32]
 81125c2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81125c4:	68fb      	ldr	r3, [r7, #12]
 81125c6:	f383 8810 	msr	PRIMASK, r3
}
 81125ca:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 81125cc:	3728      	adds	r7, #40	@ 0x28
 81125ce:	46bd      	mov	sp, r7
 81125d0:	bd80      	pop	{r7, pc}
 81125d2:	bf00      	nop
 81125d4:	55445020 	.word	0x55445020
 81125d8:	200581c0 	.word	0x200581c0

081125dc <_nx_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_enable(NX_IP *ip_ptr)
{
 81125dc:	b480      	push	{r7}
 81125de:	b083      	sub	sp, #12
 81125e0:	af00      	add	r7, sp, #0
 81125e2:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Set the UDP packet receive function in the IP structure to indicate
       we are ready to receive UDP packets.  */
    ip_ptr -> nx_ip_udp_packet_receive =  _nx_udp_packet_receive;
 81125e4:	687b      	ldr	r3, [r7, #4]
 81125e6:	4a05      	ldr	r2, [pc, #20]	@ (81125fc <_nx_udp_enable+0x20>)
 81125e8:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c

    /* Return successful completion.  */
    return(NX_SUCCESS);
 81125ec:	2300      	movs	r3, #0
}
 81125ee:	4618      	mov	r0, r3
 81125f0:	370c      	adds	r7, #12
 81125f2:	46bd      	mov	sp, r7
 81125f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81125f8:	4770      	bx	lr
 81125fa:	bf00      	nop
 81125fc:	081126ad 	.word	0x081126ad

08112600 <_nx_udp_free_port_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_free_port_find(NX_IP *ip_ptr, UINT port, UINT *free_port_ptr)
{
 8112600:	b580      	push	{r7, lr}
 8112602:	b08a      	sub	sp, #40	@ 0x28
 8112604:	af00      	add	r7, sp, #0
 8112606:	60f8      	str	r0, [r7, #12]
 8112608:	60b9      	str	r1, [r7, #8]
 811260a:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_FREE_PORT_FIND, ip_ptr, port, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Save the original port.  */
    starting_port =  port;
 811260c:	68bb      	ldr	r3, [r7, #8]
 811260e:	61fb      	str	r3, [r7, #28]
    /* Loop through the UDP ports until a free entry is found.  */
    do
    {

        /* Calculate the hash index in the UDP port array of the associated IP instance.  */
        index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8112610:	68bb      	ldr	r3, [r7, #8]
 8112612:	0a1a      	lsrs	r2, r3, #8
 8112614:	68bb      	ldr	r3, [r7, #8]
 8112616:	4413      	add	r3, r2
 8112618:	f003 031f 	and.w	r3, r3, #31
 811261c:	61bb      	str	r3, [r7, #24]

        /* Obtain the IP mutex so we can figure out whether or not the port has already
           been bound to.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 811261e:	68fb      	ldr	r3, [r7, #12]
 8112620:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8112624:	f04f 31ff 	mov.w	r1, #4294967295
 8112628:	4618      	mov	r0, r3
 811262a:	f002 faa9 	bl	8114b80 <_tx_mutex_get>

        /* Pickup the head of the UDP ports bound list.  */
        search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 811262e:	68fa      	ldr	r2, [r7, #12]
 8112630:	69bb      	ldr	r3, [r7, #24]
 8112632:	33e0      	adds	r3, #224	@ 0xe0
 8112634:	009b      	lsls	r3, r3, #2
 8112636:	4413      	add	r3, r2
 8112638:	685b      	ldr	r3, [r3, #4]
 811263a:	623b      	str	r3, [r7, #32]

        /* Set the bound flag to false.  */
        bound =  NX_FALSE;
 811263c:	2300      	movs	r3, #0
 811263e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Determine if we need to perform a list search.  */
        if (search_ptr)
 8112640:	6a3b      	ldr	r3, [r7, #32]
 8112642:	2b00      	cmp	r3, #0
 8112644:	d010      	beq.n	8112668 <_nx_udp_free_port_find+0x68>
        {

            /* Walk through the circular list of UDP sockets that are already
               bound.  */
            end_ptr =     search_ptr;
 8112646:	6a3b      	ldr	r3, [r7, #32]
 8112648:	617b      	str	r3, [r7, #20]
            do
            {

                /* Determine if this entry is the same as the requested port.  */
                if (search_ptr -> nx_udp_socket_port == port)
 811264a:	6a3b      	ldr	r3, [r7, #32]
 811264c:	689b      	ldr	r3, [r3, #8]
 811264e:	68ba      	ldr	r2, [r7, #8]
 8112650:	429a      	cmp	r2, r3
 8112652:	d102      	bne.n	811265a <_nx_udp_free_port_find+0x5a>
                {

                    /* Set the bound flag.  */
                    bound =  NX_TRUE;
 8112654:	2301      	movs	r3, #1
 8112656:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* Get out of the loop.  */
                    break;
 8112658:	e006      	b.n	8112668 <_nx_udp_free_port_find+0x68>
                }

                /* Move to the next entry in the list.  */
                search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 811265a:	6a3b      	ldr	r3, [r7, #32]
 811265c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 811265e:	623b      	str	r3, [r7, #32]
            } while (search_ptr != end_ptr);
 8112660:	6a3a      	ldr	r2, [r7, #32]
 8112662:	697b      	ldr	r3, [r7, #20]
 8112664:	429a      	cmp	r2, r3
 8112666:	d1f0      	bne.n	811264a <_nx_udp_free_port_find+0x4a>
            }
        }
#endif

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8112668:	68fb      	ldr	r3, [r7, #12]
 811266a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 811266e:	4618      	mov	r0, r3
 8112670:	f002 fcfe 	bl	8115070 <_tx_mutex_put>

        /* Determine if the port is available.  */
        if (!bound)
 8112674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112676:	2b00      	cmp	r3, #0
 8112678:	d104      	bne.n	8112684 <_nx_udp_free_port_find+0x84>
        {

            /* Setup the return port number.  */
            *free_port_ptr =  port;
 811267a:	687b      	ldr	r3, [r7, #4]
 811267c:	68ba      	ldr	r2, [r7, #8]
 811267e:	601a      	str	r2, [r3, #0]

            /* Update the trace event with the status.  */
            NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_FREE_PORT_FIND, 0, 0, port, 0);

            /* Return success.  */
            return(NX_SUCCESS);
 8112680:	2300      	movs	r3, #0
 8112682:	e00e      	b.n	81126a2 <_nx_udp_free_port_find+0xa2>
        }

        /* Move to the next port.  */
        port++;
 8112684:	68bb      	ldr	r3, [r7, #8]
 8112686:	3301      	adds	r3, #1
 8112688:	60bb      	str	r3, [r7, #8]

        /* Determine if we need to wrap.  */
        if (port > NX_MAX_PORT)
 811268a:	68bb      	ldr	r3, [r7, #8]
 811268c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8112690:	d302      	bcc.n	8112698 <_nx_udp_free_port_find+0x98>
        {

            /* Yes, we need to wrap around.  */
            port =  NX_SEARCH_PORT_START;
 8112692:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8112696:	60bb      	str	r3, [r7, #8]
        }
    } while (starting_port != port);
 8112698:	69fa      	ldr	r2, [r7, #28]
 811269a:	68bb      	ldr	r3, [r7, #8]
 811269c:	429a      	cmp	r2, r3
 811269e:	d1b7      	bne.n	8112610 <_nx_udp_free_port_find+0x10>

    /* A free port was not found, return an error.  */
    return(NX_NO_FREE_PORTS);
 81126a0:	2345      	movs	r3, #69	@ 0x45
}
 81126a2:	4618      	mov	r0, r3
 81126a4:	3728      	adds	r7, #40	@ 0x28
 81126a6:	46bd      	mov	sp, r7
 81126a8:	bd80      	pop	{r7, pc}
	...

081126ac <_nx_udp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 81126ac:	b580      	push	{r7, lr}
 81126ae:	b094      	sub	sp, #80	@ 0x50
 81126b0:	af00      	add	r7, sp, #0
 81126b2:	6078      	str	r0, [r7, #4]
 81126b4:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_UDP_INFO

    /* Increment the total UDP receive packets count.  */
    ip_ptr -> nx_ip_udp_packets_received++;
 81126b6:	687b      	ldr	r3, [r7, #4]
 81126b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81126bc:	1c5a      	adds	r2, r3, #1
 81126be:	687b      	ldr	r3, [r7, #4]
 81126c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_UDP_HEADER))
 81126c4:	683b      	ldr	r3, [r7, #0]
 81126c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81126c8:	2b07      	cmp	r3, #7
 81126ca:	d80a      	bhi.n	81126e2 <_nx_udp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 81126cc:	687b      	ldr	r3, [r7, #4]
 81126ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81126d2:	1c5a      	adds	r2, r3, #1
 81126d4:	687b      	ldr	r3, [r7, #4]
 81126d6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 81126da:	6838      	ldr	r0, [r7, #0]
 81126dc:	f7fc facc 	bl	810ec78 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 81126e0:	e1d8      	b.n	8112a94 <_nx_udp_packet_receive+0x3e8>
    }
#endif

    /* Pickup the pointer to the head of the UDP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 81126e2:	683b      	ldr	r3, [r7, #0]
 81126e4:	689b      	ldr	r3, [r3, #8]
 81126e6:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 81126e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81126ea:	681b      	ldr	r3, [r3, #0]
 81126ec:	ba1a      	rev	r2, r3
 81126ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81126f0:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 81126f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81126f4:	685b      	ldr	r3, [r3, #4]
 81126f6:	ba1a      	rev	r2, r3
 81126f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81126fa:	605a      	str	r2, [r3, #4]

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK))
 81126fc:	683b      	ldr	r3, [r7, #0]
 81126fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8112700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112702:	685b      	ldr	r3, [r3, #4]
 8112704:	0c1b      	lsrs	r3, r3, #16
 8112706:	429a      	cmp	r2, r3
 8112708:	d20a      	bcs.n	8112720 <_nx_udp_packet_receive+0x74>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 811270a:	687b      	ldr	r3, [r7, #4]
 811270c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8112710:	1c5a      	adds	r2, r3, #1
 8112712:	687b      	ldr	r3, [r7, #4]
 8112714:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 8112718:	6838      	ldr	r0, [r7, #0]
 811271a:	f7fc faad 	bl	810ec78 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 811271e:	e1b9      	b.n	8112a94 <_nx_udp_packet_receive+0x3e8>
    /* Recompute the packet length in case TFC padding is present. */
    packet_ptr -> nx_packet_length = (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK);
#endif /* NX_IPSEC_ENABLE */

    /* Pickup the destination UDP port.  */
    port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 8112720:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112722:	681b      	ldr	r3, [r3, #0]
 8112724:	b29b      	uxth	r3, r3
 8112726:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8112728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811272a:	0a1a      	lsrs	r2, r3, #8
 811272c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811272e:	4413      	add	r3, r2
 8112730:	f003 031f 	and.w	r3, r3, #31
 8112734:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Determine if the caller is a thread. If so, we should use the protection mutex
       to avoid having the port list examined while we are traversing it. If this routine
       is called from an ISR nothing needs to be done since bind/unbind are not allowed
       from ISRs.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8112736:	4b8f      	ldr	r3, [pc, #572]	@ (8112974 <_nx_udp_packet_receive+0x2c8>)
 8112738:	681b      	ldr	r3, [r3, #0]
 811273a:	2b00      	cmp	r3, #0
 811273c:	d010      	beq.n	8112760 <_nx_udp_packet_receive+0xb4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 811273e:	f3ef 8305 	mrs	r3, IPSR
 8112742:	633b      	str	r3, [r7, #48]	@ 0x30
    return(ipsr_value);
 8112744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112746:	4b8c      	ldr	r3, [pc, #560]	@ (8112978 <_nx_udp_packet_receive+0x2cc>)
 8112748:	681b      	ldr	r3, [r3, #0]
 811274a:	4313      	orrs	r3, r2
 811274c:	2b00      	cmp	r3, #0
 811274e:	d107      	bne.n	8112760 <_nx_udp_packet_receive+0xb4>
    {

        /* Get mutex protection.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), NX_WAIT_FOREVER);
 8112750:	687b      	ldr	r3, [r7, #4]
 8112752:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8112756:	f04f 31ff 	mov.w	r1, #4294967295
 811275a:	4618      	mov	r0, r3
 811275c:	f002 fa10 	bl	8114b80 <_tx_mutex_get>
    }

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 8112760:	687a      	ldr	r2, [r7, #4]
 8112762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8112764:	33e0      	adds	r3, #224	@ 0xe0
 8112766:	009b      	lsls	r3, r3, #2
 8112768:	4413      	add	r3, r2
 811276a:	685b      	ldr	r3, [r3, #4]
 811276c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Determine if there are any sockets bound on this port index.  */
    if (!socket_ptr)
 811276e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112770:	2b00      	cmp	r3, #0
 8112772:	d13e      	bne.n	81127f2 <_nx_udp_packet_receive+0x146>
    {

#ifndef NX_DISABLE_IPV4
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8112774:	683b      	ldr	r3, [r7, #0]
 8112776:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 811277a:	2b04      	cmp	r3, #4
 811277c:	d114      	bne.n	81127a8 <_nx_udp_packet_receive+0xfc>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 811277e:	687b      	ldr	r3, [r7, #4]
 8112780:	f8d3 3374 	ldr.w	r3, [r3, #884]	@ 0x374
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8112784:	2b00      	cmp	r3, #0
 8112786:	d00f      	beq.n	81127a8 <_nx_udp_packet_receive+0xfc>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8112788:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811278a:	681b      	ldr	r3, [r3, #0]
 811278c:	ba1a      	rev	r2, r3
 811278e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112790:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8112792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112794:	685b      	ldr	r3, [r3, #4]
 8112796:	ba1a      	rev	r2, r3
 8112798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811279a:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 811279c:	2300      	movs	r3, #0
 811279e:	4a77      	ldr	r2, [pc, #476]	@ (811297c <_nx_udp_packet_receive+0x2d0>)
 81127a0:	6839      	ldr	r1, [r7, #0]
 81127a2:	6878      	ldr	r0, [r7, #4]
 81127a4:	f7f9 ff40 	bl	810c628 <_nx_icmpv4_send_error_message>
#endif /* FEATURE_NX_IPV6 */

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 81127a8:	687b      	ldr	r3, [r7, #4]
 81127aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81127ae:	1c5a      	adds	r2, r3, #1
 81127b0:	687b      	ldr	r3, [r7, #4]
 81127b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 81127b6:	687b      	ldr	r3, [r7, #4]
 81127b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81127bc:	1c5a      	adds	r2, r3, #1
 81127be:	687b      	ldr	r3, [r7, #4]
 81127c0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
#endif

        /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
        if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 81127c4:	4b6b      	ldr	r3, [pc, #428]	@ (8112974 <_nx_udp_packet_receive+0x2c8>)
 81127c6:	681b      	ldr	r3, [r3, #0]
 81127c8:	2b00      	cmp	r3, #0
 81127ca:	d00e      	beq.n	81127ea <_nx_udp_packet_receive+0x13e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 81127cc:	f3ef 8305 	mrs	r3, IPSR
 81127d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 81127d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81127d4:	4b68      	ldr	r3, [pc, #416]	@ (8112978 <_nx_udp_packet_receive+0x2cc>)
 81127d6:	681b      	ldr	r3, [r3, #0]
 81127d8:	4313      	orrs	r3, r2
 81127da:	2b00      	cmp	r3, #0
 81127dc:	d105      	bne.n	81127ea <_nx_udp_packet_receive+0x13e>
        {

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 81127de:	687b      	ldr	r3, [r7, #4]
 81127e0:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 81127e4:	4618      	mov	r0, r3
 81127e6:	f002 fc43 	bl	8115070 <_tx_mutex_put>
        }

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 81127ea:	6838      	ldr	r0, [r7, #0]
 81127ec:	f7fc fa44 	bl	810ec78 <_nx_packet_release>

        /* Just return.  */
        return;
 81127f0:	e150      	b.n	8112a94 <_nx_udp_packet_receive+0x3e8>
    /*  Loop to examine the list of bound ports on this index.  */
    do
    {

        /* Determine if the port has been found.  */
        if (socket_ptr -> nx_udp_socket_port == port)
 81127f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81127f4:	689b      	ldr	r3, [r3, #8]
 81127f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81127f8:	429a      	cmp	r2, r3
 81127fa:	d119      	bne.n	8112830 <_nx_udp_packet_receive+0x184>
            /* Yes, we have a match.  */

#ifndef NX_DISABLE_UDP_INFO

            /* Increment the total number of packets received for this socket.  */
            socket_ptr -> nx_udp_socket_packets_received++;
 81127fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81127fe:	699b      	ldr	r3, [r3, #24]
 8112800:	1c5a      	adds	r2, r3, #1
 8112802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112804:	619a      	str	r2, [r3, #24]

            /* Increment the total UDP receive bytes.  */
            ip_ptr -> nx_ip_udp_bytes_received +=          packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8112806:	687b      	ldr	r3, [r7, #4]
 8112808:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 811280c:	683b      	ldr	r3, [r7, #0]
 811280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8112810:	4413      	add	r3, r2
 8112812:	f1a3 0208 	sub.w	r2, r3, #8
 8112816:	687b      	ldr	r3, [r7, #4]
 8112818:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            socket_ptr -> nx_udp_socket_bytes_received +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 811281c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811281e:	69da      	ldr	r2, [r3, #28]
 8112820:	683b      	ldr	r3, [r7, #0]
 8112822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8112824:	4413      	add	r3, r2
 8112826:	f1a3 0208 	sub.w	r2, r3, #8
 811282a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811282c:	61da      	str	r2, [r3, #28]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_RECEIVE, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Get out of the search loop.  */
            break;
 811282e:	e00b      	b.n	8112848 <_nx_udp_packet_receive+0x19c>
        }
        else
        {

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_udp_socket_bound_next;
 8112830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8112834:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
    } while (socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]);
 8112836:	687a      	ldr	r2, [r7, #4]
 8112838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811283a:	33e0      	adds	r3, #224	@ 0xe0
 811283c:	009b      	lsls	r3, r3, #2
 811283e:	4413      	add	r3, r2
 8112840:	685b      	ldr	r3, [r3, #4]
 8112842:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8112844:	429a      	cmp	r2, r3
 8112846:	d1d4      	bne.n	81127f2 <_nx_udp_packet_receive+0x146>

    /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8112848:	4b4a      	ldr	r3, [pc, #296]	@ (8112974 <_nx_udp_packet_receive+0x2c8>)
 811284a:	681b      	ldr	r3, [r3, #0]
 811284c:	2b00      	cmp	r3, #0
 811284e:	d00e      	beq.n	811286e <_nx_udp_packet_receive+0x1c2>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8112850:	f3ef 8305 	mrs	r3, IPSR
 8112854:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8112856:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8112858:	4b47      	ldr	r3, [pc, #284]	@ (8112978 <_nx_udp_packet_receive+0x2cc>)
 811285a:	681b      	ldr	r3, [r3, #0]
 811285c:	4313      	orrs	r3, r2
 811285e:	2b00      	cmp	r3, #0
 8112860:	d105      	bne.n	811286e <_nx_udp_packet_receive+0x1c2>
    {

        /* Release mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8112862:	687b      	ldr	r3, [r7, #4]
 8112864:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8112868:	4618      	mov	r0, r3
 811286a:	f002 fc01 	bl	8115070 <_tx_mutex_put>
    }

    /* Determine if a match was found.  */
    if (socket_ptr -> nx_udp_socket_port != port)
 811286e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112870:	689b      	ldr	r3, [r3, #8]
 8112872:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8112874:	429a      	cmp	r2, r3
 8112876:	d02b      	beq.n	81128d0 <_nx_udp_packet_receive+0x224>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 8112878:	687b      	ldr	r3, [r7, #4]
 811287a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 811287e:	1c5a      	adds	r2, r3, #1
 8112880:	687b      	ldr	r3, [r7, #4]
 8112882:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8112886:	687b      	ldr	r3, [r7, #4]
 8112888:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 811288c:	1c5a      	adds	r2, r3, #1
 811288e:	687b      	ldr	r3, [r7, #4]
 8112890:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
#endif

#if !defined(NX_DISABLE_IPV4) && !defined(NX_DISABLE_ICMPV4_ERROR_MESSAGE)
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8112894:	683b      	ldr	r3, [r7, #0]
 8112896:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 811289a:	2b04      	cmp	r3, #4
 811289c:	d114      	bne.n	81128c8 <_nx_udp_packet_receive+0x21c>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 811289e:	687b      	ldr	r3, [r7, #4]
 81128a0:	f8d3 3374 	ldr.w	r3, [r3, #884]	@ 0x374
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 81128a4:	2b00      	cmp	r3, #0
 81128a6:	d00f      	beq.n	81128c8 <_nx_udp_packet_receive+0x21c>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 81128a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81128aa:	681b      	ldr	r3, [r3, #0]
 81128ac:	ba1a      	rev	r2, r3
 81128ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81128b0:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 81128b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81128b4:	685b      	ldr	r3, [r3, #4]
 81128b6:	ba1a      	rev	r2, r3
 81128b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81128ba:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 81128bc:	2300      	movs	r3, #0
 81128be:	4a2f      	ldr	r2, [pc, #188]	@ (811297c <_nx_udp_packet_receive+0x2d0>)
 81128c0:	6839      	ldr	r1, [r7, #0]
 81128c2:	6878      	ldr	r0, [r7, #4]
 81128c4:	f7f9 feb0 	bl	810c628 <_nx_icmpv4_send_error_message>
            }
        }
#endif /* FEATURE_NX_IPV6 && !NX_DISABLE_ICMPV6_ERROR_MESSAGE  */

        /* No socket structure bound to this port, just release the packet.  */
        _nx_packet_release(packet_ptr);
 81128c8:	6838      	ldr	r0, [r7, #0]
 81128ca:	f7fc f9d5 	bl	810ec78 <_nx_packet_release>
        return;
 81128ce:	e0e1      	b.n	8112a94 <_nx_udp_packet_receive+0x3e8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 81128d0:	f3ef 8310 	mrs	r3, PRIMASK
 81128d4:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 81128d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 81128d8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 81128da:	b672      	cpsid	i
    return(int_posture);
 81128dc:	6a3b      	ldr	r3, [r7, #32]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 81128de:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Determine if the socket is still valid.  */
    if (socket_ptr -> nx_udp_socket_id != NX_UDP_ID)
 81128e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81128e2:	681b      	ldr	r3, [r3, #0]
 81128e4:	4a26      	ldr	r2, [pc, #152]	@ (8112980 <_nx_udp_packet_receive+0x2d4>)
 81128e6:	4293      	cmp	r3, r2
 81128e8:	d01c      	beq.n	8112924 <_nx_udp_packet_receive+0x278>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 81128ea:	687b      	ldr	r3, [r7, #4]
 81128ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81128f0:	1c5a      	adds	r2, r3, #1
 81128f2:	687b      	ldr	r3, [r7, #4]
 81128f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 81128f8:	687b      	ldr	r3, [r7, #4]
 81128fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81128fe:	1c5a      	adds	r2, r3, #1
 8112900:	687b      	ldr	r3, [r7, #4]
 8112902:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

        /* Increment the total UDP receive packets dropped count for this socket.  */
        socket_ptr -> nx_udp_socket_packets_dropped++;
 8112906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811290a:	1c5a      	adds	r2, r3, #1
 811290c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811290e:	625a      	str	r2, [r3, #36]	@ 0x24
 8112910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112912:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8112914:	69fb      	ldr	r3, [r7, #28]
 8112916:	f383 8810 	msr	PRIMASK, r3
}
 811291a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 811291c:	6838      	ldr	r0, [r7, #0]
 811291e:	f7fc f9ab 	bl	810ec78 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8112922:	e0b7      	b.n	8112a94 <_nx_udp_packet_receive+0x3e8>
    }

    /* Pickup the receive notify function.  */
    receive_callback =  socket_ptr -> nx_udp_receive_callback;
 8112924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8112928:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Determine if we need to update the UDP port head pointer.  This should
       only be done if the found socket pointer is not the head pointer and
       the mutex for this IP instance is available.  */
    if ((socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]) && (!ip_ptr -> nx_ip_protection.tx_mutex_ownership_count))
 811292a:	687a      	ldr	r2, [r7, #4]
 811292c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811292e:	33e0      	adds	r3, #224	@ 0xe0
 8112930:	009b      	lsls	r3, r3, #2
 8112932:	4413      	add	r3, r2
 8112934:	685b      	ldr	r3, [r3, #4]
 8112936:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8112938:	429a      	cmp	r2, r3
 811293a:	d00b      	beq.n	8112954 <_nx_udp_packet_receive+0x2a8>
 811293c:	687b      	ldr	r3, [r7, #4]
 811293e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8112942:	2b00      	cmp	r3, #0
 8112944:	d106      	bne.n	8112954 <_nx_udp_packet_receive+0x2a8>
    {

        /* Move the port head pointer to this socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr;
 8112946:	687a      	ldr	r2, [r7, #4]
 8112948:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811294a:	33e0      	adds	r3, #224	@ 0xe0
 811294c:	009b      	lsls	r3, r3, #2
 811294e:	4413      	add	r3, r2
 8112950:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8112952:	605a      	str	r2, [r3, #4]
    }

    /* Determine if there is thread waiting for a packet from this port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 8112954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8112958:	637b      	str	r3, [r7, #52]	@ 0x34
    if (thread_ptr)
 811295a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811295c:	2b00      	cmp	r3, #0
 811295e:	d03e      	beq.n	81129de <_nx_udp_packet_receive+0x332>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8112960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8112962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8112964:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8112966:	429a      	cmp	r2, r3
 8112968:	d10c      	bne.n	8112984 <_nx_udp_packet_receive+0x2d8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 811296a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811296c:	2200      	movs	r2, #0
 811296e:	659a      	str	r2, [r3, #88]	@ 0x58
 8112970:	e016      	b.n	81129a0 <_nx_udp_packet_receive+0x2f4>
 8112972:	bf00      	nop
 8112974:	20058128 	.word	0x20058128
 8112978:	20050088 	.word	0x20050088
 811297c:	03030000 	.word	0x03030000
 8112980:	55445020 	.word	0x55445020
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8112984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8112986:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8112988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811298a:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 811298c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811298e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8112990:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8112992:	6f52      	ldr	r2, [r2, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8112994:	675a      	str	r2, [r3, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8112996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8112998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_next;
 811299a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 811299c:	6f12      	ldr	r2, [r2, #112]	@ 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 811299e:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 81129a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81129a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81129a4:	1e5a      	subs	r2, r3, #1
 81129a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81129a8:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 81129aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81129ac:	2200      	movs	r2, #0
 81129ae:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 81129b0:	4b3a      	ldr	r3, [pc, #232]	@ (8112a9c <_nx_udp_packet_receive+0x3f0>)
 81129b2:	681b      	ldr	r3, [r3, #0]
 81129b4:	3301      	adds	r3, #1
 81129b6:	4a39      	ldr	r2, [pc, #228]	@ (8112a9c <_nx_udp_packet_receive+0x3f0>)
 81129b8:	6013      	str	r3, [r2, #0]

        /* Return this block pointer to the suspended thread waiting for
           a block.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 81129ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81129bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81129be:	683a      	ldr	r2, [r7, #0]
 81129c0:	601a      	str	r2, [r3, #0]
 81129c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81129c4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81129c6:	69bb      	ldr	r3, [r7, #24]
 81129c8:	f383 8810 	msr	PRIMASK, r3
}
 81129cc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 81129ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81129d0:	2200      	movs	r2, #0
 81129d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 81129d6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 81129d8:	f003 f83a 	bl	8115a50 <_tx_thread_system_resume>
 81129dc:	e054      	b.n	8112a88 <_nx_udp_packet_receive+0x3dc>
            return;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Place the packet at the end of the socket's receive queue.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 81129de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81129e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81129e2:	2b00      	cmp	r3, #0
 81129e4:	d03c      	beq.n	8112a60 <_nx_udp_packet_receive+0x3b4>
        {

            /* Add the new packet to a nonempty list.  */
            (socket_ptr -> nx_udp_socket_receive_tail) -> nx_packet_queue_next =  packet_ptr;
 81129e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81129e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81129ea:	683a      	ldr	r2, [r7, #0]
 81129ec:	61da      	str	r2, [r3, #28]
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 81129ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81129f0:	683a      	ldr	r2, [r7, #0]
 81129f2:	649a      	str	r2, [r3, #72]	@ 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 81129f4:	683b      	ldr	r3, [r7, #0]
 81129f6:	2200      	movs	r2, #0
 81129f8:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 81129fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81129fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81129fe:	1c5a      	adds	r2, r3, #1
 8112a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112a02:	63da      	str	r2, [r3, #60]	@ 0x3c

            /* Determine if the maximum queue depth has been reached.  */
            if (socket_ptr -> nx_udp_socket_receive_count >
 8112a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112a06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                socket_ptr -> nx_udp_socket_queue_maximum)
 8112a08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
            if (socket_ptr -> nx_udp_socket_receive_count >
 8112a0c:	429a      	cmp	r2, r3
 8112a0e:	d921      	bls.n	8112a54 <_nx_udp_packet_receive+0x3a8>
            {

                /* We have exceeded the queue depth, so remove the first item
                   in the queue (which is the oldest).  */
                packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 8112a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8112a14:	603b      	str	r3, [r7, #0]
                socket_ptr -> nx_udp_socket_receive_head =  packet_ptr -> nx_packet_queue_next;
 8112a16:	683b      	ldr	r3, [r7, #0]
 8112a18:	69da      	ldr	r2, [r3, #28]
 8112a1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112a1c:	645a      	str	r2, [r3, #68]	@ 0x44

                /* Decrement the number of packets queued.  */
                socket_ptr -> nx_udp_socket_receive_count--;
 8112a1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8112a22:	1e5a      	subs	r2, r3, #1
 8112a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112a26:	63da      	str	r2, [r3, #60]	@ 0x3c

#ifndef NX_DISABLE_UDP_INFO

                /* Increment the total UDP receive packets dropped count.  */
                ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8112a28:	687b      	ldr	r3, [r7, #4]
 8112a2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8112a2e:	1c5a      	adds	r2, r3, #1
 8112a30:	687b      	ldr	r3, [r7, #4]
 8112a32:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

                /* Increment the total UDP receive packets dropped count for this socket.  */
                socket_ptr -> nx_udp_socket_packets_dropped++;
 8112a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8112a3a:	1c5a      	adds	r2, r3, #1
 8112a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112a3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8112a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112a42:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8112a44:	697b      	ldr	r3, [r7, #20]
 8112a46:	f383 8810 	msr	PRIMASK, r3
}
 8112a4a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 8112a4c:	6838      	ldr	r0, [r7, #0]
 8112a4e:	f7fc f913 	bl	810ec78 <_nx_packet_release>
 8112a52:	e019      	b.n	8112a88 <_nx_udp_packet_receive+0x3dc>
 8112a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112a56:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8112a58:	693b      	ldr	r3, [r7, #16]
 8112a5a:	f383 8810 	msr	PRIMASK, r3
}
 8112a5e:	e013      	b.n	8112a88 <_nx_udp_packet_receive+0x3dc>
        }
        else
        {

            /* Add the new packet to an empty list.  */
            socket_ptr -> nx_udp_socket_receive_head =  packet_ptr;
 8112a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112a62:	683a      	ldr	r2, [r7, #0]
 8112a64:	645a      	str	r2, [r3, #68]	@ 0x44
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 8112a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112a68:	683a      	ldr	r2, [r7, #0]
 8112a6a:	649a      	str	r2, [r3, #72]	@ 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 8112a6c:	683b      	ldr	r3, [r7, #0]
 8112a6e:	2200      	movs	r2, #0
 8112a70:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 8112a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8112a76:	1c5a      	adds	r2, r3, #1
 8112a78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112a7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8112a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112a7e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8112a80:	68fb      	ldr	r3, [r7, #12]
 8112a82:	f383 8810 	msr	PRIMASK, r3
}
 8112a86:	bf00      	nop
        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_UDP_RECEIVE_QUEUE, __LINE__, packet_ptr);
    }

    /* Determine if there is a socket receive notification function specified.  */
    if (receive_callback)
 8112a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112a8a:	2b00      	cmp	r3, #0
 8112a8c:	d002      	beq.n	8112a94 <_nx_udp_packet_receive+0x3e8>
    {

        /* Yes, notification is requested.  Call the application's receive notification
           function for this socket.  */
        (receive_callback)(socket_ptr);
 8112a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112a90:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8112a92:	4798      	blx	r3
    }
}
 8112a94:	3750      	adds	r7, #80	@ 0x50
 8112a96:	46bd      	mov	sp, r7
 8112a98:	bd80      	pop	{r7, pc}
 8112a9a:	bf00      	nop
 8112a9c:	200581c0 	.word	0x200581c0

08112aa0 <_nx_udp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8112aa0:	b580      	push	{r7, lr}
 8112aa2:	b088      	sub	sp, #32
 8112aa4:	af00      	add	r7, sp, #0
 8112aa6:	6078      	str	r0, [r7, #4]
 8112aa8:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8112aaa:	687b      	ldr	r3, [r7, #4]
 8112aac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112aae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8112ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8112ab4:	617b      	str	r3, [r7, #20]
    return(posture);
 8112ab6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8112ab8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8112aba:	b672      	cpsid	i
    return(int_posture);
 8112abc:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 8112abe:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 8112ac0:	687b      	ldr	r3, [r7, #4]
 8112ac2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8112ac4:	2b00      	cmp	r3, #0
 8112ac6:	d03d      	beq.n	8112b44 <_nx_udp_receive_cleanup+0xa4>
 8112ac8:	69fb      	ldr	r3, [r7, #28]
 8112aca:	2b00      	cmp	r3, #0
 8112acc:	d03a      	beq.n	8112b44 <_nx_udp_receive_cleanup+0xa4>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 8112ace:	69fb      	ldr	r3, [r7, #28]
 8112ad0:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 8112ad2:	4a21      	ldr	r2, [pc, #132]	@ (8112b58 <_nx_udp_receive_cleanup+0xb8>)
 8112ad4:	4293      	cmp	r3, r2
 8112ad6:	d135      	bne.n	8112b44 <_nx_udp_receive_cleanup+0xa4>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8112ad8:	687b      	ldr	r3, [r7, #4]
 8112ada:	2200      	movs	r2, #0
 8112adc:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8112ade:	687b      	ldr	r3, [r7, #4]
 8112ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8112ae2:	687a      	ldr	r2, [r7, #4]
 8112ae4:	429a      	cmp	r2, r3
 8112ae6:	d103      	bne.n	8112af0 <_nx_udp_receive_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 8112ae8:	69fb      	ldr	r3, [r7, #28]
 8112aea:	2200      	movs	r2, #0
 8112aec:	659a      	str	r2, [r3, #88]	@ 0x58
 8112aee:	e00d      	b.n	8112b0c <_nx_udp_receive_cleanup+0x6c>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8112af0:	687b      	ldr	r3, [r7, #4]
 8112af2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8112af4:	69fb      	ldr	r3, [r7, #28]
 8112af6:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8112af8:	687b      	ldr	r3, [r7, #4]
 8112afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8112afc:	687a      	ldr	r2, [r7, #4]
 8112afe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8112b00:	675a      	str	r2, [r3, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8112b02:	687b      	ldr	r3, [r7, #4]
 8112b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_next;
 8112b06:	687a      	ldr	r2, [r7, #4]
 8112b08:	6f12      	ldr	r2, [r2, #112]	@ 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8112b0a:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 8112b0c:	69fb      	ldr	r3, [r7, #28]
 8112b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8112b10:	1e5a      	subs	r2, r3, #1
 8112b12:	69fb      	ldr	r3, [r7, #28]
 8112b14:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8112b16:	687b      	ldr	r3, [r7, #4]
 8112b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8112b1a:	2b0c      	cmp	r3, #12
 8112b1c:	d112      	bne.n	8112b44 <_nx_udp_receive_cleanup+0xa4>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 8112b1e:	687b      	ldr	r3, [r7, #4]
 8112b20:	2201      	movs	r2, #1
 8112b22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8112b26:	4b0d      	ldr	r3, [pc, #52]	@ (8112b5c <_nx_udp_receive_cleanup+0xbc>)
 8112b28:	681b      	ldr	r3, [r3, #0]
 8112b2a:	3301      	adds	r3, #1
 8112b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8112b5c <_nx_udp_receive_cleanup+0xbc>)
 8112b2e:	6013      	str	r3, [r2, #0]
 8112b30:	69bb      	ldr	r3, [r7, #24]
 8112b32:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8112b34:	68fb      	ldr	r3, [r7, #12]
 8112b36:	f383 8810 	msr	PRIMASK, r3
}
 8112b3a:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8112b3c:	6878      	ldr	r0, [r7, #4]
 8112b3e:	f002 ff87 	bl	8115a50 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8112b42:	e005      	b.n	8112b50 <_nx_udp_receive_cleanup+0xb0>
 8112b44:	69bb      	ldr	r3, [r7, #24]
 8112b46:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8112b48:	68bb      	ldr	r3, [r7, #8]
 8112b4a:	f383 8810 	msr	PRIMASK, r3
}
 8112b4e:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8112b50:	3720      	adds	r7, #32
 8112b52:	46bd      	mov	sp, r7
 8112b54:	bd80      	pop	{r7, pc}
 8112b56:	bf00      	nop
 8112b58:	55445020 	.word	0x55445020
 8112b5c:	200581c0 	.word	0x200581c0

08112b60 <_nx_udp_socket_bind>:
/*                                            corrected the random value, */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 8112b60:	b580      	push	{r7, lr}
 8112b62:	b092      	sub	sp, #72	@ 0x48
 8112b64:	af00      	add	r7, sp, #0
 8112b66:	60f8      	str	r0, [r7, #12]
 8112b68:	60b9      	str	r1, [r7, #8]
 8112b6a:	607a      	str	r2, [r7, #4]
#endif /* NX_NAT_ENABLE */
NX_IP         *ip_ptr;
TX_THREAD     *thread_ptr;
NX_UDP_SOCKET *search_ptr;
NX_UDP_SOCKET *end_ptr;
UINT           status = NX_SUCCESS;
 8112b6c:	2300      	movs	r3, #0
 8112b6e:	643b      	str	r3, [r7, #64]	@ 0x40


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8112b70:	68fb      	ldr	r3, [r7, #12]
 8112b72:	68db      	ldr	r3, [r3, #12]
 8112b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_BIND, ip_ptr, socket_ptr, port, wait_option, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8112b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112b78:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8112b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8112b80:	4618      	mov	r0, r3
 8112b82:	f001 fffd 	bl	8114b80 <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 8112b86:	68fb      	ldr	r3, [r7, #12]
 8112b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8112b8a:	2b00      	cmp	r3, #0
 8112b8c:	d103      	bne.n	8112b96 <_nx_udp_socket_bind+0x36>
        (socket_ptr -> nx_udp_socket_bind_in_progress))
 8112b8e:	68fb      	ldr	r3, [r7, #12]
 8112b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 8112b92:	2b00      	cmp	r3, #0
 8112b94:	d007      	beq.n	8112ba6 <_nx_udp_socket_bind+0x46>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8112b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112b98:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8112b9c:	4618      	mov	r0, r3
 8112b9e:	f002 fa67 	bl	8115070 <_tx_mutex_put>

        /* Return an already bound error code.  */
        return(NX_ALREADY_BOUND);
 8112ba2:	2322      	movs	r3, #34	@ 0x22
 8112ba4:	e0fa      	b.n	8112d9c <_nx_udp_socket_bind+0x23c>
    }

    /* Determine if the port needs to be allocated.  */
    if (port == NX_ANY_PORT)
 8112ba6:	68bb      	ldr	r3, [r7, #8]
 8112ba8:	2b00      	cmp	r3, #0
 8112baa:	d119      	bne.n	8112be0 <_nx_udp_socket_bind+0x80>
    {

        /* Call the find routine to allocate a UDP port.  */
        port = NX_SEARCH_PORT_START + (UINT)(((ULONG)NX_RAND()) % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 8112bac:	f003 fffa 	bl	8116ba4 <rand>
 8112bb0:	4603      	mov	r3, r0
 8112bb2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8112bb6:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 8112bba:	60bb      	str	r3, [r7, #8]
        if (_nx_udp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 8112bbc:	68bb      	ldr	r3, [r7, #8]
 8112bbe:	f107 0208 	add.w	r2, r7, #8
 8112bc2:	4619      	mov	r1, r3
 8112bc4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8112bc6:	f7ff fd1b 	bl	8112600 <_nx_udp_free_port_find>
 8112bca:	4603      	mov	r3, r0
 8112bcc:	2b00      	cmp	r3, #0
 8112bce:	d007      	beq.n	8112be0 <_nx_udp_socket_bind+0x80>
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8112bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112bd2:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8112bd6:	4618      	mov	r0, r3
 8112bd8:	f002 fa4a 	bl	8115070 <_tx_mutex_put>

            /* There was no free port, return an error code.  */
            return(NX_NO_FREE_PORTS);
 8112bdc:	2345      	movs	r3, #69	@ 0x45
 8112bde:	e0dd      	b.n	8112d9c <_nx_udp_socket_bind+0x23c>
        }
    }
#endif

    /* Save the port number in the UDP socket structure.  */
    socket_ptr -> nx_udp_socket_port =  port;
 8112be0:	68ba      	ldr	r2, [r7, #8]
 8112be2:	68fb      	ldr	r3, [r7, #12]
 8112be4:	609a      	str	r2, [r3, #8]

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8112be6:	68bb      	ldr	r3, [r7, #8]
 8112be8:	0a1a      	lsrs	r2, r3, #8
 8112bea:	68bb      	ldr	r3, [r7, #8]
 8112bec:	4413      	add	r3, r2
 8112bee:	f003 031f 	and.w	r3, r3, #31
 8112bf2:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Pickup the head of the UDP ports bound list.  */
    search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 8112bf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8112bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112bf8:	33e0      	adds	r3, #224	@ 0xe0
 8112bfa:	009b      	lsls	r3, r3, #2
 8112bfc:	4413      	add	r3, r2
 8112bfe:	685b      	ldr	r3, [r3, #4]
 8112c00:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Determine if we need to perform a list search.  */
    if (search_ptr)
 8112c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112c04:	2b00      	cmp	r3, #0
 8112c06:	d00f      	beq.n	8112c28 <_nx_udp_socket_bind+0xc8>
    {

        /* Walk through the circular list of UDP sockets that are already
           bound.  */
        end_ptr = search_ptr;
 8112c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112c0a:	637b      	str	r3, [r7, #52]	@ 0x34
        do
        {

            /* Determine if this entry is the same as the requested port.  */
            if (search_ptr -> nx_udp_socket_port == port)
 8112c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112c0e:	689a      	ldr	r2, [r3, #8]
 8112c10:	68bb      	ldr	r3, [r7, #8]
 8112c12:	429a      	cmp	r2, r3
 8112c14:	d007      	beq.n	8112c26 <_nx_udp_socket_bind+0xc6>
                /* Yes, the port has already been allocated.  */
                break;
            }

            /* Move to the next entry in the list.  */
            search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 8112c16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8112c1a:	647b      	str	r3, [r7, #68]	@ 0x44
        } while (search_ptr != end_ptr);
 8112c1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8112c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8112c20:	429a      	cmp	r2, r3
 8112c22:	d1f3      	bne.n	8112c0c <_nx_udp_socket_bind+0xac>
 8112c24:	e000      	b.n	8112c28 <_nx_udp_socket_bind+0xc8>
                break;
 8112c26:	bf00      	nop
    }

    /* Now determine if the port is available.  */
    if ((search_ptr == NX_NULL) || (search_ptr -> nx_udp_socket_port != port))
 8112c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112c2a:	2b00      	cmp	r3, #0
 8112c2c:	d004      	beq.n	8112c38 <_nx_udp_socket_bind+0xd8>
 8112c2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112c30:	689a      	ldr	r2, [r3, #8]
 8112c32:	68bb      	ldr	r3, [r7, #8]
 8112c34:	429a      	cmp	r2, r3
 8112c36:	d047      	beq.n	8112cc8 <_nx_udp_socket_bind+0x168>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8112c38:	f3ef 8310 	mrs	r3, PRIMASK
 8112c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8112c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8112c40:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8112c42:	b672      	cpsid	i
    return(int_posture);
 8112c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {

        /* Place this UDP socket structure on the list of bound ports.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8112c46:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Determine if the list is NULL.  */
        if (search_ptr)
 8112c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112c4a:	2b00      	cmp	r3, #0
 8112c4c:	d022      	beq.n	8112c94 <_nx_udp_socket_bind+0x134>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            socket_ptr -> nx_udp_socket_bound_next =       ip_ptr -> nx_ip_udp_port_table[index];
 8112c4e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8112c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112c52:	33e0      	adds	r3, #224	@ 0xe0
 8112c54:	009b      	lsls	r3, r3, #2
 8112c56:	4413      	add	r3, r2
 8112c58:	685a      	ldr	r2, [r3, #4]
 8112c5a:	68fb      	ldr	r3, [r7, #12]
 8112c5c:	64da      	str	r2, [r3, #76]	@ 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =   (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 8112c5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8112c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112c62:	33e0      	adds	r3, #224	@ 0xe0
 8112c64:	009b      	lsls	r3, r3, #2
 8112c66:	4413      	add	r3, r2
 8112c68:	685b      	ldr	r3, [r3, #4]
 8112c6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8112c6c:	68fb      	ldr	r3, [r7, #12]
 8112c6e:	651a      	str	r2, [r3, #80]	@ 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next = socket_ptr;
 8112c70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8112c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112c74:	33e0      	adds	r3, #224	@ 0xe0
 8112c76:	009b      	lsls	r3, r3, #2
 8112c78:	4413      	add	r3, r2
 8112c7a:	685b      	ldr	r3, [r3, #4]
 8112c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8112c7e:	68fa      	ldr	r2, [r7, #12]
 8112c80:	64da      	str	r2, [r3, #76]	@ 0x4c
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   socket_ptr;
 8112c82:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8112c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112c86:	33e0      	adds	r3, #224	@ 0xe0
 8112c88:	009b      	lsls	r3, r3, #2
 8112c8a:	4413      	add	r3, r2
 8112c8c:	685b      	ldr	r3, [r3, #4]
 8112c8e:	68fa      	ldr	r2, [r7, #12]
 8112c90:	651a      	str	r2, [r3, #80]	@ 0x50
 8112c92:	e00c      	b.n	8112cae <_nx_udp_socket_bind+0x14e>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            socket_ptr -> nx_udp_socket_bound_next =      socket_ptr;
 8112c94:	68fb      	ldr	r3, [r7, #12]
 8112c96:	68fa      	ldr	r2, [r7, #12]
 8112c98:	64da      	str	r2, [r3, #76]	@ 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =  socket_ptr;
 8112c9a:	68fb      	ldr	r3, [r7, #12]
 8112c9c:	68fa      	ldr	r2, [r7, #12]
 8112c9e:	651a      	str	r2, [r3, #80]	@ 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =       socket_ptr;
 8112ca0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8112ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112ca4:	33e0      	adds	r3, #224	@ 0xe0
 8112ca6:	009b      	lsls	r3, r3, #2
 8112ca8:	4413      	add	r3, r2
 8112caa:	68fa      	ldr	r2, [r7, #12]
 8112cac:	605a      	str	r2, [r3, #4]
 8112cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112cb0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8112cb2:	6a3b      	ldr	r3, [r7, #32]
 8112cb4:	f383 8810 	msr	PRIMASK, r3
}
 8112cb8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8112cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112cbc:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8112cc0:	4618      	mov	r0, r3
 8112cc2:	f002 f9d5 	bl	8115070 <_tx_mutex_put>
 8112cc6:	e068      	b.n	8112d9a <_nx_udp_socket_bind+0x23a>
    }
    else if (wait_option)
 8112cc8:	687b      	ldr	r3, [r7, #4]
 8112cca:	2b00      	cmp	r3, #0
 8112ccc:	d05d      	beq.n	8112d8a <_nx_udp_socket_bind+0x22a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8112cce:	f3ef 8310 	mrs	r3, PRIMASK
 8112cd2:	61fb      	str	r3, [r7, #28]
    return(posture);
 8112cd4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8112cd6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8112cd8:	b672      	cpsid	i
    return(int_posture);
 8112cda:	69bb      	ldr	r3, [r7, #24]
    {

        /* Prepare for suspension of this thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8112cdc:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Pickup thread pointer.  */
        thread_ptr =  _tx_thread_current_ptr;
 8112cde:	4b31      	ldr	r3, [pc, #196]	@ (8112da4 <_nx_udp_socket_bind+0x244>)
 8112ce0:	681b      	ldr	r3, [r3, #0]
 8112ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Setup cleanup routine pointer.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_bind_cleanup;
 8112ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112ce6:	4a30      	ldr	r2, [pc, #192]	@ (8112da8 <_nx_udp_socket_bind+0x248>)
 8112ce8:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Setup cleanup information, i.e. this socket control
           block.  */
        thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 8112cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112cec:	68fa      	ldr	r2, [r7, #12]
 8112cee:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Also remember the socket that has bound to the port, since the thread
           is going to be suspended on that socket.  */
        socket_ptr -> nx_udp_socket_bound_previous =  search_ptr;
 8112cf0:	68fb      	ldr	r3, [r7, #12]
 8112cf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8112cf4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Set the socket bind in progress flag (thread pointer).  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  thread_ptr;
 8112cf6:	68fb      	ldr	r3, [r7, #12]
 8112cf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8112cfa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Setup suspension list.  */
        if (search_ptr -> nx_udp_socket_bind_suspension_list)
 8112cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8112d00:	2b00      	cmp	r3, #0
 8112d02:	d012      	beq.n	8112d2a <_nx_udp_socket_bind+0x1ca>
        {

            /* This list is not NULL, add current thread to the end. */
            thread_ptr -> tx_thread_suspended_next =       search_ptr -> nx_udp_socket_bind_suspension_list;
 8112d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112d06:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8112d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112d0a:	671a      	str	r2, [r3, #112]	@ 0x70
            thread_ptr -> tx_thread_suspended_previous =  (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous;
 8112d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8112d10:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8112d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112d14:	675a      	str	r2, [r3, #116]	@ 0x74
            ((search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =  thread_ptr;
 8112d16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8112d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8112d1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8112d1e:	671a      	str	r2, [r3, #112]	@ 0x70
            (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8112d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8112d24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8112d26:	675a      	str	r2, [r3, #116]	@ 0x74
 8112d28:	e008      	b.n	8112d3c <_nx_udp_socket_bind+0x1dc>
        else
        {

            /* No other threads are suspended.  Setup the head pointer and
               just setup this threads pointers to itself.  */
            search_ptr -> nx_udp_socket_bind_suspension_list =         thread_ptr;
 8112d2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112d2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8112d2e:	661a      	str	r2, [r3, #96]	@ 0x60
            thread_ptr -> tx_thread_suspended_next =                   thread_ptr;
 8112d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8112d34:	671a      	str	r2, [r3, #112]	@ 0x70
            thread_ptr -> tx_thread_suspended_previous =               thread_ptr;
 8112d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112d38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8112d3a:	675a      	str	r2, [r3, #116]	@ 0x74
        }

        /* Increment the suspended thread count.  */
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 8112d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112d3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8112d40:	1c5a      	adds	r2, r3, #1
 8112d42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112d44:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the state to suspended.  */
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8112d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112d48:	220c      	movs	r2, #12
 8112d4a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8112d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112d4e:	2201      	movs	r2, #1
 8112d50:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8112d52:	4b16      	ldr	r3, [pc, #88]	@ (8112dac <_nx_udp_socket_bind+0x24c>)
 8112d54:	681b      	ldr	r3, [r3, #0]
 8112d56:	3301      	adds	r3, #1
 8112d58:	4a14      	ldr	r2, [pc, #80]	@ (8112dac <_nx_udp_socket_bind+0x24c>)
 8112d5a:	6013      	str	r3, [r2, #0]

        /* Save the timeout value.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8112d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112d5e:	687a      	ldr	r2, [r7, #4]
 8112d60:	64da      	str	r2, [r3, #76]	@ 0x4c
 8112d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112d64:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8112d66:	697b      	ldr	r3, [r7, #20]
 8112d68:	f383 8810 	msr	PRIMASK, r3
}
 8112d6c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8112d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112d70:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8112d74:	4618      	mov	r0, r3
 8112d76:	f002 f97b 	bl	8115070 <_tx_mutex_put>

        /* Call actual thread suspension routine.  */
        _tx_thread_system_suspend(thread_ptr);
 8112d7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8112d7c:	f002 ff68 	bl	8115c50 <_tx_thread_system_suspend>

        /* Return the completion status.  */
        status = thread_ptr -> tx_thread_suspend_status;
 8112d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8112d86:	643b      	str	r3, [r7, #64]	@ 0x40
 8112d88:	e007      	b.n	8112d9a <_nx_udp_socket_bind+0x23a>
    }
    else
    {

        /* Release the IP protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8112d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8112d8c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8112d90:	4618      	mov	r0, r3
 8112d92:	f002 f96d 	bl	8115070 <_tx_mutex_put>

        /* Return the port unavailable error.  */
        status = NX_PORT_UNAVAILABLE;
 8112d96:	2323      	movs	r3, #35	@ 0x23
 8112d98:	643b      	str	r3, [r7, #64]	@ 0x40
        status = _nx_udp_socket_driver_bind(socket_ptr, port, wait_option);
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Return success to the caller.  */
    return(status);
 8112d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8112d9c:	4618      	mov	r0, r3
 8112d9e:	3748      	adds	r7, #72	@ 0x48
 8112da0:	46bd      	mov	sp, r7
 8112da2:	bd80      	pop	{r7, pc}
 8112da4:	20058128 	.word	0x20058128
 8112da8:	08112511 	.word	0x08112511
 8112dac:	200581c0 	.word	0x200581c0

08112db0 <_nx_udp_socket_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                            ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG queue_maximum)
{
 8112db0:	b580      	push	{r7, lr}
 8112db2:	b08a      	sub	sp, #40	@ 0x28
 8112db4:	af00      	add	r7, sp, #0
 8112db6:	60f8      	str	r0, [r7, #12]
 8112db8:	60b9      	str	r1, [r7, #8]
 8112dba:	607a      	str	r2, [r7, #4]
 8112dbc:	603b      	str	r3, [r7, #0]

NX_UDP_SOCKET *tail_ptr;


    /* Initialize the TCP control block to zero.  */
    memset((void *)socket_ptr, 0, sizeof(NX_UDP_SOCKET));
 8112dbe:	2278      	movs	r2, #120	@ 0x78
 8112dc0:	2100      	movs	r1, #0
 8112dc2:	68b8      	ldr	r0, [r7, #8]
 8112dc4:	f004 f950 	bl	8117068 <memset>

    /* Fill in the basic information in the new UDP socket structure.  */

    /* Remember the associated IP structure.  */
    socket_ptr -> nx_udp_socket_ip_ptr =  ip_ptr;
 8112dc8:	68bb      	ldr	r3, [r7, #8]
 8112dca:	68fa      	ldr	r2, [r7, #12]
 8112dcc:	60da      	str	r2, [r3, #12]

    /* Save the UDP socket's name.  */
    socket_ptr -> nx_udp_socket_name =  name;
 8112dce:	68bb      	ldr	r3, [r7, #8]
 8112dd0:	687a      	ldr	r2, [r7, #4]
 8112dd2:	605a      	str	r2, [r3, #4]

    /* Save the type of service input parameter.  */
    socket_ptr -> nx_udp_socket_type_of_service =  type_of_service;
 8112dd4:	68bb      	ldr	r3, [r7, #8]
 8112dd6:	683a      	ldr	r2, [r7, #0]
 8112dd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Save the fragment input parameter.  */
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 8112dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112ddc:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8112de0:	68bb      	ldr	r3, [r7, #8]
 8112de2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Save the time-to-live input parameter.  */
    socket_ptr -> nx_udp_socket_time_to_live =  time_to_live;
 8112de4:	68bb      	ldr	r3, [r7, #8]
 8112de6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8112de8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* By default, have UDP checksum logic enabled.  To disable checksum logic, the
       application must call the nx_udp_checksum disable function for this UDP socket.  */
    socket_ptr -> nx_udp_socket_disable_checksum =  NX_FALSE;
 8112dea:	68bb      	ldr	r3, [r7, #8]
 8112dec:	2200      	movs	r2, #0
 8112dee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Clear the socket bind in progress flag.  */
    socket_ptr -> nx_udp_socket_bind_in_progress =  NX_FALSE;
 8112df0:	68bb      	ldr	r3, [r7, #8]
 8112df2:	2200      	movs	r2, #0
 8112df4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set various list pointers to NULL.  */
    socket_ptr -> nx_udp_socket_bound_next =            NX_NULL;
 8112df6:	68bb      	ldr	r3, [r7, #8]
 8112df8:	2200      	movs	r2, #0
 8112dfa:	64da      	str	r2, [r3, #76]	@ 0x4c
    socket_ptr -> nx_udp_socket_bound_previous =        NX_NULL;
 8112dfc:	68bb      	ldr	r3, [r7, #8]
 8112dfe:	2200      	movs	r2, #0
 8112e00:	651a      	str	r2, [r3, #80]	@ 0x50
    socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 8112e02:	68bb      	ldr	r3, [r7, #8]
 8112e04:	2200      	movs	r2, #0
 8112e06:	661a      	str	r2, [r3, #96]	@ 0x60
    socket_ptr -> nx_udp_socket_bind_suspended_count =  0;
 8112e08:	68bb      	ldr	r3, [r7, #8]
 8112e0a:	2200      	movs	r2, #0
 8112e0c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize the receive queue parameters.  */
    socket_ptr -> nx_udp_socket_receive_count =         0;
 8112e0e:	68bb      	ldr	r3, [r7, #8]
 8112e10:	2200      	movs	r2, #0
 8112e12:	63da      	str	r2, [r3, #60]	@ 0x3c
    socket_ptr -> nx_udp_socket_queue_maximum =         queue_maximum;
 8112e14:	68bb      	ldr	r3, [r7, #8]
 8112e16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8112e18:	641a      	str	r2, [r3, #64]	@ 0x40
    socket_ptr -> nx_udp_socket_receive_head =          NX_NULL;
 8112e1a:	68bb      	ldr	r3, [r7, #8]
 8112e1c:	2200      	movs	r2, #0
 8112e1e:	645a      	str	r2, [r3, #68]	@ 0x44
    socket_ptr -> nx_udp_socket_receive_tail =          NX_NULL;
 8112e20:	68bb      	ldr	r3, [r7, #8]
 8112e22:	2200      	movs	r2, #0
 8112e24:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Clear the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =             NX_NULL;
 8112e26:	68bb      	ldr	r3, [r7, #8]
 8112e28:	2200      	movs	r2, #0
 8112e2a:	671a      	str	r2, [r3, #112]	@ 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_CREATE, ip_ptr, socket_ptr, type_of_service, queue_maximum, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can add socket to IP structure.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8112e2c:	68fb      	ldr	r3, [r7, #12]
 8112e2e:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8112e32:	f04f 31ff 	mov.w	r1, #4294967295
 8112e36:	4618      	mov	r0, r3
 8112e38:	f001 fea2 	bl	8114b80 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8112e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8112e40:	61fb      	str	r3, [r7, #28]
    return(posture);
 8112e42:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8112e44:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8112e46:	b672      	cpsid	i
    return(int_posture);
 8112e48:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts while we link the new UDP socket to the IP structure.  */
    TX_DISABLE
 8112e4a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Load the UDP ID field in the UDP control block.  */
    socket_ptr -> nx_udp_socket_id =  NX_UDP_ID;
 8112e4c:	68bb      	ldr	r3, [r7, #8]
 8112e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8112ecc <_nx_udp_socket_create+0x11c>)
 8112e50:	601a      	str	r2, [r3, #0]

    /* Place the new UDP control block on the list of created UDP sockets for this IP.  First,
       check for an empty list.  */
    if (ip_ptr -> nx_ip_udp_created_sockets_ptr)
 8112e52:	68fb      	ldr	r3, [r7, #12]
 8112e54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8112e58:	2b00      	cmp	r3, #0
 8112e5a:	d015      	beq.n	8112e88 <_nx_udp_socket_create+0xd8>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous;
 8112e5c:	68fb      	ldr	r3, [r7, #12]
 8112e5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8112e62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112e64:	623b      	str	r3, [r7, #32]

        /* Place the new UDP socket control block in the list.  */
        (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous =  socket_ptr;
 8112e66:	68fb      	ldr	r3, [r7, #12]
 8112e68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8112e6c:	68ba      	ldr	r2, [r7, #8]
 8112e6e:	66da      	str	r2, [r3, #108]	@ 0x6c
        tail_ptr ->  nx_udp_socket_created_next =  socket_ptr;
 8112e70:	6a3b      	ldr	r3, [r7, #32]
 8112e72:	68ba      	ldr	r2, [r7, #8]
 8112e74:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Setup this UDP socket's created links.  */
        socket_ptr -> nx_udp_socket_created_previous =  tail_ptr;
 8112e76:	68bb      	ldr	r3, [r7, #8]
 8112e78:	6a3a      	ldr	r2, [r7, #32]
 8112e7a:	66da      	str	r2, [r3, #108]	@ 0x6c
        socket_ptr -> nx_udp_socket_created_next =      ip_ptr -> nx_ip_udp_created_sockets_ptr;
 8112e7c:	68fb      	ldr	r3, [r7, #12]
 8112e7e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8112e82:	68bb      	ldr	r3, [r7, #8]
 8112e84:	669a      	str	r2, [r3, #104]	@ 0x68
 8112e86:	e009      	b.n	8112e9c <_nx_udp_socket_create+0xec>
    }
    else
    {

        /* The created UDP socket list is empty.  Add UDP socket control block to empty list.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =       socket_ptr;
 8112e88:	68fb      	ldr	r3, [r7, #12]
 8112e8a:	68ba      	ldr	r2, [r7, #8]
 8112e8c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        socket_ptr -> nx_udp_socket_created_previous =  socket_ptr;
 8112e90:	68bb      	ldr	r3, [r7, #8]
 8112e92:	68ba      	ldr	r2, [r7, #8]
 8112e94:	66da      	str	r2, [r3, #108]	@ 0x6c
        socket_ptr -> nx_udp_socket_created_next =      socket_ptr;
 8112e96:	68bb      	ldr	r3, [r7, #8]
 8112e98:	68ba      	ldr	r2, [r7, #8]
 8112e9a:	669a      	str	r2, [r3, #104]	@ 0x68
    }

    /* Increment the created UDP socket counter.  */
    ip_ptr -> nx_ip_udp_created_sockets_count++;
 8112e9c:	68fb      	ldr	r3, [r7, #12]
 8112e9e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8112ea2:	1c5a      	adds	r2, r3, #1
 8112ea4:	68fb      	ldr	r3, [r7, #12]
 8112ea6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8112eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112eac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8112eae:	697b      	ldr	r3, [r7, #20]
 8112eb0:	f383 8810 	msr	PRIMASK, r3
}
 8112eb4:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8112eb6:	68fb      	ldr	r3, [r7, #12]
 8112eb8:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8112ebc:	4618      	mov	r0, r3
 8112ebe:	f002 f8d7 	bl	8115070 <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8112ec2:	2300      	movs	r3, #0
}
 8112ec4:	4618      	mov	r0, r3
 8112ec6:	3728      	adds	r7, #40	@ 0x28
 8112ec8:	46bd      	mov	sp, r7
 8112eca:	bd80      	pop	{r7, pc}
 8112ecc:	55445020 	.word	0x55445020

08112ed0 <_nx_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 8112ed0:	b580      	push	{r7, lr}
 8112ed2:	b098      	sub	sp, #96	@ 0x60
 8112ed4:	af02      	add	r7, sp, #8
 8112ed6:	60f8      	str	r0, [r7, #12]
 8112ed8:	60b9      	str	r1, [r7, #8]
 8112eda:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 8112edc:	68bb      	ldr	r3, [r7, #8]
 8112ede:	2200      	movs	r2, #0
 8112ee0:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8112ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8112ee6:	633b      	str	r3, [r7, #48]	@ 0x30
    return(posture);
 8112ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    int_posture = __get_interrupt_posture();
 8112eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8112eec:	b672      	cpsid	i
    return(int_posture);
 8112eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /* Loop to retrieve a packet from the interface.  */
    for (;;)
    {

        /* Lockout interrupts.  */
        TX_DISABLE
 8112ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Determine if the socket is currently bound.  */
        if (!socket_ptr ->  nx_udp_socket_bound_next)
 8112ef2:	68fb      	ldr	r3, [r7, #12]
 8112ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8112ef6:	2b00      	cmp	r3, #0
 8112ef8:	d107      	bne.n	8112f0a <_nx_udp_socket_receive+0x3a>
 8112efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112efc:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8112efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112f00:	f383 8810 	msr	PRIMASK, r3
}
 8112f04:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Socket is not bound, return an error message.  */
            return(NX_NOT_BOUND);
 8112f06:	2324      	movs	r3, #36	@ 0x24
 8112f08:	e12a      	b.n	8113160 <_nx_udp_socket_receive+0x290>
        }

        /* Determine if there is a packet already queued up for this socket.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 8112f0a:	68fb      	ldr	r3, [r7, #12]
 8112f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8112f0e:	2b00      	cmp	r3, #0
 8112f10:	d01a      	beq.n	8112f48 <_nx_udp_socket_receive+0x78>
        {

            /* Yes, there is a packet waiting.  */

            /* Remove it and place it in the thread's destination.  */
            *packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 8112f12:	68fb      	ldr	r3, [r7, #12]
 8112f14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8112f16:	68bb      	ldr	r3, [r7, #8]
 8112f18:	601a      	str	r2, [r3, #0]
            socket_ptr -> nx_udp_socket_receive_head =  (*packet_ptr) -> nx_packet_queue_next;
 8112f1a:	68bb      	ldr	r3, [r7, #8]
 8112f1c:	681b      	ldr	r3, [r3, #0]
 8112f1e:	69da      	ldr	r2, [r3, #28]
 8112f20:	68fb      	ldr	r3, [r7, #12]
 8112f22:	645a      	str	r2, [r3, #68]	@ 0x44

            /* If this was the last packet, set the tail pointer to NULL.  */
            if (socket_ptr -> nx_udp_socket_receive_head == NX_NULL)
 8112f24:	68fb      	ldr	r3, [r7, #12]
 8112f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8112f28:	2b00      	cmp	r3, #0
 8112f2a:	d102      	bne.n	8112f32 <_nx_udp_socket_receive+0x62>
            {
                socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 8112f2c:	68fb      	ldr	r3, [r7, #12]
 8112f2e:	2200      	movs	r2, #0
 8112f30:	649a      	str	r2, [r3, #72]	@ 0x48
            }

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 8112f32:	68fb      	ldr	r3, [r7, #12]
 8112f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8112f36:	1e5a      	subs	r2, r3, #1
 8112f38:	68fb      	ldr	r3, [r7, #12]
 8112f3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8112f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8112f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112f42:	f383 8810 	msr	PRIMASK, r3
}
 8112f46:	e05e      	b.n	8113006 <_nx_udp_socket_receive+0x136>
        }
        else
        {

            /* Determine if the request specifies suspension.  */
            if (wait_option)
 8112f48:	687b      	ldr	r3, [r7, #4]
 8112f4a:	2b00      	cmp	r3, #0
 8112f4c:	d050      	beq.n	8112ff0 <_nx_udp_socket_receive+0x120>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup thread pointer.  */
                thread_ptr =  _tx_thread_current_ptr;
 8112f4e:	4b86      	ldr	r3, [pc, #536]	@ (8113168 <_nx_udp_socket_receive+0x298>)
 8112f50:	681b      	ldr	r3, [r3, #0]
 8112f52:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_receive_cleanup;
 8112f54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112f56:	4a85      	ldr	r2, [pc, #532]	@ (811316c <_nx_udp_socket_receive+0x29c>)
 8112f58:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 8112f5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112f5c:	68fa      	ldr	r2, [r7, #12]
 8112f5e:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return packet pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 8112f60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112f62:	68ba      	ldr	r2, [r7, #8]
 8112f64:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Setup suspension list.  */
                if (socket_ptr -> nx_udp_socket_receive_suspension_list)
 8112f66:	68fb      	ldr	r3, [r7, #12]
 8112f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8112f6a:	2b00      	cmp	r3, #0
 8112f6c:	d012      	beq.n	8112f94 <_nx_udp_socket_receive+0xc4>
                {

                    /* This list is not NULL, add current thread to the end. */
                    thread_ptr -> tx_thread_suspended_next =
                        socket_ptr -> nx_udp_socket_receive_suspension_list;
 8112f6e:	68fb      	ldr	r3, [r7, #12]
 8112f70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                    thread_ptr -> tx_thread_suspended_next =
 8112f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112f74:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =
                        (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous;
 8112f76:	68fb      	ldr	r3, [r7, #12]
 8112f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8112f7a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                    thread_ptr -> tx_thread_suspended_previous =
 8112f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112f7e:	675a      	str	r2, [r3, #116]	@ 0x74
                    ((socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8112f80:	68fb      	ldr	r3, [r7, #12]
 8112f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8112f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8112f86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8112f88:	671a      	str	r2, [r3, #112]	@ 0x70
                        thread_ptr;
                    (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8112f8a:	68fb      	ldr	r3, [r7, #12]
 8112f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8112f8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8112f90:	675a      	str	r2, [r3, #116]	@ 0x74
 8112f92:	e008      	b.n	8112fa6 <_nx_udp_socket_receive+0xd6>
                else
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    socket_ptr -> nx_udp_socket_receive_suspension_list =   thread_ptr;
 8112f94:	68fb      	ldr	r3, [r7, #12]
 8112f96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8112f98:	659a      	str	r2, [r3, #88]	@ 0x58
                    thread_ptr -> tx_thread_suspended_next              =   thread_ptr;
 8112f9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112f9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8112f9e:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous          =   thread_ptr;
 8112fa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112fa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8112fa4:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Increment the suspended thread count.  */
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 8112fa6:	68fb      	ldr	r3, [r7, #12]
 8112fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8112faa:	1c5a      	adds	r2, r3, #1
 8112fac:	68fb      	ldr	r3, [r7, #12]
 8112fae:	65da      	str	r2, [r3, #92]	@ 0x5c

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8112fb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112fb2:	220c      	movs	r2, #12
 8112fb4:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8112fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112fb8:	2201      	movs	r2, #1
 8112fba:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8112fbc:	4b6c      	ldr	r3, [pc, #432]	@ (8113170 <_nx_udp_socket_receive+0x2a0>)
 8112fbe:	681b      	ldr	r3, [r3, #0]
 8112fc0:	3301      	adds	r3, #1
 8112fc2:	4a6b      	ldr	r2, [pc, #428]	@ (8113170 <_nx_udp_socket_receive+0x2a0>)
 8112fc4:	6013      	str	r3, [r2, #0]

                /* Save the timeout value.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8112fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112fc8:	687a      	ldr	r2, [r7, #4]
 8112fca:	64da      	str	r2, [r3, #76]	@ 0x4c
 8112fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112fce:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8112fd0:	6a3b      	ldr	r3, [r7, #32]
 8112fd2:	f383 8810 	msr	PRIMASK, r3
}
 8112fd6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8112fd8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8112fda:	f002 fe39 	bl	8115c50 <_tx_thread_system_suspend>

                /* Determine if a packet was received successfully.  */
                if (thread_ptr -> tx_thread_suspend_status != NX_SUCCESS)
 8112fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8112fe4:	2b00      	cmp	r3, #0
 8112fe6:	d00e      	beq.n	8113006 <_nx_udp_socket_receive+0x136>
                {

                    /* If not, just return the error code.  */
                    return(thread_ptr -> tx_thread_suspend_status);
 8112fe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8112fee:	e0b7      	b.n	8113160 <_nx_udp_socket_receive+0x290>
 8112ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8112ff2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8112ff4:	69fb      	ldr	r3, [r7, #28]
 8112ff6:	f383 8810 	msr	PRIMASK, r3
}
 8112ffa:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Set the return pointer to NULL in case it was set but released due to checksum error.  */
                *packet_ptr =   NX_NULL;
 8112ffc:	68bb      	ldr	r3, [r7, #8]
 8112ffe:	2200      	movs	r2, #0
 8113000:	601a      	str	r2, [r3, #0]

                /* Immediate return, return error completion.  */
                return(NX_NO_PACKET);
 8113002:	2301      	movs	r3, #1
 8113004:	e0ac      	b.n	8113160 <_nx_udp_socket_receive+0x290>

            /* Determine if we need to compute the UDP checksum.  If it is disabled for this socket
               or if the UDP packet has a zero in the checksum field (indicating it was not computed
               by the sender, skip the checksum processing.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            temp_ptr =  (ULONG *)(*packet_ptr) -> nx_packet_prepend_ptr;
 8113006:	68bb      	ldr	r3, [r7, #8]
 8113008:	681b      	ldr	r3, [r3, #0]
 811300a:	689b      	ldr	r3, [r3, #8]
 811300c:	647b      	str	r3, [r7, #68]	@ 0x44
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 811300e:	68fb      	ldr	r3, [r7, #12]
 8113010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8113012:	2b00      	cmp	r3, #0
 8113014:	d105      	bne.n	8113022 <_nx_udp_socket_receive+0x152>
 8113016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8113018:	3304      	adds	r3, #4
 811301a:	681b      	ldr	r3, [r3, #0]
 811301c:	b29b      	uxth	r3, r3
 811301e:	2b00      	cmp	r3, #0
 8113020:	d106      	bne.n	8113030 <_nx_udp_socket_receive+0x160>
                ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V6))                               /* It is IPv6 packet */
 8113022:	68bb      	ldr	r3, [r7, #8]
 8113024:	681b      	ldr	r3, [r3, #0]
 8113026:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 811302a:	2b06      	cmp	r3, #6
 811302c:	f040 8089 	bne.w	8113142 <_nx_udp_socket_receive+0x272>
            {
            ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 8113030:	2300      	movs	r3, #0
 8113032:	657b      	str	r3, [r7, #84]	@ 0x54
 8113034:	2300      	movs	r3, #0
 8113036:	653b      	str	r3, [r7, #80]	@ 0x50
            ULONG          checksum;
            NX_PACKET     *current_ptr = *packet_ptr;
 8113038:	68bb      	ldr	r3, [r7, #8]
 811303a:	681b      	ldr	r3, [r3, #0]
 811303c:	643b      	str	r3, [r7, #64]	@ 0x40
#ifdef NX_LITTLE_ENDIAN
            NX_UDP_HEADER *udp_header_ptr;

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(current_ptr -> nx_packet_prepend_ptr);
 811303e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8113040:	689b      	ldr	r3, [r3, #8]
 8113042:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* NX_LITTLE_ENDIAN */

#ifndef NX_DISABLE_IPV4
                if (current_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8113044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8113046:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 811304a:	2b04      	cmp	r3, #4
 811304c:	d108      	bne.n	8113060 <_nx_udp_socket_receive+0x190>
                {
                NX_IPV4_HEADER *ipv4_header;

                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    ipv4_header = (NX_IPV4_HEADER *)(current_ptr -> nx_packet_ip_header);
 811304e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8113050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8113052:	63bb      	str	r3, [r7, #56]	@ 0x38
                    ip_src_addr = &(ipv4_header -> nx_ip_header_source_ip);
 8113054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113056:	330c      	adds	r3, #12
 8113058:	657b      	str	r3, [r7, #84]	@ 0x54
                    ip_dest_addr = &(ipv4_header -> nx_ip_header_destination_ip);
 811305a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811305c:	3310      	adds	r3, #16
 811305e:	653b      	str	r3, [r7, #80]	@ 0x50

#endif /* FEATURE_NX_IPV6 */

#ifdef NX_LITTLE_ENDIAN
                /* Restore UDP header to network byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8113060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8113062:	681b      	ldr	r3, [r3, #0]
 8113064:	ba1a      	rev	r2, r3
 8113066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8113068:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 811306a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811306c:	685b      	ldr	r3, [r3, #4]
 811306e:	ba1a      	rev	r2, r3
 8113070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8113072:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* nx_ip_checksum_compute takes care of both even number length and odd number length */
                /* Compute the checksum of the first packet */
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
                                                   (UINT)current_ptr -> nx_packet_length,
 8113074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8113076:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
 8113078:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811307a:	9300      	str	r3, [sp, #0]
 811307c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811307e:	2111      	movs	r1, #17
 8113080:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8113082:	f7f9 fc5a 	bl	810c93a <_nx_ip_checksum_compute>
 8113086:	4603      	mov	r3, r0
 8113088:	637b      	str	r3, [r7, #52]	@ 0x34
                                                   ip_src_addr,
                                                   ip_dest_addr);

#ifdef NX_LITTLE_ENDIAN
                /* Convert UDP header to host byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 811308a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811308c:	681b      	ldr	r3, [r3, #0]
 811308e:	ba1a      	rev	r2, r3
 8113090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8113092:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8113094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8113096:	685b      	ldr	r3, [r3, #4]
 8113098:	ba1a      	rev	r2, r3
 811309a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811309c:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* Perform the one's complement processing on the checksum.  */
                checksum =  NX_LOWER_16_MASK & ~checksum;
 811309e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81130a0:	43db      	mvns	r3, r3
 81130a2:	b29b      	uxth	r3, r3
 81130a4:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Determine if it is valid.  */
                if (checksum == 0)
 81130a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81130a8:	2b00      	cmp	r3, #0
 81130aa:	d049      	beq.n	8113140 <_nx_udp_socket_receive+0x270>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 81130ac:	f3ef 8310 	mrs	r3, PRIMASK
 81130b0:	617b      	str	r3, [r7, #20]
    return(posture);
 81130b2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 81130b4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 81130b6:	b672      	cpsid	i
    return(int_posture);
 81130b8:	693b      	ldr	r3, [r7, #16]
                {

#ifndef NX_DISABLE_UDP_INFO

                    /* Disable interrupts.  */
                    TX_DISABLE
 81130ba:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Increment the UDP checksum error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_checksum_errors++;
 81130bc:	68fb      	ldr	r3, [r7, #12]
 81130be:	68db      	ldr	r3, [r3, #12]
 81130c0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 81130c4:	3201      	adds	r2, #1
 81130c6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

                    /* Increment the UDP invalid packets error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 81130ca:	68fb      	ldr	r3, [r7, #12]
 81130cc:	68db      	ldr	r3, [r3, #12]
 81130ce:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 81130d2:	3201      	adds	r2, #1
 81130d4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

                    /* Increment the UDP checksum error count for this socket.  */
                    socket_ptr -> nx_udp_socket_checksum_errors++;
 81130d8:	68fb      	ldr	r3, [r7, #12]
 81130da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81130dc:	1c5a      	adds	r2, r3, #1
 81130de:	68fb      	ldr	r3, [r7, #12]
 81130e0:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Decrement the total UDP receive packets count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packets_received--;
 81130e2:	68fb      	ldr	r3, [r7, #12]
 81130e4:	68db      	ldr	r3, [r3, #12]
 81130e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 81130ea:	3a01      	subs	r2, #1
 81130ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

                    /* Decrement the total UDP receive bytes.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 81130f0:	68fb      	ldr	r3, [r7, #12]
 81130f2:	68db      	ldr	r3, [r3, #12]
 81130f4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 81130f8:	68bb      	ldr	r3, [r7, #8]
 81130fa:	681b      	ldr	r3, [r3, #0]
 81130fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81130fe:	1ad2      	subs	r2, r2, r3
 8113100:	68fb      	ldr	r3, [r7, #12]
 8113102:	68db      	ldr	r3, [r3, #12]
 8113104:	3208      	adds	r2, #8
 8113106:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

                    /* Decrement the total UDP receive packets count.  */
                    socket_ptr -> nx_udp_socket_packets_received--;
 811310a:	68fb      	ldr	r3, [r7, #12]
 811310c:	699b      	ldr	r3, [r3, #24]
 811310e:	1e5a      	subs	r2, r3, #1
 8113110:	68fb      	ldr	r3, [r7, #12]
 8113112:	619a      	str	r2, [r3, #24]

                    /* Decrement the total UDP receive bytes.  */
                    socket_ptr -> nx_udp_socket_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8113114:	68fb      	ldr	r3, [r7, #12]
 8113116:	69da      	ldr	r2, [r3, #28]
 8113118:	68bb      	ldr	r3, [r7, #8]
 811311a:	681b      	ldr	r3, [r3, #0]
 811311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811311e:	1ad3      	subs	r3, r2, r3
 8113120:	f103 0208 	add.w	r2, r3, #8
 8113124:	68fb      	ldr	r3, [r7, #12]
 8113126:	61da      	str	r2, [r3, #28]
 8113128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811312a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811312c:	69bb      	ldr	r3, [r7, #24]
 811312e:	f383 8810 	msr	PRIMASK, r3
}
 8113132:	bf00      	nop
                    /* Restore interrupts.  */
                    TX_RESTORE
#endif

                    /* Bad UDP checksum.  Release the packet. */
                    _nx_packet_release(*packet_ptr);
 8113134:	68bb      	ldr	r3, [r7, #8]
 8113136:	681b      	ldr	r3, [r3, #0]
 8113138:	4618      	mov	r0, r3
 811313a:	f7fb fd9d 	bl	810ec78 <_nx_packet_release>
        TX_DISABLE
 811313e:	e6d0      	b.n	8112ee2 <_nx_udp_socket_receive+0x12>
                    break;
 8113140:	bf00      	nop
    /* At this point, we have a valid UDP packet for the caller.  */

    /* Remove the UDP header.  */

    /* Decrease the packet length.  */
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8113142:	68bb      	ldr	r3, [r7, #8]
 8113144:	681b      	ldr	r3, [r3, #0]
 8113146:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8113148:	68bb      	ldr	r3, [r7, #8]
 811314a:	681b      	ldr	r3, [r3, #0]
 811314c:	3a08      	subs	r2, #8
 811314e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Position past the UDP header pointer.  */
    (*packet_ptr) -> nx_packet_prepend_ptr =   (*packet_ptr) -> nx_packet_prepend_ptr + sizeof(NX_UDP_HEADER);
 8113150:	68bb      	ldr	r3, [r7, #8]
 8113152:	681b      	ldr	r3, [r3, #0]
 8113154:	689a      	ldr	r2, [r3, #8]
 8113156:	68bb      	ldr	r3, [r7, #8]
 8113158:	681b      	ldr	r3, [r3, #0]
 811315a:	3208      	adds	r2, #8
 811315c:	609a      	str	r2, [r3, #8]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_SOCKET_RECEIVE, 0, 0, *packet_ptr, (*packet_ptr) -> nx_packet_length);

    /* Return a successful status to the caller.  */
    return(NX_SUCCESS);
 811315e:	2300      	movs	r3, #0
}
 8113160:	4618      	mov	r0, r3
 8113162:	3758      	adds	r7, #88	@ 0x58
 8113164:	46bd      	mov	sp, r7
 8113166:	bd80      	pop	{r7, pc}
 8113168:	20058128 	.word	0x20058128
 811316c:	08112aa1 	.word	0x08112aa1
 8113170:	200581c0 	.word	0x200581c0

08113174 <_nxe_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 8113174:	b580      	push	{r7, lr}
 8113176:	b088      	sub	sp, #32
 8113178:	af00      	add	r7, sp, #0
 811317a:	60f8      	str	r0, [r7, #12]
 811317c:	60b9      	str	r1, [r7, #8]
 811317e:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (arp_cache_memory == NX_NULL))
 8113180:	68fb      	ldr	r3, [r7, #12]
 8113182:	2b00      	cmp	r3, #0
 8113184:	d007      	beq.n	8113196 <_nxe_arp_enable+0x22>
 8113186:	68fb      	ldr	r3, [r7, #12]
 8113188:	681b      	ldr	r3, [r3, #0]
 811318a:	4a1c      	ldr	r2, [pc, #112]	@ (81131fc <_nxe_arp_enable+0x88>)
 811318c:	4293      	cmp	r3, r2
 811318e:	d102      	bne.n	8113196 <_nxe_arp_enable+0x22>
 8113190:	68bb      	ldr	r3, [r7, #8]
 8113192:	2b00      	cmp	r3, #0
 8113194:	d101      	bne.n	811319a <_nxe_arp_enable+0x26>
    {
        return(NX_PTR_ERROR);
 8113196:	2307      	movs	r3, #7
 8113198:	e02c      	b.n	81131f4 <_nxe_arp_enable+0x80>
    }

    /* Check to see if ARP is already enabled.  */
    if (ip_ptr -> nx_ip_arp_allocate)
 811319a:	68fb      	ldr	r3, [r7, #12]
 811319c:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	@ 0x6e8
 81131a0:	2b00      	cmp	r3, #0
 81131a2:	d001      	beq.n	81131a8 <_nxe_arp_enable+0x34>
    {
        return(NX_ALREADY_ENABLED);
 81131a4:	2315      	movs	r3, #21
 81131a6:	e025      	b.n	81131f4 <_nxe_arp_enable+0x80>
    }

    /* Check for invalid ARP cache size.  */
    if (arp_cache_size < sizeof(NX_ARP))
 81131a8:	687b      	ldr	r3, [r7, #4]
 81131aa:	2b33      	cmp	r3, #51	@ 0x33
 81131ac:	d801      	bhi.n	81131b2 <_nxe_arp_enable+0x3e>
    {
        return(NX_SIZE_ERROR);
 81131ae:	2309      	movs	r3, #9
 81131b0:	e020      	b.n	81131f4 <_nxe_arp_enable+0x80>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 81131b2:	f3ef 8305 	mrs	r3, IPSR
 81131b6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 81131b8:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 81131ba:	4b11      	ldr	r3, [pc, #68]	@ (8113200 <_nxe_arp_enable+0x8c>)
 81131bc:	681b      	ldr	r3, [r3, #0]
 81131be:	4313      	orrs	r3, r2
 81131c0:	2b00      	cmp	r3, #0
 81131c2:	d009      	beq.n	81131d8 <_nxe_arp_enable+0x64>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 81131c4:	f3ef 8305 	mrs	r3, IPSR
 81131c8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 81131ca:	697a      	ldr	r2, [r7, #20]
 81131cc:	4b0c      	ldr	r3, [pc, #48]	@ (8113200 <_nxe_arp_enable+0x8c>)
 81131ce:	681b      	ldr	r3, [r3, #0]
 81131d0:	4313      	orrs	r3, r2
 81131d2:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 81131d6:	d304      	bcc.n	81131e2 <_nxe_arp_enable+0x6e>
 81131d8:	4b0a      	ldr	r3, [pc, #40]	@ (8113204 <_nxe_arp_enable+0x90>)
 81131da:	681b      	ldr	r3, [r3, #0]
 81131dc:	4a0a      	ldr	r2, [pc, #40]	@ (8113208 <_nxe_arp_enable+0x94>)
 81131de:	4293      	cmp	r3, r2
 81131e0:	d101      	bne.n	81131e6 <_nxe_arp_enable+0x72>
 81131e2:	2311      	movs	r3, #17
 81131e4:	e006      	b.n	81131f4 <_nxe_arp_enable+0x80>

    /* Call actual ARP enable function.  */
    status =  _nx_arp_enable(ip_ptr, arp_cache_memory, arp_cache_size);
 81131e6:	687a      	ldr	r2, [r7, #4]
 81131e8:	68b9      	ldr	r1, [r7, #8]
 81131ea:	68f8      	ldr	r0, [r7, #12]
 81131ec:	f7f8 f9dc 	bl	810b5a8 <_nx_arp_enable>
 81131f0:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 81131f2:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 81131f4:	4618      	mov	r0, r3
 81131f6:	3720      	adds	r7, #32
 81131f8:	46bd      	mov	sp, r7
 81131fa:	bd80      	pop	{r7, pc}
 81131fc:	49502020 	.word	0x49502020
 8113200:	20050088 	.word	0x20050088
 8113204:	20058128 	.word	0x20058128
 8113208:	20058270 	.word	0x20058270

0811320c <_nxe_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_icmp_enable(NX_IP *ip_ptr)
{
 811320c:	b580      	push	{r7, lr}
 811320e:	b086      	sub	sp, #24
 8113210:	af00      	add	r7, sp, #0
 8113212:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 8113214:	687b      	ldr	r3, [r7, #4]
 8113216:	2b00      	cmp	r3, #0
 8113218:	d004      	beq.n	8113224 <_nxe_icmp_enable+0x18>
 811321a:	687b      	ldr	r3, [r7, #4]
 811321c:	681b      	ldr	r3, [r3, #0]
 811321e:	4a17      	ldr	r2, [pc, #92]	@ (811327c <_nxe_icmp_enable+0x70>)
 8113220:	4293      	cmp	r3, r2
 8113222:	d001      	beq.n	8113228 <_nxe_icmp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 8113224:	2307      	movs	r3, #7
 8113226:	e025      	b.n	8113274 <_nxe_icmp_enable+0x68>
    }

    /* Check to see if ICMP is enabled.  */
    if (ip_ptr -> nx_ip_icmp_packet_receive)
 8113228:	687b      	ldr	r3, [r7, #4]
 811322a:	f8d3 336c 	ldr.w	r3, [r3, #876]	@ 0x36c
 811322e:	2b00      	cmp	r3, #0
 8113230:	d001      	beq.n	8113236 <_nxe_icmp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 8113232:	2315      	movs	r3, #21
 8113234:	e01e      	b.n	8113274 <_nxe_icmp_enable+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8113236:	f3ef 8305 	mrs	r3, IPSR
 811323a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 811323c:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 811323e:	4b10      	ldr	r3, [pc, #64]	@ (8113280 <_nxe_icmp_enable+0x74>)
 8113240:	681b      	ldr	r3, [r3, #0]
 8113242:	4313      	orrs	r3, r2
 8113244:	2b00      	cmp	r3, #0
 8113246:	d009      	beq.n	811325c <_nxe_icmp_enable+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8113248:	f3ef 8305 	mrs	r3, IPSR
 811324c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 811324e:	68fa      	ldr	r2, [r7, #12]
 8113250:	4b0b      	ldr	r3, [pc, #44]	@ (8113280 <_nxe_icmp_enable+0x74>)
 8113252:	681b      	ldr	r3, [r3, #0]
 8113254:	4313      	orrs	r3, r2
 8113256:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 811325a:	d304      	bcc.n	8113266 <_nxe_icmp_enable+0x5a>
 811325c:	4b09      	ldr	r3, [pc, #36]	@ (8113284 <_nxe_icmp_enable+0x78>)
 811325e:	681b      	ldr	r3, [r3, #0]
 8113260:	4a09      	ldr	r2, [pc, #36]	@ (8113288 <_nxe_icmp_enable+0x7c>)
 8113262:	4293      	cmp	r3, r2
 8113264:	d101      	bne.n	811326a <_nxe_icmp_enable+0x5e>
 8113266:	2311      	movs	r3, #17
 8113268:	e004      	b.n	8113274 <_nxe_icmp_enable+0x68>

    /* Call actual ICMP enable function.  */
    status =  _nx_icmp_enable(ip_ptr);
 811326a:	6878      	ldr	r0, [r7, #4]
 811326c:	f7f8 ffa0 	bl	810c1b0 <_nx_icmp_enable>
 8113270:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8113272:	697b      	ldr	r3, [r7, #20]
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8113274:	4618      	mov	r0, r3
 8113276:	3718      	adds	r7, #24
 8113278:	46bd      	mov	sp, r7
 811327a:	bd80      	pop	{r7, pc}
 811327c:	49502020 	.word	0x49502020
 8113280:	20050088 	.word	0x20050088
 8113284:	20058128 	.word	0x20058128
 8113288:	20058270 	.word	0x20058270

0811328c <_nxe_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 811328c:	b580      	push	{r7, lr}
 811328e:	b088      	sub	sp, #32
 8113290:	af00      	add	r7, sp, #0
 8113292:	60f8      	str	r0, [r7, #12]
 8113294:	60b9      	str	r1, [r7, #8]
 8113296:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (ip_address == NX_NULL) || (network_mask == NX_NULL))
 8113298:	68fb      	ldr	r3, [r7, #12]
 811329a:	2b00      	cmp	r3, #0
 811329c:	d00a      	beq.n	81132b4 <_nxe_ip_address_get+0x28>
 811329e:	68fb      	ldr	r3, [r7, #12]
 81132a0:	681b      	ldr	r3, [r3, #0]
 81132a2:	4a18      	ldr	r2, [pc, #96]	@ (8113304 <_nxe_ip_address_get+0x78>)
 81132a4:	4293      	cmp	r3, r2
 81132a6:	d105      	bne.n	81132b4 <_nxe_ip_address_get+0x28>
 81132a8:	68bb      	ldr	r3, [r7, #8]
 81132aa:	2b00      	cmp	r3, #0
 81132ac:	d002      	beq.n	81132b4 <_nxe_ip_address_get+0x28>
 81132ae:	687b      	ldr	r3, [r7, #4]
 81132b0:	2b00      	cmp	r3, #0
 81132b2:	d101      	bne.n	81132b8 <_nxe_ip_address_get+0x2c>
    {
        return(NX_PTR_ERROR);
 81132b4:	2307      	movs	r3, #7
 81132b6:	e020      	b.n	81132fa <_nxe_ip_address_get+0x6e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 81132b8:	f3ef 8305 	mrs	r3, IPSR
 81132bc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 81132be:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 81132c0:	4b11      	ldr	r3, [pc, #68]	@ (8113308 <_nxe_ip_address_get+0x7c>)
 81132c2:	681b      	ldr	r3, [r3, #0]
 81132c4:	4313      	orrs	r3, r2
 81132c6:	2b00      	cmp	r3, #0
 81132c8:	d009      	beq.n	81132de <_nxe_ip_address_get+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 81132ca:	f3ef 8305 	mrs	r3, IPSR
 81132ce:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 81132d0:	697a      	ldr	r2, [r7, #20]
 81132d2:	4b0d      	ldr	r3, [pc, #52]	@ (8113308 <_nxe_ip_address_get+0x7c>)
 81132d4:	681b      	ldr	r3, [r3, #0]
 81132d6:	4313      	orrs	r3, r2
 81132d8:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 81132dc:	d304      	bcc.n	81132e8 <_nxe_ip_address_get+0x5c>
 81132de:	4b0b      	ldr	r3, [pc, #44]	@ (811330c <_nxe_ip_address_get+0x80>)
 81132e0:	681b      	ldr	r3, [r3, #0]
 81132e2:	4a0b      	ldr	r2, [pc, #44]	@ (8113310 <_nxe_ip_address_get+0x84>)
 81132e4:	4293      	cmp	r3, r2
 81132e6:	d101      	bne.n	81132ec <_nxe_ip_address_get+0x60>
 81132e8:	2311      	movs	r3, #17
 81132ea:	e006      	b.n	81132fa <_nxe_ip_address_get+0x6e>

    /* Call actual IP address get function.  */
    status =  _nx_ip_address_get(ip_ptr, ip_address, network_mask);
 81132ec:	687a      	ldr	r2, [r7, #4]
 81132ee:	68b9      	ldr	r1, [r7, #8]
 81132f0:	68f8      	ldr	r0, [r7, #12]
 81132f2:	f7f9 faf1 	bl	810c8d8 <_nx_ip_address_get>
 81132f6:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 81132f8:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 81132fa:	4618      	mov	r0, r3
 81132fc:	3720      	adds	r7, #32
 81132fe:	46bd      	mov	sp, r7
 8113300:	bd80      	pop	{r7, pc}
 8113302:	bf00      	nop
 8113304:	49502020 	.word	0x49502020
 8113308:	20050088 	.word	0x20050088
 811330c:	20058128 	.word	0x20058128
 8113310:	20058270 	.word	0x20058270

08113314 <_nxe_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                     NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                     VOID *memory_ptr, ULONG memory_size, UINT priority, UINT ip_control_block_size)
{
 8113314:	b580      	push	{r7, lr}
 8113316:	b092      	sub	sp, #72	@ 0x48
 8113318:	af06      	add	r7, sp, #24
 811331a:	60f8      	str	r0, [r7, #12]
 811331c:	60b9      	str	r1, [r7, #8]
 811331e:	607a      	str	r2, [r7, #4]
 8113320:	603b      	str	r3, [r7, #0]

UINT       status;
UINT       old_threshold = 0;
 8113322:	2300      	movs	r3, #0
 8113324:	613b      	str	r3, [r7, #16]
UCHAR     *end_stack;
TX_THREAD *current_thread;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 8113326:	68fb      	ldr	r3, [r7, #12]
 8113328:	2b00      	cmp	r3, #0
 811332a:	d012      	beq.n	8113352 <_nxe_ip_create+0x3e>
 811332c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811332e:	2b00      	cmp	r3, #0
 8113330:	d00f      	beq.n	8113352 <_nxe_ip_create+0x3e>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 8113332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113334:	681b      	ldr	r3, [r3, #0]
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 8113336:	4a59      	ldr	r2, [pc, #356]	@ (811349c <_nxe_ip_create+0x188>)
 8113338:	4293      	cmp	r3, r2
 811333a:	d10a      	bne.n	8113352 <_nxe_ip_create+0x3e>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 811333c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811333e:	2b00      	cmp	r3, #0
 8113340:	d007      	beq.n	8113352 <_nxe_ip_create+0x3e>
 8113342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8113344:	2b00      	cmp	r3, #0
 8113346:	d004      	beq.n	8113352 <_nxe_ip_create+0x3e>
        (memory_ptr == NX_NULL) || (ip_control_block_size != (UINT)sizeof(NX_IP)))
 8113348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811334a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 811334e:	4293      	cmp	r3, r2
 8113350:	d001      	beq.n	8113356 <_nxe_ip_create+0x42>
    {
        return(NX_PTR_ERROR);
 8113352:	2307      	movs	r3, #7
 8113354:	e09d      	b.n	8113492 <_nxe_ip_create+0x17e>
    }

    /* Check for a memory size error.  */
    if (memory_size < TX_MINIMUM_STACK)
 8113356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8113358:	2bc7      	cmp	r3, #199	@ 0xc7
 811335a:	d801      	bhi.n	8113360 <_nxe_ip_create+0x4c>
    {
        return(NX_SIZE_ERROR);
 811335c:	2309      	movs	r3, #9
 811335e:	e098      	b.n	8113492 <_nxe_ip_create+0x17e>
    }

    /* Check the priority specified.  */
    if (priority >= TX_MAX_PRIORITIES)
 8113360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113362:	2b1f      	cmp	r3, #31
 8113364:	d901      	bls.n	811336a <_nxe_ip_create+0x56>
    {
        return(NX_OPTION_ERROR);
 8113366:	230a      	movs	r3, #10
 8113368:	e093      	b.n	8113492 <_nxe_ip_create+0x17e>
    }

    /* Calculate the end of the stack area.  */
    end_stack =  ((UCHAR *)memory_ptr) + (memory_size - 1);
 811336a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811336c:	3b01      	subs	r3, #1
 811336e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8113370:	4413      	add	r3, r2
 8113372:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 8113374:	f002 f998 	bl	81156a8 <_tx_thread_identify>
 8113378:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    if (current_thread)
 811337a:	6a3b      	ldr	r3, [r7, #32]
 811337c:	2b00      	cmp	r3, #0
 811337e:	d006      	beq.n	811338e <_nxe_ip_create+0x7a>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8113380:	f107 0310 	add.w	r3, r7, #16
 8113384:	461a      	mov	r2, r3
 8113386:	2100      	movs	r1, #0
 8113388:	6a38      	ldr	r0, [r7, #32]
 811338a:	f002 f9e7 	bl	811575c <_tx_thread_preemption_change>
    }

    /* Loop to check for the IP instance already created.  */
    created_ip =     _nx_ip_created_ptr;
 811338e:	4b44      	ldr	r3, [pc, #272]	@ (81134a0 <_nxe_ip_create+0x18c>)
 8113390:	681b      	ldr	r3, [r3, #0]
 8113392:	62fb      	str	r3, [r7, #44]	@ 0x2c
    created_count =  _nx_ip_created_count;
 8113394:	4b43      	ldr	r3, [pc, #268]	@ (81134a4 <_nxe_ip_create+0x190>)
 8113396:	681b      	ldr	r3, [r3, #0]
 8113398:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (created_count--)
 811339a:	e02b      	b.n	81133f4 <_nxe_ip_create+0xe0>
    {

        /* Is the new ip already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ip_ptr == created_ip) ||
 811339c:	68fa      	ldr	r2, [r7, #12]
 811339e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81133a0:	429a      	cmp	r2, r3
 81133a2:	d017      	beq.n	81133d4 <_nxe_ip_create+0xc0>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 81133a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81133a6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
        if ((ip_ptr == created_ip) ||
 81133aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81133ac:	429a      	cmp	r2, r3
 81133ae:	d305      	bcc.n	81133bc <_nxe_ip_create+0xa8>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 81133b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81133b2:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 81133b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81133b8:	429a      	cmp	r2, r3
 81133ba:	d30b      	bcc.n	81133d4 <_nxe_ip_create+0xc0>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 81133bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81133be:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 81133c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81133c4:	429a      	cmp	r2, r3
 81133c6:	d311      	bcc.n	81133ec <_nxe_ip_create+0xd8>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 81133c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81133ca:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 81133ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81133d0:	429a      	cmp	r2, r3
 81133d2:	d20b      	bcs.n	81133ec <_nxe_ip_create+0xd8>
        {

            /* Restore preemption.  */
            if (current_thread)
 81133d4:	6a3b      	ldr	r3, [r7, #32]
 81133d6:	2b00      	cmp	r3, #0
 81133d8:	d006      	beq.n	81133e8 <_nxe_ip_create+0xd4>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 81133da:	693b      	ldr	r3, [r7, #16]
 81133dc:	f107 0210 	add.w	r2, r7, #16
 81133e0:	4619      	mov	r1, r3
 81133e2:	6a38      	ldr	r0, [r7, #32]
 81133e4:	f002 f9ba 	bl	811575c <_tx_thread_preemption_change>
            }

            /* Duplicate ip created, return an error!  */
            return(NX_PTR_ERROR);
 81133e8:	2307      	movs	r3, #7
 81133ea:	e052      	b.n	8113492 <_nxe_ip_create+0x17e>
        }

        /* Move to next entry.  */
        created_ip =  created_ip -> nx_ip_created_next;
 81133ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81133ee:	f8d3 3714 	ldr.w	r3, [r3, #1812]	@ 0x714
 81133f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (created_count--)
 81133f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81133f6:	1e5a      	subs	r2, r3, #1
 81133f8:	62ba      	str	r2, [r7, #40]	@ 0x28
 81133fa:	2b00      	cmp	r3, #0
 81133fc:	d1ce      	bne.n	811339c <_nxe_ip_create+0x88>
    }

    /* Restore preemption.  */
    if (current_thread)
 81133fe:	6a3b      	ldr	r3, [r7, #32]
 8113400:	2b00      	cmp	r3, #0
 8113402:	d006      	beq.n	8113412 <_nxe_ip_create+0xfe>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8113404:	693b      	ldr	r3, [r7, #16]
 8113406:	f107 0210 	add.w	r2, r7, #16
 811340a:	4619      	mov	r1, r3
 811340c:	6a38      	ldr	r0, [r7, #32]
 811340e:	f002 f9a5 	bl	811575c <_tx_thread_preemption_change>
    }

    /* Check for invalid IP address.  Note that Interface with DHCP enabled
       would start with 0.0.0.0.  Therefore the 0 IP address is allowed. */
    if ((ip_address != 0) &&
 8113412:	687b      	ldr	r3, [r7, #4]
 8113414:	2b00      	cmp	r3, #0
 8113416:	d010      	beq.n	811343a <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 8113418:	687b      	ldr	r3, [r7, #4]
    if ((ip_address != 0) &&
 811341a:	2b00      	cmp	r3, #0
 811341c:	da0d      	bge.n	811343a <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 811341e:	687b      	ldr	r3, [r7, #4]
 8113420:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 8113424:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8113428:	d007      	beq.n	811343a <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_C_MASK) != NX_IP_CLASS_C_TYPE))
 811342a:	687b      	ldr	r3, [r7, #4]
 811342c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 8113430:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8113434:	d001      	beq.n	811343a <_nxe_ip_create+0x126>
    {
        return(NX_IP_ADDRESS_ERROR);
 8113436:	2321      	movs	r3, #33	@ 0x21
 8113438:	e02b      	b.n	8113492 <_nxe_ip_create+0x17e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 811343a:	f3ef 8305 	mrs	r3, IPSR
 811343e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8113440:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 8113442:	4b19      	ldr	r3, [pc, #100]	@ (81134a8 <_nxe_ip_create+0x194>)
 8113444:	681b      	ldr	r3, [r3, #0]
 8113446:	4313      	orrs	r3, r2
 8113448:	2b00      	cmp	r3, #0
 811344a:	d009      	beq.n	8113460 <_nxe_ip_create+0x14c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 811344c:	f3ef 8305 	mrs	r3, IPSR
 8113450:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8113452:	697a      	ldr	r2, [r7, #20]
 8113454:	4b14      	ldr	r3, [pc, #80]	@ (81134a8 <_nxe_ip_create+0x194>)
 8113456:	681b      	ldr	r3, [r3, #0]
 8113458:	4313      	orrs	r3, r2
 811345a:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 811345e:	d304      	bcc.n	811346a <_nxe_ip_create+0x156>
 8113460:	4b12      	ldr	r3, [pc, #72]	@ (81134ac <_nxe_ip_create+0x198>)
 8113462:	681b      	ldr	r3, [r3, #0]
 8113464:	4a12      	ldr	r2, [pc, #72]	@ (81134b0 <_nxe_ip_create+0x19c>)
 8113466:	4293      	cmp	r3, r2
 8113468:	d101      	bne.n	811346e <_nxe_ip_create+0x15a>
 811346a:	2311      	movs	r3, #17
 811346c:	e011      	b.n	8113492 <_nxe_ip_create+0x17e>

    /* Call actual IP instance create function.  */
    status =  _nx_ip_create(ip_ptr, name, ip_address, network_mask, default_pool, ip_link_driver,
 811346e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113470:	9304      	str	r3, [sp, #16]
 8113472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8113474:	9303      	str	r3, [sp, #12]
 8113476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8113478:	9302      	str	r3, [sp, #8]
 811347a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811347c:	9301      	str	r3, [sp, #4]
 811347e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113480:	9300      	str	r3, [sp, #0]
 8113482:	683b      	ldr	r3, [r7, #0]
 8113484:	687a      	ldr	r2, [r7, #4]
 8113486:	68b9      	ldr	r1, [r7, #8]
 8113488:	68f8      	ldr	r0, [r7, #12]
 811348a:	f7f9 fb45 	bl	810cb18 <_nx_ip_create>
 811348e:	61f8      	str	r0, [r7, #28]
                            memory_ptr, memory_size, priority);

    /* Return completion status.  */
    return(status);
 8113490:	69fb      	ldr	r3, [r7, #28]
}
 8113492:	4618      	mov	r0, r3
 8113494:	3730      	adds	r7, #48	@ 0x30
 8113496:	46bd      	mov	sp, r7
 8113498:	bd80      	pop	{r7, pc}
 811349a:	bf00      	nop
 811349c:	5041434b 	.word	0x5041434b
 81134a0:	200580bc 	.word	0x200580bc
 81134a4:	200580c0 	.word	0x200580c0
 81134a8:	20050088 	.word	0x20050088
 81134ac:	20058128 	.word	0x20058128
 81134b0:	20058270 	.word	0x20058270

081134b4 <_nxe_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                           ULONG packet_type, ULONG wait_option)
{
 81134b4:	b580      	push	{r7, lr}
 81134b6:	b086      	sub	sp, #24
 81134b8:	af00      	add	r7, sp, #0
 81134ba:	60f8      	str	r0, [r7, #12]
 81134bc:	60b9      	str	r1, [r7, #8]
 81134be:	607a      	str	r2, [r7, #4]
 81134c0:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (packet_ptr == NX_NULL))
 81134c2:	68fb      	ldr	r3, [r7, #12]
 81134c4:	2b00      	cmp	r3, #0
 81134c6:	d007      	beq.n	81134d8 <_nxe_packet_allocate+0x24>
 81134c8:	68fb      	ldr	r3, [r7, #12]
 81134ca:	681b      	ldr	r3, [r3, #0]
 81134cc:	4a18      	ldr	r2, [pc, #96]	@ (8113530 <_nxe_packet_allocate+0x7c>)
 81134ce:	4293      	cmp	r3, r2
 81134d0:	d102      	bne.n	81134d8 <_nxe_packet_allocate+0x24>
 81134d2:	68bb      	ldr	r3, [r7, #8]
 81134d4:	2b00      	cmp	r3, #0
 81134d6:	d101      	bne.n	81134dc <_nxe_packet_allocate+0x28>
    {
        return(NX_PTR_ERROR);
 81134d8:	2307      	movs	r3, #7
 81134da:	e025      	b.n	8113528 <_nxe_packet_allocate+0x74>
    }

    /* Check for an invalid packet type - for alignment purposes, it must be evenly divisible by the size
       of a ULONG.  */
    if (packet_type % sizeof(ULONG))
 81134dc:	687b      	ldr	r3, [r7, #4]
 81134de:	f003 0303 	and.w	r3, r3, #3
 81134e2:	2b00      	cmp	r3, #0
 81134e4:	d001      	beq.n	81134ea <_nxe_packet_allocate+0x36>
    {
        return(NX_OPTION_ERROR);
 81134e6:	230a      	movs	r3, #10
 81134e8:	e01e      	b.n	8113528 <_nxe_packet_allocate+0x74>
    }

    /* Check for a thread caller if the wait option specifies suspension.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 81134ea:	683b      	ldr	r3, [r7, #0]
 81134ec:	2b00      	cmp	r3, #0
 81134ee:	d013      	beq.n	8113518 <_nxe_packet_allocate+0x64>
 81134f0:	4b10      	ldr	r3, [pc, #64]	@ (8113534 <_nxe_packet_allocate+0x80>)
 81134f2:	681b      	ldr	r3, [r3, #0]
 81134f4:	2b00      	cmp	r3, #0
 81134f6:	d00d      	beq.n	8113514 <_nxe_packet_allocate+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 81134f8:	f3ef 8305 	mrs	r3, IPSR
 81134fc:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 81134fe:	693a      	ldr	r2, [r7, #16]
 8113500:	4b0d      	ldr	r3, [pc, #52]	@ (8113538 <_nxe_packet_allocate+0x84>)
 8113502:	681b      	ldr	r3, [r3, #0]
 8113504:	4313      	orrs	r3, r2
 8113506:	2b00      	cmp	r3, #0
 8113508:	d104      	bne.n	8113514 <_nxe_packet_allocate+0x60>
 811350a:	4b0a      	ldr	r3, [pc, #40]	@ (8113534 <_nxe_packet_allocate+0x80>)
 811350c:	681b      	ldr	r3, [r3, #0]
 811350e:	4a0b      	ldr	r2, [pc, #44]	@ (811353c <_nxe_packet_allocate+0x88>)
 8113510:	4293      	cmp	r3, r2
 8113512:	d101      	bne.n	8113518 <_nxe_packet_allocate+0x64>
 8113514:	2311      	movs	r3, #17
 8113516:	e007      	b.n	8113528 <_nxe_packet_allocate+0x74>

    /* Call actual packet allocate function.  */
    status =  _nx_packet_allocate(pool_ptr,  packet_ptr, packet_type, wait_option);
 8113518:	683b      	ldr	r3, [r7, #0]
 811351a:	687a      	ldr	r2, [r7, #4]
 811351c:	68b9      	ldr	r1, [r7, #8]
 811351e:	68f8      	ldr	r0, [r7, #12]
 8113520:	f7fb f814 	bl	810e54c <_nx_packet_allocate>
 8113524:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8113526:	697b      	ldr	r3, [r7, #20]
}
 8113528:	4618      	mov	r0, r3
 811352a:	3718      	adds	r7, #24
 811352c:	46bd      	mov	sp, r7
 811352e:	bd80      	pop	{r7, pc}
 8113530:	5041434b 	.word	0x5041434b
 8113534:	20058128 	.word	0x20058128
 8113538:	20050088 	.word	0x20050088
 811353c:	20058270 	.word	0x20058270

08113540 <_nxe_packet_data_retrieve>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_data_retrieve(NX_PACKET *packet_ptr, VOID *buffer_start, ULONG *bytes_copied)
{
 8113540:	b580      	push	{r7, lr}
 8113542:	b086      	sub	sp, #24
 8113544:	af00      	add	r7, sp, #0
 8113546:	60f8      	str	r0, [r7, #12]
 8113548:	60b9      	str	r1, [r7, #8]
 811354a:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((packet_ptr == NX_NULL) || (buffer_start == NX_NULL) || (bytes_copied == NX_NULL))
 811354c:	68fb      	ldr	r3, [r7, #12]
 811354e:	2b00      	cmp	r3, #0
 8113550:	d005      	beq.n	811355e <_nxe_packet_data_retrieve+0x1e>
 8113552:	68bb      	ldr	r3, [r7, #8]
 8113554:	2b00      	cmp	r3, #0
 8113556:	d002      	beq.n	811355e <_nxe_packet_data_retrieve+0x1e>
 8113558:	687b      	ldr	r3, [r7, #4]
 811355a:	2b00      	cmp	r3, #0
 811355c:	d101      	bne.n	8113562 <_nxe_packet_data_retrieve+0x22>
    {
        return(NX_PTR_ERROR);
 811355e:	2307      	movs	r3, #7
 8113560:	e006      	b.n	8113570 <_nxe_packet_data_retrieve+0x30>
    }

    /* Call actual packet data retrieve function.  */
    status =  _nx_packet_data_retrieve(packet_ptr, buffer_start, bytes_copied);
 8113562:	687a      	ldr	r2, [r7, #4]
 8113564:	68b9      	ldr	r1, [r7, #8]
 8113566:	68f8      	ldr	r0, [r7, #12]
 8113568:	f7fb fa05 	bl	810e976 <_nx_packet_data_retrieve>
 811356c:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 811356e:	697b      	ldr	r3, [r7, #20]
}
 8113570:	4618      	mov	r0, r3
 8113572:	3718      	adds	r7, #24
 8113574:	46bd      	mov	sp, r7
 8113576:	bd80      	pop	{r7, pc}

08113578 <_nxe_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                              VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8113578:	b580      	push	{r7, lr}
 811357a:	b094      	sub	sp, #80	@ 0x50
 811357c:	af02      	add	r7, sp, #8
 811357e:	60f8      	str	r0, [r7, #12]
 8113580:	60b9      	str	r1, [r7, #8]
 8113582:	607a      	str	r2, [r7, #4]
 8113584:	603b      	str	r3, [r7, #0]

UINT            status;
ULONG           rounded_payload_size;
ULONG           rounded_pool_size;
ULONG           header_size;
UINT            old_threshold = 0;
 8113586:	2300      	movs	r3, #0
 8113588:	613b      	str	r3, [r7, #16]
VOID           *rounded_pool_start;
TX_THREAD      *current_thread;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_start == NX_NULL) || (pool_control_block_size != (UINT)sizeof(NX_PACKET_POOL)))
 811358a:	68fb      	ldr	r3, [r7, #12]
 811358c:	2b00      	cmp	r3, #0
 811358e:	d005      	beq.n	811359c <_nxe_packet_pool_create+0x24>
 8113590:	683b      	ldr	r3, [r7, #0]
 8113592:	2b00      	cmp	r3, #0
 8113594:	d002      	beq.n	811359c <_nxe_packet_pool_create+0x24>
 8113596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8113598:	2b3c      	cmp	r3, #60	@ 0x3c
 811359a:	d001      	beq.n	81135a0 <_nxe_packet_pool_create+0x28>
    {
        return(NX_PTR_ERROR);
 811359c:	2307      	movs	r3, #7
 811359e:	e0a7      	b.n	81136f0 <_nxe_packet_pool_create+0x178>
    }

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 81135a0:	683b      	ldr	r3, [r7, #0]
 81135a2:	3303      	adds	r3, #3
 81135a4:	f023 0303 	bic.w	r3, r3, #3
 81135a8:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 81135aa:	683a      	ldr	r2, [r7, #0]
 81135ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81135ae:	1ad2      	subs	r2, r2, r3
 81135b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81135b2:	4413      	add	r3, r2
 81135b4:	f023 0303 	bic.w	r3, r3, #3
 81135b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 81135ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81135bc:	3338      	adds	r3, #56	@ 0x38
 81135be:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 81135c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81135c2:	3303      	adds	r3, #3
 81135c4:	f023 0303 	bic.w	r3, r3, #3
 81135c8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 81135ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81135cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81135ce:	1ad3      	subs	r3, r2, r3
 81135d0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    rounded_payload_size =  (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 81135d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81135d4:	687b      	ldr	r3, [r7, #4]
 81135d6:	4413      	add	r3, r2
 81135d8:	3303      	adds	r3, #3
 81135da:	f023 0203 	bic.w	r2, r3, #3
 81135de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81135e0:	1ad3      	subs	r3, r2, r3
 81135e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Check for an invalid pool and payload size.  */
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 81135e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81135e6:	2b04      	cmp	r3, #4
 81135e8:	d908      	bls.n	81135fc <_nxe_packet_pool_create+0x84>
 81135ea:	687b      	ldr	r3, [r7, #4]
 81135ec:	2b00      	cmp	r3, #0
 81135ee:	d005      	beq.n	81135fc <_nxe_packet_pool_create+0x84>
        ((rounded_payload_size + header_size) > rounded_pool_size))
 81135f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81135f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81135f4:	4413      	add	r3, r2
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 81135f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81135f8:	429a      	cmp	r2, r3
 81135fa:	d201      	bcs.n	8113600 <_nxe_packet_pool_create+0x88>
    {
        return(NX_SIZE_ERROR);
 81135fc:	2309      	movs	r3, #9
 81135fe:	e077      	b.n	81136f0 <_nxe_packet_pool_create+0x178>
    }

    /* Calculate the end of the pool memory area.  */
    end_memory =  ((CHAR *)pool_start) + (pool_size - 1);
 8113600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8113602:	3b01      	subs	r3, #1
 8113604:	683a      	ldr	r2, [r7, #0]
 8113606:	4413      	add	r3, r2
 8113608:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 811360a:	f002 f84d 	bl	81156a8 <_tx_thread_identify>
 811360e:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Disable preemption temporarily.  */
    if (current_thread)
 8113610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113612:	2b00      	cmp	r3, #0
 8113614:	d006      	beq.n	8113624 <_nxe_packet_pool_create+0xac>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8113616:	f107 0310 	add.w	r3, r7, #16
 811361a:	461a      	mov	r2, r3
 811361c:	2100      	movs	r1, #0
 811361e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8113620:	f002 f89c 	bl	811575c <_tx_thread_preemption_change>
    }

    /* Loop to check for the pool instance already created.  */
    created_pool =   _nx_packet_pool_created_ptr;
 8113624:	4b34      	ldr	r3, [pc, #208]	@ (81136f8 <_nxe_packet_pool_create+0x180>)
 8113626:	681b      	ldr	r3, [r3, #0]
 8113628:	647b      	str	r3, [r7, #68]	@ 0x44
    created_count =  _nx_packet_pool_created_count;
 811362a:	4b34      	ldr	r3, [pc, #208]	@ (81136fc <_nxe_packet_pool_create+0x184>)
 811362c:	681b      	ldr	r3, [r3, #0]
 811362e:	643b      	str	r3, [r7, #64]	@ 0x40
    while (created_count--)
 8113630:	e02b      	b.n	811368a <_nxe_packet_pool_create+0x112>
    {

        /* Calculate the created pool's end of memory.  */
        created_end =  created_pool -> nx_packet_pool_start + (created_pool -> nx_packet_pool_size - 1);
 8113632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8113634:	6a1a      	ldr	r2, [r3, #32]
 8113636:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8113638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811363a:	3b01      	subs	r3, #1
 811363c:	4413      	add	r3, r2
 811363e:	61fb      	str	r3, [r7, #28]

        /* Is the new pool already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((pool_ptr == created_pool) ||
 8113640:	68fa      	ldr	r2, [r7, #12]
 8113642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8113644:	429a      	cmp	r2, r3
 8113646:	d011      	beq.n	811366c <_nxe_packet_pool_create+0xf4>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 8113648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811364a:	6a1b      	ldr	r3, [r3, #32]
        if ((pool_ptr == created_pool) ||
 811364c:	683a      	ldr	r2, [r7, #0]
 811364e:	429a      	cmp	r2, r3
 8113650:	d303      	bcc.n	811365a <_nxe_packet_pool_create+0xe2>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 8113652:	683a      	ldr	r2, [r7, #0]
 8113654:	69fb      	ldr	r3, [r7, #28]
 8113656:	429a      	cmp	r2, r3
 8113658:	d308      	bcc.n	811366c <_nxe_packet_pool_create+0xf4>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 811365a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811365c:	6a1b      	ldr	r3, [r3, #32]
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 811365e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8113660:	429a      	cmp	r2, r3
 8113662:	d30f      	bcc.n	8113684 <_nxe_packet_pool_create+0x10c>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 8113664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8113666:	69fb      	ldr	r3, [r7, #28]
 8113668:	429a      	cmp	r2, r3
 811366a:	d20b      	bcs.n	8113684 <_nxe_packet_pool_create+0x10c>
        {

            /* Restore preemption.  */
            if (current_thread)
 811366c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811366e:	2b00      	cmp	r3, #0
 8113670:	d006      	beq.n	8113680 <_nxe_packet_pool_create+0x108>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8113672:	693b      	ldr	r3, [r7, #16]
 8113674:	f107 0210 	add.w	r2, r7, #16
 8113678:	4619      	mov	r1, r3
 811367a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811367c:	f002 f86e 	bl	811575c <_tx_thread_preemption_change>
            }

            /* Duplicate packet pool created, return an error!  */
            return(NX_PTR_ERROR);
 8113680:	2307      	movs	r3, #7
 8113682:	e035      	b.n	81136f0 <_nxe_packet_pool_create+0x178>
        }

        /* Move to next entry.  */
        created_pool =  created_pool -> nx_packet_pool_created_next;
 8113684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8113686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8113688:	647b      	str	r3, [r7, #68]	@ 0x44
    while (created_count--)
 811368a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811368c:	1e5a      	subs	r2, r3, #1
 811368e:	643a      	str	r2, [r7, #64]	@ 0x40
 8113690:	2b00      	cmp	r3, #0
 8113692:	d1ce      	bne.n	8113632 <_nxe_packet_pool_create+0xba>
    }

    /* Restore preemption.  */
    if (current_thread)
 8113694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113696:	2b00      	cmp	r3, #0
 8113698:	d006      	beq.n	81136a8 <_nxe_packet_pool_create+0x130>
    {
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 811369a:	693b      	ldr	r3, [r7, #16]
 811369c:	f107 0210 	add.w	r2, r7, #16
 81136a0:	4619      	mov	r1, r3
 81136a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81136a4:	f002 f85a 	bl	811575c <_tx_thread_preemption_change>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 81136a8:	f3ef 8305 	mrs	r3, IPSR
 81136ac:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 81136ae:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 81136b0:	4b13      	ldr	r3, [pc, #76]	@ (8113700 <_nxe_packet_pool_create+0x188>)
 81136b2:	681b      	ldr	r3, [r3, #0]
 81136b4:	4313      	orrs	r3, r2
 81136b6:	2b00      	cmp	r3, #0
 81136b8:	d009      	beq.n	81136ce <_nxe_packet_pool_create+0x156>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 81136ba:	f3ef 8305 	mrs	r3, IPSR
 81136be:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 81136c0:	697a      	ldr	r2, [r7, #20]
 81136c2:	4b0f      	ldr	r3, [pc, #60]	@ (8113700 <_nxe_packet_pool_create+0x188>)
 81136c4:	681b      	ldr	r3, [r3, #0]
 81136c6:	4313      	orrs	r3, r2
 81136c8:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 81136cc:	d304      	bcc.n	81136d8 <_nxe_packet_pool_create+0x160>
 81136ce:	4b0d      	ldr	r3, [pc, #52]	@ (8113704 <_nxe_packet_pool_create+0x18c>)
 81136d0:	681b      	ldr	r3, [r3, #0]
 81136d2:	4a0d      	ldr	r2, [pc, #52]	@ (8113708 <_nxe_packet_pool_create+0x190>)
 81136d4:	4293      	cmp	r3, r2
 81136d6:	d101      	bne.n	81136dc <_nxe_packet_pool_create+0x164>
 81136d8:	2311      	movs	r3, #17
 81136da:	e009      	b.n	81136f0 <_nxe_packet_pool_create+0x178>

    /* Call actual packet pool create function.  */
    status =  _nx_packet_pool_create(pool_ptr, name_ptr, payload_size, pool_start, pool_size);
 81136dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81136de:	9300      	str	r3, [sp, #0]
 81136e0:	683b      	ldr	r3, [r7, #0]
 81136e2:	687a      	ldr	r2, [r7, #4]
 81136e4:	68b9      	ldr	r1, [r7, #8]
 81136e6:	68f8      	ldr	r0, [r7, #12]
 81136e8:	f7fb f9e4 	bl	810eab4 <_nx_packet_pool_create>
 81136ec:	6238      	str	r0, [r7, #32]

    /* Return completion status.  */
    return(status);
 81136ee:	6a3b      	ldr	r3, [r7, #32]
}
 81136f0:	4618      	mov	r0, r3
 81136f2:	3748      	adds	r7, #72	@ 0x48
 81136f4:	46bd      	mov	sp, r7
 81136f6:	bd80      	pop	{r7, pc}
 81136f8:	200580c4 	.word	0x200580c4
 81136fc:	200580c8 	.word	0x200580c8
 8113700:	20050088 	.word	0x20050088
 8113704:	20058128 	.word	0x20058128
 8113708:	20058270 	.word	0x20058270

0811370c <_nxe_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_release(NX_PACKET **packet_ptr_ptr)
{
 811370c:	b580      	push	{r7, lr}
 811370e:	b084      	sub	sp, #16
 8113710:	af00      	add	r7, sp, #0
 8113712:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 8113714:	687b      	ldr	r3, [r7, #4]
 8113716:	681b      	ldr	r3, [r3, #0]
 8113718:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 811371a:	68fb      	ldr	r3, [r7, #12]
 811371c:	2b00      	cmp	r3, #0
 811371e:	d009      	beq.n	8113734 <_nxe_packet_release+0x28>
 8113720:	68fb      	ldr	r3, [r7, #12]
 8113722:	681b      	ldr	r3, [r3, #0]
 8113724:	2b00      	cmp	r3, #0
 8113726:	d005      	beq.n	8113734 <_nxe_packet_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 8113728:	68fb      	ldr	r3, [r7, #12]
 811372a:	681b      	ldr	r3, [r3, #0]
 811372c:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 811372e:	4a12      	ldr	r2, [pc, #72]	@ (8113778 <_nxe_packet_release+0x6c>)
 8113730:	4293      	cmp	r3, r2
 8113732:	d001      	beq.n	8113738 <_nxe_packet_release+0x2c>
    {

        return(NX_PTR_ERROR);
 8113734:	2307      	movs	r3, #7
 8113736:	e01a      	b.n	811376e <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 8113738:	68fb      	ldr	r3, [r7, #12]
 811373a:	689a      	ldr	r2, [r3, #8]
 811373c:	68fb      	ldr	r3, [r7, #12]
 811373e:	691b      	ldr	r3, [r3, #16]
 8113740:	429a      	cmp	r2, r3
 8113742:	d201      	bcs.n	8113748 <_nxe_packet_release+0x3c>
    {
        return(NX_UNDERFLOW);
 8113744:	2302      	movs	r3, #2
 8113746:	e012      	b.n	811376e <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 8113748:	68fb      	ldr	r3, [r7, #12]
 811374a:	68da      	ldr	r2, [r3, #12]
 811374c:	68fb      	ldr	r3, [r7, #12]
 811374e:	695b      	ldr	r3, [r3, #20]
 8113750:	429a      	cmp	r2, r3
 8113752:	d901      	bls.n	8113758 <_nxe_packet_release+0x4c>
    {
        return(NX_OVERFLOW);
 8113754:	2303      	movs	r3, #3
 8113756:	e00a      	b.n	811376e <_nxe_packet_release+0x62>
    }

    /* Call actual packet release function.  */
    status =  _nx_packet_release(packet_ptr);
 8113758:	68f8      	ldr	r0, [r7, #12]
 811375a:	f7fb fa8d 	bl	810ec78 <_nx_packet_release>
 811375e:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 8113760:	68bb      	ldr	r3, [r7, #8]
 8113762:	2b00      	cmp	r3, #0
 8113764:	d102      	bne.n	811376c <_nxe_packet_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 8113766:	687b      	ldr	r3, [r7, #4]
 8113768:	2200      	movs	r2, #0
 811376a:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 811376c:	68bb      	ldr	r3, [r7, #8]
}
 811376e:	4618      	mov	r0, r3
 8113770:	3710      	adds	r7, #16
 8113772:	46bd      	mov	sp, r7
 8113774:	bd80      	pop	{r7, pc}
 8113776:	bf00      	nop
 8113778:	5041434b 	.word	0x5041434b

0811377c <_nxe_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_transmit_release(NX_PACKET **packet_ptr_ptr)
{
 811377c:	b580      	push	{r7, lr}
 811377e:	b084      	sub	sp, #16
 8113780:	af00      	add	r7, sp, #0
 8113782:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 8113784:	687b      	ldr	r3, [r7, #4]
 8113786:	681b      	ldr	r3, [r3, #0]
 8113788:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 811378a:	68fb      	ldr	r3, [r7, #12]
 811378c:	2b00      	cmp	r3, #0
 811378e:	d009      	beq.n	81137a4 <_nxe_packet_transmit_release+0x28>
 8113790:	68fb      	ldr	r3, [r7, #12]
 8113792:	681b      	ldr	r3, [r3, #0]
 8113794:	2b00      	cmp	r3, #0
 8113796:	d005      	beq.n	81137a4 <_nxe_packet_transmit_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 8113798:	68fb      	ldr	r3, [r7, #12]
 811379a:	681b      	ldr	r3, [r3, #0]
 811379c:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 811379e:	4a12      	ldr	r2, [pc, #72]	@ (81137e8 <_nxe_packet_transmit_release+0x6c>)
 81137a0:	4293      	cmp	r3, r2
 81137a2:	d001      	beq.n	81137a8 <_nxe_packet_transmit_release+0x2c>
    {

        return(NX_PTR_ERROR);
 81137a4:	2307      	movs	r3, #7
 81137a6:	e01a      	b.n	81137de <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 81137a8:	68fb      	ldr	r3, [r7, #12]
 81137aa:	689a      	ldr	r2, [r3, #8]
 81137ac:	68fb      	ldr	r3, [r7, #12]
 81137ae:	691b      	ldr	r3, [r3, #16]
 81137b0:	429a      	cmp	r2, r3
 81137b2:	d201      	bcs.n	81137b8 <_nxe_packet_transmit_release+0x3c>
    {
        return(NX_UNDERFLOW);
 81137b4:	2302      	movs	r3, #2
 81137b6:	e012      	b.n	81137de <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 81137b8:	68fb      	ldr	r3, [r7, #12]
 81137ba:	68da      	ldr	r2, [r3, #12]
 81137bc:	68fb      	ldr	r3, [r7, #12]
 81137be:	695b      	ldr	r3, [r3, #20]
 81137c0:	429a      	cmp	r2, r3
 81137c2:	d901      	bls.n	81137c8 <_nxe_packet_transmit_release+0x4c>
    {
        return(NX_OVERFLOW);
 81137c4:	2303      	movs	r3, #3
 81137c6:	e00a      	b.n	81137de <_nxe_packet_transmit_release+0x62>
    }

    /* Call actual packet transmit release function.  */
    status =  _nx_packet_transmit_release(packet_ptr);
 81137c8:	68f8      	ldr	r0, [r7, #12]
 81137ca:	f7fb fb0b 	bl	810ede4 <_nx_packet_transmit_release>
 81137ce:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 81137d0:	68bb      	ldr	r3, [r7, #8]
 81137d2:	2b00      	cmp	r3, #0
 81137d4:	d102      	bne.n	81137dc <_nxe_packet_transmit_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 81137d6:	687b      	ldr	r3, [r7, #4]
 81137d8:	2200      	movs	r2, #0
 81137da:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 81137dc:	68bb      	ldr	r3, [r7, #8]
}
 81137de:	4618      	mov	r0, r3
 81137e0:	3710      	adds	r7, #16
 81137e2:	46bd      	mov	sp, r7
 81137e4:	bd80      	pop	{r7, pc}
 81137e6:	bf00      	nop
 81137e8:	5041434b 	.word	0x5041434b

081137ec <_nxe_tcp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_tcp_enable(NX_IP *ip_ptr)
{
 81137ec:	b580      	push	{r7, lr}
 81137ee:	b086      	sub	sp, #24
 81137f0:	af00      	add	r7, sp, #0
 81137f2:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 81137f4:	687b      	ldr	r3, [r7, #4]
 81137f6:	2b00      	cmp	r3, #0
 81137f8:	d004      	beq.n	8113804 <_nxe_tcp_enable+0x18>
 81137fa:	687b      	ldr	r3, [r7, #4]
 81137fc:	681b      	ldr	r3, [r3, #0]
 81137fe:	4a15      	ldr	r2, [pc, #84]	@ (8113854 <_nxe_tcp_enable+0x68>)
 8113800:	4293      	cmp	r3, r2
 8113802:	d001      	beq.n	8113808 <_nxe_tcp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 8113804:	2307      	movs	r3, #7
 8113806:	e020      	b.n	811384a <_nxe_tcp_enable+0x5e>
    }

    /* Check to see if TCP is already enabled.  */
    if (ip_ptr -> nx_ip_tcp_packet_receive)
 8113808:	687b      	ldr	r3, [r7, #4]
 811380a:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 811380e:	2b00      	cmp	r3, #0
 8113810:	d001      	beq.n	8113816 <_nxe_tcp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 8113812:	2315      	movs	r3, #21
 8113814:	e019      	b.n	811384a <_nxe_tcp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8113816:	f3ef 8305 	mrs	r3, IPSR
 811381a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 811381c:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 811381e:	4b0e      	ldr	r3, [pc, #56]	@ (8113858 <_nxe_tcp_enable+0x6c>)
 8113820:	681b      	ldr	r3, [r3, #0]
 8113822:	4313      	orrs	r3, r2
 8113824:	2b00      	cmp	r3, #0
 8113826:	d00b      	beq.n	8113840 <_nxe_tcp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8113828:	f3ef 8305 	mrs	r3, IPSR
 811382c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 811382e:	68fa      	ldr	r2, [r7, #12]
 8113830:	4b09      	ldr	r3, [pc, #36]	@ (8113858 <_nxe_tcp_enable+0x6c>)
 8113832:	681b      	ldr	r3, [r3, #0]
 8113834:	4313      	orrs	r3, r2
 8113836:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 811383a:	d201      	bcs.n	8113840 <_nxe_tcp_enable+0x54>
 811383c:	2311      	movs	r3, #17
 811383e:	e004      	b.n	811384a <_nxe_tcp_enable+0x5e>

    /* Call actual TCP enable function.  */
    status =  _nx_tcp_enable(ip_ptr);
 8113840:	6878      	ldr	r0, [r7, #4]
 8113842:	f7fb fe49 	bl	810f4d8 <_nx_tcp_enable>
 8113846:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8113848:	697b      	ldr	r3, [r7, #20]
}
 811384a:	4618      	mov	r0, r3
 811384c:	3718      	adds	r7, #24
 811384e:	46bd      	mov	sp, r7
 8113850:	bd80      	pop	{r7, pc}
 8113852:	bf00      	nop
 8113854:	49502020 	.word	0x49502020
 8113858:	20050088 	.word	0x20050088

0811385c <_nxe_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_enable(NX_IP *ip_ptr)
{
 811385c:	b580      	push	{r7, lr}
 811385e:	b086      	sub	sp, #24
 8113860:	af00      	add	r7, sp, #0
 8113862:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 8113864:	687b      	ldr	r3, [r7, #4]
 8113866:	2b00      	cmp	r3, #0
 8113868:	d004      	beq.n	8113874 <_nxe_udp_enable+0x18>
 811386a:	687b      	ldr	r3, [r7, #4]
 811386c:	681b      	ldr	r3, [r3, #0]
 811386e:	4a15      	ldr	r2, [pc, #84]	@ (81138c4 <_nxe_udp_enable+0x68>)
 8113870:	4293      	cmp	r3, r2
 8113872:	d001      	beq.n	8113878 <_nxe_udp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 8113874:	2307      	movs	r3, #7
 8113876:	e020      	b.n	81138ba <_nxe_udp_enable+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (ip_ptr -> nx_ip_udp_packet_receive)
 8113878:	687b      	ldr	r3, [r7, #4]
 811387a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 811387e:	2b00      	cmp	r3, #0
 8113880:	d001      	beq.n	8113886 <_nxe_udp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 8113882:	2315      	movs	r3, #21
 8113884:	e019      	b.n	81138ba <_nxe_udp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8113886:	f3ef 8305 	mrs	r3, IPSR
 811388a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 811388c:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 811388e:	4b0e      	ldr	r3, [pc, #56]	@ (81138c8 <_nxe_udp_enable+0x6c>)
 8113890:	681b      	ldr	r3, [r3, #0]
 8113892:	4313      	orrs	r3, r2
 8113894:	2b00      	cmp	r3, #0
 8113896:	d00b      	beq.n	81138b0 <_nxe_udp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8113898:	f3ef 8305 	mrs	r3, IPSR
 811389c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 811389e:	68fa      	ldr	r2, [r7, #12]
 81138a0:	4b09      	ldr	r3, [pc, #36]	@ (81138c8 <_nxe_udp_enable+0x6c>)
 81138a2:	681b      	ldr	r3, [r3, #0]
 81138a4:	4313      	orrs	r3, r2
 81138a6:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 81138aa:	d201      	bcs.n	81138b0 <_nxe_udp_enable+0x54>
 81138ac:	2311      	movs	r3, #17
 81138ae:	e004      	b.n	81138ba <_nxe_udp_enable+0x5e>

    /* Call actual UDP enable function.  */
    status =  _nx_udp_enable(ip_ptr);
 81138b0:	6878      	ldr	r0, [r7, #4]
 81138b2:	f7fe fe93 	bl	81125dc <_nx_udp_enable>
 81138b6:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 81138b8:	697b      	ldr	r3, [r7, #20]
}
 81138ba:	4618      	mov	r0, r3
 81138bc:	3718      	adds	r7, #24
 81138be:	46bd      	mov	sp, r7
 81138c0:	bd80      	pop	{r7, pc}
 81138c2:	bf00      	nop
 81138c4:	49502020 	.word	0x49502020
 81138c8:	20050088 	.word	0x20050088

081138cc <_nxe_udp_socket_bind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 81138cc:	b580      	push	{r7, lr}
 81138ce:	b086      	sub	sp, #24
 81138d0:	af00      	add	r7, sp, #0
 81138d2:	60f8      	str	r0, [r7, #12]
 81138d4:	60b9      	str	r1, [r7, #8]
 81138d6:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 81138d8:	68fb      	ldr	r3, [r7, #12]
 81138da:	2b00      	cmp	r3, #0
 81138dc:	d004      	beq.n	81138e8 <_nxe_udp_socket_bind+0x1c>
 81138de:	68fb      	ldr	r3, [r7, #12]
 81138e0:	681b      	ldr	r3, [r3, #0]
 81138e2:	4a19      	ldr	r2, [pc, #100]	@ (8113948 <_nxe_udp_socket_bind+0x7c>)
 81138e4:	4293      	cmp	r3, r2
 81138e6:	d001      	beq.n	81138ec <_nxe_udp_socket_bind+0x20>
    {
        return(NX_PTR_ERROR);
 81138e8:	2307      	movs	r3, #7
 81138ea:	e028      	b.n	811393e <_nxe_udp_socket_bind+0x72>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 81138ec:	68fb      	ldr	r3, [r7, #12]
 81138ee:	68db      	ldr	r3, [r3, #12]
 81138f0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 81138f4:	2b00      	cmp	r3, #0
 81138f6:	d101      	bne.n	81138fc <_nxe_udp_socket_bind+0x30>
    {
        return(NX_NOT_ENABLED);
 81138f8:	2314      	movs	r3, #20
 81138fa:	e020      	b.n	811393e <_nxe_udp_socket_bind+0x72>
    }

    /* Check for an invalid port.  */
    if (((ULONG)port) > (ULONG)NX_MAX_PORT)
 81138fc:	68bb      	ldr	r3, [r7, #8]
 81138fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8113902:	d301      	bcc.n	8113908 <_nxe_udp_socket_bind+0x3c>
    {
        return(NX_INVALID_PORT);
 8113904:	2346      	movs	r3, #70	@ 0x46
 8113906:	e01a      	b.n	811393e <_nxe_udp_socket_bind+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8113908:	f3ef 8305 	mrs	r3, IPSR
 811390c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 811390e:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 8113910:	4b0e      	ldr	r3, [pc, #56]	@ (811394c <_nxe_udp_socket_bind+0x80>)
 8113912:	681b      	ldr	r3, [r3, #0]
 8113914:	4313      	orrs	r3, r2
 8113916:	2b00      	cmp	r3, #0
 8113918:	d108      	bne.n	811392c <_nxe_udp_socket_bind+0x60>
 811391a:	4b0d      	ldr	r3, [pc, #52]	@ (8113950 <_nxe_udp_socket_bind+0x84>)
 811391c:	681b      	ldr	r3, [r3, #0]
 811391e:	2b00      	cmp	r3, #0
 8113920:	d004      	beq.n	811392c <_nxe_udp_socket_bind+0x60>
 8113922:	4b0b      	ldr	r3, [pc, #44]	@ (8113950 <_nxe_udp_socket_bind+0x84>)
 8113924:	681b      	ldr	r3, [r3, #0]
 8113926:	4a0b      	ldr	r2, [pc, #44]	@ (8113954 <_nxe_udp_socket_bind+0x88>)
 8113928:	4293      	cmp	r3, r2
 811392a:	d101      	bne.n	8113930 <_nxe_udp_socket_bind+0x64>
 811392c:	2311      	movs	r3, #17
 811392e:	e006      	b.n	811393e <_nxe_udp_socket_bind+0x72>

    /* Call actual UDP socket bind function.  */
    status =  _nx_udp_socket_bind(socket_ptr, port, wait_option);
 8113930:	687a      	ldr	r2, [r7, #4]
 8113932:	68b9      	ldr	r1, [r7, #8]
 8113934:	68f8      	ldr	r0, [r7, #12]
 8113936:	f7ff f913 	bl	8112b60 <_nx_udp_socket_bind>
 811393a:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 811393c:	697b      	ldr	r3, [r7, #20]
}
 811393e:	4618      	mov	r0, r3
 8113940:	3718      	adds	r7, #24
 8113942:	46bd      	mov	sp, r7
 8113944:	bd80      	pop	{r7, pc}
 8113946:	bf00      	nop
 8113948:	55445020 	.word	0x55445020
 811394c:	20050088 	.word	0x20050088
 8113950:	20058128 	.word	0x20058128
 8113954:	20058270 	.word	0x20058270

08113958 <_nxe_udp_socket_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                             ULONG type_of_service, ULONG fragment, UINT time_to_live,
                             ULONG queue_maximum, UINT udp_socket_size)
{
 8113958:	b580      	push	{r7, lr}
 811395a:	b08e      	sub	sp, #56	@ 0x38
 811395c:	af04      	add	r7, sp, #16
 811395e:	60f8      	str	r0, [r7, #12]
 8113960:	60b9      	str	r1, [r7, #8]
 8113962:	607a      	str	r2, [r7, #4]
 8113964:	603b      	str	r3, [r7, #0]
NX_UDP_SOCKET *created_socket;
ULONG          created_count;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) ||
 8113966:	68fb      	ldr	r3, [r7, #12]
 8113968:	2b00      	cmp	r3, #0
 811396a:	d00a      	beq.n	8113982 <_nxe_udp_socket_create+0x2a>
 811396c:	68fb      	ldr	r3, [r7, #12]
 811396e:	681b      	ldr	r3, [r3, #0]
 8113970:	4a3f      	ldr	r2, [pc, #252]	@ (8113a70 <_nxe_udp_socket_create+0x118>)
 8113972:	4293      	cmp	r3, r2
 8113974:	d105      	bne.n	8113982 <_nxe_udp_socket_create+0x2a>
 8113976:	68bb      	ldr	r3, [r7, #8]
 8113978:	2b00      	cmp	r3, #0
 811397a:	d002      	beq.n	8113982 <_nxe_udp_socket_create+0x2a>
        (socket_ptr == NX_NULL) || (udp_socket_size != (UINT)sizeof(NX_UDP_SOCKET)))
 811397c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811397e:	2b78      	cmp	r3, #120	@ 0x78
 8113980:	d001      	beq.n	8113986 <_nxe_udp_socket_create+0x2e>
    {
        return(NX_PTR_ERROR);
 8113982:	2307      	movs	r3, #7
 8113984:	e06f      	b.n	8113a66 <_nxe_udp_socket_create+0x10e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8113986:	f3ef 8305 	mrs	r3, IPSR
 811398a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 811398c:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 811398e:	4b39      	ldr	r3, [pc, #228]	@ (8113a74 <_nxe_udp_socket_create+0x11c>)
 8113990:	681b      	ldr	r3, [r3, #0]
 8113992:	4313      	orrs	r3, r2
 8113994:	2b00      	cmp	r3, #0
 8113996:	d009      	beq.n	81139ac <_nxe_udp_socket_create+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8113998:	f3ef 8305 	mrs	r3, IPSR
 811399c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 811399e:	697a      	ldr	r2, [r7, #20]
 81139a0:	4b34      	ldr	r3, [pc, #208]	@ (8113a74 <_nxe_udp_socket_create+0x11c>)
 81139a2:	681b      	ldr	r3, [r3, #0]
 81139a4:	4313      	orrs	r3, r2
 81139a6:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 81139aa:	d304      	bcc.n	81139b6 <_nxe_udp_socket_create+0x5e>
 81139ac:	4b32      	ldr	r3, [pc, #200]	@ (8113a78 <_nxe_udp_socket_create+0x120>)
 81139ae:	681b      	ldr	r3, [r3, #0]
 81139b0:	4a32      	ldr	r2, [pc, #200]	@ (8113a7c <_nxe_udp_socket_create+0x124>)
 81139b2:	4293      	cmp	r3, r2
 81139b4:	d101      	bne.n	81139ba <_nxe_udp_socket_create+0x62>
 81139b6:	2311      	movs	r3, #17
 81139b8:	e055      	b.n	8113a66 <_nxe_udp_socket_create+0x10e>

    /* Get protection mutex.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 81139ba:	68fb      	ldr	r3, [r7, #12]
 81139bc:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 81139c0:	f04f 31ff 	mov.w	r1, #4294967295
 81139c4:	4618      	mov	r0, r3
 81139c6:	f001 f8db 	bl	8114b80 <_tx_mutex_get>

    /* Pickup created count and created socket pointer.  */
    created_count =   ip_ptr -> nx_ip_udp_created_sockets_count;
 81139ca:	68fb      	ldr	r3, [r7, #12]
 81139cc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 81139d0:	623b      	str	r3, [r7, #32]
    created_socket =  ip_ptr -> nx_ip_udp_created_sockets_ptr;
 81139d2:	68fb      	ldr	r3, [r7, #12]
 81139d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 81139d8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Loop to look for socket already created.  */
    while (created_count--)
 81139da:	e00e      	b.n	81139fa <_nxe_udp_socket_create+0xa2>
    {

        /* Compare the new socket with the already created socket.  */
        if (socket_ptr == created_socket)
 81139dc:	68ba      	ldr	r2, [r7, #8]
 81139de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81139e0:	429a      	cmp	r2, r3
 81139e2:	d107      	bne.n	81139f4 <_nxe_udp_socket_create+0x9c>
        {

            /* Error, socket already created!  */

            /* Release protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 81139e4:	68fb      	ldr	r3, [r7, #12]
 81139e6:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 81139ea:	4618      	mov	r0, r3
 81139ec:	f001 fb40 	bl	8115070 <_tx_mutex_put>

            /* Return error.  */
            return(NX_PTR_ERROR);
 81139f0:	2307      	movs	r3, #7
 81139f2:	e038      	b.n	8113a66 <_nxe_udp_socket_create+0x10e>
        }

        /* Move to next created socket.  */
        created_socket =  created_socket -> nx_udp_socket_created_next;
 81139f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81139f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81139f8:	627b      	str	r3, [r7, #36]	@ 0x24
    while (created_count--)
 81139fa:	6a3b      	ldr	r3, [r7, #32]
 81139fc:	1e5a      	subs	r2, r3, #1
 81139fe:	623a      	str	r2, [r7, #32]
 8113a00:	2b00      	cmp	r3, #0
 8113a02:	d1eb      	bne.n	81139dc <_nxe_udp_socket_create+0x84>
    }

    /* Release protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8113a04:	68fb      	ldr	r3, [r7, #12]
 8113a06:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8113a0a:	4618      	mov	r0, r3
 8113a0c:	f001 fb30 	bl	8115070 <_tx_mutex_put>

    /* Check to see if UDP is enabled.  */
    if (!ip_ptr -> nx_ip_udp_packet_receive)
 8113a10:	68fb      	ldr	r3, [r7, #12]
 8113a12:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8113a16:	2b00      	cmp	r3, #0
 8113a18:	d101      	bne.n	8113a1e <_nxe_udp_socket_create+0xc6>
    {
        return(NX_NOT_ENABLED);
 8113a1a:	2314      	movs	r3, #20
 8113a1c:	e023      	b.n	8113a66 <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid type of service.  */
    if (type_of_service & ~(NX_IP_TOS_MASK))
 8113a1e:	683b      	ldr	r3, [r7, #0]
 8113a20:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8113a24:	2b00      	cmp	r3, #0
 8113a26:	d001      	beq.n	8113a2c <_nxe_udp_socket_create+0xd4>
    {
        return(NX_OPTION_ERROR);
 8113a28:	230a      	movs	r3, #10
 8113a2a:	e01c      	b.n	8113a66 <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid fragment option.  */
    if ((fragment != NX_FRAGMENT_OKAY) &&
 8113a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113a2e:	2b00      	cmp	r3, #0
 8113a30:	d005      	beq.n	8113a3e <_nxe_udp_socket_create+0xe6>
 8113a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113a34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8113a38:	d001      	beq.n	8113a3e <_nxe_udp_socket_create+0xe6>
        (fragment != NX_DONT_FRAGMENT))
    {
        return(NX_OPTION_ERROR);
 8113a3a:	230a      	movs	r3, #10
 8113a3c:	e013      	b.n	8113a66 <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid time to live option.  */
    if (((ULONG)time_to_live) > NX_IP_TIME_TO_LIVE_MASK)
 8113a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113a40:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 8113a44:	d901      	bls.n	8113a4a <_nxe_udp_socket_create+0xf2>
    {
        return(NX_OPTION_ERROR);
 8113a46:	230a      	movs	r3, #10
 8113a48:	e00d      	b.n	8113a66 <_nxe_udp_socket_create+0x10e>
    }

    /* Call actual UDP socket create function.  */
    status =  _nx_udp_socket_create(ip_ptr, socket_ptr, name, type_of_service,
 8113a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113a4c:	9302      	str	r3, [sp, #8]
 8113a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113a50:	9301      	str	r3, [sp, #4]
 8113a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113a54:	9300      	str	r3, [sp, #0]
 8113a56:	683b      	ldr	r3, [r7, #0]
 8113a58:	687a      	ldr	r2, [r7, #4]
 8113a5a:	68b9      	ldr	r1, [r7, #8]
 8113a5c:	68f8      	ldr	r0, [r7, #12]
 8113a5e:	f7ff f9a7 	bl	8112db0 <_nx_udp_socket_create>
 8113a62:	61f8      	str	r0, [r7, #28]
                                    fragment, time_to_live, queue_maximum);

    /* Return completion status.  */
    return(status);
 8113a64:	69fb      	ldr	r3, [r7, #28]
}
 8113a66:	4618      	mov	r0, r3
 8113a68:	3728      	adds	r7, #40	@ 0x28
 8113a6a:	46bd      	mov	sp, r7
 8113a6c:	bd80      	pop	{r7, pc}
 8113a6e:	bf00      	nop
 8113a70:	49502020 	.word	0x49502020
 8113a74:	20050088 	.word	0x20050088
 8113a78:	20058128 	.word	0x20058128
 8113a7c:	20058270 	.word	0x20058270

08113a80 <_nxe_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 8113a80:	b580      	push	{r7, lr}
 8113a82:	b086      	sub	sp, #24
 8113a84:	af00      	add	r7, sp, #0
 8113a86:	60f8      	str	r0, [r7, #12]
 8113a88:	60b9      	str	r1, [r7, #8]
 8113a8a:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID) || (packet_ptr == NX_NULL))
 8113a8c:	68fb      	ldr	r3, [r7, #12]
 8113a8e:	2b00      	cmp	r3, #0
 8113a90:	d007      	beq.n	8113aa2 <_nxe_udp_socket_receive+0x22>
 8113a92:	68fb      	ldr	r3, [r7, #12]
 8113a94:	681b      	ldr	r3, [r3, #0]
 8113a96:	4a17      	ldr	r2, [pc, #92]	@ (8113af4 <_nxe_udp_socket_receive+0x74>)
 8113a98:	4293      	cmp	r3, r2
 8113a9a:	d102      	bne.n	8113aa2 <_nxe_udp_socket_receive+0x22>
 8113a9c:	68bb      	ldr	r3, [r7, #8]
 8113a9e:	2b00      	cmp	r3, #0
 8113aa0:	d101      	bne.n	8113aa6 <_nxe_udp_socket_receive+0x26>
    {
        return(NX_PTR_ERROR);
 8113aa2:	2307      	movs	r3, #7
 8113aa4:	e022      	b.n	8113aec <_nxe_udp_socket_receive+0x6c>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 8113aa6:	68fb      	ldr	r3, [r7, #12]
 8113aa8:	68db      	ldr	r3, [r3, #12]
 8113aaa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8113aae:	2b00      	cmp	r3, #0
 8113ab0:	d101      	bne.n	8113ab6 <_nxe_udp_socket_receive+0x36>
    {
        return(NX_NOT_ENABLED);
 8113ab2:	2314      	movs	r3, #20
 8113ab4:	e01a      	b.n	8113aec <_nxe_udp_socket_receive+0x6c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8113ab6:	f3ef 8305 	mrs	r3, IPSR
 8113aba:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8113abc:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 8113abe:	4b0e      	ldr	r3, [pc, #56]	@ (8113af8 <_nxe_udp_socket_receive+0x78>)
 8113ac0:	681b      	ldr	r3, [r3, #0]
 8113ac2:	4313      	orrs	r3, r2
 8113ac4:	2b00      	cmp	r3, #0
 8113ac6:	d108      	bne.n	8113ada <_nxe_udp_socket_receive+0x5a>
 8113ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8113afc <_nxe_udp_socket_receive+0x7c>)
 8113aca:	681b      	ldr	r3, [r3, #0]
 8113acc:	2b00      	cmp	r3, #0
 8113ace:	d004      	beq.n	8113ada <_nxe_udp_socket_receive+0x5a>
 8113ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8113afc <_nxe_udp_socket_receive+0x7c>)
 8113ad2:	681b      	ldr	r3, [r3, #0]
 8113ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8113b00 <_nxe_udp_socket_receive+0x80>)
 8113ad6:	4293      	cmp	r3, r2
 8113ad8:	d101      	bne.n	8113ade <_nxe_udp_socket_receive+0x5e>
 8113ada:	2311      	movs	r3, #17
 8113adc:	e006      	b.n	8113aec <_nxe_udp_socket_receive+0x6c>

    /* Call actual UDP socket receive function.  */
    status =  _nx_udp_socket_receive(socket_ptr, packet_ptr, wait_option);
 8113ade:	687a      	ldr	r2, [r7, #4]
 8113ae0:	68b9      	ldr	r1, [r7, #8]
 8113ae2:	68f8      	ldr	r0, [r7, #12]
 8113ae4:	f7ff f9f4 	bl	8112ed0 <_nx_udp_socket_receive>
 8113ae8:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 8113aea:	697b      	ldr	r3, [r7, #20]
}
 8113aec:	4618      	mov	r0, r3
 8113aee:	3718      	adds	r7, #24
 8113af0:	46bd      	mov	sp, r7
 8113af2:	bd80      	pop	{r7, pc}
 8113af4:	55445020 	.word	0x55445020
 8113af8:	20050088 	.word	0x20050088
 8113afc:	20058128 	.word	0x20058128
 8113b00:	20058270 	.word	0x20058270

08113b04 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8113b04:	b580      	push	{r7, lr}
 8113b06:	b096      	sub	sp, #88	@ 0x58
 8113b08:	af00      	add	r7, sp, #0
 8113b0a:	60f8      	str	r0, [r7, #12]
 8113b0c:	60b9      	str	r1, [r7, #8]
 8113b0e:	607a      	str	r2, [r7, #4]
 8113b10:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8113b12:	687b      	ldr	r3, [r7, #4]
 8113b14:	3303      	adds	r3, #3
 8113b16:	f023 0303 	bic.w	r3, r3, #3
 8113b1a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8113b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8113b20:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 8113b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 8113b24:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8113b26:	b672      	cpsid	i
    return(int_posture);
 8113b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8113b2a:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8113b2c:	4b55      	ldr	r3, [pc, #340]	@ (8113c84 <_tx_byte_allocate+0x180>)
 8113b2e:	681b      	ldr	r3, [r3, #0]
 8113b30:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8113b32:	2300      	movs	r3, #0
 8113b34:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8113b36:	68fb      	ldr	r3, [r7, #12]
 8113b38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8113b3a:	621a      	str	r2, [r3, #32]
 8113b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8113b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8113b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113b42:	f383 8810 	msr	PRIMASK, r3
}
 8113b46:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8113b48:	6879      	ldr	r1, [r7, #4]
 8113b4a:	68f8      	ldr	r0, [r7, #12]
 8113b4c:	f000 f9b2 	bl	8113eb4 <_tx_byte_pool_search>
 8113b50:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8113b52:	f3ef 8310 	mrs	r3, PRIMASK
 8113b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8113b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8113b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8113b5c:	b672      	cpsid	i
    return(int_posture);
 8113b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8113b60:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8113b62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8113b64:	2b00      	cmp	r3, #0
 8113b66:	d002      	beq.n	8113b6e <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8113b68:	2301      	movs	r3, #1
 8113b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8113b6c:	e006      	b.n	8113b7c <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8113b6e:	68fb      	ldr	r3, [r7, #12]
 8113b70:	6a1b      	ldr	r3, [r3, #32]
 8113b72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8113b74:	429a      	cmp	r2, r3
 8113b76:	d101      	bne.n	8113b7c <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8113b78:	2301      	movs	r3, #1
 8113b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8113b7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8113b7e:	2b00      	cmp	r3, #0
 8113b80:	d0d9      	beq.n	8113b36 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8113b82:	68bb      	ldr	r3, [r7, #8]
 8113b84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8113b86:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8113b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8113b8a:	2b00      	cmp	r3, #0
 8113b8c:	d008      	beq.n	8113ba0 <_tx_byte_allocate+0x9c>
 8113b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8113b90:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8113b92:	6a3b      	ldr	r3, [r7, #32]
 8113b94:	f383 8810 	msr	PRIMASK, r3
}
 8113b98:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8113b9a:	2300      	movs	r3, #0
 8113b9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8113b9e:	e06c      	b.n	8113c7a <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8113ba0:	683b      	ldr	r3, [r7, #0]
 8113ba2:	2b00      	cmp	r3, #0
 8113ba4:	d061      	beq.n	8113c6a <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8113ba6:	4b38      	ldr	r3, [pc, #224]	@ (8113c88 <_tx_byte_allocate+0x184>)
 8113ba8:	681b      	ldr	r3, [r3, #0]
 8113baa:	2b00      	cmp	r3, #0
 8113bac:	d007      	beq.n	8113bbe <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8113bae:	2310      	movs	r3, #16
 8113bb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8113bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8113bb4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8113bb6:	69fb      	ldr	r3, [r7, #28]
 8113bb8:	f383 8810 	msr	PRIMASK, r3
}
 8113bbc:	e05d      	b.n	8113c7a <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8113bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113bc0:	4a32      	ldr	r2, [pc, #200]	@ (8113c8c <_tx_byte_allocate+0x188>)
 8113bc2:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8113bc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113bc6:	68fa      	ldr	r2, [r7, #12]
 8113bc8:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8113bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113bcc:	68ba      	ldr	r2, [r7, #8]
 8113bce:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8113bd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113bd2:	687a      	ldr	r2, [r7, #4]
 8113bd4:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8113bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113bd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8113bdc:	1c5a      	adds	r2, r3, #1
 8113bde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113be0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8113be4:	68fb      	ldr	r3, [r7, #12]
 8113be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8113be8:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8113bea:	68fb      	ldr	r3, [r7, #12]
 8113bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8113bee:	1c5a      	adds	r2, r3, #1
 8113bf0:	68fb      	ldr	r3, [r7, #12]
 8113bf2:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8113bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8113bf6:	2b00      	cmp	r3, #0
 8113bf8:	d109      	bne.n	8113c0e <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8113bfa:	68fb      	ldr	r3, [r7, #12]
 8113bfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8113bfe:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8113c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113c02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8113c04:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8113c06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113c08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8113c0a:	675a      	str	r2, [r3, #116]	@ 0x74
 8113c0c:	e011      	b.n	8113c32 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8113c0e:	68fb      	ldr	r3, [r7, #12]
 8113c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8113c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8113c14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113c16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8113c18:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8113c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8113c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8113c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8113c20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113c22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8113c24:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8113c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113c28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8113c2a:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8113c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8113c2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8113c30:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8113c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113c34:	2209      	movs	r2, #9
 8113c36:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8113c38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113c3a:	2201      	movs	r2, #1
 8113c3c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8113c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113c40:	683a      	ldr	r2, [r7, #0]
 8113c42:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8113c44:	4b10      	ldr	r3, [pc, #64]	@ (8113c88 <_tx_byte_allocate+0x184>)
 8113c46:	681b      	ldr	r3, [r3, #0]
 8113c48:	3301      	adds	r3, #1
 8113c4a:	4a0f      	ldr	r2, [pc, #60]	@ (8113c88 <_tx_byte_allocate+0x184>)
 8113c4c:	6013      	str	r3, [r2, #0]
 8113c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8113c50:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8113c52:	69bb      	ldr	r3, [r7, #24]
 8113c54:	f383 8810 	msr	PRIMASK, r3
}
 8113c58:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8113c5a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8113c5c:	f001 fff8 	bl	8115c50 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8113c60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8113c66:	653b      	str	r3, [r7, #80]	@ 0x50
 8113c68:	e007      	b.n	8113c7a <_tx_byte_allocate+0x176>
 8113c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8113c6c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8113c6e:	697b      	ldr	r3, [r7, #20]
 8113c70:	f383 8810 	msr	PRIMASK, r3
}
 8113c74:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8113c76:	2310      	movs	r3, #16
 8113c78:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8113c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8113c7c:	4618      	mov	r0, r3
 8113c7e:	3758      	adds	r7, #88	@ 0x58
 8113c80:	46bd      	mov	sp, r7
 8113c82:	bd80      	pop	{r7, pc}
 8113c84:	20058128 	.word	0x20058128
 8113c88:	200581c0 	.word	0x200581c0
 8113c8c:	08113c91 	.word	0x08113c91

08113c90 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8113c90:	b580      	push	{r7, lr}
 8113c92:	b08e      	sub	sp, #56	@ 0x38
 8113c94:	af00      	add	r7, sp, #0
 8113c96:	6078      	str	r0, [r7, #4]
 8113c98:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8113c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8113c9e:	623b      	str	r3, [r7, #32]
    return(posture);
 8113ca0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8113ca2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8113ca4:	b672      	cpsid	i
    return(int_posture);
 8113ca6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8113ca8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8113caa:	687b      	ldr	r3, [r7, #4]
 8113cac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8113cae:	4a33      	ldr	r2, [pc, #204]	@ (8113d7c <_tx_byte_pool_cleanup+0xec>)
 8113cb0:	4293      	cmp	r3, r2
 8113cb2:	d158      	bne.n	8113d66 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8113cb4:	687b      	ldr	r3, [r7, #4]
 8113cb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8113cba:	683a      	ldr	r2, [r7, #0]
 8113cbc:	429a      	cmp	r2, r3
 8113cbe:	d152      	bne.n	8113d66 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8113cc0:	687b      	ldr	r3, [r7, #4]
 8113cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8113cc4:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8113cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113cc8:	2b00      	cmp	r3, #0
 8113cca:	d04c      	beq.n	8113d66 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8113ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113cce:	681b      	ldr	r3, [r3, #0]
 8113cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8113d80 <_tx_byte_pool_cleanup+0xf0>)
 8113cd2:	4293      	cmp	r3, r2
 8113cd4:	d147      	bne.n	8113d66 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8113cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8113cda:	2b00      	cmp	r3, #0
 8113cdc:	d043      	beq.n	8113d66 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8113cde:	687b      	ldr	r3, [r7, #4]
 8113ce0:	2200      	movs	r2, #0
 8113ce2:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8113ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8113ce8:	1e5a      	subs	r2, r3, #1
 8113cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113cec:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8113cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8113cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8113cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8113cf6:	2b00      	cmp	r3, #0
 8113cf8:	d103      	bne.n	8113d02 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8113cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113cfc:	2200      	movs	r2, #0
 8113cfe:	625a      	str	r2, [r3, #36]	@ 0x24
 8113d00:	e013      	b.n	8113d2a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8113d02:	687b      	ldr	r3, [r7, #4]
 8113d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8113d06:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8113d08:	687b      	ldr	r3, [r7, #4]
 8113d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8113d0c:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8113d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8113d12:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8113d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113d16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8113d18:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8113d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8113d1e:	687a      	ldr	r2, [r7, #4]
 8113d20:	429a      	cmp	r2, r3
 8113d22:	d102      	bne.n	8113d2a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8113d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113d26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8113d28:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8113d2a:	687b      	ldr	r3, [r7, #4]
 8113d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8113d2e:	2b09      	cmp	r3, #9
 8113d30:	d119      	bne.n	8113d66 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8113d32:	687b      	ldr	r3, [r7, #4]
 8113d34:	2210      	movs	r2, #16
 8113d36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8113d3a:	4b12      	ldr	r3, [pc, #72]	@ (8113d84 <_tx_byte_pool_cleanup+0xf4>)
 8113d3c:	681b      	ldr	r3, [r3, #0]
 8113d3e:	3301      	adds	r3, #1
 8113d40:	4a10      	ldr	r2, [pc, #64]	@ (8113d84 <_tx_byte_pool_cleanup+0xf4>)
 8113d42:	6013      	str	r3, [r2, #0]
 8113d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113d46:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8113d48:	693b      	ldr	r3, [r7, #16]
 8113d4a:	f383 8810 	msr	PRIMASK, r3
}
 8113d4e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8113d50:	6878      	ldr	r0, [r7, #4]
 8113d52:	f001 fe7d 	bl	8115a50 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8113d56:	f3ef 8310 	mrs	r3, PRIMASK
 8113d5a:	61bb      	str	r3, [r7, #24]
    return(posture);
 8113d5c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8113d5e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8113d60:	b672      	cpsid	i
    return(int_posture);
 8113d62:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8113d64:	637b      	str	r3, [r7, #52]	@ 0x34
 8113d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113d68:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8113d6a:	68fb      	ldr	r3, [r7, #12]
 8113d6c:	f383 8810 	msr	PRIMASK, r3
}
 8113d70:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8113d72:	bf00      	nop
 8113d74:	3738      	adds	r7, #56	@ 0x38
 8113d76:	46bd      	mov	sp, r7
 8113d78:	bd80      	pop	{r7, pc}
 8113d7a:	bf00      	nop
 8113d7c:	08113c91 	.word	0x08113c91
 8113d80:	42595445 	.word	0x42595445
 8113d84:	200581c0 	.word	0x200581c0

08113d88 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8113d88:	b580      	push	{r7, lr}
 8113d8a:	b08e      	sub	sp, #56	@ 0x38
 8113d8c:	af00      	add	r7, sp, #0
 8113d8e:	60f8      	str	r0, [r7, #12]
 8113d90:	60b9      	str	r1, [r7, #8]
 8113d92:	607a      	str	r2, [r7, #4]
 8113d94:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8113d96:	2234      	movs	r2, #52	@ 0x34
 8113d98:	2100      	movs	r1, #0
 8113d9a:	68f8      	ldr	r0, [r7, #12]
 8113d9c:	f003 f964 	bl	8117068 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8113da0:	683b      	ldr	r3, [r7, #0]
 8113da2:	f023 0303 	bic.w	r3, r3, #3
 8113da6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8113da8:	68fb      	ldr	r3, [r7, #12]
 8113daa:	68ba      	ldr	r2, [r7, #8]
 8113dac:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8113dae:	68fb      	ldr	r3, [r7, #12]
 8113db0:	687a      	ldr	r2, [r7, #4]
 8113db2:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8113db4:	68fb      	ldr	r3, [r7, #12]
 8113db6:	683a      	ldr	r2, [r7, #0]
 8113db8:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8113dba:	68fb      	ldr	r3, [r7, #12]
 8113dbc:	687a      	ldr	r2, [r7, #4]
 8113dbe:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8113dc0:	68fb      	ldr	r3, [r7, #12]
 8113dc2:	687a      	ldr	r2, [r7, #4]
 8113dc4:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8113dc6:	683b      	ldr	r3, [r7, #0]
 8113dc8:	f1a3 0208 	sub.w	r2, r3, #8
 8113dcc:	68fb      	ldr	r3, [r7, #12]
 8113dce:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8113dd0:	68fb      	ldr	r3, [r7, #12]
 8113dd2:	2202      	movs	r2, #2
 8113dd4:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8113dd6:	687b      	ldr	r3, [r7, #4]
 8113dd8:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8113dda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8113ddc:	683b      	ldr	r3, [r7, #0]
 8113dde:	4413      	add	r3, r2
 8113de0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8113de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113de4:	3b04      	subs	r3, #4
 8113de6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8113de8:	68fb      	ldr	r3, [r7, #12]
 8113dea:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8113dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 8113df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8113df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8113df4:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8113df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113df8:	3b04      	subs	r3, #4
 8113dfa:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8113dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8113e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8113e02:	687a      	ldr	r2, [r7, #4]
 8113e04:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8113e06:	687b      	ldr	r3, [r7, #4]
 8113e08:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8113e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 8113e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8113e10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8113e12:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8113e14:	687b      	ldr	r3, [r7, #4]
 8113e16:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8113e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113e1a:	3304      	adds	r3, #4
 8113e1c:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8113e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113e20:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8113e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113e24:	4a1f      	ldr	r2, [pc, #124]	@ (8113ea4 <_tx_byte_pool_create+0x11c>)
 8113e26:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8113e28:	68fb      	ldr	r3, [r7, #12]
 8113e2a:	2200      	movs	r2, #0
 8113e2c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8113e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8113e32:	61bb      	str	r3, [r7, #24]
    return(posture);
 8113e34:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8113e36:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8113e38:	b672      	cpsid	i
    return(int_posture);
 8113e3a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8113e3c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8113e3e:	68fb      	ldr	r3, [r7, #12]
 8113e40:	4a19      	ldr	r2, [pc, #100]	@ (8113ea8 <_tx_byte_pool_create+0x120>)
 8113e42:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8113e44:	4b19      	ldr	r3, [pc, #100]	@ (8113eac <_tx_byte_pool_create+0x124>)
 8113e46:	681b      	ldr	r3, [r3, #0]
 8113e48:	2b00      	cmp	r3, #0
 8113e4a:	d109      	bne.n	8113e60 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8113e4c:	4a18      	ldr	r2, [pc, #96]	@ (8113eb0 <_tx_byte_pool_create+0x128>)
 8113e4e:	68fb      	ldr	r3, [r7, #12]
 8113e50:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8113e52:	68fb      	ldr	r3, [r7, #12]
 8113e54:	68fa      	ldr	r2, [r7, #12]
 8113e56:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8113e58:	68fb      	ldr	r3, [r7, #12]
 8113e5a:	68fa      	ldr	r2, [r7, #12]
 8113e5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8113e5e:	e011      	b.n	8113e84 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8113e60:	4b13      	ldr	r3, [pc, #76]	@ (8113eb0 <_tx_byte_pool_create+0x128>)
 8113e62:	681b      	ldr	r3, [r3, #0]
 8113e64:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8113e66:	6a3b      	ldr	r3, [r7, #32]
 8113e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8113e6a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8113e6c:	6a3b      	ldr	r3, [r7, #32]
 8113e6e:	68fa      	ldr	r2, [r7, #12]
 8113e70:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8113e72:	69fb      	ldr	r3, [r7, #28]
 8113e74:	68fa      	ldr	r2, [r7, #12]
 8113e76:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8113e78:	68fb      	ldr	r3, [r7, #12]
 8113e7a:	69fa      	ldr	r2, [r7, #28]
 8113e7c:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8113e7e:	68fb      	ldr	r3, [r7, #12]
 8113e80:	6a3a      	ldr	r2, [r7, #32]
 8113e82:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8113e84:	4b09      	ldr	r3, [pc, #36]	@ (8113eac <_tx_byte_pool_create+0x124>)
 8113e86:	681b      	ldr	r3, [r3, #0]
 8113e88:	3301      	adds	r3, #1
 8113e8a:	4a08      	ldr	r2, [pc, #32]	@ (8113eac <_tx_byte_pool_create+0x124>)
 8113e8c:	6013      	str	r3, [r2, #0]
 8113e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113e90:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8113e92:	693b      	ldr	r3, [r7, #16]
 8113e94:	f383 8810 	msr	PRIMASK, r3
}
 8113e98:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8113e9a:	2300      	movs	r3, #0
}
 8113e9c:	4618      	mov	r0, r3
 8113e9e:	3738      	adds	r7, #56	@ 0x38
 8113ea0:	46bd      	mov	sp, r7
 8113ea2:	bd80      	pop	{r7, pc}
 8113ea4:	ffffeeee 	.word	0xffffeeee
 8113ea8:	42595445 	.word	0x42595445
 8113eac:	2005811c 	.word	0x2005811c
 8113eb0:	20058118 	.word	0x20058118

08113eb4 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8113eb4:	b480      	push	{r7}
 8113eb6:	b097      	sub	sp, #92	@ 0x5c
 8113eb8:	af00      	add	r7, sp, #0
 8113eba:	6078      	str	r0, [r7, #4]
 8113ebc:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8113ebe:	2300      	movs	r3, #0
 8113ec0:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8113ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8113ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8113ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8113eca:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8113ecc:	b672      	cpsid	i
    return(int_posture);
 8113ece:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8113ed0:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8113ed2:	687b      	ldr	r3, [r7, #4]
 8113ed4:	689a      	ldr	r2, [r3, #8]
 8113ed6:	687b      	ldr	r3, [r7, #4]
 8113ed8:	68db      	ldr	r3, [r3, #12]
 8113eda:	3b02      	subs	r3, #2
 8113edc:	00db      	lsls	r3, r3, #3
 8113ede:	4413      	add	r3, r2
 8113ee0:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 8113ee2:	683a      	ldr	r2, [r7, #0]
 8113ee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8113ee6:	429a      	cmp	r2, r3
 8113ee8:	d308      	bcc.n	8113efc <_tx_byte_pool_search+0x48>
 8113eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8113eec:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8113eee:	69fb      	ldr	r3, [r7, #28]
 8113ef0:	f383 8810 	msr	PRIMASK, r3
}
 8113ef4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8113ef6:	2300      	movs	r3, #0
 8113ef8:	653b      	str	r3, [r7, #80]	@ 0x50
 8113efa:	e0dd      	b.n	81140b8 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8113efc:	4b72      	ldr	r3, [pc, #456]	@ (81140c8 <_tx_byte_pool_search+0x214>)
 8113efe:	681b      	ldr	r3, [r3, #0]
 8113f00:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8113f02:	687b      	ldr	r3, [r7, #4]
 8113f04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8113f06:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8113f08:	687b      	ldr	r3, [r7, #4]
 8113f0a:	695b      	ldr	r3, [r3, #20]
 8113f0c:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8113f0e:	687b      	ldr	r3, [r7, #4]
 8113f10:	68db      	ldr	r3, [r3, #12]
 8113f12:	3301      	adds	r3, #1
 8113f14:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 8113f16:	2300      	movs	r3, #0
 8113f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8113f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8113f1c:	3304      	adds	r3, #4
 8113f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8113f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113f22:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8113f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113f26:	681b      	ldr	r3, [r3, #0]
 8113f28:	4a68      	ldr	r2, [pc, #416]	@ (81140cc <_tx_byte_pool_search+0x218>)
 8113f2a:	4293      	cmp	r3, r2
 8113f2c:	d143      	bne.n	8113fb6 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8113f2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8113f30:	2b00      	cmp	r3, #0
 8113f32:	d104      	bne.n	8113f3e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8113f34:	687b      	ldr	r3, [r7, #4]
 8113f36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8113f38:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8113f3a:	2301      	movs	r3, #1
 8113f3c:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8113f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8113f40:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 8113f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113f44:	681b      	ldr	r3, [r3, #0]
 8113f46:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8113f48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8113f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8113f4c:	1ad3      	subs	r3, r2, r3
 8113f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8113f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8113f52:	3b08      	subs	r3, #8
 8113f54:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8113f56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8113f58:	683b      	ldr	r3, [r7, #0]
 8113f5a:	429a      	cmp	r2, r3
 8113f5c:	d257      	bcs.n	811400e <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8113f5e:	2300      	movs	r3, #0
 8113f60:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8113f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8113f64:	3304      	adds	r3, #4
 8113f66:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8113f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113f6a:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8113f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113f6e:	681b      	ldr	r3, [r3, #0]
 8113f70:	4a56      	ldr	r2, [pc, #344]	@ (81140cc <_tx_byte_pool_search+0x218>)
 8113f72:	4293      	cmp	r3, r2
 8113f74:	d113      	bne.n	8113f9e <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8113f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8113f78:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8113f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113f7c:	681a      	ldr	r2, [r3, #0]
 8113f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113f80:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8113f82:	687b      	ldr	r3, [r7, #4]
 8113f84:	68db      	ldr	r3, [r3, #12]
 8113f86:	1e5a      	subs	r2, r3, #1
 8113f88:	687b      	ldr	r3, [r7, #4]
 8113f8a:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8113f8c:	687b      	ldr	r3, [r7, #4]
 8113f8e:	695b      	ldr	r3, [r3, #20]
 8113f90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8113f92:	429a      	cmp	r2, r3
 8113f94:	d114      	bne.n	8113fc0 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8113f96:	687b      	ldr	r3, [r7, #4]
 8113f98:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8113f9a:	615a      	str	r2, [r3, #20]
 8113f9c:	e010      	b.n	8113fc0 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8113f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8113fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 8113fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113fa4:	681b      	ldr	r3, [r3, #0]
 8113fa6:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8113fa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113faa:	2b00      	cmp	r3, #0
 8113fac:	d008      	beq.n	8113fc0 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8113fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113fb0:	3b01      	subs	r3, #1
 8113fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8113fb4:	e004      	b.n	8113fc0 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8113fb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8113fb8:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 8113fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113fbc:	681b      	ldr	r3, [r3, #0]
 8113fbe:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8113fc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113fc2:	2b00      	cmp	r3, #0
 8113fc4:	d002      	beq.n	8113fcc <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8113fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8113fc8:	3b01      	subs	r3, #1
 8113fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8113fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8113fce:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8113fd0:	693b      	ldr	r3, [r7, #16]
 8113fd2:	f383 8810 	msr	PRIMASK, r3
}
 8113fd6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8113fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8113fdc:	61bb      	str	r3, [r7, #24]
    return(posture);
 8113fde:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8113fe0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8113fe2:	b672      	cpsid	i
    return(int_posture);
 8113fe4:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8113fe6:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8113fe8:	687b      	ldr	r3, [r7, #4]
 8113fea:	6a1b      	ldr	r3, [r3, #32]
 8113fec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8113fee:	429a      	cmp	r2, r3
 8113ff0:	d009      	beq.n	8114006 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8113ff2:	687b      	ldr	r3, [r7, #4]
 8113ff4:	695b      	ldr	r3, [r3, #20]
 8113ff6:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8113ff8:	687b      	ldr	r3, [r7, #4]
 8113ffa:	68db      	ldr	r3, [r3, #12]
 8113ffc:	3301      	adds	r3, #1
 8113ffe:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8114000:	687b      	ldr	r3, [r7, #4]
 8114002:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8114004:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8114006:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8114008:	2b00      	cmp	r3, #0
 811400a:	d186      	bne.n	8113f1a <_tx_byte_pool_search+0x66>
 811400c:	e000      	b.n	8114010 <_tx_byte_pool_search+0x15c>
                    break;
 811400e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8114010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8114012:	2b00      	cmp	r3, #0
 8114014:	d048      	beq.n	81140a8 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8114016:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8114018:	683b      	ldr	r3, [r7, #0]
 811401a:	1ad3      	subs	r3, r2, r3
 811401c:	2b13      	cmp	r3, #19
 811401e:	d91e      	bls.n	811405e <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8114020:	683b      	ldr	r3, [r7, #0]
 8114022:	3308      	adds	r3, #8
 8114024:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8114026:	4413      	add	r3, r2
 8114028:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 811402a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811402c:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 811402e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8114030:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8114032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114034:	681a      	ldr	r2, [r3, #0]
 8114036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114038:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 811403a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811403c:	3304      	adds	r3, #4
 811403e:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8114040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114042:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8114044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8114046:	4a21      	ldr	r2, [pc, #132]	@ (81140cc <_tx_byte_pool_search+0x218>)
 8114048:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 811404a:	687b      	ldr	r3, [r7, #4]
 811404c:	68db      	ldr	r3, [r3, #12]
 811404e:	1c5a      	adds	r2, r3, #1
 8114050:	687b      	ldr	r3, [r7, #4]
 8114052:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8114054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8114058:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 811405a:	683b      	ldr	r3, [r7, #0]
 811405c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 811405e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8114060:	3304      	adds	r3, #4
 8114062:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8114064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114066:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8114068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811406a:	687a      	ldr	r2, [r7, #4]
 811406c:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 811406e:	687b      	ldr	r3, [r7, #4]
 8114070:	689a      	ldr	r2, [r3, #8]
 8114072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8114074:	1ad3      	subs	r3, r2, r3
 8114076:	f1a3 0208 	sub.w	r2, r3, #8
 811407a:	687b      	ldr	r3, [r7, #4]
 811407c:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 811407e:	687b      	ldr	r3, [r7, #4]
 8114080:	695b      	ldr	r3, [r3, #20]
 8114082:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8114084:	429a      	cmp	r2, r3
 8114086:	d105      	bne.n	8114094 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8114088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811408a:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 811408c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811408e:	681a      	ldr	r2, [r3, #0]
 8114090:	687b      	ldr	r3, [r7, #4]
 8114092:	615a      	str	r2, [r3, #20]
 8114094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8114096:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114098:	68fb      	ldr	r3, [r7, #12]
 811409a:	f383 8810 	msr	PRIMASK, r3
}
 811409e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 81140a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81140a2:	3308      	adds	r3, #8
 81140a4:	653b      	str	r3, [r7, #80]	@ 0x50
 81140a6:	e007      	b.n	81140b8 <_tx_byte_pool_search+0x204>
 81140a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81140aa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81140ac:	68bb      	ldr	r3, [r7, #8]
 81140ae:	f383 8810 	msr	PRIMASK, r3
}
 81140b2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 81140b4:	2300      	movs	r3, #0
 81140b6:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 81140b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 81140ba:	4618      	mov	r0, r3
 81140bc:	375c      	adds	r7, #92	@ 0x5c
 81140be:	46bd      	mov	sp, r7
 81140c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81140c4:	4770      	bx	lr
 81140c6:	bf00      	nop
 81140c8:	20058128 	.word	0x20058128
 81140cc:	ffffeeee 	.word	0xffffeeee

081140d0 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 81140d0:	b580      	push	{r7, lr}
 81140d2:	b08e      	sub	sp, #56	@ 0x38
 81140d4:	af00      	add	r7, sp, #0
 81140d6:	6078      	str	r0, [r7, #4]
 81140d8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 81140da:	f3ef 8310 	mrs	r3, PRIMASK
 81140de:	61fb      	str	r3, [r7, #28]
    return(posture);
 81140e0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 81140e2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 81140e4:	b672      	cpsid	i
    return(int_posture);
 81140e6:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 81140e8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 81140ea:	687b      	ldr	r3, [r7, #4]
 81140ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81140ee:	4a38      	ldr	r2, [pc, #224]	@ (81141d0 <_tx_event_flags_cleanup+0x100>)
 81140f0:	4293      	cmp	r3, r2
 81140f2:	d162      	bne.n	81141ba <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 81140f4:	687b      	ldr	r3, [r7, #4]
 81140f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81140fa:	683a      	ldr	r2, [r7, #0]
 81140fc:	429a      	cmp	r2, r3
 81140fe:	d15c      	bne.n	81141ba <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8114100:	687b      	ldr	r3, [r7, #4]
 8114102:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8114104:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 8114106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114108:	2b00      	cmp	r3, #0
 811410a:	d056      	beq.n	81141ba <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 811410c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811410e:	681b      	ldr	r3, [r3, #0]
 8114110:	4a30      	ldr	r2, [pc, #192]	@ (81141d4 <_tx_event_flags_cleanup+0x104>)
 8114112:	4293      	cmp	r3, r2
 8114114:	d151      	bne.n	81141ba <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8114116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114118:	695b      	ldr	r3, [r3, #20]
 811411a:	2b00      	cmp	r3, #0
 811411c:	d04d      	beq.n	81141ba <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 811411e:	687b      	ldr	r3, [r7, #4]
 8114120:	2200      	movs	r2, #0
 8114122:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8114124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114126:	695b      	ldr	r3, [r3, #20]
 8114128:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 811412a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811412c:	691b      	ldr	r3, [r3, #16]
 811412e:	62bb      	str	r3, [r7, #40]	@ 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 8114130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114132:	2b00      	cmp	r3, #0
 8114134:	d020      	beq.n	8114178 <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 8114136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114138:	3b01      	subs	r3, #1
 811413a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 811413c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811413e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8114140:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8114142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114144:	2b00      	cmp	r3, #0
 8114146:	d103      	bne.n	8114150 <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8114148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811414a:	2200      	movs	r2, #0
 811414c:	611a      	str	r2, [r3, #16]
 811414e:	e016      	b.n	811417e <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8114150:	687b      	ldr	r3, [r7, #4]
 8114152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114154:	627b      	str	r3, [r7, #36]	@ 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8114156:	687b      	ldr	r3, [r7, #4]
 8114158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811415a:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 811415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811415e:	6a3a      	ldr	r2, [r7, #32]
 8114160:	675a      	str	r2, [r3, #116]	@ 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8114162:	6a3b      	ldr	r3, [r7, #32]
 8114164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8114166:	671a      	str	r2, [r3, #112]	@ 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 8114168:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811416a:	687b      	ldr	r3, [r7, #4]
 811416c:	429a      	cmp	r2, r3
 811416e:	d106      	bne.n	811417e <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 8114170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8114174:	611a      	str	r2, [r3, #16]
 8114176:	e002      	b.n	811417e <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8114178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811417a:	2201      	movs	r2, #1
 811417c:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 811417e:	687b      	ldr	r3, [r7, #4]
 8114180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8114182:	2b07      	cmp	r3, #7
 8114184:	d119      	bne.n	81141ba <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 8114186:	687b      	ldr	r3, [r7, #4]
 8114188:	2207      	movs	r2, #7
 811418a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 811418e:	4b12      	ldr	r3, [pc, #72]	@ (81141d8 <_tx_event_flags_cleanup+0x108>)
 8114190:	681b      	ldr	r3, [r3, #0]
 8114192:	3301      	adds	r3, #1
 8114194:	4a10      	ldr	r2, [pc, #64]	@ (81141d8 <_tx_event_flags_cleanup+0x108>)
 8114196:	6013      	str	r3, [r2, #0]
 8114198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811419a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811419c:	68fb      	ldr	r3, [r7, #12]
 811419e:	f383 8810 	msr	PRIMASK, r3
}
 81141a2:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 81141a4:	6878      	ldr	r0, [r7, #4]
 81141a6:	f001 fc53 	bl	8115a50 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 81141aa:	f3ef 8310 	mrs	r3, PRIMASK
 81141ae:	617b      	str	r3, [r7, #20]
    return(posture);
 81141b0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 81141b2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 81141b4:	b672      	cpsid	i
    return(int_posture);
 81141b6:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 81141b8:	637b      	str	r3, [r7, #52]	@ 0x34
 81141ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81141bc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81141be:	68bb      	ldr	r3, [r7, #8]
 81141c0:	f383 8810 	msr	PRIMASK, r3
}
 81141c4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 81141c6:	bf00      	nop
 81141c8:	3738      	adds	r7, #56	@ 0x38
 81141ca:	46bd      	mov	sp, r7
 81141cc:	bd80      	pop	{r7, pc}
 81141ce:	bf00      	nop
 81141d0:	081140d1 	.word	0x081140d1
 81141d4:	4456444e 	.word	0x4456444e
 81141d8:	200581c0 	.word	0x200581c0

081141dc <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 81141dc:	b580      	push	{r7, lr}
 81141de:	b088      	sub	sp, #32
 81141e0:	af00      	add	r7, sp, #0
 81141e2:	6078      	str	r0, [r7, #4]
 81141e4:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 81141e6:	2224      	movs	r2, #36	@ 0x24
 81141e8:	2100      	movs	r1, #0
 81141ea:	6878      	ldr	r0, [r7, #4]
 81141ec:	f002 ff3c 	bl	8117068 <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 81141f0:	687b      	ldr	r3, [r7, #4]
 81141f2:	683a      	ldr	r2, [r7, #0]
 81141f4:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 81141f6:	f3ef 8310 	mrs	r3, PRIMASK
 81141fa:	613b      	str	r3, [r7, #16]
    return(posture);
 81141fc:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 81141fe:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8114200:	b672      	cpsid	i
    return(int_posture);
 8114202:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 8114204:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 8114206:	687b      	ldr	r3, [r7, #4]
 8114208:	4a18      	ldr	r2, [pc, #96]	@ (811426c <_tx_event_flags_create+0x90>)
 811420a:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 811420c:	4b18      	ldr	r3, [pc, #96]	@ (8114270 <_tx_event_flags_create+0x94>)
 811420e:	681b      	ldr	r3, [r3, #0]
 8114210:	2b00      	cmp	r3, #0
 8114212:	d109      	bne.n	8114228 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 8114214:	4a17      	ldr	r2, [pc, #92]	@ (8114274 <_tx_event_flags_create+0x98>)
 8114216:	687b      	ldr	r3, [r7, #4]
 8114218:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 811421a:	687b      	ldr	r3, [r7, #4]
 811421c:	687a      	ldr	r2, [r7, #4]
 811421e:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 8114220:	687b      	ldr	r3, [r7, #4]
 8114222:	687a      	ldr	r2, [r7, #4]
 8114224:	61da      	str	r2, [r3, #28]
 8114226:	e011      	b.n	811424c <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 8114228:	4b12      	ldr	r3, [pc, #72]	@ (8114274 <_tx_event_flags_create+0x98>)
 811422a:	681b      	ldr	r3, [r3, #0]
 811422c:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 811422e:	69bb      	ldr	r3, [r7, #24]
 8114230:	69db      	ldr	r3, [r3, #28]
 8114232:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 8114234:	69bb      	ldr	r3, [r7, #24]
 8114236:	687a      	ldr	r2, [r7, #4]
 8114238:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 811423a:	697b      	ldr	r3, [r7, #20]
 811423c:	687a      	ldr	r2, [r7, #4]
 811423e:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 8114240:	687b      	ldr	r3, [r7, #4]
 8114242:	697a      	ldr	r2, [r7, #20]
 8114244:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 8114246:	687b      	ldr	r3, [r7, #4]
 8114248:	69ba      	ldr	r2, [r7, #24]
 811424a:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 811424c:	4b08      	ldr	r3, [pc, #32]	@ (8114270 <_tx_event_flags_create+0x94>)
 811424e:	681b      	ldr	r3, [r3, #0]
 8114250:	3301      	adds	r3, #1
 8114252:	4a07      	ldr	r2, [pc, #28]	@ (8114270 <_tx_event_flags_create+0x94>)
 8114254:	6013      	str	r3, [r2, #0]
 8114256:	69fb      	ldr	r3, [r7, #28]
 8114258:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811425a:	68bb      	ldr	r3, [r7, #8]
 811425c:	f383 8810 	msr	PRIMASK, r3
}
 8114260:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8114262:	2300      	movs	r3, #0
}
 8114264:	4618      	mov	r0, r3
 8114266:	3720      	adds	r7, #32
 8114268:	46bd      	mov	sp, r7
 811426a:	bd80      	pop	{r7, pc}
 811426c:	4456444e 	.word	0x4456444e
 8114270:	20058104 	.word	0x20058104
 8114274:	20058100 	.word	0x20058100

08114278 <_tx_event_flags_get>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8114278:	b580      	push	{r7, lr}
 811427a:	b096      	sub	sp, #88	@ 0x58
 811427c:	af00      	add	r7, sp, #0
 811427e:	60f8      	str	r0, [r7, #12]
 8114280:	60b9      	str	r1, [r7, #8]
 8114282:	607a      	str	r2, [r7, #4]
 8114284:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8114286:	f3ef 8310 	mrs	r3, PRIMASK
 811428a:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 811428c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 811428e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8114290:	b672      	cpsid	i
    return(int_posture);
 8114292:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 8114294:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 8114296:	68fb      	ldr	r3, [r7, #12]
 8114298:	689b      	ldr	r3, [r3, #8]
 811429a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Return the actual event flags and apply delayed clearing.  */
    *actual_flags_ptr =  current_flags & ~group_ptr -> tx_event_flags_group_delayed_clear;
 811429c:	68fb      	ldr	r3, [r7, #12]
 811429e:	6a1b      	ldr	r3, [r3, #32]
 81142a0:	43da      	mvns	r2, r3
 81142a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81142a4:	401a      	ands	r2, r3
 81142a6:	683b      	ldr	r3, [r7, #0]
 81142a8:	601a      	str	r2, [r3, #0]

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 81142aa:	687b      	ldr	r3, [r7, #4]
 81142ac:	f003 0302 	and.w	r3, r3, #2
 81142b0:	643b      	str	r3, [r7, #64]	@ 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 81142b2:	68fb      	ldr	r3, [r7, #12]
 81142b4:	6a1b      	ldr	r3, [r3, #32]
 81142b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 81142b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81142ba:	2b00      	cmp	r3, #0
 81142bc:	d004      	beq.n	81142c8 <_tx_event_flags_get+0x50>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 81142be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81142c0:	43db      	mvns	r3, r3
 81142c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 81142c4:	4013      	ands	r3, r2
 81142c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 81142c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81142ca:	2b02      	cmp	r3, #2
 81142cc:	d10a      	bne.n	81142e4 <_tx_event_flags_get+0x6c>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 81142ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 81142d0:	68bb      	ldr	r3, [r7, #8]
 81142d2:	4013      	ands	r3, r2
 81142d4:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 81142d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81142d8:	68bb      	ldr	r3, [r7, #8]
 81142da:	429a      	cmp	r2, r3
 81142dc:	d006      	beq.n	81142ec <_tx_event_flags_get+0x74>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 81142de:	2300      	movs	r3, #0
 81142e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 81142e2:	e003      	b.n	81142ec <_tx_event_flags_get+0x74>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 81142e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 81142e6:	68bb      	ldr	r3, [r7, #8]
 81142e8:	4013      	ands	r3, r2
 81142ea:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 81142ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81142ee:	2b00      	cmp	r3, #0
 81142f0:	d026      	beq.n	8114340 <_tx_event_flags_get+0xc8>
    {

        /* Yes, this request can be handled immediately.  */

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 81142f2:	687b      	ldr	r3, [r7, #4]
 81142f4:	f003 0301 	and.w	r3, r3, #1
 81142f8:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 81142fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81142fc:	2b01      	cmp	r3, #1
 81142fe:	d11c      	bne.n	811433a <_tx_event_flags_get+0xc2>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 8114300:	2300      	movs	r3, #0
 8114302:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8114304:	68fb      	ldr	r3, [r7, #12]
 8114306:	695b      	ldr	r3, [r3, #20]
 8114308:	2b00      	cmp	r3, #0
 811430a:	d005      	beq.n	8114318 <_tx_event_flags_get+0xa0>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 811430c:	68fb      	ldr	r3, [r7, #12]
 811430e:	691b      	ldr	r3, [r3, #16]
 8114310:	2b00      	cmp	r3, #0
 8114312:	d101      	bne.n	8114318 <_tx_event_flags_get+0xa0>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 8114314:	2301      	movs	r3, #1
 8114316:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 8114318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811431a:	2b01      	cmp	r3, #1
 811431c:	d106      	bne.n	811432c <_tx_event_flags_get+0xb4>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 811431e:	68fb      	ldr	r3, [r7, #12]
 8114320:	6a1a      	ldr	r2, [r3, #32]
 8114322:	68bb      	ldr	r3, [r7, #8]
 8114324:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 8114326:	68fb      	ldr	r3, [r7, #12]
 8114328:	621a      	str	r2, [r3, #32]
 811432a:	e006      	b.n	811433a <_tx_event_flags_get+0xc2>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 811432c:	68fb      	ldr	r3, [r7, #12]
 811432e:	689a      	ldr	r2, [r3, #8]
 8114330:	68bb      	ldr	r3, [r7, #8]
 8114332:	43db      	mvns	r3, r3
 8114334:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 8114336:	68fb      	ldr	r3, [r7, #12]
 8114338:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 811433a:	2300      	movs	r3, #0
 811433c:	653b      	str	r3, [r7, #80]	@ 0x50
 811433e:	e073      	b.n	8114428 <_tx_event_flags_get+0x1b0>
#endif
    else
    {
        /* flags_satisfied is 0.  */
        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8114340:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8114342:	2b00      	cmp	r3, #0
 8114344:	d06e      	beq.n	8114424 <_tx_event_flags_get+0x1ac>
        {

            /* Determine if the preempt disable flag is non-zero OR the requested events is 0.  */
            if ((_tx_thread_preempt_disable != ((UINT) 0)) || (requested_flags == (UINT) 0))
 8114346:	4b3e      	ldr	r3, [pc, #248]	@ (8114440 <_tx_event_flags_get+0x1c8>)
 8114348:	681b      	ldr	r3, [r3, #0]
 811434a:	2b00      	cmp	r3, #0
 811434c:	d102      	bne.n	8114354 <_tx_event_flags_get+0xdc>
 811434e:	68bb      	ldr	r3, [r7, #8]
 8114350:	2b00      	cmp	r3, #0
 8114352:	d102      	bne.n	811435a <_tx_event_flags_get+0xe2>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point,
                   or if requested_flags is 0, return error completion.  */
                status =  TX_NO_EVENTS;
 8114354:	2307      	movs	r3, #7
 8114356:	653b      	str	r3, [r7, #80]	@ 0x50
 8114358:	e066      	b.n	8114428 <_tx_event_flags_get+0x1b0>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 811435a:	4b3a      	ldr	r3, [pc, #232]	@ (8114444 <_tx_event_flags_get+0x1cc>)
 811435c:	681b      	ldr	r3, [r3, #0]
 811435e:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 8114360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114362:	4a39      	ldr	r2, [pc, #228]	@ (8114448 <_tx_event_flags_get+0x1d0>)
 8114364:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 8114366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114368:	68ba      	ldr	r2, [r7, #8]
 811436a:	679a      	str	r2, [r3, #120]	@ 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 811436c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811436e:	687a      	ldr	r2, [r7, #4]
 8114370:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 8114374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114376:	683a      	ldr	r2, [r7, #0]
 8114378:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 811437a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811437c:	68fa      	ldr	r2, [r7, #12]
 811437e:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8114380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114382:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8114386:	1c5a      	adds	r2, r3, #1
 8114388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811438a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 811438e:	68fb      	ldr	r3, [r7, #12]
 8114390:	695b      	ldr	r3, [r3, #20]
 8114392:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8114394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8114396:	2b00      	cmp	r3, #0
 8114398:	d109      	bne.n	81143ae <_tx_event_flags_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 811439a:	68fb      	ldr	r3, [r7, #12]
 811439c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 811439e:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 81143a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81143a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81143a4:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 81143a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81143a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81143aa:	675a      	str	r2, [r3, #116]	@ 0x74
 81143ac:	e011      	b.n	81143d2 <_tx_event_flags_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 81143ae:	68fb      	ldr	r3, [r7, #12]
 81143b0:	691b      	ldr	r3, [r3, #16]
 81143b2:	633b      	str	r3, [r7, #48]	@ 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 81143b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81143b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81143b8:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 81143ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81143bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81143be:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 81143c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81143c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81143c4:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 81143c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81143c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81143ca:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 81143cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81143ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81143d0:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 81143d2:	68fb      	ldr	r3, [r7, #12]
 81143d4:	695b      	ldr	r3, [r3, #20]
 81143d6:	1c5a      	adds	r2, r3, #1
 81143d8:	68fb      	ldr	r3, [r7, #12]
 81143da:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 81143dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81143de:	2207      	movs	r2, #7
 81143e0:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 81143e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81143e4:	2201      	movs	r2, #1
 81143e6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 81143e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81143ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 81143ec:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 81143ee:	4b14      	ldr	r3, [pc, #80]	@ (8114440 <_tx_event_flags_get+0x1c8>)
 81143f0:	681b      	ldr	r3, [r3, #0]
 81143f2:	3301      	adds	r3, #1
 81143f4:	4a12      	ldr	r2, [pc, #72]	@ (8114440 <_tx_event_flags_get+0x1c8>)
 81143f6:	6013      	str	r3, [r2, #0]
 81143f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81143fa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81143fc:	697b      	ldr	r3, [r7, #20]
 81143fe:	f383 8810 	msr	PRIMASK, r3
}
 8114402:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8114404:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8114406:	f001 fc23 	bl	8115c50 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 811440a:	f3ef 8310 	mrs	r3, PRIMASK
 811440e:	61fb      	str	r3, [r7, #28]
    return(posture);
 8114410:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8114412:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8114414:	b672      	cpsid	i
    return(int_posture);
 8114416:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 8114418:	657b      	str	r3, [r7, #84]	@ 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 811441a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811441c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8114420:	653b      	str	r3, [r7, #80]	@ 0x50
 8114422:	e001      	b.n	8114428 <_tx_event_flags_get+0x1b0>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 8114424:	2307      	movs	r3, #7
 8114426:	653b      	str	r3, [r7, #80]	@ 0x50
 8114428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811442a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811442c:	693b      	ldr	r3, [r7, #16]
 811442e:	f383 8810 	msr	PRIMASK, r3
}
 8114432:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8114434:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8114436:	4618      	mov	r0, r3
 8114438:	3758      	adds	r7, #88	@ 0x58
 811443a:	46bd      	mov	sp, r7
 811443c:	bd80      	pop	{r7, pc}
 811443e:	bf00      	nop
 8114440:	200581c0 	.word	0x200581c0
 8114444:	20058128 	.word	0x20058128
 8114448:	081140d1 	.word	0x081140d1

0811444c <_tx_event_flags_set>:
/*                                            check logic, resulting in   */
/*                                            version 6.1.11              */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 811444c:	b580      	push	{r7, lr}
 811444e:	b0a6      	sub	sp, #152	@ 0x98
 8114450:	af00      	add	r7, sp, #0
 8114452:	60f8      	str	r0, [r7, #12]
 8114454:	60b9      	str	r1, [r7, #8]
 8114456:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8114458:	f3ef 8310 	mrs	r3, PRIMASK
 811445c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 811445e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 8114460:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8114462:	b672      	cpsid	i
    return(int_posture);
 8114464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 8114466:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 811446a:	687b      	ldr	r3, [r7, #4]
 811446c:	f003 0302 	and.w	r3, r3, #2
 8114470:	2b00      	cmp	r3, #0
 8114472:	d023      	beq.n	81144bc <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 8114474:	2300      	movs	r3, #0
 8114476:	673b      	str	r3, [r7, #112]	@ 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8114478:	68fb      	ldr	r3, [r7, #12]
 811447a:	695b      	ldr	r3, [r3, #20]
 811447c:	2b00      	cmp	r3, #0
 811447e:	d005      	beq.n	811448c <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8114480:	68fb      	ldr	r3, [r7, #12]
 8114482:	691b      	ldr	r3, [r3, #16]
 8114484:	2b00      	cmp	r3, #0
 8114486:	d101      	bne.n	811448c <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 8114488:	2301      	movs	r3, #1
 811448a:	673b      	str	r3, [r7, #112]	@ 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 811448c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 811448e:	2b01      	cmp	r3, #1
 8114490:	d107      	bne.n	81144a2 <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 8114492:	68fb      	ldr	r3, [r7, #12]
 8114494:	6a1a      	ldr	r2, [r3, #32]
 8114496:	68bb      	ldr	r3, [r7, #8]
 8114498:	43db      	mvns	r3, r3
 811449a:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 811449c:	68fb      	ldr	r3, [r7, #12]
 811449e:	621a      	str	r2, [r3, #32]
 81144a0:	e005      	b.n	81144ae <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 81144a2:	68fb      	ldr	r3, [r7, #12]
 81144a4:	689a      	ldr	r2, [r3, #8]
 81144a6:	68bb      	ldr	r3, [r7, #8]
 81144a8:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 81144aa:	68fb      	ldr	r3, [r7, #12]
 81144ac:	609a      	str	r2, [r3, #8]
 81144ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 81144b2:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81144b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81144b6:	f383 8810 	msr	PRIMASK, r3
}
 81144ba:	e1d2      	b.n	8114862 <_tx_event_flags_set+0x416>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 81144bc:	68fb      	ldr	r3, [r7, #12]
 81144be:	689a      	ldr	r2, [r3, #8]
 81144c0:	68bb      	ldr	r3, [r7, #8]
 81144c2:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 81144c4:	68fb      	ldr	r3, [r7, #12]
 81144c6:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 81144c8:	68fb      	ldr	r3, [r7, #12]
 81144ca:	6a1b      	ldr	r3, [r3, #32]
 81144cc:	2b00      	cmp	r3, #0
 81144ce:	d006      	beq.n	81144de <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 81144d0:	68fb      	ldr	r3, [r7, #12]
 81144d2:	6a1a      	ldr	r2, [r3, #32]
 81144d4:	68bb      	ldr	r3, [r7, #8]
 81144d6:	43db      	mvns	r3, r3
 81144d8:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 81144da:	68fb      	ldr	r3, [r7, #12]
 81144dc:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 81144de:	2300      	movs	r3, #0
 81144e0:	677b      	str	r3, [r7, #116]	@ 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 81144e2:	68fb      	ldr	r3, [r7, #12]
 81144e4:	695b      	ldr	r3, [r3, #20]
 81144e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 81144ea:	68fb      	ldr	r3, [r7, #12]
 81144ec:	691b      	ldr	r3, [r3, #16]
 81144ee:	2b00      	cmp	r3, #0
 81144f0:	f000 81a4 	beq.w	811483c <_tx_event_flags_set+0x3f0>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 81144f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 81144f8:	2b01      	cmp	r3, #1
 81144fa:	d167      	bne.n	81145cc <_tx_event_flags_set+0x180>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 81144fc:	68fb      	ldr	r3, [r7, #12]
 81144fe:	691b      	ldr	r3, [r3, #16]
 8114500:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 8114504:	68fb      	ldr	r3, [r7, #12]
 8114506:	689b      	ldr	r3, [r3, #8]
 8114508:	67fb      	str	r3, [r7, #124]	@ 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 811450a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 811450e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8114510:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 8114512:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8114516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 811451a:	667b      	str	r3, [r7, #100]	@ 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 811451c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 811451e:	f003 0302 	and.w	r3, r3, #2
 8114522:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 8114524:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8114526:	2b02      	cmp	r3, #2
 8114528:	d10a      	bne.n	8114540 <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 811452a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 811452c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 811452e:	4013      	ands	r3, r2
 8114530:	67bb      	str	r3, [r7, #120]	@ 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 8114532:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8114534:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8114536:	429a      	cmp	r2, r3
 8114538:	d006      	beq.n	8114548 <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 811453a:	2300      	movs	r3, #0
 811453c:	67bb      	str	r3, [r7, #120]	@ 0x78
 811453e:	e003      	b.n	8114548 <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 8114540:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8114542:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8114544:	4013      	ands	r3, r2
 8114546:	67bb      	str	r3, [r7, #120]	@ 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 8114548:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 811454a:	2b00      	cmp	r3, #0
 811454c:	f000 817d 	beq.w	811484a <_tx_event_flags_set+0x3fe>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8114550:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8114554:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8114556:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    *suspend_info_ptr =  current_event_flags;
 8114558:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 811455a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 811455c:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 811455e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8114560:	f003 0301 	and.w	r3, r3, #1
 8114564:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 8114566:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8114568:	2b01      	cmp	r3, #1
 811456a:	d106      	bne.n	811457a <_tx_event_flags_set+0x12e>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 811456c:	68fb      	ldr	r3, [r7, #12]
 811456e:	689a      	ldr	r2, [r3, #8]
 8114570:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8114572:	43db      	mvns	r3, r3
 8114574:	401a      	ands	r2, r3
 8114576:	68fb      	ldr	r3, [r7, #12]
 8114578:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 811457a:	68fb      	ldr	r3, [r7, #12]
 811457c:	2200      	movs	r2, #0
 811457e:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 8114580:	68fb      	ldr	r3, [r7, #12]
 8114582:	2200      	movs	r2, #0
 8114584:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8114586:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 811458a:	2200      	movs	r2, #0
 811458c:	669a      	str	r2, [r3, #104]	@ 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 811458e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8114592:	2200      	movs	r2, #0
 8114594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 8114598:	4ba7      	ldr	r3, [pc, #668]	@ (8114838 <_tx_event_flags_set+0x3ec>)
 811459a:	681b      	ldr	r3, [r3, #0]
 811459c:	3301      	adds	r3, #1
 811459e:	4aa6      	ldr	r2, [pc, #664]	@ (8114838 <_tx_event_flags_set+0x3ec>)
 81145a0:	6013      	str	r3, [r2, #0]
 81145a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 81145a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81145a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81145aa:	f383 8810 	msr	PRIMASK, r3
}
 81145ae:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 81145b0:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 81145b4:	f001 fa4c 	bl	8115a50 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 81145b8:	f3ef 8310 	mrs	r3, PRIMASK
 81145bc:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 81145be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 81145c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 81145c2:	b672      	cpsid	i
    return(int_posture);
 81145c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 81145c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81145ca:	e13e      	b.n	811484a <_tx_event_flags_set+0x3fe>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 81145cc:	68fb      	ldr	r3, [r7, #12]
 81145ce:	691b      	ldr	r3, [r3, #16]
 81145d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                thread_ptr =      suspended_list;
 81145d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 81145d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 81145dc:	68fb      	ldr	r3, [r7, #12]
 81145de:	2200      	movs	r2, #0
 81145e0:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 81145e2:	2300      	movs	r3, #0
 81145e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                last_satisfied =  TX_NULL;
 81145e8:	2300      	movs	r3, #0
 81145ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 81145ee:	68fb      	ldr	r3, [r7, #12]
 81145f0:	689b      	ldr	r3, [r3, #8]
 81145f2:	67fb      	str	r3, [r7, #124]	@ 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 81145f4:	4b90      	ldr	r3, [pc, #576]	@ (8114838 <_tx_event_flags_set+0x3ec>)
 81145f6:	681b      	ldr	r3, [r3, #0]
 81145f8:	3301      	adds	r3, #1
 81145fa:	4a8f      	ldr	r2, [pc, #572]	@ (8114838 <_tx_event_flags_set+0x3ec>)
 81145fc:	6013      	str	r3, [r2, #0]

                /* Since we have temporarily disabled preemption globally, set the preempt 
                   check flag to check for any preemption condition - including from 
                   unrelated ISR processing.  */
                preempt_check =  TX_TRUE;
 81145fe:	2301      	movs	r3, #1
 8114600:	677b      	str	r3, [r7, #116]	@ 0x74
 8114602:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8114606:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811460a:	f383 8810 	msr	PRIMASK, r3
}
 811460e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8114610:	f3ef 8310 	mrs	r3, PRIMASK
 8114614:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 8114616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 8114618:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 811461a:	b672      	cpsid	i
    return(int_posture);
 811461c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 811461e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 8114622:	68fb      	ldr	r3, [r7, #12]
 8114624:	68db      	ldr	r3, [r3, #12]
 8114626:	2b00      	cmp	r3, #0
 8114628:	d00f      	beq.n	811464a <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 811462a:	68fb      	ldr	r3, [r7, #12]
 811462c:	2200      	movs	r2, #0
 811462e:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 8114630:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8114634:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8114638:	68fb      	ldr	r3, [r7, #12]
 811463a:	695b      	ldr	r3, [r3, #20]
 811463c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 8114640:	68fb      	ldr	r3, [r7, #12]
 8114642:	689b      	ldr	r3, [r3, #8]
 8114644:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8114646:	4313      	orrs	r3, r2
 8114648:	67fb      	str	r3, [r7, #124]	@ 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 811464a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 811464e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114650:	66fb      	str	r3, [r7, #108]	@ 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8114652:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8114656:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8114658:	66bb      	str	r3, [r7, #104]	@ 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 811465a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 811465e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8114662:	667b      	str	r3, [r7, #100]	@ 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 8114664:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8114666:	f003 0302 	and.w	r3, r3, #2
 811466a:	663b      	str	r3, [r7, #96]	@ 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 811466c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 811466e:	2b02      	cmp	r3, #2
 8114670:	d10a      	bne.n	8114688 <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8114672:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8114674:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8114676:	4013      	ands	r3, r2
 8114678:	67bb      	str	r3, [r7, #120]	@ 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 811467a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 811467c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 811467e:	429a      	cmp	r2, r3
 8114680:	d006      	beq.n	8114690 <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 8114682:	2300      	movs	r3, #0
 8114684:	67bb      	str	r3, [r7, #120]	@ 0x78
 8114686:	e003      	b.n	8114690 <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8114688:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 811468a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 811468c:	4013      	ands	r3, r2
 811468e:	67bb      	str	r3, [r7, #120]	@ 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 8114690:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8114694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8114696:	2b07      	cmp	r3, #7
 8114698:	d001      	beq.n	811469e <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 811469a:	2301      	movs	r3, #1
 811469c:	67bb      	str	r3, [r7, #120]	@ 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 811469e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 81146a0:	2b00      	cmp	r3, #0
 81146a2:	d069      	beq.n	8114778 <_tx_event_flags_set+0x32c>

                        /* Yes, this request can be handled now.  */

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 81146a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 81146a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81146aa:	2b07      	cmp	r3, #7
 81146ac:	d11d      	bne.n	81146ea <_tx_event_flags_set+0x29e>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 81146ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 81146b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81146b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            *suspend_info_ptr =  current_event_flags;
 81146b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81146b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 81146ba:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 81146bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 81146be:	f003 0301 	and.w	r3, r3, #1
 81146c2:	65bb      	str	r3, [r7, #88]	@ 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 81146c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 81146c6:	2b01      	cmp	r3, #1
 81146c8:	d106      	bne.n	81146d8 <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 81146ca:	68fb      	ldr	r3, [r7, #12]
 81146cc:	689a      	ldr	r2, [r3, #8]
 81146ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81146d0:	43db      	mvns	r3, r3
 81146d2:	401a      	ands	r2, r3
 81146d4:	68fb      	ldr	r3, [r7, #12]
 81146d6:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 81146d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 81146dc:	2200      	movs	r2, #0
 81146de:	669a      	str	r2, [r3, #104]	@ 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 81146e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 81146e4:	2200      	movs	r2, #0
 81146e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 81146ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 81146ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81146f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 81146f4:	429a      	cmp	r2, r3
 81146f6:	d103      	bne.n	8114700 <_tx_event_flags_set+0x2b4>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 81146f8:	2300      	movs	r3, #0
 81146fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 81146fe:	e018      	b.n	8114732 <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8114700:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8114704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114706:	657b      	str	r3, [r7, #84]	@ 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8114708:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 811470c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811470e:	653b      	str	r3, [r7, #80]	@ 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8114710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8114712:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8114714:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 8114716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8114718:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 811471a:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 811471c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8114720:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8114724:	429a      	cmp	r2, r3
 8114726:	d104      	bne.n	8114732 <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 8114728:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 811472c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811472e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 8114732:	68fb      	ldr	r3, [r7, #12]
 8114734:	695b      	ldr	r3, [r3, #20]
 8114736:	1e5a      	subs	r2, r3, #1
 8114738:	68fb      	ldr	r3, [r7, #12]
 811473a:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 811473c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8114740:	2b00      	cmp	r3, #0
 8114742:	d10c      	bne.n	811475e <_tx_event_flags_set+0x312>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 8114744:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8114748:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                            last_satisfied =  thread_ptr;
 811474c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8114750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 8114754:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8114758:	2200      	movs	r2, #0
 811475a:	671a      	str	r2, [r3, #112]	@ 0x70
 811475c:	e00c      	b.n	8114778 <_tx_event_flags_set+0x32c>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 811475e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8114762:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8114766:	671a      	str	r2, [r3, #112]	@ 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 8114768:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 811476c:	2200      	movs	r2, #0
 811476e:	671a      	str	r2, [r3, #112]	@ 0x70
                            last_satisfied =                              thread_ptr;
 8114770:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8114774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 8114778:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 811477a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 811477e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8114782:	3b01      	subs	r3, #1
 8114784:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 8114788:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 811478c:	2b00      	cmp	r3, #0
 811478e:	f47f af38 	bne.w	8114602 <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 8114792:	68fb      	ldr	r3, [r7, #12]
 8114794:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8114798:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 811479a:	68fb      	ldr	r3, [r7, #12]
 811479c:	6a1b      	ldr	r3, [r3, #32]
 811479e:	2b00      	cmp	r3, #0
 81147a0:	d00a      	beq.n	81147b8 <_tx_event_flags_set+0x36c>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 81147a2:	68fb      	ldr	r3, [r7, #12]
 81147a4:	689a      	ldr	r2, [r3, #8]
 81147a6:	68fb      	ldr	r3, [r7, #12]
 81147a8:	6a1b      	ldr	r3, [r3, #32]
 81147aa:	43db      	mvns	r3, r3
 81147ac:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 81147ae:	68fb      	ldr	r3, [r7, #12]
 81147b0:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 81147b2:	68fb      	ldr	r3, [r7, #12]
 81147b4:	2200      	movs	r2, #0
 81147b6:	621a      	str	r2, [r3, #32]
 81147b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 81147bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81147be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81147c0:	f383 8810 	msr	PRIMASK, r3
}
 81147c4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 81147c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 81147ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                while(thread_ptr != TX_NULL)
 81147ce:	e01f      	b.n	8114810 <_tx_event_flags_set+0x3c4>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 81147d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 81147d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81147d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 81147d8:	f3ef 8310 	mrs	r3, PRIMASK
 81147dc:	623b      	str	r3, [r7, #32]
    return(posture);
 81147de:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 81147e0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 81147e2:	b672      	cpsid	i
    return(int_posture);
 81147e4:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 81147e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 81147ea:	4b13      	ldr	r3, [pc, #76]	@ (8114838 <_tx_event_flags_set+0x3ec>)
 81147ec:	681b      	ldr	r3, [r3, #0]
 81147ee:	3301      	adds	r3, #1
 81147f0:	4a11      	ldr	r2, [pc, #68]	@ (8114838 <_tx_event_flags_set+0x3ec>)
 81147f2:	6013      	str	r3, [r2, #0]
 81147f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 81147f8:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81147fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81147fc:	f383 8810 	msr	PRIMASK, r3
}
 8114800:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8114802:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8114806:	f001 f923 	bl	8115a50 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 811480a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 811480c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                while(thread_ptr != TX_NULL)
 8114810:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8114814:	2b00      	cmp	r3, #0
 8114816:	d1db      	bne.n	81147d0 <_tx_event_flags_set+0x384>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8114818:	f3ef 8310 	mrs	r3, PRIMASK
 811481c:	61bb      	str	r3, [r7, #24]
    return(posture);
 811481e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8114820:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8114822:	b672      	cpsid	i
    return(int_posture);
 8114824:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 8114826:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 811482a:	4b03      	ldr	r3, [pc, #12]	@ (8114838 <_tx_event_flags_set+0x3ec>)
 811482c:	681b      	ldr	r3, [r3, #0]
 811482e:	3b01      	subs	r3, #1
 8114830:	4a01      	ldr	r2, [pc, #4]	@ (8114838 <_tx_event_flags_set+0x3ec>)
 8114832:	6013      	str	r3, [r2, #0]
 8114834:	e009      	b.n	811484a <_tx_event_flags_set+0x3fe>
 8114836:	bf00      	nop
 8114838:	200581c0 	.word	0x200581c0
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 811483c:	68fb      	ldr	r3, [r7, #12]
 811483e:	695b      	ldr	r3, [r3, #20]
 8114840:	2b00      	cmp	r3, #0
 8114842:	d002      	beq.n	811484a <_tx_event_flags_set+0x3fe>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8114844:	68fb      	ldr	r3, [r7, #12]
 8114846:	2201      	movs	r2, #1
 8114848:	60da      	str	r2, [r3, #12]
 811484a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 811484e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114850:	693b      	ldr	r3, [r7, #16]
 8114852:	f383 8810 	msr	PRIMASK, r3
}
 8114856:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 8114858:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 811485a:	2b01      	cmp	r3, #1
 811485c:	d101      	bne.n	8114862 <_tx_event_flags_set+0x416>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 811485e:	f001 f8bd 	bl	81159dc <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 8114862:	2300      	movs	r3, #0
}
 8114864:	4618      	mov	r0, r3
 8114866:	3798      	adds	r7, #152	@ 0x98
 8114868:	46bd      	mov	sp, r7
 811486a:	bd80      	pop	{r7, pc}

0811486c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 811486c:	b580      	push	{r7, lr}
 811486e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8114870:	f000 ff38 	bl	81156e4 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8114874:	f001 fc18 	bl	81160a8 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8114878:	4b12      	ldr	r3, [pc, #72]	@ (81148c4 <_tx_initialize_high_level+0x58>)
 811487a:	2200      	movs	r2, #0
 811487c:	601a      	str	r2, [r3, #0]
 811487e:	4b12      	ldr	r3, [pc, #72]	@ (81148c8 <_tx_initialize_high_level+0x5c>)
 8114880:	2200      	movs	r2, #0
 8114882:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8114884:	4b11      	ldr	r3, [pc, #68]	@ (81148cc <_tx_initialize_high_level+0x60>)
 8114886:	2200      	movs	r2, #0
 8114888:	601a      	str	r2, [r3, #0]
 811488a:	4b11      	ldr	r3, [pc, #68]	@ (81148d0 <_tx_initialize_high_level+0x64>)
 811488c:	2200      	movs	r2, #0
 811488e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8114890:	4b10      	ldr	r3, [pc, #64]	@ (81148d4 <_tx_initialize_high_level+0x68>)
 8114892:	2200      	movs	r2, #0
 8114894:	601a      	str	r2, [r3, #0]
 8114896:	4b10      	ldr	r3, [pc, #64]	@ (81148d8 <_tx_initialize_high_level+0x6c>)
 8114898:	2200      	movs	r2, #0
 811489a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 811489c:	4b0f      	ldr	r3, [pc, #60]	@ (81148dc <_tx_initialize_high_level+0x70>)
 811489e:	2200      	movs	r2, #0
 81148a0:	601a      	str	r2, [r3, #0]
 81148a2:	4b0f      	ldr	r3, [pc, #60]	@ (81148e0 <_tx_initialize_high_level+0x74>)
 81148a4:	2200      	movs	r2, #0
 81148a6:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 81148a8:	4b0e      	ldr	r3, [pc, #56]	@ (81148e4 <_tx_initialize_high_level+0x78>)
 81148aa:	2200      	movs	r2, #0
 81148ac:	601a      	str	r2, [r3, #0]
 81148ae:	4b0e      	ldr	r3, [pc, #56]	@ (81148e8 <_tx_initialize_high_level+0x7c>)
 81148b0:	2200      	movs	r2, #0
 81148b2:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 81148b4:	4b0d      	ldr	r3, [pc, #52]	@ (81148ec <_tx_initialize_high_level+0x80>)
 81148b6:	2200      	movs	r2, #0
 81148b8:	601a      	str	r2, [r3, #0]
 81148ba:	4b0d      	ldr	r3, [pc, #52]	@ (81148f0 <_tx_initialize_high_level+0x84>)
 81148bc:	2200      	movs	r2, #0
 81148be:	601a      	str	r2, [r3, #0]
#endif
}
 81148c0:	bf00      	nop
 81148c2:	bd80      	pop	{r7, pc}
 81148c4:	200580f0 	.word	0x200580f0
 81148c8:	200580f4 	.word	0x200580f4
 81148cc:	200580f8 	.word	0x200580f8
 81148d0:	200580fc 	.word	0x200580fc
 81148d4:	20058100 	.word	0x20058100
 81148d8:	20058104 	.word	0x20058104
 81148dc:	20058110 	.word	0x20058110
 81148e0:	20058114 	.word	0x20058114
 81148e4:	20058118 	.word	0x20058118
 81148e8:	2005811c 	.word	0x2005811c
 81148ec:	20058108 	.word	0x20058108
 81148f0:	2005810c 	.word	0x2005810c

081148f4 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 81148f4:	b580      	push	{r7, lr}
 81148f6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 81148f8:	4b11      	ldr	r3, [pc, #68]	@ (8114940 <_tx_initialize_kernel_enter+0x4c>)
 81148fa:	681b      	ldr	r3, [r3, #0]
 81148fc:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 8114900:	d00e      	beq.n	8114920 <_tx_initialize_kernel_enter+0x2c>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8114902:	4b0f      	ldr	r3, [pc, #60]	@ (8114940 <_tx_initialize_kernel_enter+0x4c>)
 8114904:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8114908:	601a      	str	r2, [r3, #0]

        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION
 811490a:	f7eb fda5 	bl	8100458 <_tx_thread_secure_stack_initialize>

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 811490e:	f7eb fcbf 	bl	8100290 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8114912:	f7ff ffab 	bl	811486c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8114916:	4b0b      	ldr	r3, [pc, #44]	@ (8114944 <_tx_initialize_kernel_enter+0x50>)
 8114918:	681b      	ldr	r3, [r3, #0]
 811491a:	3301      	adds	r3, #1
 811491c:	4a09      	ldr	r2, [pc, #36]	@ (8114944 <_tx_initialize_kernel_enter+0x50>)
 811491e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8114920:	4b07      	ldr	r3, [pc, #28]	@ (8114940 <_tx_initialize_kernel_enter+0x4c>)
 8114922:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8114926:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8114928:	4b07      	ldr	r3, [pc, #28]	@ (8114948 <_tx_initialize_kernel_enter+0x54>)
 811492a:	681b      	ldr	r3, [r3, #0]
 811492c:	4618      	mov	r0, r3
 811492e:	f7eb ff9f 	bl	8100870 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8114932:	4b03      	ldr	r3, [pc, #12]	@ (8114940 <_tx_initialize_kernel_enter+0x4c>)
 8114934:	2200      	movs	r2, #0
 8114936:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8114938:	f7eb fce6 	bl	8100308 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 811493c:	bf00      	nop
 811493e:	bd80      	pop	{r7, pc}
 8114940:	20050088 	.word	0x20050088
 8114944:	200581c0 	.word	0x200581c0
 8114948:	20058120 	.word	0x20058120

0811494c <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 811494c:	b580      	push	{r7, lr}
 811494e:	b08e      	sub	sp, #56	@ 0x38
 8114950:	af00      	add	r7, sp, #0
 8114952:	6078      	str	r0, [r7, #4]
 8114954:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8114956:	f3ef 8310 	mrs	r3, PRIMASK
 811495a:	623b      	str	r3, [r7, #32]
    return(posture);
 811495c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 811495e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8114960:	b672      	cpsid	i
    return(int_posture);
 8114962:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8114964:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8114966:	687b      	ldr	r3, [r7, #4]
 8114968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 811496a:	4a33      	ldr	r2, [pc, #204]	@ (8114a38 <_tx_mutex_cleanup+0xec>)
 811496c:	4293      	cmp	r3, r2
 811496e:	d158      	bne.n	8114a22 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8114970:	687b      	ldr	r3, [r7, #4]
 8114972:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8114976:	683a      	ldr	r2, [r7, #0]
 8114978:	429a      	cmp	r2, r3
 811497a:	d152      	bne.n	8114a22 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 811497c:	687b      	ldr	r3, [r7, #4]
 811497e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8114980:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8114982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114984:	2b00      	cmp	r3, #0
 8114986:	d04c      	beq.n	8114a22 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8114988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811498a:	681b      	ldr	r3, [r3, #0]
 811498c:	4a2b      	ldr	r2, [pc, #172]	@ (8114a3c <_tx_mutex_cleanup+0xf0>)
 811498e:	4293      	cmp	r3, r2
 8114990:	d147      	bne.n	8114a22 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8114992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114994:	69db      	ldr	r3, [r3, #28]
 8114996:	2b00      	cmp	r3, #0
 8114998:	d043      	beq.n	8114a22 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 811499a:	687b      	ldr	r3, [r7, #4]
 811499c:	2200      	movs	r2, #0
 811499e:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 81149a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81149a2:	69db      	ldr	r3, [r3, #28]
 81149a4:	1e5a      	subs	r2, r3, #1
 81149a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81149a8:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 81149aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81149ac:	69db      	ldr	r3, [r3, #28]
 81149ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 81149b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81149b2:	2b00      	cmp	r3, #0
 81149b4:	d103      	bne.n	81149be <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 81149b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81149b8:	2200      	movs	r2, #0
 81149ba:	619a      	str	r2, [r3, #24]
 81149bc:	e013      	b.n	81149e6 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 81149be:	687b      	ldr	r3, [r7, #4]
 81149c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81149c2:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 81149c4:	687b      	ldr	r3, [r7, #4]
 81149c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81149c8:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 81149ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81149cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81149ce:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 81149d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81149d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81149d4:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 81149d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81149d8:	699b      	ldr	r3, [r3, #24]
 81149da:	687a      	ldr	r2, [r7, #4]
 81149dc:	429a      	cmp	r2, r3
 81149de:	d102      	bne.n	81149e6 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 81149e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81149e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81149e4:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 81149e6:	687b      	ldr	r3, [r7, #4]
 81149e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81149ea:	2b0d      	cmp	r3, #13
 81149ec:	d119      	bne.n	8114a22 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 81149ee:	687b      	ldr	r3, [r7, #4]
 81149f0:	221d      	movs	r2, #29
 81149f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 81149f6:	4b12      	ldr	r3, [pc, #72]	@ (8114a40 <_tx_mutex_cleanup+0xf4>)
 81149f8:	681b      	ldr	r3, [r3, #0]
 81149fa:	3301      	adds	r3, #1
 81149fc:	4a10      	ldr	r2, [pc, #64]	@ (8114a40 <_tx_mutex_cleanup+0xf4>)
 81149fe:	6013      	str	r3, [r2, #0]
 8114a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8114a02:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114a04:	693b      	ldr	r3, [r7, #16]
 8114a06:	f383 8810 	msr	PRIMASK, r3
}
 8114a0a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8114a0c:	6878      	ldr	r0, [r7, #4]
 8114a0e:	f001 f81f 	bl	8115a50 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8114a12:	f3ef 8310 	mrs	r3, PRIMASK
 8114a16:	61bb      	str	r3, [r7, #24]
    return(posture);
 8114a18:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8114a1a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8114a1c:	b672      	cpsid	i
    return(int_posture);
 8114a1e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8114a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8114a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8114a24:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114a26:	68fb      	ldr	r3, [r7, #12]
 8114a28:	f383 8810 	msr	PRIMASK, r3
}
 8114a2c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8114a2e:	bf00      	nop
 8114a30:	3738      	adds	r7, #56	@ 0x38
 8114a32:	46bd      	mov	sp, r7
 8114a34:	bd80      	pop	{r7, pc}
 8114a36:	bf00      	nop
 8114a38:	0811494d 	.word	0x0811494d
 8114a3c:	4d555445 	.word	0x4d555445
 8114a40:	200581c0 	.word	0x200581c0

08114a44 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8114a44:	b580      	push	{r7, lr}
 8114a46:	b08a      	sub	sp, #40	@ 0x28
 8114a48:	af00      	add	r7, sp, #0
 8114a4a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8114a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8114a50:	61fb      	str	r3, [r7, #28]
    return(posture);
 8114a52:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8114a54:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8114a56:	b672      	cpsid	i
    return(int_posture);
 8114a58:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8114a5a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8114a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8114ac8 <_tx_mutex_thread_release+0x84>)
 8114a5e:	681b      	ldr	r3, [r3, #0]
 8114a60:	3301      	adds	r3, #1
 8114a62:	4a19      	ldr	r2, [pc, #100]	@ (8114ac8 <_tx_mutex_thread_release+0x84>)
 8114a64:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8114a66:	687b      	ldr	r3, [r7, #4]
 8114a68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8114a6c:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 8114a6e:	6a3b      	ldr	r3, [r7, #32]
 8114a70:	2b00      	cmp	r3, #0
 8114a72:	d017      	beq.n	8114aa4 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8114a74:	6a3b      	ldr	r3, [r7, #32]
 8114a76:	2201      	movs	r2, #1
 8114a78:	609a      	str	r2, [r3, #8]
 8114a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114a7c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114a7e:	68fb      	ldr	r3, [r7, #12]
 8114a80:	f383 8810 	msr	PRIMASK, r3
}
 8114a84:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8114a86:	6a38      	ldr	r0, [r7, #32]
 8114a88:	f000 faf2 	bl	8115070 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8114a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8114a90:	617b      	str	r3, [r7, #20]
    return(posture);
 8114a92:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8114a94:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8114a96:	b672      	cpsid	i
    return(int_posture);
 8114a98:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8114a9a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8114a9c:	687b      	ldr	r3, [r7, #4]
 8114a9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8114aa2:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8114aa4:	6a3b      	ldr	r3, [r7, #32]
 8114aa6:	2b00      	cmp	r3, #0
 8114aa8:	d1dd      	bne.n	8114a66 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8114aaa:	4b07      	ldr	r3, [pc, #28]	@ (8114ac8 <_tx_mutex_thread_release+0x84>)
 8114aac:	681b      	ldr	r3, [r3, #0]
 8114aae:	3b01      	subs	r3, #1
 8114ab0:	4a05      	ldr	r2, [pc, #20]	@ (8114ac8 <_tx_mutex_thread_release+0x84>)
 8114ab2:	6013      	str	r3, [r2, #0]
 8114ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114ab6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114ab8:	68bb      	ldr	r3, [r7, #8]
 8114aba:	f383 8810 	msr	PRIMASK, r3
}
 8114abe:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 8114ac0:	bf00      	nop
 8114ac2:	3728      	adds	r7, #40	@ 0x28
 8114ac4:	46bd      	mov	sp, r7
 8114ac6:	bd80      	pop	{r7, pc}
 8114ac8:	200581c0 	.word	0x200581c0

08114acc <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8114acc:	b580      	push	{r7, lr}
 8114ace:	b08a      	sub	sp, #40	@ 0x28
 8114ad0:	af00      	add	r7, sp, #0
 8114ad2:	60f8      	str	r0, [r7, #12]
 8114ad4:	60b9      	str	r1, [r7, #8]
 8114ad6:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8114ad8:	2234      	movs	r2, #52	@ 0x34
 8114ada:	2100      	movs	r1, #0
 8114adc:	68f8      	ldr	r0, [r7, #12]
 8114ade:	f002 fac3 	bl	8117068 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8114ae2:	68fb      	ldr	r3, [r7, #12]
 8114ae4:	68ba      	ldr	r2, [r7, #8]
 8114ae6:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8114ae8:	68fb      	ldr	r3, [r7, #12]
 8114aea:	687a      	ldr	r2, [r7, #4]
 8114aec:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8114aee:	f3ef 8310 	mrs	r3, PRIMASK
 8114af2:	61bb      	str	r3, [r7, #24]
    return(posture);
 8114af4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8114af6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8114af8:	b672      	cpsid	i
    return(int_posture);
 8114afa:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8114afc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8114afe:	68fb      	ldr	r3, [r7, #12]
 8114b00:	4a1a      	ldr	r2, [pc, #104]	@ (8114b6c <_tx_mutex_create+0xa0>)
 8114b02:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8114b04:	4b1a      	ldr	r3, [pc, #104]	@ (8114b70 <_tx_mutex_create+0xa4>)
 8114b06:	4a1b      	ldr	r2, [pc, #108]	@ (8114b74 <_tx_mutex_create+0xa8>)
 8114b08:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8114b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8114b78 <_tx_mutex_create+0xac>)
 8114b0c:	681b      	ldr	r3, [r3, #0]
 8114b0e:	2b00      	cmp	r3, #0
 8114b10:	d109      	bne.n	8114b26 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8114b12:	4a1a      	ldr	r2, [pc, #104]	@ (8114b7c <_tx_mutex_create+0xb0>)
 8114b14:	68fb      	ldr	r3, [r7, #12]
 8114b16:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8114b18:	68fb      	ldr	r3, [r7, #12]
 8114b1a:	68fa      	ldr	r2, [r7, #12]
 8114b1c:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8114b1e:	68fb      	ldr	r3, [r7, #12]
 8114b20:	68fa      	ldr	r2, [r7, #12]
 8114b22:	625a      	str	r2, [r3, #36]	@ 0x24
 8114b24:	e011      	b.n	8114b4a <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8114b26:	4b15      	ldr	r3, [pc, #84]	@ (8114b7c <_tx_mutex_create+0xb0>)
 8114b28:	681b      	ldr	r3, [r3, #0]
 8114b2a:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8114b2c:	6a3b      	ldr	r3, [r7, #32]
 8114b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8114b30:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8114b32:	6a3b      	ldr	r3, [r7, #32]
 8114b34:	68fa      	ldr	r2, [r7, #12]
 8114b36:	625a      	str	r2, [r3, #36]	@ 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8114b38:	69fb      	ldr	r3, [r7, #28]
 8114b3a:	68fa      	ldr	r2, [r7, #12]
 8114b3c:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8114b3e:	68fb      	ldr	r3, [r7, #12]
 8114b40:	69fa      	ldr	r2, [r7, #28]
 8114b42:	625a      	str	r2, [r3, #36]	@ 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8114b44:	68fb      	ldr	r3, [r7, #12]
 8114b46:	6a3a      	ldr	r2, [r7, #32]
 8114b48:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8114b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8114b78 <_tx_mutex_create+0xac>)
 8114b4c:	681b      	ldr	r3, [r3, #0]
 8114b4e:	3301      	adds	r3, #1
 8114b50:	4a09      	ldr	r2, [pc, #36]	@ (8114b78 <_tx_mutex_create+0xac>)
 8114b52:	6013      	str	r3, [r2, #0]
 8114b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114b56:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114b58:	693b      	ldr	r3, [r7, #16]
 8114b5a:	f383 8810 	msr	PRIMASK, r3
}
 8114b5e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8114b60:	2300      	movs	r3, #0
}
 8114b62:	4618      	mov	r0, r3
 8114b64:	3728      	adds	r7, #40	@ 0x28
 8114b66:	46bd      	mov	sp, r7
 8114b68:	bd80      	pop	{r7, pc}
 8114b6a:	bf00      	nop
 8114b6c:	4d555445 	.word	0x4d555445
 8114b70:	200581c4 	.word	0x200581c4
 8114b74:	08114a45 	.word	0x08114a45
 8114b78:	2005810c 	.word	0x2005810c
 8114b7c:	20058108 	.word	0x20058108

08114b80 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8114b80:	b580      	push	{r7, lr}
 8114b82:	b092      	sub	sp, #72	@ 0x48
 8114b84:	af00      	add	r7, sp, #0
 8114b86:	6078      	str	r0, [r7, #4]
 8114b88:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8114b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8114b8e:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8114b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8114b92:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8114b94:	b672      	cpsid	i
    return(int_posture);
 8114b96:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8114b98:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8114b9a:	4b7a      	ldr	r3, [pc, #488]	@ (8114d84 <_tx_mutex_get+0x204>)
 8114b9c:	681b      	ldr	r3, [r3, #0]
 8114b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8114ba0:	687b      	ldr	r3, [r7, #4]
 8114ba2:	689b      	ldr	r3, [r3, #8]
 8114ba4:	2b00      	cmp	r3, #0
 8114ba6:	d144      	bne.n	8114c32 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8114ba8:	687b      	ldr	r3, [r7, #4]
 8114baa:	2201      	movs	r2, #1
 8114bac:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8114bae:	687b      	ldr	r3, [r7, #4]
 8114bb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8114bb2:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8114bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114bb6:	2b00      	cmp	r3, #0
 8114bb8:	d032      	beq.n	8114c20 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8114bba:	687b      	ldr	r3, [r7, #4]
 8114bbc:	691b      	ldr	r3, [r3, #16]
 8114bbe:	2b01      	cmp	r3, #1
 8114bc0:	d106      	bne.n	8114bd0 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8114bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8114bc6:	687b      	ldr	r3, [r7, #4]
 8114bc8:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8114bca:	687b      	ldr	r3, [r7, #4]
 8114bcc:	2220      	movs	r2, #32
 8114bce:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8114bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114bd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8114bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8114bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114bda:	2b00      	cmp	r3, #0
 8114bdc:	d00f      	beq.n	8114bfe <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8114bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8114be2:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8114be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114be6:	687a      	ldr	r2, [r7, #4]
 8114be8:	631a      	str	r2, [r3, #48]	@ 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8114bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114bec:	687a      	ldr	r2, [r7, #4]
 8114bee:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8114bf0:	687b      	ldr	r3, [r7, #4]
 8114bf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8114bf4:	631a      	str	r2, [r3, #48]	@ 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8114bf6:	687b      	ldr	r3, [r7, #4]
 8114bf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8114bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8114bfc:	e009      	b.n	8114c12 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8114bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114c00:	687a      	ldr	r2, [r7, #4]
 8114c02:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8114c06:	687b      	ldr	r3, [r7, #4]
 8114c08:	687a      	ldr	r2, [r7, #4]
 8114c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8114c0c:	687b      	ldr	r3, [r7, #4]
 8114c0e:	687a      	ldr	r2, [r7, #4]
 8114c10:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8114c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114c14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8114c18:	1c5a      	adds	r2, r3, #1
 8114c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114c1c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8114c20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8114c22:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114c24:	69fb      	ldr	r3, [r7, #28]
 8114c26:	f383 8810 	msr	PRIMASK, r3
}
 8114c2a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8114c2c:	2300      	movs	r3, #0
 8114c2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8114c30:	e0a2      	b.n	8114d78 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8114c32:	687b      	ldr	r3, [r7, #4]
 8114c34:	68db      	ldr	r3, [r3, #12]
 8114c36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8114c38:	429a      	cmp	r2, r3
 8114c3a:	d10d      	bne.n	8114c58 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8114c3c:	687b      	ldr	r3, [r7, #4]
 8114c3e:	689b      	ldr	r3, [r3, #8]
 8114c40:	1c5a      	adds	r2, r3, #1
 8114c42:	687b      	ldr	r3, [r7, #4]
 8114c44:	609a      	str	r2, [r3, #8]
 8114c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8114c48:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114c4a:	69bb      	ldr	r3, [r7, #24]
 8114c4c:	f383 8810 	msr	PRIMASK, r3
}
 8114c50:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8114c52:	2300      	movs	r3, #0
 8114c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8114c56:	e08f      	b.n	8114d78 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8114c58:	683b      	ldr	r3, [r7, #0]
 8114c5a:	2b00      	cmp	r3, #0
 8114c5c:	f000 8084 	beq.w	8114d68 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8114c60:	4b49      	ldr	r3, [pc, #292]	@ (8114d88 <_tx_mutex_get+0x208>)
 8114c62:	681b      	ldr	r3, [r3, #0]
 8114c64:	2b00      	cmp	r3, #0
 8114c66:	d008      	beq.n	8114c7a <_tx_mutex_get+0xfa>
 8114c68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8114c6a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114c6c:	697b      	ldr	r3, [r7, #20]
 8114c6e:	f383 8810 	msr	PRIMASK, r3
}
 8114c72:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8114c74:	231d      	movs	r3, #29
 8114c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8114c78:	e07e      	b.n	8114d78 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8114c7a:	687b      	ldr	r3, [r7, #4]
 8114c7c:	68db      	ldr	r3, [r3, #12]
 8114c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8114c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114c82:	4a42      	ldr	r2, [pc, #264]	@ (8114d8c <_tx_mutex_get+0x20c>)
 8114c84:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8114c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114c88:	687a      	ldr	r2, [r7, #4]
 8114c8a:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8114c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114c8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8114c92:	1c5a      	adds	r2, r3, #1
 8114c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114c96:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8114c9a:	687b      	ldr	r3, [r7, #4]
 8114c9c:	69db      	ldr	r3, [r3, #28]
 8114c9e:	2b00      	cmp	r3, #0
 8114ca0:	d109      	bne.n	8114cb6 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8114ca2:	687b      	ldr	r3, [r7, #4]
 8114ca4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8114ca6:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8114ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114caa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8114cac:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8114cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114cb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8114cb2:	675a      	str	r2, [r3, #116]	@ 0x74
 8114cb4:	e011      	b.n	8114cda <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8114cb6:	687b      	ldr	r3, [r7, #4]
 8114cb8:	699b      	ldr	r3, [r3, #24]
 8114cba:	637b      	str	r3, [r7, #52]	@ 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8114cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114cbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8114cc0:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8114cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8114cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8114cc6:	633b      	str	r3, [r7, #48]	@ 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8114cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8114ccc:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8114cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114cd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8114cd2:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8114cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8114cd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8114cd8:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8114cda:	687b      	ldr	r3, [r7, #4]
 8114cdc:	69db      	ldr	r3, [r3, #28]
 8114cde:	1c5a      	adds	r2, r3, #1
 8114ce0:	687b      	ldr	r3, [r7, #4]
 8114ce2:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8114ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114ce6:	220d      	movs	r2, #13
 8114ce8:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8114cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114cec:	2201      	movs	r2, #1
 8114cee:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8114cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114cf2:	683a      	ldr	r2, [r7, #0]
 8114cf4:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8114cf6:	4b24      	ldr	r3, [pc, #144]	@ (8114d88 <_tx_mutex_get+0x208>)
 8114cf8:	681b      	ldr	r3, [r3, #0]
 8114cfa:	3301      	adds	r3, #1
 8114cfc:	4a22      	ldr	r2, [pc, #136]	@ (8114d88 <_tx_mutex_get+0x208>)
 8114cfe:	6013      	str	r3, [r2, #0]
 8114d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8114d02:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114d04:	693b      	ldr	r3, [r7, #16]
 8114d06:	f383 8810 	msr	PRIMASK, r3
}
 8114d0a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8114d0c:	687b      	ldr	r3, [r7, #4]
 8114d0e:	691b      	ldr	r3, [r3, #16]
 8114d10:	2b01      	cmp	r3, #1
 8114d12:	d121      	bne.n	8114d58 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8114d14:	687b      	ldr	r3, [r7, #4]
 8114d16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8114d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8114d1c:	429a      	cmp	r2, r3
 8114d1e:	d903      	bls.n	8114d28 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8114d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8114d24:	687b      	ldr	r3, [r7, #4]
 8114d26:	629a      	str	r2, [r3, #40]	@ 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8114d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8114d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114d2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8114d32:	429a      	cmp	r2, r3
 8114d34:	d204      	bcs.n	8114d40 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8114d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8114d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114d3c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8114d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8114d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8114d48:	429a      	cmp	r2, r3
 8114d4a:	d905      	bls.n	8114d58 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8114d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8114d50:	4619      	mov	r1, r3
 8114d52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8114d54:	f000 f8ce 	bl	8114ef4 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8114d58:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8114d5a:	f000 ff79 	bl	8115c50 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8114d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8114d64:	647b      	str	r3, [r7, #68]	@ 0x44
 8114d66:	e007      	b.n	8114d78 <_tx_mutex_get+0x1f8>
 8114d68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8114d6a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114d6c:	68fb      	ldr	r3, [r7, #12]
 8114d6e:	f383 8810 	msr	PRIMASK, r3
}
 8114d72:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8114d74:	231d      	movs	r3, #29
 8114d76:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 8114d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8114d7a:	4618      	mov	r0, r3
 8114d7c:	3748      	adds	r7, #72	@ 0x48
 8114d7e:	46bd      	mov	sp, r7
 8114d80:	bd80      	pop	{r7, pc}
 8114d82:	bf00      	nop
 8114d84:	20058128 	.word	0x20058128
 8114d88:	200581c0 	.word	0x200581c0
 8114d8c:	0811494d 	.word	0x0811494d

08114d90 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8114d90:	b580      	push	{r7, lr}
 8114d92:	b092      	sub	sp, #72	@ 0x48
 8114d94:	af00      	add	r7, sp, #0
 8114d96:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8114d98:	f3ef 8310 	mrs	r3, PRIMASK
 8114d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8114d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8114da0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8114da2:	b672      	cpsid	i
    return(int_posture);
 8114da4:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8114da6:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8114da8:	687b      	ldr	r3, [r7, #4]
 8114daa:	69db      	ldr	r3, [r3, #28]
 8114dac:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8114dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8114db0:	2b01      	cmp	r3, #1
 8114db2:	d805      	bhi.n	8114dc0 <_tx_mutex_prioritize+0x30>
 8114db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8114db6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114db8:	69fb      	ldr	r3, [r7, #28]
 8114dba:	f383 8810 	msr	PRIMASK, r3
}
 8114dbe:	e092      	b.n	8114ee6 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8114dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8114dc2:	2b02      	cmp	r3, #2
 8114dc4:	d114      	bne.n	8114df0 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8114dc6:	687b      	ldr	r3, [r7, #4]
 8114dc8:	699b      	ldr	r3, [r3, #24]
 8114dca:	63bb      	str	r3, [r7, #56]	@ 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8114dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8114dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8114dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8114dda:	429a      	cmp	r2, r3
 8114ddc:	d202      	bcs.n	8114de4 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8114dde:	687b      	ldr	r3, [r7, #4]
 8114de0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8114de2:	619a      	str	r2, [r3, #24]
 8114de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8114de6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114de8:	69bb      	ldr	r3, [r7, #24]
 8114dea:	f383 8810 	msr	PRIMASK, r3
}
 8114dee:	e07a      	b.n	8114ee6 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8114df0:	687b      	ldr	r3, [r7, #4]
 8114df2:	699b      	ldr	r3, [r3, #24]
 8114df4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8114df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114df8:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8114dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114dfe:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8114e00:	4b3b      	ldr	r3, [pc, #236]	@ (8114ef0 <_tx_mutex_prioritize+0x160>)
 8114e02:	681b      	ldr	r3, [r3, #0]
 8114e04:	3301      	adds	r3, #1
 8114e06:	4a3a      	ldr	r2, [pc, #232]	@ (8114ef0 <_tx_mutex_prioritize+0x160>)
 8114e08:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8114e0a:	2300      	movs	r3, #0
 8114e0c:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8114e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8114e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8114e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8114e16:	429a      	cmp	r2, r3
 8114e18:	d201      	bcs.n	8114e1e <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8114e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8114e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8114e1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8114e20:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114e22:	68fb      	ldr	r3, [r7, #12]
 8114e24:	f383 8810 	msr	PRIMASK, r3
}
 8114e28:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8114e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8114e2e:	617b      	str	r3, [r7, #20]
    return(posture);
 8114e30:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8114e32:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8114e34:	b672      	cpsid	i
    return(int_posture);
 8114e36:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8114e38:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8114e3a:	687b      	ldr	r3, [r7, #4]
 8114e3c:	699b      	ldr	r3, [r3, #24]
 8114e3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8114e40:	429a      	cmp	r2, r3
 8114e42:	d002      	beq.n	8114e4a <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8114e44:	2301      	movs	r3, #1
 8114e46:	633b      	str	r3, [r7, #48]	@ 0x30
 8114e48:	e006      	b.n	8114e58 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8114e4a:	687b      	ldr	r3, [r7, #4]
 8114e4c:	69db      	ldr	r3, [r3, #28]
 8114e4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8114e50:	429a      	cmp	r2, r3
 8114e52:	d001      	beq.n	8114e58 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8114e54:	2301      	movs	r3, #1
 8114e56:	633b      	str	r3, [r7, #48]	@ 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8114e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114e5a:	2b00      	cmp	r3, #0
 8114e5c:	d103      	bne.n	8114e66 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8114e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8114e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114e62:	643b      	str	r3, [r7, #64]	@ 0x40
 8114e64:	e00c      	b.n	8114e80 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8114e66:	687b      	ldr	r3, [r7, #4]
 8114e68:	699b      	ldr	r3, [r3, #24]
 8114e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8114e6c:	687b      	ldr	r3, [r7, #4]
 8114e6e:	69db      	ldr	r3, [r3, #28]
 8114e70:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8114e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114e74:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8114e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114e7a:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8114e7c:	2300      	movs	r3, #0
 8114e7e:	633b      	str	r3, [r7, #48]	@ 0x30
            }

        } while (thread_ptr != head_ptr);
 8114e80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8114e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114e84:	429a      	cmp	r2, r3
 8114e86:	d1c2      	bne.n	8114e0e <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8114e88:	4b19      	ldr	r3, [pc, #100]	@ (8114ef0 <_tx_mutex_prioritize+0x160>)
 8114e8a:	681b      	ldr	r3, [r3, #0]
 8114e8c:	3b01      	subs	r3, #1
 8114e8e:	4a18      	ldr	r2, [pc, #96]	@ (8114ef0 <_tx_mutex_prioritize+0x160>)
 8114e90:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8114e92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8114e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114e96:	429a      	cmp	r2, r3
 8114e98:	d01d      	beq.n	8114ed6 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8114e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8114ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114ea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8114ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8114ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114ea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8114eaa:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8114eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114eae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8114eb0:	671a      	str	r2, [r3, #112]	@ 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8114eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8114eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8114eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114eba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8114ebc:	671a      	str	r2, [r3, #112]	@ 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8114ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114ec0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8114ec2:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8114ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114ec6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8114ec8:	671a      	str	r2, [r3, #112]	@ 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8114eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114ecc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8114ece:	675a      	str	r2, [r3, #116]	@ 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8114ed0:	687b      	ldr	r3, [r7, #4]
 8114ed2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8114ed4:	619a      	str	r2, [r3, #24]
 8114ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8114ed8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114eda:	68bb      	ldr	r3, [r7, #8]
 8114edc:	f383 8810 	msr	PRIMASK, r3
}
 8114ee0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8114ee2:	f000 fd7b 	bl	81159dc <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8114ee6:	2300      	movs	r3, #0
#endif
}
 8114ee8:	4618      	mov	r0, r3
 8114eea:	3748      	adds	r7, #72	@ 0x48
 8114eec:	46bd      	mov	sp, r7
 8114eee:	bd80      	pop	{r7, pc}
 8114ef0:	200581c0 	.word	0x200581c0

08114ef4 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8114ef4:	b580      	push	{r7, lr}
 8114ef6:	b090      	sub	sp, #64	@ 0x40
 8114ef8:	af00      	add	r7, sp, #0
 8114efa:	6078      	str	r0, [r7, #4]
 8114efc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8114efe:	f3ef 8310 	mrs	r3, PRIMASK
 8114f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8114f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8114f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8114f08:	b672      	cpsid	i
    return(int_posture);
 8114f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8114f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8114f0e:	687b      	ldr	r3, [r7, #4]
 8114f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8114f12:	2b00      	cmp	r3, #0
 8114f14:	d017      	beq.n	8114f46 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8114f16:	687b      	ldr	r3, [r7, #4]
 8114f18:	683a      	ldr	r2, [r7, #0]
 8114f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8114f1c:	687b      	ldr	r3, [r7, #4]
 8114f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8114f22:	683a      	ldr	r2, [r7, #0]
 8114f24:	429a      	cmp	r2, r3
 8114f26:	d905      	bls.n	8114f34 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8114f28:	687b      	ldr	r3, [r7, #4]
 8114f2a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8114f2e:	687b      	ldr	r3, [r7, #4]
 8114f30:	63da      	str	r2, [r3, #60]	@ 0x3c
 8114f32:	e002      	b.n	8114f3a <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8114f34:	687b      	ldr	r3, [r7, #4]
 8114f36:	683a      	ldr	r2, [r7, #0]
 8114f38:	63da      	str	r2, [r3, #60]	@ 0x3c
 8114f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114f40:	f383 8810 	msr	PRIMASK, r3
}
 8114f44:	e089      	b.n	811505a <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 8114f46:	4b47      	ldr	r3, [pc, #284]	@ (8115064 <_tx_mutex_priority_change+0x170>)
 8114f48:	681b      	ldr	r3, [r3, #0]
 8114f4a:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8114f4c:	687b      	ldr	r3, [r7, #4]
 8114f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8114f50:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8114f52:	4b45      	ldr	r3, [pc, #276]	@ (8115068 <_tx_mutex_priority_change+0x174>)
 8114f54:	681b      	ldr	r3, [r3, #0]
 8114f56:	3302      	adds	r3, #2
 8114f58:	4a43      	ldr	r2, [pc, #268]	@ (8115068 <_tx_mutex_priority_change+0x174>)
 8114f5a:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8114f5c:	687b      	ldr	r3, [r7, #4]
 8114f5e:	220e      	movs	r2, #14
 8114f60:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8114f62:	687b      	ldr	r3, [r7, #4]
 8114f64:	2201      	movs	r2, #1
 8114f66:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8114f68:	687b      	ldr	r3, [r7, #4]
 8114f6a:	2200      	movs	r2, #0
 8114f6c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8114f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114f70:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114f72:	69bb      	ldr	r3, [r7, #24]
 8114f74:	f383 8810 	msr	PRIMASK, r3
}
 8114f78:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8114f7a:	6878      	ldr	r0, [r7, #4]
 8114f7c:	f000 fe68 	bl	8115c50 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8114f80:	f3ef 8310 	mrs	r3, PRIMASK
 8114f84:	623b      	str	r3, [r7, #32]
    return(posture);
 8114f86:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8114f88:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8114f8a:	b672      	cpsid	i
    return(int_posture);
 8114f8c:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 8114f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8114f90:	687b      	ldr	r3, [r7, #4]
 8114f92:	683a      	ldr	r2, [r7, #0]
 8114f94:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8114f96:	687b      	ldr	r3, [r7, #4]
 8114f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8114f9c:	683a      	ldr	r2, [r7, #0]
 8114f9e:	429a      	cmp	r2, r3
 8114fa0:	d905      	bls.n	8114fae <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8114fa2:	687b      	ldr	r3, [r7, #4]
 8114fa4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8114fa8:	687b      	ldr	r3, [r7, #4]
 8114faa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8114fac:	e002      	b.n	8114fb4 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8114fae:	687b      	ldr	r3, [r7, #4]
 8114fb0:	683a      	ldr	r2, [r7, #0]
 8114fb2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8114fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8114fb6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8114fb8:	68fb      	ldr	r3, [r7, #12]
 8114fba:	f383 8810 	msr	PRIMASK, r3
}
 8114fbe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8114fc0:	6878      	ldr	r0, [r7, #4]
 8114fc2:	f000 fd45 	bl	8115a50 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8114fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8114fca:	617b      	str	r3, [r7, #20]
    return(posture);
 8114fcc:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8114fce:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8114fd0:	b672      	cpsid	i
    return(int_posture);
 8114fd2:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8114fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8114fd6:	4b23      	ldr	r3, [pc, #140]	@ (8115064 <_tx_mutex_priority_change+0x170>)
 8114fd8:	681b      	ldr	r3, [r3, #0]
 8114fda:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8114fdc:	687a      	ldr	r2, [r7, #4]
 8114fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114fe0:	429a      	cmp	r2, r3
 8114fe2:	d034      	beq.n	811504e <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8114fe4:	687b      	ldr	r3, [r7, #4]
 8114fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8114fe8:	2b00      	cmp	r3, #0
 8114fea:	d130      	bne.n	811504e <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8114fec:	687b      	ldr	r3, [r7, #4]
 8114fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8114ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8114ff4:	429a      	cmp	r2, r3
 8114ff6:	d811      	bhi.n	811501c <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8114ff8:	687a      	ldr	r2, [r7, #4]
 8114ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8114ffc:	429a      	cmp	r2, r3
 8114ffe:	d126      	bne.n	811504e <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8115000:	4a18      	ldr	r2, [pc, #96]	@ (8115064 <_tx_mutex_priority_change+0x170>)
 8115002:	687b      	ldr	r3, [r7, #4]
 8115004:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8115006:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8115008:	683b      	ldr	r3, [r7, #0]
 811500a:	429a      	cmp	r2, r3
 811500c:	d21f      	bcs.n	811504e <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 811500e:	687b      	ldr	r3, [r7, #4]
 8115010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8115012:	4916      	ldr	r1, [pc, #88]	@ (811506c <_tx_mutex_priority_change+0x178>)
 8115014:	687a      	ldr	r2, [r7, #4]
 8115016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 811501a:	e018      	b.n	811504e <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 811501c:	687b      	ldr	r3, [r7, #4]
 811501e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8115020:	687b      	ldr	r3, [r7, #4]
 8115022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8115024:	429a      	cmp	r2, r3
 8115026:	d212      	bcs.n	811504e <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8115028:	687b      	ldr	r3, [r7, #4]
 811502a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 811502c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811502e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8115030:	429a      	cmp	r2, r3
 8115032:	d80c      	bhi.n	811504e <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8115034:	4a0b      	ldr	r2, [pc, #44]	@ (8115064 <_tx_mutex_priority_change+0x170>)
 8115036:	687b      	ldr	r3, [r7, #4]
 8115038:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 811503a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 811503c:	683b      	ldr	r3, [r7, #0]
 811503e:	429a      	cmp	r2, r3
 8115040:	d205      	bcs.n	811504e <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8115042:	687b      	ldr	r3, [r7, #4]
 8115044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8115046:	4909      	ldr	r1, [pc, #36]	@ (811506c <_tx_mutex_priority_change+0x178>)
 8115048:	687a      	ldr	r2, [r7, #4]
 811504a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 811504e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8115050:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115052:	68bb      	ldr	r3, [r7, #8]
 8115054:	f383 8810 	msr	PRIMASK, r3
}
 8115058:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 811505a:	bf00      	nop
 811505c:	3740      	adds	r7, #64	@ 0x40
 811505e:	46bd      	mov	sp, r7
 8115060:	bd80      	pop	{r7, pc}
 8115062:	bf00      	nop
 8115064:	2005812c 	.word	0x2005812c
 8115068:	200581c0 	.word	0x200581c0
 811506c:	20058140 	.word	0x20058140

08115070 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8115070:	b580      	push	{r7, lr}
 8115072:	b0a6      	sub	sp, #152	@ 0x98
 8115074:	af00      	add	r7, sp, #0
 8115076:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8115078:	2320      	movs	r3, #32
 811507a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 811507e:	f3ef 8310 	mrs	r3, PRIMASK
 8115082:	65fb      	str	r3, [r7, #92]	@ 0x5c
    return(posture);
 8115084:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    int_posture = __get_interrupt_posture();
 8115086:	65bb      	str	r3, [r7, #88]	@ 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 8115088:	b672      	cpsid	i
    return(int_posture);
 811508a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 811508c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8115090:	687b      	ldr	r3, [r7, #4]
 8115092:	689b      	ldr	r3, [r3, #8]
 8115094:	2b00      	cmp	r3, #0
 8115096:	f000 81ff 	beq.w	8115498 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 811509a:	687b      	ldr	r3, [r7, #4]
 811509c:	68db      	ldr	r3, [r3, #12]
 811509e:	67fb      	str	r3, [r7, #124]	@ 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 81150a0:	4ba3      	ldr	r3, [pc, #652]	@ (8115330 <_tx_mutex_put+0x2c0>)
 81150a2:	681b      	ldr	r3, [r3, #0]
 81150a4:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 81150a6:	687b      	ldr	r3, [r7, #4]
 81150a8:	68db      	ldr	r3, [r3, #12]
 81150aa:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 81150ac:	429a      	cmp	r2, r3
 81150ae:	d00d      	beq.n	81150cc <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 81150b0:	4ba0      	ldr	r3, [pc, #640]	@ (8115334 <_tx_mutex_put+0x2c4>)
 81150b2:	681b      	ldr	r3, [r3, #0]
 81150b4:	2b00      	cmp	r3, #0
 81150b6:	d109      	bne.n	81150cc <_tx_mutex_put+0x5c>
 81150b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 81150bc:	657b      	str	r3, [r7, #84]	@ 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81150be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81150c0:	f383 8810 	msr	PRIMASK, r3
}
 81150c4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 81150c6:	231e      	movs	r3, #30
 81150c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 81150cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 81150d0:	2b20      	cmp	r3, #32
 81150d2:	f040 81eb 	bne.w	81154ac <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 81150d6:	687b      	ldr	r3, [r7, #4]
 81150d8:	689b      	ldr	r3, [r3, #8]
 81150da:	1e5a      	subs	r2, r3, #1
 81150dc:	687b      	ldr	r3, [r7, #4]
 81150de:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 81150e0:	687b      	ldr	r3, [r7, #4]
 81150e2:	689b      	ldr	r3, [r3, #8]
 81150e4:	2b00      	cmp	r3, #0
 81150e6:	d00a      	beq.n	81150fe <_tx_mutex_put+0x8e>
 81150e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 81150ec:	653b      	str	r3, [r7, #80]	@ 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81150ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81150f0:	f383 8810 	msr	PRIMASK, r3
}
 81150f4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 81150f6:	2300      	movs	r3, #0
 81150f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81150fc:	e1d6      	b.n	81154ac <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 81150fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8115100:	2b00      	cmp	r3, #0
 8115102:	d10a      	bne.n	811511a <_tx_mutex_put+0xaa>
 8115104:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8115108:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811510a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811510c:	f383 8810 	msr	PRIMASK, r3
}
 8115110:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8115112:	2300      	movs	r3, #0
 8115114:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8115118:	e1c8      	b.n	81154ac <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 811511a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 811511c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8115120:	1e5a      	subs	r2, r3, #1
 8115122:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8115124:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8115128:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 811512a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 811512e:	2b00      	cmp	r3, #0
 8115130:	d104      	bne.n	811513c <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8115132:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8115134:	2200      	movs	r2, #0
 8115136:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 811513a:	e019      	b.n	8115170 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 811513c:	687b      	ldr	r3, [r7, #4]
 811513e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8115140:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8115144:	687b      	ldr	r3, [r7, #4]
 8115146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8115148:	677b      	str	r3, [r7, #116]	@ 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 811514a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 811514e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8115150:	631a      	str	r2, [r3, #48]	@ 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8115152:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8115154:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8115158:	62da      	str	r2, [r3, #44]	@ 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 811515a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 811515c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8115160:	687a      	ldr	r2, [r7, #4]
 8115162:	429a      	cmp	r2, r3
 8115164:	d104      	bne.n	8115170 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8115166:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8115168:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 811516c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8115170:	687b      	ldr	r3, [r7, #4]
 8115172:	699b      	ldr	r3, [r3, #24]
 8115174:	2b00      	cmp	r3, #0
 8115176:	d110      	bne.n	811519a <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8115178:	687b      	ldr	r3, [r7, #4]
 811517a:	691b      	ldr	r3, [r3, #16]
 811517c:	2b00      	cmp	r3, #0
 811517e:	d10c      	bne.n	811519a <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8115180:	687b      	ldr	r3, [r7, #4]
 8115182:	2200      	movs	r2, #0
 8115184:	60da      	str	r2, [r3, #12]
 8115186:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 811518a:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811518c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811518e:	f383 8810 	msr	PRIMASK, r3
}
 8115192:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8115194:	2300      	movs	r3, #0
 8115196:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 811519a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 811519e:	2b20      	cmp	r3, #32
 81151a0:	f040 8184 	bne.w	81154ac <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 81151a4:	2300      	movs	r3, #0
 81151a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 81151aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 81151ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81151b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 81151b4:	687b      	ldr	r3, [r7, #4]
 81151b6:	691b      	ldr	r3, [r3, #16]
 81151b8:	2b01      	cmp	r3, #1
 81151ba:	d155      	bne.n	8115268 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 81151bc:	4b5d      	ldr	r3, [pc, #372]	@ (8115334 <_tx_mutex_put+0x2c4>)
 81151be:	681b      	ldr	r3, [r3, #0]
 81151c0:	3301      	adds	r3, #1
 81151c2:	4a5c      	ldr	r2, [pc, #368]	@ (8115334 <_tx_mutex_put+0x2c4>)
 81151c4:	6013      	str	r3, [r2, #0]
 81151c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 81151ca:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81151cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81151ce:	f383 8810 	msr	PRIMASK, r3
}
 81151d2:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 81151d4:	2320      	movs	r3, #32
 81151d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 81151da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 81151dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81151e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            while (next_mutex != TX_NULL)
 81151e4:	e01f      	b.n	8115226 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 81151e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 81151ea:	691b      	ldr	r3, [r3, #16]
 81151ec:	2b01      	cmp	r3, #1
 81151ee:	d10b      	bne.n	8115208 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 81151f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 81151f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81151f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 81151fa:	429a      	cmp	r2, r3
 81151fc:	d904      	bls.n	8115208 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 81151fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8115202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8115204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8115208:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 811520c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811520e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8115212:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8115214:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8115218:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 811521c:	429a      	cmp	r2, r3
 811521e:	d102      	bne.n	8115226 <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8115220:	2300      	movs	r3, #0
 8115222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            while (next_mutex != TX_NULL)
 8115226:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 811522a:	2b00      	cmp	r3, #0
 811522c:	d1db      	bne.n	81151e6 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 811522e:	f3ef 8310 	mrs	r3, PRIMASK
 8115232:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 8115234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 8115236:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8115238:	b672      	cpsid	i
    return(int_posture);
 811523a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 811523c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8115240:	4b3c      	ldr	r3, [pc, #240]	@ (8115334 <_tx_mutex_put+0x2c4>)
 8115242:	681b      	ldr	r3, [r3, #0]
 8115244:	3b01      	subs	r3, #1
 8115246:	4a3b      	ldr	r2, [pc, #236]	@ (8115334 <_tx_mutex_put+0x2c4>)
 8115248:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 811524a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 811524c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8115250:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8115254:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8115258:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 811525c:	429a      	cmp	r2, r3
 811525e:	d203      	bcs.n	8115268 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8115260:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8115264:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8115268:	687b      	ldr	r3, [r7, #4]
 811526a:	69db      	ldr	r3, [r3, #28]
 811526c:	2b01      	cmp	r3, #1
 811526e:	d920      	bls.n	81152b2 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8115270:	687b      	ldr	r3, [r7, #4]
 8115272:	691b      	ldr	r3, [r3, #16]
 8115274:	2b01      	cmp	r3, #1
 8115276:	d11c      	bne.n	81152b2 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8115278:	4b2e      	ldr	r3, [pc, #184]	@ (8115334 <_tx_mutex_put+0x2c4>)
 811527a:	681b      	ldr	r3, [r3, #0]
 811527c:	3301      	adds	r3, #1
 811527e:	4a2d      	ldr	r2, [pc, #180]	@ (8115334 <_tx_mutex_put+0x2c4>)
 8115280:	6013      	str	r3, [r2, #0]
 8115282:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8115286:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811528a:	f383 8810 	msr	PRIMASK, r3
}
 811528e:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8115290:	6878      	ldr	r0, [r7, #4]
 8115292:	f7ff fd7d 	bl	8114d90 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8115296:	f3ef 8310 	mrs	r3, PRIMASK
 811529a:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 811529c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 811529e:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 81152a0:	b672      	cpsid	i
    return(int_posture);
 81152a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 81152a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 81152a8:	4b22      	ldr	r3, [pc, #136]	@ (8115334 <_tx_mutex_put+0x2c4>)
 81152aa:	681b      	ldr	r3, [r3, #0]
 81152ac:	3b01      	subs	r3, #1
 81152ae:	4a21      	ldr	r2, [pc, #132]	@ (8115334 <_tx_mutex_put+0x2c4>)
 81152b0:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 81152b2:	687b      	ldr	r3, [r7, #4]
 81152b4:	699b      	ldr	r3, [r3, #24]
 81152b6:	2b00      	cmp	r3, #0
 81152b8:	d13e      	bne.n	8115338 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 81152ba:	4b1e      	ldr	r3, [pc, #120]	@ (8115334 <_tx_mutex_put+0x2c4>)
 81152bc:	681b      	ldr	r3, [r3, #0]
 81152be:	3301      	adds	r3, #1
 81152c0:	4a1c      	ldr	r2, [pc, #112]	@ (8115334 <_tx_mutex_put+0x2c4>)
 81152c2:	6013      	str	r3, [r2, #0]
 81152c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 81152c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81152ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81152cc:	f383 8810 	msr	PRIMASK, r3
}
 81152d0:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 81152d2:	687b      	ldr	r3, [r7, #4]
 81152d4:	2220      	movs	r2, #32
 81152d6:	629a      	str	r2, [r3, #40]	@ 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 81152d8:	687b      	ldr	r3, [r7, #4]
 81152da:	68db      	ldr	r3, [r3, #12]
 81152dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81152de:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 81152e2:	429a      	cmp	r2, r3
 81152e4:	d006      	beq.n	81152f4 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 81152e6:	687b      	ldr	r3, [r7, #4]
 81152e8:	68db      	ldr	r3, [r3, #12]
 81152ea:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 81152ee:	4618      	mov	r0, r3
 81152f0:	f7ff fe00 	bl	8114ef4 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 81152f4:	f3ef 8310 	mrs	r3, PRIMASK
 81152f8:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 81152fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 81152fc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 81152fe:	b672      	cpsid	i
    return(int_posture);
 8115300:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8115302:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8115306:	4b0b      	ldr	r3, [pc, #44]	@ (8115334 <_tx_mutex_put+0x2c4>)
 8115308:	681b      	ldr	r3, [r3, #0]
 811530a:	3b01      	subs	r3, #1
 811530c:	4a09      	ldr	r2, [pc, #36]	@ (8115334 <_tx_mutex_put+0x2c4>)
 811530e:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8115310:	687b      	ldr	r3, [r7, #4]
 8115312:	2200      	movs	r2, #0
 8115314:	60da      	str	r2, [r3, #12]
 8115316:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 811531a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811531c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811531e:	f383 8810 	msr	PRIMASK, r3
}
 8115322:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8115324:	f000 fb5a 	bl	81159dc <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8115328:	2300      	movs	r3, #0
 811532a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 811532e:	e0bd      	b.n	81154ac <_tx_mutex_put+0x43c>
 8115330:	20058128 	.word	0x20058128
 8115334:	200581c0 	.word	0x200581c0
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8115338:	687b      	ldr	r3, [r7, #4]
 811533a:	699b      	ldr	r3, [r3, #24]
 811533c:	67fb      	str	r3, [r7, #124]	@ 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 811533e:	687b      	ldr	r3, [r7, #4]
 8115340:	691b      	ldr	r3, [r3, #16]
 8115342:	2b01      	cmp	r3, #1
 8115344:	d10a      	bne.n	811535c <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8115346:	687b      	ldr	r3, [r7, #4]
 8115348:	68db      	ldr	r3, [r3, #12]
 811534a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 811534e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8115350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8115352:	687b      	ldr	r3, [r7, #4]
 8115354:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8115356:	687b      	ldr	r3, [r7, #4]
 8115358:	2220      	movs	r2, #32
 811535a:	629a      	str	r2, [r3, #40]	@ 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 811535c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 811535e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8115362:	673b      	str	r3, [r7, #112]	@ 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8115364:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8115366:	2b00      	cmp	r3, #0
 8115368:	d10a      	bne.n	8115380 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 811536a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 811536c:	687a      	ldr	r2, [r7, #4]
 811536e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8115372:	687b      	ldr	r3, [r7, #4]
 8115374:	687a      	ldr	r2, [r7, #4]
 8115376:	62da      	str	r2, [r3, #44]	@ 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8115378:	687b      	ldr	r3, [r7, #4]
 811537a:	687a      	ldr	r2, [r7, #4]
 811537c:	631a      	str	r2, [r3, #48]	@ 0x30
 811537e:	e016      	b.n	81153ae <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8115380:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8115382:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8115386:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 811538a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 811538e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8115390:	677b      	str	r3, [r7, #116]	@ 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8115392:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8115396:	687a      	ldr	r2, [r7, #4]
 8115398:	631a      	str	r2, [r3, #48]	@ 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 811539a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 811539c:	687a      	ldr	r2, [r7, #4]
 811539e:	62da      	str	r2, [r3, #44]	@ 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 81153a0:	687b      	ldr	r3, [r7, #4]
 81153a2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 81153a4:	631a      	str	r2, [r3, #48]	@ 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 81153a6:	687b      	ldr	r3, [r7, #4]
 81153a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 81153ac:	62da      	str	r2, [r3, #44]	@ 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 81153ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81153b0:	1c5a      	adds	r2, r3, #1
 81153b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 81153b4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 81153b8:	687b      	ldr	r3, [r7, #4]
 81153ba:	2201      	movs	r2, #1
 81153bc:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 81153be:	687b      	ldr	r3, [r7, #4]
 81153c0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 81153c2:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 81153c4:	687b      	ldr	r3, [r7, #4]
 81153c6:	69db      	ldr	r3, [r3, #28]
 81153c8:	1e5a      	subs	r2, r3, #1
 81153ca:	687b      	ldr	r3, [r7, #4]
 81153cc:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 81153ce:	687b      	ldr	r3, [r7, #4]
 81153d0:	69db      	ldr	r3, [r3, #28]
 81153d2:	66fb      	str	r3, [r7, #108]	@ 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 81153d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81153d6:	2b00      	cmp	r3, #0
 81153d8:	d103      	bne.n	81153e2 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 81153da:	687b      	ldr	r3, [r7, #4]
 81153dc:	2200      	movs	r2, #0
 81153de:	619a      	str	r2, [r3, #24]
 81153e0:	e00e      	b.n	8115400 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 81153e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 81153e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81153e6:	66bb      	str	r3, [r7, #104]	@ 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 81153e8:	687b      	ldr	r3, [r7, #4]
 81153ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 81153ec:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 81153ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 81153f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81153f2:	667b      	str	r3, [r7, #100]	@ 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 81153f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81153f6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 81153f8:	675a      	str	r2, [r3, #116]	@ 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 81153fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 81153fc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 81153fe:	671a      	str	r2, [r3, #112]	@ 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8115400:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8115402:	2200      	movs	r2, #0
 8115404:	669a      	str	r2, [r3, #104]	@ 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8115406:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8115408:	2200      	movs	r2, #0
 811540a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 811540e:	4b2a      	ldr	r3, [pc, #168]	@ (81154b8 <_tx_mutex_put+0x448>)
 8115410:	681b      	ldr	r3, [r3, #0]
 8115412:	3301      	adds	r3, #1
 8115414:	4a28      	ldr	r2, [pc, #160]	@ (81154b8 <_tx_mutex_put+0x448>)
 8115416:	6013      	str	r3, [r2, #0]
 8115418:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 811541c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811541e:	69fb      	ldr	r3, [r7, #28]
 8115420:	f383 8810 	msr	PRIMASK, r3
}
 8115424:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8115426:	687b      	ldr	r3, [r7, #4]
 8115428:	691b      	ldr	r3, [r3, #16]
 811542a:	2b01      	cmp	r3, #1
 811542c:	d12d      	bne.n	811548a <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 811542e:	687b      	ldr	r3, [r7, #4]
 8115430:	69db      	ldr	r3, [r3, #28]
 8115432:	2b00      	cmp	r3, #0
 8115434:	d01c      	beq.n	8115470 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8115436:	6878      	ldr	r0, [r7, #4]
 8115438:	f7ff fcaa 	bl	8114d90 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 811543c:	f3ef 8310 	mrs	r3, PRIMASK
 8115440:	61bb      	str	r3, [r7, #24]
    return(posture);
 8115442:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8115444:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8115446:	b672      	cpsid	i
    return(int_posture);
 8115448:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 811544a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 811544e:	687b      	ldr	r3, [r7, #4]
 8115450:	699b      	ldr	r3, [r3, #24]
 8115452:	663b      	str	r3, [r7, #96]	@ 0x60
                                    if (suspended_thread != TX_NULL)
 8115454:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8115456:	2b00      	cmp	r3, #0
 8115458:	d003      	beq.n	8115462 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 811545a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 811545c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811545e:	687b      	ldr	r3, [r7, #4]
 8115460:	629a      	str	r2, [r3, #40]	@ 0x28
 8115462:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8115466:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115468:	693b      	ldr	r3, [r7, #16]
 811546a:	f383 8810 	msr	PRIMASK, r3
}
 811546e:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8115470:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8115474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8115476:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 811547a:	429a      	cmp	r2, r3
 811547c:	d005      	beq.n	811548a <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 811547e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8115482:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8115486:	f7ff fd35 	bl	8114ef4 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 811548a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 811548c:	f000 fae0 	bl	8115a50 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8115490:	2300      	movs	r3, #0
 8115492:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8115496:	e009      	b.n	81154ac <_tx_mutex_put+0x43c>
 8115498:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 811549c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811549e:	68fb      	ldr	r3, [r7, #12]
 81154a0:	f383 8810 	msr	PRIMASK, r3
}
 81154a4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 81154a6:	231e      	movs	r3, #30
 81154a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    }

    /* Return the completion status.  */
    return(status);
 81154ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 81154b0:	4618      	mov	r0, r3
 81154b2:	3798      	adds	r7, #152	@ 0x98
 81154b4:	46bd      	mov	sp, r7
 81154b6:	bd80      	pop	{r7, pc}
 81154b8:	200581c0 	.word	0x200581c0

081154bc <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 81154bc:	b580      	push	{r7, lr}
 81154be:	b092      	sub	sp, #72	@ 0x48
 81154c0:	af00      	add	r7, sp, #0
 81154c2:	60f8      	str	r0, [r7, #12]
 81154c4:	60b9      	str	r1, [r7, #8]
 81154c6:	607a      	str	r2, [r7, #4]
 81154c8:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 81154ca:	2300      	movs	r3, #0
 81154cc:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 81154ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 81154d0:	21ef      	movs	r1, #239	@ 0xef
 81154d2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 81154d4:	f001 fdc8 	bl	8117068 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 81154d8:	22b4      	movs	r2, #180	@ 0xb4
 81154da:	2100      	movs	r1, #0
 81154dc:	68f8      	ldr	r0, [r7, #12]
 81154de:	f001 fdc3 	bl	8117068 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 81154e2:	68fb      	ldr	r3, [r7, #12]
 81154e4:	68ba      	ldr	r2, [r7, #8]
 81154e6:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 81154e8:	68fb      	ldr	r3, [r7, #12]
 81154ea:	687a      	ldr	r2, [r7, #4]
 81154ec:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 81154ee:	68fb      	ldr	r3, [r7, #12]
 81154f0:	683a      	ldr	r2, [r7, #0]
 81154f2:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 81154f4:	68fb      	ldr	r3, [r7, #12]
 81154f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 81154f8:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 81154fa:	68fb      	ldr	r3, [r7, #12]
 81154fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 81154fe:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8115500:	68fb      	ldr	r3, [r7, #12]
 8115502:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8115504:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8115506:	68fb      	ldr	r3, [r7, #12]
 8115508:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 811550a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    thread_ptr -> tx_thread_time_slice =        time_slice;
 811550e:	68fb      	ldr	r3, [r7, #12]
 8115510:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8115512:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8115514:	68fb      	ldr	r3, [r7, #12]
 8115516:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8115518:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 811551a:	68fb      	ldr	r3, [r7, #12]
 811551c:	2220      	movs	r2, #32
 811551e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8115522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8115524:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8115526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8115528:	3b01      	subs	r3, #1
 811552a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 811552c:	4413      	add	r3, r2
 811552e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8115530:	68fb      	ldr	r3, [r7, #12]
 8115532:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8115534:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8115536:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8115538:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 811553a:	429a      	cmp	r2, r3
 811553c:	d007      	beq.n	811554e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 811553e:	68fb      	ldr	r3, [r7, #12]
 8115540:	2200      	movs	r2, #0
 8115542:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8115544:	68fb      	ldr	r3, [r7, #12]
 8115546:	2200      	movs	r2, #0
 8115548:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 811554c:	e006      	b.n	811555c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 811554e:	68fb      	ldr	r3, [r7, #12]
 8115550:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8115552:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8115554:	68fb      	ldr	r3, [r7, #12]
 8115556:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8115558:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 811555c:	68fb      	ldr	r3, [r7, #12]
 811555e:	2203      	movs	r2, #3
 8115560:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8115562:	68fb      	ldr	r3, [r7, #12]
 8115564:	4a48      	ldr	r2, [pc, #288]	@ (8115688 <_tx_thread_create+0x1cc>)
 8115566:	655a      	str	r2, [r3, #84]	@ 0x54
 8115568:	68fa      	ldr	r2, [r7, #12]
 811556a:	68fb      	ldr	r3, [r7, #12]
 811556c:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 811556e:	4947      	ldr	r1, [pc, #284]	@ (811568c <_tx_thread_create+0x1d0>)
 8115570:	68f8      	ldr	r0, [r7, #12]
 8115572:	f7ea ff75 	bl	8100460 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8115576:	f3ef 8310 	mrs	r3, PRIMASK
 811557a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 811557c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 811557e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8115580:	b672      	cpsid	i
    return(int_posture);
 8115582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8115584:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8115586:	68fb      	ldr	r3, [r7, #12]
 8115588:	4a41      	ldr	r2, [pc, #260]	@ (8115690 <_tx_thread_create+0x1d4>)
 811558a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 811558c:	4b41      	ldr	r3, [pc, #260]	@ (8115694 <_tx_thread_create+0x1d8>)
 811558e:	681b      	ldr	r3, [r3, #0]
 8115590:	2b00      	cmp	r3, #0
 8115592:	d10b      	bne.n	81155ac <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8115594:	4a40      	ldr	r2, [pc, #256]	@ (8115698 <_tx_thread_create+0x1dc>)
 8115596:	68fb      	ldr	r3, [r7, #12]
 8115598:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 811559a:	68fb      	ldr	r3, [r7, #12]
 811559c:	68fa      	ldr	r2, [r7, #12]
 811559e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 81155a2:	68fb      	ldr	r3, [r7, #12]
 81155a4:	68fa      	ldr	r2, [r7, #12]
 81155a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 81155aa:	e016      	b.n	81155da <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 81155ac:	4b3a      	ldr	r3, [pc, #232]	@ (8115698 <_tx_thread_create+0x1dc>)
 81155ae:	681b      	ldr	r3, [r3, #0]
 81155b0:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 81155b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81155b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81155b8:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 81155ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81155bc:	68fa      	ldr	r2, [r7, #12]
 81155be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 81155c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81155c4:	68fa      	ldr	r2, [r7, #12]
 81155c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 81155ca:	68fb      	ldr	r3, [r7, #12]
 81155cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81155ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 81155d2:	68fb      	ldr	r3, [r7, #12]
 81155d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81155d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 81155da:	4b2e      	ldr	r3, [pc, #184]	@ (8115694 <_tx_thread_create+0x1d8>)
 81155dc:	681b      	ldr	r3, [r3, #0]
 81155de:	3301      	adds	r3, #1
 81155e0:	4a2c      	ldr	r2, [pc, #176]	@ (8115694 <_tx_thread_create+0x1d8>)
 81155e2:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 81155e4:	4b2d      	ldr	r3, [pc, #180]	@ (811569c <_tx_thread_create+0x1e0>)
 81155e6:	681b      	ldr	r3, [r3, #0]
 81155e8:	3301      	adds	r3, #1
 81155ea:	4a2c      	ldr	r2, [pc, #176]	@ (811569c <_tx_thread_create+0x1e0>)
 81155ec:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 81155ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 81155f0:	2b01      	cmp	r3, #1
 81155f2:	d129      	bne.n	8115648 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 81155f4:	f3ef 8305 	mrs	r3, IPSR
 81155f8:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 81155fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 81155fc:	4b28      	ldr	r3, [pc, #160]	@ (81156a0 <_tx_thread_create+0x1e4>)
 81155fe:	681b      	ldr	r3, [r3, #0]
 8115600:	4313      	orrs	r3, r2
 8115602:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8115606:	d30d      	bcc.n	8115624 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8115608:	4b26      	ldr	r3, [pc, #152]	@ (81156a4 <_tx_thread_create+0x1e8>)
 811560a:	681b      	ldr	r3, [r3, #0]
 811560c:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 811560e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8115610:	2b00      	cmp	r3, #0
 8115612:	d009      	beq.n	8115628 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8115614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8115616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8115618:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 811561a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811561c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811561e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8115620:	63da      	str	r2, [r3, #60]	@ 0x3c
 8115622:	e001      	b.n	8115628 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8115624:	2300      	movs	r3, #0
 8115626:	647b      	str	r3, [r7, #68]	@ 0x44
 8115628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811562a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811562c:	6a3b      	ldr	r3, [r7, #32]
 811562e:	f383 8810 	msr	PRIMASK, r3
}
 8115632:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8115634:	68f8      	ldr	r0, [r7, #12]
 8115636:	f000 fa0b 	bl	8115a50 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 811563a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811563c:	2b00      	cmp	r3, #0
 811563e:	d01e      	beq.n	811567e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8115640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8115642:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8115644:	63da      	str	r2, [r3, #60]	@ 0x3c
 8115646:	e01a      	b.n	811567e <_tx_thread_create+0x1c2>
 8115648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811564a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811564c:	693b      	ldr	r3, [r7, #16]
 811564e:	f383 8810 	msr	PRIMASK, r3
}
 8115652:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8115654:	f3ef 8310 	mrs	r3, PRIMASK
 8115658:	61bb      	str	r3, [r7, #24]
    return(posture);
 811565a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 811565c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 811565e:	b672      	cpsid	i
    return(int_posture);
 8115660:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8115662:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8115664:	4b0d      	ldr	r3, [pc, #52]	@ (811569c <_tx_thread_create+0x1e0>)
 8115666:	681b      	ldr	r3, [r3, #0]
 8115668:	3b01      	subs	r3, #1
 811566a:	4a0c      	ldr	r2, [pc, #48]	@ (811569c <_tx_thread_create+0x1e0>)
 811566c:	6013      	str	r3, [r2, #0]
 811566e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8115670:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115672:	69fb      	ldr	r3, [r7, #28]
 8115674:	f383 8810 	msr	PRIMASK, r3
}
 8115678:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 811567a:	f000 f9af 	bl	81159dc <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 811567e:	2300      	movs	r3, #0
}
 8115680:	4618      	mov	r0, r3
 8115682:	3748      	adds	r7, #72	@ 0x48
 8115684:	46bd      	mov	sp, r7
 8115686:	bd80      	pop	{r7, pc}
 8115688:	08115f25 	.word	0x08115f25
 811568c:	08115845 	.word	0x08115845
 8115690:	54485244 	.word	0x54485244
 8115694:	20058134 	.word	0x20058134
 8115698:	20058130 	.word	0x20058130
 811569c:	200581c0 	.word	0x200581c0
 81156a0:	20050088 	.word	0x20050088
 81156a4:	2005812c 	.word	0x2005812c

081156a8 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 81156a8:	b480      	push	{r7}
 81156aa:	b087      	sub	sp, #28
 81156ac:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 81156ae:	f3ef 8310 	mrs	r3, PRIMASK
 81156b2:	60bb      	str	r3, [r7, #8]
    return(posture);
 81156b4:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 81156b6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 81156b8:	b672      	cpsid	i
    return(int_posture);
 81156ba:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 81156bc:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 81156be:	4b08      	ldr	r3, [pc, #32]	@ (81156e0 <_tx_thread_identify+0x38>)
 81156c0:	681b      	ldr	r3, [r3, #0]
 81156c2:	613b      	str	r3, [r7, #16]
 81156c4:	697b      	ldr	r3, [r7, #20]
 81156c6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81156c8:	68fb      	ldr	r3, [r7, #12]
 81156ca:	f383 8810 	msr	PRIMASK, r3
}
 81156ce:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 81156d0:	693b      	ldr	r3, [r7, #16]
}
 81156d2:	4618      	mov	r0, r3
 81156d4:	371c      	adds	r7, #28
 81156d6:	46bd      	mov	sp, r7
 81156d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81156dc:	4770      	bx	lr
 81156de:	bf00      	nop
 81156e0:	20058128 	.word	0x20058128

081156e4 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 81156e4:	b580      	push	{r7, lr}
 81156e6:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 81156e8:	4b12      	ldr	r3, [pc, #72]	@ (8115734 <_tx_thread_initialize+0x50>)
 81156ea:	2200      	movs	r2, #0
 81156ec:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 81156ee:	4b12      	ldr	r3, [pc, #72]	@ (8115738 <_tx_thread_initialize+0x54>)
 81156f0:	2200      	movs	r2, #0
 81156f2:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 81156f4:	4b11      	ldr	r3, [pc, #68]	@ (811573c <_tx_thread_initialize+0x58>)
 81156f6:	2200      	movs	r2, #0
 81156f8:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 81156fa:	4b11      	ldr	r3, [pc, #68]	@ (8115740 <_tx_thread_initialize+0x5c>)
 81156fc:	2220      	movs	r2, #32
 81156fe:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8115700:	2280      	movs	r2, #128	@ 0x80
 8115702:	2100      	movs	r1, #0
 8115704:	480f      	ldr	r0, [pc, #60]	@ (8115744 <_tx_thread_initialize+0x60>)
 8115706:	f001 fcaf 	bl	8117068 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 811570a:	4b0f      	ldr	r3, [pc, #60]	@ (8115748 <_tx_thread_initialize+0x64>)
 811570c:	2200      	movs	r2, #0
 811570e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8115710:	4b0e      	ldr	r3, [pc, #56]	@ (811574c <_tx_thread_initialize+0x68>)
 8115712:	2200      	movs	r2, #0
 8115714:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8115716:	4b0e      	ldr	r3, [pc, #56]	@ (8115750 <_tx_thread_initialize+0x6c>)
 8115718:	2200      	movs	r2, #0
 811571a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 811571c:	4b0d      	ldr	r3, [pc, #52]	@ (8115754 <_tx_thread_initialize+0x70>)
 811571e:	2200      	movs	r2, #0
 8115720:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8115722:	4b0d      	ldr	r3, [pc, #52]	@ (8115758 <_tx_thread_initialize+0x74>)
 8115724:	681b      	ldr	r3, [r3, #0]
 8115726:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 811572a:	4a0b      	ldr	r2, [pc, #44]	@ (8115758 <_tx_thread_initialize+0x74>)
 811572c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 811572e:	bf00      	nop
 8115730:	bd80      	pop	{r7, pc}
 8115732:	bf00      	nop
 8115734:	20058128 	.word	0x20058128
 8115738:	2005812c 	.word	0x2005812c
 811573c:	20058138 	.word	0x20058138
 8115740:	2005813c 	.word	0x2005813c
 8115744:	20058140 	.word	0x20058140
 8115748:	20058130 	.word	0x20058130
 811574c:	20058134 	.word	0x20058134
 8115750:	200581c0 	.word	0x200581c0
 8115754:	200581c4 	.word	0x200581c4
 8115758:	200581c8 	.word	0x200581c8

0811575c <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 811575c:	b580      	push	{r7, lr}
 811575e:	b08c      	sub	sp, #48	@ 0x30
 8115760:	af00      	add	r7, sp, #0
 8115762:	60f8      	str	r0, [r7, #12]
 8115764:	60b9      	str	r1, [r7, #8]
 8115766:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8115768:	2300      	movs	r3, #0
 811576a:	62bb      	str	r3, [r7, #40]	@ 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 811576c:	68fb      	ldr	r3, [r7, #12]
 811576e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8115772:	68ba      	ldr	r2, [r7, #8]
 8115774:	429a      	cmp	r2, r3
 8115776:	d004      	beq.n	8115782 <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 8115778:	68bb      	ldr	r3, [r7, #8]
 811577a:	2b00      	cmp	r3, #0
 811577c:	d001      	beq.n	8115782 <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 811577e:	2300      	movs	r3, #0
 8115780:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8115782:	f3ef 8310 	mrs	r3, PRIMASK
 8115786:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8115788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 811578a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 811578c:	b672      	cpsid	i
    return(int_posture);
 811578e:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8115790:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 8115792:	68fb      	ldr	r3, [r7, #12]
 8115794:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8115798:	68ba      	ldr	r2, [r7, #8]
 811579a:	429a      	cmp	r2, r3
 811579c:	d902      	bls.n	81157a4 <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 811579e:	2318      	movs	r3, #24
 81157a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 81157a2:	e03e      	b.n	8115822 <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 81157a4:	68fb      	ldr	r3, [r7, #12]
 81157a6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 81157aa:	687b      	ldr	r3, [r7, #4]
 81157ac:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 81157ae:	68fb      	ldr	r3, [r7, #12]
 81157b0:	68ba      	ldr	r2, [r7, #8]
 81157b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 81157b6:	68fb      	ldr	r3, [r7, #12]
 81157b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81157bc:	68ba      	ldr	r2, [r7, #8]
 81157be:	429a      	cmp	r2, r3
 81157c0:	d203      	bcs.n	81157ca <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 81157c2:	68fb      	ldr	r3, [r7, #12]
 81157c4:	68ba      	ldr	r2, [r7, #8]
 81157c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 81157c8:	e004      	b.n	81157d4 <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 81157ca:	68fb      	ldr	r3, [r7, #12]
 81157cc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 81157d0:	68fb      	ldr	r3, [r7, #12]
 81157d2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 81157d4:	68fb      	ldr	r3, [r7, #12]
 81157d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81157d8:	4b17      	ldr	r3, [pc, #92]	@ (8115838 <_tx_thread_preemption_change+0xdc>)
 81157da:	681b      	ldr	r3, [r3, #0]
 81157dc:	429a      	cmp	r2, r3
 81157de:	d920      	bls.n	8115822 <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 81157e0:	4b15      	ldr	r3, [pc, #84]	@ (8115838 <_tx_thread_preemption_change+0xdc>)
 81157e2:	681b      	ldr	r3, [r3, #0]
 81157e4:	68ba      	ldr	r2, [r7, #8]
 81157e6:	429a      	cmp	r2, r3
 81157e8:	d91b      	bls.n	8115822 <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 81157ea:	4b14      	ldr	r3, [pc, #80]	@ (811583c <_tx_thread_preemption_change+0xe0>)
 81157ec:	681b      	ldr	r3, [r3, #0]
 81157ee:	68fa      	ldr	r2, [r7, #12]
 81157f0:	429a      	cmp	r2, r3
 81157f2:	d116      	bne.n	8115822 <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 81157f4:	4b10      	ldr	r3, [pc, #64]	@ (8115838 <_tx_thread_preemption_change+0xdc>)
 81157f6:	681b      	ldr	r3, [r3, #0]
 81157f8:	4a11      	ldr	r2, [pc, #68]	@ (8115840 <_tx_thread_preemption_change+0xe4>)
 81157fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81157fe:	4a0f      	ldr	r2, [pc, #60]	@ (811583c <_tx_thread_preemption_change+0xe0>)
 8115800:	6013      	str	r3, [r2, #0]
 8115802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115804:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115806:	697b      	ldr	r3, [r7, #20]
 8115808:	f383 8810 	msr	PRIMASK, r3
}
 811580c:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 811580e:	f000 f8e5 	bl	81159dc <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8115812:	f3ef 8310 	mrs	r3, PRIMASK
 8115816:	61fb      	str	r3, [r7, #28]
    return(posture);
 8115818:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 811581a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 811581c:	b672      	cpsid	i
    return(int_posture);
 811581e:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8115820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8115822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115824:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115826:	693b      	ldr	r3, [r7, #16]
 8115828:	f383 8810 	msr	PRIMASK, r3
}
 811582c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 811582e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8115830:	4618      	mov	r0, r3
 8115832:	3730      	adds	r7, #48	@ 0x30
 8115834:	46bd      	mov	sp, r7
 8115836:	bd80      	pop	{r7, pc}
 8115838:	2005813c 	.word	0x2005813c
 811583c:	2005812c 	.word	0x2005812c
 8115840:	20058140 	.word	0x20058140

08115844 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8115844:	b580      	push	{r7, lr}
 8115846:	b088      	sub	sp, #32
 8115848:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 811584a:	4b21      	ldr	r3, [pc, #132]	@ (81158d0 <_tx_thread_shell_entry+0x8c>)
 811584c:	681b      	ldr	r3, [r3, #0]
 811584e:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8115850:	69fb      	ldr	r3, [r7, #28]
 8115852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8115854:	69fa      	ldr	r2, [r7, #28]
 8115856:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8115858:	4610      	mov	r0, r2
 811585a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 811585c:	4b1d      	ldr	r3, [pc, #116]	@ (81158d4 <_tx_thread_shell_entry+0x90>)
 811585e:	681b      	ldr	r3, [r3, #0]
 8115860:	2b00      	cmp	r3, #0
 8115862:	d003      	beq.n	811586c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8115864:	4b1b      	ldr	r3, [pc, #108]	@ (81158d4 <_tx_thread_shell_entry+0x90>)
 8115866:	681b      	ldr	r3, [r3, #0]
 8115868:	69f8      	ldr	r0, [r7, #28]
 811586a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 811586c:	f3ef 8310 	mrs	r3, PRIMASK
 8115870:	607b      	str	r3, [r7, #4]
    return(posture);
 8115872:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8115874:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8115876:	b672      	cpsid	i
    return(int_posture);
 8115878:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 811587a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 811587c:	69fb      	ldr	r3, [r7, #28]
 811587e:	2201      	movs	r2, #1
 8115880:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8115882:	69fb      	ldr	r3, [r7, #28]
 8115884:	2201      	movs	r2, #1
 8115886:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8115888:	69fb      	ldr	r3, [r7, #28]
 811588a:	2200      	movs	r2, #0
 811588c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 811588e:	4b12      	ldr	r3, [pc, #72]	@ (81158d8 <_tx_thread_shell_entry+0x94>)
 8115890:	681b      	ldr	r3, [r3, #0]
 8115892:	3301      	adds	r3, #1
 8115894:	4a10      	ldr	r2, [pc, #64]	@ (81158d8 <_tx_thread_shell_entry+0x94>)
 8115896:	6013      	str	r3, [r2, #0]
 8115898:	69bb      	ldr	r3, [r7, #24]
 811589a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811589c:	68bb      	ldr	r3, [r7, #8]
 811589e:	f383 8810 	msr	PRIMASK, r3
}
 81158a2:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 81158a4:	f3ef 8314 	mrs	r3, CONTROL
 81158a8:	60fb      	str	r3, [r7, #12]
    return(control_value);
 81158aa:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 81158ac:	617b      	str	r3, [r7, #20]
 81158ae:	697b      	ldr	r3, [r7, #20]
 81158b0:	f023 0304 	bic.w	r3, r3, #4
 81158b4:	617b      	str	r3, [r7, #20]
 81158b6:	697b      	ldr	r3, [r7, #20]
 81158b8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 81158ba:	693b      	ldr	r3, [r7, #16]
 81158bc:	f383 8814 	msr	CONTROL, r3
}
 81158c0:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 81158c2:	69f8      	ldr	r0, [r7, #28]
 81158c4:	f000 f9c4 	bl	8115c50 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 81158c8:	bf00      	nop
 81158ca:	3720      	adds	r7, #32
 81158cc:	46bd      	mov	sp, r7
 81158ce:	bd80      	pop	{r7, pc}
 81158d0:	20058128 	.word	0x20058128
 81158d4:	200581c4 	.word	0x200581c4
 81158d8:	200581c0 	.word	0x200581c0

081158dc <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 81158dc:	b580      	push	{r7, lr}
 81158de:	b08e      	sub	sp, #56	@ 0x38
 81158e0:	af00      	add	r7, sp, #0
 81158e2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 81158e4:	f3ef 8310 	mrs	r3, PRIMASK
 81158e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 81158ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 81158ec:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 81158ee:	b672      	cpsid	i
    return(int_posture);
 81158f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 81158f2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 81158f4:	4b35      	ldr	r3, [pc, #212]	@ (81159cc <_tx_thread_sleep+0xf0>)
 81158f6:	681b      	ldr	r3, [r3, #0]
 81158f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 81158fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81158fc:	2b00      	cmp	r3, #0
 81158fe:	d108      	bne.n	8115912 <_tx_thread_sleep+0x36>
 8115900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115902:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115904:	6a3b      	ldr	r3, [r7, #32]
 8115906:	f383 8810 	msr	PRIMASK, r3
}
 811590a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 811590c:	2313      	movs	r3, #19
 811590e:	637b      	str	r3, [r7, #52]	@ 0x34
 8115910:	e056      	b.n	81159c0 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8115912:	f3ef 8305 	mrs	r3, IPSR
 8115916:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8115918:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 811591a:	4b2d      	ldr	r3, [pc, #180]	@ (81159d0 <_tx_thread_sleep+0xf4>)
 811591c:	681b      	ldr	r3, [r3, #0]
 811591e:	4313      	orrs	r3, r2
 8115920:	2b00      	cmp	r3, #0
 8115922:	d008      	beq.n	8115936 <_tx_thread_sleep+0x5a>
 8115924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115926:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115928:	69bb      	ldr	r3, [r7, #24]
 811592a:	f383 8810 	msr	PRIMASK, r3
}
 811592e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8115930:	2313      	movs	r3, #19
 8115932:	637b      	str	r3, [r7, #52]	@ 0x34
 8115934:	e044      	b.n	81159c0 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8115936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115938:	4a26      	ldr	r2, [pc, #152]	@ (81159d4 <_tx_thread_sleep+0xf8>)
 811593a:	4293      	cmp	r3, r2
 811593c:	d108      	bne.n	8115950 <_tx_thread_sleep+0x74>
 811593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115940:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115942:	697b      	ldr	r3, [r7, #20]
 8115944:	f383 8810 	msr	PRIMASK, r3
}
 8115948:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 811594a:	2313      	movs	r3, #19
 811594c:	637b      	str	r3, [r7, #52]	@ 0x34
 811594e:	e037      	b.n	81159c0 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8115950:	687b      	ldr	r3, [r7, #4]
 8115952:	2b00      	cmp	r3, #0
 8115954:	d108      	bne.n	8115968 <_tx_thread_sleep+0x8c>
 8115956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115958:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811595a:	693b      	ldr	r3, [r7, #16]
 811595c:	f383 8810 	msr	PRIMASK, r3
}
 8115960:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8115962:	2300      	movs	r3, #0
 8115964:	637b      	str	r3, [r7, #52]	@ 0x34
 8115966:	e02b      	b.n	81159c0 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8115968:	4b1b      	ldr	r3, [pc, #108]	@ (81159d8 <_tx_thread_sleep+0xfc>)
 811596a:	681b      	ldr	r3, [r3, #0]
 811596c:	2b00      	cmp	r3, #0
 811596e:	d008      	beq.n	8115982 <_tx_thread_sleep+0xa6>
 8115970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115972:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115974:	68fb      	ldr	r3, [r7, #12]
 8115976:	f383 8810 	msr	PRIMASK, r3
}
 811597a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 811597c:	2313      	movs	r3, #19
 811597e:	637b      	str	r3, [r7, #52]	@ 0x34
 8115980:	e01e      	b.n	81159c0 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8115982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115984:	2204      	movs	r2, #4
 8115986:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8115988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811598a:	2201      	movs	r2, #1
 811598c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 811598e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115990:	2200      	movs	r2, #0
 8115992:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8115996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115998:	687a      	ldr	r2, [r7, #4]
 811599a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 811599c:	4b0e      	ldr	r3, [pc, #56]	@ (81159d8 <_tx_thread_sleep+0xfc>)
 811599e:	681b      	ldr	r3, [r3, #0]
 81159a0:	3301      	adds	r3, #1
 81159a2:	4a0d      	ldr	r2, [pc, #52]	@ (81159d8 <_tx_thread_sleep+0xfc>)
 81159a4:	6013      	str	r3, [r2, #0]
 81159a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81159a8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81159aa:	68bb      	ldr	r3, [r7, #8]
 81159ac:	f383 8810 	msr	PRIMASK, r3
}
 81159b0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 81159b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81159b4:	f000 f94c 	bl	8115c50 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 81159b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81159ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81159be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 81159c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 81159c2:	4618      	mov	r0, r3
 81159c4:	3738      	adds	r7, #56	@ 0x38
 81159c6:	46bd      	mov	sp, r7
 81159c8:	bd80      	pop	{r7, pc}
 81159ca:	bf00      	nop
 81159cc:	20058128 	.word	0x20058128
 81159d0:	20050088 	.word	0x20050088
 81159d4:	20058270 	.word	0x20058270
 81159d8:	200581c0 	.word	0x200581c0

081159dc <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 81159dc:	b480      	push	{r7}
 81159de:	b089      	sub	sp, #36	@ 0x24
 81159e0:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 81159e2:	4b17      	ldr	r3, [pc, #92]	@ (8115a40 <_tx_thread_system_preempt_check+0x64>)
 81159e4:	681b      	ldr	r3, [r3, #0]
 81159e6:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 81159e8:	69fb      	ldr	r3, [r7, #28]
 81159ea:	2b00      	cmp	r3, #0
 81159ec:	d121      	bne.n	8115a32 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 81159ee:	4b15      	ldr	r3, [pc, #84]	@ (8115a44 <_tx_thread_system_preempt_check+0x68>)
 81159f0:	681b      	ldr	r3, [r3, #0]
 81159f2:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 81159f4:	4b14      	ldr	r3, [pc, #80]	@ (8115a48 <_tx_thread_system_preempt_check+0x6c>)
 81159f6:	681b      	ldr	r3, [r3, #0]
 81159f8:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 81159fa:	69ba      	ldr	r2, [r7, #24]
 81159fc:	697b      	ldr	r3, [r7, #20]
 81159fe:	429a      	cmp	r2, r3
 8115a00:	d017      	beq.n	8115a32 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8115a02:	4b12      	ldr	r3, [pc, #72]	@ (8115a4c <_tx_thread_system_preempt_check+0x70>)
 8115a04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8115a08:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8115a0a:	f3ef 8305 	mrs	r3, IPSR
 8115a0e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8115a10:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 8115a12:	2b00      	cmp	r3, #0
 8115a14:	d10c      	bne.n	8115a30 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8115a16:	f3ef 8310 	mrs	r3, PRIMASK
 8115a1a:	60fb      	str	r3, [r7, #12]
    return(posture);
 8115a1c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8115a1e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8115a20:	b662      	cpsie	i
}
 8115a22:	bf00      	nop
 8115a24:	68bb      	ldr	r3, [r7, #8]
 8115a26:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115a28:	687b      	ldr	r3, [r7, #4]
 8115a2a:	f383 8810 	msr	PRIMASK, r3
}
 8115a2e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8115a30:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8115a32:	bf00      	nop
 8115a34:	3724      	adds	r7, #36	@ 0x24
 8115a36:	46bd      	mov	sp, r7
 8115a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115a3c:	4770      	bx	lr
 8115a3e:	bf00      	nop
 8115a40:	200581c0 	.word	0x200581c0
 8115a44:	20058128 	.word	0x20058128
 8115a48:	2005812c 	.word	0x2005812c
 8115a4c:	e000ed04 	.word	0xe000ed04

08115a50 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8115a50:	b580      	push	{r7, lr}
 8115a52:	b096      	sub	sp, #88	@ 0x58
 8115a54:	af00      	add	r7, sp, #0
 8115a56:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8115a58:	f3ef 8310 	mrs	r3, PRIMASK
 8115a5c:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 8115a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 8115a60:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8115a62:	b672      	cpsid	i
    return(int_posture);
 8115a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8115a66:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8115a68:	687b      	ldr	r3, [r7, #4]
 8115a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8115a6c:	2b00      	cmp	r3, #0
 8115a6e:	d005      	beq.n	8115a7c <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8115a70:	687b      	ldr	r3, [r7, #4]
 8115a72:	334c      	adds	r3, #76	@ 0x4c
 8115a74:	4618      	mov	r0, r3
 8115a76:	f000 fbf9 	bl	811626c <_tx_timer_system_deactivate>
 8115a7a:	e002      	b.n	8115a82 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8115a7c:	687b      	ldr	r3, [r7, #4]
 8115a7e:	2200      	movs	r2, #0
 8115a80:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8115a82:	4b6c      	ldr	r3, [pc, #432]	@ (8115c34 <_tx_thread_system_resume+0x1e4>)
 8115a84:	681b      	ldr	r3, [r3, #0]
 8115a86:	3b01      	subs	r3, #1
 8115a88:	4a6a      	ldr	r2, [pc, #424]	@ (8115c34 <_tx_thread_system_resume+0x1e4>)
 8115a8a:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8115a8c:	687b      	ldr	r3, [r7, #4]
 8115a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8115a90:	2b00      	cmp	r3, #0
 8115a92:	f040 8083 	bne.w	8115b9c <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8115a96:	687b      	ldr	r3, [r7, #4]
 8115a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8115a9a:	2b00      	cmp	r3, #0
 8115a9c:	f000 8097 	beq.w	8115bce <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8115aa0:	687b      	ldr	r3, [r7, #4]
 8115aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8115aa4:	2b00      	cmp	r3, #0
 8115aa6:	d172      	bne.n	8115b8e <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8115aa8:	687b      	ldr	r3, [r7, #4]
 8115aaa:	2200      	movs	r2, #0
 8115aac:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8115aae:	687b      	ldr	r3, [r7, #4]
 8115ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8115ab2:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8115ab4:	4a60      	ldr	r2, [pc, #384]	@ (8115c38 <_tx_thread_system_resume+0x1e8>)
 8115ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8115ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8115abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 8115abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8115ac0:	2b00      	cmp	r3, #0
 8115ac2:	d154      	bne.n	8115b6e <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8115ac4:	495c      	ldr	r1, [pc, #368]	@ (8115c38 <_tx_thread_system_resume+0x1e8>)
 8115ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8115ac8:	687a      	ldr	r2, [r7, #4]
 8115aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8115ace:	687b      	ldr	r3, [r7, #4]
 8115ad0:	687a      	ldr	r2, [r7, #4]
 8115ad2:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8115ad4:	687b      	ldr	r3, [r7, #4]
 8115ad6:	687a      	ldr	r2, [r7, #4]
 8115ad8:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8115ada:	2201      	movs	r2, #1
 8115adc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8115ade:	fa02 f303 	lsl.w	r3, r2, r3
 8115ae2:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8115ae4:	4b55      	ldr	r3, [pc, #340]	@ (8115c3c <_tx_thread_system_resume+0x1ec>)
 8115ae6:	681a      	ldr	r2, [r3, #0]
 8115ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8115aea:	4313      	orrs	r3, r2
 8115aec:	4a53      	ldr	r2, [pc, #332]	@ (8115c3c <_tx_thread_system_resume+0x1ec>)
 8115aee:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8115af0:	4b53      	ldr	r3, [pc, #332]	@ (8115c40 <_tx_thread_system_resume+0x1f0>)
 8115af2:	681b      	ldr	r3, [r3, #0]
 8115af4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8115af6:	429a      	cmp	r2, r3
 8115af8:	d269      	bcs.n	8115bce <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8115afa:	4a51      	ldr	r2, [pc, #324]	@ (8115c40 <_tx_thread_system_resume+0x1f0>)
 8115afc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8115afe:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8115b00:	4b50      	ldr	r3, [pc, #320]	@ (8115c44 <_tx_thread_system_resume+0x1f4>)
 8115b02:	681b      	ldr	r3, [r3, #0]
 8115b04:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8115b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8115b08:	2b00      	cmp	r3, #0
 8115b0a:	d103      	bne.n	8115b14 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8115b0c:	4a4d      	ldr	r2, [pc, #308]	@ (8115c44 <_tx_thread_system_resume+0x1f4>)
 8115b0e:	687b      	ldr	r3, [r7, #4]
 8115b10:	6013      	str	r3, [r2, #0]
 8115b12:	e05c      	b.n	8115bce <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8115b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8115b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8115b18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8115b1a:	429a      	cmp	r2, r3
 8115b1c:	d257      	bcs.n	8115bce <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8115b1e:	4a49      	ldr	r2, [pc, #292]	@ (8115c44 <_tx_thread_system_resume+0x1f4>)
 8115b20:	687b      	ldr	r3, [r7, #4]
 8115b22:	6013      	str	r3, [r2, #0]
 8115b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8115b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b2a:	f383 8810 	msr	PRIMASK, r3
}
 8115b2e:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8115b30:	4b40      	ldr	r3, [pc, #256]	@ (8115c34 <_tx_thread_system_resume+0x1e4>)
 8115b32:	681b      	ldr	r3, [r3, #0]
 8115b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 8115b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8115b38:	2b00      	cmp	r3, #0
 8115b3a:	d174      	bne.n	8115c26 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8115b3c:	4b42      	ldr	r3, [pc, #264]	@ (8115c48 <_tx_thread_system_resume+0x1f8>)
 8115b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8115b42:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8115b44:	f3ef 8305 	mrs	r3, IPSR
 8115b48:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8115b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (_tx_ipsr_get() == 0)
 8115b4c:	2b00      	cmp	r3, #0
 8115b4e:	d10c      	bne.n	8115b6a <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8115b50:	f3ef 8310 	mrs	r3, PRIMASK
 8115b54:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8115b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 8115b58:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8115b5a:	b662      	cpsie	i
}
 8115b5c:	bf00      	nop
 8115b5e:	6a3b      	ldr	r3, [r7, #32]
 8115b60:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115b62:	69fb      	ldr	r3, [r7, #28]
 8115b64:	f383 8810 	msr	PRIMASK, r3
}
 8115b68:	bf00      	nop
}
 8115b6a:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8115b6c:	e05b      	b.n	8115c26 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8115b6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8115b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8115b72:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8115b74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8115b76:	687a      	ldr	r2, [r7, #4]
 8115b78:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8115b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8115b7c:	687a      	ldr	r2, [r7, #4]
 8115b7e:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8115b80:	687b      	ldr	r3, [r7, #4]
 8115b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8115b84:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8115b86:	687b      	ldr	r3, [r7, #4]
 8115b88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8115b8a:	621a      	str	r2, [r3, #32]
 8115b8c:	e01f      	b.n	8115bce <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8115b8e:	687b      	ldr	r3, [r7, #4]
 8115b90:	2200      	movs	r2, #0
 8115b92:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8115b94:	687b      	ldr	r3, [r7, #4]
 8115b96:	2203      	movs	r2, #3
 8115b98:	631a      	str	r2, [r3, #48]	@ 0x30
 8115b9a:	e018      	b.n	8115bce <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8115b9c:	687b      	ldr	r3, [r7, #4]
 8115b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8115ba0:	2b01      	cmp	r3, #1
 8115ba2:	d014      	beq.n	8115bce <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8115ba4:	687b      	ldr	r3, [r7, #4]
 8115ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8115ba8:	2b02      	cmp	r3, #2
 8115baa:	d010      	beq.n	8115bce <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8115bac:	687b      	ldr	r3, [r7, #4]
 8115bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8115bb0:	2b00      	cmp	r3, #0
 8115bb2:	d106      	bne.n	8115bc2 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8115bb4:	687b      	ldr	r3, [r7, #4]
 8115bb6:	2200      	movs	r2, #0
 8115bb8:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8115bba:	687b      	ldr	r3, [r7, #4]
 8115bbc:	2200      	movs	r2, #0
 8115bbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8115bc0:	e005      	b.n	8115bce <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8115bc2:	687b      	ldr	r3, [r7, #4]
 8115bc4:	2200      	movs	r2, #0
 8115bc6:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8115bc8:	687b      	ldr	r3, [r7, #4]
 8115bca:	2203      	movs	r2, #3
 8115bcc:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8115bce:	4b1f      	ldr	r3, [pc, #124]	@ (8115c4c <_tx_thread_system_resume+0x1fc>)
 8115bd0:	681b      	ldr	r3, [r3, #0]
 8115bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8115bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8115bd6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115bd8:	69bb      	ldr	r3, [r7, #24]
 8115bda:	f383 8810 	msr	PRIMASK, r3
}
 8115bde:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8115be0:	4b18      	ldr	r3, [pc, #96]	@ (8115c44 <_tx_thread_system_resume+0x1f4>)
 8115be2:	681b      	ldr	r3, [r3, #0]
 8115be4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8115be6:	429a      	cmp	r2, r3
 8115be8:	d020      	beq.n	8115c2c <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8115bea:	4b12      	ldr	r3, [pc, #72]	@ (8115c34 <_tx_thread_system_resume+0x1e4>)
 8115bec:	681b      	ldr	r3, [r3, #0]
 8115bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 8115bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8115bf2:	2b00      	cmp	r3, #0
 8115bf4:	d11a      	bne.n	8115c2c <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8115bf6:	4b14      	ldr	r3, [pc, #80]	@ (8115c48 <_tx_thread_system_resume+0x1f8>)
 8115bf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8115bfc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8115bfe:	f3ef 8305 	mrs	r3, IPSR
 8115c02:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8115c04:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 8115c06:	2b00      	cmp	r3, #0
 8115c08:	d10f      	bne.n	8115c2a <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8115c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8115c0e:	613b      	str	r3, [r7, #16]
    return(posture);
 8115c10:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8115c12:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8115c14:	b662      	cpsie	i
}
 8115c16:	bf00      	nop
 8115c18:	68fb      	ldr	r3, [r7, #12]
 8115c1a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115c1c:	68bb      	ldr	r3, [r7, #8]
 8115c1e:	f383 8810 	msr	PRIMASK, r3
}
 8115c22:	bf00      	nop
}
 8115c24:	e001      	b.n	8115c2a <_tx_thread_system_resume+0x1da>
                                return;
 8115c26:	bf00      	nop
 8115c28:	e000      	b.n	8115c2c <_tx_thread_system_resume+0x1dc>
 8115c2a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8115c2c:	3758      	adds	r7, #88	@ 0x58
 8115c2e:	46bd      	mov	sp, r7
 8115c30:	bd80      	pop	{r7, pc}
 8115c32:	bf00      	nop
 8115c34:	200581c0 	.word	0x200581c0
 8115c38:	20058140 	.word	0x20058140
 8115c3c:	20058138 	.word	0x20058138
 8115c40:	2005813c 	.word	0x2005813c
 8115c44:	2005812c 	.word	0x2005812c
 8115c48:	e000ed04 	.word	0xe000ed04
 8115c4c:	20058128 	.word	0x20058128

08115c50 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8115c50:	b580      	push	{r7, lr}
 8115c52:	b09e      	sub	sp, #120	@ 0x78
 8115c54:	af00      	add	r7, sp, #0
 8115c56:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8115c58:	4b81      	ldr	r3, [pc, #516]	@ (8115e60 <_tx_thread_system_suspend+0x210>)
 8115c5a:	681b      	ldr	r3, [r3, #0]
 8115c5c:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8115c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8115c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 8115c64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 8115c66:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8115c68:	b672      	cpsid	i
    return(int_posture);
 8115c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8115c6c:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8115c6e:	687a      	ldr	r2, [r7, #4]
 8115c70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8115c72:	429a      	cmp	r2, r3
 8115c74:	d112      	bne.n	8115c9c <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8115c76:	687b      	ldr	r3, [r7, #4]
 8115c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8115c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8115c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8115c7e:	2b00      	cmp	r3, #0
 8115c80:	d008      	beq.n	8115c94 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8115c82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8115c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115c88:	d004      	beq.n	8115c94 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8115c8a:	687b      	ldr	r3, [r7, #4]
 8115c8c:	334c      	adds	r3, #76	@ 0x4c
 8115c8e:	4618      	mov	r0, r3
 8115c90:	f000 fa8a 	bl	81161a8 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8115c94:	687b      	ldr	r3, [r7, #4]
 8115c96:	69db      	ldr	r3, [r3, #28]
 8115c98:	4a72      	ldr	r2, [pc, #456]	@ (8115e64 <_tx_thread_system_suspend+0x214>)
 8115c9a:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8115c9c:	4b72      	ldr	r3, [pc, #456]	@ (8115e68 <_tx_thread_system_suspend+0x218>)
 8115c9e:	681b      	ldr	r3, [r3, #0]
 8115ca0:	3b01      	subs	r3, #1
 8115ca2:	4a71      	ldr	r2, [pc, #452]	@ (8115e68 <_tx_thread_system_suspend+0x218>)
 8115ca4:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8115ca6:	687b      	ldr	r3, [r7, #4]
 8115ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8115caa:	2b01      	cmp	r3, #1
 8115cac:	f040 80a6 	bne.w	8115dfc <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8115cb0:	687b      	ldr	r3, [r7, #4]
 8115cb2:	2200      	movs	r2, #0
 8115cb4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8115cb6:	687b      	ldr	r3, [r7, #4]
 8115cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8115cba:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8115cbc:	687b      	ldr	r3, [r7, #4]
 8115cbe:	6a1b      	ldr	r3, [r3, #32]
 8115cc0:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8115cc2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8115cc4:	687b      	ldr	r3, [r7, #4]
 8115cc6:	429a      	cmp	r2, r3
 8115cc8:	d015      	beq.n	8115cf6 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8115cca:	687b      	ldr	r3, [r7, #4]
 8115ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8115cce:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8115cd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8115cd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8115cd4:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8115cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8115cd8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8115cda:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8115cdc:	4a63      	ldr	r2, [pc, #396]	@ (8115e6c <_tx_thread_system_suspend+0x21c>)
 8115cde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8115ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8115ce4:	687a      	ldr	r2, [r7, #4]
 8115ce6:	429a      	cmp	r2, r3
 8115ce8:	d157      	bne.n	8115d9a <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8115cea:	4960      	ldr	r1, [pc, #384]	@ (8115e6c <_tx_thread_system_suspend+0x21c>)
 8115cec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8115cee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8115cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8115cf4:	e051      	b.n	8115d9a <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8115cf6:	4a5d      	ldr	r2, [pc, #372]	@ (8115e6c <_tx_thread_system_suspend+0x21c>)
 8115cf8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8115cfa:	2100      	movs	r1, #0
 8115cfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8115d00:	2201      	movs	r2, #1
 8115d02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8115d04:	fa02 f303 	lsl.w	r3, r2, r3
 8115d08:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8115d0a:	4b59      	ldr	r3, [pc, #356]	@ (8115e70 <_tx_thread_system_suspend+0x220>)
 8115d0c:	681a      	ldr	r2, [r3, #0]
 8115d0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8115d10:	43db      	mvns	r3, r3
 8115d12:	4013      	ands	r3, r2
 8115d14:	4a56      	ldr	r2, [pc, #344]	@ (8115e70 <_tx_thread_system_suspend+0x220>)
 8115d16:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8115d18:	2300      	movs	r3, #0
 8115d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8115d1c:	4b54      	ldr	r3, [pc, #336]	@ (8115e70 <_tx_thread_system_suspend+0x220>)
 8115d1e:	681b      	ldr	r3, [r3, #0]
 8115d20:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8115d22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8115d24:	2b00      	cmp	r3, #0
 8115d26:	d12b      	bne.n	8115d80 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8115d28:	4b52      	ldr	r3, [pc, #328]	@ (8115e74 <_tx_thread_system_suspend+0x224>)
 8115d2a:	2220      	movs	r2, #32
 8115d2c:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8115d2e:	4b52      	ldr	r3, [pc, #328]	@ (8115e78 <_tx_thread_system_suspend+0x228>)
 8115d30:	2200      	movs	r2, #0
 8115d32:	601a      	str	r2, [r3, #0]
 8115d34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8115d36:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8115d3a:	f383 8810 	msr	PRIMASK, r3
}
 8115d3e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8115d40:	4b49      	ldr	r3, [pc, #292]	@ (8115e68 <_tx_thread_system_suspend+0x218>)
 8115d42:	681b      	ldr	r3, [r3, #0]
 8115d44:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 8115d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8115d48:	2b00      	cmp	r3, #0
 8115d4a:	f040 8081 	bne.w	8115e50 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8115d4e:	4b4b      	ldr	r3, [pc, #300]	@ (8115e7c <_tx_thread_system_suspend+0x22c>)
 8115d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8115d54:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8115d56:	f3ef 8305 	mrs	r3, IPSR
 8115d5a:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 8115d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (_tx_ipsr_get() == 0)
 8115d5e:	2b00      	cmp	r3, #0
 8115d60:	d10c      	bne.n	8115d7c <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8115d62:	f3ef 8310 	mrs	r3, PRIMASK
 8115d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 8115d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 8115d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8115d6c:	b662      	cpsie	i
}
 8115d6e:	bf00      	nop
 8115d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8115d72:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8115d76:	f383 8810 	msr	PRIMASK, r3
}
 8115d7a:	bf00      	nop
}
 8115d7c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8115d7e:	e067      	b.n	8115e50 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8115d80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8115d82:	fa93 f3a3 	rbit	r3, r3
 8115d86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8115d88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8115d8a:	fab3 f383 	clz	r3, r3
 8115d8e:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8115d90:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8115d92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8115d94:	4413      	add	r3, r2
 8115d96:	4a37      	ldr	r2, [pc, #220]	@ (8115e74 <_tx_thread_system_suspend+0x224>)
 8115d98:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8115d9a:	4b37      	ldr	r3, [pc, #220]	@ (8115e78 <_tx_thread_system_suspend+0x228>)
 8115d9c:	681b      	ldr	r3, [r3, #0]
 8115d9e:	687a      	ldr	r2, [r7, #4]
 8115da0:	429a      	cmp	r2, r3
 8115da2:	d12b      	bne.n	8115dfc <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8115da4:	4b33      	ldr	r3, [pc, #204]	@ (8115e74 <_tx_thread_system_suspend+0x224>)
 8115da6:	681b      	ldr	r3, [r3, #0]
 8115da8:	4a30      	ldr	r2, [pc, #192]	@ (8115e6c <_tx_thread_system_suspend+0x21c>)
 8115daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8115dae:	4a32      	ldr	r2, [pc, #200]	@ (8115e78 <_tx_thread_system_suspend+0x228>)
 8115db0:	6013      	str	r3, [r2, #0]
 8115db2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8115db4:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8115db8:	f383 8810 	msr	PRIMASK, r3
}
 8115dbc:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8115dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8115e68 <_tx_thread_system_suspend+0x218>)
 8115dc0:	681b      	ldr	r3, [r3, #0]
 8115dc2:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 8115dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8115dc6:	2b00      	cmp	r3, #0
 8115dc8:	d144      	bne.n	8115e54 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8115dca:	4b2c      	ldr	r3, [pc, #176]	@ (8115e7c <_tx_thread_system_suspend+0x22c>)
 8115dcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8115dd0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8115dd2:	f3ef 8305 	mrs	r3, IPSR
 8115dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 8115dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (_tx_ipsr_get() == 0)
 8115dda:	2b00      	cmp	r3, #0
 8115ddc:	d10c      	bne.n	8115df8 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8115dde:	f3ef 8310 	mrs	r3, PRIMASK
 8115de2:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8115de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 8115de6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8115de8:	b662      	cpsie	i
}
 8115dea:	bf00      	nop
 8115dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115dee:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115df0:	6a3b      	ldr	r3, [r7, #32]
 8115df2:	f383 8810 	msr	PRIMASK, r3
}
 8115df6:	bf00      	nop
}
 8115df8:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8115dfa:	e02b      	b.n	8115e54 <_tx_thread_system_suspend+0x204>
 8115dfc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8115dfe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115e00:	69fb      	ldr	r3, [r7, #28]
 8115e02:	f383 8810 	msr	PRIMASK, r3
}
 8115e06:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8115e08:	4b1b      	ldr	r3, [pc, #108]	@ (8115e78 <_tx_thread_system_suspend+0x228>)
 8115e0a:	681b      	ldr	r3, [r3, #0]
 8115e0c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8115e0e:	429a      	cmp	r2, r3
 8115e10:	d022      	beq.n	8115e58 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8115e12:	4b15      	ldr	r3, [pc, #84]	@ (8115e68 <_tx_thread_system_suspend+0x218>)
 8115e14:	681b      	ldr	r3, [r3, #0]
 8115e16:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 8115e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8115e1a:	2b00      	cmp	r3, #0
 8115e1c:	d11c      	bne.n	8115e58 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8115e1e:	4b17      	ldr	r3, [pc, #92]	@ (8115e7c <_tx_thread_system_suspend+0x22c>)
 8115e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8115e24:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8115e26:	f3ef 8305 	mrs	r3, IPSR
 8115e2a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8115e2c:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8115e2e:	2b00      	cmp	r3, #0
 8115e30:	d10c      	bne.n	8115e4c <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8115e32:	f3ef 8310 	mrs	r3, PRIMASK
 8115e36:	617b      	str	r3, [r7, #20]
    return(posture);
 8115e38:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8115e3a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8115e3c:	b662      	cpsie	i
}
 8115e3e:	bf00      	nop
 8115e40:	693b      	ldr	r3, [r7, #16]
 8115e42:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115e44:	68fb      	ldr	r3, [r7, #12]
 8115e46:	f383 8810 	msr	PRIMASK, r3
}
 8115e4a:	bf00      	nop
}
 8115e4c:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8115e4e:	e003      	b.n	8115e58 <_tx_thread_system_suspend+0x208>
                return;
 8115e50:	bf00      	nop
 8115e52:	e002      	b.n	8115e5a <_tx_thread_system_suspend+0x20a>
            return;
 8115e54:	bf00      	nop
 8115e56:	e000      	b.n	8115e5a <_tx_thread_system_suspend+0x20a>
    return;
 8115e58:	bf00      	nop
}
 8115e5a:	3778      	adds	r7, #120	@ 0x78
 8115e5c:	46bd      	mov	sp, r7
 8115e5e:	bd80      	pop	{r7, pc}
 8115e60:	20058128 	.word	0x20058128
 8115e64:	20058730 	.word	0x20058730
 8115e68:	200581c0 	.word	0x200581c0
 8115e6c:	20058140 	.word	0x20058140
 8115e70:	20058138 	.word	0x20058138
 8115e74:	2005813c 	.word	0x2005813c
 8115e78:	2005812c 	.word	0x2005812c
 8115e7c:	e000ed04 	.word	0xe000ed04

08115e80 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8115e80:	b480      	push	{r7}
 8115e82:	b087      	sub	sp, #28
 8115e84:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8115e86:	4b21      	ldr	r3, [pc, #132]	@ (8115f0c <_tx_thread_time_slice+0x8c>)
 8115e88:	681b      	ldr	r3, [r3, #0]
 8115e8a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8115e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8115e90:	60fb      	str	r3, [r7, #12]
    return(posture);
 8115e92:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8115e94:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8115e96:	b672      	cpsid	i
    return(int_posture);
 8115e98:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8115e9a:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8115e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8115f10 <_tx_thread_time_slice+0x90>)
 8115e9e:	2200      	movs	r2, #0
 8115ea0:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8115ea2:	697b      	ldr	r3, [r7, #20]
 8115ea4:	2b00      	cmp	r3, #0
 8115ea6:	d024      	beq.n	8115ef2 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8115ea8:	697b      	ldr	r3, [r7, #20]
 8115eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8115eac:	2b00      	cmp	r3, #0
 8115eae:	d120      	bne.n	8115ef2 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8115eb0:	697b      	ldr	r3, [r7, #20]
 8115eb2:	69da      	ldr	r2, [r3, #28]
 8115eb4:	697b      	ldr	r3, [r7, #20]
 8115eb6:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8115eb8:	697b      	ldr	r3, [r7, #20]
 8115eba:	699b      	ldr	r3, [r3, #24]
 8115ebc:	4a15      	ldr	r2, [pc, #84]	@ (8115f14 <_tx_thread_time_slice+0x94>)
 8115ebe:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8115ec0:	697b      	ldr	r3, [r7, #20]
 8115ec2:	6a1b      	ldr	r3, [r3, #32]
 8115ec4:	697a      	ldr	r2, [r7, #20]
 8115ec6:	429a      	cmp	r2, r3
 8115ec8:	d013      	beq.n	8115ef2 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8115eca:	697b      	ldr	r3, [r7, #20]
 8115ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8115ece:	697b      	ldr	r3, [r7, #20]
 8115ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8115ed2:	429a      	cmp	r2, r3
 8115ed4:	d10d      	bne.n	8115ef2 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8115ed6:	697b      	ldr	r3, [r7, #20]
 8115ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8115eda:	697a      	ldr	r2, [r7, #20]
 8115edc:	6a12      	ldr	r2, [r2, #32]
 8115ede:	490e      	ldr	r1, [pc, #56]	@ (8115f18 <_tx_thread_time_slice+0x98>)
 8115ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8115ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8115f1c <_tx_thread_time_slice+0x9c>)
 8115ee6:	681b      	ldr	r3, [r3, #0]
 8115ee8:	4a0b      	ldr	r2, [pc, #44]	@ (8115f18 <_tx_thread_time_slice+0x98>)
 8115eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8115eee:	4a0c      	ldr	r2, [pc, #48]	@ (8115f20 <_tx_thread_time_slice+0xa0>)
 8115ef0:	6013      	str	r3, [r2, #0]
 8115ef2:	693b      	ldr	r3, [r7, #16]
 8115ef4:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115ef6:	687b      	ldr	r3, [r7, #4]
 8115ef8:	f383 8810 	msr	PRIMASK, r3
}
 8115efc:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8115efe:	bf00      	nop
 8115f00:	371c      	adds	r7, #28
 8115f02:	46bd      	mov	sp, r7
 8115f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115f08:	4770      	bx	lr
 8115f0a:	bf00      	nop
 8115f0c:	20058128 	.word	0x20058128
 8115f10:	200581d0 	.word	0x200581d0
 8115f14:	20058730 	.word	0x20058730
 8115f18:	20058140 	.word	0x20058140
 8115f1c:	2005813c 	.word	0x2005813c
 8115f20:	2005812c 	.word	0x2005812c

08115f24 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8115f24:	b580      	push	{r7, lr}
 8115f26:	b08a      	sub	sp, #40	@ 0x28
 8115f28:	af00      	add	r7, sp, #0
 8115f2a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8115f2c:	687b      	ldr	r3, [r7, #4]
 8115f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8115f30:	f3ef 8310 	mrs	r3, PRIMASK
 8115f34:	617b      	str	r3, [r7, #20]
    return(posture);
 8115f36:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8115f38:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8115f3a:	b672      	cpsid	i
    return(int_posture);
 8115f3c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8115f3e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8115f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8115f44:	2b04      	cmp	r3, #4
 8115f46:	d10e      	bne.n	8115f66 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8115f48:	4b13      	ldr	r3, [pc, #76]	@ (8115f98 <_tx_thread_timeout+0x74>)
 8115f4a:	681b      	ldr	r3, [r3, #0]
 8115f4c:	3301      	adds	r3, #1
 8115f4e:	4a12      	ldr	r2, [pc, #72]	@ (8115f98 <_tx_thread_timeout+0x74>)
 8115f50:	6013      	str	r3, [r2, #0]
 8115f52:	6a3b      	ldr	r3, [r7, #32]
 8115f54:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115f56:	68fb      	ldr	r3, [r7, #12]
 8115f58:	f383 8810 	msr	PRIMASK, r3
}
 8115f5c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8115f5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8115f60:	f7ff fd76 	bl	8115a50 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8115f64:	e013      	b.n	8115f8e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8115f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115f68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8115f6a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8115f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115f6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8115f72:	61bb      	str	r3, [r7, #24]
 8115f74:	6a3b      	ldr	r3, [r7, #32]
 8115f76:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8115f78:	68bb      	ldr	r3, [r7, #8]
 8115f7a:	f383 8810 	msr	PRIMASK, r3
}
 8115f7e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8115f80:	69fb      	ldr	r3, [r7, #28]
 8115f82:	2b00      	cmp	r3, #0
 8115f84:	d003      	beq.n	8115f8e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8115f86:	69fb      	ldr	r3, [r7, #28]
 8115f88:	69b9      	ldr	r1, [r7, #24]
 8115f8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8115f8c:	4798      	blx	r3
}
 8115f8e:	bf00      	nop
 8115f90:	3728      	adds	r7, #40	@ 0x28
 8115f92:	46bd      	mov	sp, r7
 8115f94:	bd80      	pop	{r7, pc}
 8115f96:	bf00      	nop
 8115f98:	200581c0 	.word	0x200581c0

08115f9c <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8115f9c:	b580      	push	{r7, lr}
 8115f9e:	b08a      	sub	sp, #40	@ 0x28
 8115fa0:	af00      	add	r7, sp, #0
 8115fa2:	60f8      	str	r0, [r7, #12]
 8115fa4:	60b9      	str	r1, [r7, #8]
 8115fa6:	607a      	str	r2, [r7, #4]
 8115fa8:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8115faa:	222c      	movs	r2, #44	@ 0x2c
 8115fac:	2100      	movs	r1, #0
 8115fae:	68f8      	ldr	r0, [r7, #12]
 8115fb0:	f001 f85a 	bl	8117068 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 8115fb4:	68fb      	ldr	r3, [r7, #12]
 8115fb6:	68ba      	ldr	r2, [r7, #8]
 8115fb8:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8115fba:	68fb      	ldr	r3, [r7, #12]
 8115fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8115fbe:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8115fc0:	68fb      	ldr	r3, [r7, #12]
 8115fc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8115fc4:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 8115fc6:	68fb      	ldr	r3, [r7, #12]
 8115fc8:	687a      	ldr	r2, [r7, #4]
 8115fca:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8115fcc:	68fb      	ldr	r3, [r7, #12]
 8115fce:	683a      	ldr	r2, [r7, #0]
 8115fd0:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8115fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8115fd6:	61bb      	str	r3, [r7, #24]
    return(posture);
 8115fd8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8115fda:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8115fdc:	b672      	cpsid	i
    return(int_posture);
 8115fde:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8115fe0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8115fe2:	68fb      	ldr	r3, [r7, #12]
 8115fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8116058 <_tx_timer_create+0xbc>)
 8115fe6:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8115fe8:	4b1c      	ldr	r3, [pc, #112]	@ (811605c <_tx_timer_create+0xc0>)
 8115fea:	681b      	ldr	r3, [r3, #0]
 8115fec:	2b00      	cmp	r3, #0
 8115fee:	d109      	bne.n	8116004 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8115ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8116060 <_tx_timer_create+0xc4>)
 8115ff2:	68fb      	ldr	r3, [r7, #12]
 8115ff4:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 8115ff6:	68fb      	ldr	r3, [r7, #12]
 8115ff8:	68fa      	ldr	r2, [r7, #12]
 8115ffa:	625a      	str	r2, [r3, #36]	@ 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8115ffc:	68fb      	ldr	r3, [r7, #12]
 8115ffe:	68fa      	ldr	r2, [r7, #12]
 8116000:	629a      	str	r2, [r3, #40]	@ 0x28
 8116002:	e011      	b.n	8116028 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8116004:	4b16      	ldr	r3, [pc, #88]	@ (8116060 <_tx_timer_create+0xc4>)
 8116006:	681b      	ldr	r3, [r3, #0]
 8116008:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 811600a:	6a3b      	ldr	r3, [r7, #32]
 811600c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 811600e:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8116010:	6a3b      	ldr	r3, [r7, #32]
 8116012:	68fa      	ldr	r2, [r7, #12]
 8116014:	629a      	str	r2, [r3, #40]	@ 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 8116016:	69fb      	ldr	r3, [r7, #28]
 8116018:	68fa      	ldr	r2, [r7, #12]
 811601a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 811601c:	68fb      	ldr	r3, [r7, #12]
 811601e:	69fa      	ldr	r2, [r7, #28]
 8116020:	629a      	str	r2, [r3, #40]	@ 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 8116022:	68fb      	ldr	r3, [r7, #12]
 8116024:	6a3a      	ldr	r2, [r7, #32]
 8116026:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8116028:	4b0c      	ldr	r3, [pc, #48]	@ (811605c <_tx_timer_create+0xc0>)
 811602a:	681b      	ldr	r3, [r3, #0]
 811602c:	3301      	adds	r3, #1
 811602e:	4a0b      	ldr	r2, [pc, #44]	@ (811605c <_tx_timer_create+0xc0>)
 8116030:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 8116032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8116034:	2b01      	cmp	r3, #1
 8116036:	d104      	bne.n	8116042 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8116038:	68fb      	ldr	r3, [r7, #12]
 811603a:	3308      	adds	r3, #8
 811603c:	4618      	mov	r0, r3
 811603e:	f000 f8b3 	bl	81161a8 <_tx_timer_system_activate>
 8116042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116044:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8116046:	693b      	ldr	r3, [r7, #16]
 8116048:	f383 8810 	msr	PRIMASK, r3
}
 811604c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 811604e:	2300      	movs	r3, #0
}
 8116050:	4618      	mov	r0, r3
 8116052:	3728      	adds	r7, #40	@ 0x28
 8116054:	46bd      	mov	sp, r7
 8116056:	bd80      	pop	{r7, pc}
 8116058:	4154494d 	.word	0x4154494d
 811605c:	20058268 	.word	0x20058268
 8116060:	20058264 	.word	0x20058264

08116064 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8116064:	b580      	push	{r7, lr}
 8116066:	b084      	sub	sp, #16
 8116068:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 811606a:	f3ef 8310 	mrs	r3, PRIMASK
 811606e:	607b      	str	r3, [r7, #4]
    return(posture);
 8116070:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8116072:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8116074:	b672      	cpsid	i
    return(int_posture);
 8116076:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8116078:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 811607a:	4b09      	ldr	r3, [pc, #36]	@ (81160a0 <_tx_timer_expiration_process+0x3c>)
 811607c:	681b      	ldr	r3, [r3, #0]
 811607e:	3301      	adds	r3, #1
 8116080:	4a07      	ldr	r2, [pc, #28]	@ (81160a0 <_tx_timer_expiration_process+0x3c>)
 8116082:	6013      	str	r3, [r2, #0]
 8116084:	68fb      	ldr	r3, [r7, #12]
 8116086:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8116088:	68bb      	ldr	r3, [r7, #8]
 811608a:	f383 8810 	msr	PRIMASK, r3
}
 811608e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8116090:	4804      	ldr	r0, [pc, #16]	@ (81160a4 <_tx_timer_expiration_process+0x40>)
 8116092:	f7ff fcdd 	bl	8115a50 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8116096:	bf00      	nop
 8116098:	3710      	adds	r7, #16
 811609a:	46bd      	mov	sp, r7
 811609c:	bd80      	pop	{r7, pc}
 811609e:	bf00      	nop
 81160a0:	200581c0 	.word	0x200581c0
 81160a4:	20058270 	.word	0x20058270

081160a8 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 81160a8:	b590      	push	{r4, r7, lr}
 81160aa:	b089      	sub	sp, #36	@ 0x24
 81160ac:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 81160ae:	4b2a      	ldr	r3, [pc, #168]	@ (8116158 <_tx_timer_initialize+0xb0>)
 81160b0:	2200      	movs	r2, #0
 81160b2:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 81160b4:	4b29      	ldr	r3, [pc, #164]	@ (811615c <_tx_timer_initialize+0xb4>)
 81160b6:	2200      	movs	r2, #0
 81160b8:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 81160ba:	4b29      	ldr	r3, [pc, #164]	@ (8116160 <_tx_timer_initialize+0xb8>)
 81160bc:	2200      	movs	r2, #0
 81160be:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 81160c0:	4b28      	ldr	r3, [pc, #160]	@ (8116164 <_tx_timer_initialize+0xbc>)
 81160c2:	2200      	movs	r2, #0
 81160c4:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 81160c6:	4b28      	ldr	r3, [pc, #160]	@ (8116168 <_tx_timer_initialize+0xc0>)
 81160c8:	2200      	movs	r2, #0
 81160ca:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 81160cc:	2280      	movs	r2, #128	@ 0x80
 81160ce:	2100      	movs	r1, #0
 81160d0:	4826      	ldr	r0, [pc, #152]	@ (811616c <_tx_timer_initialize+0xc4>)
 81160d2:	f000 ffc9 	bl	8117068 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 81160d6:	4b26      	ldr	r3, [pc, #152]	@ (8116170 <_tx_timer_initialize+0xc8>)
 81160d8:	4a24      	ldr	r2, [pc, #144]	@ (811616c <_tx_timer_initialize+0xc4>)
 81160da:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 81160dc:	4b25      	ldr	r3, [pc, #148]	@ (8116174 <_tx_timer_initialize+0xcc>)
 81160de:	4a23      	ldr	r2, [pc, #140]	@ (811616c <_tx_timer_initialize+0xc4>)
 81160e0:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 81160e2:	4b25      	ldr	r3, [pc, #148]	@ (8116178 <_tx_timer_initialize+0xd0>)
 81160e4:	4a25      	ldr	r2, [pc, #148]	@ (811617c <_tx_timer_initialize+0xd4>)
 81160e6:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 81160e8:	4b23      	ldr	r3, [pc, #140]	@ (8116178 <_tx_timer_initialize+0xd0>)
 81160ea:	681b      	ldr	r3, [r3, #0]
 81160ec:	3304      	adds	r3, #4
 81160ee:	4a22      	ldr	r2, [pc, #136]	@ (8116178 <_tx_timer_initialize+0xd0>)
 81160f0:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 81160f2:	4b23      	ldr	r3, [pc, #140]	@ (8116180 <_tx_timer_initialize+0xd8>)
 81160f4:	4a23      	ldr	r2, [pc, #140]	@ (8116184 <_tx_timer_initialize+0xdc>)
 81160f6:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 81160f8:	4b23      	ldr	r3, [pc, #140]	@ (8116188 <_tx_timer_initialize+0xe0>)
 81160fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81160fe:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8116100:	4b22      	ldr	r3, [pc, #136]	@ (811618c <_tx_timer_initialize+0xe4>)
 8116102:	2200      	movs	r2, #0
 8116104:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8116106:	4b1e      	ldr	r3, [pc, #120]	@ (8116180 <_tx_timer_initialize+0xd8>)
 8116108:	681b      	ldr	r3, [r3, #0]
 811610a:	4a1f      	ldr	r2, [pc, #124]	@ (8116188 <_tx_timer_initialize+0xe0>)
 811610c:	6812      	ldr	r2, [r2, #0]
 811610e:	491f      	ldr	r1, [pc, #124]	@ (811618c <_tx_timer_initialize+0xe4>)
 8116110:	6809      	ldr	r1, [r1, #0]
 8116112:	481e      	ldr	r0, [pc, #120]	@ (811618c <_tx_timer_initialize+0xe4>)
 8116114:	6800      	ldr	r0, [r0, #0]
 8116116:	2400      	movs	r4, #0
 8116118:	9405      	str	r4, [sp, #20]
 811611a:	2400      	movs	r4, #0
 811611c:	9404      	str	r4, [sp, #16]
 811611e:	9003      	str	r0, [sp, #12]
 8116120:	9102      	str	r1, [sp, #8]
 8116122:	9201      	str	r2, [sp, #4]
 8116124:	9300      	str	r3, [sp, #0]
 8116126:	4b1a      	ldr	r3, [pc, #104]	@ (8116190 <_tx_timer_initialize+0xe8>)
 8116128:	4a1a      	ldr	r2, [pc, #104]	@ (8116194 <_tx_timer_initialize+0xec>)
 811612a:	491b      	ldr	r1, [pc, #108]	@ (8116198 <_tx_timer_initialize+0xf0>)
 811612c:	481b      	ldr	r0, [pc, #108]	@ (811619c <_tx_timer_initialize+0xf4>)
 811612e:	f7ff f9c5 	bl	81154bc <_tx_thread_create>
 8116132:	6078      	str	r0, [r7, #4]
            TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, status);
        }
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
 8116134:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8116138:	4818      	ldr	r0, [pc, #96]	@ (811619c <_tx_timer_initialize+0xf4>)
 811613a:	f7ea f985 	bl	8100448 <_tx_thread_secure_stack_allocate>

    } while (status != TX_SUCCESS);
 811613e:	687b      	ldr	r3, [r7, #4]
 8116140:	2b00      	cmp	r3, #0
 8116142:	d1e0      	bne.n	8116106 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8116144:	4b16      	ldr	r3, [pc, #88]	@ (81161a0 <_tx_timer_initialize+0xf8>)
 8116146:	2200      	movs	r2, #0
 8116148:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 811614a:	4b16      	ldr	r3, [pc, #88]	@ (81161a4 <_tx_timer_initialize+0xfc>)
 811614c:	2200      	movs	r2, #0
 811614e:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8116150:	bf00      	nop
 8116152:	370c      	adds	r7, #12
 8116154:	46bd      	mov	sp, r7
 8116156:	bd90      	pop	{r4, r7, pc}
 8116158:	200581cc 	.word	0x200581cc
 811615c:	20058730 	.word	0x20058730
 8116160:	200581d0 	.word	0x200581d0
 8116164:	20058260 	.word	0x20058260
 8116168:	2005826c 	.word	0x2005826c
 811616c:	200581d4 	.word	0x200581d4
 8116170:	20058254 	.word	0x20058254
 8116174:	2005825c 	.word	0x2005825c
 8116178:	20058258 	.word	0x20058258
 811617c:	20058250 	.word	0x20058250
 8116180:	20058324 	.word	0x20058324
 8116184:	20058330 	.word	0x20058330
 8116188:	20058328 	.word	0x20058328
 811618c:	2005832c 	.word	0x2005832c
 8116190:	4154494d 	.word	0x4154494d
 8116194:	081162dd 	.word	0x081162dd
 8116198:	08117d3c 	.word	0x08117d3c
 811619c:	20058270 	.word	0x20058270
 81161a0:	20058264 	.word	0x20058264
 81161a4:	20058268 	.word	0x20058268

081161a8 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 81161a8:	b480      	push	{r7}
 81161aa:	b089      	sub	sp, #36	@ 0x24
 81161ac:	af00      	add	r7, sp, #0
 81161ae:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 81161b0:	687b      	ldr	r3, [r7, #4]
 81161b2:	681b      	ldr	r3, [r3, #0]
 81161b4:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 81161b6:	697b      	ldr	r3, [r7, #20]
 81161b8:	2b00      	cmp	r3, #0
 81161ba:	d04a      	beq.n	8116252 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 81161bc:	697b      	ldr	r3, [r7, #20]
 81161be:	f1b3 3fff 	cmp.w	r3, #4294967295
 81161c2:	d046      	beq.n	8116252 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 81161c4:	687b      	ldr	r3, [r7, #4]
 81161c6:	699b      	ldr	r3, [r3, #24]
 81161c8:	2b00      	cmp	r3, #0
 81161ca:	d142      	bne.n	8116252 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 81161cc:	697b      	ldr	r3, [r7, #20]
 81161ce:	2b20      	cmp	r3, #32
 81161d0:	d902      	bls.n	81161d8 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 81161d2:	231f      	movs	r3, #31
 81161d4:	61bb      	str	r3, [r7, #24]
 81161d6:	e002      	b.n	81161de <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 81161d8:	697b      	ldr	r3, [r7, #20]
 81161da:	3b01      	subs	r3, #1
 81161dc:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 81161de:	4b20      	ldr	r3, [pc, #128]	@ (8116260 <_tx_timer_system_activate+0xb8>)
 81161e0:	681a      	ldr	r2, [r3, #0]
 81161e2:	69bb      	ldr	r3, [r7, #24]
 81161e4:	009b      	lsls	r3, r3, #2
 81161e6:	4413      	add	r3, r2
 81161e8:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 81161ea:	4b1e      	ldr	r3, [pc, #120]	@ (8116264 <_tx_timer_system_activate+0xbc>)
 81161ec:	681b      	ldr	r3, [r3, #0]
 81161ee:	69fa      	ldr	r2, [r7, #28]
 81161f0:	429a      	cmp	r2, r3
 81161f2:	d30b      	bcc.n	811620c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 81161f4:	4b1b      	ldr	r3, [pc, #108]	@ (8116264 <_tx_timer_system_activate+0xbc>)
 81161f6:	681b      	ldr	r3, [r3, #0]
 81161f8:	69fa      	ldr	r2, [r7, #28]
 81161fa:	1ad3      	subs	r3, r2, r3
 81161fc:	109b      	asrs	r3, r3, #2
 81161fe:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8116200:	4b19      	ldr	r3, [pc, #100]	@ (8116268 <_tx_timer_system_activate+0xc0>)
 8116202:	681a      	ldr	r2, [r3, #0]
 8116204:	693b      	ldr	r3, [r7, #16]
 8116206:	009b      	lsls	r3, r3, #2
 8116208:	4413      	add	r3, r2
 811620a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 811620c:	69fb      	ldr	r3, [r7, #28]
 811620e:	681b      	ldr	r3, [r3, #0]
 8116210:	2b00      	cmp	r3, #0
 8116212:	d109      	bne.n	8116228 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8116214:	687b      	ldr	r3, [r7, #4]
 8116216:	687a      	ldr	r2, [r7, #4]
 8116218:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 811621a:	687b      	ldr	r3, [r7, #4]
 811621c:	687a      	ldr	r2, [r7, #4]
 811621e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8116220:	69fb      	ldr	r3, [r7, #28]
 8116222:	687a      	ldr	r2, [r7, #4]
 8116224:	601a      	str	r2, [r3, #0]
 8116226:	e011      	b.n	811624c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8116228:	69fb      	ldr	r3, [r7, #28]
 811622a:	681b      	ldr	r3, [r3, #0]
 811622c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 811622e:	68fb      	ldr	r3, [r7, #12]
 8116230:	695b      	ldr	r3, [r3, #20]
 8116232:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8116234:	68bb      	ldr	r3, [r7, #8]
 8116236:	687a      	ldr	r2, [r7, #4]
 8116238:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 811623a:	68fb      	ldr	r3, [r7, #12]
 811623c:	687a      	ldr	r2, [r7, #4]
 811623e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8116240:	687b      	ldr	r3, [r7, #4]
 8116242:	68fa      	ldr	r2, [r7, #12]
 8116244:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8116246:	687b      	ldr	r3, [r7, #4]
 8116248:	68ba      	ldr	r2, [r7, #8]
 811624a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 811624c:	687b      	ldr	r3, [r7, #4]
 811624e:	69fa      	ldr	r2, [r7, #28]
 8116250:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8116252:	bf00      	nop
 8116254:	3724      	adds	r7, #36	@ 0x24
 8116256:	46bd      	mov	sp, r7
 8116258:	f85d 7b04 	ldr.w	r7, [sp], #4
 811625c:	4770      	bx	lr
 811625e:	bf00      	nop
 8116260:	2005825c 	.word	0x2005825c
 8116264:	20058258 	.word	0x20058258
 8116268:	20058254 	.word	0x20058254

0811626c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 811626c:	b480      	push	{r7}
 811626e:	b087      	sub	sp, #28
 8116270:	af00      	add	r7, sp, #0
 8116272:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8116274:	687b      	ldr	r3, [r7, #4]
 8116276:	699b      	ldr	r3, [r3, #24]
 8116278:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 811627a:	697b      	ldr	r3, [r7, #20]
 811627c:	2b00      	cmp	r3, #0
 811627e:	d026      	beq.n	81162ce <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8116280:	687b      	ldr	r3, [r7, #4]
 8116282:	691b      	ldr	r3, [r3, #16]
 8116284:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8116286:	687a      	ldr	r2, [r7, #4]
 8116288:	693b      	ldr	r3, [r7, #16]
 811628a:	429a      	cmp	r2, r3
 811628c:	d108      	bne.n	81162a0 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 811628e:	697b      	ldr	r3, [r7, #20]
 8116290:	681b      	ldr	r3, [r3, #0]
 8116292:	687a      	ldr	r2, [r7, #4]
 8116294:	429a      	cmp	r2, r3
 8116296:	d117      	bne.n	81162c8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8116298:	697b      	ldr	r3, [r7, #20]
 811629a:	2200      	movs	r2, #0
 811629c:	601a      	str	r2, [r3, #0]
 811629e:	e013      	b.n	81162c8 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 81162a0:	687b      	ldr	r3, [r7, #4]
 81162a2:	695b      	ldr	r3, [r3, #20]
 81162a4:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 81162a6:	693b      	ldr	r3, [r7, #16]
 81162a8:	68fa      	ldr	r2, [r7, #12]
 81162aa:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 81162ac:	68fb      	ldr	r3, [r7, #12]
 81162ae:	693a      	ldr	r2, [r7, #16]
 81162b0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 81162b2:	697b      	ldr	r3, [r7, #20]
 81162b4:	681b      	ldr	r3, [r3, #0]
 81162b6:	687a      	ldr	r2, [r7, #4]
 81162b8:	429a      	cmp	r2, r3
 81162ba:	d105      	bne.n	81162c8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 81162bc:	693b      	ldr	r3, [r7, #16]
 81162be:	697a      	ldr	r2, [r7, #20]
 81162c0:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 81162c2:	697b      	ldr	r3, [r7, #20]
 81162c4:	693a      	ldr	r2, [r7, #16]
 81162c6:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 81162c8:	687b      	ldr	r3, [r7, #4]
 81162ca:	2200      	movs	r2, #0
 81162cc:	619a      	str	r2, [r3, #24]
    }
}
 81162ce:	bf00      	nop
 81162d0:	371c      	adds	r7, #28
 81162d2:	46bd      	mov	sp, r7
 81162d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81162d8:	4770      	bx	lr
	...

081162dc <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 81162dc:	b580      	push	{r7, lr}
 81162de:	b098      	sub	sp, #96	@ 0x60
 81162e0:	af00      	add	r7, sp, #0
 81162e2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 81162e4:	2300      	movs	r3, #0
 81162e6:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 81162e8:	687b      	ldr	r3, [r7, #4]
 81162ea:	4a73      	ldr	r2, [pc, #460]	@ (81164b8 <_tx_timer_thread_entry+0x1dc>)
 81162ec:	4293      	cmp	r3, r2
 81162ee:	f040 80de 	bne.w	81164ae <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 81162f2:	f3ef 8310 	mrs	r3, PRIMASK
 81162f6:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 81162f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 81162fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 81162fc:	b672      	cpsid	i
    return(int_posture);
 81162fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8116300:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8116302:	4b6e      	ldr	r3, [pc, #440]	@ (81164bc <_tx_timer_thread_entry+0x1e0>)
 8116304:	681b      	ldr	r3, [r3, #0]
 8116306:	681b      	ldr	r3, [r3, #0]
 8116308:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 811630a:	68fb      	ldr	r3, [r7, #12]
 811630c:	2b00      	cmp	r3, #0
 811630e:	d003      	beq.n	8116318 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8116310:	68fb      	ldr	r3, [r7, #12]
 8116312:	f107 020c 	add.w	r2, r7, #12
 8116316:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8116318:	4b68      	ldr	r3, [pc, #416]	@ (81164bc <_tx_timer_thread_entry+0x1e0>)
 811631a:	681b      	ldr	r3, [r3, #0]
 811631c:	2200      	movs	r2, #0
 811631e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8116320:	4b66      	ldr	r3, [pc, #408]	@ (81164bc <_tx_timer_thread_entry+0x1e0>)
 8116322:	681b      	ldr	r3, [r3, #0]
 8116324:	3304      	adds	r3, #4
 8116326:	4a65      	ldr	r2, [pc, #404]	@ (81164bc <_tx_timer_thread_entry+0x1e0>)
 8116328:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 811632a:	4b64      	ldr	r3, [pc, #400]	@ (81164bc <_tx_timer_thread_entry+0x1e0>)
 811632c:	681a      	ldr	r2, [r3, #0]
 811632e:	4b64      	ldr	r3, [pc, #400]	@ (81164c0 <_tx_timer_thread_entry+0x1e4>)
 8116330:	681b      	ldr	r3, [r3, #0]
 8116332:	429a      	cmp	r2, r3
 8116334:	d103      	bne.n	811633e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8116336:	4b63      	ldr	r3, [pc, #396]	@ (81164c4 <_tx_timer_thread_entry+0x1e8>)
 8116338:	681b      	ldr	r3, [r3, #0]
 811633a:	4a60      	ldr	r2, [pc, #384]	@ (81164bc <_tx_timer_thread_entry+0x1e0>)
 811633c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 811633e:	4b62      	ldr	r3, [pc, #392]	@ (81164c8 <_tx_timer_thread_entry+0x1ec>)
 8116340:	2200      	movs	r2, #0
 8116342:	601a      	str	r2, [r3, #0]
 8116344:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8116346:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8116348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811634a:	f383 8810 	msr	PRIMASK, r3
}
 811634e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8116350:	f3ef 8310 	mrs	r3, PRIMASK
 8116354:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 8116356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 8116358:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 811635a:	b672      	cpsid	i
    return(int_posture);
 811635c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 811635e:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8116360:	e07f      	b.n	8116462 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8116362:	68fb      	ldr	r3, [r7, #12]
 8116364:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8116366:	68fb      	ldr	r3, [r7, #12]
 8116368:	691b      	ldr	r3, [r3, #16]
 811636a:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 811636c:	2300      	movs	r3, #0
 811636e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8116370:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8116372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8116374:	429a      	cmp	r2, r3
 8116376:	d102      	bne.n	811637e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8116378:	2300      	movs	r3, #0
 811637a:	60fb      	str	r3, [r7, #12]
 811637c:	e00e      	b.n	811639c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 811637e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8116380:	695b      	ldr	r3, [r3, #20]
 8116382:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8116384:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8116386:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8116388:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 811638a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811638c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 811638e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8116390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8116392:	f107 020c 	add.w	r2, r7, #12
 8116396:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8116398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811639a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 811639c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811639e:	681b      	ldr	r3, [r3, #0]
 81163a0:	2b20      	cmp	r3, #32
 81163a2:	d911      	bls.n	81163c8 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 81163a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81163a6:	681b      	ldr	r3, [r3, #0]
 81163a8:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 81163ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81163ae:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 81163b0:	2300      	movs	r3, #0
 81163b2:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 81163b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81163b6:	f107 0208 	add.w	r2, r7, #8
 81163ba:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 81163bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81163be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 81163c0:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 81163c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81163c4:	60bb      	str	r3, [r7, #8]
 81163c6:	e01a      	b.n	81163fe <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 81163c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81163ca:	689b      	ldr	r3, [r3, #8]
 81163cc:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 81163ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81163d0:	68db      	ldr	r3, [r3, #12]
 81163d2:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 81163d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81163d6:	685a      	ldr	r2, [r3, #4]
 81163d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81163da:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 81163dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81163de:	681b      	ldr	r3, [r3, #0]
 81163e0:	2b00      	cmp	r3, #0
 81163e2:	d009      	beq.n	81163f8 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 81163e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81163e6:	f107 0208 	add.w	r2, r7, #8
 81163ea:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 81163ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81163ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 81163f0:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 81163f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81163f4:	60bb      	str	r3, [r7, #8]
 81163f6:	e002      	b.n	81163fe <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 81163f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81163fa:	2200      	movs	r2, #0
 81163fc:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 81163fe:	4a33      	ldr	r2, [pc, #204]	@ (81164cc <_tx_timer_thread_entry+0x1f0>)
 8116400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8116402:	6013      	str	r3, [r2, #0]
 8116404:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8116406:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8116408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811640a:	f383 8810 	msr	PRIMASK, r3
}
 811640e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8116410:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8116412:	2b00      	cmp	r3, #0
 8116414:	d002      	beq.n	811641c <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8116416:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8116418:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 811641a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 811641c:	f3ef 8310 	mrs	r3, PRIMASK
 8116420:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8116422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8116424:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8116426:	b672      	cpsid	i
    return(int_posture);
 8116428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 811642a:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 811642c:	4b27      	ldr	r3, [pc, #156]	@ (81164cc <_tx_timer_thread_entry+0x1f0>)
 811642e:	2200      	movs	r2, #0
 8116430:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8116432:	68bb      	ldr	r3, [r7, #8]
 8116434:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8116436:	429a      	cmp	r2, r3
 8116438:	d105      	bne.n	8116446 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 811643a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811643c:	2200      	movs	r2, #0
 811643e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8116440:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8116442:	f7ff feb1 	bl	81161a8 <_tx_timer_system_activate>
 8116446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8116448:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811644a:	69bb      	ldr	r3, [r7, #24]
 811644c:	f383 8810 	msr	PRIMASK, r3
}
 8116450:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8116452:	f3ef 8310 	mrs	r3, PRIMASK
 8116456:	623b      	str	r3, [r7, #32]
    return(posture);
 8116458:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 811645a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 811645c:	b672      	cpsid	i
    return(int_posture);
 811645e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8116460:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 8116462:	68fb      	ldr	r3, [r7, #12]
 8116464:	2b00      	cmp	r3, #0
 8116466:	f47f af7c 	bne.w	8116362 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 811646a:	4b17      	ldr	r3, [pc, #92]	@ (81164c8 <_tx_timer_thread_entry+0x1ec>)
 811646c:	681b      	ldr	r3, [r3, #0]
 811646e:	2b00      	cmp	r3, #0
 8116470:	d116      	bne.n	81164a0 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8116472:	4b17      	ldr	r3, [pc, #92]	@ (81164d0 <_tx_timer_thread_entry+0x1f4>)
 8116474:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8116476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8116478:	2203      	movs	r2, #3
 811647a:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 811647c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811647e:	2201      	movs	r2, #1
 8116480:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8116482:	4b14      	ldr	r3, [pc, #80]	@ (81164d4 <_tx_timer_thread_entry+0x1f8>)
 8116484:	681b      	ldr	r3, [r3, #0]
 8116486:	3301      	adds	r3, #1
 8116488:	4a12      	ldr	r2, [pc, #72]	@ (81164d4 <_tx_timer_thread_entry+0x1f8>)
 811648a:	6013      	str	r3, [r2, #0]
 811648c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 811648e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8116490:	697b      	ldr	r3, [r7, #20]
 8116492:	f383 8810 	msr	PRIMASK, r3
}
 8116496:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8116498:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 811649a:	f7ff fbd9 	bl	8115c50 <_tx_thread_system_suspend>
 811649e:	e728      	b.n	81162f2 <_tx_timer_thread_entry+0x16>
 81164a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81164a2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81164a4:	693b      	ldr	r3, [r7, #16]
 81164a6:	f383 8810 	msr	PRIMASK, r3
}
 81164aa:	bf00      	nop
            TX_DISABLE
 81164ac:	e721      	b.n	81162f2 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 81164ae:	bf00      	nop
 81164b0:	3760      	adds	r7, #96	@ 0x60
 81164b2:	46bd      	mov	sp, r7
 81164b4:	bd80      	pop	{r7, pc}
 81164b6:	bf00      	nop
 81164b8:	4154494d 	.word	0x4154494d
 81164bc:	2005825c 	.word	0x2005825c
 81164c0:	20058258 	.word	0x20058258
 81164c4:	20058254 	.word	0x20058254
 81164c8:	20058260 	.word	0x20058260
 81164cc:	2005826c 	.word	0x2005826c
 81164d0:	20058270 	.word	0x20058270
 81164d4:	200581c0 	.word	0x200581c0

081164d8 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 81164d8:	b580      	push	{r7, lr}
 81164da:	b08a      	sub	sp, #40	@ 0x28
 81164dc:	af00      	add	r7, sp, #0
 81164de:	60f8      	str	r0, [r7, #12]
 81164e0:	60b9      	str	r1, [r7, #8]
 81164e2:	607a      	str	r2, [r7, #4]
 81164e4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 81164e6:	2300      	movs	r3, #0
 81164e8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 81164ea:	68fb      	ldr	r3, [r7, #12]
 81164ec:	2b00      	cmp	r3, #0
 81164ee:	d102      	bne.n	81164f6 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 81164f0:	2302      	movs	r3, #2
 81164f2:	627b      	str	r3, [r7, #36]	@ 0x24
 81164f4:	e029      	b.n	811654a <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 81164f6:	68fb      	ldr	r3, [r7, #12]
 81164f8:	681b      	ldr	r3, [r3, #0]
 81164fa:	4a2d      	ldr	r2, [pc, #180]	@ (81165b0 <_txe_byte_allocate+0xd8>)
 81164fc:	4293      	cmp	r3, r2
 81164fe:	d002      	beq.n	8116506 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8116500:	2302      	movs	r3, #2
 8116502:	627b      	str	r3, [r7, #36]	@ 0x24
 8116504:	e021      	b.n	811654a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8116506:	68bb      	ldr	r3, [r7, #8]
 8116508:	2b00      	cmp	r3, #0
 811650a:	d102      	bne.n	8116512 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 811650c:	2303      	movs	r3, #3
 811650e:	627b      	str	r3, [r7, #36]	@ 0x24
 8116510:	e01b      	b.n	811654a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8116512:	687b      	ldr	r3, [r7, #4]
 8116514:	2b00      	cmp	r3, #0
 8116516:	d102      	bne.n	811651e <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8116518:	2305      	movs	r3, #5
 811651a:	627b      	str	r3, [r7, #36]	@ 0x24
 811651c:	e015      	b.n	811654a <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 811651e:	68fb      	ldr	r3, [r7, #12]
 8116520:	69db      	ldr	r3, [r3, #28]
 8116522:	687a      	ldr	r2, [r7, #4]
 8116524:	429a      	cmp	r2, r3
 8116526:	d902      	bls.n	811652e <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8116528:	2305      	movs	r3, #5
 811652a:	627b      	str	r3, [r7, #36]	@ 0x24
 811652c:	e00d      	b.n	811654a <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 811652e:	683b      	ldr	r3, [r7, #0]
 8116530:	2b00      	cmp	r3, #0
 8116532:	d00a      	beq.n	811654a <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8116534:	f3ef 8305 	mrs	r3, IPSR
 8116538:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 811653a:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 811653c:	4b1d      	ldr	r3, [pc, #116]	@ (81165b4 <_txe_byte_allocate+0xdc>)
 811653e:	681b      	ldr	r3, [r3, #0]
 8116540:	4313      	orrs	r3, r2
 8116542:	2b00      	cmp	r3, #0
 8116544:	d001      	beq.n	811654a <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8116546:	2304      	movs	r3, #4
 8116548:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 811654a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811654c:	2b00      	cmp	r3, #0
 811654e:	d108      	bne.n	8116562 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8116550:	4b19      	ldr	r3, [pc, #100]	@ (81165b8 <_txe_byte_allocate+0xe0>)
 8116552:	681b      	ldr	r3, [r3, #0]
 8116554:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8116556:	6a3b      	ldr	r3, [r7, #32]
 8116558:	4a18      	ldr	r2, [pc, #96]	@ (81165bc <_txe_byte_allocate+0xe4>)
 811655a:	4293      	cmp	r3, r2
 811655c:	d101      	bne.n	8116562 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 811655e:	2313      	movs	r3, #19
 8116560:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8116562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116564:	2b00      	cmp	r3, #0
 8116566:	d114      	bne.n	8116592 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8116568:	f3ef 8305 	mrs	r3, IPSR
 811656c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 811656e:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8116570:	4b10      	ldr	r3, [pc, #64]	@ (81165b4 <_txe_byte_allocate+0xdc>)
 8116572:	681b      	ldr	r3, [r3, #0]
 8116574:	4313      	orrs	r3, r2
 8116576:	2b00      	cmp	r3, #0
 8116578:	d00b      	beq.n	8116592 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 811657a:	f3ef 8305 	mrs	r3, IPSR
 811657e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8116580:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8116582:	4b0c      	ldr	r3, [pc, #48]	@ (81165b4 <_txe_byte_allocate+0xdc>)
 8116584:	681b      	ldr	r3, [r3, #0]
 8116586:	4313      	orrs	r3, r2
 8116588:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 811658c:	d201      	bcs.n	8116592 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 811658e:	2313      	movs	r3, #19
 8116590:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8116592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116594:	2b00      	cmp	r3, #0
 8116596:	d106      	bne.n	81165a6 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8116598:	683b      	ldr	r3, [r7, #0]
 811659a:	687a      	ldr	r2, [r7, #4]
 811659c:	68b9      	ldr	r1, [r7, #8]
 811659e:	68f8      	ldr	r0, [r7, #12]
 81165a0:	f7fd fab0 	bl	8113b04 <_tx_byte_allocate>
 81165a4:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 81165a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 81165a8:	4618      	mov	r0, r3
 81165aa:	3728      	adds	r7, #40	@ 0x28
 81165ac:	46bd      	mov	sp, r7
 81165ae:	bd80      	pop	{r7, pc}
 81165b0:	42595445 	.word	0x42595445
 81165b4:	20050088 	.word	0x20050088
 81165b8:	20058128 	.word	0x20058128
 81165bc:	20058270 	.word	0x20058270

081165c0 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 81165c0:	b580      	push	{r7, lr}
 81165c2:	b092      	sub	sp, #72	@ 0x48
 81165c4:	af00      	add	r7, sp, #0
 81165c6:	60f8      	str	r0, [r7, #12]
 81165c8:	60b9      	str	r1, [r7, #8]
 81165ca:	607a      	str	r2, [r7, #4]
 81165cc:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 81165ce:	2300      	movs	r3, #0
 81165d0:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 81165d2:	68fb      	ldr	r3, [r7, #12]
 81165d4:	2b00      	cmp	r3, #0
 81165d6:	d102      	bne.n	81165de <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 81165d8:	2302      	movs	r3, #2
 81165da:	647b      	str	r3, [r7, #68]	@ 0x44
 81165dc:	e075      	b.n	81166ca <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 81165de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81165e0:	2b34      	cmp	r3, #52	@ 0x34
 81165e2:	d002      	beq.n	81165ea <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 81165e4:	2302      	movs	r3, #2
 81165e6:	647b      	str	r3, [r7, #68]	@ 0x44
 81165e8:	e06f      	b.n	81166ca <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 81165ea:	f3ef 8310 	mrs	r3, PRIMASK
 81165ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 81165f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 81165f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 81165f4:	b672      	cpsid	i
    return(int_posture);
 81165f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 81165f8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 81165fa:	4b3b      	ldr	r3, [pc, #236]	@ (81166e8 <_txe_byte_pool_create+0x128>)
 81165fc:	681b      	ldr	r3, [r3, #0]
 81165fe:	3301      	adds	r3, #1
 8116600:	4a39      	ldr	r2, [pc, #228]	@ (81166e8 <_txe_byte_pool_create+0x128>)
 8116602:	6013      	str	r3, [r2, #0]
 8116604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8116606:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8116608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811660a:	f383 8810 	msr	PRIMASK, r3
}
 811660e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8116610:	4b36      	ldr	r3, [pc, #216]	@ (81166ec <_txe_byte_pool_create+0x12c>)
 8116612:	681b      	ldr	r3, [r3, #0]
 8116614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8116616:	2300      	movs	r3, #0
 8116618:	643b      	str	r3, [r7, #64]	@ 0x40
 811661a:	e009      	b.n	8116630 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 811661c:	68fa      	ldr	r2, [r7, #12]
 811661e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8116620:	429a      	cmp	r2, r3
 8116622:	d00b      	beq.n	811663c <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8116624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8116626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8116628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 811662a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811662c:	3301      	adds	r3, #1
 811662e:	643b      	str	r3, [r7, #64]	@ 0x40
 8116630:	4b2f      	ldr	r3, [pc, #188]	@ (81166f0 <_txe_byte_pool_create+0x130>)
 8116632:	681b      	ldr	r3, [r3, #0]
 8116634:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8116636:	429a      	cmp	r2, r3
 8116638:	d3f0      	bcc.n	811661c <_txe_byte_pool_create+0x5c>
 811663a:	e000      	b.n	811663e <_txe_byte_pool_create+0x7e>
                break;
 811663c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 811663e:	f3ef 8310 	mrs	r3, PRIMASK
 8116642:	623b      	str	r3, [r7, #32]
    return(posture);
 8116644:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8116646:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8116648:	b672      	cpsid	i
    return(int_posture);
 811664a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 811664c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 811664e:	4b26      	ldr	r3, [pc, #152]	@ (81166e8 <_txe_byte_pool_create+0x128>)
 8116650:	681b      	ldr	r3, [r3, #0]
 8116652:	3b01      	subs	r3, #1
 8116654:	4a24      	ldr	r2, [pc, #144]	@ (81166e8 <_txe_byte_pool_create+0x128>)
 8116656:	6013      	str	r3, [r2, #0]
 8116658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811665a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 811665c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811665e:	f383 8810 	msr	PRIMASK, r3
}
 8116662:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8116664:	f7ff f9ba 	bl	81159dc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8116668:	68fa      	ldr	r2, [r7, #12]
 811666a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811666c:	429a      	cmp	r2, r3
 811666e:	d102      	bne.n	8116676 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8116670:	2302      	movs	r3, #2
 8116672:	647b      	str	r3, [r7, #68]	@ 0x44
 8116674:	e029      	b.n	81166ca <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8116676:	687b      	ldr	r3, [r7, #4]
 8116678:	2b00      	cmp	r3, #0
 811667a:	d102      	bne.n	8116682 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 811667c:	2303      	movs	r3, #3
 811667e:	647b      	str	r3, [r7, #68]	@ 0x44
 8116680:	e023      	b.n	81166ca <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8116682:	683b      	ldr	r3, [r7, #0]
 8116684:	2b63      	cmp	r3, #99	@ 0x63
 8116686:	d802      	bhi.n	811668e <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8116688:	2305      	movs	r3, #5
 811668a:	647b      	str	r3, [r7, #68]	@ 0x44
 811668c:	e01d      	b.n	81166ca <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 811668e:	4b19      	ldr	r3, [pc, #100]	@ (81166f4 <_txe_byte_pool_create+0x134>)
 8116690:	681b      	ldr	r3, [r3, #0]
 8116692:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8116694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8116696:	4a18      	ldr	r2, [pc, #96]	@ (81166f8 <_txe_byte_pool_create+0x138>)
 8116698:	4293      	cmp	r3, r2
 811669a:	d101      	bne.n	81166a0 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 811669c:	2313      	movs	r3, #19
 811669e:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 81166a0:	f3ef 8305 	mrs	r3, IPSR
 81166a4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 81166a6:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 81166a8:	4b14      	ldr	r3, [pc, #80]	@ (81166fc <_txe_byte_pool_create+0x13c>)
 81166aa:	681b      	ldr	r3, [r3, #0]
 81166ac:	4313      	orrs	r3, r2
 81166ae:	2b00      	cmp	r3, #0
 81166b0:	d00b      	beq.n	81166ca <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 81166b2:	f3ef 8305 	mrs	r3, IPSR
 81166b6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 81166b8:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 81166ba:	4b10      	ldr	r3, [pc, #64]	@ (81166fc <_txe_byte_pool_create+0x13c>)
 81166bc:	681b      	ldr	r3, [r3, #0]
 81166be:	4313      	orrs	r3, r2
 81166c0:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 81166c4:	d201      	bcs.n	81166ca <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 81166c6:	2313      	movs	r3, #19
 81166c8:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 81166ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81166cc:	2b00      	cmp	r3, #0
 81166ce:	d106      	bne.n	81166de <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 81166d0:	683b      	ldr	r3, [r7, #0]
 81166d2:	687a      	ldr	r2, [r7, #4]
 81166d4:	68b9      	ldr	r1, [r7, #8]
 81166d6:	68f8      	ldr	r0, [r7, #12]
 81166d8:	f7fd fb56 	bl	8113d88 <_tx_byte_pool_create>
 81166dc:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 81166de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 81166e0:	4618      	mov	r0, r3
 81166e2:	3748      	adds	r7, #72	@ 0x48
 81166e4:	46bd      	mov	sp, r7
 81166e6:	bd80      	pop	{r7, pc}
 81166e8:	200581c0 	.word	0x200581c0
 81166ec:	20058118 	.word	0x20058118
 81166f0:	2005811c 	.word	0x2005811c
 81166f4:	20058128 	.word	0x20058128
 81166f8:	20058270 	.word	0x20058270
 81166fc:	20050088 	.word	0x20050088

08116700 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8116700:	b580      	push	{r7, lr}
 8116702:	b09a      	sub	sp, #104	@ 0x68
 8116704:	af06      	add	r7, sp, #24
 8116706:	60f8      	str	r0, [r7, #12]
 8116708:	60b9      	str	r1, [r7, #8]
 811670a:	607a      	str	r2, [r7, #4]
 811670c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 811670e:	2300      	movs	r3, #0
 8116710:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8116712:	68fb      	ldr	r3, [r7, #12]
 8116714:	2b00      	cmp	r3, #0
 8116716:	d102      	bne.n	811671e <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8116718:	230e      	movs	r3, #14
 811671a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 811671c:	e0bb      	b.n	8116896 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 811671e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8116720:	2bb4      	cmp	r3, #180	@ 0xb4
 8116722:	d002      	beq.n	811672a <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8116724:	230e      	movs	r3, #14
 8116726:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8116728:	e0b5      	b.n	8116896 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 811672a:	f3ef 8310 	mrs	r3, PRIMASK
 811672e:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8116730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8116732:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8116734:	b672      	cpsid	i
    return(int_posture);
 8116736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8116738:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 811673a:	4b64      	ldr	r3, [pc, #400]	@ (81168cc <_txe_thread_create+0x1cc>)
 811673c:	681b      	ldr	r3, [r3, #0]
 811673e:	3301      	adds	r3, #1
 8116740:	4a62      	ldr	r2, [pc, #392]	@ (81168cc <_txe_thread_create+0x1cc>)
 8116742:	6013      	str	r3, [r2, #0]
 8116744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8116746:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8116748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811674a:	f383 8810 	msr	PRIMASK, r3
}
 811674e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8116750:	2300      	movs	r3, #0
 8116752:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 8116754:	4b5e      	ldr	r3, [pc, #376]	@ (81168d0 <_txe_thread_create+0x1d0>)
 8116756:	681b      	ldr	r3, [r3, #0]
 8116758:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 811675a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 811675c:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 811675e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8116760:	3b01      	subs	r3, #1
 8116762:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8116764:	4413      	add	r3, r2
 8116766:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8116768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811676a:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 811676c:	2300      	movs	r3, #0
 811676e:	647b      	str	r3, [r7, #68]	@ 0x44
 8116770:	e02b      	b.n	81167ca <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8116772:	68fa      	ldr	r2, [r7, #12]
 8116774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8116776:	429a      	cmp	r2, r3
 8116778:	d101      	bne.n	811677e <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 811677a:	2301      	movs	r3, #1
 811677c:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 811677e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8116780:	2b01      	cmp	r3, #1
 8116782:	d028      	beq.n	81167d6 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8116784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8116786:	68db      	ldr	r3, [r3, #12]
 8116788:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 811678a:	429a      	cmp	r2, r3
 811678c:	d308      	bcc.n	81167a0 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 811678e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8116790:	691b      	ldr	r3, [r3, #16]
 8116792:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8116794:	429a      	cmp	r2, r3
 8116796:	d203      	bcs.n	81167a0 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8116798:	2300      	movs	r3, #0
 811679a:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 811679c:	2301      	movs	r3, #1
 811679e:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 81167a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81167a2:	68db      	ldr	r3, [r3, #12]
 81167a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81167a6:	429a      	cmp	r2, r3
 81167a8:	d308      	bcc.n	81167bc <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 81167aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81167ac:	691b      	ldr	r3, [r3, #16]
 81167ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81167b0:	429a      	cmp	r2, r3
 81167b2:	d203      	bcs.n	81167bc <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 81167b4:	2300      	movs	r3, #0
 81167b6:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 81167b8:	2301      	movs	r3, #1
 81167ba:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 81167bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81167be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81167c2:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 81167c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81167c6:	3301      	adds	r3, #1
 81167c8:	647b      	str	r3, [r7, #68]	@ 0x44
 81167ca:	4b42      	ldr	r3, [pc, #264]	@ (81168d4 <_txe_thread_create+0x1d4>)
 81167cc:	681b      	ldr	r3, [r3, #0]
 81167ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81167d0:	429a      	cmp	r2, r3
 81167d2:	d3ce      	bcc.n	8116772 <_txe_thread_create+0x72>
 81167d4:	e000      	b.n	81167d8 <_txe_thread_create+0xd8>
                break;
 81167d6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 81167d8:	f3ef 8310 	mrs	r3, PRIMASK
 81167dc:	61fb      	str	r3, [r7, #28]
    return(posture);
 81167de:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 81167e0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 81167e2:	b672      	cpsid	i
    return(int_posture);
 81167e4:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 81167e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 81167e8:	4b38      	ldr	r3, [pc, #224]	@ (81168cc <_txe_thread_create+0x1cc>)
 81167ea:	681b      	ldr	r3, [r3, #0]
 81167ec:	3b01      	subs	r3, #1
 81167ee:	4a37      	ldr	r2, [pc, #220]	@ (81168cc <_txe_thread_create+0x1cc>)
 81167f0:	6013      	str	r3, [r2, #0]
 81167f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81167f4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 81167f6:	6a3b      	ldr	r3, [r7, #32]
 81167f8:	f383 8810 	msr	PRIMASK, r3
}
 81167fc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 81167fe:	f7ff f8ed 	bl	81159dc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8116802:	68fa      	ldr	r2, [r7, #12]
 8116804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8116806:	429a      	cmp	r2, r3
 8116808:	d102      	bne.n	8116810 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 811680a:	230e      	movs	r3, #14
 811680c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 811680e:	e042      	b.n	8116896 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8116810:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8116812:	2b00      	cmp	r3, #0
 8116814:	d102      	bne.n	811681c <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8116816:	2303      	movs	r3, #3
 8116818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 811681a:	e03c      	b.n	8116896 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 811681c:	687b      	ldr	r3, [r7, #4]
 811681e:	2b00      	cmp	r3, #0
 8116820:	d102      	bne.n	8116828 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8116822:	2303      	movs	r3, #3
 8116824:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8116826:	e036      	b.n	8116896 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8116828:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 811682a:	2bc7      	cmp	r3, #199	@ 0xc7
 811682c:	d802      	bhi.n	8116834 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 811682e:	2305      	movs	r3, #5
 8116830:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8116832:	e030      	b.n	8116896 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8116834:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8116836:	2b1f      	cmp	r3, #31
 8116838:	d902      	bls.n	8116840 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 811683a:	230f      	movs	r3, #15
 811683c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 811683e:	e02a      	b.n	8116896 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8116840:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8116842:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8116844:	429a      	cmp	r2, r3
 8116846:	d902      	bls.n	811684e <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8116848:	2318      	movs	r3, #24
 811684a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 811684c:	e023      	b.n	8116896 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 811684e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8116850:	2b01      	cmp	r3, #1
 8116852:	d902      	bls.n	811685a <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8116854:	2310      	movs	r3, #16
 8116856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8116858:	e01d      	b.n	8116896 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 811685a:	4b1f      	ldr	r3, [pc, #124]	@ (81168d8 <_txe_thread_create+0x1d8>)
 811685c:	681b      	ldr	r3, [r3, #0]
 811685e:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8116860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116862:	4a1e      	ldr	r2, [pc, #120]	@ (81168dc <_txe_thread_create+0x1dc>)
 8116864:	4293      	cmp	r3, r2
 8116866:	d101      	bne.n	811686c <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8116868:	2313      	movs	r3, #19
 811686a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 811686c:	f3ef 8305 	mrs	r3, IPSR
 8116870:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8116872:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8116874:	4b1a      	ldr	r3, [pc, #104]	@ (81168e0 <_txe_thread_create+0x1e0>)
 8116876:	681b      	ldr	r3, [r3, #0]
 8116878:	4313      	orrs	r3, r2
 811687a:	2b00      	cmp	r3, #0
 811687c:	d00b      	beq.n	8116896 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 811687e:	f3ef 8305 	mrs	r3, IPSR
 8116882:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8116884:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8116886:	4b16      	ldr	r3, [pc, #88]	@ (81168e0 <_txe_thread_create+0x1e0>)
 8116888:	681b      	ldr	r3, [r3, #0]
 811688a:	4313      	orrs	r3, r2
 811688c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8116890:	d201      	bcs.n	8116896 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8116892:	2313      	movs	r3, #19
 8116894:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8116896:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8116898:	2b00      	cmp	r3, #0
 811689a:	d112      	bne.n	81168c2 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 811689c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 811689e:	9305      	str	r3, [sp, #20]
 81168a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81168a2:	9304      	str	r3, [sp, #16]
 81168a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 81168a6:	9303      	str	r3, [sp, #12]
 81168a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 81168aa:	9302      	str	r3, [sp, #8]
 81168ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81168ae:	9301      	str	r3, [sp, #4]
 81168b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 81168b2:	9300      	str	r3, [sp, #0]
 81168b4:	683b      	ldr	r3, [r7, #0]
 81168b6:	687a      	ldr	r2, [r7, #4]
 81168b8:	68b9      	ldr	r1, [r7, #8]
 81168ba:	68f8      	ldr	r0, [r7, #12]
 81168bc:	f7fe fdfe 	bl	81154bc <_tx_thread_create>
 81168c0:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 81168c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 81168c4:	4618      	mov	r0, r3
 81168c6:	3750      	adds	r7, #80	@ 0x50
 81168c8:	46bd      	mov	sp, r7
 81168ca:	bd80      	pop	{r7, pc}
 81168cc:	200581c0 	.word	0x200581c0
 81168d0:	20058130 	.word	0x20058130
 81168d4:	20058134 	.word	0x20058134
 81168d8:	20058128 	.word	0x20058128
 81168dc:	20058270 	.word	0x20058270
 81168e0:	20050088 	.word	0x20050088

081168e4 <MX_NetXDuo_Init>:
  * @brief  Application NetXDuo Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_NetXDuo_Init(VOID *memory_ptr)
{
 81168e4:	b580      	push	{r7, lr}
 81168e6:	b08e      	sub	sp, #56	@ 0x38
 81168e8:	af08      	add	r7, sp, #32
 81168ea:	6078      	str	r0, [r7, #4]
  UINT ret = NX_SUCCESS;
 81168ec:	2300      	movs	r3, #0
 81168ee:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 81168f0:	687b      	ldr	r3, [r7, #4]
 81168f2:	613b      	str	r3, [r7, #16]

  /* USER CODE END 0 */

  /* Initialize the NetXDuo system. */
  CHAR *pointer;
  nx_system_initialize();
 81168f4:	f7f8 fb12 	bl	810ef1c <_nx_system_initialize>

    /* Allocate the memory for packet_pool.  */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, NX_APP_PACKET_POOL_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 81168f8:	f107 010c 	add.w	r1, r7, #12
 81168fc:	2300      	movs	r3, #0
 81168fe:	f641 7218 	movw	r2, #7960	@ 0x1f18
 8116902:	6938      	ldr	r0, [r7, #16]
 8116904:	f7ff fde8 	bl	81164d8 <_txe_byte_allocate>
 8116908:	4603      	mov	r3, r0
 811690a:	2b00      	cmp	r3, #0
 811690c:	d001      	beq.n	8116912 <MX_NetXDuo_Init+0x2e>
  {
    return TX_POOL_ERROR;
 811690e:	2302      	movs	r3, #2
 8116910:	e097      	b.n	8116a42 <MX_NetXDuo_Init+0x15e>
  }

  /* Create the Packet pool to be used for packet allocation,
   * If extra NX_PACKET are to be used the NX_APP_PACKET_POOL_SIZE should be increased
   */
  ret = nx_packet_pool_create(&NxAppPool, "NetXDuo App Pool", DEFAULT_PAYLOAD_SIZE, pointer, NX_APP_PACKET_POOL_SIZE);
 8116912:	68fb      	ldr	r3, [r7, #12]
 8116914:	223c      	movs	r2, #60	@ 0x3c
 8116916:	9201      	str	r2, [sp, #4]
 8116918:	f641 7218 	movw	r2, #7960	@ 0x1f18
 811691c:	9200      	str	r2, [sp, #0]
 811691e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8116922:	494a      	ldr	r1, [pc, #296]	@ (8116a4c <MX_NetXDuo_Init+0x168>)
 8116924:	484a      	ldr	r0, [pc, #296]	@ (8116a50 <MX_NetXDuo_Init+0x16c>)
 8116926:	f7fc fe27 	bl	8113578 <_nxe_packet_pool_create>
 811692a:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 811692c:	697b      	ldr	r3, [r7, #20]
 811692e:	2b00      	cmp	r3, #0
 8116930:	d001      	beq.n	8116936 <MX_NetXDuo_Init+0x52>
  {
    return NX_POOL_ERROR;
 8116932:	2306      	movs	r3, #6
 8116934:	e085      	b.n	8116a42 <MX_NetXDuo_Init+0x15e>
  }

    /* Allocate the memory for Ip_Instance */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, Nx_IP_INSTANCE_THREAD_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8116936:	f107 010c 	add.w	r1, r7, #12
 811693a:	2300      	movs	r3, #0
 811693c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8116940:	6938      	ldr	r0, [r7, #16]
 8116942:	f7ff fdc9 	bl	81164d8 <_txe_byte_allocate>
 8116946:	4603      	mov	r3, r0
 8116948:	2b00      	cmp	r3, #0
 811694a:	d001      	beq.n	8116950 <MX_NetXDuo_Init+0x6c>
  {
    return TX_POOL_ERROR;
 811694c:	2302      	movs	r3, #2
 811694e:	e078      	b.n	8116a42 <MX_NetXDuo_Init+0x15e>
  }

   /* Create the main NX_IP instance */
  ret = nx_ip_create(&NetXDuoEthIpInstance, "NetX Ip instance", NX_APP_DEFAULT_IP_ADDRESS, NX_APP_DEFAULT_NET_MASK, &NxAppPool, nx_stm32_eth_driver,
 8116950:	68fb      	ldr	r3, [r7, #12]
 8116952:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8116956:	9205      	str	r2, [sp, #20]
 8116958:	220a      	movs	r2, #10
 811695a:	9204      	str	r2, [sp, #16]
 811695c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8116960:	9203      	str	r2, [sp, #12]
 8116962:	9302      	str	r3, [sp, #8]
 8116964:	4b3b      	ldr	r3, [pc, #236]	@ (8116a54 <MX_NetXDuo_Init+0x170>)
 8116966:	9301      	str	r3, [sp, #4]
 8116968:	4b39      	ldr	r3, [pc, #228]	@ (8116a50 <MX_NetXDuo_Init+0x16c>)
 811696a:	9300      	str	r3, [sp, #0]
 811696c:	f06f 03ff 	mvn.w	r3, #255	@ 0xff
 8116970:	4a39      	ldr	r2, [pc, #228]	@ (8116a58 <MX_NetXDuo_Init+0x174>)
 8116972:	493a      	ldr	r1, [pc, #232]	@ (8116a5c <MX_NetXDuo_Init+0x178>)
 8116974:	483a      	ldr	r0, [pc, #232]	@ (8116a60 <MX_NetXDuo_Init+0x17c>)
 8116976:	f7fc fccd 	bl	8113314 <_nxe_ip_create>
 811697a:	6178      	str	r0, [r7, #20]
                     pointer, Nx_IP_INSTANCE_THREAD_SIZE, NX_APP_INSTANCE_PRIORITY);

  if (ret != NX_SUCCESS)
 811697c:	697b      	ldr	r3, [r7, #20]
 811697e:	2b00      	cmp	r3, #0
 8116980:	d001      	beq.n	8116986 <MX_NetXDuo_Init+0xa2>
  {
    return NX_NOT_SUCCESSFUL;
 8116982:	2343      	movs	r3, #67	@ 0x43
 8116984:	e05d      	b.n	8116a42 <MX_NetXDuo_Init+0x15e>
  }

    /* Allocate the memory for ARP */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, DEFAULT_ARP_CACHE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8116986:	f107 010c 	add.w	r1, r7, #12
 811698a:	2300      	movs	r3, #0
 811698c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8116990:	6938      	ldr	r0, [r7, #16]
 8116992:	f7ff fda1 	bl	81164d8 <_txe_byte_allocate>
 8116996:	4603      	mov	r3, r0
 8116998:	2b00      	cmp	r3, #0
 811699a:	d001      	beq.n	81169a0 <MX_NetXDuo_Init+0xbc>
  {
    return TX_POOL_ERROR;
 811699c:	2302      	movs	r3, #2
 811699e:	e050      	b.n	8116a42 <MX_NetXDuo_Init+0x15e>

  /* USER CODE BEGIN ARP_Protocol_Initialization */

  /* USER CODE END ARP_Protocol_Initialization */

  ret = nx_arp_enable(&NetXDuoEthIpInstance, (VOID *)pointer, DEFAULT_ARP_CACHE_SIZE);
 81169a0:	68fb      	ldr	r3, [r7, #12]
 81169a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81169a6:	4619      	mov	r1, r3
 81169a8:	482d      	ldr	r0, [pc, #180]	@ (8116a60 <MX_NetXDuo_Init+0x17c>)
 81169aa:	f7fc fbe3 	bl	8113174 <_nxe_arp_enable>
 81169ae:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 81169b0:	697b      	ldr	r3, [r7, #20]
 81169b2:	2b00      	cmp	r3, #0
 81169b4:	d001      	beq.n	81169ba <MX_NetXDuo_Init+0xd6>
  {
    return NX_NOT_SUCCESSFUL;
 81169b6:	2343      	movs	r3, #67	@ 0x43
 81169b8:	e043      	b.n	8116a42 <MX_NetXDuo_Init+0x15e>

  /* USER CODE BEGIN ICMP_Protocol_Initialization */

  /* USER CODE END ICMP_Protocol_Initialization */

  ret = nx_icmp_enable(&NetXDuoEthIpInstance);
 81169ba:	4829      	ldr	r0, [pc, #164]	@ (8116a60 <MX_NetXDuo_Init+0x17c>)
 81169bc:	f7fc fc26 	bl	811320c <_nxe_icmp_enable>
 81169c0:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 81169c2:	697b      	ldr	r3, [r7, #20]
 81169c4:	2b00      	cmp	r3, #0
 81169c6:	d001      	beq.n	81169cc <MX_NetXDuo_Init+0xe8>
  {
    return NX_NOT_SUCCESSFUL;
 81169c8:	2343      	movs	r3, #67	@ 0x43
 81169ca:	e03a      	b.n	8116a42 <MX_NetXDuo_Init+0x15e>

  /* USER CODE BEGIN TCP_Protocol_Initialization */

  /* USER CODE END TCP_Protocol_Initialization */

  ret = nx_tcp_enable(&NetXDuoEthIpInstance);
 81169cc:	4824      	ldr	r0, [pc, #144]	@ (8116a60 <MX_NetXDuo_Init+0x17c>)
 81169ce:	f7fc ff0d 	bl	81137ec <_nxe_tcp_enable>
 81169d2:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 81169d4:	697b      	ldr	r3, [r7, #20]
 81169d6:	2b00      	cmp	r3, #0
 81169d8:	d001      	beq.n	81169de <MX_NetXDuo_Init+0xfa>
  {
    return NX_NOT_SUCCESSFUL;
 81169da:	2343      	movs	r3, #67	@ 0x43
 81169dc:	e031      	b.n	8116a42 <MX_NetXDuo_Init+0x15e>

  /* USER CODE BEGIN UDP_Protocol_Initialization */

  /* USER CODE END UDP_Protocol_Initialization */

  ret = nx_udp_enable(&NetXDuoEthIpInstance);
 81169de:	4820      	ldr	r0, [pc, #128]	@ (8116a60 <MX_NetXDuo_Init+0x17c>)
 81169e0:	f7fc ff3c 	bl	811385c <_nxe_udp_enable>
 81169e4:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 81169e6:	697b      	ldr	r3, [r7, #20]
 81169e8:	2b00      	cmp	r3, #0
 81169ea:	d001      	beq.n	81169f0 <MX_NetXDuo_Init+0x10c>
  {
    return NX_NOT_SUCCESSFUL;
 81169ec:	2343      	movs	r3, #67	@ 0x43
 81169ee:	e028      	b.n	8116a42 <MX_NetXDuo_Init+0x15e>
  }

   /* Allocate the memory for main thread   */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, NX_APP_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 81169f0:	f107 010c 	add.w	r1, r7, #12
 81169f4:	2300      	movs	r3, #0
 81169f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81169fa:	6938      	ldr	r0, [r7, #16]
 81169fc:	f7ff fd6c 	bl	81164d8 <_txe_byte_allocate>
 8116a00:	4603      	mov	r3, r0
 8116a02:	2b00      	cmp	r3, #0
 8116a04:	d001      	beq.n	8116a0a <MX_NetXDuo_Init+0x126>
  {
    return TX_POOL_ERROR;
 8116a06:	2302      	movs	r3, #2
 8116a08:	e01b      	b.n	8116a42 <MX_NetXDuo_Init+0x15e>
  }

  /* Create the main thread */
  ret = tx_thread_create(&NxAppThread, "NetXDuo App thread", nx_app_thread_entry , 0, pointer, NX_APP_THREAD_STACK_SIZE,
 8116a0a:	68fb      	ldr	r3, [r7, #12]
 8116a0c:	22b4      	movs	r2, #180	@ 0xb4
 8116a0e:	9206      	str	r2, [sp, #24]
 8116a10:	2201      	movs	r2, #1
 8116a12:	9205      	str	r2, [sp, #20]
 8116a14:	2200      	movs	r2, #0
 8116a16:	9204      	str	r2, [sp, #16]
 8116a18:	220a      	movs	r2, #10
 8116a1a:	9203      	str	r2, [sp, #12]
 8116a1c:	220a      	movs	r2, #10
 8116a1e:	9202      	str	r2, [sp, #8]
 8116a20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8116a24:	9201      	str	r2, [sp, #4]
 8116a26:	9300      	str	r3, [sp, #0]
 8116a28:	2300      	movs	r3, #0
 8116a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8116a64 <MX_NetXDuo_Init+0x180>)
 8116a2c:	490e      	ldr	r1, [pc, #56]	@ (8116a68 <MX_NetXDuo_Init+0x184>)
 8116a2e:	480f      	ldr	r0, [pc, #60]	@ (8116a6c <MX_NetXDuo_Init+0x188>)
 8116a30:	f7ff fe66 	bl	8116700 <_txe_thread_create>
 8116a34:	6178      	str	r0, [r7, #20]
                         NX_APP_THREAD_PRIORITY, NX_APP_THREAD_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);

  if (ret != TX_SUCCESS)
 8116a36:	697b      	ldr	r3, [r7, #20]
 8116a38:	2b00      	cmp	r3, #0
 8116a3a:	d001      	beq.n	8116a40 <MX_NetXDuo_Init+0x15c>
  {
    return TX_THREAD_ERROR;
 8116a3c:	230e      	movs	r3, #14
 8116a3e:	e000      	b.n	8116a42 <MX_NetXDuo_Init+0x15e>
  }

  /* USER CODE BEGIN MX_NetXDuo_Init */
  /* USER CODE END MX_NetXDuo_Init */

  return ret;
 8116a40:	697b      	ldr	r3, [r7, #20]
}
 8116a42:	4618      	mov	r0, r3
 8116a44:	3718      	adds	r7, #24
 8116a46:	46bd      	mov	sp, r7
 8116a48:	bd80      	pop	{r7, pc}
 8116a4a:	bf00      	nop
 8116a4c:	08117d50 	.word	0x08117d50
 8116a50:	200587e8 	.word	0x200587e8
 8116a54:	0810a925 	.word	0x0810a925
 8116a58:	c0a80164 	.word	0xc0a80164
 8116a5c:	08117d64 	.word	0x08117d64
 8116a60:	20058824 	.word	0x20058824
 8116a64:	08116a71 	.word	0x08116a71
 8116a68:	08117d78 	.word	0x08117d78
 8116a6c:	20058734 	.word	0x20058734

08116a70 <nx_app_thread_entry>:
* @brief  Main thread entry.
* @param thread_input: ULONG user argument used by the thread entry
* @retval none
*/
static VOID nx_app_thread_entry (ULONG thread_input)
{
 8116a70:	b580      	push	{r7, lr}
 8116a72:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8116a76:	af04      	add	r7, sp, #16
 8116a78:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8116a7c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8116a80:	6018      	str	r0, [r3, #0]
	    UCHAR data_buffer[512];
	    NX_PACKET *data_packet;
	    /*
	     * Print IPv4
	     */
	    ret = nx_ip_address_get(&NetXDuoEthIpInstance, &IpAddress, &NetMask);
 8116a82:	4a3e      	ldr	r2, [pc, #248]	@ (8116b7c <nx_app_thread_entry+0x10c>)
 8116a84:	493e      	ldr	r1, [pc, #248]	@ (8116b80 <nx_app_thread_entry+0x110>)
 8116a86:	483f      	ldr	r0, [pc, #252]	@ (8116b84 <nx_app_thread_entry+0x114>)
 8116a88:	f7fc fc00 	bl	811328c <_nxe_ip_address_get>
 8116a8c:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
	    if (ret != TX_SUCCESS)
 8116a90:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8116a94:	2b00      	cmp	r3, #0
 8116a96:	d002      	beq.n	8116a9e <nx_app_thread_entry+0x2e>
	    {
	    Error_Handler();
 8116a98:	f7ea f8ca 	bl	8100c30 <Error_Handler>
 8116a9c:	e015      	b.n	8116aca <nx_app_thread_entry+0x5a>
	    }
	    else
	    {
	        PRINT_IP_ADDRESS(IpAddress);
 8116a9e:	4b38      	ldr	r3, [pc, #224]	@ (8116b80 <nx_app_thread_entry+0x110>)
 8116aa0:	681b      	ldr	r3, [r3, #0]
 8116aa2:	0e19      	lsrs	r1, r3, #24
 8116aa4:	4b36      	ldr	r3, [pc, #216]	@ (8116b80 <nx_app_thread_entry+0x110>)
 8116aa6:	681b      	ldr	r3, [r3, #0]
 8116aa8:	0c1b      	lsrs	r3, r3, #16
 8116aaa:	b2d8      	uxtb	r0, r3
 8116aac:	4b34      	ldr	r3, [pc, #208]	@ (8116b80 <nx_app_thread_entry+0x110>)
 8116aae:	681b      	ldr	r3, [r3, #0]
 8116ab0:	0a1b      	lsrs	r3, r3, #8
 8116ab2:	b2db      	uxtb	r3, r3
 8116ab4:	4a32      	ldr	r2, [pc, #200]	@ (8116b80 <nx_app_thread_entry+0x110>)
 8116ab6:	6812      	ldr	r2, [r2, #0]
 8116ab8:	b2d2      	uxtb	r2, r2
 8116aba:	9201      	str	r2, [sp, #4]
 8116abc:	9300      	str	r3, [sp, #0]
 8116abe:	4603      	mov	r3, r0
 8116ac0:	460a      	mov	r2, r1
 8116ac2:	4931      	ldr	r1, [pc, #196]	@ (8116b88 <nx_app_thread_entry+0x118>)
 8116ac4:	4831      	ldr	r0, [pc, #196]	@ (8116b8c <nx_app_thread_entry+0x11c>)
 8116ac6:	f000 f96d 	bl	8116da4 <iprintf>

	    /*
	     * Create a UDP Socket and bind to it
	     */

	    ret = nx_udp_socket_create(&NetXDuoEthIpInstance, &UDPSocket, "UDP Server Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, NX_IP_TIME_TO_LIVE, 512);
 8116aca:	2378      	movs	r3, #120	@ 0x78
 8116acc:	9303      	str	r3, [sp, #12]
 8116ace:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8116ad2:	9302      	str	r3, [sp, #8]
 8116ad4:	2380      	movs	r3, #128	@ 0x80
 8116ad6:	9301      	str	r3, [sp, #4]
 8116ad8:	2300      	movs	r3, #0
 8116ada:	9300      	str	r3, [sp, #0]
 8116adc:	2300      	movs	r3, #0
 8116ade:	4a2c      	ldr	r2, [pc, #176]	@ (8116b90 <nx_app_thread_entry+0x120>)
 8116ae0:	492c      	ldr	r1, [pc, #176]	@ (8116b94 <nx_app_thread_entry+0x124>)
 8116ae2:	4828      	ldr	r0, [pc, #160]	@ (8116b84 <nx_app_thread_entry+0x114>)
 8116ae4:	f7fc ff38 	bl	8113958 <_nxe_udp_socket_create>
 8116ae8:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
	    if (ret != NX_SUCCESS)
 8116aec:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8116af0:	2b00      	cmp	r3, #0
 8116af2:	d001      	beq.n	8116af8 <nx_app_thread_entry+0x88>
	    {
	        Error_Handler();
 8116af4:	f7ea f89c 	bl	8100c30 <Error_Handler>
	    }

	  /* Bind to port 6000 */
	    ret = nx_udp_socket_bind(&UDPSocket, 6000, TX_WAIT_FOREVER);
 8116af8:	f04f 32ff 	mov.w	r2, #4294967295
 8116afc:	f241 7170 	movw	r1, #6000	@ 0x1770
 8116b00:	4824      	ldr	r0, [pc, #144]	@ (8116b94 <nx_app_thread_entry+0x124>)
 8116b02:	f7fc fee3 	bl	81138cc <_nxe_udp_socket_bind>
 8116b06:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
	    if (ret != NX_SUCCESS)
 8116b0a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8116b0e:	2b00      	cmp	r3, #0
 8116b10:	d002      	beq.n	8116b18 <nx_app_thread_entry+0xa8>
	    {
	        Error_Handler();
 8116b12:	f7ea f88d 	bl	8100c30 <Error_Handler>
 8116b16:	e002      	b.n	8116b1e <nx_app_thread_entry+0xae>
	    }
	    else
	    {
	        printf("UDP Server listening on PORT 6000.. \r\n");
 8116b18:	481f      	ldr	r0, [pc, #124]	@ (8116b98 <nx_app_thread_entry+0x128>)
 8116b1a:	f000 f9ab 	bl	8116e74 <puts>
	     * Main Task Loop
	     * Waits 1 second (100 centiseconds) for each UDP packet. If received, print out message
	     */
	    while (1)
	    {
	        TX_MEMSET(data_buffer, '\0', sizeof(data_buffer));
 8116b1e:	f107 0310 	add.w	r3, r7, #16
 8116b22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8116b26:	2100      	movs	r1, #0
 8116b28:	4618      	mov	r0, r3
 8116b2a:	f000 fa9d 	bl	8117068 <memset>

	        /* wait for data for 1 sec */
	        ret = nx_udp_socket_receive(&UDPSocket, &data_packet, 100);
 8116b2e:	f107 030c 	add.w	r3, r7, #12
 8116b32:	2264      	movs	r2, #100	@ 0x64
 8116b34:	4619      	mov	r1, r3
 8116b36:	4817      	ldr	r0, [pc, #92]	@ (8116b94 <nx_app_thread_entry+0x124>)
 8116b38:	f7fc ffa2 	bl	8113a80 <_nxe_udp_socket_receive>
 8116b3c:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214

	        if (ret == NX_SUCCESS)
 8116b40:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8116b44:	2b00      	cmp	r3, #0
 8116b46:	d1ea      	bne.n	8116b1e <nx_app_thread_entry+0xae>
	        {
	            nx_packet_data_retrieve(data_packet, data_buffer, &bytes_read);
 8116b48:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8116b4c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8116b50:	681b      	ldr	r3, [r3, #0]
 8116b52:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8116b56:	f107 0110 	add.w	r1, r7, #16
 8116b5a:	4618      	mov	r0, r3
 8116b5c:	f7fc fcf0 	bl	8113540 <_nxe_packet_data_retrieve>

	        /* Print our received data on UART com port*/
	              HAL_UART_Transmit(&huart3, (uint8_t *)data_buffer, bytes_read, 0xFFFF);
 8116b60:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8116b64:	b29a      	uxth	r2, r3
 8116b66:	f107 0110 	add.w	r1, r7, #16
 8116b6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8116b6e:	480b      	ldr	r0, [pc, #44]	@ (8116b9c <nx_app_thread_entry+0x12c>)
 8116b70:	f7f3 f92a 	bl	8109dc8 <HAL_UART_Transmit>
	              printf("\r\n");    // new line to make print out more readable
 8116b74:	480a      	ldr	r0, [pc, #40]	@ (8116ba0 <nx_app_thread_entry+0x130>)
 8116b76:	f000 f97d 	bl	8116e74 <puts>
	        TX_MEMSET(data_buffer, '\0', sizeof(data_buffer));
 8116b7a:	e7d0      	b.n	8116b1e <nx_app_thread_entry+0xae>
 8116b7c:	20059064 	.word	0x20059064
 8116b80:	20059060 	.word	0x20059060
 8116b84:	20058824 	.word	0x20058824
 8116b88:	08117d8c 	.word	0x08117d8c
 8116b8c:	08117d98 	.word	0x08117d98
 8116b90:	08117db4 	.word	0x08117db4
 8116b94:	20058fe8 	.word	0x20058fe8
 8116b98:	08117dc8 	.word	0x08117dc8
 8116b9c:	20057f14 	.word	0x20057f14
 8116ba0:	08117df0 	.word	0x08117df0

08116ba4 <rand>:
 8116ba4:	4b16      	ldr	r3, [pc, #88]	@ (8116c00 <rand+0x5c>)
 8116ba6:	b510      	push	{r4, lr}
 8116ba8:	681c      	ldr	r4, [r3, #0]
 8116baa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8116bac:	b9b3      	cbnz	r3, 8116bdc <rand+0x38>
 8116bae:	2018      	movs	r0, #24
 8116bb0:	f000 fb4a 	bl	8117248 <malloc>
 8116bb4:	4602      	mov	r2, r0
 8116bb6:	6320      	str	r0, [r4, #48]	@ 0x30
 8116bb8:	b920      	cbnz	r0, 8116bc4 <rand+0x20>
 8116bba:	4b12      	ldr	r3, [pc, #72]	@ (8116c04 <rand+0x60>)
 8116bbc:	2152      	movs	r1, #82	@ 0x52
 8116bbe:	4812      	ldr	r0, [pc, #72]	@ (8116c08 <rand+0x64>)
 8116bc0:	f000 fada 	bl	8117178 <__assert_func>
 8116bc4:	4911      	ldr	r1, [pc, #68]	@ (8116c0c <rand+0x68>)
 8116bc6:	4b12      	ldr	r3, [pc, #72]	@ (8116c10 <rand+0x6c>)
 8116bc8:	e9c0 1300 	strd	r1, r3, [r0]
 8116bcc:	4b11      	ldr	r3, [pc, #68]	@ (8116c14 <rand+0x70>)
 8116bce:	2100      	movs	r1, #0
 8116bd0:	6083      	str	r3, [r0, #8]
 8116bd2:	230b      	movs	r3, #11
 8116bd4:	8183      	strh	r3, [r0, #12]
 8116bd6:	2001      	movs	r0, #1
 8116bd8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8116bdc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8116bde:	480e      	ldr	r0, [pc, #56]	@ (8116c18 <rand+0x74>)
 8116be0:	690b      	ldr	r3, [r1, #16]
 8116be2:	694c      	ldr	r4, [r1, #20]
 8116be4:	4a0d      	ldr	r2, [pc, #52]	@ (8116c1c <rand+0x78>)
 8116be6:	4358      	muls	r0, r3
 8116be8:	fb02 0004 	mla	r0, r2, r4, r0
 8116bec:	fba3 3202 	umull	r3, r2, r3, r2
 8116bf0:	3301      	adds	r3, #1
 8116bf2:	eb40 0002 	adc.w	r0, r0, r2
 8116bf6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8116bfa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8116bfe:	bd10      	pop	{r4, pc}
 8116c00:	20050098 	.word	0x20050098
 8116c04:	08117e34 	.word	0x08117e34
 8116c08:	08117e4b 	.word	0x08117e4b
 8116c0c:	abcd330e 	.word	0xabcd330e
 8116c10:	e66d1234 	.word	0xe66d1234
 8116c14:	0005deec 	.word	0x0005deec
 8116c18:	5851f42d 	.word	0x5851f42d
 8116c1c:	4c957f2d 	.word	0x4c957f2d

08116c20 <std>:
 8116c20:	2300      	movs	r3, #0
 8116c22:	b510      	push	{r4, lr}
 8116c24:	4604      	mov	r4, r0
 8116c26:	6083      	str	r3, [r0, #8]
 8116c28:	8181      	strh	r1, [r0, #12]
 8116c2a:	4619      	mov	r1, r3
 8116c2c:	6643      	str	r3, [r0, #100]	@ 0x64
 8116c2e:	81c2      	strh	r2, [r0, #14]
 8116c30:	2208      	movs	r2, #8
 8116c32:	6183      	str	r3, [r0, #24]
 8116c34:	e9c0 3300 	strd	r3, r3, [r0]
 8116c38:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8116c3c:	305c      	adds	r0, #92	@ 0x5c
 8116c3e:	f000 fa13 	bl	8117068 <memset>
 8116c42:	4b0d      	ldr	r3, [pc, #52]	@ (8116c78 <std+0x58>)
 8116c44:	6224      	str	r4, [r4, #32]
 8116c46:	6263      	str	r3, [r4, #36]	@ 0x24
 8116c48:	4b0c      	ldr	r3, [pc, #48]	@ (8116c7c <std+0x5c>)
 8116c4a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8116c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8116c80 <std+0x60>)
 8116c4e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8116c50:	4b0c      	ldr	r3, [pc, #48]	@ (8116c84 <std+0x64>)
 8116c52:	6323      	str	r3, [r4, #48]	@ 0x30
 8116c54:	4b0c      	ldr	r3, [pc, #48]	@ (8116c88 <std+0x68>)
 8116c56:	429c      	cmp	r4, r3
 8116c58:	d006      	beq.n	8116c68 <std+0x48>
 8116c5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8116c5e:	4294      	cmp	r4, r2
 8116c60:	d002      	beq.n	8116c68 <std+0x48>
 8116c62:	33d0      	adds	r3, #208	@ 0xd0
 8116c64:	429c      	cmp	r4, r3
 8116c66:	d105      	bne.n	8116c74 <std+0x54>
 8116c68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8116c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8116c70:	f000 ba72 	b.w	8117158 <__retarget_lock_init_recursive>
 8116c74:	bd10      	pop	{r4, pc}
 8116c76:	bf00      	nop
 8116c78:	08116e85 	.word	0x08116e85
 8116c7c:	08116ea7 	.word	0x08116ea7
 8116c80:	08116edf 	.word	0x08116edf
 8116c84:	08116f03 	.word	0x08116f03
 8116c88:	20059068 	.word	0x20059068

08116c8c <stdio_exit_handler>:
 8116c8c:	4a02      	ldr	r2, [pc, #8]	@ (8116c98 <stdio_exit_handler+0xc>)
 8116c8e:	4903      	ldr	r1, [pc, #12]	@ (8116c9c <stdio_exit_handler+0x10>)
 8116c90:	4803      	ldr	r0, [pc, #12]	@ (8116ca0 <stdio_exit_handler+0x14>)
 8116c92:	f000 b869 	b.w	8116d68 <_fwalk_sglue>
 8116c96:	bf00      	nop
 8116c98:	2005008c 	.word	0x2005008c
 8116c9c:	08117a65 	.word	0x08117a65
 8116ca0:	2005009c 	.word	0x2005009c

08116ca4 <cleanup_stdio>:
 8116ca4:	6841      	ldr	r1, [r0, #4]
 8116ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8116cd8 <cleanup_stdio+0x34>)
 8116ca8:	4299      	cmp	r1, r3
 8116caa:	b510      	push	{r4, lr}
 8116cac:	4604      	mov	r4, r0
 8116cae:	d001      	beq.n	8116cb4 <cleanup_stdio+0x10>
 8116cb0:	f000 fed8 	bl	8117a64 <_fflush_r>
 8116cb4:	68a1      	ldr	r1, [r4, #8]
 8116cb6:	4b09      	ldr	r3, [pc, #36]	@ (8116cdc <cleanup_stdio+0x38>)
 8116cb8:	4299      	cmp	r1, r3
 8116cba:	d002      	beq.n	8116cc2 <cleanup_stdio+0x1e>
 8116cbc:	4620      	mov	r0, r4
 8116cbe:	f000 fed1 	bl	8117a64 <_fflush_r>
 8116cc2:	68e1      	ldr	r1, [r4, #12]
 8116cc4:	4b06      	ldr	r3, [pc, #24]	@ (8116ce0 <cleanup_stdio+0x3c>)
 8116cc6:	4299      	cmp	r1, r3
 8116cc8:	d004      	beq.n	8116cd4 <cleanup_stdio+0x30>
 8116cca:	4620      	mov	r0, r4
 8116ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8116cd0:	f000 bec8 	b.w	8117a64 <_fflush_r>
 8116cd4:	bd10      	pop	{r4, pc}
 8116cd6:	bf00      	nop
 8116cd8:	20059068 	.word	0x20059068
 8116cdc:	200590d0 	.word	0x200590d0
 8116ce0:	20059138 	.word	0x20059138

08116ce4 <global_stdio_init.part.0>:
 8116ce4:	b510      	push	{r4, lr}
 8116ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8116d14 <global_stdio_init.part.0+0x30>)
 8116ce8:	2104      	movs	r1, #4
 8116cea:	4c0b      	ldr	r4, [pc, #44]	@ (8116d18 <global_stdio_init.part.0+0x34>)
 8116cec:	4a0b      	ldr	r2, [pc, #44]	@ (8116d1c <global_stdio_init.part.0+0x38>)
 8116cee:	4620      	mov	r0, r4
 8116cf0:	601a      	str	r2, [r3, #0]
 8116cf2:	2200      	movs	r2, #0
 8116cf4:	f7ff ff94 	bl	8116c20 <std>
 8116cf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8116cfc:	2201      	movs	r2, #1
 8116cfe:	2109      	movs	r1, #9
 8116d00:	f7ff ff8e 	bl	8116c20 <std>
 8116d04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8116d08:	2202      	movs	r2, #2
 8116d0a:	2112      	movs	r1, #18
 8116d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8116d10:	f7ff bf86 	b.w	8116c20 <std>
 8116d14:	200591a0 	.word	0x200591a0
 8116d18:	20059068 	.word	0x20059068
 8116d1c:	08116c8d 	.word	0x08116c8d

08116d20 <__sfp_lock_acquire>:
 8116d20:	4801      	ldr	r0, [pc, #4]	@ (8116d28 <__sfp_lock_acquire+0x8>)
 8116d22:	f000 ba1a 	b.w	811715a <__retarget_lock_acquire_recursive>
 8116d26:	bf00      	nop
 8116d28:	200591a9 	.word	0x200591a9

08116d2c <__sfp_lock_release>:
 8116d2c:	4801      	ldr	r0, [pc, #4]	@ (8116d34 <__sfp_lock_release+0x8>)
 8116d2e:	f000 ba15 	b.w	811715c <__retarget_lock_release_recursive>
 8116d32:	bf00      	nop
 8116d34:	200591a9 	.word	0x200591a9

08116d38 <__sinit>:
 8116d38:	b510      	push	{r4, lr}
 8116d3a:	4604      	mov	r4, r0
 8116d3c:	f7ff fff0 	bl	8116d20 <__sfp_lock_acquire>
 8116d40:	6a23      	ldr	r3, [r4, #32]
 8116d42:	b11b      	cbz	r3, 8116d4c <__sinit+0x14>
 8116d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8116d48:	f7ff bff0 	b.w	8116d2c <__sfp_lock_release>
 8116d4c:	4b04      	ldr	r3, [pc, #16]	@ (8116d60 <__sinit+0x28>)
 8116d4e:	6223      	str	r3, [r4, #32]
 8116d50:	4b04      	ldr	r3, [pc, #16]	@ (8116d64 <__sinit+0x2c>)
 8116d52:	681b      	ldr	r3, [r3, #0]
 8116d54:	2b00      	cmp	r3, #0
 8116d56:	d1f5      	bne.n	8116d44 <__sinit+0xc>
 8116d58:	f7ff ffc4 	bl	8116ce4 <global_stdio_init.part.0>
 8116d5c:	e7f2      	b.n	8116d44 <__sinit+0xc>
 8116d5e:	bf00      	nop
 8116d60:	08116ca5 	.word	0x08116ca5
 8116d64:	200591a0 	.word	0x200591a0

08116d68 <_fwalk_sglue>:
 8116d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8116d6c:	4607      	mov	r7, r0
 8116d6e:	4688      	mov	r8, r1
 8116d70:	4614      	mov	r4, r2
 8116d72:	2600      	movs	r6, #0
 8116d74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8116d78:	f1b9 0901 	subs.w	r9, r9, #1
 8116d7c:	d505      	bpl.n	8116d8a <_fwalk_sglue+0x22>
 8116d7e:	6824      	ldr	r4, [r4, #0]
 8116d80:	2c00      	cmp	r4, #0
 8116d82:	d1f7      	bne.n	8116d74 <_fwalk_sglue+0xc>
 8116d84:	4630      	mov	r0, r6
 8116d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8116d8a:	89ab      	ldrh	r3, [r5, #12]
 8116d8c:	2b01      	cmp	r3, #1
 8116d8e:	d907      	bls.n	8116da0 <_fwalk_sglue+0x38>
 8116d90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8116d94:	3301      	adds	r3, #1
 8116d96:	d003      	beq.n	8116da0 <_fwalk_sglue+0x38>
 8116d98:	4629      	mov	r1, r5
 8116d9a:	4638      	mov	r0, r7
 8116d9c:	47c0      	blx	r8
 8116d9e:	4306      	orrs	r6, r0
 8116da0:	3568      	adds	r5, #104	@ 0x68
 8116da2:	e7e9      	b.n	8116d78 <_fwalk_sglue+0x10>

08116da4 <iprintf>:
 8116da4:	b40f      	push	{r0, r1, r2, r3}
 8116da6:	b507      	push	{r0, r1, r2, lr}
 8116da8:	4906      	ldr	r1, [pc, #24]	@ (8116dc4 <iprintf+0x20>)
 8116daa:	ab04      	add	r3, sp, #16
 8116dac:	6808      	ldr	r0, [r1, #0]
 8116dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8116db2:	6881      	ldr	r1, [r0, #8]
 8116db4:	9301      	str	r3, [sp, #4]
 8116db6:	f000 fb27 	bl	8117408 <_vfiprintf_r>
 8116dba:	b003      	add	sp, #12
 8116dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8116dc0:	b004      	add	sp, #16
 8116dc2:	4770      	bx	lr
 8116dc4:	20050098 	.word	0x20050098

08116dc8 <_puts_r>:
 8116dc8:	6a03      	ldr	r3, [r0, #32]
 8116dca:	b570      	push	{r4, r5, r6, lr}
 8116dcc:	4605      	mov	r5, r0
 8116dce:	460e      	mov	r6, r1
 8116dd0:	6884      	ldr	r4, [r0, #8]
 8116dd2:	b90b      	cbnz	r3, 8116dd8 <_puts_r+0x10>
 8116dd4:	f7ff ffb0 	bl	8116d38 <__sinit>
 8116dd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8116dda:	07db      	lsls	r3, r3, #31
 8116ddc:	d405      	bmi.n	8116dea <_puts_r+0x22>
 8116dde:	89a3      	ldrh	r3, [r4, #12]
 8116de0:	0598      	lsls	r0, r3, #22
 8116de2:	d402      	bmi.n	8116dea <_puts_r+0x22>
 8116de4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8116de6:	f000 f9b8 	bl	811715a <__retarget_lock_acquire_recursive>
 8116dea:	89a3      	ldrh	r3, [r4, #12]
 8116dec:	0719      	lsls	r1, r3, #28
 8116dee:	d502      	bpl.n	8116df6 <_puts_r+0x2e>
 8116df0:	6923      	ldr	r3, [r4, #16]
 8116df2:	2b00      	cmp	r3, #0
 8116df4:	d135      	bne.n	8116e62 <_puts_r+0x9a>
 8116df6:	4621      	mov	r1, r4
 8116df8:	4628      	mov	r0, r5
 8116dfa:	f000 f8c5 	bl	8116f88 <__swsetup_r>
 8116dfe:	b380      	cbz	r0, 8116e62 <_puts_r+0x9a>
 8116e00:	f04f 35ff 	mov.w	r5, #4294967295
 8116e04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8116e06:	07da      	lsls	r2, r3, #31
 8116e08:	d405      	bmi.n	8116e16 <_puts_r+0x4e>
 8116e0a:	89a3      	ldrh	r3, [r4, #12]
 8116e0c:	059b      	lsls	r3, r3, #22
 8116e0e:	d402      	bmi.n	8116e16 <_puts_r+0x4e>
 8116e10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8116e12:	f000 f9a3 	bl	811715c <__retarget_lock_release_recursive>
 8116e16:	4628      	mov	r0, r5
 8116e18:	bd70      	pop	{r4, r5, r6, pc}
 8116e1a:	2b00      	cmp	r3, #0
 8116e1c:	da04      	bge.n	8116e28 <_puts_r+0x60>
 8116e1e:	69a2      	ldr	r2, [r4, #24]
 8116e20:	429a      	cmp	r2, r3
 8116e22:	dc17      	bgt.n	8116e54 <_puts_r+0x8c>
 8116e24:	290a      	cmp	r1, #10
 8116e26:	d015      	beq.n	8116e54 <_puts_r+0x8c>
 8116e28:	6823      	ldr	r3, [r4, #0]
 8116e2a:	1c5a      	adds	r2, r3, #1
 8116e2c:	6022      	str	r2, [r4, #0]
 8116e2e:	7019      	strb	r1, [r3, #0]
 8116e30:	68a3      	ldr	r3, [r4, #8]
 8116e32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8116e36:	3b01      	subs	r3, #1
 8116e38:	60a3      	str	r3, [r4, #8]
 8116e3a:	2900      	cmp	r1, #0
 8116e3c:	d1ed      	bne.n	8116e1a <_puts_r+0x52>
 8116e3e:	2b00      	cmp	r3, #0
 8116e40:	da11      	bge.n	8116e66 <_puts_r+0x9e>
 8116e42:	4622      	mov	r2, r4
 8116e44:	210a      	movs	r1, #10
 8116e46:	4628      	mov	r0, r5
 8116e48:	f000 f85f 	bl	8116f0a <__swbuf_r>
 8116e4c:	3001      	adds	r0, #1
 8116e4e:	d0d7      	beq.n	8116e00 <_puts_r+0x38>
 8116e50:	250a      	movs	r5, #10
 8116e52:	e7d7      	b.n	8116e04 <_puts_r+0x3c>
 8116e54:	4622      	mov	r2, r4
 8116e56:	4628      	mov	r0, r5
 8116e58:	f000 f857 	bl	8116f0a <__swbuf_r>
 8116e5c:	3001      	adds	r0, #1
 8116e5e:	d1e7      	bne.n	8116e30 <_puts_r+0x68>
 8116e60:	e7ce      	b.n	8116e00 <_puts_r+0x38>
 8116e62:	3e01      	subs	r6, #1
 8116e64:	e7e4      	b.n	8116e30 <_puts_r+0x68>
 8116e66:	6823      	ldr	r3, [r4, #0]
 8116e68:	1c5a      	adds	r2, r3, #1
 8116e6a:	6022      	str	r2, [r4, #0]
 8116e6c:	220a      	movs	r2, #10
 8116e6e:	701a      	strb	r2, [r3, #0]
 8116e70:	e7ee      	b.n	8116e50 <_puts_r+0x88>
	...

08116e74 <puts>:
 8116e74:	4b02      	ldr	r3, [pc, #8]	@ (8116e80 <puts+0xc>)
 8116e76:	4601      	mov	r1, r0
 8116e78:	6818      	ldr	r0, [r3, #0]
 8116e7a:	f7ff bfa5 	b.w	8116dc8 <_puts_r>
 8116e7e:	bf00      	nop
 8116e80:	20050098 	.word	0x20050098

08116e84 <__sread>:
 8116e84:	b510      	push	{r4, lr}
 8116e86:	460c      	mov	r4, r1
 8116e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8116e8c:	f000 f916 	bl	81170bc <_read_r>
 8116e90:	2800      	cmp	r0, #0
 8116e92:	bfab      	itete	ge
 8116e94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8116e96:	89a3      	ldrhlt	r3, [r4, #12]
 8116e98:	181b      	addge	r3, r3, r0
 8116e9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8116e9e:	bfac      	ite	ge
 8116ea0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8116ea2:	81a3      	strhlt	r3, [r4, #12]
 8116ea4:	bd10      	pop	{r4, pc}

08116ea6 <__swrite>:
 8116ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8116eaa:	461f      	mov	r7, r3
 8116eac:	898b      	ldrh	r3, [r1, #12]
 8116eae:	4605      	mov	r5, r0
 8116eb0:	460c      	mov	r4, r1
 8116eb2:	05db      	lsls	r3, r3, #23
 8116eb4:	4616      	mov	r6, r2
 8116eb6:	d505      	bpl.n	8116ec4 <__swrite+0x1e>
 8116eb8:	2302      	movs	r3, #2
 8116eba:	2200      	movs	r2, #0
 8116ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8116ec0:	f000 f8ea 	bl	8117098 <_lseek_r>
 8116ec4:	89a3      	ldrh	r3, [r4, #12]
 8116ec6:	4632      	mov	r2, r6
 8116ec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8116ecc:	4628      	mov	r0, r5
 8116ece:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8116ed2:	81a3      	strh	r3, [r4, #12]
 8116ed4:	463b      	mov	r3, r7
 8116ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8116eda:	f000 b901 	b.w	81170e0 <_write_r>

08116ede <__sseek>:
 8116ede:	b510      	push	{r4, lr}
 8116ee0:	460c      	mov	r4, r1
 8116ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8116ee6:	f000 f8d7 	bl	8117098 <_lseek_r>
 8116eea:	1c43      	adds	r3, r0, #1
 8116eec:	89a3      	ldrh	r3, [r4, #12]
 8116eee:	bf15      	itete	ne
 8116ef0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8116ef2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8116ef6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8116efa:	81a3      	strheq	r3, [r4, #12]
 8116efc:	bf18      	it	ne
 8116efe:	81a3      	strhne	r3, [r4, #12]
 8116f00:	bd10      	pop	{r4, pc}

08116f02 <__sclose>:
 8116f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8116f06:	f000 b8b7 	b.w	8117078 <_close_r>

08116f0a <__swbuf_r>:
 8116f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8116f0c:	460e      	mov	r6, r1
 8116f0e:	4614      	mov	r4, r2
 8116f10:	4605      	mov	r5, r0
 8116f12:	b118      	cbz	r0, 8116f1c <__swbuf_r+0x12>
 8116f14:	6a03      	ldr	r3, [r0, #32]
 8116f16:	b90b      	cbnz	r3, 8116f1c <__swbuf_r+0x12>
 8116f18:	f7ff ff0e 	bl	8116d38 <__sinit>
 8116f1c:	69a3      	ldr	r3, [r4, #24]
 8116f1e:	60a3      	str	r3, [r4, #8]
 8116f20:	89a3      	ldrh	r3, [r4, #12]
 8116f22:	071a      	lsls	r2, r3, #28
 8116f24:	d501      	bpl.n	8116f2a <__swbuf_r+0x20>
 8116f26:	6923      	ldr	r3, [r4, #16]
 8116f28:	b943      	cbnz	r3, 8116f3c <__swbuf_r+0x32>
 8116f2a:	4621      	mov	r1, r4
 8116f2c:	4628      	mov	r0, r5
 8116f2e:	f000 f82b 	bl	8116f88 <__swsetup_r>
 8116f32:	b118      	cbz	r0, 8116f3c <__swbuf_r+0x32>
 8116f34:	f04f 37ff 	mov.w	r7, #4294967295
 8116f38:	4638      	mov	r0, r7
 8116f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8116f3c:	6823      	ldr	r3, [r4, #0]
 8116f3e:	b2f6      	uxtb	r6, r6
 8116f40:	6922      	ldr	r2, [r4, #16]
 8116f42:	4637      	mov	r7, r6
 8116f44:	1a98      	subs	r0, r3, r2
 8116f46:	6963      	ldr	r3, [r4, #20]
 8116f48:	4283      	cmp	r3, r0
 8116f4a:	dc05      	bgt.n	8116f58 <__swbuf_r+0x4e>
 8116f4c:	4621      	mov	r1, r4
 8116f4e:	4628      	mov	r0, r5
 8116f50:	f000 fd88 	bl	8117a64 <_fflush_r>
 8116f54:	2800      	cmp	r0, #0
 8116f56:	d1ed      	bne.n	8116f34 <__swbuf_r+0x2a>
 8116f58:	68a3      	ldr	r3, [r4, #8]
 8116f5a:	3b01      	subs	r3, #1
 8116f5c:	60a3      	str	r3, [r4, #8]
 8116f5e:	6823      	ldr	r3, [r4, #0]
 8116f60:	1c5a      	adds	r2, r3, #1
 8116f62:	6022      	str	r2, [r4, #0]
 8116f64:	701e      	strb	r6, [r3, #0]
 8116f66:	1c43      	adds	r3, r0, #1
 8116f68:	6962      	ldr	r2, [r4, #20]
 8116f6a:	429a      	cmp	r2, r3
 8116f6c:	d004      	beq.n	8116f78 <__swbuf_r+0x6e>
 8116f6e:	89a3      	ldrh	r3, [r4, #12]
 8116f70:	07db      	lsls	r3, r3, #31
 8116f72:	d5e1      	bpl.n	8116f38 <__swbuf_r+0x2e>
 8116f74:	2e0a      	cmp	r6, #10
 8116f76:	d1df      	bne.n	8116f38 <__swbuf_r+0x2e>
 8116f78:	4621      	mov	r1, r4
 8116f7a:	4628      	mov	r0, r5
 8116f7c:	f000 fd72 	bl	8117a64 <_fflush_r>
 8116f80:	2800      	cmp	r0, #0
 8116f82:	d0d9      	beq.n	8116f38 <__swbuf_r+0x2e>
 8116f84:	e7d6      	b.n	8116f34 <__swbuf_r+0x2a>
	...

08116f88 <__swsetup_r>:
 8116f88:	b538      	push	{r3, r4, r5, lr}
 8116f8a:	4b29      	ldr	r3, [pc, #164]	@ (8117030 <__swsetup_r+0xa8>)
 8116f8c:	4605      	mov	r5, r0
 8116f8e:	460c      	mov	r4, r1
 8116f90:	6818      	ldr	r0, [r3, #0]
 8116f92:	b118      	cbz	r0, 8116f9c <__swsetup_r+0x14>
 8116f94:	6a03      	ldr	r3, [r0, #32]
 8116f96:	b90b      	cbnz	r3, 8116f9c <__swsetup_r+0x14>
 8116f98:	f7ff fece 	bl	8116d38 <__sinit>
 8116f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8116fa0:	0719      	lsls	r1, r3, #28
 8116fa2:	d422      	bmi.n	8116fea <__swsetup_r+0x62>
 8116fa4:	06da      	lsls	r2, r3, #27
 8116fa6:	d407      	bmi.n	8116fb8 <__swsetup_r+0x30>
 8116fa8:	2209      	movs	r2, #9
 8116faa:	602a      	str	r2, [r5, #0]
 8116fac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8116fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8116fb4:	81a3      	strh	r3, [r4, #12]
 8116fb6:	e033      	b.n	8117020 <__swsetup_r+0x98>
 8116fb8:	0758      	lsls	r0, r3, #29
 8116fba:	d512      	bpl.n	8116fe2 <__swsetup_r+0x5a>
 8116fbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8116fbe:	b141      	cbz	r1, 8116fd2 <__swsetup_r+0x4a>
 8116fc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8116fc4:	4299      	cmp	r1, r3
 8116fc6:	d002      	beq.n	8116fce <__swsetup_r+0x46>
 8116fc8:	4628      	mov	r0, r5
 8116fca:	f000 f8f3 	bl	81171b4 <_free_r>
 8116fce:	2300      	movs	r3, #0
 8116fd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8116fd2:	89a3      	ldrh	r3, [r4, #12]
 8116fd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8116fd8:	81a3      	strh	r3, [r4, #12]
 8116fda:	2300      	movs	r3, #0
 8116fdc:	6063      	str	r3, [r4, #4]
 8116fde:	6923      	ldr	r3, [r4, #16]
 8116fe0:	6023      	str	r3, [r4, #0]
 8116fe2:	89a3      	ldrh	r3, [r4, #12]
 8116fe4:	f043 0308 	orr.w	r3, r3, #8
 8116fe8:	81a3      	strh	r3, [r4, #12]
 8116fea:	6923      	ldr	r3, [r4, #16]
 8116fec:	b94b      	cbnz	r3, 8117002 <__swsetup_r+0x7a>
 8116fee:	89a3      	ldrh	r3, [r4, #12]
 8116ff0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8116ff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8116ff8:	d003      	beq.n	8117002 <__swsetup_r+0x7a>
 8116ffa:	4621      	mov	r1, r4
 8116ffc:	4628      	mov	r0, r5
 8116ffe:	f000 fd90 	bl	8117b22 <__smakebuf_r>
 8117002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8117006:	f013 0201 	ands.w	r2, r3, #1
 811700a:	d00a      	beq.n	8117022 <__swsetup_r+0x9a>
 811700c:	2200      	movs	r2, #0
 811700e:	60a2      	str	r2, [r4, #8]
 8117010:	6962      	ldr	r2, [r4, #20]
 8117012:	4252      	negs	r2, r2
 8117014:	61a2      	str	r2, [r4, #24]
 8117016:	6922      	ldr	r2, [r4, #16]
 8117018:	b942      	cbnz	r2, 811702c <__swsetup_r+0xa4>
 811701a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 811701e:	d1c5      	bne.n	8116fac <__swsetup_r+0x24>
 8117020:	bd38      	pop	{r3, r4, r5, pc}
 8117022:	0799      	lsls	r1, r3, #30
 8117024:	bf58      	it	pl
 8117026:	6962      	ldrpl	r2, [r4, #20]
 8117028:	60a2      	str	r2, [r4, #8]
 811702a:	e7f4      	b.n	8117016 <__swsetup_r+0x8e>
 811702c:	2000      	movs	r0, #0
 811702e:	e7f7      	b.n	8117020 <__swsetup_r+0x98>
 8117030:	20050098 	.word	0x20050098

08117034 <memmove>:
 8117034:	4288      	cmp	r0, r1
 8117036:	b510      	push	{r4, lr}
 8117038:	eb01 0402 	add.w	r4, r1, r2
 811703c:	d902      	bls.n	8117044 <memmove+0x10>
 811703e:	4284      	cmp	r4, r0
 8117040:	4623      	mov	r3, r4
 8117042:	d807      	bhi.n	8117054 <memmove+0x20>
 8117044:	1e43      	subs	r3, r0, #1
 8117046:	42a1      	cmp	r1, r4
 8117048:	d008      	beq.n	811705c <memmove+0x28>
 811704a:	f811 2b01 	ldrb.w	r2, [r1], #1
 811704e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8117052:	e7f8      	b.n	8117046 <memmove+0x12>
 8117054:	4402      	add	r2, r0
 8117056:	4601      	mov	r1, r0
 8117058:	428a      	cmp	r2, r1
 811705a:	d100      	bne.n	811705e <memmove+0x2a>
 811705c:	bd10      	pop	{r4, pc}
 811705e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8117062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8117066:	e7f7      	b.n	8117058 <memmove+0x24>

08117068 <memset>:
 8117068:	4402      	add	r2, r0
 811706a:	4603      	mov	r3, r0
 811706c:	4293      	cmp	r3, r2
 811706e:	d100      	bne.n	8117072 <memset+0xa>
 8117070:	4770      	bx	lr
 8117072:	f803 1b01 	strb.w	r1, [r3], #1
 8117076:	e7f9      	b.n	811706c <memset+0x4>

08117078 <_close_r>:
 8117078:	b538      	push	{r3, r4, r5, lr}
 811707a:	2300      	movs	r3, #0
 811707c:	4d05      	ldr	r5, [pc, #20]	@ (8117094 <_close_r+0x1c>)
 811707e:	4604      	mov	r4, r0
 8117080:	4608      	mov	r0, r1
 8117082:	602b      	str	r3, [r5, #0]
 8117084:	f7ea f834 	bl	81010f0 <_close>
 8117088:	1c43      	adds	r3, r0, #1
 811708a:	d102      	bne.n	8117092 <_close_r+0x1a>
 811708c:	682b      	ldr	r3, [r5, #0]
 811708e:	b103      	cbz	r3, 8117092 <_close_r+0x1a>
 8117090:	6023      	str	r3, [r4, #0]
 8117092:	bd38      	pop	{r3, r4, r5, pc}
 8117094:	200591a4 	.word	0x200591a4

08117098 <_lseek_r>:
 8117098:	b538      	push	{r3, r4, r5, lr}
 811709a:	4604      	mov	r4, r0
 811709c:	4d06      	ldr	r5, [pc, #24]	@ (81170b8 <_lseek_r+0x20>)
 811709e:	4608      	mov	r0, r1
 81170a0:	4611      	mov	r1, r2
 81170a2:	2200      	movs	r2, #0
 81170a4:	602a      	str	r2, [r5, #0]
 81170a6:	461a      	mov	r2, r3
 81170a8:	f7ea f849 	bl	810113e <_lseek>
 81170ac:	1c43      	adds	r3, r0, #1
 81170ae:	d102      	bne.n	81170b6 <_lseek_r+0x1e>
 81170b0:	682b      	ldr	r3, [r5, #0]
 81170b2:	b103      	cbz	r3, 81170b6 <_lseek_r+0x1e>
 81170b4:	6023      	str	r3, [r4, #0]
 81170b6:	bd38      	pop	{r3, r4, r5, pc}
 81170b8:	200591a4 	.word	0x200591a4

081170bc <_read_r>:
 81170bc:	b538      	push	{r3, r4, r5, lr}
 81170be:	4604      	mov	r4, r0
 81170c0:	4d06      	ldr	r5, [pc, #24]	@ (81170dc <_read_r+0x20>)
 81170c2:	4608      	mov	r0, r1
 81170c4:	4611      	mov	r1, r2
 81170c6:	2200      	movs	r2, #0
 81170c8:	602a      	str	r2, [r5, #0]
 81170ca:	461a      	mov	r2, r3
 81170cc:	f7e9 ffd7 	bl	810107e <_read>
 81170d0:	1c43      	adds	r3, r0, #1
 81170d2:	d102      	bne.n	81170da <_read_r+0x1e>
 81170d4:	682b      	ldr	r3, [r5, #0]
 81170d6:	b103      	cbz	r3, 81170da <_read_r+0x1e>
 81170d8:	6023      	str	r3, [r4, #0]
 81170da:	bd38      	pop	{r3, r4, r5, pc}
 81170dc:	200591a4 	.word	0x200591a4

081170e0 <_write_r>:
 81170e0:	b538      	push	{r3, r4, r5, lr}
 81170e2:	4604      	mov	r4, r0
 81170e4:	4d06      	ldr	r5, [pc, #24]	@ (8117100 <_write_r+0x20>)
 81170e6:	4608      	mov	r0, r1
 81170e8:	4611      	mov	r1, r2
 81170ea:	2200      	movs	r2, #0
 81170ec:	602a      	str	r2, [r5, #0]
 81170ee:	461a      	mov	r2, r3
 81170f0:	f7e9 ffe2 	bl	81010b8 <_write>
 81170f4:	1c43      	adds	r3, r0, #1
 81170f6:	d102      	bne.n	81170fe <_write_r+0x1e>
 81170f8:	682b      	ldr	r3, [r5, #0]
 81170fa:	b103      	cbz	r3, 81170fe <_write_r+0x1e>
 81170fc:	6023      	str	r3, [r4, #0]
 81170fe:	bd38      	pop	{r3, r4, r5, pc}
 8117100:	200591a4 	.word	0x200591a4

08117104 <__errno>:
 8117104:	4b01      	ldr	r3, [pc, #4]	@ (811710c <__errno+0x8>)
 8117106:	6818      	ldr	r0, [r3, #0]
 8117108:	4770      	bx	lr
 811710a:	bf00      	nop
 811710c:	20050098 	.word	0x20050098

08117110 <__libc_init_array>:
 8117110:	b570      	push	{r4, r5, r6, lr}
 8117112:	4d0d      	ldr	r5, [pc, #52]	@ (8117148 <__libc_init_array+0x38>)
 8117114:	2600      	movs	r6, #0
 8117116:	4c0d      	ldr	r4, [pc, #52]	@ (811714c <__libc_init_array+0x3c>)
 8117118:	1b64      	subs	r4, r4, r5
 811711a:	10a4      	asrs	r4, r4, #2
 811711c:	42a6      	cmp	r6, r4
 811711e:	d109      	bne.n	8117134 <__libc_init_array+0x24>
 8117120:	4d0b      	ldr	r5, [pc, #44]	@ (8117150 <__libc_init_array+0x40>)
 8117122:	2600      	movs	r6, #0
 8117124:	4c0b      	ldr	r4, [pc, #44]	@ (8117154 <__libc_init_array+0x44>)
 8117126:	f000 fdc5 	bl	8117cb4 <_init>
 811712a:	1b64      	subs	r4, r4, r5
 811712c:	10a4      	asrs	r4, r4, #2
 811712e:	42a6      	cmp	r6, r4
 8117130:	d105      	bne.n	811713e <__libc_init_array+0x2e>
 8117132:	bd70      	pop	{r4, r5, r6, pc}
 8117134:	f855 3b04 	ldr.w	r3, [r5], #4
 8117138:	3601      	adds	r6, #1
 811713a:	4798      	blx	r3
 811713c:	e7ee      	b.n	811711c <__libc_init_array+0xc>
 811713e:	f855 3b04 	ldr.w	r3, [r5], #4
 8117142:	3601      	adds	r6, #1
 8117144:	4798      	blx	r3
 8117146:	e7f2      	b.n	811712e <__libc_init_array+0x1e>
 8117148:	08117f1c 	.word	0x08117f1c
 811714c:	08117f1c 	.word	0x08117f1c
 8117150:	08117f1c 	.word	0x08117f1c
 8117154:	08117f20 	.word	0x08117f20

08117158 <__retarget_lock_init_recursive>:
 8117158:	4770      	bx	lr

0811715a <__retarget_lock_acquire_recursive>:
 811715a:	4770      	bx	lr

0811715c <__retarget_lock_release_recursive>:
 811715c:	4770      	bx	lr

0811715e <memcpy>:
 811715e:	440a      	add	r2, r1
 8117160:	1e43      	subs	r3, r0, #1
 8117162:	4291      	cmp	r1, r2
 8117164:	d100      	bne.n	8117168 <memcpy+0xa>
 8117166:	4770      	bx	lr
 8117168:	b510      	push	{r4, lr}
 811716a:	f811 4b01 	ldrb.w	r4, [r1], #1
 811716e:	4291      	cmp	r1, r2
 8117170:	f803 4f01 	strb.w	r4, [r3, #1]!
 8117174:	d1f9      	bne.n	811716a <memcpy+0xc>
 8117176:	bd10      	pop	{r4, pc}

08117178 <__assert_func>:
 8117178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 811717a:	4614      	mov	r4, r2
 811717c:	461a      	mov	r2, r3
 811717e:	4b09      	ldr	r3, [pc, #36]	@ (81171a4 <__assert_func+0x2c>)
 8117180:	4605      	mov	r5, r0
 8117182:	681b      	ldr	r3, [r3, #0]
 8117184:	68d8      	ldr	r0, [r3, #12]
 8117186:	b954      	cbnz	r4, 811719e <__assert_func+0x26>
 8117188:	4b07      	ldr	r3, [pc, #28]	@ (81171a8 <__assert_func+0x30>)
 811718a:	461c      	mov	r4, r3
 811718c:	9100      	str	r1, [sp, #0]
 811718e:	4907      	ldr	r1, [pc, #28]	@ (81171ac <__assert_func+0x34>)
 8117190:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8117194:	462b      	mov	r3, r5
 8117196:	f000 fc8d 	bl	8117ab4 <fiprintf>
 811719a:	f000 fd3f 	bl	8117c1c <abort>
 811719e:	4b04      	ldr	r3, [pc, #16]	@ (81171b0 <__assert_func+0x38>)
 81171a0:	e7f4      	b.n	811718c <__assert_func+0x14>
 81171a2:	bf00      	nop
 81171a4:	20050098 	.word	0x20050098
 81171a8:	08117ede 	.word	0x08117ede
 81171ac:	08117eb0 	.word	0x08117eb0
 81171b0:	08117ea3 	.word	0x08117ea3

081171b4 <_free_r>:
 81171b4:	b538      	push	{r3, r4, r5, lr}
 81171b6:	4605      	mov	r5, r0
 81171b8:	2900      	cmp	r1, #0
 81171ba:	d041      	beq.n	8117240 <_free_r+0x8c>
 81171bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81171c0:	1f0c      	subs	r4, r1, #4
 81171c2:	2b00      	cmp	r3, #0
 81171c4:	bfb8      	it	lt
 81171c6:	18e4      	addlt	r4, r4, r3
 81171c8:	f000 f8e8 	bl	811739c <__malloc_lock>
 81171cc:	4a1d      	ldr	r2, [pc, #116]	@ (8117244 <_free_r+0x90>)
 81171ce:	6813      	ldr	r3, [r2, #0]
 81171d0:	b933      	cbnz	r3, 81171e0 <_free_r+0x2c>
 81171d2:	6063      	str	r3, [r4, #4]
 81171d4:	6014      	str	r4, [r2, #0]
 81171d6:	4628      	mov	r0, r5
 81171d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81171dc:	f000 b8e4 	b.w	81173a8 <__malloc_unlock>
 81171e0:	42a3      	cmp	r3, r4
 81171e2:	d908      	bls.n	81171f6 <_free_r+0x42>
 81171e4:	6820      	ldr	r0, [r4, #0]
 81171e6:	1821      	adds	r1, r4, r0
 81171e8:	428b      	cmp	r3, r1
 81171ea:	bf01      	itttt	eq
 81171ec:	6819      	ldreq	r1, [r3, #0]
 81171ee:	685b      	ldreq	r3, [r3, #4]
 81171f0:	1809      	addeq	r1, r1, r0
 81171f2:	6021      	streq	r1, [r4, #0]
 81171f4:	e7ed      	b.n	81171d2 <_free_r+0x1e>
 81171f6:	461a      	mov	r2, r3
 81171f8:	685b      	ldr	r3, [r3, #4]
 81171fa:	b10b      	cbz	r3, 8117200 <_free_r+0x4c>
 81171fc:	42a3      	cmp	r3, r4
 81171fe:	d9fa      	bls.n	81171f6 <_free_r+0x42>
 8117200:	6811      	ldr	r1, [r2, #0]
 8117202:	1850      	adds	r0, r2, r1
 8117204:	42a0      	cmp	r0, r4
 8117206:	d10b      	bne.n	8117220 <_free_r+0x6c>
 8117208:	6820      	ldr	r0, [r4, #0]
 811720a:	4401      	add	r1, r0
 811720c:	1850      	adds	r0, r2, r1
 811720e:	6011      	str	r1, [r2, #0]
 8117210:	4283      	cmp	r3, r0
 8117212:	d1e0      	bne.n	81171d6 <_free_r+0x22>
 8117214:	6818      	ldr	r0, [r3, #0]
 8117216:	685b      	ldr	r3, [r3, #4]
 8117218:	4408      	add	r0, r1
 811721a:	6053      	str	r3, [r2, #4]
 811721c:	6010      	str	r0, [r2, #0]
 811721e:	e7da      	b.n	81171d6 <_free_r+0x22>
 8117220:	d902      	bls.n	8117228 <_free_r+0x74>
 8117222:	230c      	movs	r3, #12
 8117224:	602b      	str	r3, [r5, #0]
 8117226:	e7d6      	b.n	81171d6 <_free_r+0x22>
 8117228:	6820      	ldr	r0, [r4, #0]
 811722a:	1821      	adds	r1, r4, r0
 811722c:	428b      	cmp	r3, r1
 811722e:	bf02      	ittt	eq
 8117230:	6819      	ldreq	r1, [r3, #0]
 8117232:	685b      	ldreq	r3, [r3, #4]
 8117234:	1809      	addeq	r1, r1, r0
 8117236:	6063      	str	r3, [r4, #4]
 8117238:	bf08      	it	eq
 811723a:	6021      	streq	r1, [r4, #0]
 811723c:	6054      	str	r4, [r2, #4]
 811723e:	e7ca      	b.n	81171d6 <_free_r+0x22>
 8117240:	bd38      	pop	{r3, r4, r5, pc}
 8117242:	bf00      	nop
 8117244:	200591b0 	.word	0x200591b0

08117248 <malloc>:
 8117248:	4b02      	ldr	r3, [pc, #8]	@ (8117254 <malloc+0xc>)
 811724a:	4601      	mov	r1, r0
 811724c:	6818      	ldr	r0, [r3, #0]
 811724e:	f000 b825 	b.w	811729c <_malloc_r>
 8117252:	bf00      	nop
 8117254:	20050098 	.word	0x20050098

08117258 <sbrk_aligned>:
 8117258:	b570      	push	{r4, r5, r6, lr}
 811725a:	4e0f      	ldr	r6, [pc, #60]	@ (8117298 <sbrk_aligned+0x40>)
 811725c:	460c      	mov	r4, r1
 811725e:	4605      	mov	r5, r0
 8117260:	6831      	ldr	r1, [r6, #0]
 8117262:	b911      	cbnz	r1, 811726a <sbrk_aligned+0x12>
 8117264:	f000 fcbc 	bl	8117be0 <_sbrk_r>
 8117268:	6030      	str	r0, [r6, #0]
 811726a:	4621      	mov	r1, r4
 811726c:	4628      	mov	r0, r5
 811726e:	f000 fcb7 	bl	8117be0 <_sbrk_r>
 8117272:	1c43      	adds	r3, r0, #1
 8117274:	d103      	bne.n	811727e <sbrk_aligned+0x26>
 8117276:	f04f 34ff 	mov.w	r4, #4294967295
 811727a:	4620      	mov	r0, r4
 811727c:	bd70      	pop	{r4, r5, r6, pc}
 811727e:	1cc4      	adds	r4, r0, #3
 8117280:	f024 0403 	bic.w	r4, r4, #3
 8117284:	42a0      	cmp	r0, r4
 8117286:	d0f8      	beq.n	811727a <sbrk_aligned+0x22>
 8117288:	1a21      	subs	r1, r4, r0
 811728a:	4628      	mov	r0, r5
 811728c:	f000 fca8 	bl	8117be0 <_sbrk_r>
 8117290:	3001      	adds	r0, #1
 8117292:	d1f2      	bne.n	811727a <sbrk_aligned+0x22>
 8117294:	e7ef      	b.n	8117276 <sbrk_aligned+0x1e>
 8117296:	bf00      	nop
 8117298:	200591ac 	.word	0x200591ac

0811729c <_malloc_r>:
 811729c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81172a0:	1ccd      	adds	r5, r1, #3
 81172a2:	4606      	mov	r6, r0
 81172a4:	f025 0503 	bic.w	r5, r5, #3
 81172a8:	3508      	adds	r5, #8
 81172aa:	2d0c      	cmp	r5, #12
 81172ac:	bf38      	it	cc
 81172ae:	250c      	movcc	r5, #12
 81172b0:	2d00      	cmp	r5, #0
 81172b2:	db01      	blt.n	81172b8 <_malloc_r+0x1c>
 81172b4:	42a9      	cmp	r1, r5
 81172b6:	d904      	bls.n	81172c2 <_malloc_r+0x26>
 81172b8:	230c      	movs	r3, #12
 81172ba:	6033      	str	r3, [r6, #0]
 81172bc:	2000      	movs	r0, #0
 81172be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81172c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8117398 <_malloc_r+0xfc>
 81172c6:	f000 f869 	bl	811739c <__malloc_lock>
 81172ca:	f8d8 3000 	ldr.w	r3, [r8]
 81172ce:	461c      	mov	r4, r3
 81172d0:	bb44      	cbnz	r4, 8117324 <_malloc_r+0x88>
 81172d2:	4629      	mov	r1, r5
 81172d4:	4630      	mov	r0, r6
 81172d6:	f7ff ffbf 	bl	8117258 <sbrk_aligned>
 81172da:	1c43      	adds	r3, r0, #1
 81172dc:	4604      	mov	r4, r0
 81172de:	d158      	bne.n	8117392 <_malloc_r+0xf6>
 81172e0:	f8d8 4000 	ldr.w	r4, [r8]
 81172e4:	4627      	mov	r7, r4
 81172e6:	2f00      	cmp	r7, #0
 81172e8:	d143      	bne.n	8117372 <_malloc_r+0xd6>
 81172ea:	2c00      	cmp	r4, #0
 81172ec:	d04b      	beq.n	8117386 <_malloc_r+0xea>
 81172ee:	6823      	ldr	r3, [r4, #0]
 81172f0:	4639      	mov	r1, r7
 81172f2:	4630      	mov	r0, r6
 81172f4:	eb04 0903 	add.w	r9, r4, r3
 81172f8:	f000 fc72 	bl	8117be0 <_sbrk_r>
 81172fc:	4581      	cmp	r9, r0
 81172fe:	d142      	bne.n	8117386 <_malloc_r+0xea>
 8117300:	6821      	ldr	r1, [r4, #0]
 8117302:	4630      	mov	r0, r6
 8117304:	1a6d      	subs	r5, r5, r1
 8117306:	4629      	mov	r1, r5
 8117308:	f7ff ffa6 	bl	8117258 <sbrk_aligned>
 811730c:	3001      	adds	r0, #1
 811730e:	d03a      	beq.n	8117386 <_malloc_r+0xea>
 8117310:	6823      	ldr	r3, [r4, #0]
 8117312:	442b      	add	r3, r5
 8117314:	6023      	str	r3, [r4, #0]
 8117316:	f8d8 3000 	ldr.w	r3, [r8]
 811731a:	685a      	ldr	r2, [r3, #4]
 811731c:	bb62      	cbnz	r2, 8117378 <_malloc_r+0xdc>
 811731e:	f8c8 7000 	str.w	r7, [r8]
 8117322:	e00f      	b.n	8117344 <_malloc_r+0xa8>
 8117324:	6822      	ldr	r2, [r4, #0]
 8117326:	1b52      	subs	r2, r2, r5
 8117328:	d420      	bmi.n	811736c <_malloc_r+0xd0>
 811732a:	2a0b      	cmp	r2, #11
 811732c:	d917      	bls.n	811735e <_malloc_r+0xc2>
 811732e:	1961      	adds	r1, r4, r5
 8117330:	42a3      	cmp	r3, r4
 8117332:	6025      	str	r5, [r4, #0]
 8117334:	bf18      	it	ne
 8117336:	6059      	strne	r1, [r3, #4]
 8117338:	6863      	ldr	r3, [r4, #4]
 811733a:	bf08      	it	eq
 811733c:	f8c8 1000 	streq.w	r1, [r8]
 8117340:	5162      	str	r2, [r4, r5]
 8117342:	604b      	str	r3, [r1, #4]
 8117344:	4630      	mov	r0, r6
 8117346:	f000 f82f 	bl	81173a8 <__malloc_unlock>
 811734a:	f104 000b 	add.w	r0, r4, #11
 811734e:	1d23      	adds	r3, r4, #4
 8117350:	f020 0007 	bic.w	r0, r0, #7
 8117354:	1ac2      	subs	r2, r0, r3
 8117356:	bf1c      	itt	ne
 8117358:	1a1b      	subne	r3, r3, r0
 811735a:	50a3      	strne	r3, [r4, r2]
 811735c:	e7af      	b.n	81172be <_malloc_r+0x22>
 811735e:	6862      	ldr	r2, [r4, #4]
 8117360:	42a3      	cmp	r3, r4
 8117362:	bf0c      	ite	eq
 8117364:	f8c8 2000 	streq.w	r2, [r8]
 8117368:	605a      	strne	r2, [r3, #4]
 811736a:	e7eb      	b.n	8117344 <_malloc_r+0xa8>
 811736c:	4623      	mov	r3, r4
 811736e:	6864      	ldr	r4, [r4, #4]
 8117370:	e7ae      	b.n	81172d0 <_malloc_r+0x34>
 8117372:	463c      	mov	r4, r7
 8117374:	687f      	ldr	r7, [r7, #4]
 8117376:	e7b6      	b.n	81172e6 <_malloc_r+0x4a>
 8117378:	461a      	mov	r2, r3
 811737a:	685b      	ldr	r3, [r3, #4]
 811737c:	42a3      	cmp	r3, r4
 811737e:	d1fb      	bne.n	8117378 <_malloc_r+0xdc>
 8117380:	2300      	movs	r3, #0
 8117382:	6053      	str	r3, [r2, #4]
 8117384:	e7de      	b.n	8117344 <_malloc_r+0xa8>
 8117386:	230c      	movs	r3, #12
 8117388:	4630      	mov	r0, r6
 811738a:	6033      	str	r3, [r6, #0]
 811738c:	f000 f80c 	bl	81173a8 <__malloc_unlock>
 8117390:	e794      	b.n	81172bc <_malloc_r+0x20>
 8117392:	6005      	str	r5, [r0, #0]
 8117394:	e7d6      	b.n	8117344 <_malloc_r+0xa8>
 8117396:	bf00      	nop
 8117398:	200591b0 	.word	0x200591b0

0811739c <__malloc_lock>:
 811739c:	4801      	ldr	r0, [pc, #4]	@ (81173a4 <__malloc_lock+0x8>)
 811739e:	f7ff bedc 	b.w	811715a <__retarget_lock_acquire_recursive>
 81173a2:	bf00      	nop
 81173a4:	200591a8 	.word	0x200591a8

081173a8 <__malloc_unlock>:
 81173a8:	4801      	ldr	r0, [pc, #4]	@ (81173b0 <__malloc_unlock+0x8>)
 81173aa:	f7ff bed7 	b.w	811715c <__retarget_lock_release_recursive>
 81173ae:	bf00      	nop
 81173b0:	200591a8 	.word	0x200591a8

081173b4 <__sfputc_r>:
 81173b4:	6893      	ldr	r3, [r2, #8]
 81173b6:	3b01      	subs	r3, #1
 81173b8:	2b00      	cmp	r3, #0
 81173ba:	6093      	str	r3, [r2, #8]
 81173bc:	b410      	push	{r4}
 81173be:	da08      	bge.n	81173d2 <__sfputc_r+0x1e>
 81173c0:	6994      	ldr	r4, [r2, #24]
 81173c2:	42a3      	cmp	r3, r4
 81173c4:	db01      	blt.n	81173ca <__sfputc_r+0x16>
 81173c6:	290a      	cmp	r1, #10
 81173c8:	d103      	bne.n	81173d2 <__sfputc_r+0x1e>
 81173ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 81173ce:	f7ff bd9c 	b.w	8116f0a <__swbuf_r>
 81173d2:	6813      	ldr	r3, [r2, #0]
 81173d4:	1c58      	adds	r0, r3, #1
 81173d6:	6010      	str	r0, [r2, #0]
 81173d8:	4608      	mov	r0, r1
 81173da:	7019      	strb	r1, [r3, #0]
 81173dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 81173e0:	4770      	bx	lr

081173e2 <__sfputs_r>:
 81173e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81173e4:	4606      	mov	r6, r0
 81173e6:	460f      	mov	r7, r1
 81173e8:	4614      	mov	r4, r2
 81173ea:	18d5      	adds	r5, r2, r3
 81173ec:	42ac      	cmp	r4, r5
 81173ee:	d101      	bne.n	81173f4 <__sfputs_r+0x12>
 81173f0:	2000      	movs	r0, #0
 81173f2:	e007      	b.n	8117404 <__sfputs_r+0x22>
 81173f4:	463a      	mov	r2, r7
 81173f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 81173fa:	4630      	mov	r0, r6
 81173fc:	f7ff ffda 	bl	81173b4 <__sfputc_r>
 8117400:	1c43      	adds	r3, r0, #1
 8117402:	d1f3      	bne.n	81173ec <__sfputs_r+0xa>
 8117404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08117408 <_vfiprintf_r>:
 8117408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811740c:	460d      	mov	r5, r1
 811740e:	b09d      	sub	sp, #116	@ 0x74
 8117410:	4614      	mov	r4, r2
 8117412:	4698      	mov	r8, r3
 8117414:	4606      	mov	r6, r0
 8117416:	b118      	cbz	r0, 8117420 <_vfiprintf_r+0x18>
 8117418:	6a03      	ldr	r3, [r0, #32]
 811741a:	b90b      	cbnz	r3, 8117420 <_vfiprintf_r+0x18>
 811741c:	f7ff fc8c 	bl	8116d38 <__sinit>
 8117420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8117422:	07d9      	lsls	r1, r3, #31
 8117424:	d405      	bmi.n	8117432 <_vfiprintf_r+0x2a>
 8117426:	89ab      	ldrh	r3, [r5, #12]
 8117428:	059a      	lsls	r2, r3, #22
 811742a:	d402      	bmi.n	8117432 <_vfiprintf_r+0x2a>
 811742c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811742e:	f7ff fe94 	bl	811715a <__retarget_lock_acquire_recursive>
 8117432:	89ab      	ldrh	r3, [r5, #12]
 8117434:	071b      	lsls	r3, r3, #28
 8117436:	d501      	bpl.n	811743c <_vfiprintf_r+0x34>
 8117438:	692b      	ldr	r3, [r5, #16]
 811743a:	b99b      	cbnz	r3, 8117464 <_vfiprintf_r+0x5c>
 811743c:	4629      	mov	r1, r5
 811743e:	4630      	mov	r0, r6
 8117440:	f7ff fda2 	bl	8116f88 <__swsetup_r>
 8117444:	b170      	cbz	r0, 8117464 <_vfiprintf_r+0x5c>
 8117446:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8117448:	07dc      	lsls	r4, r3, #31
 811744a:	d504      	bpl.n	8117456 <_vfiprintf_r+0x4e>
 811744c:	f04f 30ff 	mov.w	r0, #4294967295
 8117450:	b01d      	add	sp, #116	@ 0x74
 8117452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8117456:	89ab      	ldrh	r3, [r5, #12]
 8117458:	0598      	lsls	r0, r3, #22
 811745a:	d4f7      	bmi.n	811744c <_vfiprintf_r+0x44>
 811745c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811745e:	f7ff fe7d 	bl	811715c <__retarget_lock_release_recursive>
 8117462:	e7f3      	b.n	811744c <_vfiprintf_r+0x44>
 8117464:	2300      	movs	r3, #0
 8117466:	f8cd 800c 	str.w	r8, [sp, #12]
 811746a:	f04f 0901 	mov.w	r9, #1
 811746e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8117624 <_vfiprintf_r+0x21c>
 8117472:	9309      	str	r3, [sp, #36]	@ 0x24
 8117474:	2320      	movs	r3, #32
 8117476:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 811747a:	2330      	movs	r3, #48	@ 0x30
 811747c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8117480:	4623      	mov	r3, r4
 8117482:	469a      	mov	sl, r3
 8117484:	f813 2b01 	ldrb.w	r2, [r3], #1
 8117488:	b10a      	cbz	r2, 811748e <_vfiprintf_r+0x86>
 811748a:	2a25      	cmp	r2, #37	@ 0x25
 811748c:	d1f9      	bne.n	8117482 <_vfiprintf_r+0x7a>
 811748e:	ebba 0b04 	subs.w	fp, sl, r4
 8117492:	d00b      	beq.n	81174ac <_vfiprintf_r+0xa4>
 8117494:	465b      	mov	r3, fp
 8117496:	4622      	mov	r2, r4
 8117498:	4629      	mov	r1, r5
 811749a:	4630      	mov	r0, r6
 811749c:	f7ff ffa1 	bl	81173e2 <__sfputs_r>
 81174a0:	3001      	adds	r0, #1
 81174a2:	f000 80a7 	beq.w	81175f4 <_vfiprintf_r+0x1ec>
 81174a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81174a8:	445a      	add	r2, fp
 81174aa:	9209      	str	r2, [sp, #36]	@ 0x24
 81174ac:	f89a 3000 	ldrb.w	r3, [sl]
 81174b0:	2b00      	cmp	r3, #0
 81174b2:	f000 809f 	beq.w	81175f4 <_vfiprintf_r+0x1ec>
 81174b6:	2300      	movs	r3, #0
 81174b8:	f04f 32ff 	mov.w	r2, #4294967295
 81174bc:	f10a 0a01 	add.w	sl, sl, #1
 81174c0:	9304      	str	r3, [sp, #16]
 81174c2:	9307      	str	r3, [sp, #28]
 81174c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 81174c8:	931a      	str	r3, [sp, #104]	@ 0x68
 81174ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81174ce:	4654      	mov	r4, sl
 81174d0:	2205      	movs	r2, #5
 81174d2:	4854      	ldr	r0, [pc, #336]	@ (8117624 <_vfiprintf_r+0x21c>)
 81174d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 81174d8:	f000 fb92 	bl	8117c00 <memchr>
 81174dc:	9a04      	ldr	r2, [sp, #16]
 81174de:	b9d8      	cbnz	r0, 8117518 <_vfiprintf_r+0x110>
 81174e0:	06d1      	lsls	r1, r2, #27
 81174e2:	bf44      	itt	mi
 81174e4:	2320      	movmi	r3, #32
 81174e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81174ea:	0713      	lsls	r3, r2, #28
 81174ec:	bf44      	itt	mi
 81174ee:	232b      	movmi	r3, #43	@ 0x2b
 81174f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81174f4:	f89a 3000 	ldrb.w	r3, [sl]
 81174f8:	2b2a      	cmp	r3, #42	@ 0x2a
 81174fa:	d015      	beq.n	8117528 <_vfiprintf_r+0x120>
 81174fc:	9a07      	ldr	r2, [sp, #28]
 81174fe:	4654      	mov	r4, sl
 8117500:	2000      	movs	r0, #0
 8117502:	f04f 0c0a 	mov.w	ip, #10
 8117506:	4621      	mov	r1, r4
 8117508:	f811 3b01 	ldrb.w	r3, [r1], #1
 811750c:	3b30      	subs	r3, #48	@ 0x30
 811750e:	2b09      	cmp	r3, #9
 8117510:	d94b      	bls.n	81175aa <_vfiprintf_r+0x1a2>
 8117512:	b1b0      	cbz	r0, 8117542 <_vfiprintf_r+0x13a>
 8117514:	9207      	str	r2, [sp, #28]
 8117516:	e014      	b.n	8117542 <_vfiprintf_r+0x13a>
 8117518:	eba0 0308 	sub.w	r3, r0, r8
 811751c:	46a2      	mov	sl, r4
 811751e:	fa09 f303 	lsl.w	r3, r9, r3
 8117522:	4313      	orrs	r3, r2
 8117524:	9304      	str	r3, [sp, #16]
 8117526:	e7d2      	b.n	81174ce <_vfiprintf_r+0xc6>
 8117528:	9b03      	ldr	r3, [sp, #12]
 811752a:	1d19      	adds	r1, r3, #4
 811752c:	681b      	ldr	r3, [r3, #0]
 811752e:	2b00      	cmp	r3, #0
 8117530:	9103      	str	r1, [sp, #12]
 8117532:	bfbb      	ittet	lt
 8117534:	425b      	neglt	r3, r3
 8117536:	f042 0202 	orrlt.w	r2, r2, #2
 811753a:	9307      	strge	r3, [sp, #28]
 811753c:	9307      	strlt	r3, [sp, #28]
 811753e:	bfb8      	it	lt
 8117540:	9204      	strlt	r2, [sp, #16]
 8117542:	7823      	ldrb	r3, [r4, #0]
 8117544:	2b2e      	cmp	r3, #46	@ 0x2e
 8117546:	d10a      	bne.n	811755e <_vfiprintf_r+0x156>
 8117548:	7863      	ldrb	r3, [r4, #1]
 811754a:	2b2a      	cmp	r3, #42	@ 0x2a
 811754c:	d132      	bne.n	81175b4 <_vfiprintf_r+0x1ac>
 811754e:	9b03      	ldr	r3, [sp, #12]
 8117550:	3402      	adds	r4, #2
 8117552:	1d1a      	adds	r2, r3, #4
 8117554:	681b      	ldr	r3, [r3, #0]
 8117556:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 811755a:	9203      	str	r2, [sp, #12]
 811755c:	9305      	str	r3, [sp, #20]
 811755e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8117634 <_vfiprintf_r+0x22c>
 8117562:	2203      	movs	r2, #3
 8117564:	7821      	ldrb	r1, [r4, #0]
 8117566:	4650      	mov	r0, sl
 8117568:	f000 fb4a 	bl	8117c00 <memchr>
 811756c:	b138      	cbz	r0, 811757e <_vfiprintf_r+0x176>
 811756e:	eba0 000a 	sub.w	r0, r0, sl
 8117572:	2240      	movs	r2, #64	@ 0x40
 8117574:	9b04      	ldr	r3, [sp, #16]
 8117576:	3401      	adds	r4, #1
 8117578:	4082      	lsls	r2, r0
 811757a:	4313      	orrs	r3, r2
 811757c:	9304      	str	r3, [sp, #16]
 811757e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8117582:	2206      	movs	r2, #6
 8117584:	4828      	ldr	r0, [pc, #160]	@ (8117628 <_vfiprintf_r+0x220>)
 8117586:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 811758a:	f000 fb39 	bl	8117c00 <memchr>
 811758e:	2800      	cmp	r0, #0
 8117590:	d03f      	beq.n	8117612 <_vfiprintf_r+0x20a>
 8117592:	4b26      	ldr	r3, [pc, #152]	@ (811762c <_vfiprintf_r+0x224>)
 8117594:	bb1b      	cbnz	r3, 81175de <_vfiprintf_r+0x1d6>
 8117596:	9b03      	ldr	r3, [sp, #12]
 8117598:	3307      	adds	r3, #7
 811759a:	f023 0307 	bic.w	r3, r3, #7
 811759e:	3308      	adds	r3, #8
 81175a0:	9303      	str	r3, [sp, #12]
 81175a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81175a4:	443b      	add	r3, r7
 81175a6:	9309      	str	r3, [sp, #36]	@ 0x24
 81175a8:	e76a      	b.n	8117480 <_vfiprintf_r+0x78>
 81175aa:	fb0c 3202 	mla	r2, ip, r2, r3
 81175ae:	460c      	mov	r4, r1
 81175b0:	2001      	movs	r0, #1
 81175b2:	e7a8      	b.n	8117506 <_vfiprintf_r+0xfe>
 81175b4:	2300      	movs	r3, #0
 81175b6:	3401      	adds	r4, #1
 81175b8:	f04f 0c0a 	mov.w	ip, #10
 81175bc:	4619      	mov	r1, r3
 81175be:	9305      	str	r3, [sp, #20]
 81175c0:	4620      	mov	r0, r4
 81175c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 81175c6:	3a30      	subs	r2, #48	@ 0x30
 81175c8:	2a09      	cmp	r2, #9
 81175ca:	d903      	bls.n	81175d4 <_vfiprintf_r+0x1cc>
 81175cc:	2b00      	cmp	r3, #0
 81175ce:	d0c6      	beq.n	811755e <_vfiprintf_r+0x156>
 81175d0:	9105      	str	r1, [sp, #20]
 81175d2:	e7c4      	b.n	811755e <_vfiprintf_r+0x156>
 81175d4:	fb0c 2101 	mla	r1, ip, r1, r2
 81175d8:	4604      	mov	r4, r0
 81175da:	2301      	movs	r3, #1
 81175dc:	e7f0      	b.n	81175c0 <_vfiprintf_r+0x1b8>
 81175de:	ab03      	add	r3, sp, #12
 81175e0:	462a      	mov	r2, r5
 81175e2:	a904      	add	r1, sp, #16
 81175e4:	4630      	mov	r0, r6
 81175e6:	9300      	str	r3, [sp, #0]
 81175e8:	4b11      	ldr	r3, [pc, #68]	@ (8117630 <_vfiprintf_r+0x228>)
 81175ea:	f3af 8000 	nop.w
 81175ee:	4607      	mov	r7, r0
 81175f0:	1c78      	adds	r0, r7, #1
 81175f2:	d1d6      	bne.n	81175a2 <_vfiprintf_r+0x19a>
 81175f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 81175f6:	07d9      	lsls	r1, r3, #31
 81175f8:	d405      	bmi.n	8117606 <_vfiprintf_r+0x1fe>
 81175fa:	89ab      	ldrh	r3, [r5, #12]
 81175fc:	059a      	lsls	r2, r3, #22
 81175fe:	d402      	bmi.n	8117606 <_vfiprintf_r+0x1fe>
 8117600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8117602:	f7ff fdab 	bl	811715c <__retarget_lock_release_recursive>
 8117606:	89ab      	ldrh	r3, [r5, #12]
 8117608:	065b      	lsls	r3, r3, #25
 811760a:	f53f af1f 	bmi.w	811744c <_vfiprintf_r+0x44>
 811760e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8117610:	e71e      	b.n	8117450 <_vfiprintf_r+0x48>
 8117612:	ab03      	add	r3, sp, #12
 8117614:	462a      	mov	r2, r5
 8117616:	a904      	add	r1, sp, #16
 8117618:	4630      	mov	r0, r6
 811761a:	9300      	str	r3, [sp, #0]
 811761c:	4b04      	ldr	r3, [pc, #16]	@ (8117630 <_vfiprintf_r+0x228>)
 811761e:	f000 f87d 	bl	811771c <_printf_i>
 8117622:	e7e4      	b.n	81175ee <_vfiprintf_r+0x1e6>
 8117624:	08117edf 	.word	0x08117edf
 8117628:	08117ee9 	.word	0x08117ee9
 811762c:	00000000 	.word	0x00000000
 8117630:	081173e3 	.word	0x081173e3
 8117634:	08117ee5 	.word	0x08117ee5

08117638 <_printf_common>:
 8117638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 811763c:	4616      	mov	r6, r2
 811763e:	4698      	mov	r8, r3
 8117640:	688a      	ldr	r2, [r1, #8]
 8117642:	4607      	mov	r7, r0
 8117644:	690b      	ldr	r3, [r1, #16]
 8117646:	460c      	mov	r4, r1
 8117648:	f8dd 9020 	ldr.w	r9, [sp, #32]
 811764c:	4293      	cmp	r3, r2
 811764e:	bfb8      	it	lt
 8117650:	4613      	movlt	r3, r2
 8117652:	6033      	str	r3, [r6, #0]
 8117654:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8117658:	b10a      	cbz	r2, 811765e <_printf_common+0x26>
 811765a:	3301      	adds	r3, #1
 811765c:	6033      	str	r3, [r6, #0]
 811765e:	6823      	ldr	r3, [r4, #0]
 8117660:	0699      	lsls	r1, r3, #26
 8117662:	bf42      	ittt	mi
 8117664:	6833      	ldrmi	r3, [r6, #0]
 8117666:	3302      	addmi	r3, #2
 8117668:	6033      	strmi	r3, [r6, #0]
 811766a:	6825      	ldr	r5, [r4, #0]
 811766c:	f015 0506 	ands.w	r5, r5, #6
 8117670:	d106      	bne.n	8117680 <_printf_common+0x48>
 8117672:	f104 0a19 	add.w	sl, r4, #25
 8117676:	68e3      	ldr	r3, [r4, #12]
 8117678:	6832      	ldr	r2, [r6, #0]
 811767a:	1a9b      	subs	r3, r3, r2
 811767c:	42ab      	cmp	r3, r5
 811767e:	dc2b      	bgt.n	81176d8 <_printf_common+0xa0>
 8117680:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8117684:	6822      	ldr	r2, [r4, #0]
 8117686:	3b00      	subs	r3, #0
 8117688:	bf18      	it	ne
 811768a:	2301      	movne	r3, #1
 811768c:	0692      	lsls	r2, r2, #26
 811768e:	d430      	bmi.n	81176f2 <_printf_common+0xba>
 8117690:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8117694:	4641      	mov	r1, r8
 8117696:	4638      	mov	r0, r7
 8117698:	47c8      	blx	r9
 811769a:	3001      	adds	r0, #1
 811769c:	d023      	beq.n	81176e6 <_printf_common+0xae>
 811769e:	6823      	ldr	r3, [r4, #0]
 81176a0:	341a      	adds	r4, #26
 81176a2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 81176a6:	f003 0306 	and.w	r3, r3, #6
 81176aa:	2b04      	cmp	r3, #4
 81176ac:	bf0a      	itet	eq
 81176ae:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 81176b2:	2500      	movne	r5, #0
 81176b4:	6833      	ldreq	r3, [r6, #0]
 81176b6:	f04f 0600 	mov.w	r6, #0
 81176ba:	bf08      	it	eq
 81176bc:	1aed      	subeq	r5, r5, r3
 81176be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 81176c2:	bf08      	it	eq
 81176c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81176c8:	4293      	cmp	r3, r2
 81176ca:	bfc4      	itt	gt
 81176cc:	1a9b      	subgt	r3, r3, r2
 81176ce:	18ed      	addgt	r5, r5, r3
 81176d0:	42b5      	cmp	r5, r6
 81176d2:	d11a      	bne.n	811770a <_printf_common+0xd2>
 81176d4:	2000      	movs	r0, #0
 81176d6:	e008      	b.n	81176ea <_printf_common+0xb2>
 81176d8:	2301      	movs	r3, #1
 81176da:	4652      	mov	r2, sl
 81176dc:	4641      	mov	r1, r8
 81176de:	4638      	mov	r0, r7
 81176e0:	47c8      	blx	r9
 81176e2:	3001      	adds	r0, #1
 81176e4:	d103      	bne.n	81176ee <_printf_common+0xb6>
 81176e6:	f04f 30ff 	mov.w	r0, #4294967295
 81176ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81176ee:	3501      	adds	r5, #1
 81176f0:	e7c1      	b.n	8117676 <_printf_common+0x3e>
 81176f2:	18e1      	adds	r1, r4, r3
 81176f4:	1c5a      	adds	r2, r3, #1
 81176f6:	2030      	movs	r0, #48	@ 0x30
 81176f8:	3302      	adds	r3, #2
 81176fa:	4422      	add	r2, r4
 81176fc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8117700:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8117704:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8117708:	e7c2      	b.n	8117690 <_printf_common+0x58>
 811770a:	2301      	movs	r3, #1
 811770c:	4622      	mov	r2, r4
 811770e:	4641      	mov	r1, r8
 8117710:	4638      	mov	r0, r7
 8117712:	47c8      	blx	r9
 8117714:	3001      	adds	r0, #1
 8117716:	d0e6      	beq.n	81176e6 <_printf_common+0xae>
 8117718:	3601      	adds	r6, #1
 811771a:	e7d9      	b.n	81176d0 <_printf_common+0x98>

0811771c <_printf_i>:
 811771c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8117720:	7e0f      	ldrb	r7, [r1, #24]
 8117722:	4691      	mov	r9, r2
 8117724:	4680      	mov	r8, r0
 8117726:	460c      	mov	r4, r1
 8117728:	2f78      	cmp	r7, #120	@ 0x78
 811772a:	469a      	mov	sl, r3
 811772c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 811772e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8117732:	d807      	bhi.n	8117744 <_printf_i+0x28>
 8117734:	2f62      	cmp	r7, #98	@ 0x62
 8117736:	d80a      	bhi.n	811774e <_printf_i+0x32>
 8117738:	2f00      	cmp	r7, #0
 811773a:	f000 80d2 	beq.w	81178e2 <_printf_i+0x1c6>
 811773e:	2f58      	cmp	r7, #88	@ 0x58
 8117740:	f000 80b9 	beq.w	81178b6 <_printf_i+0x19a>
 8117744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8117748:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 811774c:	e03a      	b.n	81177c4 <_printf_i+0xa8>
 811774e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8117752:	2b15      	cmp	r3, #21
 8117754:	d8f6      	bhi.n	8117744 <_printf_i+0x28>
 8117756:	a101      	add	r1, pc, #4	@ (adr r1, 811775c <_printf_i+0x40>)
 8117758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 811775c:	081177b5 	.word	0x081177b5
 8117760:	081177c9 	.word	0x081177c9
 8117764:	08117745 	.word	0x08117745
 8117768:	08117745 	.word	0x08117745
 811776c:	08117745 	.word	0x08117745
 8117770:	08117745 	.word	0x08117745
 8117774:	081177c9 	.word	0x081177c9
 8117778:	08117745 	.word	0x08117745
 811777c:	08117745 	.word	0x08117745
 8117780:	08117745 	.word	0x08117745
 8117784:	08117745 	.word	0x08117745
 8117788:	081178c9 	.word	0x081178c9
 811778c:	081177f3 	.word	0x081177f3
 8117790:	08117883 	.word	0x08117883
 8117794:	08117745 	.word	0x08117745
 8117798:	08117745 	.word	0x08117745
 811779c:	081178eb 	.word	0x081178eb
 81177a0:	08117745 	.word	0x08117745
 81177a4:	081177f3 	.word	0x081177f3
 81177a8:	08117745 	.word	0x08117745
 81177ac:	08117745 	.word	0x08117745
 81177b0:	0811788b 	.word	0x0811788b
 81177b4:	6833      	ldr	r3, [r6, #0]
 81177b6:	1d1a      	adds	r2, r3, #4
 81177b8:	681b      	ldr	r3, [r3, #0]
 81177ba:	6032      	str	r2, [r6, #0]
 81177bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 81177c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 81177c4:	2301      	movs	r3, #1
 81177c6:	e09d      	b.n	8117904 <_printf_i+0x1e8>
 81177c8:	6833      	ldr	r3, [r6, #0]
 81177ca:	6820      	ldr	r0, [r4, #0]
 81177cc:	1d19      	adds	r1, r3, #4
 81177ce:	6031      	str	r1, [r6, #0]
 81177d0:	0606      	lsls	r6, r0, #24
 81177d2:	d501      	bpl.n	81177d8 <_printf_i+0xbc>
 81177d4:	681d      	ldr	r5, [r3, #0]
 81177d6:	e003      	b.n	81177e0 <_printf_i+0xc4>
 81177d8:	0645      	lsls	r5, r0, #25
 81177da:	d5fb      	bpl.n	81177d4 <_printf_i+0xb8>
 81177dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 81177e0:	2d00      	cmp	r5, #0
 81177e2:	da03      	bge.n	81177ec <_printf_i+0xd0>
 81177e4:	232d      	movs	r3, #45	@ 0x2d
 81177e6:	426d      	negs	r5, r5
 81177e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81177ec:	4859      	ldr	r0, [pc, #356]	@ (8117954 <_printf_i+0x238>)
 81177ee:	230a      	movs	r3, #10
 81177f0:	e011      	b.n	8117816 <_printf_i+0xfa>
 81177f2:	6821      	ldr	r1, [r4, #0]
 81177f4:	6833      	ldr	r3, [r6, #0]
 81177f6:	0608      	lsls	r0, r1, #24
 81177f8:	f853 5b04 	ldr.w	r5, [r3], #4
 81177fc:	d402      	bmi.n	8117804 <_printf_i+0xe8>
 81177fe:	0649      	lsls	r1, r1, #25
 8117800:	bf48      	it	mi
 8117802:	b2ad      	uxthmi	r5, r5
 8117804:	2f6f      	cmp	r7, #111	@ 0x6f
 8117806:	6033      	str	r3, [r6, #0]
 8117808:	4852      	ldr	r0, [pc, #328]	@ (8117954 <_printf_i+0x238>)
 811780a:	bf14      	ite	ne
 811780c:	230a      	movne	r3, #10
 811780e:	2308      	moveq	r3, #8
 8117810:	2100      	movs	r1, #0
 8117812:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8117816:	6866      	ldr	r6, [r4, #4]
 8117818:	2e00      	cmp	r6, #0
 811781a:	60a6      	str	r6, [r4, #8]
 811781c:	bfa2      	ittt	ge
 811781e:	6821      	ldrge	r1, [r4, #0]
 8117820:	f021 0104 	bicge.w	r1, r1, #4
 8117824:	6021      	strge	r1, [r4, #0]
 8117826:	b90d      	cbnz	r5, 811782c <_printf_i+0x110>
 8117828:	2e00      	cmp	r6, #0
 811782a:	d04b      	beq.n	81178c4 <_printf_i+0x1a8>
 811782c:	4616      	mov	r6, r2
 811782e:	fbb5 f1f3 	udiv	r1, r5, r3
 8117832:	fb03 5711 	mls	r7, r3, r1, r5
 8117836:	5dc7      	ldrb	r7, [r0, r7]
 8117838:	f806 7d01 	strb.w	r7, [r6, #-1]!
 811783c:	462f      	mov	r7, r5
 811783e:	460d      	mov	r5, r1
 8117840:	42bb      	cmp	r3, r7
 8117842:	d9f4      	bls.n	811782e <_printf_i+0x112>
 8117844:	2b08      	cmp	r3, #8
 8117846:	d10b      	bne.n	8117860 <_printf_i+0x144>
 8117848:	6823      	ldr	r3, [r4, #0]
 811784a:	07df      	lsls	r7, r3, #31
 811784c:	d508      	bpl.n	8117860 <_printf_i+0x144>
 811784e:	6923      	ldr	r3, [r4, #16]
 8117850:	6861      	ldr	r1, [r4, #4]
 8117852:	4299      	cmp	r1, r3
 8117854:	bfde      	ittt	le
 8117856:	2330      	movle	r3, #48	@ 0x30
 8117858:	f806 3c01 	strble.w	r3, [r6, #-1]
 811785c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8117860:	1b92      	subs	r2, r2, r6
 8117862:	6122      	str	r2, [r4, #16]
 8117864:	464b      	mov	r3, r9
 8117866:	aa03      	add	r2, sp, #12
 8117868:	4621      	mov	r1, r4
 811786a:	4640      	mov	r0, r8
 811786c:	f8cd a000 	str.w	sl, [sp]
 8117870:	f7ff fee2 	bl	8117638 <_printf_common>
 8117874:	3001      	adds	r0, #1
 8117876:	d14a      	bne.n	811790e <_printf_i+0x1f2>
 8117878:	f04f 30ff 	mov.w	r0, #4294967295
 811787c:	b004      	add	sp, #16
 811787e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8117882:	6823      	ldr	r3, [r4, #0]
 8117884:	f043 0320 	orr.w	r3, r3, #32
 8117888:	6023      	str	r3, [r4, #0]
 811788a:	2778      	movs	r7, #120	@ 0x78
 811788c:	4832      	ldr	r0, [pc, #200]	@ (8117958 <_printf_i+0x23c>)
 811788e:	6823      	ldr	r3, [r4, #0]
 8117890:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8117894:	061f      	lsls	r7, r3, #24
 8117896:	6831      	ldr	r1, [r6, #0]
 8117898:	f851 5b04 	ldr.w	r5, [r1], #4
 811789c:	d402      	bmi.n	81178a4 <_printf_i+0x188>
 811789e:	065f      	lsls	r7, r3, #25
 81178a0:	bf48      	it	mi
 81178a2:	b2ad      	uxthmi	r5, r5
 81178a4:	6031      	str	r1, [r6, #0]
 81178a6:	07d9      	lsls	r1, r3, #31
 81178a8:	bf44      	itt	mi
 81178aa:	f043 0320 	orrmi.w	r3, r3, #32
 81178ae:	6023      	strmi	r3, [r4, #0]
 81178b0:	b11d      	cbz	r5, 81178ba <_printf_i+0x19e>
 81178b2:	2310      	movs	r3, #16
 81178b4:	e7ac      	b.n	8117810 <_printf_i+0xf4>
 81178b6:	4827      	ldr	r0, [pc, #156]	@ (8117954 <_printf_i+0x238>)
 81178b8:	e7e9      	b.n	811788e <_printf_i+0x172>
 81178ba:	6823      	ldr	r3, [r4, #0]
 81178bc:	f023 0320 	bic.w	r3, r3, #32
 81178c0:	6023      	str	r3, [r4, #0]
 81178c2:	e7f6      	b.n	81178b2 <_printf_i+0x196>
 81178c4:	4616      	mov	r6, r2
 81178c6:	e7bd      	b.n	8117844 <_printf_i+0x128>
 81178c8:	6833      	ldr	r3, [r6, #0]
 81178ca:	6825      	ldr	r5, [r4, #0]
 81178cc:	1d18      	adds	r0, r3, #4
 81178ce:	6961      	ldr	r1, [r4, #20]
 81178d0:	6030      	str	r0, [r6, #0]
 81178d2:	062e      	lsls	r6, r5, #24
 81178d4:	681b      	ldr	r3, [r3, #0]
 81178d6:	d501      	bpl.n	81178dc <_printf_i+0x1c0>
 81178d8:	6019      	str	r1, [r3, #0]
 81178da:	e002      	b.n	81178e2 <_printf_i+0x1c6>
 81178dc:	0668      	lsls	r0, r5, #25
 81178de:	d5fb      	bpl.n	81178d8 <_printf_i+0x1bc>
 81178e0:	8019      	strh	r1, [r3, #0]
 81178e2:	2300      	movs	r3, #0
 81178e4:	4616      	mov	r6, r2
 81178e6:	6123      	str	r3, [r4, #16]
 81178e8:	e7bc      	b.n	8117864 <_printf_i+0x148>
 81178ea:	6833      	ldr	r3, [r6, #0]
 81178ec:	2100      	movs	r1, #0
 81178ee:	1d1a      	adds	r2, r3, #4
 81178f0:	6032      	str	r2, [r6, #0]
 81178f2:	681e      	ldr	r6, [r3, #0]
 81178f4:	6862      	ldr	r2, [r4, #4]
 81178f6:	4630      	mov	r0, r6
 81178f8:	f000 f982 	bl	8117c00 <memchr>
 81178fc:	b108      	cbz	r0, 8117902 <_printf_i+0x1e6>
 81178fe:	1b80      	subs	r0, r0, r6
 8117900:	6060      	str	r0, [r4, #4]
 8117902:	6863      	ldr	r3, [r4, #4]
 8117904:	6123      	str	r3, [r4, #16]
 8117906:	2300      	movs	r3, #0
 8117908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 811790c:	e7aa      	b.n	8117864 <_printf_i+0x148>
 811790e:	6923      	ldr	r3, [r4, #16]
 8117910:	4632      	mov	r2, r6
 8117912:	4649      	mov	r1, r9
 8117914:	4640      	mov	r0, r8
 8117916:	47d0      	blx	sl
 8117918:	3001      	adds	r0, #1
 811791a:	d0ad      	beq.n	8117878 <_printf_i+0x15c>
 811791c:	6823      	ldr	r3, [r4, #0]
 811791e:	079b      	lsls	r3, r3, #30
 8117920:	d413      	bmi.n	811794a <_printf_i+0x22e>
 8117922:	68e0      	ldr	r0, [r4, #12]
 8117924:	9b03      	ldr	r3, [sp, #12]
 8117926:	4298      	cmp	r0, r3
 8117928:	bfb8      	it	lt
 811792a:	4618      	movlt	r0, r3
 811792c:	e7a6      	b.n	811787c <_printf_i+0x160>
 811792e:	2301      	movs	r3, #1
 8117930:	4632      	mov	r2, r6
 8117932:	4649      	mov	r1, r9
 8117934:	4640      	mov	r0, r8
 8117936:	47d0      	blx	sl
 8117938:	3001      	adds	r0, #1
 811793a:	d09d      	beq.n	8117878 <_printf_i+0x15c>
 811793c:	3501      	adds	r5, #1
 811793e:	68e3      	ldr	r3, [r4, #12]
 8117940:	9903      	ldr	r1, [sp, #12]
 8117942:	1a5b      	subs	r3, r3, r1
 8117944:	42ab      	cmp	r3, r5
 8117946:	dcf2      	bgt.n	811792e <_printf_i+0x212>
 8117948:	e7eb      	b.n	8117922 <_printf_i+0x206>
 811794a:	2500      	movs	r5, #0
 811794c:	f104 0619 	add.w	r6, r4, #25
 8117950:	e7f5      	b.n	811793e <_printf_i+0x222>
 8117952:	bf00      	nop
 8117954:	08117ef0 	.word	0x08117ef0
 8117958:	08117f01 	.word	0x08117f01

0811795c <__sflush_r>:
 811795c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8117960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8117964:	0716      	lsls	r6, r2, #28
 8117966:	4605      	mov	r5, r0
 8117968:	460c      	mov	r4, r1
 811796a:	d454      	bmi.n	8117a16 <__sflush_r+0xba>
 811796c:	684b      	ldr	r3, [r1, #4]
 811796e:	2b00      	cmp	r3, #0
 8117970:	dc02      	bgt.n	8117978 <__sflush_r+0x1c>
 8117972:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8117974:	2b00      	cmp	r3, #0
 8117976:	dd48      	ble.n	8117a0a <__sflush_r+0xae>
 8117978:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 811797a:	2e00      	cmp	r6, #0
 811797c:	d045      	beq.n	8117a0a <__sflush_r+0xae>
 811797e:	2300      	movs	r3, #0
 8117980:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8117984:	682f      	ldr	r7, [r5, #0]
 8117986:	6a21      	ldr	r1, [r4, #32]
 8117988:	602b      	str	r3, [r5, #0]
 811798a:	d030      	beq.n	81179ee <__sflush_r+0x92>
 811798c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 811798e:	89a3      	ldrh	r3, [r4, #12]
 8117990:	0759      	lsls	r1, r3, #29
 8117992:	d505      	bpl.n	81179a0 <__sflush_r+0x44>
 8117994:	6863      	ldr	r3, [r4, #4]
 8117996:	1ad2      	subs	r2, r2, r3
 8117998:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 811799a:	b10b      	cbz	r3, 81179a0 <__sflush_r+0x44>
 811799c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 811799e:	1ad2      	subs	r2, r2, r3
 81179a0:	2300      	movs	r3, #0
 81179a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81179a4:	6a21      	ldr	r1, [r4, #32]
 81179a6:	4628      	mov	r0, r5
 81179a8:	47b0      	blx	r6
 81179aa:	1c43      	adds	r3, r0, #1
 81179ac:	89a3      	ldrh	r3, [r4, #12]
 81179ae:	d106      	bne.n	81179be <__sflush_r+0x62>
 81179b0:	6829      	ldr	r1, [r5, #0]
 81179b2:	291d      	cmp	r1, #29
 81179b4:	d82b      	bhi.n	8117a0e <__sflush_r+0xb2>
 81179b6:	4a2a      	ldr	r2, [pc, #168]	@ (8117a60 <__sflush_r+0x104>)
 81179b8:	410a      	asrs	r2, r1
 81179ba:	07d6      	lsls	r6, r2, #31
 81179bc:	d427      	bmi.n	8117a0e <__sflush_r+0xb2>
 81179be:	2200      	movs	r2, #0
 81179c0:	04d9      	lsls	r1, r3, #19
 81179c2:	6062      	str	r2, [r4, #4]
 81179c4:	6922      	ldr	r2, [r4, #16]
 81179c6:	6022      	str	r2, [r4, #0]
 81179c8:	d504      	bpl.n	81179d4 <__sflush_r+0x78>
 81179ca:	1c42      	adds	r2, r0, #1
 81179cc:	d101      	bne.n	81179d2 <__sflush_r+0x76>
 81179ce:	682b      	ldr	r3, [r5, #0]
 81179d0:	b903      	cbnz	r3, 81179d4 <__sflush_r+0x78>
 81179d2:	6560      	str	r0, [r4, #84]	@ 0x54
 81179d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81179d6:	602f      	str	r7, [r5, #0]
 81179d8:	b1b9      	cbz	r1, 8117a0a <__sflush_r+0xae>
 81179da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81179de:	4299      	cmp	r1, r3
 81179e0:	d002      	beq.n	81179e8 <__sflush_r+0x8c>
 81179e2:	4628      	mov	r0, r5
 81179e4:	f7ff fbe6 	bl	81171b4 <_free_r>
 81179e8:	2300      	movs	r3, #0
 81179ea:	6363      	str	r3, [r4, #52]	@ 0x34
 81179ec:	e00d      	b.n	8117a0a <__sflush_r+0xae>
 81179ee:	2301      	movs	r3, #1
 81179f0:	4628      	mov	r0, r5
 81179f2:	47b0      	blx	r6
 81179f4:	4602      	mov	r2, r0
 81179f6:	1c50      	adds	r0, r2, #1
 81179f8:	d1c9      	bne.n	811798e <__sflush_r+0x32>
 81179fa:	682b      	ldr	r3, [r5, #0]
 81179fc:	2b00      	cmp	r3, #0
 81179fe:	d0c6      	beq.n	811798e <__sflush_r+0x32>
 8117a00:	2b1d      	cmp	r3, #29
 8117a02:	d001      	beq.n	8117a08 <__sflush_r+0xac>
 8117a04:	2b16      	cmp	r3, #22
 8117a06:	d11d      	bne.n	8117a44 <__sflush_r+0xe8>
 8117a08:	602f      	str	r7, [r5, #0]
 8117a0a:	2000      	movs	r0, #0
 8117a0c:	e021      	b.n	8117a52 <__sflush_r+0xf6>
 8117a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8117a12:	b21b      	sxth	r3, r3
 8117a14:	e01a      	b.n	8117a4c <__sflush_r+0xf0>
 8117a16:	690f      	ldr	r7, [r1, #16]
 8117a18:	2f00      	cmp	r7, #0
 8117a1a:	d0f6      	beq.n	8117a0a <__sflush_r+0xae>
 8117a1c:	0793      	lsls	r3, r2, #30
 8117a1e:	680e      	ldr	r6, [r1, #0]
 8117a20:	600f      	str	r7, [r1, #0]
 8117a22:	bf0c      	ite	eq
 8117a24:	694b      	ldreq	r3, [r1, #20]
 8117a26:	2300      	movne	r3, #0
 8117a28:	eba6 0807 	sub.w	r8, r6, r7
 8117a2c:	608b      	str	r3, [r1, #8]
 8117a2e:	f1b8 0f00 	cmp.w	r8, #0
 8117a32:	ddea      	ble.n	8117a0a <__sflush_r+0xae>
 8117a34:	4643      	mov	r3, r8
 8117a36:	463a      	mov	r2, r7
 8117a38:	6a21      	ldr	r1, [r4, #32]
 8117a3a:	4628      	mov	r0, r5
 8117a3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8117a3e:	47b0      	blx	r6
 8117a40:	2800      	cmp	r0, #0
 8117a42:	dc08      	bgt.n	8117a56 <__sflush_r+0xfa>
 8117a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8117a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8117a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8117a50:	81a3      	strh	r3, [r4, #12]
 8117a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8117a56:	4407      	add	r7, r0
 8117a58:	eba8 0800 	sub.w	r8, r8, r0
 8117a5c:	e7e7      	b.n	8117a2e <__sflush_r+0xd2>
 8117a5e:	bf00      	nop
 8117a60:	dfbffffe 	.word	0xdfbffffe

08117a64 <_fflush_r>:
 8117a64:	b538      	push	{r3, r4, r5, lr}
 8117a66:	690b      	ldr	r3, [r1, #16]
 8117a68:	4605      	mov	r5, r0
 8117a6a:	460c      	mov	r4, r1
 8117a6c:	b913      	cbnz	r3, 8117a74 <_fflush_r+0x10>
 8117a6e:	2500      	movs	r5, #0
 8117a70:	4628      	mov	r0, r5
 8117a72:	bd38      	pop	{r3, r4, r5, pc}
 8117a74:	b118      	cbz	r0, 8117a7e <_fflush_r+0x1a>
 8117a76:	6a03      	ldr	r3, [r0, #32]
 8117a78:	b90b      	cbnz	r3, 8117a7e <_fflush_r+0x1a>
 8117a7a:	f7ff f95d 	bl	8116d38 <__sinit>
 8117a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8117a82:	2b00      	cmp	r3, #0
 8117a84:	d0f3      	beq.n	8117a6e <_fflush_r+0xa>
 8117a86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8117a88:	07d0      	lsls	r0, r2, #31
 8117a8a:	d404      	bmi.n	8117a96 <_fflush_r+0x32>
 8117a8c:	0599      	lsls	r1, r3, #22
 8117a8e:	d402      	bmi.n	8117a96 <_fflush_r+0x32>
 8117a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8117a92:	f7ff fb62 	bl	811715a <__retarget_lock_acquire_recursive>
 8117a96:	4628      	mov	r0, r5
 8117a98:	4621      	mov	r1, r4
 8117a9a:	f7ff ff5f 	bl	811795c <__sflush_r>
 8117a9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8117aa0:	4605      	mov	r5, r0
 8117aa2:	07da      	lsls	r2, r3, #31
 8117aa4:	d4e4      	bmi.n	8117a70 <_fflush_r+0xc>
 8117aa6:	89a3      	ldrh	r3, [r4, #12]
 8117aa8:	059b      	lsls	r3, r3, #22
 8117aaa:	d4e1      	bmi.n	8117a70 <_fflush_r+0xc>
 8117aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8117aae:	f7ff fb55 	bl	811715c <__retarget_lock_release_recursive>
 8117ab2:	e7dd      	b.n	8117a70 <_fflush_r+0xc>

08117ab4 <fiprintf>:
 8117ab4:	b40e      	push	{r1, r2, r3}
 8117ab6:	b503      	push	{r0, r1, lr}
 8117ab8:	ab03      	add	r3, sp, #12
 8117aba:	4601      	mov	r1, r0
 8117abc:	4805      	ldr	r0, [pc, #20]	@ (8117ad4 <fiprintf+0x20>)
 8117abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8117ac2:	6800      	ldr	r0, [r0, #0]
 8117ac4:	9301      	str	r3, [sp, #4]
 8117ac6:	f7ff fc9f 	bl	8117408 <_vfiprintf_r>
 8117aca:	b002      	add	sp, #8
 8117acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8117ad0:	b003      	add	sp, #12
 8117ad2:	4770      	bx	lr
 8117ad4:	20050098 	.word	0x20050098

08117ad8 <__swhatbuf_r>:
 8117ad8:	b570      	push	{r4, r5, r6, lr}
 8117ada:	460c      	mov	r4, r1
 8117adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8117ae0:	b096      	sub	sp, #88	@ 0x58
 8117ae2:	4615      	mov	r5, r2
 8117ae4:	2900      	cmp	r1, #0
 8117ae6:	461e      	mov	r6, r3
 8117ae8:	da0c      	bge.n	8117b04 <__swhatbuf_r+0x2c>
 8117aea:	89a3      	ldrh	r3, [r4, #12]
 8117aec:	2100      	movs	r1, #0
 8117aee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8117af2:	bf14      	ite	ne
 8117af4:	2340      	movne	r3, #64	@ 0x40
 8117af6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8117afa:	2000      	movs	r0, #0
 8117afc:	6031      	str	r1, [r6, #0]
 8117afe:	602b      	str	r3, [r5, #0]
 8117b00:	b016      	add	sp, #88	@ 0x58
 8117b02:	bd70      	pop	{r4, r5, r6, pc}
 8117b04:	466a      	mov	r2, sp
 8117b06:	f000 f849 	bl	8117b9c <_fstat_r>
 8117b0a:	2800      	cmp	r0, #0
 8117b0c:	dbed      	blt.n	8117aea <__swhatbuf_r+0x12>
 8117b0e:	9901      	ldr	r1, [sp, #4]
 8117b10:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8117b14:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8117b18:	4259      	negs	r1, r3
 8117b1a:	4159      	adcs	r1, r3
 8117b1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8117b20:	e7eb      	b.n	8117afa <__swhatbuf_r+0x22>

08117b22 <__smakebuf_r>:
 8117b22:	898b      	ldrh	r3, [r1, #12]
 8117b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8117b26:	079d      	lsls	r5, r3, #30
 8117b28:	4606      	mov	r6, r0
 8117b2a:	460c      	mov	r4, r1
 8117b2c:	d507      	bpl.n	8117b3e <__smakebuf_r+0x1c>
 8117b2e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8117b32:	6023      	str	r3, [r4, #0]
 8117b34:	6123      	str	r3, [r4, #16]
 8117b36:	2301      	movs	r3, #1
 8117b38:	6163      	str	r3, [r4, #20]
 8117b3a:	b003      	add	sp, #12
 8117b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8117b3e:	ab01      	add	r3, sp, #4
 8117b40:	466a      	mov	r2, sp
 8117b42:	f7ff ffc9 	bl	8117ad8 <__swhatbuf_r>
 8117b46:	9f00      	ldr	r7, [sp, #0]
 8117b48:	4605      	mov	r5, r0
 8117b4a:	4630      	mov	r0, r6
 8117b4c:	4639      	mov	r1, r7
 8117b4e:	f7ff fba5 	bl	811729c <_malloc_r>
 8117b52:	b948      	cbnz	r0, 8117b68 <__smakebuf_r+0x46>
 8117b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8117b58:	059a      	lsls	r2, r3, #22
 8117b5a:	d4ee      	bmi.n	8117b3a <__smakebuf_r+0x18>
 8117b5c:	f023 0303 	bic.w	r3, r3, #3
 8117b60:	f043 0302 	orr.w	r3, r3, #2
 8117b64:	81a3      	strh	r3, [r4, #12]
 8117b66:	e7e2      	b.n	8117b2e <__smakebuf_r+0xc>
 8117b68:	89a3      	ldrh	r3, [r4, #12]
 8117b6a:	6020      	str	r0, [r4, #0]
 8117b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8117b70:	81a3      	strh	r3, [r4, #12]
 8117b72:	9b01      	ldr	r3, [sp, #4]
 8117b74:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8117b78:	b15b      	cbz	r3, 8117b92 <__smakebuf_r+0x70>
 8117b7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8117b7e:	4630      	mov	r0, r6
 8117b80:	f000 f81e 	bl	8117bc0 <_isatty_r>
 8117b84:	b128      	cbz	r0, 8117b92 <__smakebuf_r+0x70>
 8117b86:	89a3      	ldrh	r3, [r4, #12]
 8117b88:	f023 0303 	bic.w	r3, r3, #3
 8117b8c:	f043 0301 	orr.w	r3, r3, #1
 8117b90:	81a3      	strh	r3, [r4, #12]
 8117b92:	89a3      	ldrh	r3, [r4, #12]
 8117b94:	431d      	orrs	r5, r3
 8117b96:	81a5      	strh	r5, [r4, #12]
 8117b98:	e7cf      	b.n	8117b3a <__smakebuf_r+0x18>
	...

08117b9c <_fstat_r>:
 8117b9c:	b538      	push	{r3, r4, r5, lr}
 8117b9e:	2300      	movs	r3, #0
 8117ba0:	4d06      	ldr	r5, [pc, #24]	@ (8117bbc <_fstat_r+0x20>)
 8117ba2:	4604      	mov	r4, r0
 8117ba4:	4608      	mov	r0, r1
 8117ba6:	4611      	mov	r1, r2
 8117ba8:	602b      	str	r3, [r5, #0]
 8117baa:	f7e9 faad 	bl	8101108 <_fstat>
 8117bae:	1c43      	adds	r3, r0, #1
 8117bb0:	d102      	bne.n	8117bb8 <_fstat_r+0x1c>
 8117bb2:	682b      	ldr	r3, [r5, #0]
 8117bb4:	b103      	cbz	r3, 8117bb8 <_fstat_r+0x1c>
 8117bb6:	6023      	str	r3, [r4, #0]
 8117bb8:	bd38      	pop	{r3, r4, r5, pc}
 8117bba:	bf00      	nop
 8117bbc:	200591a4 	.word	0x200591a4

08117bc0 <_isatty_r>:
 8117bc0:	b538      	push	{r3, r4, r5, lr}
 8117bc2:	2300      	movs	r3, #0
 8117bc4:	4d05      	ldr	r5, [pc, #20]	@ (8117bdc <_isatty_r+0x1c>)
 8117bc6:	4604      	mov	r4, r0
 8117bc8:	4608      	mov	r0, r1
 8117bca:	602b      	str	r3, [r5, #0]
 8117bcc:	f7e9 faac 	bl	8101128 <_isatty>
 8117bd0:	1c43      	adds	r3, r0, #1
 8117bd2:	d102      	bne.n	8117bda <_isatty_r+0x1a>
 8117bd4:	682b      	ldr	r3, [r5, #0]
 8117bd6:	b103      	cbz	r3, 8117bda <_isatty_r+0x1a>
 8117bd8:	6023      	str	r3, [r4, #0]
 8117bda:	bd38      	pop	{r3, r4, r5, pc}
 8117bdc:	200591a4 	.word	0x200591a4

08117be0 <_sbrk_r>:
 8117be0:	b538      	push	{r3, r4, r5, lr}
 8117be2:	2300      	movs	r3, #0
 8117be4:	4d05      	ldr	r5, [pc, #20]	@ (8117bfc <_sbrk_r+0x1c>)
 8117be6:	4604      	mov	r4, r0
 8117be8:	4608      	mov	r0, r1
 8117bea:	602b      	str	r3, [r5, #0]
 8117bec:	f7e9 fab4 	bl	8101158 <_sbrk>
 8117bf0:	1c43      	adds	r3, r0, #1
 8117bf2:	d102      	bne.n	8117bfa <_sbrk_r+0x1a>
 8117bf4:	682b      	ldr	r3, [r5, #0]
 8117bf6:	b103      	cbz	r3, 8117bfa <_sbrk_r+0x1a>
 8117bf8:	6023      	str	r3, [r4, #0]
 8117bfa:	bd38      	pop	{r3, r4, r5, pc}
 8117bfc:	200591a4 	.word	0x200591a4

08117c00 <memchr>:
 8117c00:	b2c9      	uxtb	r1, r1
 8117c02:	4603      	mov	r3, r0
 8117c04:	4402      	add	r2, r0
 8117c06:	b510      	push	{r4, lr}
 8117c08:	4293      	cmp	r3, r2
 8117c0a:	4618      	mov	r0, r3
 8117c0c:	d101      	bne.n	8117c12 <memchr+0x12>
 8117c0e:	2000      	movs	r0, #0
 8117c10:	e003      	b.n	8117c1a <memchr+0x1a>
 8117c12:	7804      	ldrb	r4, [r0, #0]
 8117c14:	3301      	adds	r3, #1
 8117c16:	428c      	cmp	r4, r1
 8117c18:	d1f6      	bne.n	8117c08 <memchr+0x8>
 8117c1a:	bd10      	pop	{r4, pc}

08117c1c <abort>:
 8117c1c:	2006      	movs	r0, #6
 8117c1e:	b508      	push	{r3, lr}
 8117c20:	f000 f82c 	bl	8117c7c <raise>
 8117c24:	2001      	movs	r0, #1
 8117c26:	f7e9 fa1f 	bl	8101068 <_exit>

08117c2a <_raise_r>:
 8117c2a:	291f      	cmp	r1, #31
 8117c2c:	b538      	push	{r3, r4, r5, lr}
 8117c2e:	4605      	mov	r5, r0
 8117c30:	460c      	mov	r4, r1
 8117c32:	d904      	bls.n	8117c3e <_raise_r+0x14>
 8117c34:	2316      	movs	r3, #22
 8117c36:	6003      	str	r3, [r0, #0]
 8117c38:	f04f 30ff 	mov.w	r0, #4294967295
 8117c3c:	bd38      	pop	{r3, r4, r5, pc}
 8117c3e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8117c40:	b112      	cbz	r2, 8117c48 <_raise_r+0x1e>
 8117c42:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8117c46:	b94b      	cbnz	r3, 8117c5c <_raise_r+0x32>
 8117c48:	4628      	mov	r0, r5
 8117c4a:	f000 f831 	bl	8117cb0 <_getpid_r>
 8117c4e:	4622      	mov	r2, r4
 8117c50:	4601      	mov	r1, r0
 8117c52:	4628      	mov	r0, r5
 8117c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8117c58:	f000 b818 	b.w	8117c8c <_kill_r>
 8117c5c:	2b01      	cmp	r3, #1
 8117c5e:	d00a      	beq.n	8117c76 <_raise_r+0x4c>
 8117c60:	1c59      	adds	r1, r3, #1
 8117c62:	d103      	bne.n	8117c6c <_raise_r+0x42>
 8117c64:	2316      	movs	r3, #22
 8117c66:	6003      	str	r3, [r0, #0]
 8117c68:	2001      	movs	r0, #1
 8117c6a:	e7e7      	b.n	8117c3c <_raise_r+0x12>
 8117c6c:	2100      	movs	r1, #0
 8117c6e:	4620      	mov	r0, r4
 8117c70:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8117c74:	4798      	blx	r3
 8117c76:	2000      	movs	r0, #0
 8117c78:	e7e0      	b.n	8117c3c <_raise_r+0x12>
	...

08117c7c <raise>:
 8117c7c:	4b02      	ldr	r3, [pc, #8]	@ (8117c88 <raise+0xc>)
 8117c7e:	4601      	mov	r1, r0
 8117c80:	6818      	ldr	r0, [r3, #0]
 8117c82:	f7ff bfd2 	b.w	8117c2a <_raise_r>
 8117c86:	bf00      	nop
 8117c88:	20050098 	.word	0x20050098

08117c8c <_kill_r>:
 8117c8c:	b538      	push	{r3, r4, r5, lr}
 8117c8e:	2300      	movs	r3, #0
 8117c90:	4d06      	ldr	r5, [pc, #24]	@ (8117cac <_kill_r+0x20>)
 8117c92:	4604      	mov	r4, r0
 8117c94:	4608      	mov	r0, r1
 8117c96:	4611      	mov	r1, r2
 8117c98:	602b      	str	r3, [r5, #0]
 8117c9a:	f7e9 f9d5 	bl	8101048 <_kill>
 8117c9e:	1c43      	adds	r3, r0, #1
 8117ca0:	d102      	bne.n	8117ca8 <_kill_r+0x1c>
 8117ca2:	682b      	ldr	r3, [r5, #0]
 8117ca4:	b103      	cbz	r3, 8117ca8 <_kill_r+0x1c>
 8117ca6:	6023      	str	r3, [r4, #0]
 8117ca8:	bd38      	pop	{r3, r4, r5, pc}
 8117caa:	bf00      	nop
 8117cac:	200591a4 	.word	0x200591a4

08117cb0 <_getpid_r>:
 8117cb0:	f7e9 b9c2 	b.w	8101038 <_getpid>

08117cb4 <_init>:
 8117cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8117cb6:	bf00      	nop
 8117cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8117cba:	bc08      	pop	{r3}
 8117cbc:	469e      	mov	lr, r3
 8117cbe:	4770      	bx	lr

08117cc0 <_fini>:
 8117cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8117cc2:	bf00      	nop
 8117cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8117cc6:	bc08      	pop	{r3}
 8117cc8:	469e      	mov	lr, r3
 8117cca:	4770      	bx	lr
 8117ccc:	0000      	movs	r0, r0
	...

08117cd0 <___tx_thread_secure_mode_stack_allocate_veneer>:
 8117cd0:	f85f f000 	ldr.w	pc, [pc]	@ 8117cd4 <___tx_thread_secure_mode_stack_allocate_veneer+0x4>
 8117cd4:	0c0fe019 	.word	0x0c0fe019

08117cd8 <___tx_thread_secure_stack_context_restore_veneer>:
 8117cd8:	f85f f000 	ldr.w	pc, [pc]	@ 8117cdc <___tx_thread_secure_stack_context_restore_veneer+0x4>
 8117cdc:	0c0fe009 	.word	0x0c0fe009

08117ce0 <___tx_thread_secure_stack_context_save_veneer>:
 8117ce0:	f85f f000 	ldr.w	pc, [pc]	@ 8117ce4 <___tx_thread_secure_stack_context_save_veneer+0x4>
 8117ce4:	0c0fe029 	.word	0x0c0fe029

08117ce8 <___tx_thread_secure_mode_stack_free_veneer>:
 8117ce8:	f85f f000 	ldr.w	pc, [pc]	@ 8117cec <___tx_thread_secure_mode_stack_free_veneer+0x4>
 8117cec:	0c0fe031 	.word	0x0c0fe031

08117cf0 <___tx_thread_secure_mode_stack_initialize_veneer>:
 8117cf0:	f85f f000 	ldr.w	pc, [pc]	@ 8117cf4 <___tx_thread_secure_mode_stack_initialize_veneer+0x4>
 8117cf4:	0c0fe011 	.word	0x0c0fe011
